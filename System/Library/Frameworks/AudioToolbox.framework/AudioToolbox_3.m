void sub_1B6007CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B6007D3C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6007D2CLL);
  JUMPOUT(0x1B6007D5CLL);
}

void sub_1B6007D4C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B6007D54);
  JUMPOUT(0x1B6007D2CLL);
}

void sub_1B6007E0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int buf,int a45,__int128 a46,uint64_t a47,__int128 a48)
{
  NSObject *v48;
  uint64_t v49;
  const char *v50;
  void **p_p;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a15, -1, 0x20u, 0, 0, &__p);
  v50 = " ";
  if (!v49)
    v50 = "";
  buf = 136315906;
  if (a27 >= 0)
    p_p = (void **)&__p;
  else
    p_p = __p;
  WORD2(a46) = 2080;
  *(_QWORD *)((char *)&a46 + 6) = v50;
  HIWORD(a46) = 2080;
  LOWORD(a48) = 2080;
  *(_QWORD *)((char *)&a48 + 2) = p_p;
  _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "%s%sfailed to write downlink %s input - %s", (uint8_t *)&buf, 0x2Au);
  if (a27 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  JUMPOUT(0x1B6007EC0);
}

void vp::vx::Voice_Processor::components_begin_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 288))(v7, a2, a3);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_write_dsp_data<vp::vx::Downlink_Input_Port_ID,AudioTimeStamp const*,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  char v16;

  v4 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    v9 = *v4;
    v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v15 = *a4;
    v16 = *((_BYTE *)a4 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v9 + 296))(v9, a2, a3, &v15);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::read_dsp_data(uint64_t a1, uint64_t a2, AudioBufferList *a3, const AudioBufferList *a4, uint64_t a5)
{
  uint64_t dsp_data;
  uint64_t v12;
  int v13;
  char v14;

  LODWORD(v12) = 11;
  BYTE4(v12) = 0;
  vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *>(a1, a2, (uint64_t)a4);
  dsp_data = vp::vx::Voice_Processor::do_read_dsp_data(a1, a2, a3, a4, a5);
  v13 = dsp_data;
  v14 = BYTE4(dsp_data);
  caulk::expected<unsigned int,vp::vx::Error_Code>::swap(&v13, (int *)&v12);
  vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(a1, a2, (uint64_t)a4, v12);
  return v12;
}

{
  uint64_t dsp_data;
  uint64_t v12;
  int v13;
  char v14;

  LODWORD(v12) = 11;
  BYTE4(v12) = 0;
  vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *>(a1, a2, (uint64_t)a4);
  dsp_data = vp::vx::Voice_Processor::do_read_dsp_data(a1, a2, a3, a4, a5);
  v13 = dsp_data;
  v14 = BYTE4(dsp_data);
  caulk::expected<unsigned int,vp::vx::Error_Code>::swap(&v13, (int *)&v12);
  vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(a1, a2, (uint64_t)a4, v12);
  return v12;
}

void sub_1B6008138(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6008108);
}

void vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 256))(v7, a2, a3);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Uplink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    v9 = *v4;
    v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 264))(v9, a2, a3, a4);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::do_read_dsp_data(uint64_t a1, int a2, AudioBufferList *a3, const AudioBufferList *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t node_commands;
  uint64_t v18;
  NSObject *log;
  _BOOL4 v20;
  vp *log_context_info;
  uint64_t v22;
  NSObject *v23;
  int v24;
  void *v25;
  int id;
  uint64_t v27;
  void **v28;
  const char *v29;
  const char *v30;
  int v31;
  int v32;
  uint64_t log_source_file_path;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  NSObject *v37;
  uint32_t v38;
  vp *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  void *v43;
  int v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  void **v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *__p[2];
  char v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned int v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  vp *v64;
  char v65;
  _DWORD v66[12];
  char v67;
  uint64_t v68;
  char v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  void **v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned int *)(a1 + 1128);
  v68 = a1 + 1128;
  v6 = atomic_load((unsigned int *)(a1 + 1128));
  if (v6 > 0x7FFFFFFE)
  {
LABEL_6:
    v69 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        v11 = __ldaxr(v5);
        if (v11 == v6)
          break;
        __clrex();
        v6 = v11;
        if (v11 >= 0x7FFFFFFF)
          goto LABEL_6;
      }
    }
    while (__stlxr(v6 + 1, v5));
    v69 = 1;
    v14 = *(_QWORD *)(a1 + 2400);
    if (v14)
    {
      if (a2 != 4)
      {
        v12 = 0;
        v13 = 9;
LABEL_63:
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v68);
        return v12 & 0x100000000 | v13;
      }
      v15 = *(_DWORD *)(a1 + 2496);
      if (v15 != -1)
      {
        vp::vx::io::Graph::get_buffered_frame_count(v14, v15, (uint64_t)v66);
        caulk::__expected_detail::base<unsigned int,vp::vx::io::Error>::base((uint64_t)buf, (uint64_t)v66);
        if (!(_BYTE)v80)
        {
          v53 = _os_crash();
          caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v53);
        }
        if ((a5 & 0xFF00000000) != 0)
          v16 = a5;
        else
          v16 = v66[0];
        if (!(_DWORD)v16)
        {
          v13 = 0;
          v12 = 0x100000000;
LABEL_61:
          if (!v67)
            vp::vx::io::Error::~Error((vp::vx::io::Error *)v66);
          goto LABEL_63;
        }
        vp::vx::io::Graph::copy_output(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2496), a3, a4, (AudioTimeStamp *)v16, (uint64_t)&v61);
        if (v65)
        {
          v12 = 0x100000000;
          v13 = v61;
          goto LABEL_61;
        }
        node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v61);
        if (*(char *)(node_commands + 23) >= 0)
          v18 = *(unsigned __int8 *)(node_commands + 23);
        else
          v18 = *(_QWORD *)(node_commands + 8);
        log = vp::get_log((vp *)node_commands);
        v20 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
        if (v18)
        {
          if (v20)
          {
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v58);
            if ((v60 & 0x80u) == 0)
              v22 = v60;
            else
              v22 = v59;
            v23 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = (char)v60;
              v25 = v58;
              id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v61);
              v54 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
              v55 = v27;
              v28 = __p;
              std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v54);
              if (v24 >= 0)
                v25 = &v58;
              if (v22)
                v30 = " ";
              else
                v30 = "";
              if (v57 < 0)
                v28 = (void **)__p[0];
              v31 = v62;
              v32 = v63;
              log_source_file_path = vp::get_log_source_file_path(v64, v29);
              v34 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v61);
              if (*(char *)(v34 + 23) >= 0)
                v35 = v34;
              else
                v35 = *(_QWORD *)v34;
              *(_DWORD *)buf = 136316930;
              v71 = v25;
              v72 = 2080;
              v73 = v30;
              v74 = 2080;
              v75 = "read uplink content DSP client output";
              v76 = 2080;
              v77 = v28;
              v78 = 1024;
              v79 = v31;
              v80 = 1024;
              v81 = v32;
              v82 = 2080;
              v83 = log_source_file_path;
              v84 = 2080;
              v85 = v35;
              v36 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              v37 = v23;
              v38 = 74;
LABEL_54:
              _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_ERROR, v36, buf, v38);
              if (v57 < 0)
                operator delete(__p[0]);
              goto LABEL_56;
            }
            goto LABEL_56;
          }
        }
        else if (v20)
        {
          v39 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v58);
          if ((v60 & 0x80u) == 0)
            v40 = v60;
          else
            v40 = v59;
          v41 = vp::get_log(v39);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            v42 = (char)v60;
            v43 = v58;
            v44 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v61);
            v54 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v44);
            v55 = v45;
            std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v54);
            if (v42 >= 0)
              v43 = &v58;
            if (v40)
              v47 = " ";
            else
              v47 = "";
            if (v57 >= 0)
              v48 = __p;
            else
              v48 = (void **)__p[0];
            v49 = v62;
            v50 = v63;
            v51 = vp::get_log_source_file_path(v64, v46);
            *(_DWORD *)buf = 136316674;
            v71 = v43;
            v72 = 2080;
            v73 = v47;
            v74 = 2080;
            v75 = "read uplink content DSP client output";
            v76 = 2080;
            v77 = v48;
            v78 = 1024;
            v79 = v49;
            v80 = 1024;
            v81 = v50;
            v82 = 2080;
            v83 = v51;
            v36 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            v37 = v41;
            v38 = 64;
            goto LABEL_54;
          }
LABEL_56:
          if ((char)v60 < 0)
            operator delete(v58);
        }
        if (!v65)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v61);
        v12 = 0;
        v13 = 7;
        goto LABEL_61;
      }
    }
  }
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v68);
  v12 = 0;
  v13 = 8;
  return v12 & 0x100000000 | v13;
}

{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  AudioTimeStamp *v12;
  vp *v13;
  NSObject *log;
  void **v15;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  const char *v21;
  uint64_t node_commands;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  _DWORD v27[12];
  char v28;
  uint64_t v29;
  char v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  const char *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned int *)(a1 + 1128);
  v29 = a1 + 1128;
  v6 = atomic_load((unsigned int *)(a1 + 1128));
  if (v6 > 0x7FFFFFFE)
  {
LABEL_6:
    v30 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        v8 = __ldaxr(v5);
        if (v8 == v6)
          break;
        __clrex();
        v6 = v8;
        if (v8 >= 0x7FFFFFFF)
          goto LABEL_6;
      }
    }
    while (__stlxr(v6 + 1, v5));
    v30 = 1;
    v11 = *(_QWORD *)(a1 + 2504);
    if (v11)
    {
      if (a2)
      {
        v9 = 0;
        v10 = 9;
LABEL_37:
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v29);
        return v9 & 0x100000000 | v10;
      }
      if (*(_DWORD *)(a1 + 2652) != -1)
      {
        a4[2].mBuffers[0].mNumberChannels &= ~1u;
        if ((a5 & 0xFF00000000) != 0)
        {
          v12 = (AudioTimeStamp *)*(unsigned int *)(a1 + 2656);
          if ((_DWORD)v12 != (_DWORD)a5)
          {
            v9 = 0;
            v10 = 1;
            goto LABEL_37;
          }
        }
        else
        {
          v12 = (AudioTimeStamp *)*(unsigned int *)(a1 + 2656);
        }
        vp::vx::io::Graph::copy_output(v11, *(_DWORD *)(a1 + 2652), a3, a4, v12, (uint64_t)v27);
        if (v28)
        {
          v9 = 0x100000000;
          v10 = v27[0];
        }
        else
        {
          log = vp::get_log(v13);
          if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
          {
            v15 = __p;
            log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
            v17 = v26;
            v18 = __p[1];
            v19 = vp::get_log(log_context_info);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              if ((v17 & 0x80u) == 0)
                v20 = v17;
              else
                v20 = (unint64_t)v18;
              if ((v26 & 0x80u) != 0)
                v15 = (void **)__p[0];
              if (v20)
                v21 = " ";
              else
                v21 = "";
              node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v27);
              if (*(char *)(node_commands + 23) >= 0)
                v23 = node_commands;
              else
                v23 = *(_QWORD *)node_commands;
              *(_DWORD *)buf = 136315650;
              v32 = v15;
              v33 = 2080;
              v34 = v21;
              v35 = 32;
              v36 = 8;
              v37 = v23;
              _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to read downlink hardware DSP output - %s", buf, 0x20u);
            }
            if ((char)v26 < 0)
              operator delete(__p[0]);
          }
          if (!v28)
            vp::vx::io::Error::~Error((vp::vx::io::Error *)v27);
          v9 = 0;
          v10 = 7;
        }
        goto LABEL_37;
      }
    }
  }
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v29);
  v9 = 0;
  v10 = 8;
  return v9 & 0x100000000 | v10;
}

void sub_1B6008770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0)
    operator delete(__p);
  if (!a26)
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a20);
  if (!a36)
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a28);
  std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1B6008884(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6008854);
}

void vp::vx::Voice_Processor::components_begin_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 304))(v7, a2, a3);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_read_dsp_data<vp::vx::Downlink_Output_Port_ID,AudioTimeStamp *,vp::Expected<unsigned int,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v4 != i; v4 += 2)
  {
    v9 = *v4;
    v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 312))(v9, a2, a3, a4);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void vp::vx::Voice_Processor::run_dsp(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  char v7;
  int v8;
  char v9;

  *(_DWORD *)a3 = 9;
  *(_BYTE *)(a3 + 4) = 0;
  vp::vx::Voice_Processor::components_begin_process<vp::vx::Uplink_Node_ID>((uint64_t)a1, a2);
  if (!(_DWORD)a2)
  {
    vp::vx::Voice_Processor::run_all_of_uplink_dsp(a1, (uint64_t)&v8);
    if (v9)
      *(_BYTE *)(a3 + 4) = v9;
    else
      *(_DWORD *)a3 = v8;
  }
  v6 = *(_DWORD *)a3;
  v7 = *(_BYTE *)(a3 + 4);
  vp::vx::Voice_Processor::components_end_process<vp::vx::Uplink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>((uint64_t)a1, a2, &v6);
}

{
  int v6;
  char v7;
  int v8;
  char v9;

  *(_DWORD *)a3 = 9;
  *(_BYTE *)(a3 + 4) = 0;
  vp::vx::Voice_Processor::components_begin_process<vp::vx::Downlink_Node_ID>((uint64_t)a1, a2);
  if (!(_DWORD)a2)
  {
    vp::vx::Voice_Processor::run_all_of_downlink_dsp(a1, (uint64_t)&v8);
    if (v9)
      *(_BYTE *)(a3 + 4) = v9;
    else
      *(_DWORD *)a3 = v8;
  }
  v6 = *(_DWORD *)a3;
  v7 = *(_BYTE *)(a3 + 4);
  vp::vx::Voice_Processor::components_end_process<vp::vx::Downlink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>((uint64_t)a1, a2, &v6);
}

void vp::vx::Voice_Processor::components_begin_process<vp::vx::Uplink_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::run_all_of_uplink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  NSObject *log;
  vp *log_context_info;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _BYTE *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  vp *v23;
  vp *v24;
  NSObject *v25;
  int v26;
  void *v27;
  int v28;
  vp *v29;
  const char *v30;
  const char *v31;
  void *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _BOOL4 v44;
  vp *v45;
  vp *v46;
  NSObject *v47;
  int v48;
  void *p_p;
  int v50;
  vp *v51;
  const char *v52;
  const char *v53;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  NSObject *v61;
  uint32_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  _BOOL4 v66;
  vp *v67;
  vp *v68;
  NSObject *v69;
  int v70;
  void *p_dst;
  int v72;
  vp *v73;
  const char *v74;
  const char *v75;
  void *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  _BOOL4 v88;
  vp *v89;
  vp *v90;
  NSObject *v91;
  int v92;
  void *v93;
  int v94;
  vp *v95;
  const char *v96;
  const char *v97;
  void *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  NSObject *v105;
  uint32_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  _BOOL4 v110;
  vp *v111;
  vp *v112;
  NSObject *v113;
  int v114;
  void *v115;
  int v116;
  vp *v117;
  const char *v118;
  const char *v119;
  void *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  NSObject *v127;
  uint32_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  _BOOL4 v132;
  vp *v133;
  vp *v134;
  NSObject *v135;
  int v136;
  void *v137;
  int v138;
  vp *v139;
  const char *v140;
  const char *v141;
  void *v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  NSObject *v149;
  uint32_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  _BOOL4 v154;
  vp *v155;
  vp *v156;
  NSObject *v157;
  int v158;
  void *v159;
  int v160;
  uint64_t v161;
  const char *v162;
  const char *v163;
  void *v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  NSObject *v171;
  uint32_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  _BOOL4 v176;
  vp *v177;
  vp *v178;
  NSObject *v179;
  int v180;
  void *v181;
  int v182;
  uint64_t v183;
  const char *v184;
  const char *v185;
  void *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  NSObject *v193;
  uint32_t v194;
  uint64_t node_commands;
  uint64_t v196;
  NSObject *v197;
  _BOOL4 v198;
  vp *v199;
  uint64_t v200;
  NSObject *v201;
  int v202;
  void *v203;
  int id;
  uint64_t v205;
  const char *v206;
  const char *v207;
  void *v208;
  int v209;
  int v210;
  uint64_t log_source_file_path;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  NSObject *v215;
  uint32_t v216;
  vp *v217;
  vp *v218;
  NSObject *v219;
  int v220;
  void **v221;
  int v222;
  vp *v223;
  const char *v224;
  void **v225;
  const char *v226;
  void *v227;
  int v228;
  int v229;
  uint64_t v230;
  vp *v231;
  vp *v232;
  NSObject *v233;
  int v234;
  void **v235;
  int v236;
  vp *v237;
  const char *v238;
  void **v239;
  const char *v240;
  void *v241;
  int v242;
  int v243;
  uint64_t v244;
  vp *v245;
  vp *v246;
  NSObject *v247;
  int v248;
  void **v249;
  int v250;
  vp *v251;
  const char *v252;
  void **v253;
  const char *v254;
  void *v255;
  int v256;
  int v257;
  uint64_t v258;
  vp *v259;
  vp *v260;
  NSObject *v261;
  int v262;
  void **v263;
  int v264;
  vp *v265;
  const char *v266;
  void **v267;
  const char *v268;
  void *v269;
  int v270;
  int v271;
  uint64_t v272;
  vp *v273;
  vp *v274;
  NSObject *v275;
  int v276;
  void **v277;
  int v278;
  vp *v279;
  const char *v280;
  void **v281;
  const char *v282;
  void *v283;
  int v284;
  int v285;
  uint64_t v286;
  vp *v287;
  vp *v288;
  NSObject *v289;
  int v290;
  void **v291;
  int v292;
  vp *v293;
  const char *v294;
  void **v295;
  const char *v296;
  void *v297;
  int v298;
  int v299;
  uint64_t v300;
  vp *v301;
  vp *v302;
  NSObject *v303;
  int v304;
  void **v305;
  int v306;
  uint64_t v307;
  const char *v308;
  void **v309;
  const char *v310;
  void *v311;
  int v312;
  int v313;
  uint64_t v314;
  vp *v315;
  vp *v316;
  NSObject *v317;
  int v318;
  void **v319;
  int v320;
  uint64_t v321;
  const char *v322;
  void **v323;
  const char *v324;
  void *v325;
  int v326;
  int v327;
  uint64_t v328;
  vp *v329;
  uint64_t v330;
  NSObject *v331;
  int v332;
  void **v333;
  int v334;
  uint64_t v335;
  const char *v336;
  void **v337;
  const char *v338;
  void *v339;
  int v340;
  int v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  char v347;
  void *v348;
  vp *v349;
  unsigned __int8 v350;
  void *v351;
  vp *v352;
  unsigned __int8 v353;
  char v354;
  void *v355;
  uint64_t v356;
  unsigned __int8 v357;
  void *v358;
  vp *v359;
  unsigned __int8 v360;
  char v361;
  void *v362;
  vp *v363;
  unsigned __int8 v364;
  char v365;
  void *v366;
  vp *v367;
  unsigned __int8 v368;
  char v369;
  void *__dst;
  vp *v371;
  unsigned __int8 v372;
  char v373;
  void *__p;
  vp *v375;
  unsigned __int8 v376;
  char v377;
  void *v378;
  vp *v379;
  unsigned __int8 v380;
  char v381;
  _BYTE v382[4];
  unsigned __int16 v383;
  unsigned __int16 v384;
  vp *v385;
  char v386;
  char *v387;
  char v388;
  _BYTE v389[22];
  __int16 v390;
  const char *v391;
  __int16 v392;
  void *v393;
  __int16 v394;
  int v395;
  __int16 v396;
  int v397;
  __int16 v398;
  uint64_t v399;
  __int16 v400;
  uint64_t v401;
  uint8_t buf[4];
  _BYTE *v403;
  __int16 v404;
  const char *v405;
  char v406;
  uint64_t v407;

  v407 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)((char *)this + 1128);
  v387 = (char *)this + 1128;
  v4 = atomic_load((unsigned int *)this + 282);
  if (v4 > 0x7FFFFFFE)
  {
LABEL_6:
    v388 = 0;
    goto LABEL_57;
  }
  do
  {
    while (1)
    {
      v6 = __ldaxr(v3);
      if (v6 == v4)
        break;
      __clrex();
      v4 = v6;
      if (v6 >= 0x7FFFFFFF)
        goto LABEL_6;
    }
  }
  while (__stlxr(v4 + 1, v3));
  v388 = 1;
  v7 = *((_QWORD *)this + 300);
  if (!v7)
  {
    log = vp::get_log(this);
    if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v389);
      v13 = HIBYTE(v390);
      v14 = *(_QWORD *)&v389[8];
      v15 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        if ((v13 & 0x80u) == 0)
          v16 = v13;
        else
          v16 = v14;
        v17 = *(_BYTE **)v389;
        if (v390 >= 0)
          v17 = v389;
        if (v16)
          v18 = " ";
        else
          v18 = "";
        *(_DWORD *)buf = 136315394;
        v403 = v17;
        v404 = 2080;
        v405 = v18;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_FAULT, "%s%scannot run uplink DSP with uninitialized VoiceProcessor", buf, 0x16u);
      }
      if (SHIBYTE(v390) < 0)
        operator delete(*(void **)v389);
    }
    goto LABEL_57;
  }
  v8 = *((_DWORD *)this + 195);
  if (!v8)
  {
LABEL_57:
    *(_DWORD *)a2 = 8;
    *(_BYTE *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v387);
  }
  if (v8 != 2)
  {
    if (v8 != 1)
      goto LABEL_16;
    *((_DWORD *)this + 195) = 2;
  }
  if (*((_BYTE *)this + 2409))
  {
    *((_BYTE *)this + 2409) = 0;
  }
  else
  {
    vp::vx::io::Graph::reset(v7, *((_DWORD *)this + 608), (uint64_t)v389);
    if (!(_BYTE)v396)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v389);
  }
LABEL_16:
  vp::vx::io::Graph::get_buffered_frame_count(v7, *((unsigned int *)this + 608), 0, (uint64_t)buf);
  if (v406)
  {
    vp::vx::io::Graph::process(v7, *((_DWORD *)this + 608), *(int *)buf, v382);
    if (v386)
    {
      vp::vx::io::Graph::get_buffered_frame_count(v7, *((_DWORD *)this + 609), 0, (uint64_t)&v378);
      if (v381)
      {
        vp::vx::io::Graph::process(v7, *((_DWORD *)this + 609), (int)v378, &__p);
        if (v377)
        {
          vp::vx::io::Graph::get_buffered_frame_count(v7, *((_DWORD *)this + 610), 0, (uint64_t)&__dst);
          if (v373)
          {
            vp::vx::io::Graph::get_expected_output_frame_count(v7, *((_DWORD *)this + 610), __dst, (uint64_t)&v366);
            if (v369)
            {
              vp::vx::io::Graph::process(v7, *((_DWORD *)this + 610), (int)v366, &v362);
              if (v365)
              {
                vp::vx::io::Graph::get_buffered_frame_count(v7, *((_DWORD *)this + 611), 0, (uint64_t)&v358);
                if (v361)
                {
                  vp::vx::io::Graph::process(v7, *((_DWORD *)this + 611), (int)v358, &v351);
                  if (v354)
                  {
                    v9 = 0;
                    goto LABEL_26;
                  }
                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v348, (const vp::vx::io::Error *)&v351);
                  node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v348);
                  if (*(char *)(node_commands + 23) >= 0)
                    v196 = *(unsigned __int8 *)(node_commands + 23);
                  else
                    v196 = *(_QWORD *)(node_commands + 8);
                  v197 = vp::get_log((vp *)node_commands);
                  v198 = os_log_type_enabled(v197, OS_LOG_TYPE_ERROR);
                  if (v196)
                  {
                    if (!v198)
                      goto LABEL_427;
                    v199 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v355);
                    if ((v357 & 0x80u) == 0)
                      v200 = v357;
                    else
                      v200 = v356;
                    v201 = vp::get_log(v199);
                    if (!os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
                      goto LABEL_425;
                    v202 = (char)v357;
                    v203 = v355;
                    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v348);
                    v343 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
                    v344 = v205;
                    std::string::basic_string<std::string_view,0>(&v345, (uint64_t)&v343);
                    if (v202 >= 0)
                      v203 = &v355;
                    if (v200)
                      v207 = " ";
                    else
                      v207 = "";
                    if (v347 >= 0)
                      v208 = &v345;
                    else
                      v208 = v345;
                    v209 = WORD2(v348);
                    v210 = HIWORD(v348);
                    log_source_file_path = vp::get_log_source_file_path(v349, v206);
                    v212 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v348);
                    if (*(char *)(v212 + 23) >= 0)
                      v213 = v212;
                    else
                      v213 = *(_QWORD *)v212;
                    *(_DWORD *)v389 = 136316930;
                    *(_QWORD *)&v389[4] = v203;
                    *(_WORD *)&v389[12] = 2080;
                    *(_QWORD *)&v389[14] = v207;
                    v390 = 2080;
                    v391 = "process uplink content DSP";
                    v392 = 2080;
                    v393 = v208;
                    v394 = 1024;
                    v395 = v209;
                    v396 = 1024;
                    v397 = v210;
                    v398 = 2080;
                    v399 = log_source_file_path;
                    v400 = 2080;
                    v401 = v213;
                    v214 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    v215 = v201;
                    v216 = 74;
                  }
                  else
                  {
                    if (!v198)
                      goto LABEL_427;
                    v329 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v355);
                    if ((v357 & 0x80u) == 0)
                      v330 = v357;
                    else
                      v330 = v356;
                    v331 = vp::get_log(v329);
                    if (!os_log_type_enabled(v331, OS_LOG_TYPE_ERROR))
                    {
LABEL_425:
                      if ((char)v357 < 0)
                        operator delete(v355);
LABEL_427:
                      *(_DWORD *)a2 = 7;
                      *(_BYTE *)(a2 + 4) = 0;
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v348);
                      if (v354)
                      {
LABEL_429:
                        v9 = 1;
LABEL_26:
                        if (!v361)
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v358);
                        goto LABEL_28;
                      }
LABEL_428:
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v351);
                      goto LABEL_429;
                    }
                    v332 = (char)v357;
                    v333 = (void **)v355;
                    v334 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v348);
                    v343 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v334);
                    v344 = v335;
                    std::string::basic_string<std::string_view,0>(&v345, (uint64_t)&v343);
                    if (v332 >= 0)
                      v337 = &v355;
                    else
                      v337 = v333;
                    if (v330)
                      v338 = " ";
                    else
                      v338 = "";
                    if (v347 >= 0)
                      v339 = &v345;
                    else
                      v339 = v345;
                    v340 = WORD2(v348);
                    v341 = HIWORD(v348);
                    v342 = vp::get_log_source_file_path(v349, v336);
                    *(_DWORD *)v389 = 136316674;
                    *(_QWORD *)&v389[4] = v337;
                    *(_WORD *)&v389[12] = 2080;
                    *(_QWORD *)&v389[14] = v338;
                    v390 = 2080;
                    v391 = "process uplink content DSP";
                    v392 = 2080;
                    v393 = v339;
                    v394 = 1024;
                    v395 = v340;
                    v396 = 1024;
                    v397 = v341;
                    v398 = 2080;
                    v399 = v342;
                    v214 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    v215 = v331;
                    v216 = 64;
                  }
                  _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_ERROR, v214, v389, v216);
                  if (v347 < 0)
                    operator delete(v345);
                  goto LABEL_425;
                }
                vp::vx::io::Error::Error((vp::vx::io::Error *)&v351, (const vp::vx::io::Error *)&v358);
                v173 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v351);
                if (*(char *)(v173 + 23) >= 0)
                  v174 = *(unsigned __int8 *)(v173 + 23);
                else
                  v174 = *(_QWORD *)(v173 + 8);
                v175 = vp::get_log((vp *)v173);
                v176 = os_log_type_enabled(v175, OS_LOG_TYPE_ERROR);
                if (v174)
                {
                  if (v176)
                  {
                    v177 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v348);
                    if ((v350 & 0x80u) == 0)
                      v178 = (vp *)v350;
                    else
                      v178 = v349;
                    v179 = vp::get_log(v177);
                    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                    {
                      v180 = (char)v350;
                      v181 = v348;
                      v182 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v351);
                      v345 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v182);
                      v346 = v183;
                      std::string::basic_string<std::string_view,0>(&v355, (uint64_t)&v345);
                      if (v180 >= 0)
                        v181 = &v348;
                      if (v178)
                        v185 = " ";
                      else
                        v185 = "";
                      if ((v357 & 0x80u) == 0)
                        v186 = &v355;
                      else
                        v186 = v355;
                      v187 = WORD2(v351);
                      v188 = HIWORD(v351);
                      v189 = vp::get_log_source_file_path(v352, v184);
                      v190 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v351);
                      if (*(char *)(v190 + 23) >= 0)
                        v191 = v190;
                      else
                        v191 = *(_QWORD *)v190;
                      *(_DWORD *)v389 = 136316930;
                      *(_QWORD *)&v389[4] = v181;
                      *(_WORD *)&v389[12] = 2080;
                      *(_QWORD *)&v389[14] = v185;
                      v390 = 2080;
                      v391 = "get buffered input frame count for uplink content DSP node";
                      v392 = 2080;
                      v393 = v186;
                      v394 = 1024;
                      v395 = v187;
                      v396 = 1024;
                      v397 = v188;
                      v398 = 2080;
                      v399 = v189;
                      v400 = 2080;
                      v401 = v191;
                      v192 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                      v193 = v179;
                      v194 = 74;
                      goto LABEL_403;
                    }
                    goto LABEL_405;
                  }
                }
                else if (v176)
                {
                  v315 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v348);
                  if ((v350 & 0x80u) == 0)
                    v316 = (vp *)v350;
                  else
                    v316 = v349;
                  v317 = vp::get_log(v315);
                  if (os_log_type_enabled(v317, OS_LOG_TYPE_ERROR))
                  {
                    v318 = (char)v350;
                    v319 = (void **)v348;
                    v320 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v351);
                    v345 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v320);
                    v346 = v321;
                    std::string::basic_string<std::string_view,0>(&v355, (uint64_t)&v345);
                    if (v318 >= 0)
                      v323 = &v348;
                    else
                      v323 = v319;
                    if (v316)
                      v324 = " ";
                    else
                      v324 = "";
                    if ((v357 & 0x80u) == 0)
                      v325 = &v355;
                    else
                      v325 = v355;
                    v326 = WORD2(v351);
                    v327 = HIWORD(v351);
                    v328 = vp::get_log_source_file_path(v352, v322);
                    *(_DWORD *)v389 = 136316674;
                    *(_QWORD *)&v389[4] = v323;
                    *(_WORD *)&v389[12] = 2080;
                    *(_QWORD *)&v389[14] = v324;
                    v390 = 2080;
                    v391 = "get buffered input frame count for uplink content DSP node";
                    v392 = 2080;
                    v393 = v325;
                    v394 = 1024;
                    v395 = v326;
                    v396 = 1024;
                    v397 = v327;
                    v398 = 2080;
                    v399 = v328;
                    v192 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    v193 = v317;
                    v194 = 64;
LABEL_403:
                    _os_log_impl(&dword_1B5ED0000, v193, OS_LOG_TYPE_ERROR, v192, v389, v194);
                    if ((char)v357 < 0)
                      operator delete(v355);
                  }
LABEL_405:
                  if ((char)v350 < 0)
                    operator delete(v348);
                }
                *(_DWORD *)a2 = 7;
                *(_BYTE *)(a2 + 4) = 0;
                goto LABEL_428;
              }
              vp::vx::io::Error::Error((vp::vx::io::Error *)&v358, (const vp::vx::io::Error *)&v362);
              v151 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v358);
              if (*(char *)(v151 + 23) >= 0)
                v152 = *(unsigned __int8 *)(v151 + 23);
              else
                v152 = *(_QWORD *)(v151 + 8);
              v153 = vp::get_log((vp *)v151);
              v154 = os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
              if (v152)
              {
                if (v154)
                {
                  v155 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v351);
                  if ((v353 & 0x80u) == 0)
                    v156 = (vp *)v353;
                  else
                    v156 = v352;
                  v157 = vp::get_log(v155);
                  if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                  {
                    v158 = (char)v353;
                    v159 = v351;
                    v160 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v358);
                    v355 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v160);
                    v356 = v161;
                    std::string::basic_string<std::string_view,0>(&v348, (uint64_t)&v355);
                    if (v158 >= 0)
                      v159 = &v351;
                    if (v156)
                      v163 = " ";
                    else
                      v163 = "";
                    if ((v350 & 0x80u) == 0)
                      v164 = &v348;
                    else
                      v164 = v348;
                    v165 = WORD2(v358);
                    v166 = HIWORD(v358);
                    v167 = vp::get_log_source_file_path(v359, v162);
                    v168 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v358);
                    if (*(char *)(v168 + 23) >= 0)
                      v169 = v168;
                    else
                      v169 = *(_QWORD *)v168;
                    *(_DWORD *)v389 = 136316930;
                    *(_QWORD *)&v389[4] = v159;
                    *(_WORD *)&v389[12] = 2080;
                    *(_QWORD *)&v389[14] = v163;
                    v390 = 2080;
                    v391 = "process uplink echo DSP";
                    v392 = 2080;
                    v393 = v164;
                    v394 = 1024;
                    v395 = v165;
                    v396 = 1024;
                    v397 = v166;
                    v398 = 2080;
                    v399 = v167;
                    v400 = 2080;
                    v401 = v169;
                    v170 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    v171 = v157;
                    v172 = 74;
                    goto LABEL_383;
                  }
                  goto LABEL_385;
                }
              }
              else if (v154)
              {
                v301 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v351);
                if ((v353 & 0x80u) == 0)
                  v302 = (vp *)v353;
                else
                  v302 = v352;
                v303 = vp::get_log(v301);
                if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
                {
                  v304 = (char)v353;
                  v305 = (void **)v351;
                  v306 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v358);
                  v355 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v306);
                  v356 = v307;
                  std::string::basic_string<std::string_view,0>(&v348, (uint64_t)&v355);
                  if (v304 >= 0)
                    v309 = &v351;
                  else
                    v309 = v305;
                  if (v302)
                    v310 = " ";
                  else
                    v310 = "";
                  if ((v350 & 0x80u) == 0)
                    v311 = &v348;
                  else
                    v311 = v348;
                  v312 = WORD2(v358);
                  v313 = HIWORD(v358);
                  v314 = vp::get_log_source_file_path(v359, v308);
                  *(_DWORD *)v389 = 136316674;
                  *(_QWORD *)&v389[4] = v309;
                  *(_WORD *)&v389[12] = 2080;
                  *(_QWORD *)&v389[14] = v310;
                  v390 = 2080;
                  v391 = "process uplink echo DSP";
                  v392 = 2080;
                  v393 = v311;
                  v394 = 1024;
                  v395 = v312;
                  v396 = 1024;
                  v397 = v313;
                  v398 = 2080;
                  v399 = v314;
                  v170 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                  v171 = v303;
                  v172 = 64;
LABEL_383:
                  _os_log_impl(&dword_1B5ED0000, v171, OS_LOG_TYPE_ERROR, v170, v389, v172);
                  if ((char)v350 < 0)
                    operator delete(v348);
                }
LABEL_385:
                if ((char)v353 < 0)
                  operator delete(v351);
              }
              *(_DWORD *)a2 = 7;
              *(_BYTE *)(a2 + 4) = 0;
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v358);
              v9 = 1;
LABEL_28:
              if (!v365)
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v362);
              goto LABEL_30;
            }
            vp::vx::io::Error::Error((vp::vx::io::Error *)&v362, (const vp::vx::io::Error *)&v366);
            v129 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v362);
            if (*(char *)(v129 + 23) >= 0)
              v130 = *(unsigned __int8 *)(v129 + 23);
            else
              v130 = *(_QWORD *)(v129 + 8);
            v131 = vp::get_log((vp *)v129);
            v132 = os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
            if (v130)
            {
              if (v132)
              {
                v133 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v358);
                if ((v360 & 0x80u) == 0)
                  v134 = (vp *)v360;
                else
                  v134 = v359;
                v135 = vp::get_log(v133);
                if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
                {
                  v136 = (char)v360;
                  v137 = v358;
                  v138 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v362);
                  v348 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v138);
                  v349 = v139;
                  std::string::basic_string<std::string_view,0>(&v351, (uint64_t)&v348);
                  if (v136 >= 0)
                    v137 = &v358;
                  if (v134)
                    v141 = " ";
                  else
                    v141 = "";
                  if ((v353 & 0x80u) == 0)
                    v142 = &v351;
                  else
                    v142 = v351;
                  v143 = WORD2(v362);
                  v144 = HIWORD(v362);
                  v145 = vp::get_log_source_file_path(v363, v140);
                  v146 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v362);
                  if (*(char *)(v146 + 23) >= 0)
                    v147 = v146;
                  else
                    v147 = *(_QWORD *)v146;
                  *(_DWORD *)v389 = 136316930;
                  *(_QWORD *)&v389[4] = v137;
                  *(_WORD *)&v389[12] = 2080;
                  *(_QWORD *)&v389[14] = v141;
                  v390 = 2080;
                  v391 = "get uplink echo DSP I/O block size";
                  v392 = 2080;
                  v393 = v142;
                  v394 = 1024;
                  v395 = v143;
                  v396 = 1024;
                  v397 = v144;
                  v398 = 2080;
                  v399 = v145;
                  v400 = 2080;
                  v401 = v147;
                  v148 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                  v149 = v135;
                  v150 = 74;
                  goto LABEL_363;
                }
                goto LABEL_365;
              }
            }
            else if (v132)
            {
              v287 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v358);
              if ((v360 & 0x80u) == 0)
                v288 = (vp *)v360;
              else
                v288 = v359;
              v289 = vp::get_log(v287);
              if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
              {
                v290 = (char)v360;
                v291 = (void **)v358;
                v292 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v362);
                v348 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v292);
                v349 = v293;
                std::string::basic_string<std::string_view,0>(&v351, (uint64_t)&v348);
                if (v290 >= 0)
                  v295 = &v358;
                else
                  v295 = v291;
                if (v288)
                  v296 = " ";
                else
                  v296 = "";
                if ((v353 & 0x80u) == 0)
                  v297 = &v351;
                else
                  v297 = v351;
                v298 = WORD2(v362);
                v299 = HIWORD(v362);
                v300 = vp::get_log_source_file_path(v363, v294);
                *(_DWORD *)v389 = 136316674;
                *(_QWORD *)&v389[4] = v295;
                *(_WORD *)&v389[12] = 2080;
                *(_QWORD *)&v389[14] = v296;
                v390 = 2080;
                v391 = "get uplink echo DSP I/O block size";
                v392 = 2080;
                v393 = v297;
                v394 = 1024;
                v395 = v298;
                v396 = 1024;
                v397 = v299;
                v398 = 2080;
                v399 = v300;
                v148 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                v149 = v289;
                v150 = 64;
LABEL_363:
                _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_ERROR, v148, v389, v150);
                if ((char)v353 < 0)
                  operator delete(v351);
              }
LABEL_365:
              if ((char)v360 < 0)
                operator delete(v358);
            }
            *(_DWORD *)a2 = 7;
            *(_BYTE *)(a2 + 4) = 0;
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v362);
            v9 = 1;
LABEL_30:
            if (!v369)
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v366);
            goto LABEL_32;
          }
          vp::vx::io::Error::Error((vp::vx::io::Error *)&v366, (const vp::vx::io::Error *)&__dst);
          v107 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v366);
          if (*(char *)(v107 + 23) >= 0)
            v108 = *(unsigned __int8 *)(v107 + 23);
          else
            v108 = *(_QWORD *)(v107 + 8);
          v109 = vp::get_log((vp *)v107);
          v110 = os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
          if (v108)
          {
            if (v110)
            {
              v111 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v362);
              if ((v364 & 0x80u) == 0)
                v112 = (vp *)v364;
              else
                v112 = v363;
              v113 = vp::get_log(v111);
              if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
              {
                v114 = (char)v364;
                v115 = v362;
                v116 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v366);
                v351 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v116);
                v352 = v117;
                std::string::basic_string<std::string_view,0>(&v358, (uint64_t)&v351);
                if (v114 >= 0)
                  v115 = &v362;
                if (v112)
                  v119 = " ";
                else
                  v119 = "";
                if ((v360 & 0x80u) == 0)
                  v120 = &v358;
                else
                  v120 = v358;
                v121 = WORD2(v366);
                v122 = HIWORD(v366);
                v123 = vp::get_log_source_file_path(v367, v118);
                v124 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v366);
                if (*(char *)(v124 + 23) >= 0)
                  v125 = v124;
                else
                  v125 = *(_QWORD *)v124;
                *(_DWORD *)v389 = 136316930;
                *(_QWORD *)&v389[4] = v115;
                *(_WORD *)&v389[12] = 2080;
                *(_QWORD *)&v389[14] = v119;
                v390 = 2080;
                v391 = "get buffered input frame count for uplink echo DSP node";
                v392 = 2080;
                v393 = v120;
                v394 = 1024;
                v395 = v121;
                v396 = 1024;
                v397 = v122;
                v398 = 2080;
                v399 = v123;
                v400 = 2080;
                v401 = v125;
                v126 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                v127 = v113;
                v128 = 74;
                goto LABEL_343;
              }
              goto LABEL_345;
            }
          }
          else if (v110)
          {
            v273 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v362);
            if ((v364 & 0x80u) == 0)
              v274 = (vp *)v364;
            else
              v274 = v363;
            v275 = vp::get_log(v273);
            if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
            {
              v276 = (char)v364;
              v277 = (void **)v362;
              v278 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v366);
              v351 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v278);
              v352 = v279;
              std::string::basic_string<std::string_view,0>(&v358, (uint64_t)&v351);
              if (v276 >= 0)
                v281 = &v362;
              else
                v281 = v277;
              if (v274)
                v282 = " ";
              else
                v282 = "";
              if ((v360 & 0x80u) == 0)
                v283 = &v358;
              else
                v283 = v358;
              v284 = WORD2(v366);
              v285 = HIWORD(v366);
              v286 = vp::get_log_source_file_path(v367, v280);
              *(_DWORD *)v389 = 136316674;
              *(_QWORD *)&v389[4] = v281;
              *(_WORD *)&v389[12] = 2080;
              *(_QWORD *)&v389[14] = v282;
              v390 = 2080;
              v391 = "get buffered input frame count for uplink echo DSP node";
              v392 = 2080;
              v393 = v283;
              v394 = 1024;
              v395 = v284;
              v396 = 1024;
              v397 = v285;
              v398 = 2080;
              v399 = v286;
              v126 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
              v127 = v275;
              v128 = 64;
LABEL_343:
              _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_ERROR, v126, v389, v128);
              if ((char)v360 < 0)
                operator delete(v358);
            }
LABEL_345:
            if ((char)v364 < 0)
              operator delete(v362);
          }
          *(_DWORD *)a2 = 7;
          *(_BYTE *)(a2 + 4) = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v366);
          v9 = 1;
LABEL_32:
          if (!v373)
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
          goto LABEL_34;
        }
        vp::vx::io::Error::Error((vp::vx::io::Error *)&__dst, (const vp::vx::io::Error *)&__p);
        v85 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
        if (*(char *)(v85 + 23) >= 0)
          v86 = *(unsigned __int8 *)(v85 + 23);
        else
          v86 = *(_QWORD *)(v85 + 8);
        v87 = vp::get_log((vp *)v85);
        v88 = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
        if (v86)
        {
          if (v88)
          {
            v89 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v366);
            if ((v368 & 0x80u) == 0)
              v90 = (vp *)v368;
            else
              v90 = v367;
            v91 = vp::get_log(v89);
            if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            {
              v92 = (char)v368;
              v93 = v366;
              v94 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
              v358 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v94);
              v359 = v95;
              std::string::basic_string<std::string_view,0>(&v362, (uint64_t)&v358);
              if (v92 >= 0)
                v93 = &v366;
              if (v90)
                v97 = " ";
              else
                v97 = "";
              if ((v364 & 0x80u) == 0)
                v98 = &v362;
              else
                v98 = v362;
              v99 = WORD2(__dst);
              v100 = HIWORD(__dst);
              v101 = vp::get_log_source_file_path(v371, v96);
              v102 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
              if (*(char *)(v102 + 23) >= 0)
                v103 = v102;
              else
                v103 = *(_QWORD *)v102;
              *(_DWORD *)v389 = 136316930;
              *(_QWORD *)&v389[4] = v93;
              *(_WORD *)&v389[12] = 2080;
              *(_QWORD *)&v389[14] = v97;
              v390 = 2080;
              v391 = "process uplink hardware DSP";
              v392 = 2080;
              v393 = v98;
              v394 = 1024;
              v395 = v99;
              v396 = 1024;
              v397 = v100;
              v398 = 2080;
              v399 = v101;
              v400 = 2080;
              v401 = v103;
              v104 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              v105 = v91;
              v106 = 74;
              goto LABEL_323;
            }
            goto LABEL_325;
          }
        }
        else if (v88)
        {
          v259 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v366);
          if ((v368 & 0x80u) == 0)
            v260 = (vp *)v368;
          else
            v260 = v367;
          v261 = vp::get_log(v259);
          if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
          {
            v262 = (char)v368;
            v263 = (void **)v366;
            v264 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
            v358 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v264);
            v359 = v265;
            std::string::basic_string<std::string_view,0>(&v362, (uint64_t)&v358);
            if (v262 >= 0)
              v267 = &v366;
            else
              v267 = v263;
            if (v260)
              v268 = " ";
            else
              v268 = "";
            if ((v364 & 0x80u) == 0)
              v269 = &v362;
            else
              v269 = v362;
            v270 = WORD2(__dst);
            v271 = HIWORD(__dst);
            v272 = vp::get_log_source_file_path(v371, v266);
            *(_DWORD *)v389 = 136316674;
            *(_QWORD *)&v389[4] = v267;
            *(_WORD *)&v389[12] = 2080;
            *(_QWORD *)&v389[14] = v268;
            v390 = 2080;
            v391 = "process uplink hardware DSP";
            v392 = 2080;
            v393 = v269;
            v394 = 1024;
            v395 = v270;
            v396 = 1024;
            v397 = v271;
            v398 = 2080;
            v399 = v272;
            v104 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            v105 = v261;
            v106 = 64;
LABEL_323:
            _os_log_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_ERROR, v104, v389, v106);
            if ((char)v364 < 0)
              operator delete(v362);
          }
LABEL_325:
          if ((char)v368 < 0)
            operator delete(v366);
        }
        *(_DWORD *)a2 = 7;
        *(_BYTE *)(a2 + 4) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
        v9 = 1;
LABEL_34:
        if (!v377)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
        goto LABEL_36;
      }
      vp::vx::io::Error::Error((vp::vx::io::Error *)&__p, (const vp::vx::io::Error *)&v378);
      v63 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
      if (*(char *)(v63 + 23) >= 0)
        v64 = *(unsigned __int8 *)(v63 + 23);
      else
        v64 = *(_QWORD *)(v63 + 8);
      v65 = vp::get_log((vp *)v63);
      v66 = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
      if (v64)
      {
        if (v66)
        {
          v67 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
          if ((v372 & 0x80u) == 0)
            v68 = (vp *)v372;
          else
            v68 = v371;
          v69 = vp::get_log(v67);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            v70 = (char)v372;
            p_dst = __dst;
            v72 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
            v362 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v72);
            v363 = v73;
            std::string::basic_string<std::string_view,0>(&v366, (uint64_t)&v362);
            if (v70 >= 0)
              p_dst = &__dst;
            if (v68)
              v75 = " ";
            else
              v75 = "";
            if ((v368 & 0x80u) == 0)
              v76 = &v366;
            else
              v76 = v366;
            v77 = WORD2(__p);
            v78 = HIWORD(__p);
            v79 = vp::get_log_source_file_path(v375, v74);
            v80 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
            if (*(char *)(v80 + 23) >= 0)
              v81 = v80;
            else
              v81 = *(_QWORD *)v80;
            *(_DWORD *)v389 = 136316930;
            *(_QWORD *)&v389[4] = p_dst;
            *(_WORD *)&v389[12] = 2080;
            *(_QWORD *)&v389[14] = v75;
            v390 = 2080;
            v391 = "get buffered input frame count for uplink hardware DSP node";
            v392 = 2080;
            v393 = v76;
            v394 = 1024;
            v395 = v77;
            v396 = 1024;
            v397 = v78;
            v398 = 2080;
            v399 = v79;
            v400 = 2080;
            v401 = v81;
            v82 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
            v83 = v69;
            v84 = 74;
            goto LABEL_303;
          }
          goto LABEL_305;
        }
      }
      else if (v66)
      {
        v245 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
        if ((v372 & 0x80u) == 0)
          v246 = (vp *)v372;
        else
          v246 = v371;
        v247 = vp::get_log(v245);
        if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
        {
          v248 = (char)v372;
          v249 = (void **)__dst;
          v250 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
          v362 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v250);
          v363 = v251;
          std::string::basic_string<std::string_view,0>(&v366, (uint64_t)&v362);
          if (v248 >= 0)
            v253 = &__dst;
          else
            v253 = v249;
          if (v246)
            v254 = " ";
          else
            v254 = "";
          if ((v368 & 0x80u) == 0)
            v255 = &v366;
          else
            v255 = v366;
          v256 = WORD2(__p);
          v257 = HIWORD(__p);
          v258 = vp::get_log_source_file_path(v375, v252);
          *(_DWORD *)v389 = 136316674;
          *(_QWORD *)&v389[4] = v253;
          *(_WORD *)&v389[12] = 2080;
          *(_QWORD *)&v389[14] = v254;
          v390 = 2080;
          v391 = "get buffered input frame count for uplink hardware DSP node";
          v392 = 2080;
          v393 = v255;
          v394 = 1024;
          v395 = v256;
          v396 = 1024;
          v397 = v257;
          v398 = 2080;
          v399 = v258;
          v82 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
          v83 = v247;
          v84 = 64;
LABEL_303:
          _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_ERROR, v82, v389, v84);
          if ((char)v368 < 0)
            operator delete(v366);
        }
LABEL_305:
        if ((char)v372 < 0)
          operator delete(__dst);
      }
      *(_DWORD *)a2 = 7;
      *(_BYTE *)(a2 + 4) = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
      v9 = 1;
LABEL_36:
      if (!v381)
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v378);
      goto LABEL_38;
    }
    vp::vx::io::Error::Error((vp::vx::io::Error *)&v378, (const vp::vx::io::Error *)v382);
    v41 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v378);
    if (*(char *)(v41 + 23) >= 0)
      v42 = *(unsigned __int8 *)(v41 + 23);
    else
      v42 = *(_QWORD *)(v41 + 8);
    v43 = vp::get_log((vp *)v41);
    v44 = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
    if (v42)
    {
      if (v44)
      {
        v45 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
        if ((v376 & 0x80u) == 0)
          v46 = (vp *)v376;
        else
          v46 = v375;
        v47 = vp::get_log(v45);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v48 = (char)v376;
          p_p = __p;
          v50 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v378);
          v366 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v50);
          v367 = v51;
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v366);
          if (v48 >= 0)
            p_p = &__p;
          if (v46)
            v53 = " ";
          else
            v53 = "";
          if ((v372 & 0x80u) == 0)
            v54 = &__dst;
          else
            v54 = __dst;
          v55 = WORD2(v378);
          v56 = HIWORD(v378);
          v57 = vp::get_log_source_file_path(v379, v52);
          v58 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v378);
          if (*(char *)(v58 + 23) >= 0)
            v59 = v58;
          else
            v59 = *(_QWORD *)v58;
          *(_DWORD *)v389 = 136316930;
          *(_QWORD *)&v389[4] = p_p;
          *(_WORD *)&v389[12] = 2080;
          *(_QWORD *)&v389[14] = v53;
          v390 = 2080;
          v391 = "process uplink \"mic-ref-sync\" DSP";
          v392 = 2080;
          v393 = v54;
          v394 = 1024;
          v395 = v55;
          v396 = 1024;
          v397 = v56;
          v398 = 2080;
          v399 = v57;
          v400 = 2080;
          v401 = v59;
          v60 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          v61 = v47;
          v62 = 74;
          goto LABEL_283;
        }
        goto LABEL_285;
      }
    }
    else if (v44)
    {
      v231 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      if ((v376 & 0x80u) == 0)
        v232 = (vp *)v376;
      else
        v232 = v375;
      v233 = vp::get_log(v231);
      if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
      {
        v234 = (char)v376;
        v235 = (void **)__p;
        v236 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v378);
        v366 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v236);
        v367 = v237;
        std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v366);
        if (v234 >= 0)
          v239 = &__p;
        else
          v239 = v235;
        if (v232)
          v240 = " ";
        else
          v240 = "";
        if ((v372 & 0x80u) == 0)
          v241 = &__dst;
        else
          v241 = __dst;
        v242 = WORD2(v378);
        v243 = HIWORD(v378);
        v244 = vp::get_log_source_file_path(v379, v238);
        *(_DWORD *)v389 = 136316674;
        *(_QWORD *)&v389[4] = v239;
        *(_WORD *)&v389[12] = 2080;
        *(_QWORD *)&v389[14] = v240;
        v390 = 2080;
        v391 = "process uplink \"mic-ref-sync\" DSP";
        v392 = 2080;
        v393 = v241;
        v394 = 1024;
        v395 = v242;
        v396 = 1024;
        v397 = v243;
        v398 = 2080;
        v399 = v244;
        v60 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        v61 = v233;
        v62 = 64;
LABEL_283:
        _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_ERROR, v60, v389, v62);
        if ((char)v372 < 0)
          operator delete(__dst);
      }
LABEL_285:
      if ((char)v376 < 0)
        operator delete(__p);
    }
    *(_DWORD *)a2 = 7;
    *(_BYTE *)(a2 + 4) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v378);
    v9 = 1;
LABEL_38:
    if (!v386)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v382);
    goto LABEL_40;
  }
  vp::vx::io::Error::Error((vp::vx::io::Error *)v382, (const vp::vx::io::Error *)buf);
  v19 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v382);
  if (*(char *)(v19 + 23) >= 0)
    v20 = *(unsigned __int8 *)(v19 + 23);
  else
    v20 = *(_QWORD *)(v19 + 8);
  v21 = vp::get_log((vp *)v19);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (v20)
  {
    if (v22)
    {
      v23 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v378);
      if ((v380 & 0x80u) == 0)
        v24 = (vp *)v380;
      else
        v24 = v379;
      v25 = vp::get_log(v23);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = (char)v380;
        v27 = v378;
        v28 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v382);
        __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v28);
        v371 = v29;
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
        if (v26 >= 0)
          v27 = &v378;
        if (v24)
          v31 = " ";
        else
          v31 = "";
        if ((v376 & 0x80u) == 0)
          v32 = &__p;
        else
          v32 = __p;
        v33 = v383;
        v34 = v384;
        v35 = vp::get_log_source_file_path(v385, v30);
        v36 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v382);
        if (*(char *)(v36 + 23) >= 0)
          v37 = v36;
        else
          v37 = *(_QWORD *)v36;
        *(_DWORD *)v389 = 136316930;
        *(_QWORD *)&v389[4] = v27;
        *(_WORD *)&v389[12] = 2080;
        *(_QWORD *)&v389[14] = v31;
        v390 = 2080;
        v391 = "get buffered input frame count for uplink mic-ref \"sync\" node";
        v392 = 2080;
        v393 = v32;
        v394 = 1024;
        v395 = v33;
        v396 = 1024;
        v397 = v34;
        v398 = 2080;
        v399 = v35;
        v400 = 2080;
        v401 = v37;
        v38 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
        v39 = v25;
        v40 = 74;
        goto LABEL_263;
      }
      goto LABEL_265;
    }
  }
  else if (v22)
  {
    v217 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v378);
    if ((v380 & 0x80u) == 0)
      v218 = (vp *)v380;
    else
      v218 = v379;
    v219 = vp::get_log(v217);
    if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
    {
      v220 = (char)v380;
      v221 = (void **)v378;
      v222 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v382);
      __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v222);
      v371 = v223;
      std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
      if (v220 >= 0)
        v225 = &v378;
      else
        v225 = v221;
      if (v218)
        v226 = " ";
      else
        v226 = "";
      if ((v376 & 0x80u) == 0)
        v227 = &__p;
      else
        v227 = __p;
      v228 = v383;
      v229 = v384;
      v230 = vp::get_log_source_file_path(v385, v224);
      *(_DWORD *)v389 = 136316674;
      *(_QWORD *)&v389[4] = v225;
      *(_WORD *)&v389[12] = 2080;
      *(_QWORD *)&v389[14] = v226;
      v390 = 2080;
      v391 = "get buffered input frame count for uplink mic-ref \"sync\" node";
      v392 = 2080;
      v393 = v227;
      v394 = 1024;
      v395 = v228;
      v396 = 1024;
      v397 = v229;
      v398 = 2080;
      v399 = v230;
      v38 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
      v39 = v219;
      v40 = 64;
LABEL_263:
      _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, v38, v389, v40);
      if ((char)v376 < 0)
        operator delete(__p);
    }
LABEL_265:
    if ((char)v380 < 0)
      operator delete(v378);
  }
  *(_DWORD *)a2 = 7;
  *(_BYTE *)(a2 + 4) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)v382);
  v9 = 1;
LABEL_40:
  if (!v406)
    vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v387);
  if (!v9)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 4) = 1;
  }
  return result;
}

void sub_1B600ABD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a71;
  void *a72;
  uint64_t v72;
  uint64_t v73;
  vp *v75;
  NSObject *log;
  vp *log_context_info;
  NSObject *v78;

  if (a2)
  {
    if (a32 < 0)
      operator delete(__p);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a14);
    if (!a26)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a20);
    if (!a39)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a33);
    if (!a46)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a40);
    if (!a53)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a47);
    if (!a60)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a54);
    if (!a67)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a61);
    if (!a71)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a68);
    if (!LOBYTE(STACK[0x228]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a72);
    if (!*(_BYTE *)(v73 - 96))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)(v73 - 144));
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](v73 - 240);
    v75 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v75);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, (_QWORD *)(v73 - 144));
      v78 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a68);
      if (*(char *)(v73 - 121) < 0)
        operator delete(*(void **)(v73 - 144));
    }
    *(_DWORD *)v72 = 11;
    *(_BYTE *)(v72 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B6009148);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::components_end_process<vp::vx::Uplink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  char v14;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v13 = *a3;
    v14 = *((_BYTE *)a3 + 4);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 232))(v7, a2, &v13);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

vp::vx::Voice_Processor *vp::vx::Voice_Processor::reset_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>, int a3@<W1>)
{
  if (!a3)
    return (vp::vx::Voice_Processor *)vp::vx::Voice_Processor::reset_all_of_uplink_dsp(this, a2);
  *(_DWORD *)a2 = 9;
  *(_BYTE *)(a2 + 4) = 0;
  return this;
}

{
  if (!a3)
    return (vp::vx::Voice_Processor *)vp::vx::Voice_Processor::reset_all_of_downlink_dsp(this, a2);
  *(_DWORD *)a2 = 9;
  *(_BYTE *)(a2 + 4) = 0;
  return this;
}

uint64_t vp::vx::Voice_Processor::reset_all_of_uplink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t result;
  vp::vx::io::Graph *v8;
  uint64_t node_commands;
  uint64_t v10;
  NSObject *log;
  _BOOL4 v12;
  vp *log_context_info;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void **v17;
  int id;
  uint64_t v19;
  const char *v20;
  const char *v21;
  void **v22;
  int v23;
  int v24;
  uint64_t log_source_file_path;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  vp *v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  void **v35;
  int v36;
  uint64_t v37;
  const char *v38;
  void **v39;
  const char *v40;
  void **v41;
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *__p[2];
  char v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  _BYTE v52[4];
  unsigned __int16 v53;
  unsigned __int16 v54;
  vp *v55;
  char v56;
  char *v57;
  char v58;
  uint8_t buf[4];
  void **v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  void **v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)((char *)this + 1128);
  v57 = (char *)this + 1128;
  v4 = atomic_load((unsigned int *)this + 282);
  if (v4 > 0x7FFFFFFE)
  {
LABEL_6:
    v58 = 0;
LABEL_7:
    *(_DWORD *)a2 = 8;
    *(_BYTE *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v57);
  }
  do
  {
    while (1)
    {
      v6 = __ldaxr(v3);
      if (v6 == v4)
        break;
      __clrex();
      v4 = v6;
      if (v6 >= 0x7FFFFFFF)
        goto LABEL_6;
    }
  }
  while (__stlxr(v4 + 1, v3));
  v58 = 1;
  v8 = (vp::vx::io::Graph *)*((_QWORD *)this + 300);
  if (!v8)
    goto LABEL_7;
  *((_BYTE *)this + 2409) = 0;
  vp::vx::io::Graph::reset(v8, v52);
  if (!v56)
  {
    node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v52);
    if (*(char *)(node_commands + 23) >= 0)
      v10 = *(unsigned __int8 *)(node_commands + 23);
    else
      v10 = *(_QWORD *)(node_commands + 8);
    log = vp::get_log((vp *)node_commands);
    v12 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v12)
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v49);
        if ((v51 & 0x80u) == 0)
          v14 = v51;
        else
          v14 = v50;
        v15 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16 = (char)v51;
          v17 = (void **)v49;
          id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v52);
          v45 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
          v46 = v19;
          std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v45);
          if (v16 >= 0)
            v17 = &v49;
          if (v14)
            v21 = " ";
          else
            v21 = "";
          if (v48 >= 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          v23 = v53;
          v24 = v54;
          log_source_file_path = vp::get_log_source_file_path(v55, v20);
          v26 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v52);
          if (*(char *)(v26 + 23) >= 0)
            v27 = v26;
          else
            v27 = *(_QWORD *)v26;
          *(_DWORD *)buf = 136316930;
          v60 = v17;
          v61 = 2080;
          v62 = v21;
          v63 = 2080;
          v64 = "reset uplink DSP";
          v65 = 2080;
          v66 = v22;
          v67 = 1024;
          v68 = v23;
          v69 = 1024;
          v70 = v24;
          v71 = 2080;
          v72 = log_source_file_path;
          v73 = 2080;
          v74 = v27;
          v28 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          v29 = v15;
          v30 = 74;
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    else if (v12)
    {
      v31 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v49);
      if ((v51 & 0x80u) == 0)
        v32 = v51;
      else
        v32 = v50;
      v33 = vp::get_log(v31);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = (char)v51;
        v35 = (void **)v49;
        v36 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v52);
        v45 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v36);
        v46 = v37;
        std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v45);
        if (v34 >= 0)
          v39 = &v49;
        else
          v39 = v35;
        if (v32)
          v40 = " ";
        else
          v40 = "";
        if (v48 >= 0)
          v41 = __p;
        else
          v41 = (void **)__p[0];
        v42 = v53;
        v43 = v54;
        v44 = vp::get_log_source_file_path(v55, v38);
        *(_DWORD *)buf = 136316674;
        v60 = v39;
        v61 = 2080;
        v62 = v40;
        v63 = 2080;
        v64 = "reset uplink DSP";
        v65 = 2080;
        v66 = v41;
        v67 = 1024;
        v68 = v42;
        v69 = 1024;
        v70 = v43;
        v71 = 2080;
        v72 = v44;
        v28 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        v29 = v33;
        v30 = 64;
LABEL_48:
        _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
        if (v48 < 0)
          operator delete(__p[0]);
      }
LABEL_50:
      if ((char)v51 < 0)
        operator delete(v49);
    }
    *(_DWORD *)a2 = 5;
    *(_BYTE *)(a2 + 4) = 0;
    if (!v56)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v52);
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v57);
  }
  result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v57);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  return result;
}

void sub_1B600B3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint8_t buf,int a37,int a38,__int16 a39,int a40,__int16 a41,__int16 a42,uint64_t a43)
{
  uint64_t v43;
  vp *v45;
  NSObject *log;
  vp *log_context_info;
  NSObject *v48;

  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    if (!a30)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a21);
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a32);
    v45 = (vp *)__cxa_begin_catch(exception_object);
    log = vp::get_log(v45);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &a21);
      v48 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a12);
      if (a26 < 0)
        operator delete(a21);
    }
    *(_DWORD *)v43 = 11;
    *(_BYTE *)(v43 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B600B0C4);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::components_begin_process<vp::vx::Downlink_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 272))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::run_all_of_downlink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  NSObject *log;
  vp *log_context_info;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  _BYTE *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  _BOOL4 v49;
  vp *v50;
  vp *v51;
  NSObject *v52;
  int v53;
  void **v54;
  int v55;
  vp *v56;
  void *v57;
  const char *v58;
  void **v59;
  const char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  NSObject *v67;
  uint32_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  _BOOL4 v72;
  vp *v73;
  vp *v74;
  NSObject *v75;
  int v76;
  void **v77;
  int v78;
  vp *v79;
  void *v80;
  const char *v81;
  void **p_p;
  const char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  NSObject *v90;
  uint32_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  _BOOL4 v95;
  vp *v96;
  vp *v97;
  NSObject *v98;
  int v99;
  void **v100;
  int v101;
  vp *v102;
  void *v103;
  const char *v104;
  void **p_dst;
  const char *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  NSObject *v113;
  uint32_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  _BOOL4 v118;
  vp *v119;
  vp *v120;
  NSObject *v121;
  int v122;
  void **v123;
  int v124;
  vp *v125;
  void *v126;
  const char *v127;
  void **v128;
  const char *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  NSObject *v136;
  uint32_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  _BOOL4 v141;
  vp *v142;
  vp *v143;
  NSObject *v144;
  int v145;
  void **v146;
  int v147;
  vp *v148;
  void *v149;
  const char *v150;
  void **v151;
  const char *v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  NSObject *v159;
  uint32_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  _BOOL4 v164;
  vp *v165;
  vp *v166;
  NSObject *v167;
  int v168;
  void **v169;
  int v170;
  vp *v171;
  void *v172;
  const char *v173;
  void **v174;
  const char *v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  NSObject *v182;
  uint32_t v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  _BOOL4 v187;
  vp *v188;
  vp *v189;
  NSObject *v190;
  int v191;
  void **v192;
  int v193;
  vp *v194;
  void *v195;
  const char *v196;
  void **v197;
  const char *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  NSObject *v205;
  uint32_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  _BOOL4 v210;
  vp *v211;
  vp *v212;
  NSObject *v213;
  int v214;
  void **v215;
  int v216;
  vp *v217;
  void *v218;
  const char *v219;
  void **v220;
  const char *v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  NSObject *v228;
  uint32_t v229;
  uint64_t v230;
  uint64_t v231;
  NSObject *v232;
  _BOOL4 v233;
  vp *v234;
  vp *v235;
  NSObject *v236;
  int v237;
  void **v238;
  int v239;
  vp *v240;
  void *v241;
  const char *v242;
  void **v243;
  const char *v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  NSObject *v251;
  uint32_t v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  _BOOL4 v256;
  vp *v257;
  vp *v258;
  NSObject *v259;
  int v260;
  void **v261;
  int v262;
  vp *v263;
  void *v264;
  const char *v265;
  void **v266;
  const char *v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  NSObject *v274;
  uint32_t v275;
  uint64_t v276;
  uint64_t v277;
  NSObject *v278;
  _BOOL4 v279;
  vp *v280;
  vp *v281;
  NSObject *v282;
  int v283;
  void **v284;
  int v285;
  vp *v286;
  void *v287;
  const char *v288;
  void **v289;
  const char *v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  NSObject *v297;
  uint32_t v298;
  uint64_t v299;
  uint64_t v300;
  NSObject *v301;
  _BOOL4 v302;
  vp *v303;
  vp *v304;
  NSObject *v305;
  int v306;
  void **v307;
  int v308;
  vp *v309;
  void *v310;
  const char *v311;
  void **v312;
  const char *v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  NSObject *v320;
  uint32_t v321;
  uint64_t v322;
  uint64_t v323;
  NSObject *v324;
  _BOOL4 v325;
  vp *v326;
  vp *v327;
  NSObject *v328;
  int v329;
  void **v330;
  int v331;
  vp *v332;
  void *v333;
  const char *v334;
  void **v335;
  const char *v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  const char *v342;
  NSObject *v343;
  uint32_t v344;
  uint64_t v345;
  uint64_t v346;
  NSObject *v347;
  _BOOL4 v348;
  vp *v349;
  vp *v350;
  NSObject *v351;
  int v352;
  void **v353;
  int v354;
  vp *v355;
  void *v356;
  const char *v357;
  void **v358;
  const char *v359;
  int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  NSObject *v366;
  uint32_t v367;
  uint64_t v368;
  uint64_t v369;
  NSObject *v370;
  _BOOL4 v371;
  vp *v372;
  vp *v373;
  NSObject *v374;
  int v375;
  void **v376;
  int v377;
  vp *v378;
  void *v379;
  const char *v380;
  void **v381;
  const char *v382;
  int v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  const char *v388;
  NSObject *v389;
  uint32_t v390;
  uint64_t v391;
  uint64_t v392;
  NSObject *v393;
  _BOOL4 v394;
  vp *v395;
  vp *v396;
  NSObject *v397;
  int v398;
  void **v399;
  int v400;
  vp *v401;
  void *v402;
  const char *v403;
  void **v404;
  const char *v405;
  int v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const char *v411;
  NSObject *v412;
  uint32_t v413;
  uint64_t v414;
  uint64_t v415;
  NSObject *v416;
  _BOOL4 v417;
  vp *v418;
  vp *v419;
  NSObject *v420;
  int v421;
  void **v422;
  int v423;
  vp *v424;
  void *v425;
  const char *v426;
  void **v427;
  const char *v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  const char *v434;
  NSObject *v435;
  uint32_t v436;
  uint64_t v437;
  uint64_t v438;
  NSObject *v439;
  _BOOL4 v440;
  vp *v441;
  vp *v442;
  NSObject *v443;
  int v444;
  void **v445;
  int v446;
  vp *v447;
  void *v448;
  const char *v449;
  void **v450;
  const char *v451;
  int v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  const char *v457;
  NSObject *v458;
  uint32_t v459;
  uint64_t v460;
  uint64_t v461;
  NSObject *v462;
  _BOOL4 v463;
  vp *v464;
  vp *v465;
  NSObject *v466;
  int v467;
  void **v468;
  int v469;
  uint64_t v470;
  void *v471;
  const char *v472;
  void **v473;
  const char *v474;
  int v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  NSObject *v481;
  uint32_t v482;
  uint64_t v483;
  uint64_t v484;
  NSObject *v485;
  _BOOL4 v486;
  vp *v487;
  vp *v488;
  NSObject *v489;
  int v490;
  void **v491;
  int v492;
  uint64_t v493;
  void *v494;
  const char *v495;
  void **v496;
  const char *v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  const char *v503;
  NSObject *v504;
  uint32_t v505;
  uint64_t node_commands;
  uint64_t v507;
  NSObject *v508;
  _BOOL4 v509;
  vp *v510;
  uint64_t v511;
  NSObject *v512;
  int v513;
  void **v514;
  int id;
  uint64_t v516;
  void *v517;
  const char *v518;
  void **v519;
  const char *v520;
  int v521;
  int v522;
  uint64_t log_source_file_path;
  uint64_t v524;
  uint64_t v525;
  const char *v526;
  NSObject *v527;
  uint32_t v528;
  vp *v529;
  vp *v530;
  NSObject *v531;
  int v532;
  void *v533;
  int v534;
  vp *v535;
  const char *v536;
  const char *v537;
  void *v538;
  int v539;
  int v540;
  uint64_t v541;
  vp *v542;
  vp *v543;
  NSObject *v544;
  int v545;
  void *v546;
  int v547;
  vp *v548;
  const char *v549;
  const char *v550;
  void *v551;
  int v552;
  int v553;
  uint64_t v554;
  vp *v555;
  vp *v556;
  NSObject *v557;
  int v558;
  void *v559;
  int v560;
  vp *v561;
  const char *v562;
  const char *v563;
  void *v564;
  int v565;
  int v566;
  uint64_t v567;
  vp *v568;
  vp *v569;
  NSObject *v570;
  int v571;
  void *v572;
  int v573;
  vp *v574;
  const char *v575;
  const char *v576;
  void *v577;
  int v578;
  int v579;
  uint64_t v580;
  vp *v581;
  vp *v582;
  NSObject *v583;
  int v584;
  void *v585;
  int v586;
  vp *v587;
  const char *v588;
  const char *v589;
  void *v590;
  int v591;
  int v592;
  uint64_t v593;
  vp *v594;
  vp *v595;
  NSObject *v596;
  int v597;
  void *v598;
  int v599;
  vp *v600;
  const char *v601;
  const char *v602;
  void *v603;
  int v604;
  int v605;
  uint64_t v606;
  vp *v607;
  vp *v608;
  NSObject *v609;
  int v610;
  void *v611;
  int v612;
  vp *v613;
  const char *v614;
  const char *v615;
  void *v616;
  int v617;
  int v618;
  uint64_t v619;
  vp *v620;
  vp *v621;
  NSObject *v622;
  int v623;
  void *v624;
  int v625;
  vp *v626;
  const char *v627;
  const char *v628;
  void *v629;
  int v630;
  int v631;
  uint64_t v632;
  vp *v633;
  vp *v634;
  NSObject *v635;
  int v636;
  void *v637;
  int v638;
  vp *v639;
  const char *v640;
  const char *v641;
  void *v642;
  int v643;
  int v644;
  uint64_t v645;
  vp *v646;
  vp *v647;
  NSObject *v648;
  int v649;
  void *v650;
  int v651;
  vp *v652;
  const char *v653;
  const char *v654;
  void *v655;
  int v656;
  int v657;
  uint64_t v658;
  vp *v659;
  vp *v660;
  NSObject *v661;
  int v662;
  void *v663;
  int v664;
  vp *v665;
  const char *v666;
  const char *v667;
  void *v668;
  int v669;
  int v670;
  uint64_t v671;
  vp *v672;
  vp *v673;
  NSObject *v674;
  int v675;
  void *v676;
  int v677;
  vp *v678;
  const char *v679;
  const char *v680;
  void *v681;
  int v682;
  int v683;
  uint64_t v684;
  vp *v685;
  vp *v686;
  NSObject *v687;
  int v688;
  void *v689;
  int v690;
  vp *v691;
  const char *v692;
  const char *v693;
  void *v694;
  int v695;
  int v696;
  uint64_t v697;
  vp *v698;
  vp *v699;
  NSObject *v700;
  int v701;
  void *v702;
  int v703;
  vp *v704;
  const char *v705;
  const char *v706;
  void *v707;
  int v708;
  int v709;
  uint64_t v710;
  vp *v711;
  vp *v712;
  NSObject *v713;
  int v714;
  void *v715;
  int v716;
  vp *v717;
  const char *v718;
  const char *v719;
  void *v720;
  int v721;
  int v722;
  uint64_t v723;
  vp *v724;
  vp *v725;
  NSObject *v726;
  int v727;
  void *v728;
  int v729;
  vp *v730;
  const char *v731;
  const char *v732;
  void *v733;
  int v734;
  int v735;
  uint64_t v736;
  vp *v737;
  vp *v738;
  NSObject *v739;
  int v740;
  void *v741;
  int v742;
  vp *v743;
  const char *v744;
  const char *v745;
  void *v746;
  int v747;
  int v748;
  uint64_t v749;
  vp *v750;
  vp *v751;
  NSObject *v752;
  int v753;
  void *v754;
  int v755;
  vp *v756;
  const char *v757;
  const char *v758;
  void *v759;
  int v760;
  int v761;
  uint64_t v762;
  vp *v763;
  vp *v764;
  NSObject *v765;
  int v766;
  void *v767;
  int v768;
  uint64_t v769;
  const char *v770;
  const char *v771;
  void *v772;
  int v773;
  int v774;
  uint64_t v775;
  vp *v776;
  vp *v777;
  NSObject *v778;
  int v779;
  void *v780;
  int v781;
  uint64_t v782;
  const char *v783;
  const char *v784;
  void *v785;
  int v786;
  int v787;
  uint64_t v788;
  vp *v789;
  uint64_t v790;
  NSObject *v791;
  int v792;
  void *v793;
  int v794;
  uint64_t v795;
  const char *v796;
  const char *v797;
  void *v798;
  int v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  char *v804;
  uint64_t v805;
  void *v806;
  uint64_t v807;
  char v808;
  void *v809;
  vp *v810;
  unsigned __int8 v811;
  void *v812;
  vp *v813;
  unsigned __int8 v814;
  char v815;
  void *v816;
  uint64_t v817;
  unsigned __int8 v818;
  void *v819;
  vp *v820;
  unsigned __int8 v821;
  char v822;
  void *v823;
  vp *v824;
  unsigned __int8 v825;
  char v826;
  void *v827;
  vp *v828;
  unsigned __int8 v829;
  char v830;
  void *v831;
  vp *v832;
  unsigned __int8 v833;
  char v834;
  void *v835;
  vp *v836;
  unsigned __int8 v837;
  char v838;
  void *v839;
  vp *v840;
  unsigned __int8 v841;
  char v842;
  void *v843;
  vp *v844;
  unsigned __int8 v845;
  char v846;
  void *v847;
  vp *v848;
  unsigned __int8 v849;
  char v850;
  void *v851;
  vp *v852;
  unsigned __int8 v853;
  char v854;
  void *v855;
  vp *v856;
  unsigned __int8 v857;
  char v858;
  void *v859;
  vp *v860;
  unsigned __int8 v861;
  char v862;
  void *v863;
  vp *v864;
  unsigned __int8 v865;
  char v866;
  void *v867;
  vp *v868;
  unsigned __int8 v869;
  char v870;
  void *v871;
  vp *v872;
  unsigned __int8 v873;
  char v874;
  void *v875;
  vp *v876;
  unsigned __int8 v877;
  char v878;
  void *__dst;
  vp *v880;
  unsigned __int8 v881;
  char v882;
  void *__p;
  vp *v884;
  unsigned __int8 v885;
  char v886;
  void *v887;
  vp *v888;
  unsigned __int8 v889;
  char v890;
  unsigned int v891;
  unsigned __int16 v892;
  unsigned __int16 v893;
  vp *v894;
  char v895;
  char *v896;
  char v897;
  _BYTE v898[22];
  __int16 v899;
  const char *v900;
  __int16 v901;
  void *v902;
  __int16 v903;
  int v904;
  __int16 v905;
  int v906;
  __int16 v907;
  uint64_t v908;
  __int16 v909;
  uint64_t v910;
  uint8_t buf[4];
  _BYTE *v912;
  __int16 v913;
  const char *v914;
  char v915;
  uint64_t v916;

  v916 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)((char *)this + 1128);
  v896 = (char *)this + 1128;
  v4 = atomic_load((unsigned int *)this + 282);
  if (v4 > 0x7FFFFFFE)
  {
LABEL_6:
    v897 = 0;
    goto LABEL_9;
  }
  do
  {
    while (1)
    {
      v5 = __ldaxr(v3);
      if (v5 == v4)
        break;
      __clrex();
      v4 = v5;
      if (v5 >= 0x7FFFFFFF)
        goto LABEL_6;
    }
  }
  while (__stlxr(v4 + 1, v3));
  v897 = 1;
  v6 = *((_QWORD *)this + 313);
  if (!v6)
  {
    log = vp::get_log(this);
    if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v898);
      v40 = HIBYTE(v899);
      v41 = *(_QWORD *)&v898[8];
      v42 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      {
        if ((v40 & 0x80u) == 0)
          v43 = v40;
        else
          v43 = v41;
        v44 = *(_BYTE **)v898;
        if (v899 >= 0)
          v44 = v898;
        if (v43)
          v45 = " ";
        else
          v45 = "";
        *(_DWORD *)buf = 136315394;
        v912 = v44;
        v913 = 2080;
        v914 = v45;
        _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_FAULT, "%s%scannot run downlink DSP with uninitialized VoiceProcessor", buf, 0x16u);
      }
      if (SHIBYTE(v899) < 0)
        operator delete(*(void **)v898);
    }
    goto LABEL_9;
  }
  v7 = *((_DWORD *)this + 195);
  if (v7 < 2)
  {
LABEL_9:
    *(_DWORD *)a2 = 8;
    *(_BYTE *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v896);
  }
  v802 = a2;
  if (v7 == 2 && *((_DWORD *)this + 66) != 3)
  {
    v28 = 0;
    v29 = (char *)this + 2644;
    v30 = (char *)this + 2636;
    v31 = (char *)this + 2628;
    v32 = (char *)this + 2620;
    while (2)
    {
      v33 = *(_DWORD *)((char *)&xmmword_1B6626920 + v28);
      v34 = v32;
      switch(v33)
      {
        case 0u:
          goto LABEL_108;
        case 1u:
          v34 = v31;
          goto LABEL_108;
        case 2u:
          v34 = v30;
          goto LABEL_108;
        case 3u:
          v34 = v29;
LABEL_108:
          if (*v34 == -1)
            goto LABEL_120;
          goto LABEL_111;
        default:
          if (v33 >= 8)
            std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
LABEL_111:
          v35 = *((_QWORD *)this + 314);
          if ((v35 & (1 << v33)) != 0)
          {
            *((_QWORD *)this + 314) = v35 & ~(1 << v33);
          }
          else
          {
            v36 = (unsigned int *)v32;
            switch((int)v32)
            {
              case 0:
                goto LABEL_117;
              case 1:
                v36 = (unsigned int *)v31;
                goto LABEL_117;
              case 2:
                v36 = (unsigned int *)v30;
                goto LABEL_117;
              case 3:
                v36 = (unsigned int *)v29;
LABEL_117:
                v37 = *v36;
                break;
              default:
                v37 = 0;
                break;
            }
            vp::vx::io::Graph::reset(v6, v37, (uint64_t)v898);
            if (!(_BYTE)v905)
              vp::vx::io::Error::~Error((vp::vx::io::Error *)v898);
          }
LABEL_120:
          v28 += 4;
          if (v28 == 16)
            break;
          continue;
      }
      break;
    }
  }
  vp::vx::io::Graph::get_block_size(v6, *((_DWORD *)this + 654), (uint64_t)buf);
  if (v915)
  {
    v9 = *(_DWORD *)buf;
    vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 654), 0, (uint64_t)&v891);
    if (v895)
    {
      if (v9 >= v891)
        v10 = v9 - v891;
      else
        v10 = 0;
      vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 668), v10, (uint64_t)&v887);
      v11 = v802;
      if (v890)
      {
        v12 = v887;
        vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 653), 1, (uint64_t)&__p);
        if (v886)
        {
          if (v12 >= __p)
            v13 = v12 - __p;
          else
            v13 = 0;
          vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 653), v13, (uint64_t)&__dst);
          if (v882)
          {
            v14 = __dst;
            vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 653), 0, (uint64_t)&v875);
            if (v878)
            {
              if (v14 >= v875)
                v15 = v14 - v875;
              else
                v15 = 0;
              vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 667), v15, (uint64_t)&v871);
              if (v874)
              {
                v16 = v871;
                vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 652), 1, (uint64_t)&v867);
                if (v870)
                {
                  if (v16 >= v867)
                    v17 = v16 - v867;
                  else
                    v17 = 0;
                  vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 652), v17, (uint64_t)&v863);
                  if (v866)
                  {
                    v18 = v863;
                    vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 652), 0, (uint64_t)&v859);
                    if (v862)
                    {
                      if (v18 >= v859)
                        v19 = v18 - v859;
                      else
                        v19 = 0;
                      vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 666), v19, (uint64_t)&v855);
                      if (v858)
                      {
                        v20 = v855;
                        vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 651), 1, (uint64_t)&v851);
                        if (v854)
                        {
                          if (v20 >= v851)
                            v21 = v20 - v851;
                          else
                            v21 = 0;
                          vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 651), v21, (uint64_t)&v847);
                          if (v850)
                          {
                            v22 = v847;
                            vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 651), 0, (uint64_t)&v843);
                            if (v846)
                            {
                              if (v22 >= v843)
                                v23 = v22 - v843;
                              else
                                v23 = 0;
                              vp::vx::io::Graph::get_required_input_frame_count(v6, *((_DWORD *)this + 665), v23, (uint64_t)&v839);
                              if (v842)
                              {
                                v24 = v839;
                                vp::vx::io::Graph::get_buffered_frame_count(v6, *((_DWORD *)this + 650), 1, (uint64_t)&v835);
                                if (v838)
                                {
                                  v25 = v24 - (_DWORD)v835;
                                  if (v24 < v835)
                                    v25 = 0;
                                  if (v24 <= v835)
                                    v26 = 1;
                                  else
                                    v26 = v25;
                                  vp::vx::io::Graph::process(v6, *((_DWORD *)this + 650), v26, &v831);
                                  if (v834)
                                  {
                                    vp::vx::io::Graph::process(v6, *((_DWORD *)this + 651), v22, &v827);
                                    if (v830)
                                    {
                                      vp::vx::io::Graph::process(v6, *((_DWORD *)this + 652), v18, &v823);
                                      if (v826)
                                      {
                                        vp::vx::io::Graph::process(v6, *((_DWORD *)this + 653), v14, &v819);
                                        if (v822)
                                        {
                                          vp::vx::io::Graph::process(v6, *((_DWORD *)this + 654), v9, &v812);
                                          if (v815)
                                          {
                                            v27 = 0;
                                            goto LABEL_60;
                                          }
                                          vp::vx::io::Error::Error((vp::vx::io::Error *)&v809, (const vp::vx::io::Error *)&v812);
                                          node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v809);
                                          if (*(char *)(node_commands + 23) >= 0)
                                            v507 = *(unsigned __int8 *)(node_commands + 23);
                                          else
                                            v507 = *(_QWORD *)(node_commands + 8);
                                          v508 = vp::get_log((vp *)node_commands);
                                          v509 = os_log_type_enabled(v508, OS_LOG_TYPE_ERROR);
                                          if (v507)
                                          {
                                            if (!v509)
                                              goto LABEL_996;
                                            v510 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v816);
                                            if ((v818 & 0x80u) == 0)
                                              v511 = v818;
                                            else
                                              v511 = v817;
                                            v512 = vp::get_log(v510);
                                            if (!os_log_type_enabled(v512, OS_LOG_TYPE_ERROR))
                                              goto LABEL_993;
                                            v513 = (char)v818;
                                            v514 = (void **)v816;
                                            id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v809);
                                            v804 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
                                            v805 = v516;
                                            v517 = &v806;
                                            std::string::basic_string<std::string_view,0>(&v806, (uint64_t)&v804);
                                            if (v513 >= 0)
                                              v519 = &v816;
                                            else
                                              v519 = v514;
                                            if (v511)
                                              v520 = " ";
                                            else
                                              v520 = "";
                                            if (v808 < 0)
                                              v517 = v806;
                                            v521 = WORD2(v809);
                                            v522 = HIWORD(v809);
                                            log_source_file_path = vp::get_log_source_file_path(v810, v518);
                                            v524 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v809);
                                            if (*(char *)(v524 + 23) >= 0)
                                              v525 = v524;
                                            else
                                              v525 = *(_QWORD *)v524;
                                            *(_DWORD *)v898 = 136316930;
                                            *(_QWORD *)&v898[4] = v519;
                                            *(_WORD *)&v898[12] = 2080;
                                            *(_QWORD *)&v898[14] = v520;
                                            v899 = 2080;
                                            v900 = "process downlink hardware DSP";
                                            v901 = 2080;
                                            v902 = v517;
                                            v903 = 1024;
                                            v904 = v521;
                                            v905 = 1024;
                                            v906 = v522;
                                            v907 = 2080;
                                            v908 = log_source_file_path;
                                            v909 = 2080;
                                            v910 = v525;
                                            v526 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                            v527 = v512;
                                            v528 = 74;
                                          }
                                          else
                                          {
                                            if (!v509)
                                              goto LABEL_996;
                                            v789 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v816);
                                            if ((v818 & 0x80u) == 0)
                                              v790 = v818;
                                            else
                                              v790 = v817;
                                            v791 = vp::get_log(v789);
                                            if (!os_log_type_enabled(v791, OS_LOG_TYPE_ERROR))
                                            {
LABEL_993:
                                              if ((char)v818 < 0)
                                                operator delete(v816);
                                              v11 = v802;
LABEL_996:
                                              *(_DWORD *)v11 = 7;
                                              *(_BYTE *)(v11 + 4) = 0;
                                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v809);
                                              if (v815)
                                              {
LABEL_998:
                                                v27 = 1;
LABEL_60:
                                                if (!v822)
                                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v819);
                                                goto LABEL_62;
                                              }
LABEL_997:
                                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v812);
                                              goto LABEL_998;
                                            }
                                            v792 = (char)v818;
                                            v793 = v816;
                                            v794 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v809);
                                            v804 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v794);
                                            v805 = v795;
                                            std::string::basic_string<std::string_view,0>(&v806, (uint64_t)&v804);
                                            if (v792 >= 0)
                                              v793 = &v816;
                                            if (v790)
                                              v797 = " ";
                                            else
                                              v797 = "";
                                            if (v808 >= 0)
                                              v798 = &v806;
                                            else
                                              v798 = v806;
                                            v799 = WORD2(v809);
                                            v800 = HIWORD(v809);
                                            v801 = vp::get_log_source_file_path(v810, v796);
                                            *(_DWORD *)v898 = 136316674;
                                            *(_QWORD *)&v898[4] = v793;
                                            *(_WORD *)&v898[12] = 2080;
                                            *(_QWORD *)&v898[14] = v797;
                                            v899 = 2080;
                                            v900 = "process downlink hardware DSP";
                                            v901 = 2080;
                                            v902 = v798;
                                            v903 = 1024;
                                            v904 = v799;
                                            v905 = 1024;
                                            v906 = v800;
                                            v907 = 2080;
                                            v908 = v801;
                                            v526 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                            v527 = v791;
                                            v528 = 64;
                                          }
                                          _os_log_impl(&dword_1B5ED0000, v527, OS_LOG_TYPE_ERROR, v526, v898, v528);
                                          if (v808 < 0)
                                            operator delete(v806);
                                          goto LABEL_993;
                                        }
                                        vp::vx::io::Error::Error((vp::vx::io::Error *)&v812, (const vp::vx::io::Error *)&v819);
                                        v483 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v812);
                                        if (*(char *)(v483 + 23) >= 0)
                                          v484 = *(unsigned __int8 *)(v483 + 23);
                                        else
                                          v484 = *(_QWORD *)(v483 + 8);
                                        v485 = vp::get_log((vp *)v483);
                                        v486 = os_log_type_enabled(v485, OS_LOG_TYPE_ERROR);
                                        if (v484)
                                        {
                                          if (v486)
                                          {
                                            v487 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v809);
                                            if ((v811 & 0x80u) == 0)
                                              v488 = (vp *)v811;
                                            else
                                              v488 = v810;
                                            v489 = vp::get_log(v487);
                                            if (os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
                                            {
                                              v490 = (char)v811;
                                              v491 = (void **)v809;
                                              v492 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v812);
                                              v806 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v492);
                                              v807 = v493;
                                              v494 = &v816;
                                              std::string::basic_string<std::string_view,0>(&v816, (uint64_t)&v806);
                                              if (v490 >= 0)
                                                v496 = &v809;
                                              else
                                                v496 = v491;
                                              if (v488)
                                                v497 = " ";
                                              else
                                                v497 = "";
                                              if ((v818 & 0x80u) != 0)
                                                v494 = v816;
                                              v498 = WORD2(v812);
                                              v499 = HIWORD(v812);
                                              v500 = vp::get_log_source_file_path(v813, v495);
                                              v501 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v812);
                                              if (*(char *)(v501 + 23) >= 0)
                                                v502 = v501;
                                              else
                                                v502 = *(_QWORD *)v501;
                                              *(_DWORD *)v898 = 136316930;
                                              *(_QWORD *)&v898[4] = v496;
                                              *(_WORD *)&v898[12] = 2080;
                                              *(_QWORD *)&v898[14] = v497;
                                              v899 = 2080;
                                              v900 = "process downlink dynamics DSP";
                                              v901 = 2080;
                                              v902 = v494;
                                              v903 = 1024;
                                              v904 = v498;
                                              v905 = 1024;
                                              v906 = v499;
                                              v907 = 2080;
                                              v908 = v500;
                                              v909 = 2080;
                                              v910 = v502;
                                              v503 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                              v504 = v489;
                                              v505 = 74;
LABEL_971:
                                              _os_log_impl(&dword_1B5ED0000, v504, OS_LOG_TYPE_ERROR, v503, v898, v505);
                                              if ((char)v818 < 0)
                                                operator delete(v816);
                                              goto LABEL_973;
                                            }
                                            goto LABEL_973;
                                          }
                                        }
                                        else if (v486)
                                        {
                                          v776 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v809);
                                          if ((v811 & 0x80u) == 0)
                                            v777 = (vp *)v811;
                                          else
                                            v777 = v810;
                                          v778 = vp::get_log(v776);
                                          if (os_log_type_enabled(v778, OS_LOG_TYPE_ERROR))
                                          {
                                            v779 = (char)v811;
                                            v780 = v809;
                                            v781 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v812);
                                            v806 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v781);
                                            v807 = v782;
                                            std::string::basic_string<std::string_view,0>(&v816, (uint64_t)&v806);
                                            if (v779 >= 0)
                                              v780 = &v809;
                                            if (v777)
                                              v784 = " ";
                                            else
                                              v784 = "";
                                            if ((v818 & 0x80u) == 0)
                                              v785 = &v816;
                                            else
                                              v785 = v816;
                                            v786 = WORD2(v812);
                                            v787 = HIWORD(v812);
                                            v788 = vp::get_log_source_file_path(v813, v783);
                                            *(_DWORD *)v898 = 136316674;
                                            *(_QWORD *)&v898[4] = v780;
                                            *(_WORD *)&v898[12] = 2080;
                                            *(_QWORD *)&v898[14] = v784;
                                            v899 = 2080;
                                            v900 = "process downlink dynamics DSP";
                                            v901 = 2080;
                                            v902 = v785;
                                            v903 = 1024;
                                            v904 = v786;
                                            v905 = 1024;
                                            v906 = v787;
                                            v907 = 2080;
                                            v908 = v788;
                                            v503 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                            v504 = v778;
                                            v505 = 64;
                                            goto LABEL_971;
                                          }
LABEL_973:
                                          if ((char)v811 < 0)
                                            operator delete(v809);
                                          v11 = v802;
                                        }
                                        *(_DWORD *)v11 = 7;
                                        *(_BYTE *)(v11 + 4) = 0;
                                        goto LABEL_997;
                                      }
                                      vp::vx::io::Error::Error((vp::vx::io::Error *)&v819, (const vp::vx::io::Error *)&v823);
                                      v460 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v819);
                                      if (*(char *)(v460 + 23) >= 0)
                                        v461 = *(unsigned __int8 *)(v460 + 23);
                                      else
                                        v461 = *(_QWORD *)(v460 + 8);
                                      v462 = vp::get_log((vp *)v460);
                                      v463 = os_log_type_enabled(v462, OS_LOG_TYPE_ERROR);
                                      if (v461)
                                      {
                                        if (v463)
                                        {
                                          v464 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v812);
                                          if ((v814 & 0x80u) == 0)
                                            v465 = (vp *)v814;
                                          else
                                            v465 = v813;
                                          v466 = vp::get_log(v464);
                                          if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
                                          {
                                            v467 = (char)v814;
                                            v468 = (void **)v812;
                                            v469 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v819);
                                            v816 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v469);
                                            v817 = v470;
                                            v471 = &v809;
                                            std::string::basic_string<std::string_view,0>(&v809, (uint64_t)&v816);
                                            if (v467 >= 0)
                                              v473 = &v812;
                                            else
                                              v473 = v468;
                                            if (v465)
                                              v474 = " ";
                                            else
                                              v474 = "";
                                            if ((v811 & 0x80u) != 0)
                                              v471 = v809;
                                            v475 = WORD2(v819);
                                            v476 = HIWORD(v819);
                                            v477 = vp::get_log_source_file_path(v820, v472);
                                            v478 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v819);
                                            if (*(char *)(v478 + 23) >= 0)
                                              v479 = v478;
                                            else
                                              v479 = *(_QWORD *)v478;
                                            *(_DWORD *)v898 = 136316930;
                                            *(_QWORD *)&v898[4] = v473;
                                            *(_WORD *)&v898[12] = 2080;
                                            *(_QWORD *)&v898[14] = v474;
                                            v899 = 2080;
                                            v900 = "process downlink voice DSP";
                                            v901 = 2080;
                                            v902 = v471;
                                            v903 = 1024;
                                            v904 = v475;
                                            v905 = 1024;
                                            v906 = v476;
                                            v907 = 2080;
                                            v908 = v477;
                                            v909 = 2080;
                                            v910 = v479;
                                            v480 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                            v481 = v466;
                                            v482 = 74;
LABEL_951:
                                            _os_log_impl(&dword_1B5ED0000, v481, OS_LOG_TYPE_ERROR, v480, v898, v482);
                                            if ((char)v811 < 0)
                                              operator delete(v809);
                                            goto LABEL_953;
                                          }
                                          goto LABEL_953;
                                        }
                                      }
                                      else if (v463)
                                      {
                                        v763 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v812);
                                        if ((v814 & 0x80u) == 0)
                                          v764 = (vp *)v814;
                                        else
                                          v764 = v813;
                                        v765 = vp::get_log(v763);
                                        if (os_log_type_enabled(v765, OS_LOG_TYPE_ERROR))
                                        {
                                          v766 = (char)v814;
                                          v767 = v812;
                                          v768 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v819);
                                          v816 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v768);
                                          v817 = v769;
                                          std::string::basic_string<std::string_view,0>(&v809, (uint64_t)&v816);
                                          if (v766 >= 0)
                                            v767 = &v812;
                                          if (v764)
                                            v771 = " ";
                                          else
                                            v771 = "";
                                          if ((v811 & 0x80u) == 0)
                                            v772 = &v809;
                                          else
                                            v772 = v809;
                                          v773 = WORD2(v819);
                                          v774 = HIWORD(v819);
                                          v775 = vp::get_log_source_file_path(v820, v770);
                                          *(_DWORD *)v898 = 136316674;
                                          *(_QWORD *)&v898[4] = v767;
                                          *(_WORD *)&v898[12] = 2080;
                                          *(_QWORD *)&v898[14] = v771;
                                          v899 = 2080;
                                          v900 = "process downlink voice DSP";
                                          v901 = 2080;
                                          v902 = v772;
                                          v903 = 1024;
                                          v904 = v773;
                                          v905 = 1024;
                                          v906 = v774;
                                          v907 = 2080;
                                          v908 = v775;
                                          v480 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                          v481 = v765;
                                          v482 = 64;
                                          goto LABEL_951;
                                        }
LABEL_953:
                                        if ((char)v814 < 0)
                                          operator delete(v812);
                                        v11 = v802;
                                      }
                                      *(_DWORD *)v11 = 7;
                                      *(_BYTE *)(v11 + 4) = 0;
                                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v819);
                                      v27 = 1;
LABEL_62:
                                      if (!v826)
                                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v823);
                                      goto LABEL_64;
                                    }
                                    vp::vx::io::Error::Error((vp::vx::io::Error *)&v823, (const vp::vx::io::Error *)&v827);
                                    v437 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v823);
                                    if (*(char *)(v437 + 23) >= 0)
                                      v438 = *(unsigned __int8 *)(v437 + 23);
                                    else
                                      v438 = *(_QWORD *)(v437 + 8);
                                    v439 = vp::get_log((vp *)v437);
                                    v440 = os_log_type_enabled(v439, OS_LOG_TYPE_ERROR);
                                    if (v438)
                                    {
                                      if (v440)
                                      {
                                        v441 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v819);
                                        if ((v821 & 0x80u) == 0)
                                          v442 = (vp *)v821;
                                        else
                                          v442 = v820;
                                        v443 = vp::get_log(v441);
                                        if (os_log_type_enabled(v443, OS_LOG_TYPE_ERROR))
                                        {
                                          v444 = (char)v821;
                                          v445 = (void **)v819;
                                          v446 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v823);
                                          v809 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v446);
                                          v810 = v447;
                                          v448 = &v812;
                                          std::string::basic_string<std::string_view,0>(&v812, (uint64_t)&v809);
                                          if (v444 >= 0)
                                            v450 = &v819;
                                          else
                                            v450 = v445;
                                          if (v442)
                                            v451 = " ";
                                          else
                                            v451 = "";
                                          if ((v814 & 0x80u) != 0)
                                            v448 = v812;
                                          v452 = WORD2(v823);
                                          v453 = HIWORD(v823);
                                          v454 = vp::get_log_source_file_path(v824, v449);
                                          v455 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v823);
                                          if (*(char *)(v455 + 23) >= 0)
                                            v456 = v455;
                                          else
                                            v456 = *(_QWORD *)v455;
                                          *(_DWORD *)v898 = 136316930;
                                          *(_QWORD *)&v898[4] = v450;
                                          *(_WORD *)&v898[12] = 2080;
                                          *(_QWORD *)&v898[14] = v451;
                                          v899 = 2080;
                                          v900 = "process downlink voice mix DSP";
                                          v901 = 2080;
                                          v902 = v448;
                                          v903 = 1024;
                                          v904 = v452;
                                          v905 = 1024;
                                          v906 = v453;
                                          v907 = 2080;
                                          v908 = v454;
                                          v909 = 2080;
                                          v910 = v456;
                                          v457 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                          v458 = v443;
                                          v459 = 74;
LABEL_931:
                                          _os_log_impl(&dword_1B5ED0000, v458, OS_LOG_TYPE_ERROR, v457, v898, v459);
                                          if ((char)v814 < 0)
                                            operator delete(v812);
                                          goto LABEL_933;
                                        }
                                        goto LABEL_933;
                                      }
                                    }
                                    else if (v440)
                                    {
                                      v750 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v819);
                                      if ((v821 & 0x80u) == 0)
                                        v751 = (vp *)v821;
                                      else
                                        v751 = v820;
                                      v752 = vp::get_log(v750);
                                      if (os_log_type_enabled(v752, OS_LOG_TYPE_ERROR))
                                      {
                                        v753 = (char)v821;
                                        v754 = v819;
                                        v755 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v823);
                                        v809 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v755);
                                        v810 = v756;
                                        std::string::basic_string<std::string_view,0>(&v812, (uint64_t)&v809);
                                        if (v753 >= 0)
                                          v754 = &v819;
                                        if (v751)
                                          v758 = " ";
                                        else
                                          v758 = "";
                                        if ((v814 & 0x80u) == 0)
                                          v759 = &v812;
                                        else
                                          v759 = v812;
                                        v760 = WORD2(v823);
                                        v761 = HIWORD(v823);
                                        v762 = vp::get_log_source_file_path(v824, v757);
                                        *(_DWORD *)v898 = 136316674;
                                        *(_QWORD *)&v898[4] = v754;
                                        *(_WORD *)&v898[12] = 2080;
                                        *(_QWORD *)&v898[14] = v758;
                                        v899 = 2080;
                                        v900 = "process downlink voice mix DSP";
                                        v901 = 2080;
                                        v902 = v759;
                                        v903 = 1024;
                                        v904 = v760;
                                        v905 = 1024;
                                        v906 = v761;
                                        v907 = 2080;
                                        v908 = v762;
                                        v457 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                        v458 = v752;
                                        v459 = 64;
                                        goto LABEL_931;
                                      }
LABEL_933:
                                      if ((char)v821 < 0)
                                        operator delete(v819);
                                      v11 = v802;
                                    }
                                    *(_DWORD *)v11 = 7;
                                    *(_BYTE *)(v11 + 4) = 0;
                                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v823);
                                    v27 = 1;
LABEL_64:
                                    if (!v830)
                                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v827);
                                    goto LABEL_66;
                                  }
                                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v827, (const vp::vx::io::Error *)&v831);
                                  v414 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v827);
                                  if (*(char *)(v414 + 23) >= 0)
                                    v415 = *(unsigned __int8 *)(v414 + 23);
                                  else
                                    v415 = *(_QWORD *)(v414 + 8);
                                  v416 = vp::get_log((vp *)v414);
                                  v417 = os_log_type_enabled(v416, OS_LOG_TYPE_ERROR);
                                  if (v415)
                                  {
                                    if (v417)
                                    {
                                      v418 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v823);
                                      if ((v825 & 0x80u) == 0)
                                        v419 = (vp *)v825;
                                      else
                                        v419 = v824;
                                      v420 = vp::get_log(v418);
                                      if (os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
                                      {
                                        v421 = (char)v825;
                                        v422 = (void **)v823;
                                        v423 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v827);
                                        v812 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v423);
                                        v813 = v424;
                                        v425 = &v819;
                                        std::string::basic_string<std::string_view,0>(&v819, (uint64_t)&v812);
                                        if (v421 >= 0)
                                          v427 = &v823;
                                        else
                                          v427 = v422;
                                        if (v419)
                                          v428 = " ";
                                        else
                                          v428 = "";
                                        if ((v821 & 0x80u) != 0)
                                          v425 = v819;
                                        v429 = WORD2(v827);
                                        v430 = HIWORD(v827);
                                        v431 = vp::get_log_source_file_path(v828, v426);
                                        v432 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v827);
                                        if (*(char *)(v432 + 23) >= 0)
                                          v433 = v432;
                                        else
                                          v433 = *(_QWORD *)v432;
                                        *(_DWORD *)v898 = 136316930;
                                        *(_QWORD *)&v898[4] = v427;
                                        *(_WORD *)&v898[12] = 2080;
                                        *(_QWORD *)&v898[14] = v428;
                                        v899 = 2080;
                                        v900 = "process downlink voice proc";
                                        v901 = 2080;
                                        v902 = v425;
                                        v903 = 1024;
                                        v904 = v429;
                                        v905 = 1024;
                                        v906 = v430;
                                        v907 = 2080;
                                        v908 = v431;
                                        v909 = 2080;
                                        v910 = v433;
                                        v434 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                        v435 = v420;
                                        v436 = 74;
LABEL_911:
                                        _os_log_impl(&dword_1B5ED0000, v435, OS_LOG_TYPE_ERROR, v434, v898, v436);
                                        if ((char)v821 < 0)
                                          operator delete(v819);
                                        goto LABEL_913;
                                      }
                                      goto LABEL_913;
                                    }
                                  }
                                  else if (v417)
                                  {
                                    v737 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v823);
                                    if ((v825 & 0x80u) == 0)
                                      v738 = (vp *)v825;
                                    else
                                      v738 = v824;
                                    v739 = vp::get_log(v737);
                                    if (os_log_type_enabled(v739, OS_LOG_TYPE_ERROR))
                                    {
                                      v740 = (char)v825;
                                      v741 = v823;
                                      v742 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v827);
                                      v812 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v742);
                                      v813 = v743;
                                      std::string::basic_string<std::string_view,0>(&v819, (uint64_t)&v812);
                                      if (v740 >= 0)
                                        v741 = &v823;
                                      if (v738)
                                        v745 = " ";
                                      else
                                        v745 = "";
                                      if ((v821 & 0x80u) == 0)
                                        v746 = &v819;
                                      else
                                        v746 = v819;
                                      v747 = WORD2(v827);
                                      v748 = HIWORD(v827);
                                      v749 = vp::get_log_source_file_path(v828, v744);
                                      *(_DWORD *)v898 = 136316674;
                                      *(_QWORD *)&v898[4] = v741;
                                      *(_WORD *)&v898[12] = 2080;
                                      *(_QWORD *)&v898[14] = v745;
                                      v899 = 2080;
                                      v900 = "process downlink voice proc";
                                      v901 = 2080;
                                      v902 = v746;
                                      v903 = 1024;
                                      v904 = v747;
                                      v905 = 1024;
                                      v906 = v748;
                                      v907 = 2080;
                                      v908 = v749;
                                      v434 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                      v435 = v739;
                                      v436 = 64;
                                      goto LABEL_911;
                                    }
LABEL_913:
                                    if ((char)v825 < 0)
                                      operator delete(v823);
                                    v11 = v802;
                                  }
                                  *(_DWORD *)v11 = 7;
                                  *(_BYTE *)(v11 + 4) = 0;
                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v827);
                                  v27 = 1;
LABEL_66:
                                  if (!v834)
                                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v831);
                                  goto LABEL_68;
                                }
                                vp::vx::io::Error::Error((vp::vx::io::Error *)&v831, (const vp::vx::io::Error *)&v835);
                                v391 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v831);
                                if (*(char *)(v391 + 23) >= 0)
                                  v392 = *(unsigned __int8 *)(v391 + 23);
                                else
                                  v392 = *(_QWORD *)(v391 + 8);
                                v393 = vp::get_log((vp *)v391);
                                v394 = os_log_type_enabled(v393, OS_LOG_TYPE_ERROR);
                                if (v392)
                                {
                                  if (v394)
                                  {
                                    v395 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v827);
                                    if ((v829 & 0x80u) == 0)
                                      v396 = (vp *)v829;
                                    else
                                      v396 = v828;
                                    v397 = vp::get_log(v395);
                                    if (os_log_type_enabled(v397, OS_LOG_TYPE_ERROR))
                                    {
                                      v398 = (char)v829;
                                      v399 = (void **)v827;
                                      v400 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v831);
                                      v819 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v400);
                                      v820 = v401;
                                      v402 = &v823;
                                      std::string::basic_string<std::string_view,0>(&v823, (uint64_t)&v819);
                                      if (v398 >= 0)
                                        v404 = &v827;
                                      else
                                        v404 = v399;
                                      if (v396)
                                        v405 = " ";
                                      else
                                        v405 = "";
                                      if ((v825 & 0x80u) != 0)
                                        v402 = v823;
                                      v406 = WORD2(v831);
                                      v407 = HIWORD(v831);
                                      v408 = vp::get_log_source_file_path(v832, v403);
                                      v409 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v831);
                                      if (*(char *)(v409 + 23) >= 0)
                                        v410 = v409;
                                      else
                                        v410 = *(_QWORD *)v409;
                                      *(_DWORD *)v898 = 136316930;
                                      *(_QWORD *)&v898[4] = v404;
                                      *(_WORD *)&v898[12] = 2080;
                                      *(_QWORD *)&v898[14] = v405;
                                      v899 = 2080;
                                      v900 = "get buffered output frame count for downlink voice proc";
                                      v901 = 2080;
                                      v902 = v402;
                                      v903 = 1024;
                                      v904 = v406;
                                      v905 = 1024;
                                      v906 = v407;
                                      v907 = 2080;
                                      v908 = v408;
                                      v909 = 2080;
                                      v910 = v410;
                                      v411 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                      v412 = v397;
                                      v413 = 74;
LABEL_891:
                                      _os_log_impl(&dword_1B5ED0000, v412, OS_LOG_TYPE_ERROR, v411, v898, v413);
                                      if ((char)v825 < 0)
                                        operator delete(v823);
                                      goto LABEL_893;
                                    }
                                    goto LABEL_893;
                                  }
                                }
                                else if (v394)
                                {
                                  v724 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v827);
                                  if ((v829 & 0x80u) == 0)
                                    v725 = (vp *)v829;
                                  else
                                    v725 = v828;
                                  v726 = vp::get_log(v724);
                                  if (os_log_type_enabled(v726, OS_LOG_TYPE_ERROR))
                                  {
                                    v727 = (char)v829;
                                    v728 = v827;
                                    v729 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v831);
                                    v819 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v729);
                                    v820 = v730;
                                    std::string::basic_string<std::string_view,0>(&v823, (uint64_t)&v819);
                                    if (v727 >= 0)
                                      v728 = &v827;
                                    if (v725)
                                      v732 = " ";
                                    else
                                      v732 = "";
                                    if ((v825 & 0x80u) == 0)
                                      v733 = &v823;
                                    else
                                      v733 = v823;
                                    v734 = WORD2(v831);
                                    v735 = HIWORD(v831);
                                    v736 = vp::get_log_source_file_path(v832, v731);
                                    *(_DWORD *)v898 = 136316674;
                                    *(_QWORD *)&v898[4] = v728;
                                    *(_WORD *)&v898[12] = 2080;
                                    *(_QWORD *)&v898[14] = v732;
                                    v899 = 2080;
                                    v900 = "get buffered output frame count for downlink voice proc";
                                    v901 = 2080;
                                    v902 = v733;
                                    v903 = 1024;
                                    v904 = v734;
                                    v905 = 1024;
                                    v906 = v735;
                                    v907 = 2080;
                                    v908 = v736;
                                    v411 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                    v412 = v726;
                                    v413 = 64;
                                    goto LABEL_891;
                                  }
LABEL_893:
                                  if ((char)v829 < 0)
                                    operator delete(v827);
                                  v11 = v802;
                                }
                                *(_DWORD *)v11 = 7;
                                *(_BYTE *)(v11 + 4) = 0;
                                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v831);
                                v27 = 1;
LABEL_68:
                                if (!v838)
                                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v835);
                                goto LABEL_70;
                              }
                              vp::vx::io::Error::Error((vp::vx::io::Error *)&v835, (const vp::vx::io::Error *)&v839);
                              v368 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v835);
                              if (*(char *)(v368 + 23) >= 0)
                                v369 = *(unsigned __int8 *)(v368 + 23);
                              else
                                v369 = *(_QWORD *)(v368 + 8);
                              v370 = vp::get_log((vp *)v368);
                              v371 = os_log_type_enabled(v370, OS_LOG_TYPE_ERROR);
                              if (v369)
                              {
                                if (v371)
                                {
                                  v372 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v831);
                                  if ((v833 & 0x80u) == 0)
                                    v373 = (vp *)v833;
                                  else
                                    v373 = v832;
                                  v374 = vp::get_log(v372);
                                  if (os_log_type_enabled(v374, OS_LOG_TYPE_ERROR))
                                  {
                                    v375 = (char)v833;
                                    v376 = (void **)v831;
                                    v377 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v835);
                                    v823 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v377);
                                    v824 = v378;
                                    v379 = &v827;
                                    std::string::basic_string<std::string_view,0>(&v827, (uint64_t)&v823);
                                    if (v375 >= 0)
                                      v381 = &v831;
                                    else
                                      v381 = v376;
                                    if (v373)
                                      v382 = " ";
                                    else
                                      v382 = "";
                                    if ((v829 & 0x80u) != 0)
                                      v379 = v827;
                                    v383 = WORD2(v835);
                                    v384 = HIWORD(v835);
                                    v385 = vp::get_log_source_file_path(v836, v380);
                                    v386 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v835);
                                    if (*(char *)(v386 + 23) >= 0)
                                      v387 = v386;
                                    else
                                      v387 = *(_QWORD *)v386;
                                    *(_DWORD *)v898 = 136316930;
                                    *(_QWORD *)&v898[4] = v381;
                                    *(_WORD *)&v898[12] = 2080;
                                    *(_QWORD *)&v898[14] = v382;
                                    v899 = 2080;
                                    v900 = "get frame count deficit for downlink voice mix DSP";
                                    v901 = 2080;
                                    v902 = v379;
                                    v903 = 1024;
                                    v904 = v383;
                                    v905 = 1024;
                                    v906 = v384;
                                    v907 = 2080;
                                    v908 = v385;
                                    v909 = 2080;
                                    v910 = v387;
                                    v388 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                    v389 = v374;
                                    v390 = 74;
LABEL_871:
                                    _os_log_impl(&dword_1B5ED0000, v389, OS_LOG_TYPE_ERROR, v388, v898, v390);
                                    if ((char)v829 < 0)
                                      operator delete(v827);
                                    goto LABEL_873;
                                  }
                                  goto LABEL_873;
                                }
                              }
                              else if (v371)
                              {
                                v711 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v831);
                                if ((v833 & 0x80u) == 0)
                                  v712 = (vp *)v833;
                                else
                                  v712 = v832;
                                v713 = vp::get_log(v711);
                                if (os_log_type_enabled(v713, OS_LOG_TYPE_ERROR))
                                {
                                  v714 = (char)v833;
                                  v715 = v831;
                                  v716 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v835);
                                  v823 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v716);
                                  v824 = v717;
                                  std::string::basic_string<std::string_view,0>(&v827, (uint64_t)&v823);
                                  if (v714 >= 0)
                                    v715 = &v831;
                                  if (v712)
                                    v719 = " ";
                                  else
                                    v719 = "";
                                  if ((v829 & 0x80u) == 0)
                                    v720 = &v827;
                                  else
                                    v720 = v827;
                                  v721 = WORD2(v835);
                                  v722 = HIWORD(v835);
                                  v723 = vp::get_log_source_file_path(v836, v718);
                                  *(_DWORD *)v898 = 136316674;
                                  *(_QWORD *)&v898[4] = v715;
                                  *(_WORD *)&v898[12] = 2080;
                                  *(_QWORD *)&v898[14] = v719;
                                  v899 = 2080;
                                  v900 = "get frame count deficit for downlink voice mix DSP";
                                  v901 = 2080;
                                  v902 = v720;
                                  v903 = 1024;
                                  v904 = v721;
                                  v905 = 1024;
                                  v906 = v722;
                                  v907 = 2080;
                                  v908 = v723;
                                  v388 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                  v389 = v713;
                                  v390 = 64;
                                  goto LABEL_871;
                                }
LABEL_873:
                                if ((char)v833 < 0)
                                  operator delete(v831);
                                v11 = v802;
                              }
                              *(_DWORD *)v11 = 7;
                              *(_BYTE *)(v11 + 4) = 0;
                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v835);
                              v27 = 1;
LABEL_70:
                              if (!v842)
                                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v839);
                              goto LABEL_72;
                            }
                            vp::vx::io::Error::Error((vp::vx::io::Error *)&v839, (const vp::vx::io::Error *)&v843);
                            v345 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v839);
                            if (*(char *)(v345 + 23) >= 0)
                              v346 = *(unsigned __int8 *)(v345 + 23);
                            else
                              v346 = *(_QWORD *)(v345 + 8);
                            v347 = vp::get_log((vp *)v345);
                            v348 = os_log_type_enabled(v347, OS_LOG_TYPE_ERROR);
                            if (v346)
                            {
                              if (v348)
                              {
                                v349 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v835);
                                if ((v837 & 0x80u) == 0)
                                  v350 = (vp *)v837;
                                else
                                  v350 = v836;
                                v351 = vp::get_log(v349);
                                if (os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
                                {
                                  v352 = (char)v837;
                                  v353 = (void **)v835;
                                  v354 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v839);
                                  v827 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v354);
                                  v828 = v355;
                                  v356 = &v831;
                                  std::string::basic_string<std::string_view,0>(&v831, (uint64_t)&v827);
                                  if (v352 >= 0)
                                    v358 = &v835;
                                  else
                                    v358 = v353;
                                  if (v350)
                                    v359 = " ";
                                  else
                                    v359 = "";
                                  if ((v833 & 0x80u) != 0)
                                    v356 = v831;
                                  v360 = WORD2(v839);
                                  v361 = HIWORD(v839);
                                  v362 = vp::get_log_source_file_path(v840, v357);
                                  v363 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v839);
                                  if (*(char *)(v363 + 23) >= 0)
                                    v364 = v363;
                                  else
                                    v364 = *(_QWORD *)v363;
                                  *(_DWORD *)v898 = 136316930;
                                  *(_QWORD *)&v898[4] = v358;
                                  *(_WORD *)&v898[12] = 2080;
                                  *(_QWORD *)&v898[14] = v359;
                                  v899 = 2080;
                                  v900 = "get buffered input frame count for downlink voice mix DSP";
                                  v901 = 2080;
                                  v902 = v356;
                                  v903 = 1024;
                                  v904 = v360;
                                  v905 = 1024;
                                  v906 = v361;
                                  v907 = 2080;
                                  v908 = v362;
                                  v909 = 2080;
                                  v910 = v364;
                                  v365 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                  v366 = v351;
                                  v367 = 74;
LABEL_851:
                                  _os_log_impl(&dword_1B5ED0000, v366, OS_LOG_TYPE_ERROR, v365, v898, v367);
                                  if ((char)v833 < 0)
                                    operator delete(v831);
                                  goto LABEL_853;
                                }
                                goto LABEL_853;
                              }
                            }
                            else if (v348)
                            {
                              v698 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v835);
                              if ((v837 & 0x80u) == 0)
                                v699 = (vp *)v837;
                              else
                                v699 = v836;
                              v700 = vp::get_log(v698);
                              if (os_log_type_enabled(v700, OS_LOG_TYPE_ERROR))
                              {
                                v701 = (char)v837;
                                v702 = v835;
                                v703 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v839);
                                v827 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v703);
                                v828 = v704;
                                std::string::basic_string<std::string_view,0>(&v831, (uint64_t)&v827);
                                if (v701 >= 0)
                                  v702 = &v835;
                                if (v699)
                                  v706 = " ";
                                else
                                  v706 = "";
                                if ((v833 & 0x80u) == 0)
                                  v707 = &v831;
                                else
                                  v707 = v831;
                                v708 = WORD2(v839);
                                v709 = HIWORD(v839);
                                v710 = vp::get_log_source_file_path(v840, v705);
                                *(_DWORD *)v898 = 136316674;
                                *(_QWORD *)&v898[4] = v702;
                                *(_WORD *)&v898[12] = 2080;
                                *(_QWORD *)&v898[14] = v706;
                                v899 = 2080;
                                v900 = "get buffered input frame count for downlink voice mix DSP";
                                v901 = 2080;
                                v902 = v707;
                                v903 = 1024;
                                v904 = v708;
                                v905 = 1024;
                                v906 = v709;
                                v907 = 2080;
                                v908 = v710;
                                v365 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                                v366 = v700;
                                v367 = 64;
                                goto LABEL_851;
                              }
LABEL_853:
                              if ((char)v837 < 0)
                                operator delete(v835);
                              v11 = v802;
                            }
                            *(_DWORD *)v11 = 7;
                            *(_BYTE *)(v11 + 4) = 0;
                            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v839);
                            v27 = 1;
LABEL_72:
                            if (!v846)
                              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v843);
                            goto LABEL_74;
                          }
                          vp::vx::io::Error::Error((vp::vx::io::Error *)&v843, (const vp::vx::io::Error *)&v847);
                          v322 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v843);
                          if (*(char *)(v322 + 23) >= 0)
                            v323 = *(unsigned __int8 *)(v322 + 23);
                          else
                            v323 = *(_QWORD *)(v322 + 8);
                          v324 = vp::get_log((vp *)v322);
                          v325 = os_log_type_enabled(v324, OS_LOG_TYPE_ERROR);
                          if (v323)
                          {
                            if (v325)
                            {
                              v326 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v839);
                              if ((v841 & 0x80u) == 0)
                                v327 = (vp *)v841;
                              else
                                v327 = v840;
                              v328 = vp::get_log(v326);
                              if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
                              {
                                v329 = (char)v841;
                                v330 = (void **)v839;
                                v331 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v843);
                                v831 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v331);
                                v832 = v332;
                                v333 = &v835;
                                std::string::basic_string<std::string_view,0>(&v835, (uint64_t)&v831);
                                if (v329 >= 0)
                                  v335 = &v839;
                                else
                                  v335 = v330;
                                if (v327)
                                  v336 = " ";
                                else
                                  v336 = "";
                                if ((v837 & 0x80u) != 0)
                                  v333 = v835;
                                v337 = WORD2(v843);
                                v338 = HIWORD(v843);
                                v339 = vp::get_log_source_file_path(v844, v334);
                                v340 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v843);
                                if (*(char *)(v340 + 23) >= 0)
                                  v341 = v340;
                                else
                                  v341 = *(_QWORD *)v340;
                                *(_DWORD *)v898 = 136316930;
                                *(_QWORD *)&v898[4] = v335;
                                *(_WORD *)&v898[12] = 2080;
                                *(_QWORD *)&v898[14] = v336;
                                v899 = 2080;
                                v900 = "get required input frame count for downlink voice mix DSP";
                                v901 = 2080;
                                v902 = v333;
                                v903 = 1024;
                                v904 = v337;
                                v905 = 1024;
                                v906 = v338;
                                v907 = 2080;
                                v908 = v339;
                                v909 = 2080;
                                v910 = v341;
                                v342 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                                v343 = v328;
                                v344 = 74;
LABEL_831:
                                _os_log_impl(&dword_1B5ED0000, v343, OS_LOG_TYPE_ERROR, v342, v898, v344);
                                if ((char)v837 < 0)
                                  operator delete(v835);
                                goto LABEL_833;
                              }
                              goto LABEL_833;
                            }
                          }
                          else if (v325)
                          {
                            v685 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v839);
                            if ((v841 & 0x80u) == 0)
                              v686 = (vp *)v841;
                            else
                              v686 = v840;
                            v687 = vp::get_log(v685);
                            if (os_log_type_enabled(v687, OS_LOG_TYPE_ERROR))
                            {
                              v688 = (char)v841;
                              v689 = v839;
                              v690 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v843);
                              v831 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v690);
                              v832 = v691;
                              std::string::basic_string<std::string_view,0>(&v835, (uint64_t)&v831);
                              if (v688 >= 0)
                                v689 = &v839;
                              if (v686)
                                v693 = " ";
                              else
                                v693 = "";
                              if ((v837 & 0x80u) == 0)
                                v694 = &v835;
                              else
                                v694 = v835;
                              v695 = WORD2(v843);
                              v696 = HIWORD(v843);
                              v697 = vp::get_log_source_file_path(v844, v692);
                              *(_DWORD *)v898 = 136316674;
                              *(_QWORD *)&v898[4] = v689;
                              *(_WORD *)&v898[12] = 2080;
                              *(_QWORD *)&v898[14] = v693;
                              v899 = 2080;
                              v900 = "get required input frame count for downlink voice mix DSP";
                              v901 = 2080;
                              v902 = v694;
                              v903 = 1024;
                              v904 = v695;
                              v905 = 1024;
                              v906 = v696;
                              v907 = 2080;
                              v908 = v697;
                              v342 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                              v343 = v687;
                              v344 = 64;
                              goto LABEL_831;
                            }
LABEL_833:
                            if ((char)v841 < 0)
                              operator delete(v839);
                            v11 = v802;
                          }
                          *(_DWORD *)v11 = 7;
                          *(_BYTE *)(v11 + 4) = 0;
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v843);
                          v27 = 1;
LABEL_74:
                          if (!v850)
                            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v847);
                          goto LABEL_76;
                        }
                        vp::vx::io::Error::Error((vp::vx::io::Error *)&v847, (const vp::vx::io::Error *)&v851);
                        v299 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v847);
                        if (*(char *)(v299 + 23) >= 0)
                          v300 = *(unsigned __int8 *)(v299 + 23);
                        else
                          v300 = *(_QWORD *)(v299 + 8);
                        v301 = vp::get_log((vp *)v299);
                        v302 = os_log_type_enabled(v301, OS_LOG_TYPE_ERROR);
                        if (v300)
                        {
                          if (v302)
                          {
                            v303 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v843);
                            if ((v845 & 0x80u) == 0)
                              v304 = (vp *)v845;
                            else
                              v304 = v844;
                            v305 = vp::get_log(v303);
                            if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
                            {
                              v306 = (char)v845;
                              v307 = (void **)v843;
                              v308 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v847);
                              v835 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v308);
                              v836 = v309;
                              v310 = &v839;
                              std::string::basic_string<std::string_view,0>(&v839, (uint64_t)&v835);
                              if (v306 >= 0)
                                v312 = &v843;
                              else
                                v312 = v307;
                              if (v304)
                                v313 = " ";
                              else
                                v313 = "";
                              if ((v841 & 0x80u) != 0)
                                v310 = v839;
                              v314 = WORD2(v847);
                              v315 = HIWORD(v847);
                              v316 = vp::get_log_source_file_path(v848, v311);
                              v317 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v847);
                              if (*(char *)(v317 + 23) >= 0)
                                v318 = v317;
                              else
                                v318 = *(_QWORD *)v317;
                              *(_DWORD *)v898 = 136316930;
                              *(_QWORD *)&v898[4] = v312;
                              *(_WORD *)&v898[12] = 2080;
                              *(_QWORD *)&v898[14] = v313;
                              v899 = 2080;
                              v900 = "get buffered output frame count for downlink voice mix DSP";
                              v901 = 2080;
                              v902 = v310;
                              v903 = 1024;
                              v904 = v314;
                              v905 = 1024;
                              v906 = v315;
                              v907 = 2080;
                              v908 = v316;
                              v909 = 2080;
                              v910 = v318;
                              v319 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                              v320 = v305;
                              v321 = 74;
LABEL_811:
                              _os_log_impl(&dword_1B5ED0000, v320, OS_LOG_TYPE_ERROR, v319, v898, v321);
                              if ((char)v841 < 0)
                                operator delete(v839);
                              goto LABEL_813;
                            }
                            goto LABEL_813;
                          }
                        }
                        else if (v302)
                        {
                          v672 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v843);
                          if ((v845 & 0x80u) == 0)
                            v673 = (vp *)v845;
                          else
                            v673 = v844;
                          v674 = vp::get_log(v672);
                          if (os_log_type_enabled(v674, OS_LOG_TYPE_ERROR))
                          {
                            v675 = (char)v845;
                            v676 = v843;
                            v677 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v847);
                            v835 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v677);
                            v836 = v678;
                            std::string::basic_string<std::string_view,0>(&v839, (uint64_t)&v835);
                            if (v675 >= 0)
                              v676 = &v843;
                            if (v673)
                              v680 = " ";
                            else
                              v680 = "";
                            if ((v841 & 0x80u) == 0)
                              v681 = &v839;
                            else
                              v681 = v839;
                            v682 = WORD2(v847);
                            v683 = HIWORD(v847);
                            v684 = vp::get_log_source_file_path(v848, v679);
                            *(_DWORD *)v898 = 136316674;
                            *(_QWORD *)&v898[4] = v676;
                            *(_WORD *)&v898[12] = 2080;
                            *(_QWORD *)&v898[14] = v680;
                            v899 = 2080;
                            v900 = "get buffered output frame count for downlink voice mix DSP";
                            v901 = 2080;
                            v902 = v681;
                            v903 = 1024;
                            v904 = v682;
                            v905 = 1024;
                            v906 = v683;
                            v907 = 2080;
                            v908 = v684;
                            v319 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                            v320 = v674;
                            v321 = 64;
                            goto LABEL_811;
                          }
LABEL_813:
                          if ((char)v845 < 0)
                            operator delete(v843);
                          v11 = v802;
                        }
                        *(_DWORD *)v11 = 7;
                        *(_BYTE *)(v11 + 4) = 0;
                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v847);
                        v27 = 1;
LABEL_76:
                        if (!v854)
                          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v851);
                        goto LABEL_78;
                      }
                      vp::vx::io::Error::Error((vp::vx::io::Error *)&v851, (const vp::vx::io::Error *)&v855);
                      v276 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v851);
                      if (*(char *)(v276 + 23) >= 0)
                        v277 = *(unsigned __int8 *)(v276 + 23);
                      else
                        v277 = *(_QWORD *)(v276 + 8);
                      v278 = vp::get_log((vp *)v276);
                      v279 = os_log_type_enabled(v278, OS_LOG_TYPE_ERROR);
                      if (v277)
                      {
                        if (v279)
                        {
                          v280 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v847);
                          if ((v849 & 0x80u) == 0)
                            v281 = (vp *)v849;
                          else
                            v281 = v848;
                          v282 = vp::get_log(v280);
                          if (os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                          {
                            v283 = (char)v849;
                            v284 = (void **)v847;
                            v285 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v851);
                            v839 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v285);
                            v840 = v286;
                            v287 = &v843;
                            std::string::basic_string<std::string_view,0>(&v843, (uint64_t)&v839);
                            if (v283 >= 0)
                              v289 = &v847;
                            else
                              v289 = v284;
                            if (v281)
                              v290 = " ";
                            else
                              v290 = "";
                            if ((v845 & 0x80u) != 0)
                              v287 = v843;
                            v291 = WORD2(v851);
                            v292 = HIWORD(v851);
                            v293 = vp::get_log_source_file_path(v852, v288);
                            v294 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v851);
                            if (*(char *)(v294 + 23) >= 0)
                              v295 = v294;
                            else
                              v295 = *(_QWORD *)v294;
                            *(_DWORD *)v898 = 136316930;
                            *(_QWORD *)&v898[4] = v289;
                            *(_WORD *)&v898[12] = 2080;
                            *(_QWORD *)&v898[14] = v290;
                            v899 = 2080;
                            v900 = "get frame count deficit for downlink voice DSP";
                            v901 = 2080;
                            v902 = v287;
                            v903 = 1024;
                            v904 = v291;
                            v905 = 1024;
                            v906 = v292;
                            v907 = 2080;
                            v908 = v293;
                            v909 = 2080;
                            v910 = v295;
                            v296 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                            v297 = v282;
                            v298 = 74;
LABEL_791:
                            _os_log_impl(&dword_1B5ED0000, v297, OS_LOG_TYPE_ERROR, v296, v898, v298);
                            if ((char)v845 < 0)
                              operator delete(v843);
                            goto LABEL_793;
                          }
                          goto LABEL_793;
                        }
                      }
                      else if (v279)
                      {
                        v659 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v847);
                        if ((v849 & 0x80u) == 0)
                          v660 = (vp *)v849;
                        else
                          v660 = v848;
                        v661 = vp::get_log(v659);
                        if (os_log_type_enabled(v661, OS_LOG_TYPE_ERROR))
                        {
                          v662 = (char)v849;
                          v663 = v847;
                          v664 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v851);
                          v839 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v664);
                          v840 = v665;
                          std::string::basic_string<std::string_view,0>(&v843, (uint64_t)&v839);
                          if (v662 >= 0)
                            v663 = &v847;
                          if (v660)
                            v667 = " ";
                          else
                            v667 = "";
                          if ((v845 & 0x80u) == 0)
                            v668 = &v843;
                          else
                            v668 = v843;
                          v669 = WORD2(v851);
                          v670 = HIWORD(v851);
                          v671 = vp::get_log_source_file_path(v852, v666);
                          *(_DWORD *)v898 = 136316674;
                          *(_QWORD *)&v898[4] = v663;
                          *(_WORD *)&v898[12] = 2080;
                          *(_QWORD *)&v898[14] = v667;
                          v899 = 2080;
                          v900 = "get frame count deficit for downlink voice DSP";
                          v901 = 2080;
                          v902 = v668;
                          v903 = 1024;
                          v904 = v669;
                          v905 = 1024;
                          v906 = v670;
                          v907 = 2080;
                          v908 = v671;
                          v296 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                          v297 = v661;
                          v298 = 64;
                          goto LABEL_791;
                        }
LABEL_793:
                        if ((char)v849 < 0)
                          operator delete(v847);
                        v11 = v802;
                      }
                      *(_DWORD *)v11 = 7;
                      *(_BYTE *)(v11 + 4) = 0;
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v851);
                      v27 = 1;
LABEL_78:
                      if (!v858)
                        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v855);
                      goto LABEL_80;
                    }
                    vp::vx::io::Error::Error((vp::vx::io::Error *)&v855, (const vp::vx::io::Error *)&v859);
                    v253 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v855);
                    if (*(char *)(v253 + 23) >= 0)
                      v254 = *(unsigned __int8 *)(v253 + 23);
                    else
                      v254 = *(_QWORD *)(v253 + 8);
                    v255 = vp::get_log((vp *)v253);
                    v256 = os_log_type_enabled(v255, OS_LOG_TYPE_ERROR);
                    if (v254)
                    {
                      if (v256)
                      {
                        v257 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v851);
                        if ((v853 & 0x80u) == 0)
                          v258 = (vp *)v853;
                        else
                          v258 = v852;
                        v259 = vp::get_log(v257);
                        if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
                        {
                          v260 = (char)v853;
                          v261 = (void **)v851;
                          v262 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v855);
                          v843 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v262);
                          v844 = v263;
                          v264 = &v847;
                          std::string::basic_string<std::string_view,0>(&v847, (uint64_t)&v843);
                          if (v260 >= 0)
                            v266 = &v851;
                          else
                            v266 = v261;
                          if (v258)
                            v267 = " ";
                          else
                            v267 = "";
                          if ((v849 & 0x80u) != 0)
                            v264 = v847;
                          v268 = WORD2(v855);
                          v269 = HIWORD(v855);
                          v270 = vp::get_log_source_file_path(v856, v265);
                          v271 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v855);
                          if (*(char *)(v271 + 23) >= 0)
                            v272 = v271;
                          else
                            v272 = *(_QWORD *)v271;
                          *(_DWORD *)v898 = 136316930;
                          *(_QWORD *)&v898[4] = v266;
                          *(_WORD *)&v898[12] = 2080;
                          *(_QWORD *)&v898[14] = v267;
                          v899 = 2080;
                          v900 = "get buffered input frame count for downlink voice DSP";
                          v901 = 2080;
                          v902 = v264;
                          v903 = 1024;
                          v904 = v268;
                          v905 = 1024;
                          v906 = v269;
                          v907 = 2080;
                          v908 = v270;
                          v909 = 2080;
                          v910 = v272;
                          v273 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                          v274 = v259;
                          v275 = 74;
LABEL_771:
                          _os_log_impl(&dword_1B5ED0000, v274, OS_LOG_TYPE_ERROR, v273, v898, v275);
                          if ((char)v849 < 0)
                            operator delete(v847);
                          goto LABEL_773;
                        }
                        goto LABEL_773;
                      }
                    }
                    else if (v256)
                    {
                      v646 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v851);
                      if ((v853 & 0x80u) == 0)
                        v647 = (vp *)v853;
                      else
                        v647 = v852;
                      v648 = vp::get_log(v646);
                      if (os_log_type_enabled(v648, OS_LOG_TYPE_ERROR))
                      {
                        v649 = (char)v853;
                        v650 = v851;
                        v651 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v855);
                        v843 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v651);
                        v844 = v652;
                        std::string::basic_string<std::string_view,0>(&v847, (uint64_t)&v843);
                        if (v649 >= 0)
                          v650 = &v851;
                        if (v647)
                          v654 = " ";
                        else
                          v654 = "";
                        if ((v849 & 0x80u) == 0)
                          v655 = &v847;
                        else
                          v655 = v847;
                        v656 = WORD2(v855);
                        v657 = HIWORD(v855);
                        v658 = vp::get_log_source_file_path(v856, v653);
                        *(_DWORD *)v898 = 136316674;
                        *(_QWORD *)&v898[4] = v650;
                        *(_WORD *)&v898[12] = 2080;
                        *(_QWORD *)&v898[14] = v654;
                        v899 = 2080;
                        v900 = "get buffered input frame count for downlink voice DSP";
                        v901 = 2080;
                        v902 = v655;
                        v903 = 1024;
                        v904 = v656;
                        v905 = 1024;
                        v906 = v657;
                        v907 = 2080;
                        v908 = v658;
                        v273 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                        v274 = v648;
                        v275 = 64;
                        goto LABEL_771;
                      }
LABEL_773:
                      if ((char)v853 < 0)
                        operator delete(v851);
                      v11 = v802;
                    }
                    *(_DWORD *)v11 = 7;
                    *(_BYTE *)(v11 + 4) = 0;
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v855);
                    v27 = 1;
LABEL_80:
                    if (!v862)
                      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v859);
                    goto LABEL_82;
                  }
                  vp::vx::io::Error::Error((vp::vx::io::Error *)&v859, (const vp::vx::io::Error *)&v863);
                  v230 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v859);
                  if (*(char *)(v230 + 23) >= 0)
                    v231 = *(unsigned __int8 *)(v230 + 23);
                  else
                    v231 = *(_QWORD *)(v230 + 8);
                  v232 = vp::get_log((vp *)v230);
                  v233 = os_log_type_enabled(v232, OS_LOG_TYPE_ERROR);
                  if (v231)
                  {
                    if (v233)
                    {
                      v234 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v855);
                      if ((v857 & 0x80u) == 0)
                        v235 = (vp *)v857;
                      else
                        v235 = v856;
                      v236 = vp::get_log(v234);
                      if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
                      {
                        v237 = (char)v857;
                        v238 = (void **)v855;
                        v239 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v859);
                        v847 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v239);
                        v848 = v240;
                        v241 = &v851;
                        std::string::basic_string<std::string_view,0>(&v851, (uint64_t)&v847);
                        if (v237 >= 0)
                          v243 = &v855;
                        else
                          v243 = v238;
                        if (v235)
                          v244 = " ";
                        else
                          v244 = "";
                        if ((v853 & 0x80u) != 0)
                          v241 = v851;
                        v245 = WORD2(v859);
                        v246 = HIWORD(v859);
                        v247 = vp::get_log_source_file_path(v860, v242);
                        v248 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v859);
                        if (*(char *)(v248 + 23) >= 0)
                          v249 = v248;
                        else
                          v249 = *(_QWORD *)v248;
                        *(_DWORD *)v898 = 136316930;
                        *(_QWORD *)&v898[4] = v243;
                        *(_WORD *)&v898[12] = 2080;
                        *(_QWORD *)&v898[14] = v244;
                        v899 = 2080;
                        v900 = "get required input frame count for downlink voice DSP";
                        v901 = 2080;
                        v902 = v241;
                        v903 = 1024;
                        v904 = v245;
                        v905 = 1024;
                        v906 = v246;
                        v907 = 2080;
                        v908 = v247;
                        v909 = 2080;
                        v910 = v249;
                        v250 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                        v251 = v236;
                        v252 = 74;
LABEL_751:
                        _os_log_impl(&dword_1B5ED0000, v251, OS_LOG_TYPE_ERROR, v250, v898, v252);
                        if ((char)v853 < 0)
                          operator delete(v851);
                        goto LABEL_753;
                      }
                      goto LABEL_753;
                    }
                  }
                  else if (v233)
                  {
                    v633 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v855);
                    if ((v857 & 0x80u) == 0)
                      v634 = (vp *)v857;
                    else
                      v634 = v856;
                    v635 = vp::get_log(v633);
                    if (os_log_type_enabled(v635, OS_LOG_TYPE_ERROR))
                    {
                      v636 = (char)v857;
                      v637 = v855;
                      v638 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v859);
                      v847 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v638);
                      v848 = v639;
                      std::string::basic_string<std::string_view,0>(&v851, (uint64_t)&v847);
                      if (v636 >= 0)
                        v637 = &v855;
                      if (v634)
                        v641 = " ";
                      else
                        v641 = "";
                      if ((v853 & 0x80u) == 0)
                        v642 = &v851;
                      else
                        v642 = v851;
                      v643 = WORD2(v859);
                      v644 = HIWORD(v859);
                      v645 = vp::get_log_source_file_path(v860, v640);
                      *(_DWORD *)v898 = 136316674;
                      *(_QWORD *)&v898[4] = v637;
                      *(_WORD *)&v898[12] = 2080;
                      *(_QWORD *)&v898[14] = v641;
                      v899 = 2080;
                      v900 = "get required input frame count for downlink voice DSP";
                      v901 = 2080;
                      v902 = v642;
                      v903 = 1024;
                      v904 = v643;
                      v905 = 1024;
                      v906 = v644;
                      v907 = 2080;
                      v908 = v645;
                      v250 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                      v251 = v635;
                      v252 = 64;
                      goto LABEL_751;
                    }
LABEL_753:
                    if ((char)v857 < 0)
                      operator delete(v855);
                    v11 = v802;
                  }
                  *(_DWORD *)v11 = 7;
                  *(_BYTE *)(v11 + 4) = 0;
                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v859);
                  v27 = 1;
LABEL_82:
                  if (!v866)
                    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v863);
                  goto LABEL_84;
                }
                vp::vx::io::Error::Error((vp::vx::io::Error *)&v863, (const vp::vx::io::Error *)&v867);
                v207 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v863);
                if (*(char *)(v207 + 23) >= 0)
                  v208 = *(unsigned __int8 *)(v207 + 23);
                else
                  v208 = *(_QWORD *)(v207 + 8);
                v209 = vp::get_log((vp *)v207);
                v210 = os_log_type_enabled(v209, OS_LOG_TYPE_ERROR);
                if (v208)
                {
                  if (v210)
                  {
                    v211 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v859);
                    if ((v861 & 0x80u) == 0)
                      v212 = (vp *)v861;
                    else
                      v212 = v860;
                    v213 = vp::get_log(v211);
                    if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
                    {
                      v214 = (char)v861;
                      v215 = (void **)v859;
                      v216 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v863);
                      v851 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v216);
                      v852 = v217;
                      v218 = &v855;
                      std::string::basic_string<std::string_view,0>(&v855, (uint64_t)&v851);
                      if (v214 >= 0)
                        v220 = &v859;
                      else
                        v220 = v215;
                      if (v212)
                        v221 = " ";
                      else
                        v221 = "";
                      if ((v857 & 0x80u) != 0)
                        v218 = v855;
                      v222 = WORD2(v863);
                      v223 = HIWORD(v863);
                      v224 = vp::get_log_source_file_path(v864, v219);
                      v225 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v863);
                      if (*(char *)(v225 + 23) >= 0)
                        v226 = v225;
                      else
                        v226 = *(_QWORD *)v225;
                      *(_DWORD *)v898 = 136316930;
                      *(_QWORD *)&v898[4] = v220;
                      *(_WORD *)&v898[12] = 2080;
                      *(_QWORD *)&v898[14] = v221;
                      v899 = 2080;
                      v900 = "get buffered output frame count for downlink voice DSP";
                      v901 = 2080;
                      v902 = v218;
                      v903 = 1024;
                      v904 = v222;
                      v905 = 1024;
                      v906 = v223;
                      v907 = 2080;
                      v908 = v224;
                      v909 = 2080;
                      v910 = v226;
                      v227 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                      v228 = v213;
                      v229 = 74;
LABEL_731:
                      _os_log_impl(&dword_1B5ED0000, v228, OS_LOG_TYPE_ERROR, v227, v898, v229);
                      if ((char)v857 < 0)
                        operator delete(v855);
                      goto LABEL_733;
                    }
                    goto LABEL_733;
                  }
                }
                else if (v210)
                {
                  v620 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v859);
                  if ((v861 & 0x80u) == 0)
                    v621 = (vp *)v861;
                  else
                    v621 = v860;
                  v622 = vp::get_log(v620);
                  if (os_log_type_enabled(v622, OS_LOG_TYPE_ERROR))
                  {
                    v623 = (char)v861;
                    v624 = v859;
                    v625 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v863);
                    v851 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v625);
                    v852 = v626;
                    std::string::basic_string<std::string_view,0>(&v855, (uint64_t)&v851);
                    if (v623 >= 0)
                      v624 = &v859;
                    if (v621)
                      v628 = " ";
                    else
                      v628 = "";
                    if ((v857 & 0x80u) == 0)
                      v629 = &v855;
                    else
                      v629 = v855;
                    v630 = WORD2(v863);
                    v631 = HIWORD(v863);
                    v632 = vp::get_log_source_file_path(v864, v627);
                    *(_DWORD *)v898 = 136316674;
                    *(_QWORD *)&v898[4] = v624;
                    *(_WORD *)&v898[12] = 2080;
                    *(_QWORD *)&v898[14] = v628;
                    v899 = 2080;
                    v900 = "get buffered output frame count for downlink voice DSP";
                    v901 = 2080;
                    v902 = v629;
                    v903 = 1024;
                    v904 = v630;
                    v905 = 1024;
                    v906 = v631;
                    v907 = 2080;
                    v908 = v632;
                    v227 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                    v228 = v622;
                    v229 = 64;
                    goto LABEL_731;
                  }
LABEL_733:
                  if ((char)v861 < 0)
                    operator delete(v859);
                  v11 = v802;
                }
                *(_DWORD *)v11 = 7;
                *(_BYTE *)(v11 + 4) = 0;
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v863);
                v27 = 1;
LABEL_84:
                if (!v870)
                  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v867);
                goto LABEL_86;
              }
              vp::vx::io::Error::Error((vp::vx::io::Error *)&v867, (const vp::vx::io::Error *)&v871);
              v184 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v867);
              if (*(char *)(v184 + 23) >= 0)
                v185 = *(unsigned __int8 *)(v184 + 23);
              else
                v185 = *(_QWORD *)(v184 + 8);
              v186 = vp::get_log((vp *)v184);
              v187 = os_log_type_enabled(v186, OS_LOG_TYPE_ERROR);
              if (v185)
              {
                if (v187)
                {
                  v188 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v863);
                  if ((v865 & 0x80u) == 0)
                    v189 = (vp *)v865;
                  else
                    v189 = v864;
                  v190 = vp::get_log(v188);
                  if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                  {
                    v191 = (char)v865;
                    v192 = (void **)v863;
                    v193 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v867);
                    v855 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v193);
                    v856 = v194;
                    v195 = &v859;
                    std::string::basic_string<std::string_view,0>(&v859, (uint64_t)&v855);
                    if (v191 >= 0)
                      v197 = &v863;
                    else
                      v197 = v192;
                    if (v189)
                      v198 = " ";
                    else
                      v198 = "";
                    if ((v861 & 0x80u) != 0)
                      v195 = v859;
                    v199 = WORD2(v867);
                    v200 = HIWORD(v867);
                    v201 = vp::get_log_source_file_path(v868, v196);
                    v202 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v867);
                    if (*(char *)(v202 + 23) >= 0)
                      v203 = v202;
                    else
                      v203 = *(_QWORD *)v202;
                    *(_DWORD *)v898 = 136316930;
                    *(_QWORD *)&v898[4] = v197;
                    *(_WORD *)&v898[12] = 2080;
                    *(_QWORD *)&v898[14] = v198;
                    v899 = 2080;
                    v900 = "get frame deficit for downlink dynamics DSP";
                    v901 = 2080;
                    v902 = v195;
                    v903 = 1024;
                    v904 = v199;
                    v905 = 1024;
                    v906 = v200;
                    v907 = 2080;
                    v908 = v201;
                    v909 = 2080;
                    v910 = v203;
                    v204 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                    v205 = v190;
                    v206 = 74;
LABEL_711:
                    _os_log_impl(&dword_1B5ED0000, v205, OS_LOG_TYPE_ERROR, v204, v898, v206);
                    if ((char)v861 < 0)
                      operator delete(v859);
                    goto LABEL_713;
                  }
                  goto LABEL_713;
                }
              }
              else if (v187)
              {
                v607 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v863);
                if ((v865 & 0x80u) == 0)
                  v608 = (vp *)v865;
                else
                  v608 = v864;
                v609 = vp::get_log(v607);
                if (os_log_type_enabled(v609, OS_LOG_TYPE_ERROR))
                {
                  v610 = (char)v865;
                  v611 = v863;
                  v612 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v867);
                  v855 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v612);
                  v856 = v613;
                  std::string::basic_string<std::string_view,0>(&v859, (uint64_t)&v855);
                  if (v610 >= 0)
                    v611 = &v863;
                  if (v608)
                    v615 = " ";
                  else
                    v615 = "";
                  if ((v861 & 0x80u) == 0)
                    v616 = &v859;
                  else
                    v616 = v859;
                  v617 = WORD2(v867);
                  v618 = HIWORD(v867);
                  v619 = vp::get_log_source_file_path(v868, v614);
                  *(_DWORD *)v898 = 136316674;
                  *(_QWORD *)&v898[4] = v611;
                  *(_WORD *)&v898[12] = 2080;
                  *(_QWORD *)&v898[14] = v615;
                  v899 = 2080;
                  v900 = "get frame deficit for downlink dynamics DSP";
                  v901 = 2080;
                  v902 = v616;
                  v903 = 1024;
                  v904 = v617;
                  v905 = 1024;
                  v906 = v618;
                  v907 = 2080;
                  v908 = v619;
                  v204 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                  v205 = v609;
                  v206 = 64;
                  goto LABEL_711;
                }
LABEL_713:
                if ((char)v865 < 0)
                  operator delete(v863);
                v11 = v802;
              }
              *(_DWORD *)v11 = 7;
              *(_BYTE *)(v11 + 4) = 0;
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v867);
              v27 = 1;
LABEL_86:
              if (!v874)
                vp::vx::io::Error::~Error((vp::vx::io::Error *)&v871);
              goto LABEL_88;
            }
            vp::vx::io::Error::Error((vp::vx::io::Error *)&v871, (const vp::vx::io::Error *)&v875);
            v161 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v871);
            if (*(char *)(v161 + 23) >= 0)
              v162 = *(unsigned __int8 *)(v161 + 23);
            else
              v162 = *(_QWORD *)(v161 + 8);
            v163 = vp::get_log((vp *)v161);
            v164 = os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
            if (v162)
            {
              if (v164)
              {
                v165 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v867);
                if ((v869 & 0x80u) == 0)
                  v166 = (vp *)v869;
                else
                  v166 = v868;
                v167 = vp::get_log(v165);
                if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
                {
                  v168 = (char)v869;
                  v169 = (void **)v867;
                  v170 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v871);
                  v859 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v170);
                  v860 = v171;
                  v172 = &v863;
                  std::string::basic_string<std::string_view,0>(&v863, (uint64_t)&v859);
                  if (v168 >= 0)
                    v174 = &v867;
                  else
                    v174 = v169;
                  if (v166)
                    v175 = " ";
                  else
                    v175 = "";
                  if ((v865 & 0x80u) != 0)
                    v172 = v863;
                  v176 = WORD2(v871);
                  v177 = HIWORD(v871);
                  v178 = vp::get_log_source_file_path(v872, v173);
                  v179 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v871);
                  if (*(char *)(v179 + 23) >= 0)
                    v180 = v179;
                  else
                    v180 = *(_QWORD *)v179;
                  *(_DWORD *)v898 = 136316930;
                  *(_QWORD *)&v898[4] = v174;
                  *(_WORD *)&v898[12] = 2080;
                  *(_QWORD *)&v898[14] = v175;
                  v899 = 2080;
                  v900 = "get buffered input frame count for downlink dynamics DSP";
                  v901 = 2080;
                  v902 = v172;
                  v903 = 1024;
                  v904 = v176;
                  v905 = 1024;
                  v906 = v177;
                  v907 = 2080;
                  v908 = v178;
                  v909 = 2080;
                  v910 = v180;
                  v181 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                  v182 = v167;
                  v183 = 74;
LABEL_691:
                  _os_log_impl(&dword_1B5ED0000, v182, OS_LOG_TYPE_ERROR, v181, v898, v183);
                  if ((char)v865 < 0)
                    operator delete(v863);
                  goto LABEL_693;
                }
                goto LABEL_693;
              }
            }
            else if (v164)
            {
              v594 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v867);
              if ((v869 & 0x80u) == 0)
                v595 = (vp *)v869;
              else
                v595 = v868;
              v596 = vp::get_log(v594);
              if (os_log_type_enabled(v596, OS_LOG_TYPE_ERROR))
              {
                v597 = (char)v869;
                v598 = v867;
                v599 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v871);
                v859 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v599);
                v860 = v600;
                std::string::basic_string<std::string_view,0>(&v863, (uint64_t)&v859);
                if (v597 >= 0)
                  v598 = &v867;
                if (v595)
                  v602 = " ";
                else
                  v602 = "";
                if ((v865 & 0x80u) == 0)
                  v603 = &v863;
                else
                  v603 = v863;
                v604 = WORD2(v871);
                v605 = HIWORD(v871);
                v606 = vp::get_log_source_file_path(v872, v601);
                *(_DWORD *)v898 = 136316674;
                *(_QWORD *)&v898[4] = v598;
                *(_WORD *)&v898[12] = 2080;
                *(_QWORD *)&v898[14] = v602;
                v899 = 2080;
                v900 = "get buffered input frame count for downlink dynamics DSP";
                v901 = 2080;
                v902 = v603;
                v903 = 1024;
                v904 = v604;
                v905 = 1024;
                v906 = v605;
                v907 = 2080;
                v908 = v606;
                v181 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
                v182 = v596;
                v183 = 64;
                goto LABEL_691;
              }
LABEL_693:
              if ((char)v869 < 0)
                operator delete(v867);
              v11 = v802;
            }
            *(_DWORD *)v11 = 7;
            *(_BYTE *)(v11 + 4) = 0;
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&v871);
            v27 = 1;
LABEL_88:
            if (!v878)
              vp::vx::io::Error::~Error((vp::vx::io::Error *)&v875);
            goto LABEL_90;
          }
          vp::vx::io::Error::Error((vp::vx::io::Error *)&v875, (const vp::vx::io::Error *)&__dst);
          v138 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v875);
          if (*(char *)(v138 + 23) >= 0)
            v139 = *(unsigned __int8 *)(v138 + 23);
          else
            v139 = *(_QWORD *)(v138 + 8);
          v140 = vp::get_log((vp *)v138);
          v141 = os_log_type_enabled(v140, OS_LOG_TYPE_ERROR);
          if (v139)
          {
            if (v141)
            {
              v142 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v871);
              if ((v873 & 0x80u) == 0)
                v143 = (vp *)v873;
              else
                v143 = v872;
              v144 = vp::get_log(v142);
              if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
              {
                v145 = (char)v873;
                v146 = (void **)v871;
                v147 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v875);
                v863 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v147);
                v864 = v148;
                v149 = &v867;
                std::string::basic_string<std::string_view,0>(&v867, (uint64_t)&v863);
                if (v145 >= 0)
                  v151 = &v871;
                else
                  v151 = v146;
                if (v143)
                  v152 = " ";
                else
                  v152 = "";
                if ((v869 & 0x80u) != 0)
                  v149 = v867;
                v153 = WORD2(v875);
                v154 = HIWORD(v875);
                v155 = vp::get_log_source_file_path(v876, v150);
                v156 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v875);
                if (*(char *)(v156 + 23) >= 0)
                  v157 = v156;
                else
                  v157 = *(_QWORD *)v156;
                *(_DWORD *)v898 = 136316930;
                *(_QWORD *)&v898[4] = v151;
                *(_WORD *)&v898[12] = 2080;
                *(_QWORD *)&v898[14] = v152;
                v899 = 2080;
                v900 = "get required input frame count for downlink dynamics DSP";
                v901 = 2080;
                v902 = v149;
                v903 = 1024;
                v904 = v153;
                v905 = 1024;
                v906 = v154;
                v907 = 2080;
                v908 = v155;
                v909 = 2080;
                v910 = v157;
                v158 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
                v159 = v144;
                v160 = 74;
LABEL_671:
                _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_ERROR, v158, v898, v160);
                if ((char)v869 < 0)
                  operator delete(v867);
                goto LABEL_673;
              }
              goto LABEL_673;
            }
          }
          else if (v141)
          {
            v581 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v871);
            if ((v873 & 0x80u) == 0)
              v582 = (vp *)v873;
            else
              v582 = v872;
            v583 = vp::get_log(v581);
            if (os_log_type_enabled(v583, OS_LOG_TYPE_ERROR))
            {
              v584 = (char)v873;
              v585 = v871;
              v586 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v875);
              v863 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v586);
              v864 = v587;
              std::string::basic_string<std::string_view,0>(&v867, (uint64_t)&v863);
              if (v584 >= 0)
                v585 = &v871;
              if (v582)
                v589 = " ";
              else
                v589 = "";
              if ((v869 & 0x80u) == 0)
                v590 = &v867;
              else
                v590 = v867;
              v591 = WORD2(v875);
              v592 = HIWORD(v875);
              v593 = vp::get_log_source_file_path(v876, v588);
              *(_DWORD *)v898 = 136316674;
              *(_QWORD *)&v898[4] = v585;
              *(_WORD *)&v898[12] = 2080;
              *(_QWORD *)&v898[14] = v589;
              v899 = 2080;
              v900 = "get required input frame count for downlink dynamics DSP";
              v901 = 2080;
              v902 = v590;
              v903 = 1024;
              v904 = v591;
              v905 = 1024;
              v906 = v592;
              v907 = 2080;
              v908 = v593;
              v158 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
              v159 = v583;
              v160 = 64;
              goto LABEL_671;
            }
LABEL_673:
            if ((char)v873 < 0)
              operator delete(v871);
            v11 = v802;
          }
          *(_DWORD *)v11 = 7;
          *(_BYTE *)(v11 + 4) = 0;
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&v875);
          v27 = 1;
LABEL_90:
          if (!v882)
            vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
          goto LABEL_92;
        }
        vp::vx::io::Error::Error((vp::vx::io::Error *)&__dst, (const vp::vx::io::Error *)&__p);
        v115 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
        if (*(char *)(v115 + 23) >= 0)
          v116 = *(unsigned __int8 *)(v115 + 23);
        else
          v116 = *(_QWORD *)(v115 + 8);
        v117 = vp::get_log((vp *)v115);
        v118 = os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
        if (v116)
        {
          if (v118)
          {
            v119 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v875);
            if ((v877 & 0x80u) == 0)
              v120 = (vp *)v877;
            else
              v120 = v876;
            v121 = vp::get_log(v119);
            if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
              v122 = (char)v877;
              v123 = (void **)v875;
              v124 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
              v867 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v124);
              v868 = v125;
              v126 = &v871;
              std::string::basic_string<std::string_view,0>(&v871, (uint64_t)&v867);
              if (v122 >= 0)
                v128 = &v875;
              else
                v128 = v123;
              if (v120)
                v129 = " ";
              else
                v129 = "";
              if ((v873 & 0x80u) != 0)
                v126 = v871;
              v130 = WORD2(__dst);
              v131 = HIWORD(__dst);
              v132 = vp::get_log_source_file_path(v880, v127);
              v133 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__dst);
              if (*(char *)(v133 + 23) >= 0)
                v134 = v133;
              else
                v134 = *(_QWORD *)v133;
              *(_DWORD *)v898 = 136316930;
              *(_QWORD *)&v898[4] = v128;
              *(_WORD *)&v898[12] = 2080;
              *(_QWORD *)&v898[14] = v129;
              v899 = 2080;
              v900 = "get buffered output frame count for downlink dynamics DSP";
              v901 = 2080;
              v902 = v126;
              v903 = 1024;
              v904 = v130;
              v905 = 1024;
              v906 = v131;
              v907 = 2080;
              v908 = v132;
              v909 = 2080;
              v910 = v134;
              v135 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
              v136 = v121;
              v137 = 74;
LABEL_651:
              _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_ERROR, v135, v898, v137);
              if ((char)v873 < 0)
                operator delete(v871);
              goto LABEL_653;
            }
            goto LABEL_653;
          }
        }
        else if (v118)
        {
          v568 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v875);
          if ((v877 & 0x80u) == 0)
            v569 = (vp *)v877;
          else
            v569 = v876;
          v570 = vp::get_log(v568);
          if (os_log_type_enabled(v570, OS_LOG_TYPE_ERROR))
          {
            v571 = (char)v877;
            v572 = v875;
            v573 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__dst);
            v867 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v573);
            v868 = v574;
            std::string::basic_string<std::string_view,0>(&v871, (uint64_t)&v867);
            if (v571 >= 0)
              v572 = &v875;
            if (v569)
              v576 = " ";
            else
              v576 = "";
            if ((v873 & 0x80u) == 0)
              v577 = &v871;
            else
              v577 = v871;
            v578 = WORD2(__dst);
            v579 = HIWORD(__dst);
            v580 = vp::get_log_source_file_path(v880, v575);
            *(_DWORD *)v898 = 136316674;
            *(_QWORD *)&v898[4] = v572;
            *(_WORD *)&v898[12] = 2080;
            *(_QWORD *)&v898[14] = v576;
            v899 = 2080;
            v900 = "get buffered output frame count for downlink dynamics DSP";
            v901 = 2080;
            v902 = v577;
            v903 = 1024;
            v904 = v578;
            v905 = 1024;
            v906 = v579;
            v907 = 2080;
            v908 = v580;
            v135 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
            v136 = v570;
            v137 = 64;
            goto LABEL_651;
          }
LABEL_653:
          if ((char)v877 < 0)
            operator delete(v875);
          v11 = v802;
        }
        *(_DWORD *)v11 = 7;
        *(_BYTE *)(v11 + 4) = 0;
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&__dst);
        v27 = 1;
LABEL_92:
        if (!v886)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
        goto LABEL_94;
      }
      vp::vx::io::Error::Error((vp::vx::io::Error *)&__p, (const vp::vx::io::Error *)&v887);
      v92 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
      if (*(char *)(v92 + 23) >= 0)
        v93 = *(unsigned __int8 *)(v92 + 23);
      else
        v93 = *(_QWORD *)(v92 + 8);
      v94 = vp::get_log((vp *)v92);
      v95 = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
      if (v93)
      {
        if (v95)
        {
          v96 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
          if ((v881 & 0x80u) == 0)
            v97 = (vp *)v881;
          else
            v97 = v880;
          v98 = vp::get_log(v96);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            v99 = (char)v881;
            v100 = (void **)__dst;
            v101 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
            v871 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v101);
            v872 = v102;
            v103 = &v875;
            std::string::basic_string<std::string_view,0>(&v875, (uint64_t)&v871);
            if (v99 >= 0)
              p_dst = &__dst;
            else
              p_dst = v100;
            if (v97)
              v106 = " ";
            else
              v106 = "";
            if ((v877 & 0x80u) != 0)
              v103 = v875;
            v107 = WORD2(__p);
            v108 = HIWORD(__p);
            v109 = vp::get_log_source_file_path(v884, v104);
            v110 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&__p);
            if (*(char *)(v110 + 23) >= 0)
              v111 = v110;
            else
              v111 = *(_QWORD *)v110;
            *(_DWORD *)v898 = 136316930;
            *(_QWORD *)&v898[4] = p_dst;
            *(_WORD *)&v898[12] = 2080;
            *(_QWORD *)&v898[14] = v106;
            v899 = 2080;
            v900 = "get required input frame count for downlink hardware DSP";
            v901 = 2080;
            v902 = v103;
            v903 = 1024;
            v904 = v107;
            v905 = 1024;
            v906 = v108;
            v907 = 2080;
            v908 = v109;
            v909 = 2080;
            v910 = v111;
            v112 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
            v113 = v98;
            v114 = 74;
LABEL_631:
            _os_log_impl(&dword_1B5ED0000, v113, OS_LOG_TYPE_ERROR, v112, v898, v114);
            if ((char)v877 < 0)
              operator delete(v875);
            goto LABEL_633;
          }
          goto LABEL_633;
        }
      }
      else if (v95)
      {
        v555 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__dst);
        if ((v881 & 0x80u) == 0)
          v556 = (vp *)v881;
        else
          v556 = v880;
        v557 = vp::get_log(v555);
        if (os_log_type_enabled(v557, OS_LOG_TYPE_ERROR))
        {
          v558 = (char)v881;
          v559 = __dst;
          v560 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&__p);
          v871 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v560);
          v872 = v561;
          std::string::basic_string<std::string_view,0>(&v875, (uint64_t)&v871);
          if (v558 >= 0)
            v559 = &__dst;
          if (v556)
            v563 = " ";
          else
            v563 = "";
          if ((v877 & 0x80u) == 0)
            v564 = &v875;
          else
            v564 = v875;
          v565 = WORD2(__p);
          v566 = HIWORD(__p);
          v567 = vp::get_log_source_file_path(v884, v562);
          *(_DWORD *)v898 = 136316674;
          *(_QWORD *)&v898[4] = v559;
          *(_WORD *)&v898[12] = 2080;
          *(_QWORD *)&v898[14] = v563;
          v899 = 2080;
          v900 = "get required input frame count for downlink hardware DSP";
          v901 = 2080;
          v902 = v564;
          v903 = 1024;
          v904 = v565;
          v905 = 1024;
          v906 = v566;
          v907 = 2080;
          v908 = v567;
          v112 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
          v113 = v557;
          v114 = 64;
          goto LABEL_631;
        }
LABEL_633:
        if ((char)v881 < 0)
          operator delete(__dst);
        v11 = v802;
      }
      *(_DWORD *)v11 = 7;
      *(_BYTE *)(v11 + 4) = 0;
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&__p);
      v27 = 1;
LABEL_94:
      if (!v890)
        vp::vx::io::Error::~Error((vp::vx::io::Error *)&v887);
      goto LABEL_96;
    }
    vp::vx::io::Error::Error((vp::vx::io::Error *)&v887, (const vp::vx::io::Error *)&v891);
    v69 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v887);
    if (*(char *)(v69 + 23) >= 0)
      v70 = *(unsigned __int8 *)(v69 + 23);
    else
      v70 = *(_QWORD *)(v69 + 8);
    v71 = vp::get_log((vp *)v69);
    v72 = os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
    v11 = v802;
    if (v70)
    {
      if (v72)
      {
        v73 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
        if ((v885 & 0x80u) == 0)
          v74 = (vp *)v885;
        else
          v74 = v884;
        v75 = vp::get_log(v73);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          v76 = (char)v885;
          v77 = (void **)__p;
          v78 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v887);
          v875 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v78);
          v876 = v79;
          v80 = &__dst;
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v875);
          if (v76 >= 0)
            p_p = &__p;
          else
            p_p = v77;
          if (v74)
            v83 = " ";
          else
            v83 = "";
          if ((v881 & 0x80u) != 0)
            v80 = __dst;
          v84 = WORD2(v887);
          v85 = HIWORD(v887);
          v86 = vp::get_log_source_file_path(v888, v81);
          v87 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v887);
          if (*(char *)(v87 + 23) >= 0)
            v88 = v87;
          else
            v88 = *(_QWORD *)v87;
          *(_DWORD *)v898 = 136316930;
          *(_QWORD *)&v898[4] = p_p;
          *(_WORD *)&v898[12] = 2080;
          *(_QWORD *)&v898[14] = v83;
          v899 = 2080;
          v900 = "get buffered input frame count for downlink hardware DSP";
          v901 = 2080;
          v902 = v80;
          v903 = 1024;
          v904 = v84;
          v905 = 1024;
          v906 = v85;
          v907 = 2080;
          v908 = v86;
          v909 = 2080;
          v910 = v88;
          v89 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          v90 = v75;
          v91 = 74;
LABEL_611:
          _os_log_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_ERROR, v89, v898, v91);
          if ((char)v881 < 0)
            operator delete(__dst);
          goto LABEL_613;
        }
        goto LABEL_613;
      }
    }
    else if (v72)
    {
      v542 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      if ((v885 & 0x80u) == 0)
        v543 = (vp *)v885;
      else
        v543 = v884;
      v544 = vp::get_log(v542);
      if (os_log_type_enabled(v544, OS_LOG_TYPE_ERROR))
      {
        v545 = (char)v885;
        v546 = __p;
        v547 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v887);
        v875 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v547);
        v876 = v548;
        std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)&v875);
        if (v545 >= 0)
          v546 = &__p;
        if (v543)
          v550 = " ";
        else
          v550 = "";
        if ((v881 & 0x80u) == 0)
          v551 = &__dst;
        else
          v551 = __dst;
        v552 = WORD2(v887);
        v553 = HIWORD(v887);
        v554 = vp::get_log_source_file_path(v888, v549);
        *(_DWORD *)v898 = 136316674;
        *(_QWORD *)&v898[4] = v546;
        *(_WORD *)&v898[12] = 2080;
        *(_QWORD *)&v898[14] = v550;
        v899 = 2080;
        v900 = "get buffered input frame count for downlink hardware DSP";
        v901 = 2080;
        v902 = v551;
        v903 = 1024;
        v904 = v552;
        v905 = 1024;
        v906 = v553;
        v907 = 2080;
        v908 = v554;
        v89 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        v90 = v544;
        v91 = 64;
        goto LABEL_611;
      }
LABEL_613:
      if ((char)v885 < 0)
        operator delete(__p);
      v11 = v802;
    }
    *(_DWORD *)v11 = 7;
    *(_BYTE *)(v11 + 4) = 0;
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&v887);
    v27 = 1;
LABEL_96:
    if (!v895)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&v891);
    goto LABEL_98;
  }
  vp::vx::io::Error::Error((vp::vx::io::Error *)&v891, (const vp::vx::io::Error *)buf);
  v46 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v891);
  if (*(char *)(v46 + 23) >= 0)
    v47 = *(unsigned __int8 *)(v46 + 23);
  else
    v47 = *(_QWORD *)(v46 + 8);
  v48 = vp::get_log((vp *)v46);
  v49 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
  v11 = v802;
  if (v47)
  {
    if (v49)
    {
      v50 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v887);
      if ((v889 & 0x80u) == 0)
        v51 = (vp *)v889;
      else
        v51 = v888;
      v52 = vp::get_log(v50);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = (char)v889;
        v54 = (void **)v887;
        v55 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v891);
        __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v55);
        v880 = v56;
        v57 = &__p;
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
        if (v53 >= 0)
          v59 = &v887;
        else
          v59 = v54;
        if (v51)
          v60 = " ";
        else
          v60 = "";
        if ((v885 & 0x80u) != 0)
          v57 = __p;
        v61 = v892;
        v62 = v893;
        v63 = vp::get_log_source_file_path(v894, v58);
        v64 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)&v891);
        if (*(char *)(v64 + 23) >= 0)
          v65 = v64;
        else
          v65 = *(_QWORD *)v64;
        *(_DWORD *)v898 = 136316930;
        *(_QWORD *)&v898[4] = v59;
        *(_WORD *)&v898[12] = 2080;
        *(_QWORD *)&v898[14] = v60;
        v899 = 2080;
        v900 = "get downlink hardware DSP I/O block size";
        v901 = 2080;
        v902 = v57;
        v903 = 1024;
        v904 = v61;
        v905 = 1024;
        v906 = v62;
        v907 = 2080;
        v908 = v63;
        v909 = 2080;
        v910 = v65;
        v66 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
        v67 = v52;
        v68 = 74;
LABEL_591:
        _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_ERROR, v66, v898, v68);
        if ((char)v885 < 0)
          operator delete(__p);
        goto LABEL_593;
      }
      goto LABEL_593;
    }
  }
  else if (v49)
  {
    v529 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v887);
    if ((v889 & 0x80u) == 0)
      v530 = (vp *)v889;
    else
      v530 = v888;
    v531 = vp::get_log(v529);
    if (os_log_type_enabled(v531, OS_LOG_TYPE_ERROR))
    {
      v532 = (char)v889;
      v533 = v887;
      v534 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v891);
      __dst = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v534);
      v880 = v535;
      std::string::basic_string<std::string_view,0>(&__p, (uint64_t)&__dst);
      if (v532 >= 0)
        v533 = &v887;
      if (v530)
        v537 = " ";
      else
        v537 = "";
      if ((v885 & 0x80u) == 0)
        v538 = &__p;
      else
        v538 = __p;
      v539 = v892;
      v540 = v893;
      v541 = vp::get_log_source_file_path(v894, v536);
      *(_DWORD *)v898 = 136316674;
      *(_QWORD *)&v898[4] = v533;
      *(_WORD *)&v898[12] = 2080;
      *(_QWORD *)&v898[14] = v537;
      v899 = 2080;
      v900 = "get downlink hardware DSP I/O block size";
      v901 = 2080;
      v902 = v538;
      v903 = 1024;
      v904 = v539;
      v905 = 1024;
      v906 = v540;
      v907 = 2080;
      v908 = v541;
      v66 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
      v67 = v531;
      v68 = 64;
      goto LABEL_591;
    }
LABEL_593:
    if ((char)v889 < 0)
      operator delete(v887);
    v11 = v802;
  }
  *(_DWORD *)v11 = 7;
  *(_BYTE *)(v11 + 4) = 0;
  vp::vx::io::Error::~Error((vp::vx::io::Error *)&v891);
  v27 = 1;
LABEL_98:
  if (!v915)
    vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
  result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v896);
  if (!v27)
  {
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 4) = 1;
  }
  return result;
}

void sub_1B600FC80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,void *a63)
{
  char a69;
  void *a70;
  uint64_t v70;
  vp *v72;
  NSObject *log;
  vp *log_context_info;
  NSObject *v75;

  if (a2)
  {
    if (a34 < 0)
      operator delete(__p);
    vp::vx::io::Error::~Error((vp::vx::io::Error *)&a16);
    if (!a28)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a22);
    if (!a41)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a35);
    if (!a48)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a42);
    if (!a55)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a49);
    if (!a62)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a56);
    if (!a69)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a63);
    if (!LOBYTE(STACK[0x200]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a70);
    if (!LOBYTE(STACK[0x238]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x208]);
    if (!LOBYTE(STACK[0x270]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x240]);
    if (!LOBYTE(STACK[0x2A8]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x278]);
    if (!LOBYTE(STACK[0x2E0]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x2B0]);
    if (!LOBYTE(STACK[0x318]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x2E8]);
    if (!LOBYTE(STACK[0x350]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x320]);
    if (!LOBYTE(STACK[0x388]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x358]);
    if (!LOBYTE(STACK[0x3C0]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x390]);
    if (!LOBYTE(STACK[0x3F8]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x3C8]);
    if (!LOBYTE(STACK[0x430]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x400]);
    if (!LOBYTE(STACK[0x468]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x438]);
    if (!LOBYTE(STACK[0x4A0]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x470]);
    if (!LOBYTE(STACK[0x4D8]))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&STACK[0x4A8]);
    if (!*(_BYTE *)(v70 - 112))
      vp::vx::io::Error::~Error((vp::vx::io::Error *)(v70 - 160));
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](v70 - 256);
    v72 = (vp *)__cxa_begin_catch(a1);
    log = vp::get_log(v72);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, (_QWORD *)(v70 - 160));
      v75 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&STACK[0x470]);
      if (*(char *)(v70 - 137) < 0)
        operator delete(*(void **)(v70 - 160));
    }
    *(_DWORD *)a9 = 11;
    *(_BYTE *)(a9 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B600BBA8);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::components_end_process<vp::vx::Downlink_Node_ID,vp::Expected<void,vp::vx::Error_Code>>(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  char v14;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v13 = *a3;
    v14 = *((_BYTE *)a3 + 4);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 280))(v7, a2, &v13);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::reset_all_of_downlink_dsp@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t result;
  uint64_t node_commands;
  uint64_t v9;
  NSObject *log;
  _BOOL4 v11;
  vp *log_context_info;
  uint64_t v13;
  NSObject *v14;
  int v15;
  void *v16;
  int id;
  uint64_t v18;
  const char *v19;
  const char *v20;
  void **v21;
  int v22;
  int v23;
  uint64_t log_source_file_path;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  vp *v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  void **v34;
  int v35;
  uint64_t v36;
  const char *v37;
  void **v38;
  const char *v39;
  void **v40;
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  void *v48;
  uint64_t v49;
  unsigned __int8 v50;
  _BYTE v51[4];
  unsigned __int16 v52;
  unsigned __int16 v53;
  vp *v54;
  char v55;
  char *v56;
  char v57;
  _BYTE buf[12];
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  void **v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)((char *)this + 1128);
  v56 = (char *)this + 1128;
  v4 = atomic_load((unsigned int *)this + 282);
  if (v4 > 0x7FFFFFFE)
  {
LABEL_6:
    v57 = 0;
LABEL_7:
    *(_DWORD *)a2 = 8;
    *(_BYTE *)(a2 + 4) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  }
  do
  {
    while (1)
    {
      v6 = __ldaxr(v3);
      if (v6 == v4)
        break;
      __clrex();
      v4 = v6;
      if (v6 >= 0x7FFFFFFF)
        goto LABEL_6;
    }
  }
  while (__stlxr(v4 + 1, v3));
  v57 = 1;
  if (!*((_QWORD *)this + 313))
    goto LABEL_7;
  *(_QWORD *)buf = (char *)this + 2512;
  *(_DWORD *)&buf[8] = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)buf, 8uLL);
  vp::vx::io::Graph::reset(*((vp::vx::io::Graph **)this + 313), v51);
  if (!v55)
  {
    node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v51);
    if (*(char *)(node_commands + 23) >= 0)
      v9 = *(unsigned __int8 *)(node_commands + 23);
    else
      v9 = *(_QWORD *)(node_commands + 8);
    log = vp::get_log((vp *)node_commands);
    v11 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11)
      {
        log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v48);
        if ((v50 & 0x80u) == 0)
          v13 = v50;
        else
          v13 = v49;
        v14 = vp::get_log(log_context_info);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = (char)v50;
          v16 = v48;
          id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
          v44 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
          v45 = v18;
          std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v44);
          if (v15 >= 0)
            v16 = &v48;
          if (v13)
            v20 = " ";
          else
            v20 = "";
          if (v47 >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          v22 = v52;
          v23 = v53;
          log_source_file_path = vp::get_log_source_file_path(v54, v19);
          v25 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v51);
          if (*(char *)(v25 + 23) >= 0)
            v26 = v25;
          else
            v26 = *(_QWORD *)v25;
          *(_DWORD *)buf = 136316930;
          *(_QWORD *)&buf[4] = v16;
          v59 = 2080;
          v60 = v20;
          v61 = 2080;
          v62 = "reset downlink DSP";
          v63 = 2080;
          v64 = v21;
          v65 = 1024;
          v66 = v22;
          v67 = 1024;
          v68 = v23;
          v69 = 2080;
          v70 = log_source_file_path;
          v71 = 2080;
          v72 = v26;
          v27 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\" - %s";
          v28 = v14;
          v29 = 74;
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    else if (v11)
    {
      v30 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v48);
      if ((v50 & 0x80u) == 0)
        v31 = v50;
      else
        v31 = v49;
      v32 = vp::get_log(v30);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = (char)v50;
        v34 = (void **)v48;
        v35 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
        v44 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v35);
        v45 = v36;
        std::string::basic_string<std::string_view,0>(__p, (uint64_t)&v44);
        if (v33 >= 0)
          v38 = &v48;
        else
          v38 = v34;
        if (v31)
          v39 = " ";
        else
          v39 = "";
        if (v47 >= 0)
          v40 = __p;
        else
          v40 = (void **)__p[0];
        v41 = v52;
        v42 = v53;
        v43 = vp::get_log_source_file_path(v54, v37);
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = v38;
        v59 = 2080;
        v60 = v39;
        v61 = 2080;
        v62 = "reset downlink DSP";
        v63 = 2080;
        v64 = v40;
        v65 = 1024;
        v66 = v41;
        v67 = 1024;
        v68 = v42;
        v69 = 2080;
        v70 = v43;
        v27 = "%s%sfailed to %s due to '%s' error at line %u column %u in \"%s\"";
        v28 = v32;
        v29 = 64;
LABEL_48:
        _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, v27, buf, v29);
        if (v47 < 0)
          operator delete(__p[0]);
      }
LABEL_50:
      if ((char)v50 < 0)
        operator delete(v48);
    }
    *(_DWORD *)a2 = 5;
    *(_BYTE *)(a2 + 4) = 0;
    if (!v55)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v51);
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  }
  result = std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v56);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  return result;
}

void sub_1B60106FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint8_t buf,int a37,int a38,__int16 a39,int a40,__int16 a41,__int16 a42,uint64_t a43)
{
  uint64_t v43;
  vp *v45;
  NSObject *log;
  vp *log_context_info;
  NSObject *v48;

  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    if (!a30)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)&a21);
    std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&a32);
    v45 = (vp *)__cxa_begin_catch(exception_object);
    log = vp::get_log(v45);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &a21);
      v48 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a12);
      if (a26 < 0)
        operator delete(a21);
    }
    *(_DWORD *)v43 = 11;
    *(_BYTE *)(v43 + 4) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B60103DCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::should_use_internal_reference(vp::vx::Voice_Processor *this)
{
  return *((unsigned __int8 *)this + 2408);
}

uint64_t vp::vx::Voice_Processor::should_fade_audio_buffers(vp::vx::Voice_Processor *this)
{
  return *((unsigned __int8 *)this + 2410);
}

void vp::vx::Voice_Processor::components_configure(vp::vx::Voice_Processor *this)
{
  time_t v2;
  uint64_t *v3;
  uint64_t *v4;
  time_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::chrono::system_clock::time_point __t;
  std::__shared_weak_count *v25;

  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v2 = std::chrono::system_clock::to_time_t(&__t);
  v3 = (uint64_t *)*((_QWORD *)this + 65);
  v4 = (uint64_t *)*((_QWORD *)this + 66);
  if (v3 != v4)
  {
    v5 = v2;
    do
    {
      v7 = *v3;
      v6 = (std::__shared_weak_count *)v3[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
      __t.__d_.__rep_ = *((_QWORD *)this + 76);
      v25 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      (*(void (**)(uint64_t, std::chrono::system_clock::time_point *))(*(_QWORD *)v7 + 16))(v7, &__t);
      v13 = v25;
      if (v25)
      {
        v14 = (unint64_t *)&v25->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      vp::vx::Voice_Processor::make_weak_state_manager(this, &v22);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v22);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      vp::vx::Voice_Processor::make_weak_state_observer(this, &v20);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v20);
      if (v21)
        std::__shared_weak_count::__release_weak(v21);
      vp::vx::Voice_Processor::make_weak_state_owner(this, &v18);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 40))(v7, &v18);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      (*(void (**)(uint64_t, time_t))(*(_QWORD *)v7 + 48))(v7, v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      if (v6)
      {
        v16 = (unint64_t *)&v6->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void vp::vx::Voice_Processor::components_begin_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 65);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  while (v1 != v2)
  {
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 2;
  }
}

void vp::vx::Voice_Processor::components_end_state_change(vp::vx::Voice_Processor *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 65);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  while (v1 != v2)
  {
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 2;
  }
}

void vp::vx::Voice_Processor::components_begin_configuration_changes(vp::vx::Voice_Processor *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 65);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  while (v1 != v2)
  {
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 2;
  }
}

void vp::vx::Voice_Processor::begin_state_change(vp::vx::Voice_Processor *this)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  void **v8;
  const char *v9;
  void *__p[2];
  unsigned __int8 v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  log = vp::get_log(this);
  if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v4 = v11;
    v5 = __p[1];
    v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v4 & 0x80u) == 0)
        v7 = v4;
      else
        v7 = (unint64_t)v5;
      v8 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v8 = __p;
      if (v7)
        v9 = " ";
      else
        v9 = "";
      *(_DWORD *)buf = 136315394;
      v13 = v8;
      v14 = 2080;
      v15 = v9;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_INFO, "%s%sbegin state change", buf, 0x16u);
    }
    if ((char)v11 < 0)
      operator delete(__p[0]);
  }
  vp::vx::Voice_Processor::components_begin_state_change(this);
}

void vp::vx::Voice_Processor::end_state_change(vp::vx::Voice_Processor *this)
{
  NSObject *log;
  _BOOL8 v3;
  vp *log_context_info;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *p_p;
  const char *v10;
  NSObject *v11;
  vp *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  vp *v19;
  NSObject *v20;
  vp *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  const char *v28;
  NSObject *v29;
  vp *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  NSObject *v36;
  os_log_type_t v37;
  NSObject *v38;
  vp *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  _BYTE v46[8];
  void *__p;
  uint64_t v48;
  unsigned __int8 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  log = vp::get_log(this);
  v3 = os_log_type_enabled(log, OS_LOG_TYPE_INFO);
  if (v3)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v5 = v49;
    v6 = v48;
    v7 = vp::get_log(log_context_info);
    v3 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v3)
    {
      if ((v5 & 0x80u) == 0)
        v8 = v5;
      else
        v8 = v6;
      p_p = __p;
      if ((v49 & 0x80u) == 0)
        p_p = &__p;
      if (v8)
        v10 = " ";
      else
        v10 = "";
      *(_DWORD *)buf = 136315394;
      v51 = p_p;
      v52 = 2080;
      v53 = v10;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_INFO, "%s%send state change", buf, 0x16u);
    }
    if ((char)v49 < 0)
      operator delete(__p);
  }
  if ((*((_DWORD *)this + 194) - 5) > 1 || !(*((_QWORD *)this + 119) | *((_QWORD *)this + 114)))
  {
    v29 = vp::get_log((vp *)v3);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      goto LABEL_56;
    v30 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v31 = v49;
    v32 = v48;
    v24 = vp::get_log(v30);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    if ((v31 & 0x80u) == 0)
      v33 = v31;
    else
      v33 = v32;
    v34 = __p;
    if ((v49 & 0x80u) == 0)
      v34 = &__p;
    if (v33)
      v35 = " ";
    else
      v35 = "";
    *(_DWORD *)buf = 136315394;
    v51 = v34;
    v52 = 2080;
    v53 = v35;
    v28 = "%s%sinternal re-configuration is not required";
    goto LABEL_52;
  }
  v11 = vp::get_log((vp *)v3);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v13 = v49;
    v14 = v48;
    v15 = vp::get_log(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if ((v13 & 0x80u) == 0)
        v16 = v13;
      else
        v16 = v14;
      v17 = __p;
      if ((v49 & 0x80u) == 0)
        v17 = &__p;
      if (v16)
        v18 = " ";
      else
        v18 = "";
      *(_DWORD *)buf = 136315394;
      v51 = v17;
      v52 = 2080;
      v53 = v18;
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "%s%sinternal re-configuration is required", buf, 0x16u);
    }
    if ((char)v49 < 0)
      operator delete(__p);
  }
  vp::vx::Voice_Processor::handle_configuration_changes(this, v46);
  if (!v46[4])
  {
    *((_DWORD *)this + 194) = 6;
    v38 = vp::get_log(v19);
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      goto LABEL_56;
    v39 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v40 = v49;
    v41 = v48;
    v42 = vp::get_log(v39);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      goto LABEL_54;
    if ((v40 & 0x80u) == 0)
      v43 = v40;
    else
      v43 = v41;
    v44 = __p;
    if ((v49 & 0x80u) == 0)
      v44 = &__p;
    if (v43)
      v45 = " ";
    else
      v45 = "";
    *(_DWORD *)buf = 136315394;
    v51 = v44;
    v52 = 2080;
    v53 = v45;
    v28 = "%s%sfailed to handle configuration changes";
    v36 = v42;
    v37 = OS_LOG_TYPE_ERROR;
    goto LABEL_53;
  }
  *((_DWORD *)this + 194) = 5;
  v20 = vp::get_log(v19);
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    goto LABEL_56;
  v21 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  v22 = v49;
  v23 = v48;
  v24 = vp::get_log(v21);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if ((v22 & 0x80u) == 0)
      v25 = v22;
    else
      v25 = v23;
    v26 = __p;
    if ((v49 & 0x80u) == 0)
      v26 = &__p;
    if (v25)
      v27 = " ";
    else
      v27 = "";
    *(_DWORD *)buf = 136315394;
    v51 = v26;
    v52 = 2080;
    v53 = v27;
    v28 = "%s%smanaged to handle configuration changes";
LABEL_52:
    v36 = v24;
    v37 = OS_LOG_TYPE_INFO;
LABEL_53:
    _os_log_impl(&dword_1B5ED0000, v36, v37, v28, buf, 0x16u);
  }
LABEL_54:
  if ((char)v49 < 0)
    operator delete(__p);
LABEL_56:
  vp::vx::Property_Manager::notify_property_listeners((vp::vx::Voice_Processor *)((char *)this + 968));
  vp::vx::Voice_Processor::components_end_state_change(this);
}

void vp::vx::Voice_Processor::handle_configuration_changes(vp::vx::Voice_Processor *this@<X0>, _BYTE *a2@<X8>)
{
  vp::vx::Voice_Processor *v3;
  unsigned int *v4;
  NSObject *log;
  vp *log_context_info;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _BYTE *v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  std::chrono::system_clock::time_point v20;
  vp *v21;
  std::chrono::system_clock::time_point v22;
  NSObject *v23;
  int *v24;
  _BYTE *v25;
  vp *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  _BYTE *v31;
  const char *v32;
  const char *v33;
  vp *v34;
  NSObject *v35;
  vp *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  _BYTE *v41;
  const char *v42;
  NSObject *v43;
  vp *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  _BYTE *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  char *v53;
  vp::vx::Voice_Processor *v54;
  id v55;
  uint64_t v56;
  char *v57;
  char v58;
  id v59;
  _BYTE __p[22];
  __int16 v61;
  const char *v62;
  __int16 v63;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v64;
  _BYTE buf[22];
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!(*((_QWORD *)this + 119) | *((_QWORD *)this + 114)))
  {
LABEL_53:
    *a2 = 0;
    a2[4] = 1;
    return;
  }
  v3 = this;
  vp::vx::Voice_Processor::log_configuration_changes(this);
  vp::rpb::Server::get_shared_instance((uint64_t)&v59);
  *(_QWORD *)__p = v3;
  vp::vx::Voice_Processor::exception_guard((uint64_t)v3, (uint64_t)"disconnect RPB server", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>, (uint64_t)__p);
  vp::objc::ID::~ID(&v59);
  v57 = (char *)v3 + 1128;
  v58 = 1;
  v4 = caulk::concurrent::shared_spin_lock::lock((unsigned int *)v3 + 282);
  log = vp::get_log((vp *)v4);
  v54 = v3;
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v7 = HIBYTE(v61);
    v8 = *(_QWORD *)&__p[8];
    v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = v8;
      if (v61 >= 0)
        v11 = __p;
      else
        v11 = *(_BYTE **)__p;
      v12 = v10 == 0;
      v13 = " ";
      if (v12)
        v13 = "";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "%s%sbegin configuration change", buf, 0x16u);
    }
    if (SHIBYTE(v61) < 0)
      operator delete(*(void **)__p);
  }
  *((_DWORD *)v3 + 195) = 0;
  *(std::chrono::system_clock::time_point *)__p = std::chrono::system_clock::now();
  v56 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__p);
  vp::vx::Voice_Processor::components_update_time<long>((uint64_t)v3, v56);
  vp::vx::Voice_Processor::components_begin_configuration_changes(v3);
  vp::vx::Voice_Processor::dsp_node_factory_update_time((uint64_t)v3, &v56);
  v14 = 0;
  v15 = (char *)v3 + 888;
  v16 = (char *)v3 + 928;
  v17 = vp::domains(void)::s_domains;
  v53 = (char *)v3 + 928;
  while (1)
  {
    v18 = v17[v14];
    v19 = (uint64_t)((_DWORD)v18 ? v16 : v15);
    if (*(_QWORD *)(v19 + 24))
      break;
LABEL_37:
    if (++v14 == 2)
    {
      vp::vx::Voice_Processor::components_end_configuration_changes<>((uint64_t)v3);
      *((_DWORD *)v3 + 195) = 1;
      v35 = vp::get_log(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        v36 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
        v37 = HIBYTE(v61);
        v38 = *(_QWORD *)&__p[8];
        v39 = vp::get_log(v36);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          if ((v37 & 0x80u) == 0)
            v40 = v37;
          else
            v40 = v38;
          if (v61 >= 0)
            v41 = __p;
          else
            v41 = *(_BYTE **)__p;
          v12 = v40 == 0;
          v42 = " ";
          if (v12)
            v42 = "";
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v41;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v42;
          _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEFAULT, "%s%send configuration change", buf, 0x16u);
        }
        if (SHIBYTE(v61) < 0)
          operator delete(*(void **)__p);
        v3 = v54;
      }
      std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v57);
      vp::rpb::Server::get_shared_instance((uint64_t)&v55);
      *(_QWORD *)__p = &v55;
      *(_QWORD *)&__p[8] = v3;
      vp::vx::Voice_Processor::exception_guard((uint64_t)v3, (uint64_t)"connect RPB server", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)__p);
      vp::objc::ID::~ID(&v55);
      goto LABEL_53;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::clear(v19);
  vp::vx::Voice_Processor::components_begin_configuration_change<vp::Domain>((uint64_t)v3, v18);
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  vp::vx::Voice_Processor::build_dsp(v3, a2, v18);
  if (a2[4])
  {
    v22.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v23 = vp::get_log((vp *)v22.__d_.__rep_);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v24 = v17;
      v25 = a2;
      v26 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, buf);
      v27 = v66;
      v28 = *(_QWORD *)&buf[8];
      v29 = vp::get_log(v26);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        if ((v27 & 0x80u) == 0)
          v30 = v27;
        else
          v30 = v28;
        v31 = buf;
        if ((v66 & 0x80u) != 0)
          v31 = *(_BYTE **)buf;
        v12 = v30 == 0;
        v32 = " ";
        if (v12)
          v32 = "";
        v33 = "downlink";
        if (!(_DWORD)v18)
          v33 = "uplink";
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = v31;
        *(_WORD *)&__p[12] = 2080;
        *(_QWORD *)&__p[14] = v32;
        v61 = 2080;
        v62 = v33;
        v63 = 2048;
        v64 = (v22.__d_.__rep_ - v20.__d_.__rep_) / 1000;
        _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_INFO, "%s%smanaged to build %s DSP in %lld milliseconds", __p, 0x2Au);
      }
      if ((char)v66 < 0)
        operator delete(*(void **)buf);
      a2 = v25;
      v17 = v24;
      v16 = v53;
      v3 = v54;
    }
    vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain>((uint64_t)v3, v18);
    goto LABEL_37;
  }
  v43 = vp::get_log(v21);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    v44 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, buf);
    v45 = v66;
    v46 = *(_QWORD *)&buf[8];
    v47 = vp::get_log(v44);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      if ((v45 & 0x80u) == 0)
        v48 = v45;
      else
        v48 = v46;
      if ((v66 & 0x80u) == 0)
        v49 = buf;
      else
        v49 = *(_BYTE **)buf;
      v12 = v48 == 0;
      v50 = " ";
      if (v12)
        v50 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v49;
      v51 = "downlink";
      if (!(_DWORD)v18)
        v51 = "uplink";
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v50;
      v61 = 2080;
      v62 = v51;
      _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, "%s%sfailed to build %s DSP", __p, 0x20u);
    }
    if ((char)v66 < 0)
      operator delete(*(void **)buf);
    v3 = v54;
  }
  v52 = *(unsigned int *)a2;
  vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain,vp::vx::Error_Code>((uint64_t)v3, v18, v52);
  vp::vx::Voice_Processor::components_end_configuration_changes<vp::vx::Error_Code>((uint64_t)v3, v52);
  std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v57);
}

void sub_1B6011864(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor::log_configuration_changes(vp::vx::Voice_Processor *this)
{
  vp::vx::Voice_Processor *v3;
  int *v4;
  int v5;

  v5 = 0;
  v3 = this;
  v4 = &v5;
  vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"log configuration changes", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>, (uint64_t)&v3);
  v5 = 1;
  v3 = this;
  v4 = &v5;
  return vp::vx::Voice_Processor::exception_guard((uint64_t)this, (uint64_t)"log configuration changes", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>, (uint64_t)&v3);
}

void vp::vx::Voice_Processor::components_update_time<long>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::dsp_node_factory_update_time(uint64_t this, const uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 1512);
  v3 = *(_QWORD *)(this + 1520);
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v3)
  {
    v6 = v2 + 24 * v3;
    do
    {
      if (!v2)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      this = vp::vx::DSP_Node_Factory::set_time(*(_QWORD *)(v2 + 8), a2);
      v2 += 24;
    }
    while (v2 != v6);
  }
  return this;
}

void vp::vx::Voice_Processor::components_begin_configuration_change<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void vp::vx::Voice_Processor::build_dsp(vp::vx::Voice_Processor *this@<X0>, _BYTE *a2@<X8>, int a3@<W1>)
{
  if (a3 == 1)
  {
    vp::vx::Voice_Processor::build_downlink_dsp(this, a2);
  }
  else if (!a3)
  {
    vp::vx::Voice_Processor::build_uplink_dsp(this, a2);
  }
}

void vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain,vp::vx::Error_Code>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 144))(v7, a2, a3);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_changes<vp::vx::Error_Code>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_change<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void vp::vx::Voice_Processor::components_end_configuration_changes<>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *(uint64_t **)(a1 + 520);
  v2 = *(uint64_t **)(a1 + 528);
  while (v1 != v2)
  {
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 2;
  }
}

void vp::vx::Voice_Processor::build_uplink_dsp(vp::vx::Voice_Processor *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::pmr *v5;
  uint64_t default_resource;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::pmr *v116;
  uint64_t v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  NSObject *v167;
  vp *v168;
  uint64_t v169;
  uint64_t v170;
  std::pmr *v171;
  uint64_t v172;
  char v173;
  std::pmr *v174;
  uint64_t v175;
  char v176;
  std::pmr *v177;
  uint64_t v178;
  int v179;
  std::pmr *v180;
  uint64_t v181;
  int v182;
  _BYTE *v183;
  char v184;
  NSObject *log;
  vp *log_context_info;
  unint64_t v187;
  void *v188;
  NSObject *v189;
  unint64_t v190;
  void **v191;
  const char *v192;
  uint64_t node_commands;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  int v198;
  int v199;
  unsigned int v201;
  void *v202[2];
  unsigned __int8 v203;
  dispatch_object_t object;
  uint64_t v205[6];
  char v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  void *__p[2];
  char v237;
  unsigned int v238[12];
  char v239;
  uint8_t buf[4];
  void **v241;
  __int16 v242;
  const char *v243;
  char v244;
  char v245;
  uint64_t v246;
  char v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 300);
  if (v3)
  {
    vp::vx::io::Graph::notify(v3, 1, v238);
    if (!v239)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v238);
    v4 = *((_QWORD *)this + 300);
    *((_QWORD *)this + 300) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (std::pmr *)std::string::basic_string[abi:ne180100]<0>(__p, "UL");
  default_resource = std::pmr::get_default_resource(v5);
  vp::vx::io::Graph_Builder::Graph_Builder(v238, 0, __p, default_resource);
  if (v237 < 0)
    operator delete(__p[0]);
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1192, v205);
  v235 = *(_OWORD *)v205;
  *(_OWORD *)v205 = 0uLL;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v238, &v235);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v11 = (unint64_t *)(v205[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1256, v205);
  v234 = *(_OWORD *)v205;
  *(_OWORD *)v205 = 0uLL;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v238, &v234);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v17 = (unint64_t *)(v205[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1136, v205);
  v233 = *(_OWORD *)v205;
  if (v205[1])
  {
    v19 = (unint64_t *)(v205[1] + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  vp::vx::io::Graph_Builder::set_parameter_exchange((uint64_t)v238, (uint64_t *)&v233);
  if (*((_QWORD *)&v233 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v233 + 1));
  v21 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v22 = (unint64_t *)(v205[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1376, v205);
  v232 = *(_OWORD *)v205;
  *(_OWORD *)v205 = 0uLL;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v238, &v232);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v28 = (unint64_t *)(v205[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1440, v205);
  v231 = *(_OWORD *)v205;
  *(_OWORD *)v205 = 0uLL;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v238, &v231);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
  if (*((_QWORD *)&v231 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v34 = (unint64_t *)(v205[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1320, v205);
  v230 = *(_OWORD *)v205;
  if (v205[1])
  {
    v36 = (unint64_t *)(v205[1] + 16);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  vp::vx::io::Graph_Builder::set_property_exchange((uint64_t)v238, (uint64_t *)&v230);
  if (*((_QWORD *)&v230 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v230 + 1));
  v38 = (std::__shared_weak_count *)v205[1];
  if (v205[1])
  {
    v39 = (unint64_t *)(v205[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *((_QWORD *)this + 303);
  *(_QWORD *)&v229 = *((_QWORD *)this + 302);
  *((_QWORD *)&v229 + 1) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v201 = vp::vx::io::Graph_Builder::add_node((uint64_t)v238, &v229);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v205[0] = 0;
  v47 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, v205);
  v48 = v47[1];
  *(_QWORD *)&v228 = *v47;
  *((_QWORD *)&v228 + 1) = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = vp::vx::io::Graph_Builder::add_node((uint64_t)v238, &v228);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v205[0] = 1;
  v55 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, v205);
  v56 = v55[1];
  *(_QWORD *)&v227 = *v55;
  *((_QWORD *)&v227 + 1) = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = vp::vx::io::Graph_Builder::add_node((uint64_t)v238, &v227);
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v205[0] = 2;
  v63 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, v205);
  v64 = v63[1];
  *(_QWORD *)&v226 = *v63;
  *((_QWORD *)&v226 + 1) = v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = vp::vx::io::Graph_Builder::add_node((uint64_t)v238, &v226);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
  if (*((_QWORD *)&v226 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v205[0] = 0;
  v71 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, v205);
  v72 = v71[1];
  *(_QWORD *)&v225 = *v71;
  *((_QWORD *)&v225 + 1) = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v199 = vp::vx::io::Graph_Builder::add_port((uint64_t)v238, v201, 0, &v225);
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
  if (*((_QWORD *)&v225 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v205[0] = 1;
  v78 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, v205);
  v79 = v78[1];
  *(_QWORD *)&v224 = *v78;
  *((_QWORD *)&v224 + 1) = v79;
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v198 = vp::vx::io::Graph_Builder::add_port((uint64_t)v238, v201, 1, &v224);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (*((_QWORD *)&v224 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v205[0] = 0x200000004;
  v85 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, v205);
  v86 = v85[1];
  *(_QWORD *)&v223 = *v85;
  *((_QWORD *)&v223 + 1) = v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v197 = vp::vx::io::Graph_Builder::add_port((uint64_t)v238, v67 | 0x100000000, 0, &v223);
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *((_QWORD *)this + 292);
  v93 = (std::__shared_weak_count *)*((_QWORD *)this + 293);
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldxr(p_shared_owners);
    while (__stxr(v95 + 1, p_shared_owners));
    *((_QWORD *)&v222 + 1) = v93;
    do
      v96 = __ldxr(p_shared_owners);
    while (__stxr(v96 + 1, p_shared_owners));
  }
  else
  {
    *((_QWORD *)&v222 + 1) = 0;
  }
  *(_QWORD *)&v222 = v92;
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v201 | 0x100000000, 0, v51, 0, &v222);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  *(_QWORD *)&v221 = v92;
  *((_QWORD *)&v221 + 1) = v93;
  if (v93)
  {
    v100 = (unint64_t *)&v93->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v201 | 0x100000000, 1, v51, 1, &v221);
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  *(_QWORD *)&v220 = v92;
  *((_QWORD *)&v220 + 1) = v93;
  if (v93)
  {
    v105 = (unint64_t *)&v93->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v107 = v51 | 0x100000000;
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v107, 0, v59, 0, &v220);
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (*((_QWORD *)&v220 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  *(_QWORD *)&v219 = v92;
  *((_QWORD *)&v219 + 1) = v93;
  if (v93)
  {
    v111 = (unint64_t *)&v93->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v107, 1, v59, 1, &v219);
  v113 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v114 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(this, (uint64_t)buf);
  v117 = std::pmr::get_default_resource(v116);
  vp::vx::data_flow::Value::Value(v205, v117);
  vp::vx::data_flow::State<void>::get_value((uint64_t)buf, (vp::vx::data_flow::Value *)v205);
  v118 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v205);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v205);
  vp::vx::data_flow::State<void>::~State((uint64_t)buf);
  if (v118)
  {
    *(_QWORD *)&v218 = v92;
    *((_QWORD *)&v218 + 1) = v93;
    if (v93)
    {
      v119 = (unint64_t *)&v93->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v107, 2, v59, 2, &v218);
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (*((_QWORD *)&v218 + 1))
    {
      v122 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
  }
  *(_QWORD *)&v217 = v92;
  *((_QWORD *)&v217 + 1) = v93;
  if (v93)
  {
    v124 = (unint64_t *)&v93->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  vp::vx::io::Graph_Builder::add_wire((uint64_t)v238, v59 | 0x100000000, 0, v67, 0, &v217);
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (uint64_t *)*((_QWORD *)this + 65);
  v130 = (uint64_t *)*((_QWORD *)this + 66);
  while (v129 != v130)
  {
    v132 = *v129;
    v131 = (std::__shared_weak_count *)v129[1];
    if (v131)
    {
      v133 = (unint64_t *)&v131->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    v135 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 184))(v132, 0);
    if (v135)
    {
      v215 = v135;
      v216 = v131;
      if (v131)
      {
        v136 = (unint64_t *)&v131->__shared_owners_;
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      vp::vx::io::Graph_Builder::add_node_command((uint64_t)v238, &v215);
      v138 = v216;
      if (v216)
      {
        v139 = (unint64_t *)&v216->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
    }
    v141 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 192))(v132, 0);
    if (v141)
    {
      v213 = v141;
      v214 = v131;
      if (v131)
      {
        v142 = (unint64_t *)&v131->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      vp::vx::io::Graph_Builder::add_node_decorator((uint64_t)v238, &v213);
      v144 = v214;
      if (v214)
      {
        v145 = (unint64_t *)&v214->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
    }
    v147 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 200))(v132, 0);
    if (v147)
    {
      v211 = v147;
      v212 = v131;
      if (v131)
      {
        v148 = (unint64_t *)&v131->__shared_owners_;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v238, &v211);
      v150 = v212;
      if (v212)
      {
        v151 = (unint64_t *)&v212->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
    }
    v153 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 208))(v132, 0);
    if (v153)
    {
      v209 = v153;
      v210 = v131;
      if (v131)
      {
        v154 = (unint64_t *)&v131->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
      }
      vp::vx::io::Graph_Builder::add_port_decorator((uint64_t)v238, &v209);
      v156 = v210;
      if (v210)
      {
        v157 = (unint64_t *)&v210->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
    }
    v159 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 216))(v132, 0);
    if (!v159)
      goto LABEL_226;
    v207 = v159;
    v208 = v131;
    if (v131)
    {
      v160 = (unint64_t *)&v131->__shared_owners_;
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
    }
    vp::vx::io::Graph_Builder::add_wire_decorator((uint64_t)v238, &v207);
    v162 = v208;
    if (!v208)
      goto LABEL_226;
    v163 = (unint64_t *)&v208->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      if (!v131)
        goto LABEL_231;
    }
    else
    {
LABEL_226:
      if (!v131)
        goto LABEL_231;
    }
    v165 = (unint64_t *)&v131->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
LABEL_231:
    v129 += 2;
  }
  v167 = *((_QWORD *)this + 2);
  object = v167;
  if (v167)
    dispatch_retain(v167);
  vp::vx::io::Graph_Builder::build(v238, &object, (uint64_t)v205);
  v168 = (vp *)object;
  if (object)
    dispatch_release(object);
  if (v206)
  {
    v169 = v205[0];
    v205[0] = 0;
    v170 = *((_QWORD *)this + 300);
    *((_QWORD *)this + 300) = v169;
    if (v170)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
    vp::vx::Voice_Processor::get_should_fade_audio_buffers(this, (uint64_t)v202);
    v172 = std::pmr::get_default_resource(v171);
    vp::vx::data_flow::Value::Value(buf, v172);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
    v173 = *(_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    *((_BYTE *)this + 2410) = v173;
    vp::vx::data_flow::State<void>::~State((uint64_t)v202);
    vp::vx::Voice_Processor::get_should_use_internal_reference(this, (uint64_t)v202);
    v175 = std::pmr::get_default_resource(v174);
    vp::vx::data_flow::Value::Value(buf, v175);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
    v176 = *(_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    *((_BYTE *)this + 2408) = v176;
    vp::vx::data_flow::State<void>::~State((uint64_t)v202);
    *((_BYTE *)this + 2409) = 0;
    *((_DWORD *)this + 608) = v201;
    *((_DWORD *)this + 609) = v51;
    *((_DWORD *)this + 610) = v59;
    *((_DWORD *)this + 611) = v67;
    *((_DWORD *)this + 612) = v199;
    (*(void (**)(uint8_t *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(buf, (char *)this + 8, 9);
    vp::vx::data_flow::State<void>::State((uint64_t)v202, (uint64_t)buf);
    v177 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v178 = std::pmr::get_default_resource(v177);
    vp::vx::data_flow::Value::Value(buf, v178);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
    v179 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    *((_DWORD *)this + 613) = v179;
    vp::vx::data_flow::State<void>::~State((uint64_t)v202);
    if (*((_BYTE *)this + 2464))
      *((_BYTE *)this + 2464) = 0;
    *((_DWORD *)this + 618) = v198;
    (*(void (**)(uint8_t *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(buf, (char *)this + 8, 24);
    vp::vx::data_flow::State<void>::State((uint64_t)v202, (uint64_t)buf);
    v180 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v181 = std::pmr::get_default_resource(v180);
    vp::vx::data_flow::Value::Value(buf, v181);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
    v182 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    *((_DWORD *)this + 619) = v182;
    vp::vx::data_flow::State<void>::~State((uint64_t)v202);
    if (*((_BYTE *)this + 2488))
      *((_BYTE *)this + 2488) = 0;
    *((_DWORD *)this + 624) = v197;
    vp::vx::io::Graph::notify(*((_QWORD *)this + 300), 0, buf);
    if (!v247)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
    v183 = a2;
    *a2 = 0;
    v184 = 1;
  }
  else
  {
    log = vp::get_log(v168);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v202);
      v187 = v203;
      v188 = v202[1];
      v189 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
      {
        if ((v187 & 0x80u) == 0)
          v190 = v187;
        else
          v190 = (unint64_t)v188;
        if ((v203 & 0x80u) == 0)
          v191 = v202;
        else
          v191 = (void **)v202[0];
        if (v190)
          v192 = " ";
        else
          v192 = "";
        node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)v205);
        if (*(char *)(node_commands + 23) >= 0)
          v194 = node_commands;
        else
          v194 = *(_QWORD *)node_commands;
        *(_DWORD *)buf = 136315650;
        v241 = v191;
        v242 = 2080;
        v243 = v192;
        v244 = 32;
        v245 = 8;
        v246 = v194;
        _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_ERROR, "%s%sfailed to build uplink I/O graph - %s", buf, 0x20u);
      }
      if ((char)v203 < 0)
        operator delete(v202[0]);
    }
    v184 = 0;
    v183 = a2;
    *(_DWORD *)a2 = 11;
  }
  v183[4] = v184;
  caulk::__expected_detail::base<std::unique_ptr<vp::vx::io::Graph>,vp::vx::io::Error>::~base((vp::vx::io::Error *)v205);
  if (v93)
  {
    v195 = (unint64_t *)&v93->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  vp::vx::io::Graph_Builder::~Graph_Builder((vp::vx::io::Graph_Builder *)v238);
}

void sub_1B6012F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a2)
  {
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)(v17 - 176));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::build_downlink_dsp(vp::vx::Voice_Processor *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::pmr *v5;
  uint64_t default_resource;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  vp::vx::IO_Port_Factory *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  vp *is_enabled;
  NSObject *log;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  vp *log_context_info;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  _BYTE *v116;
  const char *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unsigned int v149;
  unint64_t *v150;
  unint64_t v151;
  unsigned int v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  NSObject *v200;
  uint64_t v201;
  uint64_t v202;
  std::pmr *v203;
  uint64_t v204;
  int v205;
  int v206;
  std::pmr *v207;
  uint64_t v208;
  std::pmr *v209;
  uint64_t v210;
  int v211;
  int v212;
  std::pmr *v213;
  uint64_t v214;
  std::pmr *v215;
  uint64_t v216;
  int v217;
  int v218;
  std::pmr *v219;
  uint64_t v220;
  std::pmr *v221;
  uint64_t v222;
  int v223;
  std::pmr *v224;
  uint64_t v225;
  int v226;
  _DWORD *v227;
  char v228;
  uint64_t node_commands;
  uint64_t v230;
  NSObject *v231;
  _BOOL4 v232;
  vp *v233;
  uint64_t v234;
  NSObject *v235;
  void *v236;
  int id;
  char *v238;
  unint64_t v239;
  char *v240;
  size_t v241;
  void **p_dst;
  vp *v243;
  uint64_t v244;
  NSObject *v245;
  void *v246;
  int v247;
  char *v248;
  unint64_t v249;
  char *v250;
  size_t v251;
  void **v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  void **v256;
  int v257;
  int v258;
  uint64_t log_source_file_path;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  NSObject *v263;
  uint32_t v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  void **v268;
  int v269;
  int v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  std::__shared_weak_count *v286;
  unsigned int v287;
  unsigned int v289;
  void **__dst;
  size_t v291;
  int64_t v292;
  void *v293;
  uint64_t v294;
  unsigned __int8 v295;
  dispatch_object_t object;
  __int128 v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  __int128 v328;
  __int128 v329;
  void *__p[2];
  char v331;
  unsigned int v332[12];
  char v333;
  _BYTE v334[22];
  __int16 v335;
  void **v336;
  __int16 v337;
  int v338;
  __int16 v339;
  int v340;
  __int16 v341;
  uint64_t v342;
  __int16 v343;
  uint64_t v344;
  _BYTE buf[44];
  char v346;
  uint64_t v347;

  v347 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 313);
  if (v3)
  {
    vp::vx::io::Graph::notify(v3, 1, v332);
    if (!v333)
      vp::vx::io::Error::~Error((vp::vx::io::Error *)v332);
    v4 = *((_QWORD *)this + 313);
    *((_QWORD *)this + 313) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (std::pmr *)std::string::basic_string[abi:ne180100]<0>(__p, "DL");
  default_resource = std::pmr::get_default_resource(v5);
  vp::vx::io::Graph_Builder::Graph_Builder(v332, 1, __p, default_resource);
  if (v331 < 0)
    operator delete(__p[0]);
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1192, v334);
  v329 = *(_OWORD *)v334;
  *(_QWORD *)v334 = 0;
  *(_QWORD *)&v334[8] = 0;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v332, &v329);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v329 + 1);
  if (*((_QWORD *)&v329 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1256, v334);
  v328 = *(_OWORD *)v334;
  *(_QWORD *)v334 = 0;
  *(_QWORD *)&v334[8] = 0;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v332, &v328);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
  if (*((_QWORD *)&v328 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1136, v334);
  v326 = *(_QWORD *)v334;
  v327 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v334[8] + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  vp::vx::io::Graph_Builder::set_parameter_exchange((uint64_t)v332, &v326);
  if (v327)
    std::__shared_weak_count::__release_weak(v327);
  v21 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1376, v334);
  v325 = *(_OWORD *)v334;
  *(_QWORD *)v334 = 0;
  *(_QWORD *)&v334[8] = 0;
  vp::vx::io::Graph_Builder::add_node_command((uint64_t)v332, &v325);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v325 + 1);
  if (*((_QWORD *)&v325 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v325 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1440, v334);
  v324 = *(_OWORD *)v334;
  *(_QWORD *)v334 = 0;
  *(_QWORD *)&v334[8] = 0;
  vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v332, &v324);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 1320, v334);
  v322 = *(_QWORD *)v334;
  v323 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&v334[8] + 16);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  vp::vx::io::Graph_Builder::set_property_exchange((uint64_t)v332, &v322);
  if (v323)
    std::__shared_weak_count::__release_weak(v323);
  v38 = *(std::__shared_weak_count **)&v334[8];
  if (*(_QWORD *)&v334[8])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *((_QWORD *)this + 316);
  *(_QWORD *)&v321 = *((_QWORD *)this + 315);
  *((_QWORD *)&v321 + 1) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = vp::vx::io::Graph_Builder::add_node((uint64_t)v332, &v321);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *(_QWORD *)v334 = 0x100000000;
  v48 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, (uint64_t *)v334);
  v49 = v48[1];
  *(_QWORD *)&v320 = *v48;
  *((_QWORD *)&v320 + 1) = v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = vp::vx::io::Graph_Builder::add_node((uint64_t)v332, &v320);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
  if (*((_QWORD *)&v320 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_QWORD *)v334 = 0x100000001;
  v56 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, (uint64_t *)v334);
  v57 = v56[1];
  *(_QWORD *)&v319 = *v56;
  *((_QWORD *)&v319 + 1) = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = vp::vx::io::Graph_Builder::add_node((uint64_t)v332, &v319);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
  if (*((_QWORD *)&v319 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  *(_QWORD *)v334 = 0x100000002;
  v64 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, (uint64_t *)v334);
  v65 = v64[1];
  *(_QWORD *)&v318 = *v64;
  *((_QWORD *)&v318 + 1) = v65;
  if (v65)
  {
    v66 = (unint64_t *)(v65 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v289 = vp::vx::io::Graph_Builder::add_node((uint64_t)v332, &v318);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v318 + 1);
  if (*((_QWORD *)&v318 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v318 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  *(_QWORD *)v334 = 0x100000003;
  v71 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript((_QWORD *)this + 188, (uint64_t *)v334);
  v72 = v71[1];
  *(_QWORD *)&v317 = *v71;
  *((_QWORD *)&v317 + 1) = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75 = vp::vx::io::Graph_Builder::add_node((uint64_t)v332, &v317);
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (*((_DWORD *)this + 66) == 3)
  {
    v283 = -1;
    v284 = -1;
    v285 = -1;
  }
  else
  {
    *(_QWORD *)v334 = 0x100000000;
    v79 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, (uint64_t *)v334);
    v80 = v79[1];
    *(_QWORD *)&v316 = *v79;
    *((_QWORD *)&v316 + 1) = v80;
    if (v80)
    {
      v81 = (unint64_t *)(v80 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v285 = vp::vx::io::Graph_Builder::add_port((uint64_t)v332, v289, 1, &v316);
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
    if (*((_QWORD *)&v316 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    *(_QWORD *)v334 = 0x100000001;
    v86 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, (uint64_t *)v334);
    v87 = v86[1];
    *(_QWORD *)&v315 = *v86;
    *((_QWORD *)&v315 + 1) = v87;
    if (v87)
    {
      v88 = (unint64_t *)(v87 + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    v284 = vp::vx::io::Graph_Builder::add_port((uint64_t)v332, v289, 2, &v315);
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
    if (*((_QWORD *)&v315 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    *(_QWORD *)v334 = 0x100000002;
    v93 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, (uint64_t *)v334);
    v94 = v93[1];
    *(_QWORD *)&v314 = *v93;
    *((_QWORD *)&v314 + 1) = v94;
    if (v94)
    {
      v95 = (unint64_t *)(v94 + 8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v283 = vp::vx::io::Graph_Builder::add_port((uint64_t)v332, v289, 3, &v314);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
    if (*((_QWORD *)&v314 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  *(_QWORD *)v334 = 0x100000003;
  v100 = boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, (uint64_t *)v334);
  v102 = *(vp::vx::IO_Port_Factory **)v100;
  v101 = *(std::__shared_weak_count **)(v100 + 8);
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v104 = __ldxr(p_shared_owners);
    while (__stxr(v104 + 1, p_shared_owners));
  }
  is_enabled = (vp *)vp::vx::IO_Port_Factory::get_is_enabled(v102);
  if ((_DWORD)is_enabled)
  {
    log = vp::get_log(is_enabled);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      v286 = v101;
      v107 = v75;
      v108 = v60;
      v109 = v52;
      v110 = v44;
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v334);
      v112 = HIBYTE(v335);
      v113 = *(_QWORD *)&v334[8];
      v114 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        if ((v112 & 0x80u) == 0)
          v115 = v112;
        else
          v115 = v113;
        v116 = *(_BYTE **)v334;
        if (v335 >= 0)
          v116 = v334;
        if (v115)
          v117 = " ";
        else
          v117 = "";
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v116;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v117;
        _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_DEFAULT, "%s%sspeaker telemetry input port is enabled!", buf, 0x16u);
      }
      if (SHIBYTE(v335) < 0)
        operator delete(*(void **)v334);
      v44 = v110;
      v52 = v109;
      v60 = v108;
      v75 = v107;
      v101 = v286;
    }
    *(_QWORD *)&v313 = v102;
    *((_QWORD *)&v313 + 1) = v101;
    if (v101)
    {
      v118 = (unint64_t *)&v101->__shared_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    v281 = vp::vx::io::Graph_Builder::add_port((uint64_t)v332, v75, 1, &v313);
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
  }
  else
  {
    v281 = -1;
  }
  *(_QWORD *)v334 = 0x300000000;
  v123 = (_QWORD *)boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript((_QWORD *)this + 240, (uint64_t *)v334);
  v124 = v123[1];
  *(_QWORD *)&v312 = *v123;
  *((_QWORD *)&v312 + 1) = v124;
  if (v124)
  {
    v125 = (unint64_t *)(v124 + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = v75;
  v280 = vp::vx::io::Graph_Builder::add_port((uint64_t)v332, v75 | 0x100000000, 0, &v312);
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
  if (*((_QWORD *)&v312 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v287 = v75;
  v131 = *((_QWORD *)this + 294);
  v132 = (std::__shared_weak_count *)*((_QWORD *)this + 295);
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
    *((_QWORD *)&v311 + 1) = v132;
    do
      v135 = __ldxr(v133);
    while (__stxr(v135 + 1, v133));
  }
  else
  {
    *((_QWORD *)&v311 + 1) = 0;
  }
  *(_QWORD *)&v311 = v131;
  v279 = vp::vx::io::Graph_Builder::add_wire((uint64_t)v332, v44 | 0x100000000, 0, v52, 0, &v311);
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
  if (*((_QWORD *)&v311 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  *(_QWORD *)&v310 = v131;
  *((_QWORD *)&v310 + 1) = v132;
  if (v132)
  {
    v139 = (unint64_t *)&v132->__shared_owners_;
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
  }
  v278 = vp::vx::io::Graph_Builder::add_wire((uint64_t)v332, v52 | 0x100000000, 0, v60, 0, &v310);
  v141 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
  if (*((_QWORD *)&v310 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  *(_QWORD *)&v309 = v131;
  *((_QWORD *)&v309 + 1) = v132;
  if (v132)
  {
    v144 = (unint64_t *)&v132->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  v277 = vp::vx::io::Graph_Builder::add_wire((uint64_t)v332, v60 | 0x100000000, 0, v289, 0, &v309);
  v146 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
  if (*((_QWORD *)&v309 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v282 = v60;
  v149 = v52;
  *(_QWORD *)&v308 = v131;
  *((_QWORD *)&v308 + 1) = v132;
  if (v132)
  {
    v150 = (unint64_t *)&v132->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
  }
  v152 = v44;
  v276 = vp::vx::io::Graph_Builder::add_wire((uint64_t)v332, v289 | 0x100000000, 0, v127, 0, &v308);
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
  if (*((_QWORD *)&v308 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (uint64_t *)*((_QWORD *)this + 65);
  v157 = (uint64_t *)*((_QWORD *)this + 66);
  while (v156 != v157)
  {
    v159 = *v156;
    v158 = (std::__shared_weak_count *)v156[1];
    if (v158)
    {
      v160 = (unint64_t *)&v158->__shared_owners_;
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
    }
    v162 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 184))(v159, 1);
    if (v162)
    {
      v306 = v162;
      v307 = v158;
      if (v158)
      {
        v163 = (unint64_t *)&v158->__shared_owners_;
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      vp::vx::io::Graph_Builder::add_node_command((uint64_t)v332, &v306);
      v165 = v307;
      if (v307)
      {
        v166 = (unint64_t *)&v307->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
    }
    v168 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 192))(v159, 1);
    if (v168)
    {
      v304 = v168;
      v305 = v158;
      if (v158)
      {
        v169 = (unint64_t *)&v158->__shared_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      vp::vx::io::Graph_Builder::add_node_decorator((uint64_t)v332, &v304);
      v171 = v305;
      if (v305)
      {
        v172 = (unint64_t *)&v305->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
    }
    v174 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 200))(v159, 1);
    if (v174)
    {
      v302 = v174;
      v303 = v158;
      if (v158)
      {
        v175 = (unint64_t *)&v158->__shared_owners_;
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      vp::vx::io::Graph_Builder::add_node_delegate((uint64_t)v332, &v302);
      v177 = v303;
      if (v303)
      {
        v178 = (unint64_t *)&v303->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
    }
    v180 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 208))(v159, 1);
    if (v180)
    {
      v300 = v180;
      v301 = v158;
      if (v158)
      {
        v181 = (unint64_t *)&v158->__shared_owners_;
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
      }
      vp::vx::io::Graph_Builder::add_port_decorator((uint64_t)v332, &v300);
      v183 = v301;
      if (v301)
      {
        v184 = (unint64_t *)&v301->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
    }
    v186 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 216))(v159, 1);
    if (!v186)
      goto LABEL_254;
    v298 = v186;
    v299 = v158;
    if (v158)
    {
      v187 = (unint64_t *)&v158->__shared_owners_;
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    vp::vx::io::Graph_Builder::add_wire_decorator((uint64_t)v332, &v298);
    v189 = v299;
    if (!v299)
      goto LABEL_254;
    v190 = (unint64_t *)&v299->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
      if (!v158)
        goto LABEL_259;
    }
    else
    {
LABEL_254:
      if (!v158)
        goto LABEL_259;
    }
    v192 = (unint64_t *)&v158->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
LABEL_259:
    v156 += 2;
  }
  if (*((_BYTE *)this + 2592))
  {
    vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>((uint64_t)this, (uint64_t)this + 2536, v334);
    v297 = *(_OWORD *)v334;
    *(_QWORD *)v334 = 0;
    *(_QWORD *)&v334[8] = 0;
    vp::vx::io::Graph_Builder::add_node_command((uint64_t)v332, &v297);
    v194 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
    if (*((_QWORD *)&v297 + 1))
    {
      v195 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    v197 = *(std::__shared_weak_count **)&v334[8];
    if (*(_QWORD *)&v334[8])
    {
      v198 = (unint64_t *)(*(_QWORD *)&v334[8] + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
  }
  v200 = *((_QWORD *)this + 2);
  object = v200;
  if (v200)
    dispatch_retain(v200);
  vp::vx::io::Graph_Builder::build(v332, &object, (uint64_t)buf);
  if (object)
    dispatch_release(object);
  if (!v346)
  {
    node_commands = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)buf);
    if (*(char *)(node_commands + 23) >= 0)
      v230 = *(unsigned __int8 *)(node_commands + 23);
    else
      v230 = *(_QWORD *)(node_commands + 8);
    v231 = vp::get_log((vp *)node_commands);
    v232 = os_log_type_enabled(v231, OS_LOG_TYPE_ERROR);
    if (v230)
    {
      if (v232)
      {
        v233 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v293);
        if ((v295 & 0x80u) == 0)
          v234 = v295;
        else
          v234 = v294;
        v235 = vp::get_log(v233);
        if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
        {
          if ((v295 & 0x80u) == 0)
            v236 = &v293;
          else
            v236 = v293;
          id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)buf);
          v238 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(id);
          if (v239 <= 0x7FFFFFFFFFFFFFF7)
          {
            v240 = v238;
            v241 = v239;
            if (v239 >= 0x17)
            {
              v253 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v239 | 7) != 0x17)
                v253 = v239 | 7;
              v254 = v253 + 1;
              p_dst = (void **)operator new(v253 + 1);
              v291 = v241;
              v292 = v254 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v292) = v239;
              p_dst = (void **)&__dst;
              if (!v239)
                goto LABEL_321;
            }
            memmove(p_dst, v240, v241);
LABEL_321:
            *((_BYTE *)p_dst + v241) = 0;
            if (v234)
              v255 = " ";
            else
              v255 = "";
            if (v292 >= 0)
              v256 = (void **)&__dst;
            else
              v256 = __dst;
            v257 = *(unsigned __int16 *)&buf[4];
            v258 = *(unsigned __int16 *)&buf[6];
            log_source_file_path = vp::get_log_source_file_path(*(vp **)&buf[8], (const char *)v239);
            v260 = vp::vx::io::Node_Socket::get_node_commands((vp::vx::io::Node_Socket *)buf);
            if (*(char *)(v260 + 23) >= 0)
              v261 = v260;
            else
              v261 = *(_QWORD *)v260;
            *(_DWORD *)v334 = 136316674;
            *(_QWORD *)&v334[4] = v236;
            *(_WORD *)&v334[12] = 2080;
            *(_QWORD *)&v334[14] = v255;
            v335 = 2080;
            v336 = v256;
            v337 = 1024;
            v338 = v257;
            v339 = 1024;
            v340 = v258;
            v341 = 2080;
            v342 = log_source_file_path;
            v343 = 2080;
            v344 = v261;
            v262 = "%s%sfailed to build downlink I/O graph with '%s' error code at line %u column %u in \"%s\" - %s";
            v263 = v235;
            v264 = 64;
            goto LABEL_342;
          }
LABEL_358:
          std::string::__throw_length_error[abi:ne180100]();
        }
LABEL_344:
        if ((char)v295 < 0)
          operator delete(v293);
      }
LABEL_346:
      v228 = 0;
      v227 = a2;
      *a2 = 11;
      goto LABEL_347;
    }
    if (!v232)
      goto LABEL_346;
    v243 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v293);
    if ((v295 & 0x80u) == 0)
      v244 = v295;
    else
      v244 = v294;
    v245 = vp::get_log(v243);
    if (!os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
      goto LABEL_344;
    if ((v295 & 0x80u) == 0)
      v246 = &v293;
    else
      v246 = v293;
    v247 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)buf);
    v248 = vp::reflect_value_name_tag<vp::vx::io::Error_Code,128ul>(v247);
    if (v249 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_358;
    v250 = v248;
    v251 = v249;
    if (v249 >= 0x17)
    {
      v265 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v249 | 7) != 0x17)
        v265 = v249 | 7;
      v266 = v265 + 1;
      v252 = (void **)operator new(v265 + 1);
      v291 = v251;
      v292 = v266 | 0x8000000000000000;
      __dst = v252;
    }
    else
    {
      HIBYTE(v292) = v249;
      v252 = (void **)&__dst;
      if (!v249)
        goto LABEL_335;
    }
    memmove(v252, v250, v251);
LABEL_335:
    *((_BYTE *)v252 + v251) = 0;
    if (v244)
      v267 = " ";
    else
      v267 = "";
    if (v292 >= 0)
      v268 = (void **)&__dst;
    else
      v268 = __dst;
    v269 = *(unsigned __int16 *)&buf[4];
    v270 = *(unsigned __int16 *)&buf[6];
    v271 = vp::get_log_source_file_path(*(vp **)&buf[8], (const char *)v249);
    *(_DWORD *)v334 = 136316418;
    *(_QWORD *)&v334[4] = v246;
    *(_WORD *)&v334[12] = 2080;
    *(_QWORD *)&v334[14] = v267;
    v335 = 2080;
    v336 = v268;
    v337 = 1024;
    v338 = v269;
    v339 = 1024;
    v340 = v270;
    v341 = 2080;
    v342 = v271;
    v262 = "%s%sfailed to build downlink I/O graph with '%s' error code at line %u column %u in \"%s\"";
    v263 = v245;
    v264 = 54;
LABEL_342:
    _os_log_impl(&dword_1B5ED0000, v263, OS_LOG_TYPE_ERROR, v262, v334, v264);
    if (SHIBYTE(v292) < 0)
      operator delete(__dst);
    goto LABEL_344;
  }
  v201 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v202 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = v201;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  *((_QWORD *)this + 314) = 0;
  *((_DWORD *)this + 650) = v152;
  *((_DWORD *)this + 651) = v149;
  *((_DWORD *)this + 652) = v282;
  *((_DWORD *)this + 653) = v289;
  *((_DWORD *)this + 654) = v287;
  *((_DWORD *)this + 655) = v285;
  (*(void (**)(_BYTE *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v334, (char *)this + 8, 52);
  vp::vx::data_flow::State<void>::State((uint64_t)&v293, (uint64_t)v334);
  v203 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v334);
  v204 = std::pmr::get_default_resource(v203);
  vp::vx::data_flow::Value::Value(v334, v204);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v293, (vp::vx::data_flow::Value *)v334);
  v205 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v334);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v334);
  *((_DWORD *)this + 656) = v205;
  vp::vx::data_flow::State<void>::~State((uint64_t)&v293);
  vp::vx::io::Graph::get_format(*((_QWORD *)this + 313), *((_DWORD *)this + 655), (uint64_t)v334);
  v206 = *((_DWORD *)this + 656);
  v208 = std::pmr::get_default_resource(v207);
  vp::Audio_Buffer::create((uint64_t)v334, v206, v208, (_QWORD **)&v293);
  vp::Audio_Buffer::operator=((_QWORD **)this + 335, (_QWORD **)&v293);
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v293);
  if (!BYTE2(v342))
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v334);
  *((_DWORD *)this + 657) = v284;
  (*(void (**)(_BYTE *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v334, (char *)this + 8, 52);
  vp::vx::data_flow::State<void>::State((uint64_t)&v293, (uint64_t)v334);
  v209 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v334);
  v210 = std::pmr::get_default_resource(v209);
  vp::vx::data_flow::Value::Value(v334, v210);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v293, (vp::vx::data_flow::Value *)v334);
  v211 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v334);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v334);
  *((_DWORD *)this + 658) = v211;
  vp::vx::data_flow::State<void>::~State((uint64_t)&v293);
  vp::vx::io::Graph::get_format(*((_QWORD *)this + 313), *((_DWORD *)this + 657), (uint64_t)v334);
  v212 = *((_DWORD *)this + 658);
  v214 = std::pmr::get_default_resource(v213);
  vp::Audio_Buffer::create((uint64_t)v334, v212, v214, (_QWORD **)&v293);
  vp::Audio_Buffer::operator=((_QWORD **)this + 336, (_QWORD **)&v293);
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v293);
  if (!BYTE2(v342))
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v334);
  *((_DWORD *)this + 659) = v283;
  (*(void (**)(_BYTE *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v334, (char *)this + 8, 52);
  vp::vx::data_flow::State<void>::State((uint64_t)&v293, (uint64_t)v334);
  v215 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v334);
  v216 = std::pmr::get_default_resource(v215);
  vp::vx::data_flow::Value::Value(v334, v216);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v293, (vp::vx::data_flow::Value *)v334);
  v217 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v334);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v334);
  *((_DWORD *)this + 660) = v217;
  vp::vx::data_flow::State<void>::~State((uint64_t)&v293);
  vp::vx::io::Graph::get_format(*((_QWORD *)this + 313), *((_DWORD *)this + 659), (uint64_t)v334);
  v218 = *((_DWORD *)this + 660);
  v220 = std::pmr::get_default_resource(v219);
  vp::Audio_Buffer::create((uint64_t)v334, v218, v220, (_QWORD **)&v293);
  vp::Audio_Buffer::operator=((_QWORD **)this + 337, (_QWORD **)&v293);
  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v293);
  if (!BYTE2(v342))
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v334);
  *((_DWORD *)this + 661) = v281;
  (*(void (**)(_BYTE *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v334, (char *)this + 8, 63);
  vp::vx::data_flow::State<void>::State((uint64_t)&v293, (uint64_t)v334);
  v221 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v334);
  v222 = std::pmr::get_default_resource(v221);
  vp::vx::data_flow::Value::Value(v334, v222);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v293, (vp::vx::data_flow::Value *)v334);
  v223 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v334);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v334);
  *((_DWORD *)this + 662) = v223;
  vp::vx::data_flow::State<void>::~State((uint64_t)&v293);
  *((_DWORD *)this + 663) = v280;
  (*(void (**)(_BYTE *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v334, (char *)this + 8, 52);
  vp::vx::data_flow::State<void>::State((uint64_t)&v293, (uint64_t)v334);
  v224 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v334);
  v225 = std::pmr::get_default_resource(v224);
  vp::vx::data_flow::Value::Value(v334, v225);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v293, (vp::vx::data_flow::Value *)v334);
  v226 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v334);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v334);
  *((_DWORD *)this + 664) = v226;
  vp::vx::data_flow::State<void>::~State((uint64_t)&v293);
  *((_DWORD *)this + 665) = v279;
  *((_DWORD *)this + 666) = v278;
  *((_DWORD *)this + 667) = v277;
  *((_DWORD *)this + 668) = v276;
  vp::vx::io::Graph::notify(*((_QWORD *)this + 313), 0, v334);
  if (!BYTE2(v342))
    vp::vx::io::Error::~Error((vp::vx::io::Error *)v334);
  v227 = a2;
  *(_BYTE *)a2 = 0;
  v228 = 1;
LABEL_347:
  *((_BYTE *)v227 + 4) = v228;
  caulk::__expected_detail::base<std::unique_ptr<vp::vx::io::Graph>,vp::vx::io::Error>::~base((vp::vx::io::Error *)buf);
  if (v132)
  {
    v272 = (unint64_t *)&v132->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v101)
  {
    v274 = (unint64_t *)&v101->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  vp::vx::io::Graph_Builder::~Graph_Builder((vp::vx::io::Graph_Builder *)v332);
}

void sub_1B6014790(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)(v2 - 256));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::make_shared_member<vp::vx::IO_Parameter_Setter_Command_Factory>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)(a1 + 728), &v9);
  if (v10)
  {
    v5 = std::__shared_weak_count::lock(v10);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    *a3 = a2;
    a3[1] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    *a3 = a2;
    a3[1] = 0;
  }
}

void vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  _QWORD *v13;
  CFTypeRef *v14;
  uint64_t (***v15)();
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t (**v22)();
  CFTypeRef cf;
  _BYTE v24[24];
  _BYTE v25[24];
  uint64_t v26;
  std::__shared_weak_count *v27;
  int id;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t (**v33)();
  int v34;
  CFTypeRef *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("should wire uplink microphone clip data", 0x27uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v25);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v31);
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v31);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(v31);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v25))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)&v26);
    v33 = &off_1E69BA078;
    LOBYTE(v34) = 0;
    v35 = (CFTypeRef *)&v33;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v26);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v33, (uint64_t)v31);
    vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v31);
    vp::vx::data_flow::State<void>::~State(v31);
    v7 = (uint64_t (***)())v35;
    if (v35 == (CFTypeRef *)&v33)
    {
      v8 = 4;
      v7 = &v33;
    }
    else
    {
      if (!v35)
        goto LABEL_9;
      v8 = 5;
    }
    (*v7)[v8]();
LABEL_9:
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v26);
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v26);
    v10 = v26;
    v9 = v27;
    if (v27)
    {
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = operator new(0x20uLL);
    *v13 = &off_1E69BA0C0;
    v13[1] = v10;
    v13[2] = v9;
    v30 = v13;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v29);
    v35 = 0;
    v14 = (CFTypeRef *)operator new(0x28uLL);
    *v14 = &off_1E69B0C10;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v31);
    v35 = v14;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v24, (uint64_t)&v33);
    v15 = (uint64_t (***)())v35;
    if (v35 == (CFTypeRef *)&v33)
    {
      v16 = 4;
      v15 = &v33;
    }
    else
    {
      if (!v35)
        goto LABEL_17;
      v16 = 5;
    }
    (*v15)[v16]();
LABEL_17:
    v17 = v32;
    if (v32 == v31)
    {
      v18 = 4;
      v17 = v31;
    }
    else
    {
      if (!v32)
        goto LABEL_22;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
    v19 = v30;
    if (v30 == v29)
    {
      v20 = 4;
      v19 = v29;
    }
    else
    {
      if (!v30)
      {
LABEL_27:
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        vp::vx::data_flow::State<void>::auto_release((uint64_t)v24);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v24);
        v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
        v22 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v33 = v22;
        v34 = v21;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v33, (uint64_t)&v33);
        if (v33)
          CFRelease(v33);
        goto LABEL_33;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_27;
  }
LABEL_33:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v25);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  if (cf)
    CFRelease(cf);
}

void sub_1B6014BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_fade_audio_buffers(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  _QWORD *v13;
  CFTypeRef *v14;
  uint64_t (***v15)();
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t (**v22)();
  CFTypeRef cf;
  _BYTE v24[24];
  _BYTE v25[24];
  uint64_t v26;
  std::__shared_weak_count *v27;
  int id;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t (**v33)();
  int v34;
  CFTypeRef *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("should fade audio buffers", 0x19uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v25);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v31);
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v31);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(v31);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v25))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)&v26);
    v33 = &off_1E69B9FE8;
    LOBYTE(v34) = 0;
    v35 = (CFTypeRef *)&v33;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v26);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v33, (uint64_t)v31);
    vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v31);
    vp::vx::data_flow::State<void>::~State(v31);
    v7 = (uint64_t (***)())v35;
    if (v35 == (CFTypeRef *)&v33)
    {
      v8 = 4;
      v7 = &v33;
    }
    else
    {
      if (!v35)
        goto LABEL_9;
      v8 = 5;
    }
    (*v7)[v8]();
LABEL_9:
    vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v26);
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v26);
    v10 = v26;
    v9 = v27;
    if (v27)
    {
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = operator new(0x20uLL);
    *v13 = &off_1E69BA030;
    v13[1] = v10;
    v13[2] = v9;
    v30 = v13;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v29);
    v35 = 0;
    v14 = (CFTypeRef *)operator new(0x28uLL);
    *v14 = &off_1E69B0C10;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v31);
    v35 = v14;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v24, (uint64_t)&v33);
    v15 = (uint64_t (***)())v35;
    if (v35 == (CFTypeRef *)&v33)
    {
      v16 = 4;
      v15 = &v33;
    }
    else
    {
      if (!v35)
        goto LABEL_17;
      v16 = 5;
    }
    (*v15)[v16]();
LABEL_17:
    v17 = v32;
    if (v32 == v31)
    {
      v18 = 4;
      v17 = v31;
    }
    else
    {
      if (!v32)
        goto LABEL_22;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
    v19 = v30;
    if (v30 == v29)
    {
      v20 = 4;
      v19 = v29;
    }
    else
    {
      if (!v30)
      {
LABEL_27:
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        vp::vx::data_flow::State<void>::auto_release((uint64_t)v24);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v24);
        v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
        v22 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v33 = v22;
        v34 = v21;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v33, (uint64_t)&v33);
        if (v33)
          CFRelease(v33);
        goto LABEL_33;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_27;
  }
LABEL_33:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v25);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  if (cf)
    CFRelease(cf);
}

void sub_1B6014F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_use_internal_reference(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  int v7;
  uint64_t (***v8)();
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  CFTypeRef *v15;
  uint64_t (***v16)();
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t (**v23)();
  CFTypeRef cf;
  _BYTE v25[24];
  _BYTE v26[24];
  uint64_t v27;
  std::__shared_weak_count *v28;
  int id;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t (**v34)();
  int v35;
  CFTypeRef *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("should use internal reference", 0x1DuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v26);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v32);
    vp::vx::data_flow::State<void>::State((uint64_t)&v34, (uint64_t)v32);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v26, (uint64_t)&v34);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v34);
    vp::vx::data_flow::State<void>::~State(v32);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v26))
  {
    v7 = *((_DWORD *)this + 66);
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)&v27);
    v34 = &off_1E69B9E80;
    v35 = v7;
    v36 = (CFTypeRef *)&v34;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v27);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v34, (uint64_t)v32);
    vp::vx::data_flow::State<void>::State((uint64_t)v30, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State(v32);
    v8 = (uint64_t (***)())v36;
    if (v36 == (CFTypeRef *)&v34)
    {
      v9 = 4;
      v8 = &v34;
    }
    else
    {
      if (!v36)
        goto LABEL_9;
      v9 = 5;
    }
    (*v8)[v9]();
LABEL_9:
    vp::vx::data_flow::State<void>::State((uint64_t)&v34, (uint64_t)v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)v30);
    vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)&v34);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v34);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v27);
    if (*((_BYTE *)this + 360))
    {
      v32[0] = 0;
      vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)this + 16), v32, (uint64_t)&v34);
      vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)&v34);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v34);
    }
    vp::vx::Voice_Processor::make_weak_state_observer(this, &v27);
    v11 = v27;
    v10 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    v14 = operator new(0x20uLL);
    *v14 = &off_1E69B9EC8;
    v14[1] = v11;
    v14[2] = v10;
    v31 = v14;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)v30);
    v36 = 0;
    v15 = (CFTypeRef *)operator new(0x28uLL);
    *v15 = &off_1E69B0C10;
    std::__function::__value_func<void ()(unsigned int,BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v32);
    v36 = v15;
    vp::vx::data_flow::State<void>::register_listener((uint64_t)v25, (uint64_t)&v34);
    v16 = (uint64_t (***)())v36;
    if (v36 == (CFTypeRef *)&v34)
    {
      v17 = 4;
      v16 = &v34;
    }
    else
    {
      if (!v36)
        goto LABEL_19;
      v17 = 5;
    }
    (*v16)[v17]();
LABEL_19:
    v18 = v33;
    if (v33 == v32)
    {
      v19 = 4;
      v18 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_24;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_24:
    v20 = v31;
    if (v31 == v30)
    {
      v21 = 4;
      v20 = v30;
    }
    else
    {
      if (!v31)
      {
LABEL_29:
        if (v10)
          std::__shared_weak_count::__release_weak(v10);
        vp::vx::data_flow::State<void>::auto_release((uint64_t)v25);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v26, (uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        v22 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
        v23 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v34 = v23;
        v35 = v22;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v34, (uint64_t)&v34);
        if (v34)
          CFRelease(v34);
        goto LABEL_35;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
    goto LABEL_29;
  }
LABEL_35:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v26);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v26);
  if (cf)
    CFRelease(cf);
}

void sub_1B6015354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_app_bundle_id(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  char *v13;
  CFTypeRef v14;
  char v15;
  CFTypeRef v16;
  CFTypeRef *v17;
  uint64_t (***v18)();
  uint64_t v19;
  int v20;
  uint64_t (**v21)();
  CFTypeRef v22;
  _BYTE v23[24];
  _BYTE v24[24];
  CFTypeRef v25;
  CFTypeRef cf;
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  int id;
  int v32;
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t v35;
  CFTypeRef *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("application bundle ID", 0x15uLL, (CFStringRef *)&v22);
  vp::vx::data_flow::State<void>::State((uint64_t)v24);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &v22);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v30);
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v30);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v24, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(v30);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v24))
  {
    v8 = *((_QWORD *)this + 57);
    v7 = *((_QWORD *)this + 58);
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 69);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    v33 = &off_1E69B8DB8;
    v34 = v8;
    v35 = v7;
    v36 = (CFTypeRef *)&v33;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v33, (uint64_t)v30);
    vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v30);
    vp::vx::data_flow::State<void>::~State(v30);
    v11 = (uint64_t (***)())v36;
    if (v36 == (CFTypeRef *)&v33)
    {
      v12 = 4;
      v11 = &v33;
    }
    else
    {
      if (!v36)
        goto LABEL_12;
      v12 = 5;
    }
    (*v11)[v12]();
LABEL_12:
    vp::vx::data_flow::State<void>::State((uint64_t)v28, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v29);
    vp::vx::data_flow::State<void>::~State((uint64_t)v27);
    if (*((_DWORD *)this + 66) == 3)
      v13 = "com.apple.FaceTime";
    else
      v13 = "com.apple.facetime";
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v13);
    if ((_os_feature_enabled_impl() & 1) != 0 && !*((_DWORD *)this + 66))
    {
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, "com.apple.mobilephone");
      v14 = v25;
      if (v25)
      {
        CFRetain(v25);
        v15 = 0;
LABEL_19:
        v16 = cf;
        if (cf)
          CFRetain(cf);
        (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 55);
        vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)&v33);
        vp::vx::data_flow::State<void>::~State(&v33);
        if ((v15 & 1) == 0)
          CFRetain(v14);
        if (v16)
          CFRetain(v16);
        if ((v15 & 1) == 0)
          CFRetain(v14);
        if (v16)
          CFRetain(v16);
        v17 = (CFTypeRef *)operator new(0x20uLL);
        *v17 = &off_1E69B8E00;
        v17[1] = this;
        if ((v15 & 1) == 0)
          CFRetain(v14);
        v17[2] = v14;
        if (v16)
          CFRetain(v16);
        v17[3] = v16;
        v36 = v17;
        id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
        v32 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
        vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v33, (uint64_t)v30);
        vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)v30);
        vp::vx::data_flow::State<void>::~State(v30);
        v18 = (uint64_t (***)())v36;
        if (v36 == (CFTypeRef *)&v33)
        {
          v19 = 4;
          v18 = &v33;
        }
        else
        {
          if (!v36)
          {
LABEL_38:
            if (v16)
              CFRelease(v16);
            if ((v15 & 1) == 0)
              CFRelease(v14);
            if (v16)
              CFRelease(v16);
            if ((v15 & 1) == 0)
              CFRelease(v14);
            vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v29);
            vp::vx::data_flow::State<void>::~State((uint64_t)v29);
            vp::vx::data_flow::State<void>::~State((uint64_t)v27);
            if (v16)
              CFRelease(v16);
            if ((v15 & 1) == 0)
              CFRelease(v14);
            if (v25)
              CFRelease(v25);
            if (cf)
              CFRelease(cf);
            vp::vx::data_flow::State<void>::~State((uint64_t)v28);
            vp::vx::data_flow::State<void>::operator=((uint64_t)v24, (uint64_t)v23);
            vp::vx::data_flow::State<void>::~State((uint64_t)v23);
            v20 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
            v21 = (uint64_t (**)())v22;
            if (v22)
              CFRetain(v22);
            v33 = v21;
            LODWORD(v34) = v20;
            std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v33, (uint64_t)&v33);
            if (v33)
              CFRelease(v33);
            goto LABEL_58;
          }
          v19 = 5;
        }
        (*v18)[v19]();
        goto LABEL_38;
      }
    }
    else
    {
      v14 = 0;
      v25 = 0;
    }
    v15 = 1;
    goto LABEL_19;
  }
LABEL_58:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v24);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  if (v22)
    CFRelease(v22);
}

void sub_1B601582C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void applesauce::CF::operator"" _cf(void *__src@<X0>, size_t __len@<X1>, CFStringRef *a3@<X8>)
{
  void **v4;
  CFIndex v5;
  CFStringRef v6;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100](__p, __src, __len);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (CFIndex)__p[1];
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
  *a3 = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_1B60159A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration_context(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  int v12;
  uint64_t (**v13)();
  CFTypeRef v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[24];
  _BYTE v46[24];
  _BYTE v47[24];
  _BYTE v48[24];
  _BYTE v49[24];
  _BYTE v50[24];
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];
  CFTypeRef cf;
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[24];
  _BYTE v62[24];
  _DWORD v63[6];
  uint64_t (**v64)();
  int id;
  int v66;
  int v67;
  int v68;
  CFTypeRef *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t (**v99)();
  char v100;
  uint64_t (***v101)();
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("configuration context", 0x15uLL, (CFStringRef *)&v14);
  vp::vx::data_flow::State<void>::State((uint64_t)v16);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &v14);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)&v99);
    vp::vx::data_flow::State<void>::State((uint64_t)&v64, (uint64_t)&v99);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v99);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v16))
  {
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 55);
    vp::vx::data_flow::State<void>::State((uint64_t)v61, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 56);
    vp::vx::data_flow::State<void>::State((uint64_t)v59, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    applesauce::CF::operator"" _cf("vp_chat_flavor", 0xEuLL, (CFStringRef *)&cf);
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>((uint64_t)this, &cf, (uint64_t)v58);
    v64 = &off_1E69B8EF8;
    LOBYTE(id) = 0;
    v69 = (CFTypeRef *)&v64;
    v63[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v59);
    v63[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v58);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v64, (uint64_t)&v99);
    vp::vx::data_flow::State<void>::State((uint64_t)v62, (uint64_t)&v99);
    vp::vx::data_flow::State<void>::~State(&v99);
    v8 = (uint64_t (***)())v69;
    if (v69 == (CFTypeRef *)&v64)
    {
      v9 = 4;
      v8 = &v64;
    }
    else
    {
      if (!v69)
        goto LABEL_9;
      v9 = 5;
    }
    (*v8)[v9]();
LABEL_9:
    vp::vx::data_flow::State<void>::State((uint64_t)v60, (uint64_t)v62);
    vp::vx::data_flow::State<void>::~State((uint64_t)v62);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 10);
    vp::vx::data_flow::State<void>::State((uint64_t)v56, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 16);
    vp::vx::data_flow::State<void>::State((uint64_t)v55, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 17);
    vp::vx::data_flow::State<void>::State((uint64_t)v54, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 18);
    vp::vx::data_flow::State<void>::State((uint64_t)v53, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 19);
    vp::vx::data_flow::State<void>::State((uint64_t)v52, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 25);
    vp::vx::data_flow::State<void>::State((uint64_t)v51, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 36);
    vp::vx::data_flow::State<void>::State((uint64_t)v50, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 37);
    vp::vx::data_flow::State<void>::State((uint64_t)v49, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 38);
    vp::vx::data_flow::State<void>::State((uint64_t)v48, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 41);
    vp::vx::data_flow::State<void>::State((uint64_t)v47, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 42);
    vp::vx::data_flow::State<void>::State((uint64_t)v46, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 43);
    vp::vx::data_flow::State<void>::State((uint64_t)v45, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 44);
    vp::vx::data_flow::State<void>::State((uint64_t)v44, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 74);
    vp::vx::data_flow::State<void>::State((uint64_t)v43, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(this, (uint64_t)v42);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 77);
    vp::vx::data_flow::State<void>::State((uint64_t)v41, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 85);
    vp::vx::data_flow::State<void>::State((uint64_t)v40, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, _QWORD))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 0);
    vp::vx::data_flow::State<void>::State((uint64_t)v39, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 1);
    vp::vx::data_flow::State<void>::State((uint64_t)v38, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 58);
    vp::vx::data_flow::State<void>::State((uint64_t)v37, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    vp::vx::Voice_Processor::get_spatial_mode(this, (uint64_t)v36);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 8);
    vp::vx::data_flow::State<void>::State((uint64_t)v34, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v34, (uint64_t)this + 16, (uint64_t)v35);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 23);
    vp::vx::data_flow::State<void>::State((uint64_t)v32, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v32, (uint64_t)this + 16, (uint64_t)v33);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 48);
    vp::vx::data_flow::State<void>::State((uint64_t)v30, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v30, (uint64_t)this + 16, (uint64_t)v31);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 49);
    vp::vx::data_flow::State<void>::State((uint64_t)v28, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v28, (uint64_t)this + 16, (uint64_t)v29);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v26, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v26, (uint64_t)this + 16, (uint64_t)v27);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 66);
    vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 67);
    vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 59);
    vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v64, (char *)this + 8, 86);
    vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(this, (uint64_t)v21);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v64, (char *)this + 8, 88);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v64, (char *)this + 8, 89);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v64, (char *)this + 8, 90);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v64, (char *)this + 8, 91);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v64);
    vp::vx::data_flow::State<void>::~State(&v64);
    v99 = &off_1E69B8E48;
    v100 = 0;
    v101 = &v99;
    LODWORD(v64) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v61);
    HIDWORD(v64) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v60);
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v56);
    v66 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v55);
    v67 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v54);
    v68 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v53);
    LODWORD(v69) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v52);
    HIDWORD(v69) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v51);
    v70 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v50);
    v71 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v49);
    v72 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v48);
    v73 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v47);
    v74 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v46);
    v75 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v45);
    v76 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v44);
    v77 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v43);
    v78 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v42);
    v79 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v41);
    v80 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v40);
    v81 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v39);
    v82 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v38);
    v83 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v37);
    v84 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v36);
    v85 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
    v86 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v33);
    v87 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v31);
    v88 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
    v89 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
    v90 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
    v91 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
    v92 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
    v93 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    v94 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
    v95 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
    v96 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    v97 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    v98 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v99, (uint64_t)v62);
    vp::vx::data_flow::State<void>::State((uint64_t)v63, (uint64_t)v62);
    vp::vx::data_flow::State<void>::~State(v62);
    v10 = v101;
    if (v101 == &v99)
    {
      v11 = 4;
      v10 = &v99;
    }
    else
    {
      if (!v101)
      {
LABEL_14:
        vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v63);
        vp::vx::data_flow::State<void>::~State((uint64_t)v63);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v26);
        vp::vx::data_flow::State<void>::~State((uint64_t)v29);
        vp::vx::data_flow::State<void>::~State((uint64_t)v28);
        vp::vx::data_flow::State<void>::~State((uint64_t)v31);
        vp::vx::data_flow::State<void>::~State((uint64_t)v30);
        vp::vx::data_flow::State<void>::~State((uint64_t)v33);
        vp::vx::data_flow::State<void>::~State((uint64_t)v32);
        vp::vx::data_flow::State<void>::~State((uint64_t)v35);
        vp::vx::data_flow::State<void>::~State((uint64_t)v34);
        vp::vx::data_flow::State<void>::~State((uint64_t)v36);
        vp::vx::data_flow::State<void>::~State((uint64_t)v37);
        vp::vx::data_flow::State<void>::~State((uint64_t)v38);
        vp::vx::data_flow::State<void>::~State((uint64_t)v39);
        vp::vx::data_flow::State<void>::~State((uint64_t)v40);
        vp::vx::data_flow::State<void>::~State((uint64_t)v41);
        vp::vx::data_flow::State<void>::~State((uint64_t)v42);
        vp::vx::data_flow::State<void>::~State((uint64_t)v43);
        vp::vx::data_flow::State<void>::~State((uint64_t)v44);
        vp::vx::data_flow::State<void>::~State((uint64_t)v45);
        vp::vx::data_flow::State<void>::~State((uint64_t)v46);
        vp::vx::data_flow::State<void>::~State((uint64_t)v47);
        vp::vx::data_flow::State<void>::~State((uint64_t)v48);
        vp::vx::data_flow::State<void>::~State((uint64_t)v49);
        vp::vx::data_flow::State<void>::~State((uint64_t)v50);
        vp::vx::data_flow::State<void>::~State((uint64_t)v51);
        vp::vx::data_flow::State<void>::~State((uint64_t)v52);
        vp::vx::data_flow::State<void>::~State((uint64_t)v53);
        vp::vx::data_flow::State<void>::~State((uint64_t)v54);
        vp::vx::data_flow::State<void>::~State((uint64_t)v55);
        vp::vx::data_flow::State<void>::~State((uint64_t)v56);
        vp::vx::data_flow::State<void>::~State((uint64_t)v60);
        vp::vx::data_flow::State<void>::~State((uint64_t)v58);
        if (cf)
          CFRelease(cf);
        vp::vx::data_flow::State<void>::~State((uint64_t)v59);
        vp::vx::data_flow::State<void>::~State((uint64_t)v61);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v16, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
        v13 = (uint64_t (**)())v14;
        if (v14)
          CFRetain(v14);
        v64 = v13;
        id = v12;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v64, (uint64_t)&v64);
        if (v64)
          CFRelease(v64);
        goto LABEL_20;
      }
      v11 = 5;
    }
    (*v10)[v11]();
    goto LABEL_14;
  }
LABEL_20:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v16);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (v14)
    CFRelease(v14);
}

void sub_1B6016608(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B60167C0()
{
  JUMPOUT(0x1B60167A8);
}

void sub_1B60167C8()
{
  JUMPOUT(0x1B60167B8);
}

void vp::vx::Voice_Processor::get_global_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  const void *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef *v11;
  CFTypeRef *v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  CFTypeRef cf;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  vp::vx::Voice_Processor *v20;
  const void *v21;
  unint64_t *v22;
  _BYTE v23[28];
  int id;
  _BYTE v25[24];
  CFTypeRef v26;
  int v27;
  CFTypeRef *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("global configuration", 0x14uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v18);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State(v25);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v18))
  {
    v7 = (const void *)*((_QWORD *)this + 59);
    v8 = (unint64_t *)*((_QWORD *)this + 60);
    v20 = this;
    v21 = v7;
    v22 = v8;
    if (v8)
    {
      v9 = v8 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v19);
    v21 = 0;
    v22 = 0;
    v11 = (CFTypeRef *)operator new(0x20uLL);
    *v11 = &off_1E69B8FF8;
    v11[1] = this;
    v11[2] = v7;
    v11[3] = v8;
    v28 = v11;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State(v25);
    v12 = v28;
    if (v28 == &v26)
    {
      v13 = 4;
      v12 = &v26;
    }
    else
    {
      if (!v28)
      {
LABEL_12:
        vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        v14 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        v15 = cf;
        if (cf)
          CFRetain(cf);
        v26 = v15;
        v27 = v14;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v26, (uint64_t)&v26);
        if (v26)
          CFRelease(v26);
        goto LABEL_16;
      }
      v13 = 5;
    }
    (*((void (**)(void))*v12 + v13))();
    goto LABEL_12;
  }
LABEL_16:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v18);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if (cf)
    CFRelease(cf);
}

void sub_1B6016A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_preferred_io_cycle_usage(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("preferred I/O cycle usage", 0x19uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B90A8;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6016C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_SRC_algorithm(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink SRC algorithm", 0x14uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B9540;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6016F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_SRC_algorithm(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("downlink SRC algorithm", 0x16uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B9B90;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6017170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_SRC_quality(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink SRC quality", 0x12uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B9588;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B60173DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_SRC_quality(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("downlink SRC quality", 0x14uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B9BD8;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6017648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_wire_storage_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  int id;
  int v20;
  uint64_t (**v21)();
  int v22;
  CFTypeRef *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink wire storage capacity (milliseconds)", 0x2BuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v21, v7, 5);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v21, v7, 48);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    v21 = &off_1E69B95D0;
    LOBYTE(v22) = 0;
    v23 = (CFTypeRef *)&v21;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    v20 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v23;
    if (v23 == (CFTypeRef *)&v21)
    {
      v10 = 4;
      v9 = &v21;
    }
    else
    {
      if (!v23)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v21 = v12;
        v22 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v21, (uint64_t)&v21);
        if (v21)
          CFRelease(v21);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B6017914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_wire_storage_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  int id;
  int v20;
  uint64_t (**v21)();
  int v22;
  CFTypeRef *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("downlink wire storage capacity (milliseconds)", 0x2DuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v21, v7, 6);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v21, v7, 49);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    v21 = &off_1E69B9C20;
    LOBYTE(v22) = 0;
    v23 = (CFTypeRef *)&v21;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    v20 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v23;
    if (v23 == (CFTypeRef *)&v21)
    {
      v10 = 4;
      v9 = &v21;
    }
    else
    {
      if (!v23)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v21 = v12;
        v22 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v21, (uint64_t)&v21);
        if (v21)
          CFRelease(v21);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B6017BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_client_sample_rate(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  CFTypeRef *v13;
  uint64_t v14;
  int v15;
  uint64_t (**v16)();
  CFTypeRef cf;
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[28];
  int id;
  _BYTE v22[24];
  uint64_t (**v23)();
  int v24;
  CFTypeRef *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = "downlink";
  if (!a2)
    v6 = "uplink";
  applesauce::CF::make_StringRef(CFSTR("%s client sample rate (Hz)"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v18);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)&v23, (uint64_t)v22);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State(v22);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v18))
  {
    v10 = a1 + 8;
    v11 = a1 + 64;
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(&v23, v10, 48);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::~State(&v23);
    if (a2)
      v12 = &off_1E69B9138;
    else
      v12 = &off_1E69B90F0;
    v23 = v12;
    LOBYTE(v24) = 0;
    v25 = (CFTypeRef *)&v23;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    vp::vx::data_flow::State_Manager::create_state(v11, (uint64_t)&v23, (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v22);
    vp::vx::data_flow::State<void>::~State(v22);
    v13 = v25;
    if (v25 == (CFTypeRef *)&v23)
    {
      v14 = 4;
      v13 = (CFTypeRef *)&v23;
    }
    else
    {
      if (!v25)
      {
LABEL_14:
        vp::vx::data_flow::State<void>::State((uint64_t)&v23, (uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v23);
        v15 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        v16 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v23 = v16;
        v24 = v15;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, (CFTypeRef *)&v23, (uint64_t)&v23);
        if (v23)
          CFRelease(v23);
        goto LABEL_18;
      }
      v14 = 5;
    }
    (*((void (**)(void))*v13 + v14))();
    goto LABEL_14;
  }
LABEL_18:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v18);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if (cf)
    CFRelease(cf);
}

void sub_1B6017EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_client_sample_rate_preference(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("client sample rate preference (Hz)", 0x22uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_global_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B9180;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6018124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  const void *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef *v11;
  CFTypeRef *v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  CFTypeRef cf;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  vp::vx::Voice_Processor *v20;
  const void *v21;
  unint64_t *v22;
  _BYTE v23[28];
  int id;
  _BYTE v25[24];
  CFTypeRef v26;
  int v27;
  CFTypeRef *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink configuration", 0x14uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v18);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State(v25);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v18))
  {
    v7 = (const void *)*((_QWORD *)this + 59);
    v8 = (unint64_t *)*((_QWORD *)this + 60);
    v20 = this;
    v21 = v7;
    v22 = v8;
    if (v8)
    {
      v9 = v8 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v19);
    v21 = 0;
    v22 = 0;
    v11 = (CFTypeRef *)operator new(0x20uLL);
    *v11 = &off_1E69B9230;
    v11[1] = this;
    v11[2] = v7;
    v11[3] = v8;
    v28 = v11;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State(v25);
    v12 = v28;
    if (v28 == &v26)
    {
      v13 = 4;
      v12 = &v26;
    }
    else
    {
      if (!v28)
      {
LABEL_12:
        vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        v14 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        v15 = cf;
        if (cf)
          CFRetain(cf);
        v26 = v15;
        v27 = v14;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v26, (uint64_t)&v26);
        if (v26)
          CFRelease(v26);
        goto LABEL_16;
      }
      v13 = 5;
    }
    (*((void (**)(void))*v12 + v13))();
    goto LABEL_12;
  }
LABEL_16:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v18);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if (cf)
    CFRelease(cf);
}

void sub_1B60183D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  CFTypeRef *v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[28];
  int id;
  _BYTE v29[24];
  CFTypeRef v30;
  int v31;
  CFTypeRef *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = "hardware";
  if (a2 == 1)
    v6 = "echo";
  if (a2 == 2)
    v6 = "content";
  applesauce::CF::make_StringRef(CFSTR("uplink %s DSP configuration"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v21);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v30, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State(&v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v21))
  {
    v10 = *(_QWORD *)(a1 + 472);
    v11 = *(_QWORD *)(a1 + 480);
    v23 = a1;
    v24 = v10;
    v25 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v26 = a2;
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v22);
    v24 = 0;
    v25 = 0;
    v14 = operator new(0x28uLL);
    *v14 = &off_1E69B92E0;
    v14[1] = a1;
    v14[2] = v10;
    v14[3] = v11;
    *((_DWORD *)v14 + 8) = a2;
    v32 = (CFTypeRef *)v14;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v30, (uint64_t)v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State(v29);
    v15 = v32;
    if (v32 == &v30)
    {
      v16 = 4;
      v15 = &v30;
    }
    else
    {
      if (!v32)
      {
LABEL_16:
        vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        v17 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v30 = v18;
        v31 = v17;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v30, (uint64_t)&v30);
        if (v30)
          CFRelease(v30);
        goto LABEL_20;
      }
      v16 = 5;
    }
    (*((void (**)(void))*v15 + v16))();
    goto LABEL_16;
  }
LABEL_20:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v21);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf)
    CFRelease(cf);
}

{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  CFTypeRef *v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[28];
  int id;
  _BYTE v29[24];
  CFTypeRef v30;
  int v31;
  CFTypeRef *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v6 = "voice mix";
  else
    v6 = off_1E69BE538[a2 - 1];
  applesauce::CF::make_StringRef(CFSTR("downlink %s DSP configuration"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v21);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v30, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State(&v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v21))
  {
    v10 = *(_QWORD *)(a1 + 472);
    v11 = *(_QWORD *)(a1 + 480);
    v23 = a1;
    v24 = v10;
    v25 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v26 = a2;
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v22);
    v24 = 0;
    v25 = 0;
    v14 = operator new(0x28uLL);
    *v14 = &off_1E69B9878;
    v14[1] = a1;
    v14[2] = v10;
    v14[3] = v11;
    *((_DWORD *)v14 + 8) = a2;
    v32 = (CFTypeRef *)v14;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v30, (uint64_t)v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State(v29);
    v15 = v32;
    if (v32 == &v30)
    {
      v16 = 4;
      v15 = &v30;
    }
    else
    {
      if (!v32)
      {
LABEL_15:
        vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        v17 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v30 = v18;
        v31 = v17;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v30, (uint64_t)&v30);
        if (v30)
          CFRelease(v30);
        goto LABEL_19;
      }
      v16 = 5;
    }
    (*((void (**)(void))*v15 + v16))();
    goto LABEL_15;
  }
LABEL_19:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v21);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf)
    CFRelease(cf);
}

void sub_1B60186C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_configuration_options(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  CFTypeRef *v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[28];
  int id;
  _BYTE v29[24];
  CFTypeRef v30;
  int v31;
  CFTypeRef *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = "hardware";
  if (a2 == 1)
    v6 = "echo";
  if (a2 == 2)
    v6 = "content";
  applesauce::CF::make_StringRef(CFSTR("uplink %s DSP configuration options"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v21);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v30, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State(&v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v21))
  {
    v10 = *(_QWORD *)(a1 + 472);
    v11 = *(_QWORD *)(a1 + 480);
    v23 = a1;
    v24 = v10;
    v25 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v26 = a2;
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v22);
    v24 = 0;
    v25 = 0;
    v14 = operator new(0x28uLL);
    *v14 = &off_1E69B9328;
    v14[1] = a1;
    v14[2] = v10;
    v14[3] = v11;
    *((_DWORD *)v14 + 8) = a2;
    v32 = (CFTypeRef *)v14;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v30, (uint64_t)v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State(v29);
    v15 = v32;
    if (v32 == &v30)
    {
      v16 = 4;
      v15 = &v30;
    }
    else
    {
      if (!v32)
      {
LABEL_16:
        vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        v17 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v30 = v18;
        v31 = v17;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v30, (uint64_t)&v30);
        if (v30)
          CFRelease(v30);
        goto LABEL_20;
      }
      v16 = 5;
    }
    (*((void (**)(void))*v15 + v16))();
    goto LABEL_16;
  }
LABEL_20:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v21);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf)
    CFRelease(cf);
}

{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  CFTypeRef *v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[28];
  int id;
  _BYTE v29[24];
  CFTypeRef v30;
  int v31;
  CFTypeRef *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v6 = "voice mix";
  else
    v6 = off_1E69BE538[a2 - 1];
  applesauce::CF::make_StringRef(CFSTR("downlink %s DSP configuration options"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v21);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v23);
    vp::vx::data_flow::State<void>::State((uint64_t)&v30, (uint64_t)&v23);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v30);
    vp::vx::data_flow::State<void>::~State(&v23);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v21))
  {
    v10 = *(_QWORD *)(a1 + 472);
    v11 = *(_QWORD *)(a1 + 480);
    v23 = a1;
    v24 = v10;
    v25 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v26 = a2;
    vp::vx::Voice_Processor::get_configuration_context((vp::vx::Voice_Processor *)a1, (uint64_t)v22);
    v24 = 0;
    v25 = 0;
    v14 = operator new(0x28uLL);
    *v14 = &off_1E69B98C0;
    v14[1] = a1;
    v14[2] = v10;
    v14[3] = v11;
    *((_DWORD *)v14 + 8) = a2;
    v32 = (CFTypeRef *)v14;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v30, (uint64_t)v29);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v29);
    vp::vx::data_flow::State<void>::~State(v29);
    v15 = v32;
    if (v32 == &v30)
    {
      v16 = 4;
      v15 = &v30;
    }
    else
    {
      if (!v32)
      {
LABEL_15:
        vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v21, (uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        v17 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v30 = v18;
        v31 = v17;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, &v30, (uint64_t)&v30);
        if (v30)
          CFRelease(v30);
        goto LABEL_19;
      }
      v16 = 5;
    }
    (*((void (**)(void))*v15 + v16))();
    goto LABEL_15;
  }
LABEL_19:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v21);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf)
    CFRelease(cf);
}

void sub_1B60189C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_block_size(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  CFTypeRef *v10;
  void *v11;
  const void *v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t *v20;
  int id;
  uint64_t (**v22)();
  CFTypeRef cf;
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  const void *v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD v35[3];
  const void *v36;
  void *__p;
  _BYTE *v38;
  uint64_t v39;
  _BYTE v40[24];
  _DWORD v41[6];
  _DWORD v42[8];
  uint64_t (**v43)();
  uint64_t v44;
  CFTypeRef *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = "hardware";
  if (a2 == 1)
    v6 = "echo";
  if (a2 == 2)
    v6 = "content";
  applesauce::CF::make_StringRef(CFSTR("uplink %s DSP block size"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v25);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)&v36);
    vp::vx::data_flow::State<void>::State((uint64_t)&v43, (uint64_t)&v36);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)&v43);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v43);
    vp::vx::data_flow::State<void>::~State(&v36);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v25))
  {
    if (a2 != 2)
    {
      if (a2 == 1)
      {
        v27 = *(const void **)(a1 + 552);
        v28 = 0;
        v29 = 0;
        v30 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v28, *(const void **)(a1 + 496), *(_QWORD *)(a1 + 504), (uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 2);
        vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v41);
        vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v26);
        v31 = v27;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v32, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
        v36 = v31;
        __p = 0;
        v38 = 0;
        v39 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v32, (uint64_t)v33, (v33 - (_BYTE *)v32) >> 2);
        v45 = 0;
        v10 = (CFTypeRef *)operator new(0x28uLL);
        v12 = v36;
        v11 = __p;
        *v10 = &off_1E69B9420;
        v10[1] = v12;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 2, v11, (uint64_t)v38, (v38 - (_BYTE *)v11) >> 2);
        v45 = v10;
        v42[6] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v41);
        v42[7] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
        vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v43, (uint64_t)v40);
        vp::vx::data_flow::State<void>::State((uint64_t)v35, (uint64_t)v40);
        vp::vx::data_flow::State<void>::~State(v40);
        v13 = (uint64_t (***)())v45;
        if (v45 == (CFTypeRef *)&v43)
        {
          v14 = 4;
          v13 = &v43;
        }
        else
        {
          if (!v45)
          {
LABEL_28:
            if (__p)
            {
              v38 = __p;
              operator delete(__p);
            }
            if (v32)
            {
              v33 = v32;
              operator delete(v32);
            }
            vp::vx::data_flow::State<void>::State((uint64_t)v42, (uint64_t)v35);
            vp::vx::data_flow::State<void>::~State((uint64_t)v35);
            vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v42);
            vp::vx::data_flow::State<void>::~State((uint64_t)v42);
            vp::vx::data_flow::State<void>::~State((uint64_t)v26);
            vp::vx::data_flow::State<void>::~State((uint64_t)v41);
            if (v28)
            {
              v29 = v28;
              operator delete(v28);
            }
            goto LABEL_34;
          }
          v14 = 5;
        }
        (*v13)[v14]();
        goto LABEL_28;
      }
      vp::vx::Voice_Processor::get_uplink_mic_block_size((vp::vx::Voice_Processor *)a1, (uint64_t)v40);
      vp::vx::Voice_Processor::get_uplink_ref_block_size((vp::vx::Voice_Processor *)a1, (uint64_t)v35);
      v43 = &off_1E69B93D8;
      v44 = a1;
      v45 = (CFTypeRef *)&v43;
      v42[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v40);
      v42[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
      vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v43, (uint64_t)&v36);
      vp::vx::data_flow::State<void>::State((uint64_t)&v31, (uint64_t)&v36);
      vp::vx::data_flow::State<void>::~State(&v36);
      v18 = (uint64_t (***)())v45;
      if (v45 == (CFTypeRef *)&v43)
      {
        v19 = 4;
        v18 = &v43;
      }
      else
      {
        if (!v45)
        {
LABEL_21:
          vp::vx::data_flow::State<void>::State((uint64_t)&v27, (uint64_t)&v31);
          vp::vx::data_flow::State<void>::~State((uint64_t)&v31);
          vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)&v27);
          v20 = (uint64_t *)&v27;
LABEL_25:
          vp::vx::data_flow::State<void>::~State((uint64_t)v20);
          vp::vx::data_flow::State<void>::~State((uint64_t)v35);
          vp::vx::data_flow::State<void>::~State((uint64_t)v40);
LABEL_34:
          vp::vx::data_flow::State<void>::operator=((uint64_t)v25, (uint64_t)v24);
          vp::vx::data_flow::State<void>::~State((uint64_t)v24);
          id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
          v22 = (uint64_t (**)())cf;
          if (cf)
            CFRetain(cf);
          v43 = v22;
          LODWORD(v44) = id;
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, (CFTypeRef *)&v43, (uint64_t)&v43);
          if (v43)
            CFRelease(v43);
          goto LABEL_38;
        }
        v19 = 5;
      }
      (*v18)[v19]();
      goto LABEL_21;
    }
    v15 = *(_QWORD *)(a1 + 552);
    vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v40);
    vp::vx::Voice_Processor::get_block_size(v35, a1, 1);
    vp::vx::Voice_Processor::get_sample_rate(a1, 2, (uint64_t)v42);
    v43 = &off_1E69B9468;
    v44 = v15;
    v45 = (CFTypeRef *)&v43;
    v41[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v40);
    v41[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v35);
    v41[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v42);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v43, (uint64_t)&v36);
    vp::vx::data_flow::State<void>::State((uint64_t)&v31, (uint64_t)&v36);
    vp::vx::data_flow::State<void>::~State(&v36);
    v16 = (uint64_t (***)())v45;
    if (v45 == (CFTypeRef *)&v43)
    {
      v17 = 4;
      v16 = &v43;
    }
    else
    {
      if (!v45)
      {
LABEL_24:
        vp::vx::data_flow::State<void>::State((uint64_t)&v27, (uint64_t)&v31);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v31);
        vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)&v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v27);
        v20 = (uint64_t *)v42;
        goto LABEL_25;
      }
      v17 = 5;
    }
    (*v16)[v17]();
    goto LABEL_24;
  }
LABEL_38:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v25);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  if (cf)
    CFRelease(cf);
}

{
  const char *v6;
  CFTypeRef *v7;
  CFTypeRef cf;
  _BYTE v9[24];
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v6 = "voice mix";
  else
    v6 = off_1E69BE538[a2 - 1];
  applesauce::CF::make_StringRef(CFSTR("downlink %s DSP block size"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v9);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v7 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v7)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v7 + 6), (uint64_t)&v10);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)&v10);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v9, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State(&v10);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v9))
    __asm { BR              X10 }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v9);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 184));
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B6018F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::get_block_size_is_fixed@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v5;
  _BYTE v6[24];

  v5 = a2 != 2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v5, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void vp::vx::Voice_Processor::get_sample_rate(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::recursive_mutex *v7;
  unint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  _BYTE *v15;
  int id;
  uint64_t (**v17)();
  CFTypeRef cf;
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _QWORD v25[3];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _QWORD v29[3];
  _DWORD v30[6];
  uint64_t (**v31)();
  uint64_t v32;
  CFTypeRef *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = "hardware";
  if (a2 == 1)
    v6 = "echo";
  if (a2 == 2)
    v6 = "content";
  applesauce::CF::make_StringRef(CFSTR("uplink %s DSP sample rate"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v20);
  v7 = (std::recursive_mutex *)(a1 + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v8 = a1 + 128;
  v9 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v9)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v9 + 6), (uint64_t)v28);
    vp::vx::data_flow::State<void>::State((uint64_t)&v31, (uint64_t)v28);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v20, (uint64_t)&v31);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v31);
    vp::vx::data_flow::State<void>::~State(v28);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v20))
  {
    if (a2 == 2)
    {
      vp::vx::Voice_Processor::get_client_sample_rate(a1, 0, (uint64_t)v19);
LABEL_24:
      vp::vx::data_flow::State<void>::operator=((uint64_t)v20, (uint64_t)v19);
      vp::vx::data_flow::State<void>::~State((uint64_t)v19);
      id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
      v17 = (uint64_t (**)())cf;
      if (cf)
        CFRetain(cf);
      v31 = v17;
      LODWORD(v32) = id;
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(v8, (CFTypeRef *)&v31, (uint64_t)&v31);
      if (v31)
        CFRelease(v31);
      goto LABEL_28;
    }
    if (a2 == 1)
    {
      v10 = *(_QWORD *)(a1 + 552);
      vp::vx::Voice_Processor::get_sample_rate(v25, a1, 0);
      vp::vx::Voice_Processor::get_block_size(v29, a1, 0);
      vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v24);
      vp::vx::Voice_Processor::get_client_sample_rate(a1, 0, (uint64_t)v23);
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(&v31, a1 + 8, 67);
      vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)&v31);
      vp::vx::data_flow::State<void>::~State(&v31);
      vp::vx::Voice_Processor::get_client_sample_rate_preference((vp::vx::Voice_Processor *)a1, (uint64_t)v21);
      v31 = &off_1E69B94F8;
      v32 = v10;
      v33 = (CFTypeRef *)&v31;
      v30[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
      v30[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
      v30[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
      v30[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
      v30[4] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
      v30[5] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
      vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v31, (uint64_t)v28);
      vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v28);
      vp::vx::data_flow::State<void>::~State(v28);
      v11 = (uint64_t (***)())v33;
      if (v33 == (CFTypeRef *)&v31)
      {
        v12 = 4;
        v11 = &v31;
      }
      else
      {
        if (!v33)
        {
LABEL_22:
          vp::vx::data_flow::State<void>::State((uint64_t)v26, (uint64_t)v27);
          vp::vx::data_flow::State<void>::~State((uint64_t)v27);
          vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v26);
          vp::vx::data_flow::State<void>::~State((uint64_t)v26);
          vp::vx::data_flow::State<void>::~State((uint64_t)v21);
          vp::vx::data_flow::State<void>::~State((uint64_t)v22);
          vp::vx::data_flow::State<void>::~State((uint64_t)v23);
          vp::vx::data_flow::State<void>::~State((uint64_t)v24);
          vp::vx::data_flow::State<void>::~State((uint64_t)v29);
          v15 = v25;
          goto LABEL_23;
        }
        v12 = 5;
      }
      (*v11)[v12]();
      goto LABEL_22;
    }
    vp::vx::Voice_Processor::get_uplink_mic_sample_rate((vp::vx::Voice_Processor *)a1, (uint64_t)v26);
    vp::vx::Voice_Processor::get_uplink_ref_sample_rate((vp::vx::Voice_Processor *)a1, (uint64_t)v25);
    v31 = &off_1E69B94B0;
    v32 = a1;
    v33 = (CFTypeRef *)&v31;
    LODWORD(v29[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
    HIDWORD(v29[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
    vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)&v31, (uint64_t)v28);
    vp::vx::data_flow::State<void>::State((uint64_t)v30, (uint64_t)v28);
    vp::vx::data_flow::State<void>::~State(v28);
    v13 = (uint64_t (***)())v33;
    if (v33 == (CFTypeRef *)&v31)
    {
      v14 = 4;
      v13 = &v31;
    }
    else
    {
      if (!v33)
      {
LABEL_19:
        vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)v30);
        vp::vx::data_flow::State<void>::~State((uint64_t)v30);
        vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        v15 = v26;
LABEL_23:
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        goto LABEL_24;
      }
      v14 = 5;
    }
    (*v13)[v14]();
    goto LABEL_19;
  }
LABEL_28:
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v20);
  std::recursive_mutex::unlock(v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if (cf)
    CFRelease(cf);
}

{
  const char *v6;
  CFTypeRef *v7;
  CFTypeRef cf;
  _BYTE v9[24];
  _BYTE v10[24];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v6 = "voice mix";
  else
    v6 = off_1E69BE538[a2 - 1];
  applesauce::CF::make_StringRef(CFSTR("downlink %s DSP sample rate"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v9);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v7 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v7)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v7 + 6), (uint64_t)v10);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v10);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v9, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State(v10);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v9))
    __asm { BR              X10 }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v9);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 184));
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B60194A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::recursive_mutex *v33;

  vp::vx::data_flow::State<void>::~State((uint64_t)&a33);
  std::recursive_mutex::unlock(v33);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a15);
  applesauce::CF::StringRef::~StringRef(&a11);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  CFTypeRef v11;
  CFTypeRef cf;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  CFTypeRef v33;
  int id;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink mic-ref sample time delta", 0x20uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v48);
    vp::vx::data_flow::State<void>::State((uint64_t)&v33, (uint64_t)v48);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(v48);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 8);
    vp::vx::data_flow::State<void>::State((uint64_t)v48, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v48, (uint64_t)this + 16, (uint64_t)v30);
    vp::vx::data_flow::State<void>::~State((uint64_t)v48);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 13);
    vp::vx::data_flow::State<void>::State((uint64_t)v29, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 14);
    vp::vx::data_flow::State<void>::State((uint64_t)v28, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 15);
    vp::vx::data_flow::State<void>::State((uint64_t)v27, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 23);
    vp::vx::data_flow::State<void>::State((uint64_t)v48, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v48, (uint64_t)this + 16, (uint64_t)v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)v48);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 28);
    vp::vx::data_flow::State<void>::State((uint64_t)v25, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 29);
    vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 30);
    vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v24);
    vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v23);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 31);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 33);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 32);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 34);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v33, (char *)this + 8, 35);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v33);
    vp::vx::data_flow::State<void>::~State(&v33);
    v7 = *((_QWORD *)this + 69);
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v15);
    v48[0] = &off_1E69B9660;
    v48[1] = v7;
    v49 = v48;
    LODWORD(v33) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    HIDWORD(v33) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v30);
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v29);
    v35 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v28);
    v36 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v27);
    v37 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v26);
    v38 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v25);
    v39 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v24);
    v40 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v23);
    v41 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v22);
    v42 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v21);
    v43 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
    v44 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    v45 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
    v46 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    v47 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v48, (uint64_t)v32);
    vp::vx::data_flow::State<void>::State((uint64_t)v31, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State(v32);
    v8 = v49;
    if (v49 == v48)
    {
      v9 = 4;
      v8 = v48;
    }
    else
    {
      if (!v49)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v31);
        vp::vx::data_flow::State<void>::~State((uint64_t)v31);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)v20);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v24);
        vp::vx::data_flow::State<void>::~State((uint64_t)v25);
        vp::vx::data_flow::State<void>::~State((uint64_t)v26);
        vp::vx::data_flow::State<void>::~State((uint64_t)v27);
        vp::vx::data_flow::State<void>::~State((uint64_t)v28);
        vp::vx::data_flow::State<void>::~State((uint64_t)v29);
        vp::vx::data_flow::State<void>::~State((uint64_t)v30);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)v13);
        vp::vx::data_flow::State<void>::~State((uint64_t)v13);
        v10 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v11 = cf;
        if (cf)
          CFRetain(cf);
        v33 = v11;
        id = v10;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v33, (uint64_t)&v33);
        if (v33)
          CFRelease(v33);
        goto LABEL_13;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B6019B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_mic_ref_delay_milliseconds(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  int id;
  int v19;
  uint64_t (**v20)();
  int v21;
  CFTypeRef *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink mic-ref delay (milliseconds)", 0x23uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v20);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(this, (uint64_t)v15);
    vp::vx::Voice_Processor::get_uplink_mic_sample_rate(this, (uint64_t)v14);
    v20 = &off_1E69B96A8;
    LOBYTE(v21) = 0;
    v22 = (CFTypeRef *)&v20;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    v19 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v20, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v22;
    if (v22 == (CFTypeRef *)&v20)
    {
      v8 = 4;
      v7 = &v20;
    }
    else
    {
      if (!v22)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v20 = v10;
        v21 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v20, (uint64_t)&v20);
        if (v20)
          CFRelease(v20);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B6019E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_ref_audio_ring_buffer_capacity(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  uint64_t (***v7)();
  uint64_t v8;
  int v9;
  uint64_t (**v10)();
  CFTypeRef cf;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[28];
  int id;
  _BYTE v17[24];
  uint64_t (**v18)();
  int v19;
  CFTypeRef *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink ref audio ring buffer capacity (milliseconds)", 0x34uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v13);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v18);
    vp::vx::data_flow::State<void>::~State(v17);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v13))
  {
    vp::vx::Voice_Processor::get_uplink_configuration(this, (uint64_t)v14);
    v18 = &off_1E69B96F0;
    LOBYTE(v19) = 0;
    v20 = (CFTypeRef *)&v18;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v18, (uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State(v17);
    v7 = (uint64_t (***)())v20;
    if (v20 == (CFTypeRef *)&v18)
    {
      v8 = 4;
      v7 = &v18;
    }
    else
    {
      if (!v20)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v13, (uint64_t)v12);
        vp::vx::data_flow::State<void>::~State((uint64_t)v12);
        v9 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
        v10 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v18 = v10;
        v19 = v9;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v18, (uint64_t)&v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v13);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  if (cf)
    CFRelease(cf);
}

void sub_1B601A0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_mic_block_size(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  int id;
  CFTypeRef v8;
  CFTypeRef cf;
  _BYTE v10[24];
  _BYTE v11[24];
  CFTypeRef v12;
  int v13;

  applesauce::CF::operator"" _cf("uplink microphone block size (frames)", 0x25uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v11);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v10);
    vp::vx::data_flow::State<void>::State((uint64_t)&v12, (uint64_t)v10);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v11, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(v10);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v11))
  {
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v12, (char *)this + 8, 9);
    vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(&v12);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v11, (uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v11);
    v8 = cf;
    if (cf)
      CFRetain(cf);
    v12 = v8;
    v13 = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v12, (uint64_t)&v12);
    if (v12)
      CFRelease(v12);
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v11);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  if (cf)
    CFRelease(cf);
}

void sub_1B601A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, const void *a16)
{
  std::recursive_mutex *v16;

  std::pair<applesauce::CF::StringRef,unsigned int>::~pair(&a16);
  std::recursive_mutex::unlock(v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a13);
  applesauce::CF::StringRef::~StringRef(&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_mic_sample_rate(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink microphone sample rate (Hz)", 0x22uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 8);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9738;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601A4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_uplink_ref_block_size(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  int id;
  CFTypeRef v8;
  CFTypeRef cf;
  _BYTE v10[24];
  _BYTE v11[24];
  CFTypeRef v12;
  int v13;

  applesauce::CF::operator"" _cf("uplink reference block size (frames)", 0x24uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v11);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v10);
    vp::vx::data_flow::State<void>::State((uint64_t)&v12, (uint64_t)v10);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v11, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(v10);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v11))
  {
    (*(void (**)(CFTypeRef *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v12, (char *)this + 8, 24);
    vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)&v12);
    vp::vx::data_flow::State<void>::~State(&v12);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v11, (uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v11);
    v8 = cf;
    if (cf)
      CFRetain(cf);
    v12 = v8;
    v13 = id;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v12, (uint64_t)&v12);
    if (v12)
      CFRelease(v12);
  }
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v11);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  if (cf)
    CFRelease(cf);
}

void sub_1B601A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, const void *a16)
{
  std::recursive_mutex *v16;

  std::pair<applesauce::CF::StringRef,unsigned int>::~pair(&a16);
  std::recursive_mutex::unlock(v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a13);
  applesauce::CF::StringRef::~StringRef(&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_uplink_ref_sample_rate(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("uplink reference sample rate (Hz)", 0x21uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 23);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9780;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601A918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_configuration(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  const void *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef *v11;
  CFTypeRef *v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  CFTypeRef cf;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  vp::vx::Voice_Processor *v20;
  const void *v21;
  unint64_t *v22;
  _BYTE v23[28];
  int id;
  _BYTE v25[24];
  CFTypeRef v26;
  int v27;
  CFTypeRef *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("downlink configuration", 0x16uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v18);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v26);
    vp::vx::data_flow::State<void>::~State(v25);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v18))
  {
    v7 = (const void *)*((_QWORD *)this + 59);
    v8 = (unint64_t *)*((_QWORD *)this + 60);
    v20 = this;
    v21 = v7;
    v22 = v8;
    if (v8)
    {
      v9 = v8 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    vp::vx::Voice_Processor::get_configuration_context(this, (uint64_t)v19);
    v21 = 0;
    v22 = 0;
    v11 = (CFTypeRef *)operator new(0x20uLL);
    *v11 = &off_1E69B97C8;
    v11[1] = this;
    v11[2] = v7;
    v11[3] = v8;
    v28 = v11;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v26, (uint64_t)v25);
    vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v25);
    vp::vx::data_flow::State<void>::~State(v25);
    v12 = v28;
    if (v28 == &v26)
    {
      v13 = 4;
      v12 = &v26;
    }
    else
    {
      if (!v28)
      {
LABEL_12:
        vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v18, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        v14 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
        v15 = cf;
        if (cf)
          CFRetain(cf);
        v26 = v15;
        v27 = v14;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, &v26, (uint64_t)&v26);
        if (v26)
          CFRelease(v26);
        goto LABEL_16;
      }
      v13 = 5;
    }
    (*((void (**)(void))*v12 + v13))();
    goto LABEL_12;
  }
LABEL_16:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v18);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if (cf)
    CFRelease(cf);
}

void sub_1B601ABC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B601AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B601B1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B601B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  if (a2)
  {
    operator delete(v33);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B601B994()
{
  JUMPOUT(0x1B601B98CLL);
}

void vp::vx::Voice_Processor::get_fft_block_size(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[28];
  int id;
  int v29;
  int v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    vp::vx::data_flow::State<void>::State((uint64_t)a3);
    return;
  }
  v13 = *(_QWORD *)(a1 + 560);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v14, *(const void **)(a1 + 496), *(_QWORD *)(a1 + 504), (uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 2);
  vp::vx::Voice_Processor::get_configuration_options(a1, 1, (uint64_t)v12);
  vp::vx::Voice_Processor::get_sample_rate(a1, 1, (uint64_t)v11);
  vp::vx::Voice_Processor::get_block_size(a1, 1, (uint64_t)v10);
  v18 = v13;
  __p = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
  v23 = v18;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v24, __p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 2);
  v32 = 0;
  v5 = operator new(0x28uLL);
  v7 = v23;
  v6 = v24;
  *v5 = &off_1E69B99E0;
  v5[1] = v7;
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 2, v6, (uint64_t)v25, (v25 - (_BYTE *)v6) >> 2);
  v32 = v5;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
  v29 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v11);
  v30 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v10);
  vp::vx::data_flow::State_Manager::create_state(a1 + 64, (uint64_t)v31, (uint64_t)v27);
  vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v27);
  vp::vx::data_flow::State<void>::~State(v27);
  v8 = v32;
  if (v32 == v31)
  {
    v9 = 4;
    v8 = v31;
    goto LABEL_7;
  }
  if (v32)
  {
    v9 = 5;
LABEL_7:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  vp::vx::data_flow::State<void>::State((uint64_t)a3, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
}

void sub_1B601BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  if (a2)
  {
    operator delete(v21);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B601C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  std::recursive_mutex *v26;
  uint64_t v27;

  vp::vx::data_flow::State<void>::~State((uint64_t)&a20);
  vp::vx::data_flow::State<void>::~State(v27 - 152);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a23);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a26);
  std::recursive_mutex::unlock(v26);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a14);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::get_block_size_is_fixed(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  CFTypeRef *v7;
  CFTypeRef cf;
  _BYTE v9[24];
  _BYTE v10[24];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v6 = "voice mix";
  else
    v6 = off_1E69BE538[a2 - 1];
  applesauce::CF::make_StringRef(CFSTR("downlink %s DSP block size is fixed"), (applesauce::CF::StringRef *)&cf, v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v9);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 184));
  v7 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)(a1 + 128), &cf);
  if (v7)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::data_flow::State_Manager *)(a1 + 64), *((_DWORD *)v7 + 6), (uint64_t)v10);
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v10);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v9, (uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State(v10);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v9))
    __asm { BR              X10 }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v9);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 184));
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B601C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  std::recursive_mutex *v26;

  if (a2)
  {
    vp::vx::data_flow::State<void>::~State((uint64_t)&a20);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a23);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a26);
    std::recursive_mutex::unlock(v26);
    vp::vx::data_flow::State<void>::~State((uint64_t)&a14);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_downlink_software_volume_pre_gain_dB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  int id;
  int v21;
  uint64_t (**v22)();
  int v23;
  CFTypeRef *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("downlink software volume pre-gain (dB)", 0x26uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    vp::vx::Voice_Processor::get_downlink_configuration(this, (uint64_t)v17);
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v22, v7, 60);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(&v22);
    v22 = &off_1E69B9C68;
    LOBYTE(v23) = 0;
    v24 = (CFTypeRef *)&v22;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    v9 = (uint64_t (***)())v24;
    if (v24 == (CFTypeRef *)&v22)
    {
      v10 = 4;
      v9 = &v22;
    }
    else
    {
      if (!v24)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)v14);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v22 = v12;
        v23 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v22, (uint64_t)&v22);
        if (v22)
          CFRelease(v22);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf)
    CFRelease(cf);
}

void sub_1B601C81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_mode(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("spatial mode", 0xCuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 76);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9CB0;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601CAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_head_tracking_mode(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  int id;
  int v20;
  uint64_t (**v21)();
  int v22;
  CFTypeRef *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("spatial head-tracking mode", 0x1AuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v21, v7, 55);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v7 + 16))(&v21, v7, 76);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v21);
    vp::vx::data_flow::State<void>::~State(&v21);
    v21 = &off_1E69B9CF8;
    LOBYTE(v22) = 0;
    v23 = (CFTypeRef *)&v21;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    v20 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v21, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v23;
    if (v23 == (CFTypeRef *)&v21)
    {
      v10 = 4;
      v9 = &v21;
    }
    else
    {
      if (!v23)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v21, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v21);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v21 = v12;
        v22 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v21, (uint64_t)&v21);
        if (v21)
          CFRelease(v21);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601CD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("spatial head-tracking enabled", 0x1DuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 76);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9D40;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("other audio advanced ducking enabled", 0x24uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 87);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9D88;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601D280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_other_audio_advanced_ducking_level(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  uint64_t (**v12)();
  CFTypeRef cf;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[28];
  int id;
  _BYTE v18[24];
  uint64_t (**v19)();
  int v20;
  CFTypeRef *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("other audio advanced ducking level", 0x22uLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v14);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(v18);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v14))
  {
    v8 = *((_QWORD *)this + 1);
    v7 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(v8 + 16))(&v19, v7, 87);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)&v19);
    vp::vx::data_flow::State<void>::~State(&v19);
    v19 = &off_1E69B9DD0;
    LOBYTE(v20) = 0;
    v21 = (CFTypeRef *)&v19;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v7 + 56), (uint64_t)&v19, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State(v18);
    v9 = (uint64_t (***)())v21;
    if (v21 == (CFTypeRef *)&v19)
    {
      v10 = 4;
      v9 = &v19;
    }
    else
    {
      if (!v21)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v19, (uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v14, (uint64_t)&v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v19);
        v11 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
        v12 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v19 = v12;
        v20 = v11;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v19, (uint64_t)&v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v14);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if (cf)
    CFRelease(cf);
}

void sub_1B601D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  CFTypeRef *v5;
  void *v6;
  char v7;
  __int16 v8;
  void *v9;
  char v10;
  CFTypeRef v11;
  char v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  CFTypeRef v23;
  uint64_t v24;
  char *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  __int16 v30;
  CFTypeRef v31;
  int v32;
  std::recursive_mutex *v33;
  CFTypeRef v34;
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  CFTypeRef v38;
  CFTypeRef v39;
  __int16 v40;
  void *v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  __int16 v47;
  void *__p;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  CFTypeRef cf;
  char v53;
  uint64_t v54;
  _BYTE v55[28];
  int id;
  _BYTE v57[24];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("enable graph audio recorders", 0x1CuLL, (CFStringRef *)&v34);
  vp::vx::data_flow::State<void>::State((uint64_t)v36);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &v34);
  if (v5)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v5 + 6), (uint64_t)v62);
    vp::vx::data_flow::State<void>::State((uint64_t)&v38, (uint64_t)v62);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v36, (uint64_t)&v38);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v38);
    vp::vx::data_flow::State<void>::~State(v62);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v36))
  {
    v24 = a2;
    v25 = (char *)this + 128;
    v33 = (std::recursive_mutex *)((char *)this + 184);
    vp::Context::Context((uint64_t)&v38, (uint64_t)this + 264);
    LODWORD(v54) = *((_DWORD *)this + 122);
    BYTE4(v54) = *((_BYTE *)this + 492);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 24))(v62, (char *)this + 8, 1);
    vp::vx::data_flow::State<void>::State((uint64_t)v37, (uint64_t)v62);
    vp::vx::data_flow::State<void>::~State(v62);
    v32 = (int)v38;
    v31 = v39;
    v30 = v40;
    v29 = v41;
    v61[0] = v42;
    *(_QWORD *)((char *)v61 + 7) = *(_QWORD *)((char *)&v42 + 7);
    v28 = HIBYTE(v42);
    v39 = 0;
    v41 = 0;
    v42 = 0uLL;
    v27 = v43;
    v60[0] = v44;
    *(_QWORD *)((char *)v60 + 7) = *(_QWORD *)((char *)&v44 + 7);
    v26 = HIBYTE(v44);
    v43 = 0;
    v44 = 0uLL;
    v6 = v45;
    v59[0] = v46;
    *(_QWORD *)((char *)v59 + 7) = *(_QWORD *)((char *)&v46 + 7);
    v7 = HIBYTE(v46);
    v45 = 0;
    v46 = 0uLL;
    v8 = v47;
    v9 = __p;
    v58[0] = v49;
    *(_QWORD *)((char *)v58 + 7) = *(_QWORD *)((char *)&v49 + 7);
    v10 = HIBYTE(v49);
    __p = 0;
    v49 = 0uLL;
    v11 = cf;
    cf = 0;
    v12 = v53;
    v13 = v54;
    v14 = (char *)operator new(0xD0uLL);
    *(_OWORD *)(v14 + 161) = *(_OWORD *)((char *)v51 + 9);
    v15 = v50;
    *(_OWORD *)(v14 + 152) = v51[0];
    *(_QWORD *)v14 = &off_1E69B9F10;
    *((_DWORD *)v14 + 2) = v32;
    *((_QWORD *)v14 + 2) = v31;
    *((_WORD *)v14 + 12) = v30;
    v16 = v61[0];
    *((_QWORD *)v14 + 4) = v29;
    *((_QWORD *)v14 + 5) = v16;
    *(_QWORD *)(v14 + 47) = *(_QWORD *)((char *)v61 + 7);
    v14[55] = v28;
    v17 = v60[0];
    *((_QWORD *)v14 + 7) = v27;
    *((_QWORD *)v14 + 8) = v17;
    *(_QWORD *)(v14 + 71) = *(_QWORD *)((char *)v60 + 7);
    v14[79] = v26;
    v18 = v59[0];
    *(_QWORD *)(v14 + 95) = *(_QWORD *)((char *)v59 + 7);
    *((_QWORD *)v14 + 10) = v6;
    *((_QWORD *)v14 + 11) = v18;
    v14[103] = v7;
    *((_WORD *)v14 + 52) = v8;
    *(_QWORD *)(v14 + 127) = *(_QWORD *)((char *)v58 + 7);
    v19 = v58[0];
    *((_QWORD *)v14 + 14) = v9;
    *((_QWORD *)v14 + 15) = v19;
    v14[135] = v10;
    *(_OWORD *)(v14 + 136) = v15;
    *((_QWORD *)v14 + 23) = v11;
    v14[192] = v12;
    *((_QWORD *)v14 + 25) = v13;
    v63 = v14;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v37);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v62, (uint64_t)v57);
    vp::vx::data_flow::State<void>::State((uint64_t)v55, (uint64_t)v57);
    vp::vx::data_flow::State<void>::~State(v57);
    v20 = v63;
    if (v63 == v62)
    {
      v21 = 4;
      v20 = v62;
    }
    else
    {
      if (!v63)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)v35, (uint64_t)v55);
        vp::vx::data_flow::State<void>::~State((uint64_t)v55);
        vp::vx::data_flow::State<void>::~State((uint64_t)v37);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v49) < 0)
          operator delete(__p);
        if (SHIBYTE(v46) < 0)
          operator delete(v45);
        if (SHIBYTE(v44) < 0)
          operator delete(v43);
        if (SHIBYTE(v42) < 0)
          operator delete(v41);
        if (v39)
          CFRelease(v39);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v36, (uint64_t)v35);
        vp::vx::data_flow::State<void>::~State((uint64_t)v35);
        v22 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v36);
        v23 = v34;
        if (v34)
          CFRetain(v34);
        v38 = v23;
        LODWORD(v39) = v22;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v25, &v38, (uint64_t)&v38);
        v4 = v33;
        a2 = v24;
        if (v38)
          CFRelease(v38);
        goto LABEL_25;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
    goto LABEL_9;
  }
LABEL_25:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v36);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  if (v34)
    CFRelease(v34);
}

void sub_1B601D984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::recursive_mutex *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_connect_to_AUPB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  int v12;
  uint64_t (**v13)();
  CFTypeRef cf;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  int id;
  int v21;
  uint64_t (**v22)();
  int v23;
  CFTypeRef *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("connect to AUPB", 0xFuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    v7 = *((_BYTE *)this + 360);
    v9 = *((_QWORD *)this + 1);
    v8 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, _QWORD))(v9 + 24))(&v22, v8, 0);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(&v22);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v8 + 24))(&v22, v8, 6);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(&v22);
    v22 = &off_1E69B9F58;
    LOBYTE(v23) = v7;
    v24 = (CFTypeRef *)&v22;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v8 + 56), (uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    v10 = (uint64_t (***)())v24;
    if (v24 == (CFTypeRef *)&v22)
    {
      v11 = 4;
      v10 = &v22;
    }
    else
    {
      if (!v24)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
        v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
        v13 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v22 = v13;
        v23 = v12;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v22, (uint64_t)&v22);
        if (v22)
          CFRelease(v22);
        goto LABEL_13;
      }
      v11 = 5;
    }
    (*v10)[v11]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf)
    CFRelease(cf);
}

void sub_1B601DC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::get_should_connect_to_RPB(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  CFTypeRef *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  int v12;
  uint64_t (**v13)();
  CFTypeRef cf;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  int id;
  int v21;
  uint64_t (**v22)();
  int v23;
  CFTypeRef *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  applesauce::CF::operator"" _cf("connect to RPB", 0xEuLL, (CFStringRef *)&cf);
  vp::vx::data_flow::State<void>::State((uint64_t)v15);
  v4 = (std::recursive_mutex *)((char *)this + 184);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 184));
  v5 = (char *)this + 128;
  v6 = std::__hash_table<applesauce::CF::StringRef,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,vp::Allocator<applesauce::CF::StringRef>>::find<applesauce::CF::StringRef>((_QWORD *)this + 16, &cf);
  if (v6)
  {
    vp::vx::data_flow::State_Manager::find_state((vp::vx::Voice_Processor *)((char *)this + 64), *((_DWORD *)v6 + 6), (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(v19);
  }
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v15))
  {
    v7 = *((_BYTE *)this + 360);
    v9 = *((_QWORD *)this + 1);
    v8 = (char *)this + 8;
    (*(void (**)(uint64_t (***__return_ptr)(), char *, _QWORD))(v9 + 24))(&v22, v8, 0);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(&v22);
    (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v8 + 24))(&v22, v8, 7);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)&v22);
    vp::vx::data_flow::State<void>::~State(&v22);
    v22 = &off_1E69B9FA0;
    LOBYTE(v23) = v7;
    v24 = (CFTypeRef *)&v22;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
    v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v16);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v8 + 56), (uint64_t)&v22, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    v10 = (uint64_t (***)())v24;
    if (v24 == (CFTypeRef *)&v22)
    {
      v11 = 4;
      v10 = &v22;
    }
    else
    {
      if (!v24)
      {
LABEL_9:
        vp::vx::data_flow::State<void>::State((uint64_t)&v22, (uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v16);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::operator=((uint64_t)v15, (uint64_t)&v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)&v22);
        v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
        v13 = (uint64_t (**)())cf;
        if (cf)
          CFRetain(cf);
        v22 = v13;
        v23 = v12;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>((unint64_t)v5, (CFTypeRef *)&v22, (uint64_t)&v22);
        if (v22)
          CFRelease(v22);
        goto LABEL_13;
      }
      v11 = 5;
    }
    (*v10)[v11]();
    goto LABEL_9;
  }
LABEL_13:
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  std::recursive_mutex::unlock(v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (cf)
    CFRelease(cf);
}

void sub_1B601DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_mic_trim_gains_dsp_property_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __n128 *v15;
  __int128 v16;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  void *__p[2];
  uint64_t v22;
  unsigned __int8 v23;
  _BYTE v24[24];
  CFTypeRef cf;
  void *v26[3];
  char v27;
  const void *v28[3];
  const void *v29[3];
  int id;
  int v31;
  int v32;
  int v33;
  __n128 v34;
  __n128 *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26[0]) = 0;
  v27 = 0;
  vp::Service_Provider::get<vp::services::Mobile_Gestalt,(decltype(nullptr))0>(*((_QWORD **)this + 57), __p);
  if (__p[0])
  {
    cf = 0;
    (*(void (**)(const void **__return_ptr, void *, _QWORD, CFTypeRef *))(*(_QWORD *)__p[0] + 16))(v29, __p[0], 0, &cf);
    if (cf)
      CFRelease(cf);
    if (v29[0])
    {
      applesauce::CF::TypeRef::operator applesauce::CF::DataRef(v29, (applesauce::CF::DataRef *)v28);
      vp::vx::trim_gains_parse_v1(v28, (uint64_t)&v34);
      std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<float>,false>>((uint64_t)v26, &v34);
      if ((_BYTE)v35 && v34.n128_u64[0])
      {
        v34.n128_u64[1] = v34.n128_u64[0];
        operator delete((void *)v34.n128_u64[0]);
      }
      if (v28[0])
        CFRelease(v28[0]);
      if (v29[0])
        CFRelease(v29[0]);
    }
  }
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v6 = (unint64_t *)((char *)__p[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, (uint64_t)v26);
  v9 = *((_QWORD *)this + 1);
  v8 = (char *)this + 8;
  (*(void (**)(__n128 *__return_ptr, char *, uint64_t))(v9 + 16))(&v34, v8, 10);
  vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)&v34);
  vp::vx::data_flow::State<void>::~State(&v34);
  (*(void (**)(__n128 *__return_ptr, char *, uint64_t))(*(_QWORD *)v8 + 16))(&v34, v8, 8);
  vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)&v34);
  vp::vx::data_flow::State<void>::~State(&v34);
  (*(void (**)(__n128 *__return_ptr, char *, uint64_t))(*(_QWORD *)v8 + 16))(&v34, v8, 20);
  vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)&v34);
  vp::vx::data_flow::State<void>::~State(&v34);
  (*(void (**)(__n128 *__return_ptr, char *, uint64_t))(*(_QWORD *)v8 + 16))(&v34, v8, 21);
  vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)&v34);
  vp::vx::data_flow::State<void>::~State(&v34);
  v10 = v23;
  if (v23)
  {
    v16 = *(_OWORD *)__p;
    v2 = v22;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
  }
  else
  {
    v16 = 0u;
  }
  v11 = (char *)operator new(0x28uLL);
  *(_QWORD *)v11 = &off_1E69BA108;
  v12 = (uint64_t)(v8 + 56);
  v11[8] = 0;
  v11[32] = 0;
  if (v10)
  {
    v13 = 0;
    *(_OWORD *)(v11 + 8) = v16;
    *((_QWORD *)v11 + 3) = v2;
    v11[32] = 1;
  }
  else
  {
    v13 = (void *)v16;
  }
  v35 = (__n128 *)v11;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v20);
  v31 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
  v32 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v18);
  v33 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v17);
  v14 = 4;
  vp::vx::data_flow::State_Manager::create_state(v12, (uint64_t)&v34, (uint64_t)v29);
  vp::vx::data_flow::State<void>::State((uint64_t)v28, (uint64_t)v29);
  vp::vx::data_flow::State<void>::~State(v29);
  v15 = v35;
  if (v35 == &v34)
  {
    v15 = &v34;
    goto LABEL_27;
  }
  if (v35)
  {
    v14 = 5;
LABEL_27:
    (*(void (**)(void))(v15->n128_u64[0] + 8 * v14))();
  }
  if (v10 && v13)
    operator delete(v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v28);
  vp::vx::data_flow::State<void>::~State((uint64_t)v28);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if (v23 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }
}

void sub_1B601E314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Mobile_Gestalt,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1835496308u>::k_service_type_id, v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

applesauce::CF::DataRef *applesauce::CF::TypeRef::operator applesauce::CF::DataRef@<X0>(const void **a1@<X0>, applesauce::CF::DataRef *a2@<X8>)
{
  const void *v4;
  CFTypeID v5;
  const void *v6;
  std::runtime_error *exception;

  v4 = *a1;
  if (v4)
  {
    v5 = CFGetTypeID(v4);
    if (v5 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
    }
    v6 = *a1;
    if (v6)
      CFRetain(v6);
  }
  else
  {
    v6 = 0;
  }
  return applesauce::CF::DataRef::DataRef(a2, v6);
}

void sub_1B601E4B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_ref_port_sensitivity_parameter_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE v17[24];
  CFTypeRef cf[3];
  int id;
  int v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((_QWORD **)this + 57), &v15);
  v4 = v15;
  if (v15)
  {
    v5 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v21, (char *)this + 8, 36);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v21, (char *)this + 8, 26);
    vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    v21[0] = &off_1E69BA150;
    v21[1] = v4;
    v21[2] = v5;
    v22 = v21;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    v20 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v21, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    v8 = v22;
    if (v22 == v21)
    {
      v9 = 4;
      v8 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_10:
        vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v17);
        vp::vx::data_flow::State<void>::~State((uint64_t)v17);
        vp::vx::data_flow::State<void>::State(a2, (uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v13);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        goto LABEL_11;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_10;
  }
LABEL_11:
  v10 = v16;
  if (!v16)
    goto LABEL_15;
  v11 = (unint64_t *)&v16->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v4)
      return;
  }
  else
  {
LABEL_15:
    if (v4)
      return;
  }
  cf[0] = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v21);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v21);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  if (cf[0])
    CFRelease(cf[0]);
}

void sub_1B601E6F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1634236275u>::k_service_type_id, v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void vp::vx::Voice_Processor::create_ref_port_volume_limit_curve_dsp_property_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  CFTypeRef cf[3];
  int id;
  int v21;
  int v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 66))
  {
LABEL_2:
    cf[0] = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v23);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    if (cf[0])
      CFRelease(cf[0]);
    return;
  }
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((_QWORD **)this + 57), &v16);
  v4 = v16;
  if (v16)
  {
    v5 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 25);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 36);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 26);
    vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    v23[0] = &off_1E69BA198;
    v23[1] = v4;
    v23[2] = v5;
    v24 = v23;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    v22 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v23, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    v8 = v24;
    if (v24 == v23)
    {
      v9 = 4;
      v8 = v23;
    }
    else
    {
      if (!v24)
      {
LABEL_13:
        vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::State(a2, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v13);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        goto LABEL_14;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_13;
  }
LABEL_14:
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v4)
    goto LABEL_2;
}

void sub_1B601EAC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::create_speaker_iv_data_source_ids_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];
  int id;
  int v12;
  uint64_t (**v13)();
  char v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 8;
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v13, (char *)this + 8, 25);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State(&v13);
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v3 + 16))(&v13, v3, 64);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State(&v13);
  v13 = &off_1E69BA1E0;
  v14 = 0;
  v15 = &v13;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
  v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)(v3 + 56), (uint64_t)&v13, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v15;
  if (v15 == &v13)
  {
    v5 = 4;
    v4 = &v13;
    goto LABEL_5;
  }
  if (v15)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v13, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::create_speaker_calibration_data_cf_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];
  int id;
  int v12;
  uint64_t (**v13)();
  char v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 8;
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v13, (char *)this + 8, 25);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State(&v13);
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*(_QWORD *)v3 + 16))(&v13, v3, 65);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State(&v13);
  v13 = &off_1E69BA228;
  v14 = 0;
  v15 = &v13;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v8);
  v12 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)(v3 + 56), (uint64_t)&v13, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v15;
  if (v15 == &v13)
  {
    v5 = 4;
    v4 = &v13;
    goto LABEL_5;
  }
  if (v15)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v13, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void vp::vx::Voice_Processor::create_camera_noise_mitigation_is_required_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14[3];
  _BYTE v15[24];
  uint64_t v16;
  std::__shared_weak_count *v17;
  CFTypeRef cf;
  _BYTE v19[24];
  uint64_t v20;
  std::__shared_weak_count *v21;
  _BYTE v22[28];
  int id;
  _BYTE v24[24];
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  vp::Service_Provider::get<vp::services::Core_Media,(decltype(nullptr))0>(*((_QWORD **)this + 57), &v16);
  if (!v16 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
  {
    v10 = 1;
    goto LABEL_17;
  }
  v4 = v16;
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(v14, v4);
  v20 = v4;
  v21 = v5;
  cf = v14[0];
  memset(v14, 0, sizeof(v14));
  vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification((uint64_t *)this + 2, &cf, (uint64_t)v19);
  v20 = 0;
  v21 = 0;
  v25[0] = &off_1E69BA270;
  v25[1] = v4;
  v25[2] = v5;
  v26 = v25;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v19);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v25, (uint64_t)v24);
  vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State(v24);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
    goto LABEL_11;
  }
  if (v26)
  {
    v9 = 5;
LABEL_11:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  if (cf)
    CFRelease(cf);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  if (v14[0])
    CFRelease(v14[0]);
  v10 = 0;
LABEL_17:
  v11 = v17;
  if (!v17)
    goto LABEL_21;
  v12 = (unint64_t *)&v17->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      return;
  }
  else
  {
LABEL_21:
    if (!v10)
      return;
  }
  v24[0] = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)this + 16), v24, (uint64_t)v25);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v25);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
}

void sub_1B601F088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Core_Media,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"smrc", v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

void vp::vx::Voice_Processor::create_personal_audio_HLC_product_id_parameter_override_state(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  CFTypeRef cf[3];
  int id;
  int v21;
  int v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 66))
  {
LABEL_2:
    cf[0] = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::NumberRef>((vp::vx::Voice_Processor *)((char *)this + 16), cf, (uint64_t)v23);
    vp::vx::data_flow::State<void>::State(a2, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State((uint64_t)v23);
    if (cf[0])
      CFRelease(cf[0]);
    return;
  }
  vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*((_QWORD **)this + 57), &v16);
  v4 = v16;
  if (v16)
  {
    v5 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 25);
    vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 36);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(*((_QWORD *)this + 1) + 16))(v23, (char *)this + 8, 26);
    vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v23);
    vp::vx::data_flow::State<void>::~State(v23);
    v23[0] = &off_1E69BA3E8;
    v23[1] = v4;
    v23[2] = v5;
    v24 = v23;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v15);
    v21 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v14);
    v22 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v13);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)v23, (uint64_t)cf);
    vp::vx::data_flow::State<void>::State((uint64_t)v18, (uint64_t)cf);
    vp::vx::data_flow::State<void>::~State(cf);
    v8 = v24;
    if (v24 == v23)
    {
      v9 = 4;
      v8 = v23;
    }
    else
    {
      if (!v24)
      {
LABEL_13:
        vp::vx::data_flow::State<void>::State((uint64_t)v23, (uint64_t)v18);
        vp::vx::data_flow::State<void>::~State((uint64_t)v18);
        vp::vx::data_flow::State<void>::State(a2, (uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v23);
        vp::vx::data_flow::State<void>::~State((uint64_t)v13);
        vp::vx::data_flow::State<void>::~State((uint64_t)v14);
        vp::vx::data_flow::State<void>::~State((uint64_t)v15);
        goto LABEL_14;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_13;
  }
LABEL_14:
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v4)
    goto LABEL_2;
}

void sub_1B601F3F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor::create_metric_reporter_ids_dsp_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[28];
  int id;
  _BYTE v10[24];
  uint64_t (**v11)();
  char v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 8;
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v11, (char *)this + 8, 69);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State(&v11);
  v11 = &off_1E69BA430;
  v12 = 0;
  v13 = &v11;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)(v3 + 56), (uint64_t)&v11, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v11, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::create_hardware_mix_output_channel_layout_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[28];
  int id;
  _BYTE v10[24];
  uint64_t (**v11)();
  char v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 8;
  (*(void (**)(uint64_t (***__return_ptr)(), char *, uint64_t))(*((_QWORD *)this + 1) + 16))(&v11, (char *)this + 8, 53);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State(&v11);
  v11 = &off_1E69BA478;
  v12 = 0;
  v13 = &v11;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)(v3 + 56), (uint64_t)&v11, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v11, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::create_spatial_head_tracking_mode_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[28];
  int id;
  _BYTE v10[24];
  uint64_t (**v11)();
  char v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  vp::vx::Voice_Processor::get_spatial_head_tracking_mode(this, (uint64_t)v7);
  v11 = &off_1E69BA4C0;
  v12 = 0;
  v13 = &v11;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v11, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v11, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::create_spatial_head_tracking_enabled_property_override_state@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[28];
  int id;
  _BYTE v10[24];
  uint64_t (**v11)();
  char v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  vp::vx::Voice_Processor::get_spatial_head_tracking_enabled(this, (uint64_t)v7);
  v11 = &off_1E69BA508;
  v12 = 0;
  v13 = &v11;
  id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v7);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)this + 64, (uint64_t)&v11, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    (*v4)[v5]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v11, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)&v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void vp::vx::Voice_Processor::create_port_factory(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v12 = a2;
  v6 = *((_QWORD *)a1 + 74);
  vp::vx::Voice_Processor::make_weak_state_observer(a1, &v10);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v14, v6, a2, &v10);
  v7 = v14[0];
  *a3 = v14[0];
  if (v7)
  {
    v8 = (_QWORD *)operator new();
    v9 = v14[0];
    *v8 = &off_1E69BE228;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  a3[1] = (uint64_t)v8;
  v14[0] = 0;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v13 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>((_QWORD *)a1 + 240, &v13, &v12, a3, (uint64_t)v14);
}

void sub_1B601F970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *vp::vx::Voice_Processor::create_wire_factory@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v6 = a1[75];
  vp::vx::Voice_Processor::make_weak_state_observer((vp::vx::Voice_Processor *)a1, &v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(&v19, v6, a2, &v17);
  v7 = v19;
  *a3 = v19;
  if (v7)
  {
    v8 = (_QWORD *)operator new();
    v9 = v19;
    *v8 = &off_1E69BE260;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  a3[1] = (uint64_t)v8;
  v19 = 0;
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if ((_DWORD)a2)
    vp::vx::Voice_Processor::get_downlink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v16);
  else
    vp::vx::Voice_Processor::get_uplink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v16);
  vp::vx::IO_Wire_Factory::set_sample_rate_conversion_algorithm(v7, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  v10 = *a3;
  if ((_DWORD)a2)
    vp::vx::Voice_Processor::get_downlink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v15);
  else
    vp::vx::Voice_Processor::get_uplink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v15);
  vp::vx::IO_Wire_Factory::set_sample_rate_conversion_quality(v10, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  v11 = *a3;
  if ((_DWORD)a2)
    vp::vx::Voice_Processor::get_downlink_wire_storage_capacity((vp::vx::Voice_Processor *)a1, (uint64_t)v14);
  else
    vp::vx::Voice_Processor::get_uplink_wire_storage_capacity((vp::vx::Voice_Processor *)a1, (uint64_t)v14);
  vp::vx::IO_Wire_Factory::set_storage_capacity(v11, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  if ((_DWORD)a2)
    v12 = a1 + 294;
  else
    v12 = a1 + 292;
  return std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100](v12, a3);
}

void sub_1B601FB1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v3 = *(_QWORD *)(v1 - 40);
  *(_QWORD *)(v1 - 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *(std::__shared_weak_count **)(v1 - 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

_QWORD *vp::vx::Voice_Processor::create_mic_ref_sync_node_factory@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 73);
  vp::vx::Voice_Processor::make_weak_state_observer(this, &v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(&v11, v4, &v9);
  v5 = v11;
  *a2 = v11;
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    v7 = v11;
    *v6 = &off_1E69BE298;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
  }
  else
  {
    v6 = 0;
  }
  a2[1] = (uint64_t)v6;
  v11 = 0;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  return std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)this + 302, a2);
}

_QWORD *vp::vx::Voice_Processor::create_far_end_voice_proc_node_factory@<X0>(vp::vx::Voice_Processor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 72);
  vp::vx::Voice_Processor::make_weak_state_observer(this, &v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(&v11, v4, &v9);
  v5 = v11;
  *a2 = v11;
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    v7 = v11;
    *v6 = &off_1E69BE2D0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
  }
  else
  {
    v6 = 0;
  }
  a2[1] = (uint64_t)v6;
  v11 = 0;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  return std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)this + 315, a2);
}

uint64_t vp::vx::Voice_Processor::find_property_state@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];
  _BYTE v9[32];

  vp::vx::data_flow::State<void>::State((uint64_t)v8);
  vp::vx::Property_Manager::get_property_state(a1 + 968, a2, (uint64_t)v9);
  v6 = caulk::expected<vp::vx::data_flow::State<void>,vp::vx::Error_Code>::value((uint64_t)v9);
  vp::vx::data_flow::State<void>::operator=((uint64_t)v8, v6);
  if (v9[24])
    vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::State<void>::State(a3, v8);
  return vp::vx::data_flow::State<void>::~State(v8);
}

void sub_1B601FD50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    vp::vx::data_flow::State<void>::~State(&a13);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B601FD28);
}

uint64_t `non-virtual thunk to'vp::vx::Voice_Processor::find_property_state@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return vp::vx::Voice_Processor::find_property_state(a1 - 8, a2, a3);
}

uint64_t vp::vx::Voice_Processor::find_user_defaults_state@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v5;
  _BYTE v7[28];
  int v8;

  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7);
  v5 = boost::container::flat_map<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::at(a1 + 856, &v8);
  vp::vx::data_flow::State<void>::operator=((uint64_t)v7, (uint64_t)v5);
  vp::vx::data_flow::State<void>::State(a3, v7);
  return vp::vx::data_flow::State<void>::~State(v7);
}

void sub_1B601FDE8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B601FDC4);
}

uint64_t `non-virtual thunk to'vp::vx::Voice_Processor::find_user_defaults_state@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return vp::vx::Voice_Processor::find_user_defaults_state(a1 - 8, a2, a3);
}

void vp::vx::Voice_Processor::observe_global_state_change(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string v6;
  char v7;
  std::string __p;
  char v9;

  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, a3);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 184))(a1, a2, &__p);
  if (v9 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v6, a3);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 192))(a1, a2, &v6);
  if (v7)
  {
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void `non-virtual thunk to'vp::vx::Voice_Processor::observe_global_state_change(uint64_t a1, uint64_t a2, __int128 *a3)
{
  vp::vx::Voice_Processor::observe_global_state_change(a1 - 248, a2, a3);
}

double vp::vx::Voice_Processor::observe_uplink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  _QWORD *v4;
  double result;
  unsigned int v6;
  unsigned int *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 888, &v6, (uint64_t)&std::piecewise_construct, &v7);
  *(_QWORD *)&result = std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v4 + 3), a3).n128_u64[0];
  return result;
}

double `non-virtual thunk to'vp::vx::Voice_Processor::observe_uplink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  return vp::vx::Voice_Processor::observe_uplink_state_change(a1 - 248, a2, a3);
}

double vp::vx::Voice_Processor::observe_downlink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  _QWORD *v4;
  double result;
  unsigned int v6;
  unsigned int *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 928, &v6, (uint64_t)&std::piecewise_construct, &v7);
  *(_QWORD *)&result = std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v4 + 3), a3).n128_u64[0];
  return result;
}

double `non-virtual thunk to'vp::vx::Voice_Processor::observe_downlink_state_change(uint64_t a1, unsigned int a2, __n128 *a3)
{
  return vp::vx::Voice_Processor::observe_downlink_state_change(a1 - 248, a2, a3);
}

void vp::vx::Voice_Processor::get_dsp_node_parameter_override(vp::vx::Voice_Processor *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int v24;
  _QWORD v25[4];
  uint64_t *v26;

  v21 = a2;
  if (a3 == 1885433961)
  {
    vp::vx::Voice_Processor::create_personal_audio_HLC_product_id_parameter_override_state(a1, (uint64_t)v25);
    goto LABEL_5;
  }
  if (a3 == 1684829029)
  {
    vp::vx::Voice_Processor::create_ref_port_sensitivity_parameter_override_state(a1, (uint64_t)v25);
LABEL_5:
    vp::vx::data_flow::State<void>::State(a4, (uint64_t)v25);
    *(_DWORD *)(a4 + 24) = 1;
    vp::vx::data_flow::State<void>::~State((uint64_t)v25);
    return;
  }
  v6 = (uint64_t *)*((_QWORD *)a1 + 65);
  v7 = (uint64_t *)*((_QWORD *)a1 + 66);
  if (v6 == v7)
  {
LABEL_36:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  else
  {
    while (1)
    {
      v8 = *v6;
      v9 = (std::__shared_weak_count *)v6[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v20 = 0;
        v23 = v9;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      else
      {
        v20 = 0;
        v23 = 0;
      }
      v22 = v8;
      v24 = a3;
      if (HIDWORD(v21) == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v26 = &v22;
      ((void (*)(_QWORD *__return_ptr, uint64_t **, uint64_t *))off_1E69BA540[HIDWORD(v21)])(v25, &v26, &v21);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, (uint64_t)v25);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v25);
      v13 = v23;
      if (v23)
      {
        v14 = (unint64_t *)&v23->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v20)
      {
        if (v20 == 2)
        {
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)v19);
          v16 = 1;
          *(_DWORD *)(a4 + 24) = 1;
        }
        else if (v20 == 1)
        {
          std::__variant_detail::__alt<0ul,applesauce::CF::NumberRef>::__alt[abi:ne180100]<applesauce::CF::NumberRef&>((_QWORD *)a4, v19);
          *(_DWORD *)(a4 + 24) = 0;
          v16 = 1;
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v16 = 4;
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
      if (v9)
      {
        v17 = (unint64_t *)&v9->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if ((v16 | 4) != 4)
        break;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_36;
    }
  }
}

void `non-virtual thunk to'vp::vx::Voice_Processor::get_dsp_node_parameter_override(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  vp::vx::Voice_Processor::get_dsp_node_parameter_override((vp::vx::Voice_Processor *)(a1 - 256), a2, a3, a4);
}

void vp::vx::Voice_Processor::get_dsp_node_property_override(vp::vx::Voice_Processor *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v7;
  uint64_t (**v8)();
  int v9;
  const UInt8 *v10;
  CFIndex v11;
  CFTypeRef v12;
  int v13;
  const UInt8 *v14;
  CFIndex v15;
  CFTypeRef **v16;
  CFTypeRef **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error *v32;
  std::runtime_error *exception;
  _QWORD v34[3];
  uint64_t v35;
  int id;
  CFTypeRef v37;
  std::__shared_weak_count *v38;
  int v39;
  CFTypeRef v40;
  CFTypeRef cf;
  int v42;
  CFTypeRef *v43;
  uint64_t v44;
  CFTypeRef **v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v35 = a2;
  if (a3 <= 1936749682)
  {
    if (a3 > 1936225380)
    {
      switch(a3)
      {
        case 1936225381:
          vp::vx::Voice_Processor::create_spatial_head_tracking_enabled_property_override_state(this, (uint64_t)&v43);
          goto LABEL_51;
        case 1936745587:
          vp::vx::Voice_Processor::create_speaker_iv_data_source_ids_dsp_property_override_state(this, (uint64_t)&v43);
          goto LABEL_51;
        case 1936746612:
          vp::vx::Voice_Processor::create_spatial_head_tracking_mode_property_override_state(this, (uint64_t)&v43);
          goto LABEL_51;
      }
    }
    else
    {
      switch(a3)
      {
        case 1685482595:
          vp::vx::Voice_Processor::create_ref_port_volume_limit_curve_dsp_property_override_state(this, (uint64_t)&v43);
          goto LABEL_51;
        case 1751999340:
          vp::vx::Voice_Processor::create_hardware_mix_output_channel_layout_property_override_state(this, (uint64_t)&v43);
          goto LABEL_51;
        case 1919509619:
          vp::vx::Voice_Processor::create_metric_reporter_ids_dsp_property_override_state(this, (uint64_t)&v43);
LABEL_51:
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v43);
          *(_DWORD *)(a4 + 24) = 1;
          v16 = &v43;
LABEL_52:
          vp::vx::data_flow::State<void>::~State((uint64_t)v16);
          return;
      }
    }
    goto LABEL_58;
  }
  if (a3 <= 1953850479)
  {
    if (a3 == 1936749683)
    {
      vp::vx::Voice_Processor::create_speaker_calibration_data_cf_dsp_property_override_state(this, (uint64_t)&v43);
      goto LABEL_51;
    }
    if (a3 != 1953326192)
    {
      if (a3 == 1953654638)
      {
        vp::vx::Voice_Processor::create_mic_trim_gains_dsp_property_override_state(this, (uint64_t)&v43);
        goto LABEL_51;
      }
      goto LABEL_58;
    }
    v13 = *((char *)this + 335);
    if (v13 >= 0)
      v14 = (const UInt8 *)this + 312;
    else
      v14 = (const UInt8 *)*((_QWORD *)this + 39);
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)this + 335);
    else
      v15 = *((_QWORD *)this + 40);
    v37 = CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
    if (!v37)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v40, "Value", &v37);
    v43 = &v40;
    v44 = 1;
    *(_QWORD *)a4 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v43);
    *(_DWORD *)(a4 + 24) = 0;
    if (cf)
      CFRelease(cf);
    if (v40)
      CFRelease(v40);
    v12 = v37;
    if (!v37)
      return;
LABEL_35:
    CFRelease(v12);
    return;
  }
  switch(a3)
  {
    case 1953850480:
      v9 = *((char *)this + 311);
      if (v9 >= 0)
        v10 = (const UInt8 *)this + 288;
      else
        v10 = (const UInt8 *)*((_QWORD *)this + 36);
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)this + 311);
      else
        v11 = *((_QWORD *)this + 37);
      v37 = CFStringCreateWithBytes(0, v10, v11, 0x8000100u, 0);
      if (!v37)
      {
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
      }
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v40, "Value", &v37);
      v43 = &v40;
      v44 = 1;
      *(_QWORD *)a4 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v43);
      *(_DWORD *)(a4 + 24) = 0;
      if (cf)
        CFRelease(cf);
      if (v40)
        CFRelease(v40);
      v12 = v37;
      if (!v37)
        return;
      goto LABEL_35;
    case 1969578611:
      vp::vx::Voice_Processor::get_block_size((uint64_t)this, 1, (uint64_t)v34);
      v7 = (char *)this + 64;
      v8 = &off_1E69BA5D8;
LABEL_55:
      v43 = (CFTypeRef *)v8;
      LOBYTE(v44) = 0;
      v45 = &v43;
      id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v34);
      vp::vx::data_flow::State_Manager::create_state((uint64_t)v7, (uint64_t)&v43, (uint64_t)&v40);
      vp::vx::data_flow::State<void>::State((uint64_t)&v37, (uint64_t)&v40);
      vp::vx::data_flow::State<void>::~State(&v40);
      v17 = v45;
      if (v45 == &v43)
      {
        v18 = 4;
        v17 = &v43;
      }
      else
      {
        if (!v45)
        {
LABEL_91:
          vp::vx::data_flow::State<void>::State((uint64_t)&v43, (uint64_t)&v37);
          vp::vx::data_flow::State<void>::~State((uint64_t)&v37);
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v43);
          *(_DWORD *)(a4 + 24) = 1;
          vp::vx::data_flow::State<void>::~State((uint64_t)&v43);
          v16 = (CFTypeRef **)v34;
          goto LABEL_52;
        }
        v18 = 5;
      }
      ((void (*)(void))(*v17)[v18])();
      goto LABEL_91;
    case 1969582962:
      vp::vx::Voice_Processor::get_sample_rate((uint64_t)this, 1, (uint64_t)v34);
      v7 = (char *)this + 64;
      v8 = &off_1E69BA590;
      goto LABEL_55;
  }
LABEL_58:
  v19 = *((_QWORD *)this + 65);
  v20 = *((_QWORD *)this + 66);
  if (v19 == v20)
  {
LABEL_88:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 0;
  }
  else
  {
    while (1)
    {
      v21 = *(const void **)v19;
      v22 = *(std::__shared_weak_count **)(v19 + 8);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v42 = 0;
        v38 = v22;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      else
      {
        v42 = 0;
        v38 = 0;
      }
      v37 = v21;
      v39 = a3;
      if (HIDWORD(v35) == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v34[0] = &v37;
      ((void (*)(CFTypeRef **__return_ptr, _QWORD *, uint64_t *))off_1E69BA610[HIDWORD(v35)])(&v43, v34, &v35);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v40, (uint64_t)&v43);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v43);
      v26 = v38;
      if (v38)
      {
        v27 = (unint64_t *)&v38->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v42)
      {
        if (v42 == 2)
        {
          vp::vx::data_flow::State<void>::State(a4, (uint64_t)&v40);
          v29 = 1;
          *(_DWORD *)(a4 + 24) = 1;
        }
        else if (v42 == 1)
        {
          std::__variant_detail::__alt<0ul,applesauce::CF::DictionaryRef>::__alt[abi:ne180100]<applesauce::CF::DictionaryRef&>((_QWORD *)a4, &v40);
          *(_DWORD *)(a4 + 24) = 0;
          v29 = 1;
        }
        else
        {
          v29 = 0;
        }
      }
      else
      {
        v29 = 4;
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v40);
      if (v22)
      {
        v30 = (unint64_t *)&v22->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if ((v29 | 4) != 4)
        break;
      v19 += 16;
      if (v19 == v20)
        goto LABEL_88;
    }
  }
}

void sub_1B6020804(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'vp::vx::Voice_Processor::get_dsp_node_property_override(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  vp::vx::Voice_Processor::get_dsp_node_property_override((vp::vx::Voice_Processor *)(a1 - 256), a2, a3, a4);
}

__n128 vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request@<Q0>(std::__fs::filesystem::path *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  std::error_code __ec;
  unsigned __int8 v11;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
    goto LABEL_20;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v6 = *(_QWORD *)(a2 + 632);
  v7 = *(_QWORD *)(a2 + 640);
  if (!v6 && v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (!v7)
  {
LABEL_14:
    std::__fs::filesystem::operator/[abi:ne180100](this, a2 + 288, (std::__fs::filesystem::path *)a3);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, &__ec);
    if (v11)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (v11)
      {
        if (v11 != 255 && !__ec.__val_)
          return result;
      }
    }
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
LABEL_20:
    result = *(__n128 *)&this->__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)a3 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)&this->__pn_.__r_.__value_.__l + 2);
    this->__pn_.__r_.__value_.__l.__size_ = 0;
    this->__pn_.__r_.__value_.__r.__words[2] = 0;
    this->__pn_.__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  v8 = 24 * v7;
  while (1)
  {
    if (!v6)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    std::__fs::filesystem::operator/[abi:ne180100](this, v6, (std::__fs::filesystem::path *)a3);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, &__ec);
    if (v11)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (v11)
      {
        if (v11 != 255 && !__ec.__val_)
          return result;
      }
    }
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v6 += 24;
    v8 -= 24;
    if (!v8)
      goto LABEL_14;
  }
}

uint64_t boost::container::vec_iterator<std::__fs::filesystem::path *,false>::operator*(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

double `non-virtual thunk to'vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request@<D0>(uint64_t a1@<X0>, std::__fs::filesystem::path *a2@<X2>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = vp::vx::Voice_Processor::handle_dsp_node_factory_file_path_adjustment_request(a2, a1 - 256, a3).n128_u64[0];
  return result;
}

uint64_t ___ZN2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a1 + 32));
}

void sub_1B6020A90(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6020A80);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t ___ZNK2vp2vx15Voice_Processor9call_syncENSt3__18functionIFvRKS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a1 + 32));
}

void sub_1B6020B14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6020B04);
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__18functionIFvRKN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c53_ZTSNSt3__18functionIFvRKN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void vp::vx::Voice_Processor::call_async(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD block[5];
  std::__shared_weak_count *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)(a1 + 728), &v9);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
    dispatch_retain(v4);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_126;
  block[4] = v9;
  v12 = v10;
  if (v10)
  {
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    do
      v6 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v6 + 1, (unint64_t *)p_shared_weak_owners));
  }
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  dispatch_async(v4, block);
  if (v4)
    dispatch_release(v4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1B6020C98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[4])
      {
        v5 = a1[9];
        if (!v5)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B6020D30(void *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
    ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke_cold_1(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6020CFCLL);
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN2vp2vx15Voice_ProcessorEEE48c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void sub_1B6020DB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN2vp2vx15Voice_ProcessorEEE48c52_ZTSNSt3__18functionIFvRN2vp2vx15Voice_ProcessorEEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void vp::vx::Voice_Processor::make_weak_state_manager(vp::vx::Voice_Processor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)this + 91, &v11);
  if (!v12 || (v3 = v11, (v4 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = v3 + 16;
  if (!v3)
    v6 = 0;
  *a2 = v6;
  a2[1] = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void vp::vx::Voice_Processor::make_weak_state_owner(vp::vx::Voice_Processor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)this + 91, &v11);
  if (!v12 || (v3 = v11, (v4 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = v3 + 8;
  if (!v3)
    v6 = 0;
  *a2 = v6;
  a2[1] = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

uint64_t vp::vx::Voice_Processor::get_context(vp::vx::Voice_Processor *this)
{
  return (uint64_t)this + 264;
}

void vp::vx::Voice_Processor::begin_initialization(vp::vx::Voice_Processor *this@<X0>, _BYTE *a2@<X8>, int a3@<W1>)
{
  if (a3 == 1)
  {
    vp::vx::Voice_Processor::begin_downlink_initialization(this, a2);
  }
  else if (!a3)
  {
    vp::vx::Voice_Processor::begin_uplink_initialization(this, a2);
  }
}

void vp::vx::Voice_Processor::end_initialization(vp::vx::Voice_Processor *this@<X0>, _BYTE *a2@<X8>, int a3@<W1>)
{
  if (a3 == 1)
  {
    vp::vx::Voice_Processor::end_downlink_initialization(this, (uint64_t)a2);
  }
  else if (!a3)
  {
    vp::vx::Voice_Processor::end_uplink_initialization(this, a2);
  }
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69B8D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69B8D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__shared_ptr_emplace<vp::vx::Voice_Processor_State_Manager::Observer>::__on_zero_shared(uint64_t a1)
{
  boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((_QWORD *)(a1 + 96));
  return boost::container::vector<std::function<void ()(void)>,boost::container::small_vector_allocator<std::function<void ()(void)>,vp::Allocator<void>,void>,void>::~vector((_QWORD *)(a1 + 32));
}

uint64_t _ZNSt3__112construct_atB8ne180100IN2vp2vx29Voice_Processor_State_Manager8ObserverEJEPS4_EEPT_S7_DpOT0_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::pmr *default_resource;

  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v2 = a1 + 104;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = a1 + 40;
  *(_QWORD *)a1 = &unk_1E69B8978;
  default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)a1);
  *(_QWORD *)(a1 + 8) = default_resource;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = xmmword_1B6626830;
  *(_QWORD *)(a1 + 72) = std::pmr::get_default_resource(default_resource);
  *(_QWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 88) = xmmword_1B6626830;
  return a1;
}

uint64_t std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__emplace_back_slow_path<std::unique_ptr<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  unint64_t v17;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 3;
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 3;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<vp::Allocator<vp::vx::Property_Manager::Listener>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = v10 + 16 * v4;
  v21 = v10 + 16 * v9;
  std::shared_ptr<vp::vx::Component>::shared_ptr[abi:ne180100]<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>,void>(v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = a1[2];
  a1[2] = v21;
  v21 = v17;
  v19 = v16.i64[0];
  std::__split_buffer<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>> &>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B6021290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<vp::vx::Component>::shared_ptr[abi:ne180100]<vp::vx::Component,vp::Allocator_Delete<vp::vx::Component>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = operator new();
    v6 = *a2;
    v7 = a2[3];
    *(_QWORD *)v5 = &off_1E69B8D80;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = v6;
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(v5 + 48) = v7;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<vp::vx::Component *,vp::Allocator_Delete<vp::vx::Component>,std::allocator<vp::vx::Component>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::Component *,vp::Allocator_Delete<vp::vx::Component>,std::allocator<vp::vx::Component>>::__on_zero_shared(uint64_t a1)
{
  void (***v2)(_QWORD);

  v2 = *(void (****)(_QWORD))(a1 + 24);
  (**v2)(v2);
  return (*(uint64_t (**)(_QWORD, void (***)(_QWORD), _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t std::__split_buffer<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1, 8);
  return a1;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  if (a1[3])
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  return a1;
}

_QWORD *boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(_QWORD *result, _QWORD *a2)
{
  if (result + 4 != a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 24))(*result);
  return result;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  if (a1[3])
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  return a1;
}

_QWORD *boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(_QWORD *result, _QWORD *a2)
{
  if (result + 4 != a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 24))(*result);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,std::pair<std::vector<unsigned char,vp::Allocator<unsigned char>>,unsigned long>>>>::__deallocate_node(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;

  v3 = result;
  while (a2)
  {
    v4 = (_QWORD *)*a2;
    v5 = a2 + 3;
    std::vector<unsigned char,vp::Allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100](&v5);
    result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 24))(*(_QWORD *)(v3 + 32), a2, 64, 8);
    a2 = v4;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,float>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int,float>,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,vp::Allocator<std::__hash_value_type<unsigned int,float>>>::__deallocate_node(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = result;
  while (a2)
  {
    v3 = (_QWORD *)*a2;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
    a2 = v3;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      if (*((_BYTE *)v3 + 48))
      {
        if (*((char *)v3 + 47) < 0)
          operator delete((void *)v3[3]);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

_QWORD *boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = vp::vx::data_flow::State<void>::~State(v3) + 32;
    }
    while (v2);
  }
  v4 = a1[3];
  if (v4)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 32 * v4, 8);
  return a1;
}

uint64_t caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::~lifetime_guard_base(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1 + 8;
  if (*(_QWORD *)(a1 + 8))
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v4 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v4);
  }
  if (*(_BYTE *)(a1 + 40))
    MEMORY[0x1BCC950B0](a1 + 24);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1);
  return a1;
}

void sub_1B602183C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1];
    do
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3])
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  return a1;
}

_QWORD *boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(_QWORD *result, _QWORD *a2)
{
  if (result + 4 != a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 24))(*result);
  return result;
}

uint64_t **std::vector<std::shared_ptr<vp::vx::Component>,vp::Allocator<std::shared_ptr<vp::vx::Component>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__deallocate_node(a1, *(CFTypeRef **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__deallocate_node(uint64_t result, CFTypeRef *a2)
{
  _QWORD *v3;
  CFTypeRef *v4;

  v3 = (_QWORD *)(result + 32);
  while (a2)
  {
    v4 = (CFTypeRef *)*a2;
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>((uint64_t)v3, a2 + 2);
    result = (*(uint64_t (**)(_QWORD, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a2, 32, 8);
    a2 = v4;
  }
  return result;
}

void std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, 8 * *(_QWORD *)a1, 8);
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)1,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 1;
  result = "vp::vx::io::Error_Code::Bad_Allocation]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::io::Error_Code::Bad_Frame_Count]";
      break;
    case 2:
      result = "vp::vx::io::Error_Code::Bad_Data]";
      break;
    case 3:
      result = "vp::vx::io::Error_Code::Bad_Direction]";
      break;
    case 4:
      result = "vp::vx::io::Error_Code::Bad_Sample_Time]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)6,128ul>((int)"vp::vx::io::Error_Code::Bad_Allocation]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)6,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 6;
  result = "vp::vx::io::Error_Code::Bad_Node_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::io::Error_Code::Bad_Port_ID]";
      break;
    case 2:
      result = "vp::vx::io::Error_Code::Bad_Wire_ID]";
      break;
    case 3:
      result = "vp::vx::io::Error_Code::Bad_Terminal_Index]";
      break;
    case 4:
      result = "vp::vx::io::Error_Code::Bad_Parameter_ID]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)11,128ul>((int)"vp::vx::io::Error_Code::Bad_Node_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)11,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 11;
  result = "vp::vx::io::Error_Code::Bad_Property_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::io::Error_Code::Operation_Not_Implemented]";
      break;
    case 2:
      result = "vp::vx::io::Error_Code::Operation_Not_Supported]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)14]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)15]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)16,128ul>((int)"vp::vx::io::Error_Code::Bad_Property_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)16,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 16;
  result = "(vp::vx::io::Error_Code)16]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)17]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)18]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)19]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)20]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)21,128ul>((int)"(vp::vx::io::Error_Code)16]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)21,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 21;
  result = "(vp::vx::io::Error_Code)21]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)22]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)23]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)24]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)25]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)26,128ul>((int)"(vp::vx::io::Error_Code)21]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)26,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 26;
  result = "(vp::vx::io::Error_Code)26]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)27]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)28]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)29]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)30]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)31,128ul>((int)"(vp::vx::io::Error_Code)26]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)31,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 31;
  result = "(vp::vx::io::Error_Code)31]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)32]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)33]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)34]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)35]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)36,128ul>((int)"(vp::vx::io::Error_Code)31]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)36,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 36;
  result = "(vp::vx::io::Error_Code)36]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)37]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)38]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)39]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)40]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)41,128ul>((int)"(vp::vx::io::Error_Code)36]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)41,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 41;
  result = "(vp::vx::io::Error_Code)41]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)42]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)43]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)44]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)45]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)46,128ul>((int)"(vp::vx::io::Error_Code)41]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)46,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 46;
  result = "(vp::vx::io::Error_Code)46]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)47]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)48]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)49]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)50]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)51,128ul>((int)"(vp::vx::io::Error_Code)46]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)51,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 51;
  result = "(vp::vx::io::Error_Code)51]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)52]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)53]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)54]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)55]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)56,128ul>((int)"(vp::vx::io::Error_Code)51]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)56,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 56;
  result = "(vp::vx::io::Error_Code)56]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)57]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)58]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)59]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)60]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)61,128ul>((int)"(vp::vx::io::Error_Code)56]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)61,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 61;
  result = "(vp::vx::io::Error_Code)61]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)62]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)63]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)64]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)65]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)66,128ul>((int)"(vp::vx::io::Error_Code)61]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)66,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 66;
  result = "(vp::vx::io::Error_Code)66]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)67]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)68]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)69]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)70]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)71,128ul>((int)"(vp::vx::io::Error_Code)66]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)71,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 71;
  result = "(vp::vx::io::Error_Code)71]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)72]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)73]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)74]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)75]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)76,128ul>((int)"(vp::vx::io::Error_Code)71]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)76,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 76;
  result = "(vp::vx::io::Error_Code)76]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)77]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)78]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)79]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)80]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)81,128ul>((int)"(vp::vx::io::Error_Code)76]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)81,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 81;
  result = "(vp::vx::io::Error_Code)81]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)82]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)83]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)84]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)85]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)86,128ul>((int)"(vp::vx::io::Error_Code)81]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)86,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 86;
  result = "(vp::vx::io::Error_Code)86]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)87]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)88]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)89]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)90]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)91,128ul>((int)"(vp::vx::io::Error_Code)86]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)91,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 91;
  result = "(vp::vx::io::Error_Code)91]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)92]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)93]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)94]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)95]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)96,128ul>((int)"(vp::vx::io::Error_Code)91]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)96,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 96;
  result = "(vp::vx::io::Error_Code)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)97]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)98]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)99]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)100]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)101,128ul>((int)"(vp::vx::io::Error_Code)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)101,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 101;
  result = "(vp::vx::io::Error_Code)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)102]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)103]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)104]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)105]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)106,128ul>((int)"(vp::vx::io::Error_Code)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)106,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 106;
  result = "(vp::vx::io::Error_Code)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)107]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)108]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)109]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)110]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)111,128ul>((int)"(vp::vx::io::Error_Code)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)111,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 111;
  result = "(vp::vx::io::Error_Code)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)112]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)113]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)114]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)115]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)116,128ul>((int)"(vp::vx::io::Error_Code)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)116,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 116;
  result = "(vp::vx::io::Error_Code)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)117]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)118]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)119]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)120]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::io::Error_Code)121,128ul>((int)"(vp::vx::io::Error_Code)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::io::Error_Code)121,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 121;
  result = "(vp::vx::io::Error_Code)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::io::Error_Code)122]";
      break;
    case 2:
      result = "(vp::vx::io::Error_Code)123]";
      break;
    case 3:
      result = "(vp::vx::io::Error_Code)124]";
      break;
    case 4:
      result = "(vp::vx::io::Error_Code)125]";
      break;
    case 5:
      result = "(vp::vx::io::Error_Code)126]";
      break;
    case 6:
      result = "(vp::vx::io::Error_Code)127]";
      break;
    default:
      if ("(vp::vx::io::Error_Code)121]" == 128)
        result = "(vp::vx::io::Error_Code)128]";
      else
        result = "?";
      break;
  }
  return result;
}

int *caulk::expected<unsigned int,vp::vx::Error_Code>::swap(int *result, int *a2)
{
  char v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;

  v2 = *((_BYTE *)result + 4);
  v3 = *((unsigned __int8 *)a2 + 4);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (*((_BYTE *)result + 4))
    {
      if (!*((_BYTE *)a2 + 4))
      {
        v5 = *a2;
        *a2 = *result;
        *result = v5;
        *((_BYTE *)result + 4) = 0;
        *((_BYTE *)a2 + 4) = v2;
        return result;
      }
    }
    else if (*((_BYTE *)a2 + 4))
    {
      v6 = *a2;
      *a2 = *result;
      *result = v6;
      *((_BYTE *)result + 4) = v3;
      *((_BYTE *)a2 + 4) = 0;
      return result;
    }
  }
  v7 = *result;
  *result = *a2;
  *a2 = v7;
  return result;
}

uint64_t caulk::__expected_detail::base<unsigned int,vp::vx::io::Error>::base(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD **v4;
  __int128 v5;

  *(_BYTE *)a1 = 0;
  v3 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (!v3)
  {
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    if (*(char *)(a2 + 39) < 0)
    {
      std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__init_copy_ctor_external(v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v4 = v5;
    }
  }
  return a1;
}

void sub_1B60225B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

vp::vx::io::Error *caulk::__expected_detail::base<std::unique_ptr<vp::vx::io::Graph>,vp::vx::io::Error>::~base(vp::vx::io::Error *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 48))
  {
    v2 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    vp::vx::io::Error::~Error(this);
  }
  return this;
}

void vp::vx::io::Graph_Builder::~Graph_Builder(vp::vx::io::Graph_Builder *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t *v4;

  v4 = (uint64_t *)((char *)this + 416);
  std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::~vector((_QWORD *)this + 48);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>,void>::~vector((_QWORD *)this + 44);
  v4 = (uint64_t *)((char *)this + 312);
  std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::~vector((_QWORD *)this + 35);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Node_Terminal_Address,vp::vx::io::Object_ID<vp::vx::io::Port>>>,void>::~vector((_QWORD *)this + 31);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,vp::vx::io::Node_Terminal_Address>>,void>::~vector((_QWORD *)this + 27);
  v4 = (uint64_t *)((char *)this + 176);
  std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (uint64_t *)((char *)this + 144);
  std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (uint64_t *)((char *)this + 112);
  std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::~vector((_QWORD *)this + 10);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t **std::vector<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Wire_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,std::shared_ptr<vp::vx::io::Wire_Factory>>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  v4 = a1[3];
  if (v4)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  return a1;
}

uint64_t **std::vector<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Port_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Port>,std::shared_ptr<vp::vx::io::Port_Factory>>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  v4 = a1[3];
  if (v4)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  return a1;
}

uint64_t **std::vector<std::shared_ptr<vp::vx::io::Node_Command_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Command_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

uint64_t **std::vector<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Delegate_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

uint64_t **std::vector<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>,vp::Allocator<std::shared_ptr<vp::vx::io::Node_Decorator_Factory>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        v4 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 - 16);
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 24))(v6[3], v5, v6[2] - v5, 8);
  }
  return result;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1] + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3) + 24;
    }
    while (v2);
  }
  v4 = a1[3];
  if (v4)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 24 * v4, 8);
  return a1;
}

const void **std::pair<applesauce::CF::StringRef,unsigned int>::~pair(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B8DB8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B8DB8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69B8DB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69B8DB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlRKT_E_JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESF_SU_EUlPPKNS4_5ValueEPS12_E_NSK_IS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::pmr *v16;
  _QWORD *result;
  CFTypeRef cf;
  const void *v19;
  CFTypeRef v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id)
    v6 = (_QWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  vp::Service_Provider::get<vp::services::Audio_Statistics,(decltype(nullptr))0>(*(_QWORD **)(a1 + 8), &v21);
  if (v21)
  {
    v7 = (_QWORD *)*v6;
    v8 = (_QWORD *)v6[1];
    if ((_QWORD *)*v6 != v8)
    {
      v9 = 0;
      while (1)
      {
        v10 = *v7;
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, *v7) & 0xFFFFFFFD) != 0)
        {
          v11 = v9;
          goto LABEL_21;
        }
        (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(&v20, v21, v10);
        if (v20)
        {
          cf = 0;
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[25]>((const __CFDictionary *)v20, "HostApplicationDisplayID", &cf, &v19);
          v11 = v19;
          v19 = v9;
          if (v9)
            CFRelease(v9);
          if (cf)
            CFRelease(cf);
          if (v11)
          {
            v12 = 0;
            goto LABEL_18;
          }
          v9 = 0;
        }
        v12 = 1;
        v11 = v9;
LABEL_18:
        if (v20)
          CFRelease(v20);
        if (!v12)
          goto LABEL_24;
LABEL_21:
        ++v7;
        v9 = v11;
        if (v7 == v8)
          goto LABEL_24;
      }
    }
  }
  v11 = 0;
LABEL_24:
  v13 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v16);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v11;
  return result;
}

void sub_1B6022DE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E69B8E00;
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E69B8E00;
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_1E69B8E00;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(v2 + 1, v1);
  return v2;
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69B8E00;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(a2 + 1, (_QWORD *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyB8ne180100Ev(a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  int *v7;
  CFTypeRef *v8;
  int v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef *v12;
  std::pmr *v13;
  _QWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id)
    v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  v9 = *v7;
  v10 = *v8;
  if (*v8)
    CFRetain(*v8);
  v11 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_20;
    case 1:
      v11 = *(CFTypeRef *)(a1 + 16);
      if (v11)
        CFRetain(*(CFTypeRef *)(a1 + 16));
      goto LABEL_16;
    case 2:
    case 4:
      v11 = *(CFTypeRef *)(a1 + 24);
      if (v11)
        CFRetain(*(CFTypeRef *)(a1 + 24));
      goto LABEL_16;
    case 5:
    case 6:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 408) == 1)
        v12 = (CFTypeRef *)(a1 + 16);
      else
        v12 = (CFTypeRef *)(a1 + 24);
      v11 = *v12;
      if (*v12)
        CFRetain(*v12);
      goto LABEL_16;
    default:
LABEL_16:
      if (v10)
        CFRelease(v10);
      v10 = v11;
LABEL_20:
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
      *v5 = std::pmr::get_default_resource(v13);
      v5[1] = 0;
      v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
      result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
      *result = v10;
      return result;
  }
}

void sub_1B602307C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZZNS2_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS2_14Operation_ModeES7_EEEDaOSE_DpRKNS3_5StateIT0_EEEUlDpRKT_E_JSH_S7_EEERNS3_13State_ManagerESE_SP_EUlPPKNS3_5ValueEPSX_E_Li0ELb0EEC2B8ne180100IJRKS12_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSQ_EEENS_15__tuple_indicesIJXspT0_EEEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)a2[1];
  *a1 = *a2;
  if (v4)
    CFRetain(v4);
  a1[1] = v4;
  v5 = (const void *)a2[2];
  if (v5)
    CFRetain(v5);
  a1[2] = v5;
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_app_bundle_idEvENK3__0clEvEUlT_T0_E_JNS3_14Operation_ModeES8_EEEDaOSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_S8_EEERNS4_13State_ManagerESF_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyB8ne180100Ev(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::pair<applesauce::CF::StringRef,unsigned int>>(unint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  CFHashCode v3;
  _QWORD *v7;
  CFHashCode v8;
  CFHashCode v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t *v22;
  unint64_t v23;

  v7 = (_QWORD *)(a1 + 40);
  v8 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 40, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(_QWORD *)i)
      {
        v15 = *(_QWORD *)(i + 8);
        if (v15 == v9)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(i + 16), (const __CFString **)a2) == kCFCompareEqualTo)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  i = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 32, 8);
  *(_QWORD *)i = 0;
  *(_QWORD *)(i + 8) = v9;
  *(_QWORD *)(i + 16) = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(i + 24) = *(_DWORD *)(a3 + 8);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v17 = *(float *)(a1 + 48);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (uint64_t *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1B602339C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__rehash<true>(unint64_t result, size_t __n)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;

  v2 = result;
  if (__n == 1)
  {
    v3 = 2;
  }
  else
  {
    v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      result = std::__next_prime(__n);
      v3 = result;
    }
  }
  v4 = *(int8x8_t *)(v2 + 8);
  if (v3 > *(_QWORD *)&v4)
    return std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__do_rehash<true>(v2, v3);
  if (v3 < *(_QWORD *)&v4)
  {
    result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(_QWORD *)&v4 < 3uLL || (v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v6 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v6;
    }
    if (v3 <= result)
      v3 = result;
    if (v3 < *(_QWORD *)&v4)
      return std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__do_rehash<true>(v2, v3);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,vp::Allocator<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>>>::__do_rehash<true>(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v2 = (uint64_t *)result;
  v3 = (unint64_t *)(result + 8);
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), 8 * a2, 8);
    v5 = *v2;
    *v2 = result;
    if (v5)
      result = std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::operator()[abi:ne180100]((uint64_t)v3, v5);
    v6 = 0;
    *v3 = a2;
    do
      *(_QWORD *)(*v2 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = (_QWORD *)v2[3];
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*v2 + 8 * v8) = v2 + 3;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*v2 + 8 * v12))
            {
              *(_QWORD *)(*v2 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*v2 + 8 * v12);
            **(_QWORD **)(*v2 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v10)
      result = std::__bucket_list_deallocator<vp::Allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *> *> *>>::operator()[abi:ne180100](result + 8, v10);
    *v3 = 0;
  }
  return result;
}

void std::__hash_node_destructor<vp::Allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>>::operator()[abi:ne180100](_QWORD **a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 8))
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,unsigned int>,void *>>::destroy[abi:ne180100]<std::pair<applesauce::CF::StringRef const,unsigned int>>((uint64_t)*a1, (CFTypeRef *)(a2 + 16));
  if (a2)
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)**a1 + 24))(**a1, a2, 32, 8);
}

void vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v17[24];
  __int128 cf;
  std::__shared_weak_count *v19;
  _BYTE v20[24];
  uint64_t v21;
  std::__shared_weak_count *v22;

  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v21);
  v6 = v21;
  if (v21)
  {
    v7 = *a2;
    v8 = v21;
    if (*a2)
    {
      CFRetain(*a2);
      v8 = v21;
    }
    *(_QWORD *)&cf = v7;
    *((_QWORD *)&cf + 1) = v8;
    v19 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal((dispatch_queue_t *)(a1 + 16), (uint64_t)v17);
    vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::StringRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1},unsigned int>(a1 + 16, &cf, (vp::vx::data_flow::State_Transaction *)v17, (uint64_t)v20);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if ((_QWORD)cf)
      CFRelease((CFTypeRef)cf);
  }
  v14 = v22;
  if (!v22)
    goto LABEL_18;
  v15 = (unint64_t *)&v22->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v6)
      return;
  }
  else
  {
LABEL_18:
    if (v6)
      return;
  }
  *(_QWORD *)&cf = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), &cf, (uint64_t)v20);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
}

void sub_1B60237FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1}::~State((CFTypeRef *)va);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10[0] = &off_1E69B8FB0;
  v10[1] = 28;
  v11 = v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B8E48;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EE7__cloneEPNS0_6__baseIS1H_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B8E48;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_21Configuration_ContextEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_12_GLOBAL__N_123make_constructor_lambdaIS6_EEDavEUlDpRKT_E_JNS3_14Operation_ModeENS3_11Chat_FlavorENS3_15Input_Port_TypeEjjjN10applesauce2CF9StringRefENS3_16Output_Port_TypeENS3_13Port_Sub_TypeENS3_18Port_Endpoint_TypeEbjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEESD_OT0_DpRKNS4_5StateIT1_EEEUlSH_E_JSJ_SK_SL_jjjSO_SP_SQ_SR_bjjjSO_bbbbbbbjjjjjjjdbbbbjbbEEERNS4_13State_ManagerET_DpRKNSU_IT0_EEEUlPPKNS4_5ValueEPS19_E_NS_9allocatorIS1E_EEFvS1C_S1D_EEclEOS1C_OS1D_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  int *v8;
  uint64_t (****v9)();
  int *v10;
  uint64_t (****v11)();
  int *v12;
  uint64_t (****v13)();
  int *v14;
  uint64_t (****v15)();
  uint64_t (****v16)();
  uint64_t (****v17)();
  uint64_t (****v18)();
  uint64_t (****v19)();
  uint64_t (****v20)();
  uint64_t (****v21)();
  uint64_t (****v22)();
  uint64_t (****v23)();
  uint64_t (****v24)();
  CFTypeRef *v25;
  uint64_t (****v26)();
  uint64_t (****v27)();
  uint64_t (****v28)();
  uint64_t (****v29)();
  uint64_t (****v30)();
  uint64_t (****v31)();
  uint64_t (****v32)();
  uint64_t (****v33)();
  uint64_t (****v34)();
  uint64_t (****v35)();
  uint64_t (****v36)();
  uint64_t (****v37)();
  uint64_t (****v38)();
  uint64_t (****v39)();
  uint64_t (****v40)();
  uint64_t (****v41)();
  uint64_t (****v42)();
  uint64_t (****v43)();
  uint64_t (****v44)();
  uint64_t (****v45)();
  uint64_t (****v46)();
  uint64_t (****v47)();
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  CFTypeRef v54;
  uint64_t *v55;
  CFTypeRef v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  std::pmr *v65;
  uint64_t result;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  char *v72;
  int *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t *v78;
  int *v79;
  char v80;
  int *v81;
  char v82;
  int *v83;
  int v84;
  int *v85;
  char v86;
  int *v87;
  char v88;
  int *v89;
  char v90;
  int *v91;
  char v92;
  char *v93;
  int v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  char *v99;
  int v100;
  char *v101;
  int v102;
  char *v103;
  int v104;
  char *v105;
  int v106;
  int *v107;
  int v108;
  int *v109;
  int v110;
  int *v111;
  int v112;
  char *v113;
  char v114;
  int *v115;
  int v116;
  int *v117;
  int v118;
  int *v119;
  int v120;
  CFTypeRef *v121;
  int v122;
  int *v123;
  int v124;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id)
    v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  v9 = v3[2];
  if (v9[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id)
    v10 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  else
    v10 = 0;
  v11 = v3[3];
  if (v11[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v12 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  else
    v12 = 0;
  v13 = v3[4];
  if (v13[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v14 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v13);
  else
    v14 = 0;
  v15 = v3[5];
  if (v15[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v123 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v15);
  else
    v123 = 0;
  v16 = v3[6];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id)
    v121 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  else
    v121 = 0;
  v17 = v3[7];
  if (v17[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v119 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v17);
  else
    v119 = 0;
  v18 = v3[8];
  if (v18[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id)
    v117 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v18);
  else
    v117 = 0;
  v19 = v3[9];
  if (v19[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id)
    v115 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v19);
  else
    v115 = 0;
  v20 = v3[10];
  if (v20[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v113 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v20);
  else
    v113 = 0;
  v21 = v3[11];
  if (v21[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v111 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v21);
  else
    v111 = 0;
  v22 = v3[12];
  if (v22[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v109 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v22);
  else
    v109 = 0;
  v23 = v3[13];
  if (v23[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v107 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v23);
  else
    v107 = 0;
  v24 = v3[14];
  if (v24[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id)
    v25 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v24);
  else
    v25 = 0;
  v26 = v3[15];
  if (v26[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v105 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v26);
  else
    v105 = 0;
  v27 = v3[16];
  if (v27[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v103 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v27);
  else
    v103 = 0;
  v28 = v3[17];
  if (v28[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v101 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v28);
  else
    v101 = 0;
  v29 = v3[18];
  if (v29[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v99 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v29);
  else
    v99 = 0;
  v30 = v3[19];
  if (v30[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v97 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v30);
  else
    v97 = 0;
  v31 = v3[20];
  if (v31[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v95 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v31);
  else
    v95 = 0;
  v32 = v3[21];
  if (v32[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v93 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v32);
  else
    v93 = 0;
  v33 = v3[22];
  if (v33[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v91 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v33);
  else
    v91 = 0;
  v34 = v3[23];
  if (v34[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v89 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v34);
  else
    v89 = 0;
  v35 = v3[24];
  if (v35[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v87 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v35);
  else
    v87 = 0;
  v36 = v3[25];
  if (v36[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v85 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v36);
  else
    v85 = 0;
  v37 = v3[26];
  if (v37[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v83 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v37);
  else
    v83 = 0;
  v38 = v3[27];
  if (v38[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v81 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v38);
  else
    v81 = 0;
  v39 = v3[28];
  if (v39[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v79 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v39);
  else
    v79 = 0;
  v40 = v3[29];
  if (v40[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v78 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v40);
  else
    v78 = 0;
  v41 = v3[30];
  if (v41[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v77 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v41);
  else
    v77 = 0;
  v42 = v3[31];
  if (v42[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v76 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v42);
  else
    v76 = 0;
  v43 = v3[32];
  if (v43[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v75 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v43);
  else
    v75 = 0;
  v44 = v3[33];
  if (v44[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v74 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v44);
  else
    v74 = 0;
  v45 = v3[34];
  if (v45[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v73 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v45);
  else
    v73 = 0;
  v46 = v3[35];
  if (v46[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v72 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v46);
  else
    v72 = 0;
  v47 = v3[36];
  if (v47[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v71 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v47);
  else
    v71 = 0;
  v48 = *v6;
  v49 = *v8;
  v50 = *v10;
  v51 = *v12;
  v52 = *v14;
  v53 = *v123;
  v54 = *v121;
  if (*v121)
    CFRetain(*v121);
  v67 = v53;
  v68 = v52;
  v69 = v51;
  v70 = v50;
  v122 = v49;
  v124 = v48;
  v55 = v4;
  v120 = *v119;
  v118 = *v117;
  v116 = *v115;
  v114 = *v113;
  v112 = *v111;
  v110 = *v109;
  v108 = *v107;
  v56 = *v25;
  if (*v25)
    CFRetain(*v25);
  v57 = *v105;
  v58 = *v103;
  v59 = *v101;
  v60 = *v99;
  v61 = *v97;
  v62 = *v95;
  v63 = *v93;
  v106 = *v91;
  v104 = *v89;
  v102 = *v87;
  v100 = *v85;
  v98 = *v83;
  v96 = *v81;
  v94 = *v79;
  v64 = *v78;
  v92 = *v77;
  v90 = *v76;
  v88 = *v75;
  v86 = *v74;
  v84 = *v73;
  v82 = *v72;
  v80 = *v71;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v55);
  *v55 = std::pmr::get_default_resource(v65);
  v55[1] = 0;
  v55[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id;
  result = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v55);
  *(_DWORD *)result = v124;
  *(_DWORD *)(result + 4) = v122;
  *(_DWORD *)(result + 8) = v70;
  *(_DWORD *)(result + 12) = v69;
  *(_DWORD *)(result + 16) = v68;
  *(_DWORD *)(result + 20) = v67;
  *(_QWORD *)(result + 24) = v54;
  *(_DWORD *)(result + 32) = v120;
  *(_DWORD *)(result + 36) = v118;
  *(_DWORD *)(result + 40) = v116;
  *(_BYTE *)(result + 44) = v114;
  *(_DWORD *)(result + 48) = v112;
  *(_DWORD *)(result + 52) = v110;
  *(_DWORD *)(result + 56) = v108;
  *(_QWORD *)(result + 64) = v56;
  *(_BYTE *)(result + 72) = v57;
  *(_BYTE *)(result + 73) = v58;
  *(_BYTE *)(result + 74) = v59;
  *(_BYTE *)(result + 75) = v60;
  *(_BYTE *)(result + 76) = v61;
  *(_BYTE *)(result + 77) = v62;
  *(_BYTE *)(result + 78) = v63;
  *(_DWORD *)(result + 80) = v106;
  *(_DWORD *)(result + 84) = v104;
  *(_DWORD *)(result + 88) = v102;
  *(_DWORD *)(result + 92) = v100;
  *(_DWORD *)(result + 96) = v98;
  *(_DWORD *)(result + 100) = v96;
  *(_DWORD *)(result + 104) = v94;
  *(_QWORD *)(result + 112) = v64;
  *(_BYTE *)(result + 120) = v92;
  *(_BYTE *)(result + 121) = v90;
  *(_BYTE *)(result + 122) = v88;
  *(_BYTE *)(result + 123) = v86;
  *(_DWORD *)(result + 124) = v84;
  *(_BYTE *)(result + 128) = v82;
  *(_BYTE *)(result + 129) = v80;
  return result;
}

void sub_1B6024150(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 136, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 136, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::copy_value(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::Configuration_Context,vp::vx::Configuration_Context const&,vp::vx::Configuration_Context*>(*a2, *a3);
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::move_value(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  v5 = **a3;
  *(_QWORD *)(v3 + 16) = *((_QWORD *)*a3 + 2);
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(v3 + 24) = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v6 = v4[2];
  *(_OWORD *)(v3 + 44) = *(__int128 *)((char *)v4 + 44);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)v4 + 8);
  *((_QWORD *)v4 + 8) = 0;
  result = *(__n128 *)((char *)v4 + 72);
  v8 = *(__int128 *)((char *)v4 + 88);
  v9 = *(__int128 *)((char *)v4 + 104);
  *(_OWORD *)(v3 + 114) = *(__int128 *)((char *)v4 + 114);
  *(_OWORD *)(v3 + 104) = v9;
  *(_OWORD *)(v3 + 88) = v8;
  *(__n128 *)(v3 + 72) = result;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::destroy_value(uint64_t a1, uint64_t *a2)
{
  std::__destroy_at[abi:ne180100]<vp::vx::Configuration_Context,0>(*a2);
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Configuration_Context>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Configuration_Context::operator==(*a2, *a3);
}

void std::__destroy_at[abi:ne180100]<vp::vx::Configuration_Context,0>(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B8EF8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B8EF8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_contextEvENK3__0clEvEUlT_T0_E_JS6_N10applesauce2CF9StringRefEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS6_SI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  int *v6;
  CFTypeRef *v7;
  int v8;
  CFTypeRef v9;
  CFComparisonResult v10;
  CFComparisonResult v11;
  CFComparisonResult v12;
  std::pmr *v13;
  int *result;
  CFTypeRef v15;
  CFTypeRef cf;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v8 = *v6;
  v9 = *v7;
  if (*v7)
  {
    CFRetain(*v7);
    v15 = v9;
    applesauce::CF::operator"" _cf("Standard", 8uLL, (CFStringRef *)&cf);
    v10 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v15, (const __CFString **)&cf);
    if (cf)
      CFRelease(cf);
    if (v10)
    {
      applesauce::CF::operator"" _cf("VoiceIsolation", 0xEuLL, (CFStringRef *)&cf);
      v11 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v15, (const __CFString **)&cf);
      if (cf)
        CFRelease(cf);
      if (v11)
      {
        applesauce::CF::operator"" _cf("WideSpectrum", 0xCuLL, (CFStringRef *)&cf);
        v12 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(&v15, (const __CFString **)&cf);
        if (cf)
          CFRelease(cf);
        if (v12 == kCFCompareEqualTo)
          v8 = 1;
      }
      else
      {
        v8 = 2;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v15)
    CFRelease(v15);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v13);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v8;
  return result;
}

void sub_1B6024498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"sdsu", v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::StringRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1},unsigned int>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  _BYTE v13[28];
  int id;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)v8 = &off_1E69B8F40;
  *(_OWORD *)(v8 + 8) = v12;
  *((_QWORD *)v8 + 3) = v7;
  v17 = v8;
  id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v16, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v13);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v13);
}

void sub_1B602467C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal@<X0>(dispatch_queue_t *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  dispatch_source_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v9[5];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  _BYTE v16[24];

  v4 = (char *)(this + 3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)(this + 3)))
  {
    v5 = dispatch_source_create(MEMORY[0x1E0C80DC0], 1uLL, 0, this[1]);
    v6 = this[2];
    this[2] = v5;
    if (v6)
      dispatch_release(v6);
    v11 = 0;
    v12 = &v11;
    v13 = 0x4002000000;
    v14 = __Block_byref_object_copy__1;
    v15 = __Block_byref_object_dispose__1;
    v10 = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)this, &v10, (uint64_t)v16);
    v7 = this[2];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN2vp2vx29Voice_Processor_State_Manager30create_state_for_SIGHUP_signalEv_block_invoke;
    v9[3] = &unk_1E69B8F80;
    v9[4] = &v11;
    dispatch_source_set_event_handler(v7, v9);
    vp::vx::data_flow::State<void>::operator=((uint64_t)v4, (uint64_t)(v12 + 5));
    dispatch_resume(this[2]);
    _Block_object_dispose(&v11, 8);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
}

CFTypeRef *vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::StringRef,applesauce::CF::StringRef>(applesauce::CF::StringRef &&)::{lambda(applesauce::CF::StringRef)#1}::~State(CFTypeRef *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  if (*a1)
    CFRelease(*a1);
  return a1;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69B8F40;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69B8F40;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_1E69B8F40;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(v2 + 1, v1);
  return v2;
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69B8F40;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(a2 + 1, a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyB8ne180100Ev((CFTypeRef *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(CFTypeRef *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyB8ne180100Ev(a1 + 1);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_S9_EENS5_5StateIT_EEOT0_EUlSH_E_JjEEEDaOSH_DpRKNSG_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESH_SS_EUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOST_(a1 + 8, a2, a3);
}

_QWORD *_ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_15Voice_Processor26create_user_defaults_stateIS7_S7_EENS3_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEEERNS3_13State_ManagerESF_SQ_EUlPPKNS3_5ValueEPSY_E_Li0ELb0EEC2B8ne180100IJRKS13_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSR_EEENS_15__tuple_indicesIJXspT0_EEEE(_QWORD *a1, uint64_t a2)
{
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_S8_EENS4_5StateIT_EEOT0_EUlSG_E_JjEEEDaOSG_DpRKNSF_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SR_EUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyB8ne180100Ev(CFTypeRef *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  if (*a1)
    CFRelease(*a1);
}

_QWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_S9_EENS5_5StateIT_EEOT0_EUlSH_E_JjEEEDaOSH_DpRKNSG_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESH_SS_EUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOST_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_S5_EENS1_5StateIT_EEOT0_EUlSD_E_JjEEEDaOSD_DpRKNSC_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSD_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, (applesauce::CF::StringRef *)&v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v4);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v6;
  return result;
}

void sub_1B6024AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_S5_EENS1_5StateIT_EEOT0_EUlSD_E_JjEEEDaOSD_DpRKNSC_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSD_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, vp::vx::data_flow::Value **a2@<X1>, applesauce::CF::StringRef *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  CFTypeRef cf;

  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage(*a2);
  vp::services::User_Defaults::default_app(*(vp::services::User_Defaults **)(a1 + 8), (uint64_t)&v8);
  vp::services::User_Defaults::Domain::get<applesauce::CF::StringRef,applesauce::CF::StringRef,(decltype(nullptr))0>(&v8, (CFTypeRef *)a1, a3);
  if (cf)
    CFRelease(cf);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void vp::services::User_Defaults::default_app(vp::services::User_Defaults *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)this + 16))(&cf);
  vp::services::User_Defaults::app(this, &cf, a2);
  if (cf)
    CFRelease(cf);
}

void vp::services::User_Defaults::Domain::get<applesauce::CF::StringRef,applesauce::CF::StringRef,(decltype(nullptr))0>(_QWORD *a1@<X0>, CFTypeRef *a2@<X1>, applesauce::CF::StringRef *a3@<X8>)
{
  CFTypeRef v5;
  CFTypeRef cf;
  CFTypeRef v7;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v7 = v5;
  (*(void (**)(CFTypeRef *__return_ptr, _QWORD, _QWORD *, CFTypeRef *))(*(_QWORD *)*a1 + 32))(&cf, *a1, a1 + 2, &v7);
  if (cf)
  {
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&cf, a3);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
  if (v7)
    CFRelease(v7);
}

void sub_1B6024C5C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B6024C20);
}

double vp::services::User_Defaults::app@<D0>(vp::services::User_Defaults *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *service_provider;
  const void *v6;
  double result;
  __int128 v8;

  service_provider = (_QWORD *)vp::Service::get_service_provider(this);
  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(service_provider, &v8);
  v6 = *a2;
  if (v6)
    CFRetain(v6);
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v6;
  return result;
}

double __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = vp::vx::data_flow::State<void>::State(a1 + 40, a2 + 40).n128_u64[0];
  return result;
}

uint64_t __Block_byref_object_dispose__1(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 40);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void ___ZN2vp2vx29Voice_Processor_State_Manager30create_state_for_SIGHUP_signalEv_block_invoke(std::pmr *a1)
{
  uint64_t v1;
  uint64_t default_resource;
  int v3;
  std::pmr *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 40;
  default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v5, default_resource);
  vp::vx::data_flow::State<void>::get_value(v1, (vp::vx::data_flow::Value *)v5);
  v3 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  v5[0] = std::pmr::get_default_resource(v4);
  v5[1] = 0;
  v5[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5) = v3 + 1;
  vp::vx::data_flow::State<void>::set_value(v1, (uint64_t)v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
}

void sub_1B6024E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

void sub_1B6024E24(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6024DCCLL);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B8FB0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B8FB0;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B8FF8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B8FF8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E69B8FF8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B8FF8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  vp *v7;
  char v8;
  NSObject *log;
  vp *log_context_info;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void **v15;
  const char *v16;
  std::pmr *v17;
  uint64_t storage;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  std::pmr *v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 __src;
  std::pmr *default_resource;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint8_t buf[4];
  void **v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
  {
    v5 = (uint64_t (****)())vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  LOBYTE(__src) = 0;
  BYTE8(__src) = 0;
  default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v5);
  v35 = &v37;
  v36 = xmmword_1B6624BA0;
  LODWORD(__p[0]) = 0;
  v38 = std::pmr::get_default_resource(default_resource);
  v39 = &v41;
  v40 = xmmword_1B6624BA0;
  boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<vp::vx::Chat_Flavor*>((char *)&v38, (char *)__p, (char *)__p + 4);
  LODWORD(v42) = 0;
  BYTE4(v42) |= 1u;
  v43 = 1065353216;
  v7 = (vp *)(*(uint64_t (**)(_QWORD, uint64_t (****)(), __int128 *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v6, &__src);
  v8 = (char)v7;
  if ((_DWORD)v7)
  {
    *(_OWORD *)__p = __src;
    v23 = default_resource;
    v24 = &v26;
    v25 = xmmword_1B6624BA0;
    boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)&v23, (uint64_t)&default_resource);
    v27 = v38;
    v28 = &v30;
    v29 = xmmword_1B6624BA0;
    v5 = (uint64_t (****)())boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)&v27, (uint64_t)&v38);
    v31 = v42;
    v32 = v43;
  }
  else
  {
    log = vp::get_log(v7);
    v5 = (uint64_t (****)())os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v5)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v11 = (void *)HIBYTE(v23);
      v12 = __p[1];
      v13 = vp::get_log(log_context_info);
      v5 = (uint64_t (****)())os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v5)
      {
        if ((char)v11 >= 0)
          v14 = v11;
        else
          v14 = v12;
        v15 = (void **)__p[0];
        if (SHIBYTE(v23) >= 0)
          v15 = __p;
        if (v14)
          v16 = " ";
        else
          v16 = "";
        *(_DWORD *)buf = 136315394;
        v45 = v15;
        v46 = 2080;
        v47 = v16;
        _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%s%sfailed to get global configuration", buf, 0x16u);
      }
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
    }
  }
  if (*((_QWORD *)&v40 + 1))
    v5 = (uint64_t (****)())boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v38, v39);
  if (*((_QWORD *)&v36 + 1))
    v5 = (uint64_t (****)())boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&default_resource, v35);
  if ((v8 & 1) == 0)
  {
LABEL_25:
    LOBYTE(__p[0]) = 0;
    LOBYTE(__p[1]) = 0;
    v23 = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v5);
    v24 = &v26;
    v25 = xmmword_1B6624BA0;
    LODWORD(__src) = 0;
    v27 = std::pmr::get_default_resource(v23);
    v28 = &v30;
    v29 = xmmword_1B6624BA0;
    boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<vp::vx::Chat_Flavor*>((char *)&v27, (char *)&__src, (char *)&__src + 4);
    LODWORD(v31) = 0;
    BYTE4(v31) |= 1u;
    v32 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v17);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Global_Configuration>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_OWORD *)storage = *(_OWORD *)__p;
  *(_QWORD *)(storage + 16) = v23;
  *(_QWORD *)(storage + 24) = storage + 48;
  *(_OWORD *)(storage + 32) = xmmword_1B6624BA0;
  boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)(storage + 16), (uint64_t)&v23);
  *(_QWORD *)(storage + 56) = v27;
  *(_QWORD *)(storage + 64) = storage + 88;
  *(_OWORD *)(storage + 72) = xmmword_1B6624BA0;
  result = boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)(storage + 56), (uint64_t)&v27);
  v20 = v31;
  v21 = *((_QWORD *)&v29 + 1);
  *(_DWORD *)(storage + 104) = v32;
  *(_QWORD *)(storage + 96) = v20;
  if (v21)
    result = boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v27, v28);
  if (*((_QWORD *)&v25 + 1))
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v23, v24);
  return result;
}

void sub_1B6025420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 112, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 112, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

vp::vx::Global_Configuration *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::copy_value(uint64_t a1, vp::vx::Global_Configuration **a2, const vp::vx::Global_Configuration **a3)
{
  return vp::vx::Global_Configuration::Global_Configuration(*a2, *a3);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::move_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::Global_Configuration,vp::vx::Global_Configuration,vp::vx::Global_Configuration*>(*a2, *a3);
}

_QWORD *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::destroy_value(uint64_t a1, _QWORD **a2)
{
  return std::__destroy_at[abi:ne180100]<vp::vx::Global_Configuration,0>(*a2);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Global_Configuration>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Global_Configuration::operator==(*a2, *a3);
}

_QWORD *std::__destroy_at[abi:ne180100]<vp::vx::Global_Configuration,0>(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (result[10])
    result = boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(result + 7, (_QWORD *)result[8]);
  if (v1[5])
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(v1 + 2, (_QWORD *)v1[3]);
  return result;
}

uint64_t vp::vx::Global_Configuration::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 8) != 0) != (v4 != 0))
      return 0;
  }
  else if (*(double *)a1 != *(double *)a2)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 != *(_QWORD *)(a2 + 32))
    return 0;
  v7 = *(_DWORD **)(a1 + 24);
  if (v6 && !v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = *(_QWORD *)(a2 + 24);
  v14 = &v7[v6];
  v15 = v7;
  v13 = v8;
  result = boost::intrusive::algo_equal<boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::intrusive::algo_pred_equal>(&v15, &v14, &v13);
  if (!(_DWORD)result)
    return result;
  v10 = *(_QWORD *)(a1 + 72);
  if (v10 != *(_QWORD *)(a2 + 72))
    return 0;
  v11 = *(_DWORD **)(a1 + 64);
  if (v10 && !v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = *(_QWORD *)(a2 + 64);
  v14 = &v11[v10];
  v15 = v11;
  v13 = v12;
  result = boost::intrusive::algo_equal<boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::container::vec_iterator<vp::vx::Chat_Flavor *,true>,boost::intrusive::algo_pred_equal>(&v15, &v14, &v13);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && ((*(unsigned __int8 *)(a2 + 100) ^ *(unsigned __int8 *)(a1 + 100)) & 1) == 0)
    {
      return *(float *)(a1 + 104) == *(float *)(a2 + 104);
    }
    return 0;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B90A8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B90A8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor28get_preferred_io_cycle_usageEvENK3__0clEvEUlRKT_E_JNS3_20Global_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESC_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + 104);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B90F0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B90F0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9138;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9138;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_client_sample_rateENS2_6DomainEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9180;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9180;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_client_sample_rate_preferenceEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSE_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::pmr *v7;
  _QWORD *result;

  v3 = *a3;
  v4 = (uint64_t *)vp::vx::data_flow::Value::view_storage(**a2);
  v5 = *v4;
  v6 = v4[1];
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  result[1] = v6;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 16, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 16, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::copy_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 result;

  result = **a3;
  **a2 = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::move_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 result;

  result = **a3;
  **a2 = result;
  return result;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<std::optional<double>>::compare_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8))
    v3 = *(_BYTE *)(*(_QWORD *)a3 + 8) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(*(_QWORD *)a2 + 8) != 0) == (*(_BYTE *)(*(_QWORD *)a3 + 8) != 0);
  else
    return **(double **)a2 == **(double **)a3;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9230;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9230;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E69B9230;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B9230;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Uplink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  _QWORD *v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  std::pmr *v18;
  uint64_t storage;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];
  _QWORD **v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  void *__p[2];
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[25];
  _QWORD **v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint8_t buf[4];
  void **v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_22:
    LODWORD(v26) = 0;
    WORD2(v26) = 255;
    *((_QWORD *)&v26 + 1) = 100;
    LOBYTE(v27) = 0;
    BYTE8(v27) = 0;
    v28[0] = 0;
    v28[8] = 0;
    v28[16] = 0;
    v28[24] = 0;
    v30 = 0;
    v31 = 0;
    v29 = &v30;
    LOBYTE(v32) = 0;
    BYTE4(v32) = 0;
    BYTE8(v32) = 0;
    BYTE12(v32) = 0;
    v33 = 1;
    goto LABEL_25;
  }
  LODWORD(v36) = 0;
  WORD2(v36) = 255;
  *((_QWORD *)&v36 + 1) = 100;
  LOBYTE(v37) = 0;
  BYTE8(v37) = 0;
  v38[0] = 0;
  v38[8] = 0;
  v38[16] = 0;
  v38[24] = 0;
  v40 = 0;
  v41 = 0;
  v39 = &v40;
  LOBYTE(v42) = 0;
  BYTE4(v42) = 0;
  BYTE8(v42) = 0;
  BYTE12(v42) = 0;
  v43 = 1;
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 24))(v7, v6, &v36);
  if (!(_DWORD)v8)
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v12 = v35;
      v13 = __p[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        v16 = (void **)__p[0];
        if ((v35 & 0x80u) == 0)
          v16 = __p;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        *(_DWORD *)buf = 136315394;
        v45 = v16;
        v46 = 2080;
        v47 = v17;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%s%sfailed to get uplink configuration", buf, 0x16u);
      }
      if ((char)v35 < 0)
        operator delete(__p[0]);
    }
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v39, v40);
    goto LABEL_22;
  }
  v26 = v36;
  v27 = v37;
  *(_OWORD *)v28 = *(_OWORD *)v38;
  *(_OWORD *)&v28[9] = *(_OWORD *)&v38[9];
  v9 = v40;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  if (v41)
  {
    v40[2] = &v30;
    v9 = 0;
    v39 = &v40;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v29 = &v30;
  }
  v32 = v42;
  v33 = v43;
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v39, v9);
LABEL_25:
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v18);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Uplink_Configuration>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_OWORD *)(storage + 41) = *(_OWORD *)&v28[9];
  *(_OWORD *)(storage + 16) = v27;
  *(_OWORD *)(storage + 32) = *(_OWORD *)v28;
  *(_OWORD *)storage = v26;
  *(_QWORD *)(storage + 64) = v29;
  v20 = v30;
  *(_QWORD *)(storage + 72) = v30;
  v21 = storage + 72;
  v22 = v31;
  *(_QWORD *)(storage + 80) = v31;
  if (v22)
  {
    v23 = 0;
    v20[2] = v21;
    v29 = &v30;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    *(_QWORD *)(storage + 64) = v21;
    v23 = v30;
  }
  v24 = v32;
  *(_BYTE *)(storage + 104) = v33;
  *(_OWORD *)(storage + 88) = v24;
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&v29, v23);
  return result;
}

void sub_1B6025FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 112, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 112, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::copy_value(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a3;
  v6 = (*a3)[1];
  v7 = (*a3)[2];
  *(_OWORD *)(v3 + 41) = *(__int128 *)((char *)*a3 + 41);
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(_OWORD *)v3 = v5;
  std::map<double,int>::map[abi:ne180100]((uint64_t *)(v3 + 64), (uint64_t)(v4 + 4));
  result = *(__n128 *)((char *)v4 + 88);
  *(_BYTE *)(v3 + 104) = *((_BYTE *)v4 + 104);
  *(__n128 *)(v3 + 88) = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::move_value(uint64_t a1, uint64_t *a2, __int128 **a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a3;
  v6 = (*a3)[1];
  v7 = (*a3)[2];
  *(_OWORD *)(v3 + 41) = *(__int128 *)((char *)*a3 + 41);
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)v4 + 8);
  v8 = (_QWORD *)v4 + 9;
  v9 = *((_QWORD *)v4 + 9);
  *(_QWORD *)(v3 + 72) = v9;
  v10 = v3 + 72;
  v11 = *((_QWORD *)v4 + 10);
  *(_QWORD *)(v3 + 80) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *((_QWORD *)v4 + 8) = v8;
    *v8 = 0;
    *((_QWORD *)v4 + 10) = 0;
  }
  else
  {
    *(_QWORD *)(v3 + 64) = v10;
  }
  result = *(__n128 *)((char *)v4 + 88);
  *(_BYTE *)(v3 + 104) = *((_BYTE *)v4 + 104);
  *(__n128 *)(v3 + 88) = result;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::destroy_value(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy(*(_QWORD *)a2 + 64, *(_QWORD **)(*(_QWORD *)a2 + 72));
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Uplink_Configuration>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::Uplink_Configuration::operator==(*a2, *a3);
}

uint64_t vp::vx::Uplink_Configuration::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || ((*(_WORD *)(a2 + 4) ^ *(_WORD *)(a1 + 4)) & 0x1FF) != 0
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 24))
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 24) != 0) != (*(_BYTE *)(a2 + 24) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(a2 + 40))
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 40) != 0) != (*(_BYTE *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 56))
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 56) != 0) != (*(_BYTE *)(a2 + 56) != 0))
  {
    return 0;
  }
  result = std::operator==[abi:ne180100]<double,int,std::less<double>,std::allocator<std::pair<double const,int>>>((_QWORD *)(a1 + 64), (double **)(a2 + 64));
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 92) && *(_BYTE *)(a2 + 92))
  {
    if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
LABEL_25:
    if (*(_BYTE *)(a1 + 100) && *(_BYTE *)(a2 + 100))
    {
      if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 100) != 0) != (*(_BYTE *)(a2 + 100) != 0))
    {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104);
  }
  if ((*(_BYTE *)(a1 + 92) != 0) == (*(_BYTE *)(a2 + 92) != 0))
    goto LABEL_25;
  return 0;
}

uint64_t std::operator==[abi:ne180100]<double,int,std::less<double>,std::allocator<std::pair<double const,int>>>(_QWORD *a1, double **a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  BOOL v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;

  if ((double *)a1[2] != a2[2])
    return 0;
  v4 = (double *)*a1;
  v2 = (double *)(a1 + 1);
  v3 = v4;
  if (v4 == v2)
    return 1;
  v5 = *a2;
  do
  {
    v6 = v3[4] == v5[4] && *((_DWORD *)v3 + 10) == *((_DWORD *)v5 + 10);
    v7 = v6;
    if (!v6)
      break;
    v8 = (double *)*((_QWORD *)v3 + 1);
    v9 = v3;
    if (v8)
    {
      do
      {
        v3 = v8;
        v8 = *(double **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v3 = (double *)*((_QWORD *)v9 + 2);
        v6 = *(_QWORD *)v3 == (_QWORD)v9;
        v9 = v3;
      }
      while (!v6);
    }
    v10 = (double *)*((_QWORD *)v5 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(double **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (double *)*((_QWORD *)v5 + 2);
        v6 = *(_QWORD *)v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v6);
    }
    v5 = v11;
  }
  while (v3 != v2);
  return v7;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B92E0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B92E0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E69B92E0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B92E0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  NSObject *log;
  vp *log_context_info;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  void **v19;
  const char *v20;
  const char *v21;
  int v22;
  const char *v23;
  void *v24;
  std::pmr *v25;
  uint64_t storage;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  void *v35[4];
  _OWORD v36[2];
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  void *v47[4];
  _OWORD v48[2];
  _BYTE buf[12];
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_36;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)v39 = 0u;
  v43 = 1065353216;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  memset(v48, 0, 25);
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v7 + 40))(v7, v6, *(unsigned int *)(a1 + 32), v39);
  v9 = (char)v8;
  if ((_DWORD)v8)
  {
    *(_OWORD *)v27 = *(_OWORD *)v39;
    v39[0] = 0;
    v39[1] = 0;
    v10 = v40;
    v11 = v41;
    *(_QWORD *)&v41 = 0;
    v40 = 0uLL;
    v28 = v10;
    *(_QWORD *)&v29 = v11;
    *((_QWORD *)&v29 + 1) = *((_QWORD *)&v41 + 1);
    v30 = v42;
    v31 = v43;
    if (v42)
    {
      v12 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8);
      if (((unint64_t)v11 & ((_QWORD)v11 - 1)) != 0)
      {
        if (*((_QWORD *)&v11 + 1) >= (unint64_t)v11)
          v12 = *((_QWORD *)&v11 + 1) % (unint64_t)v11;
      }
      else
      {
        v12 = *((_QWORD *)&v11 + 1) & (v11 - 1);
      }
      *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v12) = (char *)&v29 + 8;
      *((_QWORD *)&v41 + 1) = 0;
      v42 = 0;
    }
    *(_QWORD *)&v33[0] = *(_QWORD *)&v45[0];
    v32 = v44;
    memset(v45, 0, sizeof(v45));
    v44 = 0uLL;
    *(_OWORD *)((char *)v33 + 8) = *(_OWORD *)((char *)v45 + 8);
    *((_QWORD *)&v33[1] + 1) = *((_QWORD *)&v45[1] + 1);
    v34 = v46;
    v46 = 0uLL;
    v24 = v47[0];
    memset(v47, 0, sizeof(v47));
    *(_OWORD *)&v35[1] = *(_OWORD *)&v47[1];
    v35[0] = v24;
    v35[3] = v47[3];
    v36[0] = v48[0];
    *(_QWORD *)&v36[1] = *(_QWORD *)&v48[1];
    memset(v48, 0, 24);
    BYTE8(v36[1]) = BYTE8(v48[1]);
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v15 = v38;
      v16 = __p[1];
      v17 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 0x80u) == 0)
          v18 = v15;
        else
          v18 = (unint64_t)v16;
        v19 = __p;
        if ((v38 & 0x80u) != 0)
          v19 = (void **)__p[0];
        if (v18)
          v20 = " ";
        else
          v20 = "";
        v21 = "hardware";
        v22 = *(_DWORD *)(a1 + 32);
        if (v22 == 1)
          v21 = "echo";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v19;
        v50 = 2080;
        v51 = v20;
        if (v22 == 2)
          v23 = "content";
        else
          v23 = v21;
        v52 = 2080;
        v53 = v23;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration for uplink %s DSP node", buf, 0x20u);
      }
      if ((char)v38 < 0)
        operator delete(__p[0]);
    }
  }
  *(_QWORD *)buf = v48;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v47[1])
  {
    v47[2] = v47[1];
    operator delete(v47[1]);
  }
  *(_QWORD *)buf = &v46;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)v45 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v44;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v40 + 8);
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  if ((v9 & 1) == 0)
  {
LABEL_36:
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)v27 = 0u;
    v31 = 1065353216;
    v32 = 0u;
    memset(v33, 0, sizeof(v33));
    v34 = 0u;
    memset(v35, 0, sizeof(v35));
    memset(v36, 0, 25);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v25);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_QWORD *)(storage + 16) = v28;
  *(_OWORD *)storage = *(_OWORD *)v27;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(storage + 24, (uint64_t *)&v28 + 1);
  *(_QWORD *)(storage + 80) = 0;
  *(_QWORD *)(storage + 88) = 0;
  *(_QWORD *)(storage + 64) = 0;
  *(_QWORD *)(storage + 72) = 0;
  *(_OWORD *)(storage + 64) = v32;
  *(_QWORD *)(storage + 80) = *(_QWORD *)&v33[0];
  v32 = 0uLL;
  *(_QWORD *)(storage + 96) = 0;
  *(_QWORD *)(storage + 104) = 0;
  *(_OWORD *)(storage + 88) = *(_OWORD *)((char *)v33 + 8);
  *(_QWORD *)(storage + 104) = *((_QWORD *)&v33[1] + 1);
  *(_QWORD *)(storage + 112) = 0;
  memset(v33, 0, sizeof(v33));
  *(_QWORD *)(storage + 120) = 0;
  *(_QWORD *)(storage + 128) = 0;
  *(_OWORD *)(storage + 112) = v34;
  v34 = 0uLL;
  *(void **)(storage + 128) = v35[0];
  *(_QWORD *)(storage + 136) = 0;
  *(_QWORD *)(storage + 144) = 0;
  *(_QWORD *)(storage + 152) = 0;
  *(_OWORD *)(storage + 136) = *(_OWORD *)&v35[1];
  *(void **)(storage + 152) = v35[3];
  *(_QWORD *)(storage + 160) = 0;
  memset(v35, 0, sizeof(v35));
  *(_QWORD *)(storage + 168) = 0;
  *(_QWORD *)(storage + 176) = 0;
  *(_OWORD *)(storage + 160) = v36[0];
  *(_QWORD *)(storage + 176) = *(_QWORD *)&v36[1];
  memset(v36, 0, 24);
  *(_BYTE *)(storage + 184) = BYTE8(v36[1]);
  v39[0] = v36;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  if (v35[1])
  {
    v35[2] = v35[1];
    operator delete(v35[1]);
  }
  v39[0] = &v34;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  v39[0] = (char *)v33 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  v39[0] = &v32;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v28 + 8);
}

void sub_1B60269DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39)
{
  a39 = &a31;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9328;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9328;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E69B9328;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B9328;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  NSObject *log;
  vp *log_context_info;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  unint64_t v17;
  void **v18;
  const char *v19;
  const char *v20;
  int v21;
  const char *v22;
  __int128 v23;
  unint64_t v24;
  std::pmr *v25;
  _OWORD *storage;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[25];
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;
  void *__p[2];
  unsigned __int8 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[25];
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint8_t buf[4];
  void **v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_38;
  LOBYTE(v41) = 0;
  BYTE8(v41) = 0;
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  LOBYTE(v43) = 0;
  BYTE8(v43) = 0;
  LOBYTE(v44) = 0;
  BYTE8(v44) = 0;
  v45[0] = 0;
  v45[8] = 0;
  v45[16] = 0;
  v45[24] = 0;
  v46 = 0u;
  v47 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 1065353216;
  v51 = 1065353216;
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(*(_QWORD *)v7 + 48))(v7, v6, *(unsigned int *)(a1 + 32), &v41);
  v9 = (char)v8;
  if ((_DWORD)v8)
  {
    v30 = v43;
    v31 = v44;
    *(_OWORD *)v32 = *(_OWORD *)v45;
    *(_OWORD *)&v32[9] = *(_OWORD *)&v45[9];
    v28 = v41;
    v29 = v42;
    v10 = v46;
    v46 = 0uLL;
    v33 = v10;
    v34 = v47;
    v35 = v48;
    if (*((_QWORD *)&v47 + 1))
    {
      v11 = *(_QWORD *)(v47 + 8);
      if ((*((_QWORD *)&v10 + 1) & (*((_QWORD *)&v10 + 1) - 1)) != 0)
      {
        if (v11 >= *((_QWORD *)&v10 + 1))
          v11 %= *((_QWORD *)&v10 + 1);
      }
      else
      {
        v11 &= *((_QWORD *)&v10 + 1) - 1;
      }
      *(_QWORD *)(v10 + 8 * v11) = &v34;
      v47 = 0uLL;
    }
    v23 = v49;
    v49 = 0uLL;
    v36 = v23;
    v37 = v50;
    v38 = v51;
    if (*((_QWORD *)&v50 + 1))
    {
      v24 = *(_QWORD *)(v50 + 8);
      if ((*((_QWORD *)&v23 + 1) & (*((_QWORD *)&v23 + 1) - 1)) != 0)
      {
        if (v24 >= *((_QWORD *)&v23 + 1))
          v24 %= *((_QWORD *)&v23 + 1);
      }
      else
      {
        v24 &= *((_QWORD *)&v23 + 1) - 1;
      }
      *(_QWORD *)(v23 + 8 * v24) = &v37;
      v50 = 0uLL;
    }
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v14 = v40;
      v15 = __p[1];
      v16 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if ((v14 & 0x80u) == 0)
          v17 = v14;
        else
          v17 = (unint64_t)v15;
        if ((v40 & 0x80u) == 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        if (v17)
          v19 = " ";
        else
          v19 = "";
        v20 = "hardware";
        v21 = *(_DWORD *)(a1 + 32);
        if (v21 == 1)
          v20 = "echo";
        *(_DWORD *)buf = 136315650;
        v53 = v18;
        v54 = 2080;
        v55 = v19;
        if (v21 == 2)
          v22 = "content";
        else
          v22 = v20;
        v56 = 2080;
        v57 = v22;
        _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration options for uplink %s DSP node", buf, 0x20u);
      }
      if ((char)v40 < 0)
        operator delete(__p[0]);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v49);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v46);
  if ((v9 & 1) == 0)
  {
LABEL_38:
    LOBYTE(v28) = 0;
    BYTE8(v28) = 0;
    LOBYTE(v29) = 0;
    BYTE8(v29) = 0;
    LOBYTE(v30) = 0;
    BYTE8(v30) = 0;
    LOBYTE(v31) = 0;
    BYTE8(v31) = 0;
    v32[0] = 0;
    v32[8] = 0;
    v32[16] = 0;
    v32[24] = 0;
    v33 = 0u;
    v34 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 1065353216;
    v38 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v25);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id;
  storage = (_OWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *storage = v28;
  storage[1] = v29;
  *(_OWORD *)((char *)storage + 73) = *(_OWORD *)&v32[9];
  storage[3] = v31;
  storage[4] = *(_OWORD *)v32;
  storage[2] = v30;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(storage + 6), (uint64_t *)&v33);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)storage + 136, (uint64_t *)&v36);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v36);
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v33);
}

void sub_1B6026F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 176, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 176, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

_OWORD *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::copy_value(uint64_t a1, _OWORD **a2, _OWORD **a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::DSP_Node_Configuration_Options,vp::vx::DSP_Node_Configuration_Options const&,vp::vx::DSP_Node_Configuration_Options*>(*a2, *a3);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::move_value(uint64_t a1, _OWORD **a2, uint64_t *a3)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_OWORD *)(*a3 + 48);
  v5 = *(_OWORD *)(*a3 + 64);
  v7 = *(_OWORD *)(*a3 + 32);
  *(_OWORD *)((char *)v3 + 73) = *(_OWORD *)(*a3 + 73);
  v3[3] = v6;
  v3[4] = v5;
  v3[2] = v7;
  v8 = *(_OWORD *)(v4 + 16);
  *v3 = *(_OWORD *)v4;
  v3[1] = v8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v3 + 6), (uint64_t *)(v4 + 96));
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)v3 + 136, (uint64_t *)(v4 + 136));
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::destroy_value(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(*a2 + 136);
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v2 + 96);
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::DSP_Node_Configuration_Options::operator==(*a2, *a3);
}

_OWORD *std::construct_at[abi:ne180100]<vp::vx::DSP_Node_Configuration_Options,vp::vx::DSP_Node_Configuration_Options const&,vp::vx::DSP_Node_Configuration_Options*>(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  a1[3] = v6;
  a1[4] = v7;
  a1[2] = v5;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)a1 + 136, (uint64_t)a2 + 136);
  return a1;
}

void sub_1B60270D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL vp::vx::DSP_Node_Configuration_Options::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  _BOOL8 result;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 8) != 0) != (v4 != 0))
      return 0;
  }
  else if (*(double *)a1 != *(double *)a2)
  {
    return 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 24) != 0) != (v6 != 0))
      return 0;
  }
  else if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(a2 + 40))
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 40) != 0) != (*(_BYTE *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 56))
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 56) != 0) != (*(_BYTE *)(a2 + 56) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 72) && *(_BYTE *)(a2 + 72))
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 72) != 0) != (*(_BYTE *)(a2 + 72) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a2 + 88))
  {
    if (*(double *)(a1 + 80) == *(double *)(a2 + 80))
      goto LABEL_35;
    return 0;
  }
  if ((*(_BYTE *)(a1 + 88) != 0) != (*(_BYTE *)(a2 + 88) != 0))
    return 0;
LABEL_35:
  result = std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(a1 + 96, (_QWORD *)(a2 + 96));
  if (result)
    return std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(a1 + 136, (_QWORD *)(a2 + 136));
  return result;
}

BOOL std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _BOOL8 v4;
  const void **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (uint64_t *)(a1 + 16);
  do
  {
    v3 = (uint64_t *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = (const void **)(v3 + 2);
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6)
      break;
    v7 = v6;
    v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0)
      v9 = *((unsigned __int8 *)v3 + 39);
    else
      v9 = v3[3];
    v10 = v6[39];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v6 + 3);
    if (v9 != v10)
      break;
    if (v11 >= 0)
      v12 = v6 + 16;
    else
      v12 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3]))
        return v4;
    }
    else if (*((_BYTE *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (*((_DWORD *)v3 + 10) == *((_DWORD *)v7 + 10));
  return v4;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B93D8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B93D8;
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  unsigned int *v6;
  vp *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  unsigned int v18;
  std::pmr *v19;
  unsigned int *result;
  void *__p[2];
  unsigned __int8 v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v8 = *v6;
  v9 = *(_DWORD *)v7;
  if (v8 != *(_DWORD *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v12 = v22;
      v13 = __p[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v16 = __p;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        *(_DWORD *)buf = 136315394;
        v24 = v16;
        v25 = 2080;
        v26 = v17;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference sample rates must be equal", buf, 0x16u);
      }
      if ((char)v22 < 0)
        operator delete(__p[0]);
    }
  }
  if (v8 <= v9)
    v18 = v9;
  else
    v18 = v8;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v19);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (unsigned int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v18;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B9420;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B9420;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  v4 = a1[1];
  v3 = (const void *)a1[2];
  *v2 = &off_1E69B9420;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (_QWORD)v3) >> 2);
  return v2;
}

void sub_1B6027698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E69B9420;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  std::pmr *v15;
  _DWORD *result;
  _OWORD v17[4];
  _BYTE v18[25];
  _BYTE v19[40];
  _BYTE v20[40];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v7[1];
  v17[0] = *v7;
  v17[1] = v10;
  v11 = v7[2];
  v12 = v7[3];
  v13 = v7[4];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)v7 + 73);
  v17[3] = v12;
  *(_OWORD *)v18 = v13;
  v17[2] = v11;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v19, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v20, (uint64_t)v7 + 136);
  v14 = (*(uint64_t (**)(_QWORD, _OWORD *, uint64_t, double))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v17, a1 + 16, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v19);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v15);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v14;
  return result;
}

void sub_1B602784C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9468;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9468;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  double *v7;
  uint64_t (****v8)();
  unsigned int *v9;
  double *v10;
  int v11;
  std::pmr *v12;
  _DWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v9 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, double, double))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *v9, *v7, *v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v12);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v11;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B94B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B94B0;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  double *v6;
  vp *v7;
  double v8;
  double v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  std::pmr *v18;
  double *result;
  void *__p[2];
  unsigned __int8 v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v8 = *v6;
  v9 = *(double *)v7;
  if (*v6 != *(double *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v12 = v21;
      v13 = __p[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        v16 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v16 = __p;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        *(_DWORD *)buf = 136315394;
        v23 = v16;
        v24 = 2080;
        v25 = v17;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference block sizes must be equal", buf, 0x16u);
      }
      if ((char)v21 < 0)
        operator delete(__p[0]);
    }
  }
  if (v8 < v9)
    v8 = v9;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v18);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B94F8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B94F8;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  double *v7;
  uint64_t (****v8)();
  unsigned int *v9;
  uint64_t (****v10)();
  _OWORD *v11;
  uint64_t (****v12)();
  double *v13;
  uint64_t (****v14)();
  double *v15;
  uint64_t (****v16)();
  _QWORD *v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  std::pmr *v25;
  double *result;
  _OWORD v27[4];
  _BYTE v28[25];
  _BYTE v29[40];
  _BYTE v30[56];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v9 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v11 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  else
    v15 = 0;
  v16 = v4[5];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id)
    v17 = (_QWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  else
    v17 = 0;
  v18 = *v7;
  v19 = *v9;
  v21 = v11[3];
  v20 = v11[4];
  v22 = v11[2];
  *(_OWORD *)&v28[9] = *(_OWORD *)((char *)v11 + 73);
  v27[3] = v21;
  *(_OWORD *)v28 = v20;
  v27[2] = v22;
  v23 = v11[1];
  v27[0] = *v11;
  v27[1] = v23;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v29, (uint64_t)(v11 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v30, (uint64_t)v11 + 136);
  v24 = (*(double (**)(_QWORD, uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD, double, double, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 1, v19, v27, *v17, v17[1], v18, *v13, *v15);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v30);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v29);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v25);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v24;
  return result;
}

void sub_1B6027DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9540;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9540;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  std::pmr *v6;
  int *result;

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(_BYTE *)(v4 + 92))
    v5 = *(_DWORD *)(v4 + 88);
  else
    v5 = 1852797549;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v6);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9588;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9588;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  std::pmr *v6;
  int *result;

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(_BYTE *)(v4 + 100))
    v5 = *(_DWORD *)(v4 + 96);
  else
    v5 = 127;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v6);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B95D0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B95D0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  double *v7;
  unint64_t v8;
  uint64_t v9;
  std::pmr *v10;
  uint64_t *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  LODWORD(v8) = *v6;
  if (COERCE_UNSIGNED_INT64(fabs((double)v8 * 1.25 / *v7)) >= 0x7FF0000000000000)
    v9 = 100;
  else
    v9 = (uint64_t)((double)v8 * 1.25 / *v7 * 1000.0);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10[0] = &off_1E69B9618;
  v10[1] = 0;
  v11 = v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9618;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9618;
  a2[1] = v2;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9660;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9660;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  uint64_t (****v7)();
  uint64_t (****v8)();
  uint64_t (****v9)();
  uint64_t (****v10)();
  uint64_t (****v11)();
  uint64_t (****v12)();
  unsigned int *v13;
  uint64_t (****v14)();
  unsigned int *v15;
  uint64_t (****v16)();
  unsigned int *v17;
  uint64_t (****v18)();
  unsigned int *v19;
  uint64_t (****v20)();
  _DWORD *v21;
  uint64_t (****v22)();
  _DWORD *v23;
  uint64_t (****v24)();
  _DWORD *v25;
  uint64_t (****v26)();
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  std::pmr *v30;
  _DWORD *result;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  unsigned int *v36;
  unsigned int *v37;
  double *v38;
  double *v39;
  uint64_t v41;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Uplink_Configuration>(void)::s_type_id)
    v41 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v41 = 0;
  v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v39 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v39 = 0;
  v7 = v3[2];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v38 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v38 = 0;
  v8 = v3[3];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v37 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v37 = 0;
  v9 = v3[4];
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v36 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  else
    v36 = 0;
  v10 = v3[5];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v35 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v35 = 0;
  v11 = v3[6];
  if (v11[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v34 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  else
    v34 = 0;
  v12 = v3[7];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v3[8];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v15 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  else
    v15 = 0;
  v16 = v3[9];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v17 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  else
    v17 = 0;
  v18 = v3[10];
  if (v18[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v19 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v18);
  else
    v19 = 0;
  v20 = v3[11];
  if (v20[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v21 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v20);
  else
    v21 = 0;
  v22 = v3[12];
  if (v22[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v23 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v22);
  else
    v23 = 0;
  v24 = v3[13];
  if (v24[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v25 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v24);
  else
    v25 = 0;
  v26 = v3[14];
  if (v26[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v27 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v26);
  else
    v27 = 0;
  v28 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[15]);
  HIDWORD(v33) = *v27;
  HIDWORD(v32) = *v23;
  LODWORD(v33) = *v25;
  LODWORD(v32) = *v21;
  v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, uint64_t, uint64_t, _DWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v41, *v37, *v36, *v13, *v15, *v17, *v19, *v39, *v38, *v35, *v34, v32, v33, *v28);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v30);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v29;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B96A8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B96A8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  int *v6;
  float v7;
  std::pmr *v8;
  float *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<int>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (double)*v6 / *(double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v8);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v7;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B96F0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B96F0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + 8);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9738;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9738;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9780;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9780;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B97C8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B97C8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E69B97C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B97C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int v14;
  NSObject *log;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  void **v21;
  const char *v22;
  std::pmr *v23;
  uint64_t result;
  __int16 v25;
  char v26;
  __int16 v27;
  char v28;
  __int16 v29;
  char v30;
  void *__p[2];
  unsigned __int8 v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  __int16 v37;
  uint8_t v38;
  char v39;
  __int16 v40;
  char v41;
  char v42;
  __int16 v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  int v48;
  uint8_t buf[4];
  void **v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
LABEL_22:
    v14 = 1108869120;
    goto LABEL_23;
  }
  v33 = 0;
  v36 = 0;
  v39 = 0;
  v42 = 0;
  v45 = 0;
  v48 = 1108869120;
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v7 + 32))(v7, v6, &v33);
  if ((v8 & 1) == 0)
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v17 = v32;
      v18 = __p[1];
      v19 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        if ((v17 & 0x80u) == 0)
          v20 = v17;
        else
          v20 = (unint64_t)v18;
        v21 = (void **)__p[0];
        if ((v32 & 0x80u) == 0)
          v21 = __p;
        if (v20)
          v22 = " ";
        else
          v22 = "";
        *(_DWORD *)buf = 136315394;
        v50 = v21;
        v51 = 2080;
        v52 = v22;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to get downlink configuration", buf, 0x16u);
      }
      if ((char)v32 < 0)
        operator delete(__p[0]);
    }
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_22;
  }
  v9 = v33;
  LOWORD(__p[0]) = v34;
  BYTE2(__p[0]) = v35;
  v10 = v36;
  *(_WORD *)buf = v37;
  buf[2] = v38;
  v11 = v39;
  v29 = v40;
  v30 = v41;
  v12 = v42;
  v28 = v44;
  v27 = v43;
  v13 = v45;
  v26 = v47;
  v25 = v46;
  v14 = v48;
LABEL_23:
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v23);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Downlink_Configuration>(void)::s_type_id;
  result = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_BYTE *)result = v9;
  *(_WORD *)(result + 1) = __p[0];
  *(_BYTE *)(result + 3) = BYTE2(__p[0]);
  *(_BYTE *)(result + 4) = v10;
  *(_WORD *)(result + 5) = *(_WORD *)buf;
  *(_BYTE *)(result + 7) = buf[2];
  *(_BYTE *)(result + 8) = v11;
  *(_WORD *)(result + 9) = v29;
  *(_BYTE *)(result + 11) = v30;
  *(_BYTE *)(result + 12) = v12;
  *(_BYTE *)(result + 15) = v28;
  *(_WORD *)(result + 13) = v27;
  *(_BYTE *)(result + 16) = v13;
  *(_BYTE *)(result + 19) = v26;
  *(_WORD *)(result + 17) = v25;
  *(_DWORD *)(result + 20) = v14;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 24, 4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 24, 4);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::copy_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 *v3;
  __n128 result;

  v3 = *a2;
  result = **a3;
  v3[1].n128_u64[0] = (*a3)[1].n128_u64[0];
  *v3 = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::move_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  __n128 *v3;
  __n128 result;

  v3 = *a2;
  result = **a3;
  v3[1].n128_u64[0] = (*a3)[1].n128_u64[0];
  *v3 = result;
  return result;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::compare_value(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  return vp::vx::Downlink_Configuration::operator==(*a2, *a3);
}

BOOL vp::vx::Downlink_Configuration::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;

  if (*a1 != *a2)
    return 0;
  v2 = a2[8];
  if (a1[8])
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((a1[8] != 0) != (v2 != 0))
      return 0;
  }
  else if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
  {
    return 0;
  }
  if (a1[16] && a2[16])
  {
    if (*((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3))
      return 0;
  }
  else if ((a1[16] != 0) != (a2[16] != 0))
  {
    return 0;
  }
  return *((float *)a1 + 5) == *((float *)a2 + 5);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9878;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9878;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E69B9878;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B9878;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  NSObject *log;
  vp *log_context_info;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  void **v19;
  const char *v20;
  unsigned int v21;
  const char *v22;
  void *v23;
  std::pmr *v24;
  uint64_t storage;
  void *v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  void *v34[4];
  _OWORD v35[2];
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  void *v46[4];
  _OWORD v47[2];
  _BYTE buf[12];
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_34;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)v38 = 0u;
  v42 = 1065353216;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  memset(v47, 0, 25);
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v7 + 56))(v7, v6, *(unsigned int *)(a1 + 32), v38);
  v9 = (char)v8;
  if ((_DWORD)v8)
  {
    *(_OWORD *)v26 = *(_OWORD *)v38;
    v38[0] = 0;
    v38[1] = 0;
    v10 = v39;
    v11 = v40;
    *(_QWORD *)&v40 = 0;
    v39 = 0uLL;
    v27 = v10;
    *(_QWORD *)&v28 = v11;
    *((_QWORD *)&v28 + 1) = *((_QWORD *)&v40 + 1);
    v29 = v41;
    v30 = v42;
    if (v41)
    {
      v12 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8);
      if (((unint64_t)v11 & ((_QWORD)v11 - 1)) != 0)
      {
        if (*((_QWORD *)&v11 + 1) >= (unint64_t)v11)
          v12 = *((_QWORD *)&v11 + 1) % (unint64_t)v11;
      }
      else
      {
        v12 = *((_QWORD *)&v11 + 1) & (v11 - 1);
      }
      *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v12) = (char *)&v28 + 8;
      *((_QWORD *)&v40 + 1) = 0;
      v41 = 0;
    }
    *(_QWORD *)&v32[0] = *(_QWORD *)&v44[0];
    v31 = v43;
    memset(v44, 0, sizeof(v44));
    v43 = 0uLL;
    *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)((char *)v44 + 8);
    *((_QWORD *)&v32[1] + 1) = *((_QWORD *)&v44[1] + 1);
    v33 = v45;
    v45 = 0uLL;
    v23 = v46[0];
    memset(v46, 0, sizeof(v46));
    *(_OWORD *)&v34[1] = *(_OWORD *)&v46[1];
    v34[0] = v23;
    v34[3] = v46[3];
    v35[0] = v47[0];
    *(_QWORD *)&v35[1] = *(_QWORD *)&v47[1];
    memset(v47, 0, 24);
    BYTE8(v35[1]) = BYTE8(v47[1]);
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v15 = v37;
      v16 = __p[1];
      v17 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 0x80u) == 0)
          v18 = v15;
        else
          v18 = (unint64_t)v16;
        v19 = __p;
        if ((v37 & 0x80u) != 0)
          v19 = (void **)__p[0];
        if (v18)
          v20 = " ";
        else
          v20 = "";
        v21 = *(_DWORD *)(a1 + 32) - 1;
        if (v21 > 2)
          v22 = "voice mix";
        else
          v22 = off_1E69BE538[v21];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v19;
        v49 = 2080;
        v50 = v20;
        v51 = 2080;
        v52 = v22;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration for downlink %s DSP node", buf, 0x20u);
      }
      if ((char)v37 < 0)
        operator delete(__p[0]);
    }
  }
  *(_QWORD *)buf = v47;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v46[1])
  {
    v46[2] = v46[1];
    operator delete(v46[1]);
  }
  *(_QWORD *)buf = &v45;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)v44 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v43;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v39 + 8);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if ((v9 & 1) == 0)
  {
LABEL_34:
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v26 = 0u;
    v30 = 1065353216;
    v31 = 0u;
    memset(v32, 0, sizeof(v32));
    v33 = 0u;
    memset(v34, 0, sizeof(v34));
    memset(v35, 0, 25);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v24);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_QWORD *)(storage + 16) = v27;
  *(_OWORD *)storage = *(_OWORD *)v26;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(storage + 24, (uint64_t *)&v27 + 1);
  *(_QWORD *)(storage + 80) = 0;
  *(_QWORD *)(storage + 88) = 0;
  *(_QWORD *)(storage + 64) = 0;
  *(_QWORD *)(storage + 72) = 0;
  *(_OWORD *)(storage + 64) = v31;
  *(_QWORD *)(storage + 80) = *(_QWORD *)&v32[0];
  v31 = 0uLL;
  *(_QWORD *)(storage + 96) = 0;
  *(_QWORD *)(storage + 104) = 0;
  *(_OWORD *)(storage + 88) = *(_OWORD *)((char *)v32 + 8);
  *(_QWORD *)(storage + 104) = *((_QWORD *)&v32[1] + 1);
  *(_QWORD *)(storage + 112) = 0;
  memset(v32, 0, sizeof(v32));
  *(_QWORD *)(storage + 120) = 0;
  *(_QWORD *)(storage + 128) = 0;
  *(_OWORD *)(storage + 112) = v33;
  v33 = 0uLL;
  *(void **)(storage + 128) = v34[0];
  *(_QWORD *)(storage + 136) = 0;
  *(_QWORD *)(storage + 144) = 0;
  *(_QWORD *)(storage + 152) = 0;
  *(_OWORD *)(storage + 136) = *(_OWORD *)&v34[1];
  *(void **)(storage + 152) = v34[3];
  *(_QWORD *)(storage + 160) = 0;
  memset(v34, 0, sizeof(v34));
  *(_QWORD *)(storage + 168) = 0;
  *(_QWORD *)(storage + 176) = 0;
  *(_OWORD *)(storage + 160) = v35[0];
  *(_QWORD *)(storage + 176) = *(_QWORD *)&v35[1];
  memset(v35, 0, 24);
  *(_BYTE *)(storage + 184) = BYTE8(v35[1]);
  v38[0] = v35;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  if (v34[1])
  {
    v34[2] = v34[1];
    operator delete(v34[1]);
  }
  v38[0] = &v33;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  v38[0] = (char *)v32 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  v38[0] = &v31;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v27 + 8);
}

void sub_1B60294EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39)
{
  a39 = &a31;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B98C0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B98C0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E69B98C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69B98C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  vp *v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  NSObject *log;
  vp *log_context_info;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  unint64_t v17;
  void **v18;
  const char *v19;
  unsigned int v20;
  const char *v21;
  __int128 v22;
  unint64_t v23;
  std::pmr *v24;
  _OWORD *storage;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[25];
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  void *__p[2];
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[25];
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint8_t buf[4];
  void **v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_36;
  LOBYTE(v40) = 0;
  BYTE8(v40) = 0;
  LOBYTE(v41) = 0;
  BYTE8(v41) = 0;
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  LOBYTE(v43) = 0;
  BYTE8(v43) = 0;
  v44[0] = 0;
  v44[8] = 0;
  v44[16] = 0;
  v44[24] = 0;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v47 = 1065353216;
  v50 = 1065353216;
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(*(_QWORD *)v7 + 64))(v7, v6, *(unsigned int *)(a1 + 32), &v40);
  v9 = (char)v8;
  if ((_DWORD)v8)
  {
    v29 = v42;
    v30 = v43;
    *(_OWORD *)v31 = *(_OWORD *)v44;
    *(_OWORD *)&v31[9] = *(_OWORD *)&v44[9];
    v27 = v40;
    v28 = v41;
    v10 = v45;
    v45 = 0uLL;
    v32 = v10;
    v33 = v46;
    v34 = v47;
    if (*((_QWORD *)&v46 + 1))
    {
      v11 = *(_QWORD *)(v46 + 8);
      if ((*((_QWORD *)&v10 + 1) & (*((_QWORD *)&v10 + 1) - 1)) != 0)
      {
        if (v11 >= *((_QWORD *)&v10 + 1))
          v11 %= *((_QWORD *)&v10 + 1);
      }
      else
      {
        v11 &= *((_QWORD *)&v10 + 1) - 1;
      }
      *(_QWORD *)(v10 + 8 * v11) = &v33;
      v46 = 0uLL;
    }
    v22 = v48;
    v48 = 0uLL;
    v35 = v22;
    v36 = v49;
    v37 = v50;
    if (*((_QWORD *)&v49 + 1))
    {
      v23 = *(_QWORD *)(v49 + 8);
      if ((*((_QWORD *)&v22 + 1) & (*((_QWORD *)&v22 + 1) - 1)) != 0)
      {
        if (v23 >= *((_QWORD *)&v22 + 1))
          v23 %= *((_QWORD *)&v22 + 1);
      }
      else
      {
        v23 &= *((_QWORD *)&v22 + 1) - 1;
      }
      *(_QWORD *)(v22 + 8 * v23) = &v36;
      v49 = 0uLL;
    }
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v14 = v39;
      v15 = __p[1];
      v16 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if ((v14 & 0x80u) == 0)
          v17 = v14;
        else
          v17 = (unint64_t)v15;
        if ((v39 & 0x80u) == 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        if (v17)
          v19 = " ";
        else
          v19 = "";
        v20 = *(_DWORD *)(a1 + 32) - 1;
        if (v20 > 2)
          v21 = "voice mix";
        else
          v21 = off_1E69BE538[v20];
        *(_DWORD *)buf = 136315650;
        v52 = v18;
        v53 = 2080;
        v54 = v19;
        v55 = 2080;
        v56 = v21;
        _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration options for downlink %s DSP node", buf, 0x20u);
      }
      if ((char)v39 < 0)
        operator delete(__p[0]);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v48);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v45);
  if ((v9 & 1) == 0)
  {
LABEL_36:
    LOBYTE(v27) = 0;
    BYTE8(v27) = 0;
    LOBYTE(v28) = 0;
    BYTE8(v28) = 0;
    LOBYTE(v29) = 0;
    BYTE8(v29) = 0;
    LOBYTE(v30) = 0;
    BYTE8(v30) = 0;
    v31[0] = 0;
    v31[8] = 0;
    v31[16] = 0;
    v31[24] = 0;
    v32 = 0u;
    v33 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 1065353216;
    v37 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v24);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id;
  storage = (_OWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *storage = v27;
  storage[1] = v28;
  *(_OWORD *)((char *)storage + 73) = *(_OWORD *)&v31[9];
  storage[3] = v30;
  storage[4] = *(_OWORD *)v31;
  storage[2] = v29;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(storage + 6), (uint64_t *)&v32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)storage + 136, (uint64_t *)&v35);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v35);
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v32);
}

void sub_1B6029A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9908;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9908;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  double *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  unsigned int *v11;
  uint64_t (****v12)();
  unsigned __int8 *v13;
  uint64_t (****v14)();
  double *v15;
  unsigned int *v16;
  int v17;
  std::pmr *v18;
  _DWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v13 = (unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  else
    v15 = 0;
  v16 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[5]);
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *v11, *v13, *v16, *v7, *v9, *v15);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v18);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v17;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B9950;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B9950;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  v4 = a1[1];
  v3 = (const void *)a1[2];
  *v2 = &off_1E69B9950;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (_QWORD)v3) >> 2);
  return v2;
}

void sub_1B6029CFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E69B9950;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  double *v11;
  uint64_t (****v12)();
  unsigned int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  std::pmr *v19;
  _DWORD *result;
  _OWORD v21[4];
  _BYTE v22[25];
  _BYTE v23[40];
  _BYTE v24[40];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v7[1];
  v21[0] = *v7;
  v21[1] = v14;
  v15 = v7[2];
  v16 = v7[3];
  v17 = v7[4];
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 73);
  v21[3] = v16;
  *(_OWORD *)v22 = v17;
  v21[2] = v15;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v23, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v24, (uint64_t)v7 + 136);
  v18 = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD, uint64_t, double, double))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v21, *v13, a1 + 16, *v9, *v11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v23);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v19);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v18;
  return result;
}

void sub_1B6029F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9998;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9998;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  unsigned int *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  std::pmr *v17;
  _DWORD *result;
  _OWORD v19[4];
  _BYTE v20[25];
  _BYTE v21[40];
  _BYTE v22[40];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v7[1];
  v19[0] = *v7;
  v19[1] = v12;
  v13 = v7[2];
  v14 = v7[3];
  v15 = v7[4];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v7 + 73);
  v19[3] = v14;
  *(_OWORD *)v20 = v15;
  v19[2] = v13;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v21, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v22, (uint64_t)v7 + 136);
  v16 = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD, double))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), v19, *v11, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v21);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v17);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v16;
  return result;
}

void sub_1B602A0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B99E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69B99E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  v4 = a1[1];
  v3 = (const void *)a1[2];
  *v2 = &off_1E69B99E0;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (_QWORD)v3) >> 2);
  return v2;
}

void sub_1B602A1CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E69B99E0;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  unsigned int *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  std::pmr *v17;
  _DWORD *result;
  _OWORD v19[4];
  _BYTE v20[25];
  _BYTE v21[40];
  _BYTE v22[40];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v7[1];
  v19[0] = *v7;
  v19[1] = v12;
  v13 = v7[2];
  v14 = v7[3];
  v15 = v7[4];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v7 + 73);
  v19[3] = v14;
  *(_OWORD *)v20 = v15;
  v19[2] = v13;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v21, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v22, (uint64_t)v7 + 136);
  v16 = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD, uint64_t, double))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v19, *v11, a1 + 16, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v21);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v17);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v16;
  return result;
}

void sub_1B602A3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9A28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9A28;
  a2[1] = v2;
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  double *v11;
  uint64_t (****v12)();
  unsigned int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  std::pmr *v19;
  _BYTE *result;
  _OWORD v21[4];
  _BYTE v22[25];
  _BYTE v23[40];
  _BYTE v24[40];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v7[1];
  v21[0] = *v7;
  v21[1] = v14;
  v15 = v7[2];
  v16 = v7[3];
  v17 = v7[4];
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 73);
  v21[3] = v16;
  *(_OWORD *)v22 = v17;
  v21[2] = v15;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v23, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v24, (uint64_t)v7 + 136);
  v18 = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD, double, double))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v21, *v13, *v9, *v11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v23);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v19);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v18;
  return result;
}

void sub_1B602A5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9A70;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9A70;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::pmr *v10;
  _QWORD *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*(_BYTE *)(v6 + 8))
    v8 = (uint64_t *)v6;
  else
    v8 = (uint64_t *)v7;
  v9 = *v8;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69B9AB8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69B9AB8;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _OWORD *v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  double *v11;
  uint64_t (****v12)();
  double *v13;
  uint64_t (****v14)();
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  std::pmr *v21;
  double *result;
  _OWORD v23[4];
  _BYTE v24[25];
  _BYTE v25[40];
  _BYTE v26[56];

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id)
    v15 = (_QWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  else
    v15 = 0;
  v16 = v7[1];
  v23[0] = *v7;
  v23[1] = v16;
  v17 = v7[2];
  v18 = v7[3];
  v19 = v7[4];
  *(_OWORD *)&v24[9] = *(_OWORD *)((char *)v7 + 73);
  v23[3] = v18;
  *(_OWORD *)v24 = v19;
  v23[2] = v17;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v25, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v26, (uint64_t)v7 + 136);
  v20 = (*(double (**)(_QWORD, uint64_t, _OWORD *, _QWORD, _QWORD, double, double, double))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 1, v23, *v15, v15[1], *v9, *v11, *v13);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v26);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v25);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v21);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v20;
  return result;
}

void sub_1B602A8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9B00;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9B00;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9B48;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9B48;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9B90;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9B90;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  std::pmr *v6;
  int *result;

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(_BYTE *)(v4 + 8))
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 1852797549;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v6);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9BD8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9BD8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  std::pmr *v6;
  int *result;

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(_BYTE *)(v4 + 16))
    v5 = *(_DWORD *)(v4 + 12);
  else
    v5 = 127;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v6);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9C20;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9C20;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  double *v7;
  unint64_t v8;
  uint64_t v9;
  std::pmr *v10;
  uint64_t *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  LODWORD(v8) = *v6;
  if (COERCE_UNSIGNED_INT64(fabs((double)v8 * 1.25 / *v7)) >= 0x7FF0000000000000)
    v9 = 100;
  else
    v9 = (uint64_t)((double)v8 * 1.25 / *v7 * 1000.0);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9C68;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9C68;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  float v7;
  std::pmr *v8;
  float *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Downlink_Configuration>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = fminf(0.0- (float)((float)(1.0 - *(float *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]))* *(float *)(v6 + 20)), 0.0);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v8);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v7;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9CB0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9CB0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9CF8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9CF8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  std::pmr *v11;
  int *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*v6 == 4)
    v8 = 5;
  else
    v8 = 0;
  if (*v6 == 2)
    v9 = 4;
  else
    v9 = v8;
  if ((v7 & 0x100000000) != 0)
    v10 = v9;
  else
    v10 = 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v11);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9D40;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9D40;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = *(_BYTE *)(vp::vx::data_flow::Value::view_storage(**a2) + 4) & 1;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9D88;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9D88;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  BOOL v4;
  std::pmr *v5;
  BOOL *result;

  v3 = *a3;
  v4 = *(_BYTE *)vp::vx::data_flow::Value::view_storage(**a2) != 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (BOOL *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9DD0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9DD0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + 4);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingLevel>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::copy_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::move_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::compare_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9E80;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9E80;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v4;
  int v5;
  BOOL v6;
  std::pmr *v7;
  BOOL *result;

  v4 = *a3;
  v5 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  if (v5 == 2)
  {
    v6 = 1;
  }
  else if (v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 8) != 3;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v7);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (BOOL *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v6;
  return result;
}

_QWORD *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69B9EC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69B9EC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69B9EC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69B9EC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  char v15;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v6 = *a2;
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        if (*a3)
          v10 = "should";
        else
          v10 = "should not";
        caulk::make_string((caulk *)"%s use internal reference", (uint64_t)__p, v10);
        v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v9 + 24))(v9, v6, __p);
        if (v15 && v14 < 0)
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9F10;
  vp::Context::~Context((vp::Context *)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69B9F10;
  vp::Context::~Context((vp::Context *)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0xD0uLL);
  *v3 = &off_1E69B9F10;
  vp::Context::Context((uint64_t)(v3 + 1), v2);
  v3[25] = *(_QWORD *)(a1 + 200);
  return v3;
}

void sub_1B602B6F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_1E69B9F10;
  result = vp::Context::Context((uint64_t)(a2 + 1), a1 + 8);
  a2[25] = *(_QWORD *)(a1 + 200);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7destroyEv(uint64_t a1)
{
  vp::Context::~Context((vp::Context *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE18destroy_deallocateEv(uint64_t a1)
{
  vp::Context::~Context((vp::Context *)(a1 + 8));
  operator delete((void *)a1);
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;
  char v10;
  BOOL v11;
  std::pmr *v12;
  char *result;
  CFTypeRef cf;

  v4 = *a3;
  v5 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage(**a2);
  v6 = *(unsigned __int8 *)(a1 + 24);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "Carrier");
  v7 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(a1 + 16), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  if (v5)
  {
    v8 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 204))
      v9 = *(_DWORD *)(a1 + 200) > 6u;
    else
      v9 = 0;
    v8 = v9;
  }
  if ((v8 & (v6 | v7)) != 0)
  {
    v10 = 1;
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 176))
      v11 = *(_DWORD *)(a1 + 172) > 6u;
    else
      v11 = 0;
    v10 = v11;
  }
  else
  {
    v10 = 0;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v12);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (char *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9F58;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9F58;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _BYTE *v7;
  uint64_t (****v8)();
  _BYTE *v9;
  char v10;
  BOOL v11;
  std::pmr *v12;
  char *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v7 = (_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v9 = (_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v10 = 0;
  }
  else
  {
    if (*v9)
      v11 = 1;
    else
      v11 = *v7 == 0;
    v10 = !v11;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v12);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (char *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9FA0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9FA0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _BYTE *v7;
  uint64_t (****v8)();
  _BYTE *v9;
  char v10;
  BOOL v11;
  std::pmr *v12;
  char *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v7 = (_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v9 = (_BYTE *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v10 = 0;
  }
  else
  {
    if (*v9)
      v11 = 1;
    else
      v11 = *v7 == 0;
    v10 = !v11;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v12);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (char *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69B9FE8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69B9FE8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = *(_BYTE *)(vp::vx::data_flow::Value::view_storage(**a2) + 100) & 1;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

_QWORD *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BA030;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BA030;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA030;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  char v15;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v6 = *a2;
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        if (*a3)
          v10 = "should";
        else
          v10 = "should not";
        caulk::make_string((caulk *)"%s fade audio buffers", (uint64_t)__p, v10);
        v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v9 + 16))(v9, v6, __p);
        if (v15 && v14 < 0)
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA078;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA078;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = *(_BYTE *)(vp::vx::data_flow::Value::view_storage(**a2) + 104);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

_QWORD *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BA0C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BA0C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA0C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA0C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  char v15;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v6 = *a2;
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        if (*a3)
          v10 = "should";
        else
          v10 = "should not";
        caulk::make_string((caulk *)"%s wire uplink microphone clip data", (uint64_t)__p, v10);
        v15 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v9 + 24))(v9, v6, __p);
        if (v15 && v14 < 0)
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

__n128 std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<float>,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void *v4;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
      result.n128_u64[0] = std::vector<float>::__move_assign(a1, a2).n128_u64[0];
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E69BA108;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E69BA108;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BA108;
  std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B602C250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA108;
  return std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7destroyEv(uint64_t a1)
{
  void *v1;

  if (*(_BYTE *)(a1 + 32))
  {
    v1 = *(void **)(a1 + 8);
    if (v1)
    {
      *(_QWORD *)(a1 + 16) = v1;
      operator delete(v1);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  if (*((_BYTE *)__p + 32))
  {
    v2 = (void *)__p[1];
    if (v2)
    {
      __p[2] = v2;
      operator delete(v2);
    }
  }
  operator delete(__p);
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EEclEOS16_OS17_(CFDictionaryRef CFDictionaryRef, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _DWORD *v7;
  uint64_t (****v8)();
  uint64_t v9;
  uint64_t (****v10)();
  uint64_t v11;
  uint64_t (****v12)();
  CFArrayRef *v13;
  const UInt8 *v14;
  CFIndex v15;
  uint64_t v16;
  CFDataRef v17;
  UInt8 *v18;
  uint64_t v19;
  uint64_t v20;
  CFDataRef v21;
  const UInt8 *v22;
  uint64_t v23;
  CFIndex v24;
  CFDataRef v25;
  std::pmr *v26;
  CFDictionaryRef *result;
  std::runtime_error *exception;
  std::runtime_error *v29;
  std::runtime_error *v30;
  CFTypeRef v31;
  CFTypeRef *v32;
  uint64_t v33;
  char v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef cf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id)
    v7 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id)
    v9 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id)
    v11 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id)
    v13 = (CFArrayRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  if (*v7 != 1)
    goto LABEL_56;
  if (*((_BYTE *)CFDictionaryRef + 32))
  {
    v14 = (const UInt8 *)*((_QWORD *)CFDictionaryRef + 1);
    v15 = *((_QWORD *)CFDictionaryRef + 2) - (_QWORD)v14;
    LODWORD(v16) = *(_DWORD *)(v9 + 28);
    v16 = (*(_BYTE *)(v9 + 12) & 0x20) != 0 ? v16 : 1;
    if (v16 == v15 >> 2)
    {
      v17 = CFDataCreate(0, v14, v15);
      if (!v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v35, v17);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v37, "Data", &v35);
      v32 = &v37;
      v33 = 1;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v32);
      if (cf)
        CFRelease(cf);
      if (v37)
        CFRelease(v37);
      if (v35)
        CFRelease(v35);
      goto LABEL_57;
    }
  }
  if (!*v13 || (vp::vx::trim_gains_parse_cf(v13, (uint64_t)&v32), !v34))
  {
LABEL_44:
    v22 = *(const UInt8 **)v11;
    v23 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)v11 != v23)
    {
      v24 = v23 - (_QWORD)v22;
      LODWORD(v23) = *(_DWORD *)(v9 + 28);
      v23 = (*(_BYTE *)(v9 + 12) & 0x20) != 0 ? v23 : 1;
      if (v23 == v24 >> 2)
      {
        v25 = CFDataCreate(0, v22, v24);
        if (!v25)
        {
          v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v29, "Could not construct");
        }
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v35, v25);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v37, "Data", &v35);
        v32 = &v37;
        v33 = 1;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v32);
        if (cf)
          CFRelease(cf);
        if (v37)
          CFRelease(v37);
        if (v35)
          CFRelease(v35);
        goto LABEL_57;
      }
    }
LABEL_56:
    CFDictionaryRef = 0;
    goto LABEL_57;
  }
  v18 = (UInt8 *)v32;
  v19 = (v33 - (uint64_t)v32) >> 2;
  if ((*(_BYTE *)(v9 + 12) & 0x20) != 0)
    v20 = *(unsigned int *)(v9 + 28);
  else
    v20 = 1;
  if (v19 == v20)
  {
    v21 = CFDataCreate(0, (const UInt8 *)v32, v33 - (_QWORD)v32);
    if (!v21)
    {
      v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v30, "Could not construct");
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v31, v21);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v35, "Data", &v31);
    v37 = &v35;
    cf = (CFTypeRef)1;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v37);
    if (v36)
      CFRelease(v36);
    if (v35)
      CFRelease(v35);
    if (v31)
      CFRelease(v31);
    if (!v34)
      goto LABEL_57;
    v18 = (UInt8 *)v32;
  }
  if (v18)
  {
    v33 = (uint64_t)v18;
    operator delete(v18);
  }
  if (v19 != v20)
    goto LABEL_44;
LABEL_57:
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v26);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602C6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, void *__p, uint64_t a11, uint64_t a12, char a13, CFTypeRef a14, CFTypeRef cf, CFTypeRef a16, CFTypeRef a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (a13)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<float>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<float>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1B602C830(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<float>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<float>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA150;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA150;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA150;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA150;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

CFNumberRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  int *v7;
  unsigned int *v8;
  int v9;
  uint64_t output_port_sensitivity;
  float *v11;
  float v12;
  float v13;
  CFNumberRef v14;
  int v15;
  CFNumberRef v16;
  CFNumberRef v17;
  std::pmr *v18;
  CFNumberRef *result;
  std::runtime_error *v20;
  std::runtime_error *exception;
  uint64_t v22;
  CFNumberRef v23;
  char v24;
  const void *valuePtr;
  char v26;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id)
    v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  v9 = *v7;
  output_port_sensitivity = vp::vx::get_output_port_sensitivity(*(_QWORD *)(a1 + 8), *v8);
  v22 = output_port_sensitivity;
  if ((output_port_sensitivity & 0xFF00000000) != 0)
  {
    v11 = (float *)caulk::expected<unsigned int,int>::value((uint64_t)&v22);
    v12 = 150.0;
    if (*v11 <= 150.0)
      v12 = *v11;
    if (*v11 >= 50.0)
      v13 = v12;
    else
      v13 = 50.0;
    *(float *)&valuePtr = v13;
    v14 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (!v14)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v26 = 1;
    v24 = 1;
    v23 = v14;
    valuePtr = 0;
    caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&valuePtr);
  }
  else
  {
    v24 = 0;
    LODWORD(v23) = output_port_sensitivity;
  }
  if ((v9 - 2) > 0xB)
    v15 = 1121058816;
  else
    v15 = *(_DWORD *)&vp::Service_Interface<1668443507u>::k_service_type_id[4 * v9 - 4];
  LODWORD(valuePtr) = v15;
  v16 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v16)
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
  }
  if (v24)
  {
    v17 = v23;
    v23 = 0;
    CFRelease(v16);
    if (v24)
      caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>((const void **)&v23);
  }
  else
  {
    v17 = v16;
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v18);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  result = (CFNumberRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v17;
  return result;
}

void sub_1B602CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA198;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA198;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA198;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA198;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  int *v7;
  uint64_t (****v8)();
  int *v9;
  unsigned int *v10;
  int v11;
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  std::pmr *v15;
  _QWORD *result;
  CFDictionaryRef v17;
  CFTypeRef v18[2];
  CFTypeRef cf[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  const void *v24[2];

  v24[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id)
    v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  v11 = *v7;
  v12 = *v9;
  if ((v11 - 3) >= 2)
  {
    if (v11 != 2)
    {
      v17 = 0;
      goto LABEL_20;
    }
LABEL_14:
    if ((v12 & 0xFFFFFFFE) == 0xC)
    {
      *(_OWORD *)cf = xmmword_1B6626B18;
      v20 = unk_1B6626B28;
      v21 = xmmword_1B6626B38;
      v22 = unk_1B6626B48;
      v23 = 0;
      v18[0] = cf;
      v18[1] = (CFTypeRef)17;
      v24[0] = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)v18);
      _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(v24, &v17);
      v14 = v24[0];
      if (!v24[0])
        goto LABEL_20;
    }
    else
    {
      v24[0] = (const void *)0x40000000C2980000;
      cf[0] = v24;
      cf[1] = (CFTypeRef)2;
      v18[0] = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)cf);
      _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(v18, &v17);
      v14 = v18[0];
      if (!v18[0])
        goto LABEL_20;
    }
    CFRelease(v14);
    goto LABEL_20;
  }
  vp::vx::get_output_port_volume_curve(*(_QWORD *)(a1 + 8), *v10, (uint64_t)cf);
  if (!LOBYTE(cf[1]))
    goto LABEL_14;
  v13 = cf[0];
  cf[0] = 0;
  caulk::__expected_detail::destroy<applesauce::CF::ArrayRef,(void *)0>(cf);
  if (!v13)
    goto LABEL_14;
  CFRetain(v13);
  cf[0] = v13;
  _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(cf, &v17);
  if (cf[0])
    CFRelease(cf[0]);
  CFRelease(v13);
LABEL_20:
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v15);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v17;
  return result;
}

void sub_1B602CF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, uint64_t a12, CFTypeRef cf)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(const void **a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  const __CFArray *v4;
  CFIndex Count;
  uint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64x2_t v11;
  int64x2_t v12;
  float32x2_t v13;
  int64x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unint64_t v17;
  int32x2_t v18;
  float32x2_t v19;
  uint64_t i;
  const void *v21;
  const void *v22;
  std::runtime_error *exception;
  _QWORD v25[2];
  CFDictionaryRef CFDictionaryRef;
  _QWORD v27[2];
  CFArrayRef CFArray;
  _BYTE v29[16];
  _BYTE v30[16];
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFArray *)*a1;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  Count = CFArrayGetCount(v4);
  v6 = MEMORY[0x1E0C80A78](Count);
  v9 = (int *)((char *)&v25[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    v10 = 0;
    *(float *)v7.i32 = 78.0 / (float)(unint64_t)(v6 - 1);
    v11 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v12 = (int64x2_t)xmmword_1B6626830;
    v13 = (float32x2_t)vdup_n_s32(0xC2980000);
    v14 = vdupq_n_s64(2uLL);
    v15 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v16.f32[0] = (float)v10;
      v17 = v10 + 1;
      v18 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v12));
      v16.f32[1] = (float)(v10 + 1);
      v19 = vmla_f32(v13, v15, v16);
      if ((v18.i8[0] & 1) != 0)
        v9[v10] = v19.i32[0];
      if ((v18.i8[4] & 1) != 0)
        v9[v10 + 1] = v19.i32[1];
      v12 = vaddq_s64(v12, v14);
      v10 += 2;
    }
    while (v17 + 1 != ((v6 + 1) & 0xFFFFFFFFFFFFFFFELL));
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<float,float *>(v9, &v9[v6]);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef const&>((applesauce::CF::TypeRef *)v29, "InputMap", (const void **)&CFArray);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],applesauce::CF::ArrayRef &>((applesauce::CF::TypeRef *)v30, "OutputMap", a1);
  v25[0] = v29;
  v25[1] = 2;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v25);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)&v31, "Value", (const void **)&CFDictionaryRef);
  v27[0] = &v31;
  v27[1] = 1;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v27);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
  for (i = 0; i != -32; i -= 16)
  {
    v21 = *(const void **)&v30[i + 8];
    if (v21)
      CFRelease(v21);
    v22 = *(const void **)&v29[i + 16];
    if (v22)
      CFRelease(v22);
  }
  if (CFArray)
    CFRelease(CFArray);
}

void sub_1B602D200(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float,float *>(int *a1, int *a2)
{
  int *v3;
  CFNumberRef *v4;
  CFArrayRef v5;
  uint64_t *v7;
  CFNumberRef *v8;
  unint64_t v9;
  void **v10;

  v3 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v7, a2 - a1);
  if (v3 != a2)
  {
    v4 = v8;
    do
    {
      if ((unint64_t)v4 >= v9)
        v4 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float &>((uint64_t *)&v7, v3);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>(v4++, v3);
      v8 = v4;
      ++v3;
    }
    while (v3 != a2);
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v7);
  v10 = (void **)&v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v5;
}

void sub_1B602D360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float &>(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B602D498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B602D530(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef const&>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],applesauce::CF::ArrayRef &>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  int *v4;
  CFNumberRef *v5;
  uint64_t v6;
  CFArrayRef v7;
  uint64_t *v9;
  CFNumberRef *v10;
  unint64_t v11;
  void **v12;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v9, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(int **)a1;
    v5 = v10;
    v6 = 4 * v3;
    do
    {
      if ((unint64_t)v5 >= v11)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>((uint64_t *)&v9, v4);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(v5++, v4);
      v10 = v5;
      ++v4;
      v6 -= 4;
    }
    while (v6);
  }
  v7 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v9);
  v12 = (void **)&v9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v7;
}

void sub_1B602D6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B602D808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B602D8A0(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA1E0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA1E0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  uint64_t (****v7)();
  uint64_t v8;
  uint64_t v9;
  CFDataRef v10;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v12;
  CFDictionaryRef *result;
  std::runtime_error *exception;
  CFTypeRef v15;
  _QWORD v16[2];
  CFTypeRef v17;
  CFTypeRef cf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id)
    v8 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  if (*v6 != 7 || (v9 = *(_QWORD *)(v8 + 8), *(_QWORD *)v8 == v9))
  {
    CFDictionaryRef = 0;
  }
  else
  {
    v10 = CFDataCreate(0, *(const UInt8 **)v8, v9 - *(_QWORD *)v8);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v15, v10);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v17, "Data", &v15);
    v16[0] = &v17;
    v16[1] = 1;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v16);
    if (cf)
      CFRelease(cf);
    if (v17)
      CFRelease(v17);
    if (v15)
      CFRelease(v15);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v12);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602DAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA228;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA228;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  uint64_t (****v7)();
  const void **v8;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v11;
  CFDictionaryRef *result;
  _QWORD v13[2];
  CFTypeRef v14;
  CFTypeRef cf;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id)
    v8 = (const void **)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  if (*v6 != 7 || *v8 == 0)
  {
    CFDictionaryRef = 0;
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::ArrayRef const&>((applesauce::CF::TypeRef *)&v14, "Value", v8);
    v13[0] = &v14;
    v13[1] = 1;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
    if (cf)
      CFRelease(cf);
    if (v14)
      CFRelease(v14);
  }
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v11);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602DCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::ArrayRef const&>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  NSObject *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  __int128 v21;
  dispatch_object_t v22;
  __int128 v23;
  _BYTE v24[24];
  dispatch_object_t object;
  CFTypeRef v26;
  CFTypeRef cf[4];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  mach_absolute_time();
  cf[0] = 0;
  v20 = 0;
  cf[1] = (CFTypeRef)mach_absolute_time();
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>((std::pmr *)a1, cf, (uint64_t)v28);
  if (cf[0])
    CFRelease(cf[0]);
  v6 = *a2;
  if (v6)
    CFRetain(v6);
  v26 = v6;
  vp::vx::data_flow::State<void>::State((uint64_t)v24, (uint64_t)v28);
  v7 = a1[1];
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v30 = 0;
  v8 = operator new(0x28uLL);
  *v8 = &off_1E69BA320;
  vp::vx::data_flow::State<void>::State((uint64_t)(v8 + 1), (uint64_t)v24);
  v8[4] = object;
  object = 0;
  v30 = v8;
  vp::cf::Notification_Manager::create_listener(a1 + 10, &v26, (uint64_t)v29, cf);
  v9 = v30;
  if (v30 == v29)
  {
    v10 = 4;
    v9 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_12;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_12:
  if (object)
    dispatch_release(object);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  if (v26)
    CFRelease(v26);
  v11 = operator new();
  vp::cf::Notification_Listener::Notification_Listener(v11, (uint64_t)cf);
  v12 = a1[1];
  v22 = v12;
  if (v12)
    dispatch_retain(v12);
  std::shared_ptr<vp::cf::Notification_Listener>::shared_ptr[abi:ne180100]<vp::cf::Notification_Listener,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener*)#1},void>(&v23, v11, (uint64_t *)&v22);
  if (v22)
    dispatch_release(v22);
  v20 = a1;
  v21 = v23;
  v23 = 0uLL;
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS1_32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E0_JNS0_9data_flow12Time_StampedINS4_13DictionaryRefEEEEEEDaOS6_DpRKNS8_5StateIT0_EE((uint64_t)a1, (__int128 *)&v20, (vp::vx::data_flow::State_Transaction *)v28, a3);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  vp::cf::Notification_Listener::~Notification_Listener((vp::cf::Notification_Listener *)cf);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v28);
}

void sub_1B602DFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA270;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA270;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA270;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA270;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v4;
  CFTypeRef *v5;
  CFTypeRef v6;
  char v7;
  std::pmr *v8;
  _BYTE *result;

  v4 = *a3;
  v5 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage(**a2);
  v6 = *v5;
  if (*v5)
    CFRetain(*v5);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (v6)
    CFRelease(v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v8);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v7;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::allocate_storage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 16, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::deallocate_storage(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, *a2, 16, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return *(_QWORD *)a2;
}

_QWORD *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::copy_value(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  return vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(*a2, *a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::move_value(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  v5 = (*a3)[1];
  *v3 = **a3;
  *v4 = 0;
  v3[1] = v5;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::destroy_value(uint64_t a1, const void ***a2)
{
  std::__destroy_at[abi:ne180100]<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>,0>(*a2);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::compare_value(uint64_t a1, const void ***a2, const void ***a3)
{
  const void **v3;
  const void **v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  v3 = *a2;
  v4 = *a3;
  v5 = (unint64_t)**a2;
  v6 = (unint64_t)**a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      return 0;
    return v3[1] == v4[1];
  }
  result = CFEqual((CFTypeRef)v5, (CFTypeRef)v6);
  if ((_DWORD)result)
    return v3[1] == v4[1];
  return result;
}

_QWORD *vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(_QWORD *a1, uint64_t a2)
{
  CFTypeRef v4;
  uint64_t v5;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  return a1;
}

void std::__destroy_at[abi:ne180100]<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

const void **vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::~Time_Stamped(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = *a2;
  *a2 = 0;
  storage[1] = a2[1];
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  return vp::vx::data_flow::State<void>::~State(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS1_32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E0_JNS0_9data_flow12Time_StampedINS4_13DictionaryRefEEEEEEDaOS6_DpRKNS8_5StateIT0_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  _BYTE v13[28];
  int id;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)v8 = &off_1E69BA3A0;
  *(_OWORD *)(v8 + 8) = v12;
  *((_QWORD *)v8 + 3) = v7;
  v17 = v8;
  id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v16, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v13);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v13);
}

void sub_1B602E5AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEED1Ev(_QWORD *a1)
{
  NSObject *v2;

  *a1 = &off_1E69BA320;
  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  vp::vx::data_flow::State<void>::~State((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEED0Ev(_QWORD *a1)
{
  NSObject *v2;

  *a1 = &off_1E69BA320;
  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  vp::vx::data_flow::State<void>::~State((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BA320;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA320;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7destroyEv(uint64_t a1)
{
  return _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev(a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE18destroy_deallocateEv(void *a1)
{
  _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEEclEOSC_(uint64_t a1, CFTypeRef *a2)
{
  _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS7_13DictionaryRefEEEEvDpOT_(a1 + 8, a2);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;

  vp::vx::data_flow::State<void>::State(a1, a2);
  v4 = *(NSObject **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    dispatch_retain(v4);
  return a1;
}

void _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS7_13DictionaryRefEEEEvDpOT_(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf;

  cf = *a2;
  *a2 = 0;
  _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_(a1, &cf);
  if (cf)
    CFRelease(cf);
}

uint64_t _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_(uint64_t a1, const void **a2)
{
  const void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  _BYTE v9[24];
  CFTypeRef cf;

  vp::vx::data_flow::State<void>::State((uint64_t)v9, a1);
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  cf = v4;
  v5 = *(NSObject **)(a1 + 24);
  v6 = (void *)operator new();
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v9);
  *(_QWORD *)(v7 + 24) = cf;
  cf = 0;
  dispatch_async_f(v5, v6, (dispatch_function_t)_ZZN10applesauce8dispatch2v15asyncIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationENS_2CF9StringRefEENUlT_E_clINS6_13DictionaryRefEEEDaS8_EUlvE_EEvP16dispatch_queue_sOS8_ENUlPvE_8__invokeESH_);
  if (cf)
    CFRelease(cf);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void _ZZN10applesauce8dispatch2v15asyncIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationENS_2CF9StringRefEENUlT_E_clINS6_13DictionaryRefEEEDaS8_EUlvE_EEvP16dispatch_queue_sOS8_ENUlPvE_8__invokeESH_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1;
  _ZZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_ENUlvE_clEv(a1);
  v1 = v2;
  v2 = 0;
  if (v1)
    _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_((uint64_t)&v2, v1);
}

void sub_1B602E83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void _ZZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_ENUlvE_clEv(uint64_t a1)
{
  CFTypeRef *v2;
  std::pmr *v3;
  CFTypeRef *storage;
  CFTypeRef cf[2];
  _QWORD v6[3];

  v2 = (CFTypeRef *)(a1 + 24);
  mach_absolute_time();
  v3 = (std::pmr *)vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped<applesauce::CF::DictionaryRef&>(cf, v2);
  v6[0] = std::pmr::get_default_resource(v3);
  v6[1] = 0;
  v6[2] = &vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  storage = (CFTypeRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v6);
  *storage = cf[0];
  cf[0] = 0;
  storage[1] = cf[1];
  vp::vx::data_flow::State<void>::set_value(a1, (uint64_t)v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  if (cf[0])
    CFRelease(cf[0]);
}

void sub_1B602E8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va1);
  vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::~Time_Stamped((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped<applesauce::CF::DictionaryRef&>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  a1[1] = mach_absolute_time();
  return a1;
}

void sub_1B602E950(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::DictionaryRef::~DictionaryRef(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_(uint64_t a1, uint64_t a2)
{
  const void *v3;

  if (a2)
  {
    v3 = *(const void **)(a2 + 24);
    if (v3)
      CFRelease(v3);
    vp::vx::data_flow::State<void>::~State(a2);
    JUMPOUT(0x1BCC95CECLL);
  }
}

_QWORD *std::shared_ptr<vp::cf::Notification_Listener>::shared_ptr[abi:ne180100]<vp::cf::Notification_Listener,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener*)#1},void>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  v7 = *a3;
  *a3 = 0;
  *v6 = &off_1E69BA368;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = v7;
  a1[1] = v6;
  return a1;
}

void sub_1B602EA24(void *a1)
{
  uint64_t v1;
  NSObject **v2;

  __cxa_begin_catch(a1);
  vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator()(v2, v1);
  __cxa_rethrow();
}

void sub_1B602EA3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator()(NSObject **a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;

  v3 = *a1;
  v4 = (_QWORD *)operator new();
  *v4 = a2;
  dispatch_async_f(v3, v4, (dispatch_function_t)applesauce::dispatch::v1::async<vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1}>(dispatch_queue_s *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
}

void std::__shared_ptr_pointer<vp::cf::Notification_Listener *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1},std::allocator<vp::cf::Notification_Listener>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  NSObject *shared_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BA368;
  shared_owners = this[1].__shared_owners_;
  if (shared_owners)
    dispatch_release(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  NSObject *shared_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BA368;
  shared_owners = this[1].__shared_owners_;
  if (shared_owners)
    dispatch_release(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_pointer<vp::cf::Notification_Listener *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1},std::allocator<vp::cf::Notification_Listener>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(NSObject **)(a1 + 32);
  v4 = (_QWORD *)operator new();
  *v4 = v3;
  dispatch_async_f(v2, v4, (dispatch_function_t)applesauce::dispatch::v1::async<vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1}>(dispatch_queue_s *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_release(v5);
}

void applesauce::dispatch::v1::async<vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1}>(dispatch_queue_s *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(vp::cf::Notification_Listener **a1)
{
  vp::cf::Notification_Listener *v1;

  v1 = *a1;
  if (v1)
  {
    vp::cf::Notification_Listener::~Notification_Listener(v1);
    MEMORY[0x1BCC95CEC]();
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA3A0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA3A0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E69BA3A0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69BA3A0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS5_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNSE_32create_state_for_cf_notificationENS9_9StringRefEEUlT_E0_JSB_EEEDaOSH_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSB_EEERNS5_13State_ManagerESH_SQ_EUlPPKNS5_5ValueEPSY_E_S11_S12_EEEvDpOSR_(a1 + 8, a2, a3);
}

_QWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS5_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNSE_32create_state_for_cf_notificationENS9_9StringRefEEUlT_E0_JSB_EEEDaOSH_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSB_EEERNS5_13State_ManagerESH_SQ_EUlPPKNS5_5ValueEPSY_E_S11_S12_EEEvDpOSR_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::pmr *v7;
  _QWORD *result;
  _QWORD v9[2];

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(v9, v4);
  v5 = v9[0];
  v6 = v9[1];
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  result[1] = v6;
  return result;
}

void sub_1B602ED94(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA3E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BA3E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA3E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA3E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

CFNumberRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  _DWORD *v7;
  uint64_t (****v8)();
  int *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t is_apple_made_bluetooth_product;
  CFNumberRef v16;
  CFNumberRef v17;
  uint64_t output_device_bluetooth_product_id;
  CFNumberRef v19;
  std::pmr *v20;
  CFNumberRef *result;
  std::runtime_error *exception;
  uint64_t v23;
  const void *v24;
  char v25;
  const void *valuePtr;
  char v27;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v7 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id)
    v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  v11 = *v9;
  if ((*v7 - 3) <= 1)
  {
    v12 = *v10;
    v13 = *(_QWORD *)(a1 + 8);
    is_apple_made_bluetooth_product = vp::vx::get_output_device_is_apple_made_bluetooth_product(v13, v12);
    if ((is_apple_made_bluetooth_product & 0xFF00000000) != 0
      && is_apple_made_bluetooth_product != 0)
    {
      output_device_bluetooth_product_id = vp::vx::get_output_device_bluetooth_product_id(v13, v12);
      v23 = output_device_bluetooth_product_id;
      if ((output_device_bluetooth_product_id & 0xFF00000000) != 0)
      {
        LODWORD(valuePtr) = *(_DWORD *)caulk::expected<unsigned int,int>::value((uint64_t)&v23);
        v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (v19)
        {
          v17 = v19;
          v27 = 1;
          v25 = 1;
          valuePtr = 0;
          caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&valuePtr);
          v24 = 0;
          caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&v24);
          goto LABEL_20;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_23:
      }
LABEL_19:
      v17 = 0;
      goto LABEL_20;
    }
  }
  if ((v11 & 0xFFFFFFFE) != 6)
    goto LABEL_19;
  LODWORD(valuePtr) = 8210;
  v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_23;
  }
  v17 = v16;
LABEL_20:
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v20);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  result = (CFNumberRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v17;
  return result;
}

void sub_1B602F0B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA430;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA430;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  CFDataRef v5;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v7;
  CFDictionaryRef *result;
  std::runtime_error *exception;
  CFTypeRef v10;
  _QWORD v11[2];
  CFTypeRef v12;
  CFTypeRef cf;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  v5 = CFDataCreate(0, *(const UInt8 **)v4, *(_QWORD *)(v4 + 8) - *(_QWORD *)v4);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v10, v5);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v12, "Data", &v10);
  v11[0] = &v12;
  v11[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v11);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v10)
    CFRelease(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602F270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA478;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA478;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  CFDataRef v5;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v7;
  CFDictionaryRef *result;
  std::runtime_error *exception;
  CFTypeRef v10;
  _QWORD v11[2];
  CFTypeRef v12;
  CFTypeRef cf;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  v5 = CFDataCreate(0, *(const UInt8 **)v4, *(_QWORD *)(v4 + 8) - *(_QWORD *)v4);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v10, v5);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v12, "Data", &v10);
  v11[0] = &v12;
  v11[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v11);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v10)
    CFRelease(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602F48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA4C0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA4C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v5;
  CFDictionaryRef *result;
  _QWORD v7[2];
  int v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v8 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>((applesauce::CF::TypeRef *)&v9, "UInt32", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602F658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B602F744(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA508;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA508;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  _BOOL4 v4;
  CFTypeRef *v5;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v7;
  CFDictionaryRef *result;
  _QWORD v9[2];
  CFTypeRef v10;
  CFTypeRef cf;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = *(_BYTE *)vp::vx::data_flow::Value::view_storage(**a2) == 0;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v10, "UInt32");
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (v4)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  cf = *v5;
  v9[0] = &v10;
  v9[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v9);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B602F8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::expected<vp::vx::data_flow::State<void>,vp::vx::Error_Code>::value(uint64_t result)
{
  int *v1;
  _DWORD *exception;
  int v3;

  if (!*(_BYTE *)(result + 24))
  {
    v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_1E69AC7F0;
    exception[2] = v3;
  }
  return result;
}

int *boost::container::flat_map<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::at(uint64_t a1, int *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int *v8;

  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1, a2, &v8);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v8 == (int *)(v4 + 32 * v5))
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  return v8 + 2;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(uint64_t a1@<X0>, int *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v15 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(&v15, &v14, a2, a3);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = (int *)(v9 + 32 * v10);
  v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a2 < *v13)
      *a3 = v12;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v15 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,false>,vp::vx::User_Defaults_Key>(&v15, &v14, a2, a3);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = (int *)(v9 + 32 * v10);
  v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a2 < *v13)
      *a3 = v12;
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 5;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 8;
        *a1 = v8 + 8;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor31get_dsp_node_parameter_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_18Graph_Parameter_IDEENK3__0clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(_QWORD **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 152))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor31get_dsp_node_parameter_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_18Graph_Parameter_IDEENK3__0clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(_QWORD **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 160))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E69BA550[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E69BA568[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SB_SG_EEEEEEDcSK_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SB_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return vp::vx::data_flow::State<void>::~State(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<1ul,applesauce::CF::NumberRef>(result, a3);
  v4 = *a2;
  *a2 = *a3;
  *a3 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA550[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<1ul,applesauce::CF::NumberRef>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA550[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *a2 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 2)
    vp::vx::data_flow::State<void>::operator=(a2, a3);
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(a1, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA550[v4])(&v5, a1);
  *(_DWORD *)(a1 + 24) = -1;
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(_DWORD *)(a1 + 24) = 2;
}

_QWORD *std::__variant_detail::__alt<0ul,applesauce::CF::NumberRef>::__alt[abi:ne180100]<applesauce::CF::NumberRef&>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA550[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA590;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA590;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v5;
  CFDictionaryRef *result;
  _QWORD v7[2];
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v8 = *(_QWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],double &>((applesauce::CF::TypeRef *)&v9, "Float64", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B60300E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],double &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B60301CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BA5D8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BA5D8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  CFDictionaryRef CFDictionaryRef;
  std::pmr *v5;
  CFDictionaryRef *result;
  _QWORD v7[2];
  int v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v8 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>((applesauce::CF::TypeRef *)&v9, "UInt32", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = CFDictionaryRef;
  return result;
}

void sub_1B6030348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_17Graph_Property_IDEENK3__2clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(_QWORD **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 168))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_17Graph_Property_IDEENK3__2clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(_QWORD **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 176))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E69BA620[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E69BA638[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<1ul,applesauce::CF::DictionaryRef>(result, a3);
  v4 = *a2;
  *a2 = *a3;
  *a3 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA620[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 2)
    vp::vx::data_flow::State<void>::operator=(a2, a3);
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(a1, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E69BA620[v4])(&v5, a1);
  *(_DWORD *)(a1 + 24) = -1;
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(_DWORD *)(a1 + 24) = 2;
}

_QWORD *std::__variant_detail::__alt<0ul,applesauce::CF::DictionaryRef>::__alt[abi:ne180100]<applesauce::CF::DictionaryRef&>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

_QWORD *std::shared_ptr<vp::vx::Configuration_Database>::shared_ptr[abi:ne180100]<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = operator new();
    v6 = *a2;
    v7 = a2[3];
    *(_QWORD *)v5 = &off_1E69BA660;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = v6;
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(v5 + 48) = v7;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<vp::vx::Configuration_Database *,vp::Allocator_Delete<vp::vx::Configuration_Database>,std::allocator<vp::vx::Configuration_Database>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::Configuration_Database *,vp::Allocator_Delete<vp::vx::Configuration_Database>,std::allocator<vp::vx::Configuration_Database>>::__on_zero_shared(uint64_t a1)
{
  void (***v2)(_QWORD);

  v2 = *(void (****)(_QWORD))(a1 + 24);
  (**v2)(v2);
  return (*(uint64_t (**)(_QWORD, void (***)(_QWORD), _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

_QWORD *vp::utility::Quantization_Table<unsigned int>::Quantization_Table(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = 0;
  v7 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v7, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v3 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(v7, v8);
  v4 = v7;
  if (v8 != v3)
    v8 = v3;
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v9;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  if (v4 == v3)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    v10 = 134217984;
    v11 = 0;
    _os_log_send_and_compose_impl();
    v6 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

void sub_1B6030838(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(int *a1, int *a2)
{
  int *result;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::lifetime_guard_base(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  *(_QWORD *)a1 = a2;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E69BA698;
  v3[4] = 0;
  v3[5] = a1;
  *(_QWORD *)(a1 + 16) = v3;
  v3[3] = 0;
  *(_QWORD *)(a1 + 8) = v3 + 3;
  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::__enable_weak_this[abi:ne180100]<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,void>(a1 + 8, v3 + 3, (uint64_t)(v3 + 3));
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BA698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BA698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::__on_zero_shared(uint64_t a1)
{
  return caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block::~control_block(a1 + 24);
}

uint64_t caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block::~control_block(uint64_t a1)
{
  std::__shared_weak_count *v2;

  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(_QWORD *)(a1 + 16) + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

vp::vx::System_Status_Manager *std::unique_ptr<vp::vx::System_Status_Manager>::reset[abi:ne180100](vp::vx::System_Status_Manager **a1, vp::vx::System_Status_Manager *a2)
{
  vp::vx::System_Status_Manager *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vp::vx::System_Status_Manager::~System_Status_Manager(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

vp::vx::Orientation_Manager *std::unique_ptr<vp::vx::Orientation_Manager>::reset[abi:ne180100](vp::vx::Orientation_Manager **a1, vp::vx::Orientation_Manager *a2)
{
  vp::vx::Orientation_Manager *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    vp::vx::Orientation_Manager::~Orientation_Manager(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BA6D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BA6D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA6D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA6D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  vp::vx::Voice_Processor *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(vp::vx::Voice_Processor **)(a1 + 8);
      if (v5)
        vp::vx::Voice_Processor::begin_state_change(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BA718;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BA718;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BA718;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BA718;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  vp::vx::Voice_Processor *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(vp::vx::Voice_Processor **)(a1 + 8);
      if (v5)
        vp::vx::Voice_Processor::end_state_change(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::set_messenger(std::shared_ptr<caulk::concurrent::messenger>)::$_0>(uint64_t a1)
{
  return std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](**(_QWORD **)a1 + 608, *(__int128 **)(*(_QWORD *)a1 + 8));
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BA760;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA760;
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, id *a2)
{
  id v3;
  id v4;
  id v5;
  id *v6;
  id *v7;

  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create initialization counts", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_initialization_counts(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create control center manager", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_control_center_manager(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create system status manager", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_system_status_manager(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create telephony utility manager", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_telephony_utility_manager(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create orientation manager", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_orientation_manager(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create property states", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_property_states(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create user defaults states", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_user_defaults_states(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create configuration states", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_configuration_states(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create tuning resource directory paths", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create uplink I/O parameter setter commands", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_commands(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O parameter setter delegates", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_delegates(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O property setter commands", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_commands(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O property setter delegates", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_delegates(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O personal audio command", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_personal_audio_command(void)::$_0>, (uint64_t)&v6);
  v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"configure control center manager", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::configure_control_center_manager(void)::$_0>, (uint64_t)&v6);
  vp::vx::Voice_Processor::components_configure((vp::vx::Voice_Processor *)a2);
  *((_DWORD *)a2 + 194) = 1;
  vp::rpb::Server::get_shared_instance((uint64_t)&v5);
  if (v5)
  {
    vp::objc::ID::ID((vp::objc::ID *)&v4, &v5);
    v6 = &v4;
    v7 = a2;
    vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"register RPB server listener", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0>, (uint64_t)&v6);
    vp::objc::ID::~ID(&v4);
    vp::objc::ID::ID((vp::objc::ID *)&v3, &v5);
    v6 = &v3;
    v7 = a2;
    vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"connect RPB server", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)&v6);
    vp::objc::ID::~ID(&v3);
  }
  vp::objc::ID::~ID(&v5);
}

void std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E69BA7A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA7A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const vp::vx::data_flow::State_Transaction *v4;
  int v5;
  int v6;
  int v7;
  NSObject *log;
  vp *log_context_info;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *p_p;
  const char *v15;
  vp *v16;
  uint64_t v17;
  NSObject *v18;
  vp *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  unsigned int v26;
  const char *v27;
  char *v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 968;
  v4 = (const vp::vx::data_flow::State_Transaction *)(a2 + 784);
  v28 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  v6 = v5;
  v7 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v28);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v10 = v31;
    v11 = v30;
    v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((v10 & 0x80u) == 0)
        v13 = v10;
      else
        v13 = v11;
      if ((v31 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136316162;
      v33 = p_p;
      v34 = 2080;
      if (v13)
        v15 = " ";
      else
        v15 = "";
      v35 = v15;
      v36 = 1024;
      v37 = v7;
      v38 = 1040;
      v39 = v6;
      v40 = 2080;
      v41 = v28;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%s%sget property %u '%.*s'", buf, 0x2Cu);
    }
    if ((char)v31 < 0)
      operator delete(__p);
  }
  vp::vx::Property_Manager::get_property(v3, **(_DWORD **)(a1 + 8), *(vp::Mutable_Blob **)(a1 + 32), v4, buf);
  v17 = *(_QWORD *)(a1 + 24);
  if (!(_BYTE)v33 || !*(_BYTE *)(v17 + 4))
  {
    if ((_BYTE)v33)
    {
      if (!*(_BYTE *)(v17 + 4))
      {
        *(_BYTE *)(v17 + 4) = (_BYTE)v33;
        goto LABEL_23;
      }
    }
    else if (*(_BYTE *)(v17 + 4))
    {
      *(_DWORD *)v17 = *(_DWORD *)buf;
      *(_BYTE *)(v17 + 4) = 0;
      goto LABEL_23;
    }
    *(_DWORD *)v17 = *(_DWORD *)buf;
  }
LABEL_23:
  if (!*(_BYTE *)(v17 + 4))
  {
    v18 = vp::get_log(v16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      v20 = v31;
      v21 = v30;
      v22 = vp::get_log(v19);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        if ((v20 & 0x80u) == 0)
          v23 = v20;
        else
          v23 = v21;
        v24 = __p;
        v25 = " ";
        if ((v31 & 0x80u) == 0)
          v24 = &__p;
        if (!v23)
          v25 = "";
        v26 = *(_DWORD *)v17 - 1;
        if (v26 > 0xA)
          v27 = "bad argument";
        else
          v27 = off_1E69BE550[v26];
        *(_DWORD *)buf = 136316418;
        v33 = v24;
        v34 = 2080;
        v35 = v25;
        v36 = 1024;
        v37 = v7;
        v38 = 1040;
        v39 = v6;
        v40 = 2080;
        v41 = v28;
        v42 = 2080;
        v43 = v27;
        _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%s%sfailed to get property %u '%.*s' - %s", buf, 0x36u);
      }
      if ((char)v31 < 0)
        operator delete(__p);
    }
  }
}

char *vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(int a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  if (a1)
  {
    v2 = vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(a1);
    v4 = v3;
    v5 = vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(a1);
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v2 = "vp::vx::Property_ID::Bypass_Voice_Processing]";
    v4 = 44;
    v5 = "vp::vx::Property_ID::Bypass_Voice_Processing]";
    v6 = 44;
LABEL_5:
    while (v6)
    {
      v7 = v5[--v6];
      if (v7 == 58)
      {
        v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  v8 = 0;
LABEL_9:
  if (v4 < v8)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 1;
  result = "vp::vx::Property_ID::Disable_Voice_Processing]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Enable_Acoustic_Gain_Control]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Mute_Uplink_Near_End_Voice_Output]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Mute_Downlink_Far_End_Voice_Input]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Maximum_Number_Of_Uplink_Output_Frames]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)6,128ul>((int)"vp::vx::Property_ID::Disable_Voice_Processing]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)6,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 6;
  result = "vp::vx::Property_ID::Maximum_Number_Of_Far_End_Voice_Input_Frames]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Pre_Processing_Input_Gain_dB]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Mic_Stream_Format]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Mic_Block_Size]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Mic_Port_Type]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)11,128ul>((int)"vp::vx::Property_ID::Maximum_Number_Of_Far_End_Voice_Input_Frames]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)11,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 11;
  result = "vp::vx::Property_ID::Mic_Device_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Mic_Physical_Device_ID]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Mic_Hardware_Physical_Sample_Rate]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Mic_Hardware_Input_Latency]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Mic_Hardware_Input_Safety_Offset]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)16,128ul>((int)"vp::vx::Property_ID::Mic_Device_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)16,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 16;
  result = "vp::vx::Property_ID::Mic_Hardware_Transport_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Mic_Hardware_Bluetooth_Device_Category]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Mic_Hardware_Data_Source]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Mic_Hardware_Model_UID]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Mic_Trim_Gains]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)21,128ul>((int)"vp::vx::Property_ID::Mic_Hardware_Transport_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)21,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 21;
  result = "vp::vx::Property_ID::Mic_Trim_Gains_CF]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Mic_DSP_Settings]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Ref_Stream_Format]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Ref_Block_Size]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Ref_Port_Type]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)26,128ul>((int)"vp::vx::Property_ID::Mic_Trim_Gains_CF]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)26,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 26;
  result = "vp::vx::Property_ID::Ref_Device_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Ref_Physical_Device_ID]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Ref_Hardware_Physical_Sample_Rate]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Ref_Hardware_Input_Latency]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Ref_Hardware_Input_Safety_Offset]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)31,128ul>((int)"vp::vx::Property_ID::Ref_Device_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)31,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 31;
  result = "vp::vx::Property_ID::Ref_Hardware_Output_Latency]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Ref_Hardware_Physical_Output_Latency]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Ref_Hardware_Output_Safety_Offset]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Ref_Hardware_Physical_Output_Safety_Offset]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)36,128ul>((int)"vp::vx::Property_ID::Ref_Hardware_Output_Latency]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)36,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 36;
  result = "vp::vx::Property_ID::Ref_Port_Sub_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Ref_Port_Endpoint_Type]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Ref_Port_Is_Apple_Made_Bluetooth_Product]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Ref_Port_UID]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Ref_Port_Bluetooth_HLC_2ch_State]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)41,128ul>((int)"vp::vx::Property_ID::Ref_Port_Sub_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)41,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 41;
  result = "vp::vx::Property_ID::Ref_Hardware_Transport_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Ref_Hardware_Bluetooth_Device_Category]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Ref_Hardware_Data_Source]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Ref_Hardware_Model_UID]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Ref_Trim_Gains]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)46,128ul>((int)"vp::vx::Property_ID::Ref_Hardware_Transport_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)46,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 46;
  result = "vp::vx::Property_ID::Ref_Trim_Gains_CF]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Ref_DSP_Settings]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Client_Near_End_Voice_Output_Stream_Format]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Client_Far_End_Voice_Input_Stream_Format]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Client_Far_End_Voice_Input_Block]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)51,128ul>((int)"vp::vx::Property_ID::Ref_Trim_Gains_CF]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)51,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 51;
  result = "vp::vx::Property_ID::Hardware_Mix_Output_Stream_Format]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Hardware_Mix_Output_Block_Size]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Hardware_Mix_Output_Channel_Layout]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Beam_Direction]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Operation_Mode]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)56,128ul>((int)"vp::vx::Property_ID::Hardware_Mix_Output_Stream_Format]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)56,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 56;
  result = "vp::vx::Property_ID::Preferred_Chat_Flavor]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Active_Chat_Flavor]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Hardware_Has_Voice_Processor]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Tap_Stream_Enabled]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Downlink_Software_Volume]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)61,128ul>((int)"vp::vx::Property_ID::Preferred_Chat_Flavor]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)61,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 61;
  result = "vp::vx::Property_ID::Downlink_Hardware_Volume_dB]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Stream_Format]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Block_Size]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Data_Source_IDs]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Speaker_Calibration_Data_CF]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)66,128ul>((int)"vp::vx::Property_ID::Downlink_Hardware_Volume_dB]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)66,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 66;
  result = "vp::vx::Property_ID::Codec_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Codec_Sample_Rate]";
      break;
    case 2:
      result = "vp::vx::Property_ID::CPMS_Budget]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Metrics_Reporter_IDs]";
      break;
    case 4:
      result = "vp::vx::Property_ID::IO_Cycle_Usage]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)71,128ul>((int)"vp::vx::Property_ID::Codec_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)71,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 71;
  result = "vp::vx::Property_ID::Preferred_IO_Cycle_Usage]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Device_Orientation]";
      break;
    case 2:
      result = "vp::vx::Property_ID::UI_Orientation]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Enable_Spatial_Chat]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Spatial_Chat_Metadata]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)76,128ul>((int)"vp::vx::Property_ID::Preferred_IO_Cycle_Usage]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)76,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 76;
  result = "vp::vx::Property_ID::Spatial_Chat_Head_Tracking_Configuration]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Enable_Media_Chat]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Media_Chat_Software_Volume]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Media_Chat_Ducking_Action]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Media_Chat_Ducking_Level]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)81,128ul>((int)"vp::vx::Property_ID::Spatial_Chat_Head_Tracking_Configuration]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)81,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 81;
  result = "vp::vx::Property_ID::Media_Chat_Ducking_Ramp_Time_In_Seconds]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Media_Chat_Unducking_Ramp_Time_In_Seconds]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Speech_Activity_Event_Listener_Block]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Dynamic_Ducking_Volume_Handler_Block]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Enable_Stereo_To_Mono_Mix]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)86,128ul>((int)"vp::vx::Property_ID::Media_Chat_Ducking_Ramp_Time_In_Seconds]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)86,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 86;
  result = "vp::vx::Property_ID::Enable_Media_Playback_On_External_Device]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Other_Audio_Ducking_Configuration]";
      break;
    case 2:
      result = "vp::vx::Property_ID::Is_In_Emergency_Call]";
      break;
    case 3:
      result = "vp::vx::Property_ID::Virtual_Audio_Plugin_Mode]";
      break;
    case 4:
      result = "vp::vx::Property_ID::Offload_AirPods_Noise_Suppression]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)91,128ul>((int)"vp::vx::Property_ID::Enable_Media_Playback_On_External_Device]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)91,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 91;
  result = "vp::vx::Property_ID::Enable_Automatic_Mic_Mode]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::vx::Property_ID::Is_Camera_Active]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)93]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)94]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)95]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)96,128ul>((int)"vp::vx::Property_ID::Enable_Automatic_Mic_Mode]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)96,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 96;
  result = "(vp::vx::Property_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)97]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)98]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)99]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)100]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)101,128ul>((int)"(vp::vx::Property_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)101,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 101;
  result = "(vp::vx::Property_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)102]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)103]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)104]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)105]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)106,128ul>((int)"(vp::vx::Property_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)106,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 106;
  result = "(vp::vx::Property_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)107]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)108]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)109]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)110]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)111,128ul>((int)"(vp::vx::Property_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)111,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 111;
  result = "(vp::vx::Property_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)112]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)113]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)114]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)115]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)116,128ul>((int)"(vp::vx::Property_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)116,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 116;
  result = "(vp::vx::Property_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)117]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)118]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)119]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)120]";
      break;
    default:
      result = vp::detail::reflect_value_name<(vp::vx::Property_ID)121,128ul>((int)"(vp::vx::Property_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)121,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 121;
  result = "(vp::vx::Property_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "(vp::vx::Property_ID)122]";
      break;
    case 2:
      result = "(vp::vx::Property_ID)123]";
      break;
    case 3:
      result = "(vp::vx::Property_ID)124]";
      break;
    case 4:
      result = "(vp::vx::Property_ID)125]";
      break;
    case 5:
      result = "(vp::vx::Property_ID)126]";
      break;
    case 6:
      result = "(vp::vx::Property_ID)127]";
      break;
    default:
      if ("(vp::vx::Property_ID)121]" == 128)
        result = "(vp::vx::Property_ID)128]";
      else
        result = "?";
      break;
  }
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BA7F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA7F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const vp::vx::data_flow::State_Transaction *v4;
  int v5;
  int v6;
  int v7;
  NSObject *log;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  int *v16;
  __int128 *v17;
  uint64_t v18;
  NSObject *v19;
  vp *v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  unint64_t v24;
  void **v25;
  const char *v26;
  unsigned int v27;
  const char *v28;
  char *v29;
  void *__p[2];
  char v31;
  unsigned __int8 v32;
  _BYTE buf[22];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  char *v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 968;
  v4 = (const vp::vx::data_flow::State_Transaction *)(a2 + 784);
  v29 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  v6 = v5;
  v7 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v29);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v10 = v32;
    v11 = __p[1];
    v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((v10 & 0x80u) == 0)
        v13 = v10;
      else
        v13 = (unint64_t)v11;
      if ((v32 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2080;
      if (v13)
        v15 = " ";
      else
        v15 = "";
      *(_QWORD *)&buf[14] = v15;
      v34 = 1024;
      v35 = v7;
      v36 = 1040;
      v37 = v6;
      v38 = 2080;
      v39 = v29;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%s%sget property %u '%.*s' info", buf, 0x2Cu);
    }
    if ((char)v32 < 0)
      operator delete(__p[0]);
  }
  vp::vx::Property_Manager::get_property_info(v3, **(_DWORD **)(a1 + 8), v4, (uint64_t)__p);
  v16 = *(int **)(a1 + 24);
  *(_OWORD *)buf = *(_OWORD *)__p;
  buf[16] = v31;
  v17 = caulk::expected<vp::vx::Property_Info,vp::vx::Error_Code>::swap((__int128 *)buf, v16);
  v18 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v18 + 16))
  {
    v19 = vp::get_log((vp *)v17);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v21 = v32;
      v22 = __p[1];
      v23 = vp::get_log(v20);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if ((v21 & 0x80u) == 0)
          v24 = v21;
        else
          v24 = (unint64_t)v22;
        v25 = (void **)__p[0];
        v26 = " ";
        if ((v32 & 0x80u) == 0)
          v25 = __p;
        if (!v24)
          v26 = "";
        v27 = *(_DWORD *)v18 - 1;
        if (v27 > 0xA)
          v28 = "bad argument";
        else
          v28 = off_1E69BE550[v27];
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v25;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v26;
        v34 = 1024;
        v35 = v7;
        v36 = 1040;
        v37 = v6;
        v38 = 2080;
        v39 = v29;
        v40 = 2080;
        v41 = v28;
        _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "%s%sfailed to get property %u '%.*s' info - %s", buf, 0x36u);
      }
      if ((char)v32 < 0)
        operator delete(__p[0]);
    }
  }
}

__int128 *caulk::expected<vp::vx::Property_Info,vp::vx::Error_Code>::swap(__int128 *result, int *a2)
{
  BOOL v2;
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;

  if (*((_BYTE *)result + 16))
    v2 = *((_BYTE *)a2 + 16) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v4 = *result;
    *result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v4;
    return result;
  }
  if (*((_BYTE *)result + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      v3 = *a2;
      *(_OWORD *)a2 = *result;
      *(_DWORD *)result = v3;
      LOBYTE(v3) = *((_BYTE *)result + 16);
      *((_BYTE *)result + 16) = 0;
      *((_BYTE *)a2 + 16) = v3;
      return result;
    }
  }
  else if (*((_BYTE *)a2 + 16))
  {
    v5 = *(_OWORD *)a2;
    *a2 = *(_DWORD *)result;
    *result = v5;
    *((_BYTE *)result + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + 16) = 0;
    return result;
  }
  v6 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v6;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E69BA838;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA838;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  vp::vx::data_flow::State_Transaction *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  NSObject *log;
  vp *log_context_info;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE *v15;
  const char *v16;
  vp *v17;
  uint64_t v18;
  unsigned int *v19;
  vp *v20;
  NSObject *v21;
  vp *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  void **v26;
  void **v27;
  const char *v28;
  void **v29;
  uint64_t v30;
  NSObject *v31;
  vp *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  _BYTE *v37;
  const char *v38;
  unsigned int v39;
  const char *v40;
  char *v41;
  void *v42[2];
  char v43;
  void *v44[2];
  unsigned __int8 v45;
  _BYTE __p[22];
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  void **v54;
  uint8_t buf[12];
  __int16 v56;
  _BYTE v57[10];
  _BYTE v58[10];
  __int16 v59;
  char *v60;
  __int16 v61;
  const char *v62;
  void *v63;
  char v64;
  _QWORD v65[22];

  v65[19] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 968;
  v4 = (vp::vx::data_flow::State_Transaction *)(a2 + 784);
  v5 = *(_QWORD *)(a1 + 16);
  v41 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  v7 = v6;
  v8 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v41);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v11 = HIBYTE(v47);
    v12 = *(_QWORD *)&__p[8];
    v13 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if ((v11 & 0x80u) == 0)
        v14 = v11;
      else
        v14 = v12;
      if (v47 >= 0)
        v15 = __p;
      else
        v15 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v15;
      v56 = 2080;
      if (v14)
        v16 = " ";
      else
        v16 = "";
      *(_QWORD *)v57 = v16;
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)v58 = v8;
      *(_WORD *)&v58[4] = 1040;
      *(_DWORD *)&v58[6] = v7;
      v59 = 2080;
      v60 = v41;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "%s%sset property %u '%.*s'", buf, 0x2Cu);
    }
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)__p);
  }
  vp::vx::Property_Manager::set_property(v3, **(_DWORD **)(a1 + 8), *(const vp::Blob **)(a1 + 32), v4, (uint64_t)buf);
  v18 = *(_QWORD *)(a1 + 24);
  if (!buf[4] || !*(_BYTE *)(v18 + 4))
  {
    if (buf[4])
    {
      if (!*(_BYTE *)(v18 + 4))
      {
        *(_BYTE *)(v18 + 4) = buf[4];
        goto LABEL_23;
      }
    }
    else if (*(_BYTE *)(v18 + 4))
    {
      *(_DWORD *)v18 = *(_DWORD *)buf;
      *(_BYTE *)(v18 + 4) = 0;
      goto LABEL_23;
    }
    *(_DWORD *)v18 = *(_DWORD *)buf;
  }
LABEL_23:
  if (*(_BYTE *)(v18 + 4))
  {
    v19 = *(unsigned int **)(a1 + 8);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    vp::vx::Property_Manager::get_property(v3, *v19, (uint64_t)&v57[2], v4, __p);
    if (__p[4])
    {
      v21 = vp::get_log(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v44);
        if ((v45 & 0x80u) == 0)
          v23 = v45;
        else
          v23 = (unint64_t)v44[1];
        v24 = vp::get_log(v22);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = (char)v45;
          v26 = (void **)v44[0];
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v58, v42);
          v27 = v44;
          if (v25 < 0)
            v27 = v26;
          *(_QWORD *)&__p[4] = v27;
          v28 = " ";
          *(_DWORD *)__p = 136316418;
          if (!v23)
            v28 = "";
          *(_WORD *)&__p[12] = 2080;
          if (v43 >= 0)
            v29 = v42;
          else
            v29 = (void **)v42[0];
          *(_QWORD *)&__p[14] = v28;
          v47 = 1024;
          v48 = v8;
          v49 = 1040;
          v50 = v7;
          v51 = 2080;
          v52 = v41;
          v53 = 2080;
          v54 = v29;
          _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' is %s", __p, 0x36u);
          if (v43 < 0)
            operator delete(v42[0]);
        }
        if ((char)v45 < 0)
          operator delete(v44[0]);
      }
    }
    *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
    v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v57[2] = v30;
    *(_QWORD *)v58 = MEMORY[0x1E0DE4FB8] + 16;
    if (v64 < 0)
      operator delete(v63);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1BCC95BE4](v65);
  }
  else
  {
    v31 = vp::get_log(v17);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v33 = HIBYTE(v47);
      v34 = *(_QWORD *)&__p[8];
      v35 = vp::get_log(v32);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        if ((v33 & 0x80u) == 0)
          v36 = v33;
        else
          v36 = v34;
        v37 = *(_BYTE **)__p;
        v38 = " ";
        if (v47 >= 0)
          v37 = __p;
        if (!v36)
          v38 = "";
        v39 = *(_DWORD *)v18 - 1;
        if (v39 > 0xA)
          v40 = "bad argument";
        else
          v40 = off_1E69BE550[v39];
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v37;
        v56 = 2080;
        *(_QWORD *)v57 = v38;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)v58 = v8;
        *(_WORD *)&v58[4] = 1040;
        *(_DWORD *)&v58[6] = v7;
        v59 = 2080;
        v60 = v41;
        v61 = 2080;
        v62 = v40;
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "%s%sfailed to set property %u '%.*s' - %s", buf, 0x36u);
      }
      if (SHIBYTE(v47) < 0)
        operator delete(*(void **)__p);
    }
  }
  if ((*(_DWORD *)(v5 + 776) - 5) <= 1)
    vp::vx::data_flow::State_Transaction::commit(v4);
}

void sub_1B6032960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v48;

  if (a2)
  {
    if (a18 < 0)
      operator delete(__p);
    a28 = *MEMORY[0x1E0DE4F50];
    v48 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(uint64_t *)((char *)&a28 + *(_QWORD *)(a28 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    a30 = v48;
    a31 = MEMORY[0x1E0DE4FB8] + 16;
    if (a44 < 0)
      operator delete(a39);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1BCC95BE4](&a47);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B603290CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E69BA880;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA880;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  int *v9;
  char v10;
  uint64_t *v11;
  NSObject *log;
  vp *log_context_info;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void *p_p;
  uint64_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  vp *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  unsigned int v31;
  const char *v32;
  void *__p;
  uint64_t v34;
  unsigned __int8 v35;
  _BYTE buf[12];
  __int16 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[10];
  _BYTE v41[10];
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  v6 = v5;
  v7 = **(_DWORD **)(a1 + 8);
  v8 = vp::vx::Property_Manager::add_property_listener((_QWORD *)(a2 + 968), v7, **(const void ***)(a1 + 24));
  v9 = *(int **)(a1 + 16);
  *(_QWORD *)buf = v8;
  buf[8] = v10;
  v11 = caulk::expected<long long,vp::vx::Error_Code>::swap((uint64_t *)buf, v9);
  LODWORD(a2) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 8);
  log = vp::get_log((vp *)v11);
  if ((_DWORD)a2)
  {
    if (!os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      return;
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v14 = v35;
    v15 = v34;
    v16 = vp::get_log(log_context_info);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_29;
    if ((v14 & 0x80u) == 0)
      v17 = v14;
    else
      v17 = v15;
    p_p = __p;
    if ((v35 & 0x80u) == 0)
      p_p = &__p;
    v19 = **(_QWORD **)(a1 + 16);
    *(_DWORD *)buf = 136316418;
    if (v17)
      v20 = " ";
    else
      v20 = "";
    *(_QWORD *)&buf[4] = p_p;
    v37 = 2080;
    v38 = v20;
    v39 = 2048;
    *(_QWORD *)v40 = v19;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)v41 = v7;
    *(_WORD *)&v41[4] = 1040;
    *(_DWORD *)&v41[6] = v6;
    v42 = 2080;
    v43 = v4;
    v21 = "%s%sadded listener %lld for property %u '%.*s'";
    v22 = v16;
    v23 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_28;
  }
  if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    return;
  v24 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  v25 = v35;
  v26 = v34;
  v27 = vp::get_log(v24);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    if ((v25 & 0x80u) == 0)
      v28 = v25;
    else
      v28 = v26;
    if ((v35 & 0x80u) == 0)
      v29 = &__p;
    else
      v29 = __p;
    if (v28)
      v30 = " ";
    else
      v30 = "";
    v31 = **(_DWORD **)(a1 + 16) - 1;
    if (v31 > 0xA)
      v32 = "bad argument";
    else
      v32 = off_1E69BE550[v31];
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = v29;
    v37 = 2080;
    v38 = v30;
    v39 = 1024;
    *(_DWORD *)v40 = v7;
    *(_WORD *)&v40[4] = 1040;
    *(_DWORD *)&v40[6] = v6;
    *(_WORD *)v41 = 2080;
    *(_QWORD *)&v41[2] = v4;
    v42 = 2080;
    v43 = (void *)v32;
    v21 = "%s%sfailed to add listener for property %u '%.*s' - %s";
    v22 = v27;
    v23 = OS_LOG_TYPE_ERROR;
LABEL_28:
    _os_log_impl(&dword_1B5ED0000, v22, v23, v21, buf, 0x36u);
  }
LABEL_29:
  if ((char)v35 < 0)
    operator delete(__p);
}

uint64_t *caulk::expected<long long,vp::vx::Error_Code>::swap(uint64_t *result, int *a2)
{
  char v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_BYTE *)result + 8);
  v3 = *((unsigned __int8 *)a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = *result;
    *result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v6;
    return result;
  }
  if (*((_BYTE *)result + 8))
  {
    if (!*((_BYTE *)a2 + 8))
    {
      v5 = *a2;
      *(_QWORD *)a2 = *result;
      *(_DWORD *)result = v5;
      *((_BYTE *)result + 8) = 0;
      *((_BYTE *)a2 + 8) = v2;
      return result;
    }
  }
  else if (*((_BYTE *)a2 + 8))
  {
    v7 = *(_QWORD *)a2;
    *a2 = *(_DWORD *)result;
    *result = v7;
    *((_BYTE *)result + 8) = v3;
    *((_BYTE *)a2 + 8) = 0;
    return result;
  }
  v8 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v8;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E69BA8C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA8C8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  unsigned int v7;
  vp *v8;
  uint64_t v9;
  int v10;
  NSObject *log;
  vp *log_context_info;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *p_p;
  uint64_t v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  vp *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  unsigned int v30;
  const char *v31;
  void *__p;
  uint64_t v33;
  unsigned __int8 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[10];
  _BYTE v41[10];
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  v6 = v5;
  v7 = **(_DWORD **)(a1 + 8);
  v8 = (vp *)vp::vx::Property_Manager::remove_property_listener(a2 + 968, v7, **(_QWORD **)(a1 + 24), buf);
  v9 = *(_QWORD *)(a1 + 16);
  if (!(_BYTE)v36 || !*(_BYTE *)(v9 + 4))
  {
    if ((_BYTE)v36)
    {
      if (!*(_BYTE *)(v9 + 4))
      {
        *(_BYTE *)(v9 + 4) = (_BYTE)v36;
        goto LABEL_9;
      }
    }
    else if (*(_BYTE *)(v9 + 4))
    {
      *(_DWORD *)v9 = *(_DWORD *)buf;
      *(_BYTE *)(v9 + 4) = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v9 = *(_DWORD *)buf;
  }
LABEL_9:
  v10 = *(unsigned __int8 *)(v9 + 4);
  log = vp::get_log(v8);
  if (v10)
  {
    if (!os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      return;
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    v13 = v34;
    v14 = v33;
    v15 = vp::get_log(log_context_info);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      goto LABEL_37;
    if ((v13 & 0x80u) == 0)
      v16 = v13;
    else
      v16 = v14;
    p_p = __p;
    if ((v34 & 0x80u) == 0)
      p_p = &__p;
    v18 = **(_QWORD **)(a1 + 24);
    *(_DWORD *)buf = 136316418;
    if (v16)
      v19 = " ";
    else
      v19 = "";
    v36 = p_p;
    v37 = 2080;
    v38 = v19;
    v39 = 2048;
    *(_QWORD *)v40 = v18;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)v41 = v7;
    *(_WORD *)&v41[4] = 1040;
    *(_DWORD *)&v41[6] = v6;
    v42 = 2080;
    v43 = v4;
    v20 = "%s%sremoved listener %lld for property %u '%.*s'";
    v21 = v15;
    v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_36;
  }
  if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    return;
  v23 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  v24 = v34;
  v25 = v33;
  v26 = vp::get_log(v23);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    if ((v24 & 0x80u) == 0)
      v27 = v24;
    else
      v27 = v25;
    if ((v34 & 0x80u) == 0)
      v28 = &__p;
    else
      v28 = __p;
    if (v27)
      v29 = " ";
    else
      v29 = "";
    v30 = **(_DWORD **)(a1 + 16) - 1;
    if (v30 > 0xA)
      v31 = "bad argument";
    else
      v31 = off_1E69BE550[v30];
    *(_DWORD *)buf = 136316418;
    v36 = v28;
    v37 = 2080;
    v38 = v29;
    v39 = 1024;
    *(_DWORD *)v40 = v7;
    *(_WORD *)&v40[4] = 1040;
    *(_DWORD *)&v40[6] = v6;
    *(_WORD *)v41 = 2080;
    *(_QWORD *)&v41[2] = v4;
    v42 = 2080;
    v43 = (void *)v31;
    v20 = "%s%sfailed to remove listener for property %u '%.*s' - %s";
    v21 = v26;
    v22 = OS_LOG_TYPE_ERROR;
LABEL_36:
    _os_log_impl(&dword_1B5ED0000, v21, v22, v20, buf, 0x36u);
  }
LABEL_37:
  if ((char)v34 < 0)
    operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BA910;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA910;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];
  int v4;

  v4 = 0;
  v3[0] = a2;
  v3[1] = &v4;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"update initialization counters", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>, (uint64_t)v3);
  *(_DWORD *)(a2 + 776) = 2;
  vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(a2, 0);
}

void vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BA958;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA958;
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State_Transaction::commit((vp::vx::data_flow::State_Transaction *)(a2 + 784));
  *(_DWORD *)(a2 + 776) = 3;
  vp::vx::Voice_Processor::components_end_initialization<vp::Domain>(a2, 0);
}

void vp::vx::Voice_Processor::components_end_initialization<vp::Domain>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BA9A0;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BA9A0;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];
  int v4;

  v4 = 1;
  v3[0] = a2;
  v3[1] = &v4;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"update initialization counters", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>, (uint64_t)v3);
  *(_DWORD *)(a2 + 776) = 4;
  vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(a2, 1);
}

void std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69BA9E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BA9E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  vp::vx::Voice_Processor *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  char v9;

  v4 = *(vp::vx::Voice_Processor **)(a1 + 16);
  vp::vx::data_flow::State_Transaction::commit((vp::vx::data_flow::State_Transaction *)(a2 + 784));
  vp::vx::Voice_Processor::handle_configuration_changes(v4, &v8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v9)
    v6 = *(_BYTE *)(v5 + 4) == 0;
  else
    v6 = 1;
  if (!v6)
    goto LABEL_13;
  v7 = v8;
  if (v9)
  {
    if (*(_BYTE *)(v5 + 4))
      *(_DWORD *)v5 = v8;
    else
      *(_BYTE *)(v5 + 4) = v9;
LABEL_13:
    *(_DWORD *)(a2 + 776) = 5;
    vp::vx::Voice_Processor::components_end_initialization<vp::Domain>((uint64_t)v4, 1);
    return;
  }
  if (*(_BYTE *)(v5 + 4))
    *(_BYTE *)(v5 + 4) = 0;
  *(_DWORD *)v5 = v7;
  *(_DWORD *)(a2 + 776) = 6;
  vp::vx::Voice_Processor::components_end_initialization<vp::Domain,vp::vx::Error_Code>((uint64_t)v4, 1, v7);
}

void vp::vx::Voice_Processor::components_end_initialization<vp::Domain,vp::vx::Error_Code>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(uint64_t **)(a1 + 520);
  for (i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    v7 = *v3;
    v8 = (std::__shared_weak_count *)v3[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, a2, a3);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void *std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>@<X0>(uint64_t a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  const void *v6;
  void *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (const void *)std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::view[abi:ne180100](a1);
  result = *a2;
  a3[3] = *a2;
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9 + 1, 1);
    a3[1] = v8;
    a3[2] = v10 | 0x8000000000000000;
    *a3 = v11;
    a3 = (_QWORD *)v11;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v5;
    if (!v5)
      goto LABEL_9;
  }
  result = memmove(a3, v6, v8);
LABEL_9:
  *((_BYTE *)a3 + v8) = 0;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_initialization_counts(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  int v3;
  _BYTE v4[24];

  v1 = **a1;
  v3 = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(v1 + 16), &v3, (uint64_t)v4);
  vp::vx::data_flow::State<void>::operator=(v1 + 808, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  v3 = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(v1 + 16), &v3, (uint64_t)v4);
  vp::vx::data_flow::State<void>::operator=(v1 + 832, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_control_center_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = **a1;
  if (!*(_BYTE *)(v1 + 360) && !*(_BYTE *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Control_Center,(decltype(nullptr))0>(*(_QWORD **)(v1 + 456), &v12);
    if ((_QWORD)v12)
    {
      v2 = (_QWORD *)operator new();
      v3 = (uint64_t)v2;
      v13 = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      vp::vx::Control_Center_Manager::Control_Center_Manager(v2, (std::pmr *)(v1 + 16), &v13, *(_DWORD *)(v1 + 264));
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100]((uint64_t *)(v1 + 2704), v3);
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1B6033900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a12)
    std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis,std::shared_ptr<vp::services::Audio_Data_Analysis> &,vp::Allocator<std::byte> &>();
  MEMORY[0x1BCC95CEC](v12, 0x20C40A4A59CD2);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::Control_Center,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"cltc", v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_system_status_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  vp::vx::System_Status_Manager *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v1 = **a1;
  vp::Service_Provider::get<vp::services::System_Status,(decltype(nullptr))0>(*(_QWORD **)(v1 + 456), &v12);
  if (v12)
  {
    v2 = operator new();
    v3 = (vp::vx::System_Status_Manager *)v2;
    v14 = v12;
    v15 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    vp::vx::System_Status_Manager::System_Status_Manager(v2, v1 + 16, &v14);
    v6 = v15;
    if (v15)
    {
      v7 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::unique_ptr<vp::vx::System_Status_Manager>::reset[abi:ne180100]((vp::vx::System_Status_Manager **)(v1 + 2712), v3);
  }
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B6033B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a12)
    std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis,std::shared_ptr<vp::services::Audio_Data_Analysis> &,vp::Allocator<std::byte> &>();
  MEMORY[0x1BCC95CEC](v12, 0x20C40A4A59CD2);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::System_Status,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"tsys", v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_telephony_utility_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v1 = **a1;
  if (!*(_BYTE *)(v1 + 360) && !*(_BYTE *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Telephony_Utility,(decltype(nullptr))0>(*(_QWORD **)(v1 + 456), &v5);
    if (v5)
      std::optional<vp::vx::Telephony_Utility_Manager>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,void>((vp::vx::Telephony_Utility_Manager *)(v1 + 2720), v1, &v5);
    v2 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_1B6033CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis,std::shared_ptr<vp::services::Audio_Data_Analysis> &,vp::Allocator<std::byte> &>();
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Telephony_Utility,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1952803957u>::k_service_type_id, v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

vp::vx::Telephony_Utility_Manager *std::optional<vp::vx::Telephony_Utility_Manager>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,void>(vp::vx::Telephony_Utility_Manager *this, uint64_t a2, uint64_t *a3)
{
  if (*((_BYTE *)this + 112))
  {
    vp::vx::Telephony_Utility_Manager::~Telephony_Utility_Manager(this);
    *((_BYTE *)this + 112) = 0;
  }
  std::construct_at[abi:ne180100]<vp::vx::Telephony_Utility_Manager,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,vp::vx::Telephony_Utility_Manager*>((uint64_t)this, a2, a3);
  *((_BYTE *)this + 112) = 1;
  return this;
}

uint64_t std::construct_at[abi:ne180100]<vp::vx::Telephony_Utility_Manager,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,vp::vx::Telephony_Utility_Manager*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)a3[1];
  v5 = a2 + 16;
  v12 = *a3;
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  vp::vx::Telephony_Utility_Manager::Telephony_Utility_Manager(a1, v5, &v12);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1B6033E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_orientation_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  vp::vx::Orientation_Manager *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v1 = **a1;
  if (!*(_BYTE *)(v1 + 360) && !*(_BYTE *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Orientation,(decltype(nullptr))0>(*(_QWORD **)(v1 + 456), &v12);
    if (v12)
    {
      v2 = operator new();
      v3 = (vp::vx::Orientation_Manager *)v2;
      v14 = v12;
      v15 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      vp::vx::Orientation_Manager::Orientation_Manager(v2, v1 + 16, &v14);
      v6 = v15;
      if (v15)
      {
        v7 = (unint64_t *)&v15->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::unique_ptr<vp::vx::Orientation_Manager>::reset[abi:ne180100]((vp::vx::Orientation_Manager **)(v1 + 2840), v3);
    }
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1B6033FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a12)
    std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis,std::shared_ptr<vp::services::Audio_Data_Analysis> &,vp::Allocator<std::byte> &>();
  MEMORY[0x1BCC95CEC](v12, 0x1020C4000920AE5);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::Orientation,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1869770356u>::k_service_type_id, v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_property_states(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  std::vector<char>::pointer begin;
  vp::vx::Control_Center_Manager *v3;
  std::vector<char>::value_type *v4;
  vp::vx::Orientation_Manager *v5;
  _BYTE *v6;
  uint64_t *v7;
  _BYTE *v8;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  void *v19;
  _BYTE v20[24];
  void *v21;
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  void *v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  void *v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[24];
  CFTypeRef v37;
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  CFTypeRef v41;
  _BYTE v42[24];
  void *v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  std::vector<char>::value_type v47[24];
  std::vector<char>::value_type __x[16];
  __int128 v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  std::vector<char> v61;
  _BYTE v62[24];
  _BYTE v63[24];
  __int128 v64[2];
  uint64_t v65;
  _BYTE v66[24];
  void *aBlock;
  _BYTE v68[24];
  __int128 v69[2];
  uint64_t v70;
  _BYTE v71[24];
  __int128 v72[2];
  uint64_t v73;
  _BYTE v74[24];
  CFTypeRef v75;
  _BYTE v76[24];
  CFTypeRef v77;
  _BYTE v78[24];
  void *v79;
  void *v80;
  uint64_t v81;
  _BYTE v82[24];
  CFTypeRef v83;
  _BYTE v84[24];
  _BYTE v85[24];
  _BYTE v86[24];
  _BYTE v87[24];
  _BYTE v88[24];
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  CFTypeRef v97;
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[24];
  _BYTE v101[24];
  _BYTE v102[24];
  _BYTE v103[24];
  _BYTE v104[24];
  _BYTE v105[24];
  __int128 v106[2];
  uint64_t v107;
  _BYTE v108[24];
  CFTypeRef v109;
  _BYTE v110[24];
  CFTypeRef v111;
  _BYTE v112[24];
  void *__p;
  void *v114;
  uint64_t v115;
  _BYTE v116[24];
  _BYTE v117[24];
  _BYTE v118[24];
  CFTypeRef cf;
  _BYTE v120[24];
  _BYTE v121[24];
  _BYTE v122[24];
  _BYTE v123[24];
  _BYTE v124[24];
  _BYTE v125[24];
  _BYTE v126[24];
  _BYTE v127[24];
  _BYTE v128[24];
  _BYTE v129[24];
  _BYTE v130[24];
  __int128 v131[2];
  uint64_t v132;
  _BYTE v133[24];
  _BYTE v134[24];
  _BYTE v135[24];
  _BYTE v136[24];
  _BYTE v137[24];
  _BYTE v138[24];
  _BYTE v139[24];

  v1 = **a1;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)0>(v1, 0, (uint64_t)v139);
  vp::vx::data_flow::State<void>::~State((uint64_t)v139);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)1>(v1, 0, (uint64_t)v138);
  vp::vx::data_flow::State<void>::~State((uint64_t)v138);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)2>(v1, 1, (uint64_t)v137);
  vp::vx::data_flow::State<void>::~State((uint64_t)v137);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)3>(v1, 0, (uint64_t)v136);
  vp::vx::data_flow::State<void>::~State((uint64_t)v136);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)4>(v1, 0, (uint64_t)v135);
  vp::vx::data_flow::State<void>::~State((uint64_t)v135);
  if (*(_DWORD *)(v1 + 264) == 3)
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)7>(v1, (uint64_t)v134, 0.0);
    vp::vx::data_flow::State<void>::~State((uint64_t)v134);
  }
  v132 = 0;
  memset(v131, 0, sizeof(v131));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)8>(v1, v131, (uint64_t)v133);
  vp::vx::data_flow::State<void>::~State((uint64_t)v133);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)9>(v1, 0, (uint64_t)v130);
  vp::vx::data_flow::State<void>::~State((uint64_t)v130);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)10>(v1, 0, (uint64_t)v129);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)11>(v1, 0, (uint64_t)v128);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(v1, (uint64_t)vp::vx::get_port_owning_device_id, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v127);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(v1, (uint64_t)vp::vx::get_nominal_input_sample_rate, (vp::vx::data_flow::State_Transaction *)v127, (uint64_t)v126, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v126);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(v1, (uint64_t)vp::vx::get_input_latency, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v125);
  vp::vx::data_flow::State<void>::~State((uint64_t)v125);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(v1, (uint64_t)vp::vx::get_input_safety_offset, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v124);
  vp::vx::data_flow::State<void>::~State((uint64_t)v124);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)16>(v1, 0, (uint64_t)v123);
  vp::vx::data_flow::State<void>::~State((uint64_t)v123);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)17>(v1, 0, (uint64_t)v122);
  vp::vx::data_flow::State<void>::~State((uint64_t)v122);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)18>(v1, 0, (uint64_t)v121);
  vp::vx::data_flow::State<void>::~State((uint64_t)v121);
  cf = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)19>(v1, &cf, (uint64_t)v120);
  vp::vx::data_flow::State<void>::~State((uint64_t)v120);
  if (cf)
    CFRelease(cf);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(v1, (uint64_t)vp::vx::get_io_cycle_usage, (vp::vx::data_flow::State_Transaction *)v128, (uint64_t)v118, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v118);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(v1, (uint64_t)v117, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v117);
  v114 = 0;
  __p = 0;
  v115 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)20>(v1, (uint64_t)&__p, (uint64_t)v116);
  vp::vx::data_flow::State<void>::~State((uint64_t)v116);
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  v111 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)21>(v1, &v111, (uint64_t)v112);
  vp::vx::data_flow::State<void>::~State((uint64_t)v112);
  if (v111)
    CFRelease(v111);
  v109 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)22>(v1, &v109, (uint64_t)v110);
  vp::vx::data_flow::State<void>::~State((uint64_t)v110);
  if (v109)
    CFRelease(v109);
  v107 = 0;
  memset(v106, 0, sizeof(v106));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)23>(v1, v106, (uint64_t)v108);
  vp::vx::data_flow::State<void>::~State((uint64_t)v108);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)24>(v1, 0, (uint64_t)v105);
  vp::vx::data_flow::State<void>::~State((uint64_t)v105);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)25>(v1, 0, (uint64_t)v104);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)26>(v1, 0, (uint64_t)v103);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(v1, (uint64_t)vp::vx::get_port_owning_device_id, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v102);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36,vp::vx::Output_Port_Type>(v1, (uint64_t)_ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_13Port_Sub_TypeEiEES4_, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v101);
  vp::vx::data_flow::State<void>::~State((uint64_t)v101);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37,vp::vx::Output_Port_Type>(v1, (uint64_t)_ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E0_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_18Port_Endpoint_TypeEiEES4_, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v100);
  vp::vx::data_flow::State<void>::~State((uint64_t)v100);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(v1, (uint64_t)vp::vx::get_output_device_is_apple_made_bluetooth_product, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v99);
  vp::vx::data_flow::State<void>::~State((uint64_t)v99);
  v97 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_port_uid, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, &v97, (uint64_t)v98);
  vp::vx::data_flow::State<void>::~State((uint64_t)v98);
  if (v97)
    CFRelease(v97);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_port_HLC2chstate, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v96);
  vp::vx::data_flow::State<void>::~State((uint64_t)v96);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(v1, (uint64_t)vp::vx::get_nominal_output_sample_rate, (vp::vx::data_flow::State_Transaction *)v102, (uint64_t)v95, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v95);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(v1, (uint64_t)vp::vx::get_input_latency, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v94);
  vp::vx::data_flow::State<void>::~State((uint64_t)v94);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(v1, (uint64_t)vp::vx::get_input_safety_offset, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v93);
  vp::vx::data_flow::State<void>::~State((uint64_t)v93);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(v1, (uint64_t)vp::vx::get_output_latency, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v92);
  vp::vx::data_flow::State<void>::~State((uint64_t)v92);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(v1, (uint64_t)vp::vx::get_output_latency, (vp::vx::data_flow::State_Transaction *)v102, 0, (uint64_t)v91);
  vp::vx::data_flow::State<void>::~State((uint64_t)v91);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(v1, (uint64_t)vp::vx::get_output_safety_offset, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v90);
  vp::vx::data_flow::State<void>::~State((uint64_t)v90);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(v1, (uint64_t)vp::vx::get_output_safety_offset, (vp::vx::data_flow::State_Transaction *)v102, 0, (uint64_t)v89);
  vp::vx::data_flow::State<void>::~State((uint64_t)v89);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_physical_stream_latency, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v88);
  vp::vx::data_flow::State<void>::~State((uint64_t)v88);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)41>(v1, 0, (uint64_t)v87);
  vp::vx::data_flow::State<void>::~State((uint64_t)v87);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)42>(v1, 0, (uint64_t)v86);
  vp::vx::data_flow::State<void>::~State((uint64_t)v86);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)43>(v1, 0, (uint64_t)v85);
  vp::vx::data_flow::State<void>::~State((uint64_t)v85);
  v83 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)44>(v1, &v83, (uint64_t)v84);
  vp::vx::data_flow::State<void>::~State((uint64_t)v84);
  if (v83)
    CFRelease(v83);
  v80 = 0;
  v79 = 0;
  v81 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)45>(v1, (uint64_t)&v79, (uint64_t)v82);
  vp::vx::data_flow::State<void>::~State((uint64_t)v82);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  v77 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)46>(v1, &v77, (uint64_t)v78);
  vp::vx::data_flow::State<void>::~State((uint64_t)v78);
  if (v77)
    CFRelease(v77);
  v75 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)47>(v1, &v75, (uint64_t)v76);
  vp::vx::data_flow::State<void>::~State((uint64_t)v76);
  if (v75)
    CFRelease(v75);
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)48>(v1, v72, (uint64_t)v74);
  vp::vx::data_flow::State<void>::~State((uint64_t)v74);
  v70 = 0;
  memset(v69, 0, sizeof(v69));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)49>(v1, v69, (uint64_t)v71);
  vp::vx::data_flow::State<void>::~State((uint64_t)v71);
  aBlock = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)50>(v1, &aBlock, (uint64_t)v68);
  vp::vx::data_flow::State<void>::~State((uint64_t)v68);
  if (aBlock)
  {
    _Block_release(aBlock);
    aBlock = 0;
  }
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)51>(v1, v64, (uint64_t)v66);
  vp::vx::data_flow::State<void>::~State((uint64_t)v66);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)52>(v1, 0, (uint64_t)v63);
  vp::vx::data_flow::State<void>::~State((uint64_t)v63);
  __x[0] = 0;
  std::vector<char>::vector(&v61, 0x20uLL, __x);
  begin = v61.__begin_;
  *(_QWORD *)v61.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)53>(v1, (uint64_t)&v61, (uint64_t)v62);
  vp::vx::data_flow::State<void>::~State((uint64_t)v62);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)54>(v1, 0, (uint64_t)v60);
  vp::vx::data_flow::State<void>::~State((uint64_t)v60);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)55>(v1, 0, (uint64_t)v59);
  vp::vx::data_flow::State<void>::~State((uint64_t)v59);
  v3 = *(vp::vx::Control_Center_Manager **)(v1 + 2704);
  if (v3)
  {
    vp::vx::Control_Center_Manager::get_preferred_chat_flavor(v3, (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(v1, (uint64_t)__x);
    vp::vx::data_flow::State<void>::~State((uint64_t)__x);
    vp::vx::Control_Center_Manager::get_active_chat_flavor(*(vp::vx::Control_Center_Manager **)(v1 + 2704), (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(v1, (uint64_t)__x);
    vp::vx::data_flow::State<void>::~State((uint64_t)__x);
    vp::vx::Control_Center_Manager::get_automatic_mic_mode_is_enabled(*(vp::vx::Control_Center_Manager **)(v1 + 2704), (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(v1, (uint64_t)__x);
    v4 = __x;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)56>(v1, 0, (uint64_t)v58);
    vp::vx::data_flow::State<void>::~State((uint64_t)v58);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)57>(v1, 0, (uint64_t)v57);
    vp::vx::data_flow::State<void>::~State((uint64_t)v57);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)91>(v1, 0, (uint64_t)v56);
    v4 = v56;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)58>(v1, 0, (uint64_t)v55);
  vp::vx::data_flow::State<void>::~State((uint64_t)v55);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)59>(v1, 0, (uint64_t)v54);
  vp::vx::data_flow::State<void>::~State((uint64_t)v54);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)60>(v1, (uint64_t)v53, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v53);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)61>(v1, (uint64_t)v52, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v52);
  v50 = 0;
  *(_OWORD *)__x = 0u;
  v49 = 0u;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)62>(v1, (__int128 *)__x, (uint64_t)v51);
  vp::vx::data_flow::State<void>::~State((uint64_t)v51);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)63>(v1, 0, (uint64_t)v47);
  vp::vx::data_flow::State<void>::~State((uint64_t)v47);
  v44 = 0;
  v43 = 0;
  v45 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)64>(v1, (uint64_t)&v43, (uint64_t)v46);
  vp::vx::data_flow::State<void>::~State((uint64_t)v46);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v41 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)65>(v1, &v41, (uint64_t)v42);
  vp::vx::data_flow::State<void>::~State((uint64_t)v42);
  if (v41)
    CFRelease(v41);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)66>(v1, 0, (uint64_t)v40);
  vp::vx::data_flow::State<void>::~State((uint64_t)v40);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)67>(v1, (uint64_t)v39, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v39);
  v37 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)68>(v1, &v37, (uint64_t)v38);
  vp::vx::data_flow::State<void>::~State((uint64_t)v38);
  if (v37)
    CFRelease(v37);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)69>(v1, (uint64_t)&v33, (uint64_t)v36);
  vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v5 = *(vp::vx::Orientation_Manager **)(v1 + 2840);
  if (v5)
  {
    vp::vx::Orientation_Manager::get_device_orientation(v5, (uint64_t)v32);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(v1, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)v32);
    vp::vx::Orientation_Manager::get_ui_orientation(*(vp::vx::Orientation_Manager **)(v1 + 2840), (uint64_t)v32);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(v1, (uint64_t)v32);
    v6 = v32;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)72>(v1, 0, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)v32);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)73>(v1, 0, (uint64_t)v31);
    v6 = v31;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)74>(v1, 0, (uint64_t)v30);
  vp::vx::data_flow::State<void>::~State((uint64_t)v30);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)75>(v1, (uint64_t)&v26, (uint64_t)v29);
  vp::vx::data_flow::State<void>::~State((uint64_t)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)76>(v1, 0, (uint64_t)v25);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)77>(v1, 0, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)78>(v1, (uint64_t)v23, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v23);
  v21 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)84>(v1, &v21, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  if (v21)
  {
    _Block_release(v21);
    v21 = 0;
  }
  v19 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)83>(v1, &v19, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if (v19)
  {
    _Block_release(v19);
    v19 = 0;
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)85>(v1, 0, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)86>(v1, 0, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)87>(v1, 0, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (*(_BYTE *)(v1 + 2832))
  {
    vp::vx::data_flow::State<void>::State((uint64_t)v15, v1 + 2760);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(v1, (uint64_t)v15);
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)88>(v1, 0, (uint64_t)v15);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)89>(v1, 0, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)90>(v1, 0, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  v7 = *(uint64_t **)(v1 + 2712);
  if (v7)
  {
    vp::vx::Voice_Processor::get_app_bundle_id((vp::vx::Voice_Processor *)v1, (uint64_t)v11);
    vp::vx::System_Status_Manager::get_is_camera_active(v7, v1 + 16, (uint64_t)v11, (uint64_t)v12);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(v1, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    v8 = v11;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)92>(v1, 0, (uint64_t)v12);
    v8 = v12;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::Voice_Processor::get_preferred_io_cycle_usage((vp::vx::Voice_Processor *)v1, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)71>(v1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v102);
  vp::vx::data_flow::State<void>::~State((uint64_t)v103);
  vp::vx::data_flow::State<void>::~State((uint64_t)v104);
  vp::vx::data_flow::State<void>::~State((uint64_t)v127);
  vp::vx::data_flow::State<void>::~State((uint64_t)v128);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v129);
}

void sub_1B6034D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  vp::vx::data_flow::State<void>::~State((uint64_t)va1);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x720]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x738]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x750]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x910]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x928]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x940]);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)0>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)0>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)1>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)1>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60350C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)2>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)2>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)3>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)3>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60351A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)4>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)4>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _BYTE v6[28];
  float v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)7>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)8>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)8>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60352EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)9>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)9>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)10>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Input_Port_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)10>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60353CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)11>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)11>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EZNS1_21create_property_stateILS3_12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60355C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      *((double *)&v18 + 1) = a5;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EZNS1_21create_property_stateILS3_13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6035760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EZNS1_21create_property_stateILS3_14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60358F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EZNS1_21create_property_stateILS3_15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6035A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)16>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)16>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)17>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)17>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)18>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)18>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)19>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)19>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      *((float *)&v18 + 2) = a5;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EZNS1_21create_property_stateILS3_70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6035DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _BYTE v6[28];
  float v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)20>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)20>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)21>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)21>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)22>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)22>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6035F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)23>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)23>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6036000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)24>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)24>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6036070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)25>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Output_Port_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)25>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60360E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)26>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)26>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6036150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EZNS1_21create_property_stateILS3_27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60362D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v24);
    if (v24)
    {
      *(_QWORD *)&v20 = a1;
      DWORD2(v20) = a5;
      v21 = a2;
      v22 = v24;
      v23 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36EZNS1_21create_property_stateILS3_36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v20, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>(a1, a5, a6);
    }
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B6036470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v24);
    if (v24)
    {
      *(_QWORD *)&v20 = a1;
      DWORD2(v20) = a5;
      v21 = a2;
      v22 = v24;
      v23 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37EZNS1_21create_property_stateILS3_37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v20, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>(a1, a5, a6);
    }
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B603660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      BYTE8(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EZNS1_21create_property_stateILS3_38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60367A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, CFTypeRef *a5@<X4>, uint64_t a6@<X8>)
{
  CFTypeRef v9;
  uint64_t v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  CFTypeRef v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  CFTypeRef v31;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    v9 = *a5;
    if (*a5)
      CFRetain(*a5);
    v31 = v9;
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>(a1, &v31, a6);
    if (v31)
      CFRelease(v31);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v29);
    v13 = v29;
    if (v29)
    {
      *(_QWORD *)&v24 = a1;
      v14 = *a5;
      if (v14)
      {
        CFRetain(v14);
        v13 = v29;
      }
      *((_QWORD *)&v24 + 1) = v14;
      v25 = a2;
      v26 = v13;
      v27 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39EZNS1_21create_property_stateILS3_39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v24, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      v17 = v27;
      if (v27)
      {
        v18 = (unint64_t *)&v27->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (*((_QWORD *)&v24 + 1))
        CFRelease(*((CFTypeRef *)&v24 + 1));
    }
    else
    {
      v20 = *a5;
      if (*a5)
        CFRetain(*a5);
      v28 = v20;
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>(a1, &v28, a6);
      if (v28)
        CFRelease(v28);
    }
    v21 = v30;
    if (v30)
    {
      v22 = (unint64_t *)&v30->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1B6036988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v24);
    if (v24)
    {
      *(_QWORD *)&v20 = a1;
      DWORD2(v20) = a5;
      v21 = a2;
      v22 = v24;
      v23 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40EZNS1_21create_property_stateILS3_40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v20, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>(a1, a5, a6);
    }
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B6036B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      *((double *)&v18 + 1) = a5;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EZNS1_21create_property_stateILS3_28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6036CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EZNS1_21create_property_stateILS3_29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6036E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EZNS1_21create_property_stateILS3_30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6037014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EZNS1_21create_property_stateILS3_31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60371A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EZNS1_21create_property_stateILS3_32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B603733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EZNS1_21create_property_stateILS3_33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B60374D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v22);
    if (v22)
    {
      *(_QWORD *)&v18 = a1;
      DWORD2(v18) = a4;
      v19 = a2;
      v20 = v22;
      v21 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EZNS1_21create_property_stateILS3_34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v18, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      v12 = v21;
      if (v21)
      {
        v13 = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(a1, a4, a5);
    }
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B6037664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v24);
    if (v24)
    {
      *(_QWORD *)&v20 = a1;
      DWORD2(v20) = a5;
      v21 = a2;
      v22 = v24;
      v23 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35EZNS1_21create_property_stateILS3_35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v20, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>(a1, a5, a6);
    }
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B6037800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)41>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)41>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)42>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)42>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60378F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)43>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)43>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)44>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)44>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60379C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)45>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)45>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)46>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)46>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)47>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)47>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)48>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)48>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)49>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)49>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)50>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)50>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)51>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)51>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)52>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)52>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)53>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::ChannelLayout>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)53>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)54>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Beam_Direction>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)54>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)55>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Operation_Mode>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)55>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6037E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x38u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x38u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6037F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x39u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x39u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6037F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6037FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)56>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Chat_Flavor>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)57>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Chat_Flavor>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60380E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)91>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)58>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)58>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60381C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)59>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)59>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)60>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _BYTE v6[28];
  float v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)60>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60382A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)61>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _BYTE v6[28];
  float v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)61>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)62>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)62>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)63>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)63>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60383E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned int>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)64>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)65>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)65>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60384B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)66>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)66>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)67>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _BYTE v6[24];
  double v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)67>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)68>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)68>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)69>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<long long>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)69>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x48u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x48u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60386DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x49u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x49u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6038758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)72>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60387D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)73>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)74>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)74>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60388B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)75>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned char>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)75>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)76>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];
  uint64_t v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Spatial_Head_Tracking_Configuration>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)76>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)77>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)77>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60389F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)78>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _BYTE v6[28];
  float v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)78>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)84>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(float,float)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)84>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<void({block_pointer})(float,float)>::~Block(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)83>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)83>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)85>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)85>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)86>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)86>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)87>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];
  uint64_t v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<AUVoiceIOOtherAudioDuckingConfiguration>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)87>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x58u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x58u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6038D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)88>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)89>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)89>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)90>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)90>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6038F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)92>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6038FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)71>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x47u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6039098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::create_readable_writable<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::data_flow::State<void>::State((uint64_t)v6, a1);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 32) = a2;
  return vp::vx::data_flow::State<void>::~State(v6);
}

void vp::vx::Voice_Processor::Type_Converter<BOOL>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *vp::vx::Property::Blob_Type_Converter<BOOL>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _BYTE *result;
  char v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_from_blob(uint64_t a1, BOOL *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = (_DWORD)result != 0;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_to_blob(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_to_blob_size()
{
  return 4;
}

uint64_t vp::Blob_Getter<vp::Blob>::get<unsigned int>(uint64_t a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_QWORD *)(a1 + 7) != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return **(unsigned int **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(uint64_t a1, int a2)
{
  std::bad_cast *exception;
  std::bad_cast *v4;

  if (*(_QWORD *)(a1 + 6) <= 3uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_cast::bad_cast(exception);
  }
  **(_DWORD **)(a1 - 2) = a2;
  return vp::Mutable_Blob::set_size(a1 - 2, 4uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *vp::vx::Property::Property_List_Type_Converter<BOOL>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _BYTE *result;
  char v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<BOOL>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6039568(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::convert_to_plist(uint64_t a1, _BYTE *a2, const void **a3)
{
  const void **v3;
  const void *v4;

  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*a2)
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  v4 = *a3;
  *a3 = *v3;
  if (v4)
    CFRelease(v4);
}

void vp::vx::Voice_Processor::String_Type_Converter<BOOL>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<BOOL>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<BOOL>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)1>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 1u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)2>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 2u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6039788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)3>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 3u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6039804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)4>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 4u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6039880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<float>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)7>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 7u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<float>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<float>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<float>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<float>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<float>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

float vp::vx::Property::Blob_Type_Converter<float>::convert_from_blob@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  float *storage;
  float result;
  float v7;

  v7 = 0.0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  storage = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  result = v7;
  *storage = v7;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<float>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<float>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_from_blob(uint64_t a1, float *a2, uint64_t a3)
{
  *a2 = vp::Blob_Getter<vp::Blob>::get<float>(a3 + 1);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_to_blob(uint64_t a1, float *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<float>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_to_blob_size()
{
  return 4;
}

float vp::Blob_Getter<vp::Blob>::get<float>(uint64_t a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_QWORD *)(a1 + 7) != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return **(float **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<float>(uint64_t a1, float a2)
{
  std::bad_cast *exception;
  std::bad_cast *v4;

  if (*(_QWORD *)(a1 + 6) <= 3uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_cast::bad_cast(exception);
  }
  **(float **)(a1 - 2) = a2;
  return vp::Mutable_Blob::set_size(a1 - 2, 4uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

float vp::vx::Property::Property_List_Type_Converter<float>::convert_from_plist@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  float *storage;
  float result;
  float v7;

  v7 = 0.0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  storage = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  result = v7;
  *storage = v7;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<float>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6039E10(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B6039EDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<float>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<float>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<float>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>@<X0>(std::pmr *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t storage;
  __int128 v7;
  __int128 v8;
  _BYTE v10[24];
  _QWORD v11[3];
  _BYTE v12[24];

  v11[0] = std::pmr::get_default_resource(a1);
  v11[1] = 0;
  v11[2] = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v11);
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(storage + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)storage = v7;
  *(_OWORD *)(storage + 16) = v8;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v11, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State(v12);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v11);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)8>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 8u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_from_blob@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  uint64_t storage;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __n128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v8, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  v6 = v10;
  result = v9;
  *(_OWORD *)storage = v8;
  *(__n128 *)(storage + 16) = result;
  *(_QWORD *)(storage + 32) = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  vp::Blob_Getter<vp::Blob>::get<CA::StreamDescription>(a3 + 1, (uint64_t)v6);
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v5[2];
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6 = *(_QWORD *)(a2 + 32);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<CA::StreamDescription>(a3 + 2, v5);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob_size()
{
  return 40;
}

__n128 vp::Blob_Getter<vp::Blob>::get<CA::StreamDescription>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  std::bad_cast *exception;
  std::bad_cast *v6;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (*(_QWORD *)(a1 + 7) != 40)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v6 = std::bad_cast::bad_cast(exception);
  }
  v2 = *(_QWORD *)(a1 - 1);
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 32);
  return result;
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<CA::StreamDescription>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  std::bad_cast *exception;
  std::bad_cast *v7;

  if (*(_QWORD *)(a1 + 6) <= 0x27uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_cast::bad_cast(exception);
  }
  v2 = *(_QWORD *)(a1 - 2);
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v2 = v3;
  *(_OWORD *)(v2 + 16) = v4;
  return vp::Mutable_Blob::set_size(a1 - 2, 0x28uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 vp::vx::Property::Property_List_Type_Converter<CA::StreamDescription>::convert_from_plist@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  uint64_t storage;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __n128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v8, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  v6 = v10;
  result = v9;
  *(_OWORD *)storage = v8;
  *(__n128 *)(storage + 16) = result;
  *(_QWORD *)(storage + 32) = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CA::StreamDescription>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B603A5B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::convert_to_plist(int a1, applesauce::CF::TypeRef *a2, const void **this, double a4, int16x8_t a5)
{
  vp::vx::serialize_plist(this, a2, (const CA::StreamDescription *)this, a4, a5);
}

void vp::vx::serialize_plist(const void **this, applesauce::CF::TypeRef *a2, const CA::StreamDescription *a3, double a4, int16x8_t a5)
{
  void **v6;
  CFIndex v7;
  CFStringRef v8;
  const void *v9;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v12;

  CA::StreamDescription::AsString(a2, (uint64_t)__p, a5);
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (CFIndex)__p[1];
  v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v9 = *this;
  *this = v8;
  if (v9)
    CFRelease(v9);
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1B603A6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<CA::StreamDescription>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::convert_to_string(int a1, CA::StreamDescription *this, double a3, int16x8_t a4, _QWORD *a5)
{
  void **v6;
  uint64_t v7;
  void *v8[2];
  char v9;
  void *__p[2];
  unsigned __int8 v11;

  CA::StreamDescription::AsString(this, (uint64_t)v8, a4);
  vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v8, (uint64_t)__p);
  if ((v11 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v7 = v11;
  else
    v7 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a5, (uint64_t)v6, v7);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1B603A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

__n128 vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  __n128 result;
  unsigned __int8 v14;

  v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned __int8 **)a1;
    v4 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v4 = a1[23];
  }
  v5 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(a1, &a1[v4]);
  if ((char)v2[23] < 0)
  {
    v7 = *(unsigned __int8 **)v2;
    v6 = (unsigned __int8 *)(*(_QWORD *)v2 + *((_QWORD *)v2 + 1));
  }
  else
  {
    v6 = &v2[v2[23]];
    v7 = v2;
  }
  std::string::erase((std::string *)v2, v5 - v7, v6 - v5);
  if ((char)v2[23] < 0)
  {
    v9 = *(unsigned __int8 **)v2;
    v8 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v8 = v2[23];
    v9 = v2;
  }
  v14 = 10;
  v10 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v9, &v9[v8], &v14);
  if ((char)v2[23] < 0)
  {
    v12 = *(unsigned __int8 **)v2;
    v11 = (unsigned __int8 *)(*(_QWORD *)v2 + *((_QWORD *)v2 + 1));
  }
  else
  {
    v11 = &v2[v2[23]];
    v12 = v2;
  }
  std::string::erase((std::string *)v2, v10 - v12, v11 - v10);
  result = *(__n128 *)v2;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  return result;
}

unsigned __int8 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = std::__adjacent_find[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(a1, a2);
  v4 = v3;
  if (v3 != a2)
  {
    v5 = v3 + 2;
    if (v3 + 2 != a2)
    {
      v6 = MEMORY[0x1E0C80978];
      do
      {
        v7 = *v4;
        v8 = *v5;
        if (v7 != v8)
          goto LABEL_10;
        if ((char)v7 < 0)
        {
          if (!__maskrune((char)v7, 0x4000uLL))
          {
LABEL_9:
            LOBYTE(v8) = *v5;
LABEL_10:
            *++v4 = v8;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * (char)v7 + 60) & 0x4000) == 0)
        {
          goto LABEL_9;
        }
        ++v5;
      }
      while (v5 != a2);
    }
    ++v4;
  }
  return v4;
}

unsigned __int8 *std::__adjacent_find[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 == a2)
      return a2;
    v4 = MEMORY[0x1E0C80978];
    while (1)
    {
      v5 = *(v3 - 1);
      if (v5 == *v3)
      {
        if ((char)v5 < 0)
        {
          if (__maskrune((char)v5, 0x4000uLL))
            return v3 - 1;
        }
        else if ((*(_DWORD *)(v4 + 4 * (char)v5 + 60) & 0x4000) != 0)
        {
          return v3 - 1;
        }
      }
      if (++v3 == a2)
        return a2;
    }
  }
  return result;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)9>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 9u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<unsigned int>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<unsigned int>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<unsigned int>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B603AEC0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B603AF8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<unsigned int>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<unsigned int>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<unsigned int>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Input_Port_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)10>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xAu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603B15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B603B544(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B603B610(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Input_Port_Type>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Input_Port_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Input_Port_Type>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B603B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::locale v22;
  void (***v23[81])(void);

  v23[80] = *(void (****)(void))MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BB020;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E69BB058;
  v7[1].__shared_owners_ = (uint64_t)a1;
  v19 = v7;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v23, (uint64_t)&v20, (char)fmtflags, 0);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v23, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v23);
  return a1;
}

void sub_1B603B924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
  std::locale::~locale(&a13);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BB020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BB020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)11>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xBu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603BAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EZNS1_21create_property_stateILS3_12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B603BB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xCu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xCu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B603BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB088;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B603BE04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB088;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB088;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB088;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB088;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE12EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE12EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B603C060(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B603C048);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Mic_Physical_Device_ID]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 12;
        v22 = 1040;
        v23 = 22;
        v24 = 2080;
        v25 = "Mic_Physical_Device_ID]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603C280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 12;
        v21 = 1040;
        v22 = 22;
        v23 = 2080;
        v24 = "Mic_Physical_Device_ID]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Property::create_readable<unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::data_flow::State<void>::State((uint64_t)v6, a1);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = a2;
  return vp::vx::data_flow::State<void>::~State(v6);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _BYTE v6[24];
  double v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EZNS1_21create_property_stateILS3_13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B603C534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<double>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xDu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xDu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<double>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<double>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<double>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<double>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<double>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<double>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  double *storage;
  double result;
  double v7;

  v7 = 0.0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  storage = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  result = v7;
  *storage = v7;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<double>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<double>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_from_blob(uint64_t a1, double *a2, uint64_t a3)
{
  *a2 = vp::Blob_Getter<vp::Blob>::get<double>(a3 + 1);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_to_blob(uint64_t a1, double *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<double>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_to_blob_size()
{
  return 8;
}

double vp::Blob_Getter<vp::Blob>::get<double>(uint64_t a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_QWORD *)(a1 + 7) != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return **(double **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<double>(uint64_t a1, double a2)
{
  std::bad_cast *exception;
  std::bad_cast *v4;

  if (*(_QWORD *)(a1 + 6) <= 7uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_cast::bad_cast(exception);
  }
  **(double **)(a1 - 2) = a2;
  return vp::Mutable_Blob::set_size(a1 - 2, 8uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<double>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  double *storage;
  double result;
  double v7;

  v7 = 0.0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  storage = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  result = v7;
  *storage = v7;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<double>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B603CABC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::convert_to_plist(uint64_t a1, uint64_t *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B603CB88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<double>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<double>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<double>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B603CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB200;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B603CEB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB200;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB200;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB200;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB200;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE13EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((double *)(a1 + 8), a2, a3);
}

double *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE13EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(double *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  double v4;
  std::pmr *v5;
  double *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

double _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(double *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  double v7;
  _QWORD *v8;
  double v9;
  _QWORD v11[6];
  double v12;
  int v13;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1 + 1;
  v13 = *v4;
  v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  v11[2] = v8 + 2;
  v11[3] = &v13;
  *(double *)&v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1B603D11C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B603D104);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  vp *v3;
  vp *v4;
  _DWORD *v5;
  char v6;
  NSObject *log;
  vp *log_context_info;
  unint64_t v9;
  NSObject *v10;
  int v11;
  void **v12;
  int v13;
  void **v14;
  const char *v15;
  std::string *v16;
  std::string v17;
  void *__p[2];
  unsigned __int8 v19;
  char *v20;
  uint8_t buf[4];
  _BYTE v22[20];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  std::string *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v20 = "Mic_Hardware_Physical_Sample_Rate]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (vp *)(**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  v5 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)buf = *v5;
  *(_QWORD *)&v22[4] = v2;
  *(_QWORD *)&v22[12] = &v20;
  if (!v6)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, (int)v3);
    v4 = **(vp ***)(a1 + 40);
    v5 = *(_DWORD **)(a1 + 24);
  }
  **(_QWORD **)a1 = v4;
  if (*v5)
  {
    log = vp::get_log(v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v19 & 0x80u) == 0)
        v9 = v19;
      else
        v9 = (unint64_t)__p[1];
      v10 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (char)v19;
        v12 = (void **)__p[0];
        v13 = **(_DWORD **)(a1 + 24);
        std::to_string(&v17, **(double **)a1);
        v14 = __p;
        if (v11 < 0)
          v14 = v12;
        *(_QWORD *)v22 = v14;
        v15 = "";
        *(_DWORD *)buf = 136316674;
        if (v9)
          v15 = " ";
        *(_WORD *)&v22[8] = 2080;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v17;
        else
          v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v22[10] = v15;
        *(_WORD *)&v22[18] = 1024;
        v23 = 13;
        v24 = 1040;
        v25 = 33;
        v26 = 2080;
        v27 = "Mic_Hardware_Physical_Sample_Rate]";
        v28 = 1024;
        v29 = v13;
        v30 = 2080;
        v31 = v16;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
      }
      if ((char)v19 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603D340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 13;
        v21 = 1040;
        v22 = 33;
        v23 = 2080;
        v24 = "Mic_Hardware_Physical_Sample_Rate]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EZNS1_21create_property_stateILS3_14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B603D5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xEu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xEu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B603D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB248;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B603D890(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB248;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB248;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB248;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB248;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE14EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE14EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B603DAEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B603DAD4);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Mic_Hardware_Input_Latency]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 14;
        v22 = 1040;
        v23 = 26;
        v24 = 2080;
        v25 = "Mic_Hardware_Input_Latency]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603DD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 14;
        v21 = 1040;
        v22 = 26;
        v23 = 2080;
        v24 = "Mic_Hardware_Input_Latency]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B603DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EZNS1_21create_property_stateILS3_15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B603DF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xFu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xFu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B603E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB290;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B603E25C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB290;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB290;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB290;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB290;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE15EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE15EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B603E4B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B603E4A0);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Mic_Hardware_Input_Safety_Offset]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 15;
        v22 = 1040;
        v23 = 32;
        v24 = 2080;
        v25 = "Mic_Hardware_Input_Safety_Offset]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603E6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 15;
        v21 = 1040;
        v22 = 32;
        v23 = 2080;
        v24 = "Mic_Hardware_Input_Safety_Offset]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)16>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x10u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603E8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)17>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x11u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603E954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)18>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x12u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603E9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)19>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x13u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B603EB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  vp::vx::deserialize_blob<applesauce::CF::StringRef>(a3, a2);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob(uint64_t a1, const __CFString **a2, uint64_t a3)
{
  vp::vx::serialize_blob<applesauce::CF::StringRef>(a3, a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::StringRef>(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;
  CFStringRef Copy;
  CFStringRef v6;
  CFTypeID v7;
  const void *v8;
  CFStringRef theString;

  v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  v4 = v3;
  if (v3)
    CFRetain(v3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v4);
  if (!theString)
    goto LABEL_7;
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
  v6 = Copy;
  if (Copy)
  {
    v7 = CFGetTypeID(Copy);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      v6 = 0;
    }
  }
  v8 = *a2;
  *a2 = v6;
  if (v8)
    CFRelease(v8);
  if (theString)
    CFRelease(theString);
}

void sub_1B603ED50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::Blob_Getter<vp::Blob>::get<__CFString const*>(uint64_t a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_QWORD *)(a1 + 7) != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return **(_QWORD **)(a1 - 1);
}

void vp::vx::serialize_blob<applesauce::CF::StringRef>(uint64_t a1, const __CFString **a2)
{
  const __CFString *v3;
  CFStringRef Copy;
  CFStringRef v5;
  CFTypeID v6;

  v3 = *a2;
  if (!v3)
    goto LABEL_5;
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  v5 = Copy;
  if (Copy)
  {
    v6 = CFGetTypeID(Copy);
    if (v6 != CFStringGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1B603EE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(uint64_t a1, uint64_t a2)
{
  std::bad_cast *exception;
  std::bad_cast *v4;

  if (*(_QWORD *)(a1 + 6) <= 7uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_cast::bad_cast(exception);
  }
  **(_QWORD **)(a1 - 2) = a2;
  return vp::Mutable_Blob::set_size(a1 - 2, 8uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B603EF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B603F050(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4;
  const void *v5;
  const void *v6;

  v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    v4 = v6;
  }
  v5 = *a3;
  *a3 = v4;
  v6 = v5;
  if (v5)
    CFRelease(v5);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::StringRef>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::StringRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::StringRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, _QWORD *a3)
{
  const __CFString *v4;
  void **v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *__p[2];
  unsigned __int8 v10;

  if (*a2)
  {
    v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4)
      CFRelease(v4);
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v6 = v10;
    else
      v6 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1B603F268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EZNS1_21create_property_stateILS3_70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B603F308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIfEC2IZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x46u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x46u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIfEC2IZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB408;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B603F578(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB408;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB408;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB408;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB408;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIfEC1IZNS4_29Voice_Processor_State_Manager12create_stateIfZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE70EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((float *)(a1 + 8), a2, a3);
}

float *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIfEC1IZNS4_29Voice_Processor_State_Manager12create_stateIfZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE70EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(float *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  float v4;
  std::pmr *v5;
  float *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIfE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

float _ZN2vp2vx9data_flow8FunctionIfE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(float *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  uint64_t v7;
  uint64_t *v8;
  float v9;
  _QWORD v11[6];
  float v12;
  int v13;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *(_QWORD *)a1;
  v9 = a1[2];
  v8 = (uint64_t *)(a1 + 2);
  v13 = *v4;
  v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  v11[2] = v8 + 2;
  v11[3] = &v13;
  v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1B603F7E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B603F7C8);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "IO_Cycle_Usage]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(float **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 70;
        v22 = 1040;
        v23 = 14;
        v24 = 2080;
        v25 = "IO_Cycle_Usage]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603FA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 70;
        v21 = 1040;
        v22 = 14;
        v23 = 2080;
        v24 = "IO_Cycle_Usage]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B603FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)storage = *(_OWORD *)a2;
  storage[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)20>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x14u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B603FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B603FE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_from_blob(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v4;
  uint64_t v5;
  void *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<float>(a3);
  v8 = 0uLL;
  v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v8, v4, (uint64_t)v4 + 4 * v5, (4 * v5) >> 2);
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_to_blob_size(uint64_t a1, _QWORD *a2)
{
  return a2[1] - *a2;
}

uint64_t vp::Blob_Viewer<vp::Blob>::view<float>(_QWORD *a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if ((a1[1] & 3) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return *a1;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B60400A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  std::bad_cast *exception;
  std::bad_cast *v7;

  if (*(_QWORD *)(a1 + 6) < (unint64_t)(4 * a3))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_cast::bad_cast(exception);
  }
  v3 = 4 * a3;
  v4 = a1 - 2;
  memcpy(*(void **)(a1 - 2), a2, 4 * a3);
  return vp::Mutable_Blob::set_size(v4, v3);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<float>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B60401B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<float>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B60402EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  CFArrayRef CFArray;
  const void *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  CFArray = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  v5 = *a3;
  *a3 = CFArray;
  if (v5)
    CFRelease(v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1B60403A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(_QWORD *a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  uint64_t *v8;
  CFNumberRef *v9;
  unint64_t v10;
  void **v11;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  v3 = (_DWORD *)*a1;
  v4 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v4)
  {
    v5 = v9;
    do
    {
      LODWORD(v11) = *v3;
      if ((unint64_t)v5 >= v10)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>((uint64_t *)&v8, (int *)&v11);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(v5++, (int *)&v11);
      v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1B6040484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B60405BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6040654(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<float>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<float>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<float>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE v4[8];
  uint64_t *v5;

  v4[0] = 0;
  v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1B6040790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v5;
  float *v6;

  *(_BYTE *)a1 = 2;
  v3 = *(float **)a2;
  v5 = *(float **)(a2 + 8);
  v6 = v3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(float **a1, float **a2)
{
  _QWORD *v4;
  float *v5;
  float *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1B6040844(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(_QWORD *result, float *a2, float *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B60408BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v6;
  float v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 7;
      *(double *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)21>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x15u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6040A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B6040B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  vp::vx::deserialize_blob<applesauce::CF::ArrayRef>(a3, a2);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob(uint64_t a1, const __CFArray **a2, uint64_t a3)
{
  vp::vx::serialize_blob<applesauce::CF::ArrayRef>(a3, a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::ArrayRef>(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;
  CFArrayRef Copy;
  CFArrayRef v6;
  CFTypeID v7;
  const void *v8;
  CFArrayRef theArray;

  v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  v4 = v3;
  if (v3)
    CFRetain(v3);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v4);
  if (!theArray)
    goto LABEL_7;
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
  v6 = Copy;
  if (Copy)
  {
    v7 = CFGetTypeID(Copy);
    if (v7 != CFArrayGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      v6 = 0;
    }
  }
  v8 = *a2;
  *a2 = v6;
  if (v8)
    CFRelease(v8);
  if (theArray)
    CFRelease(theArray);
}

void sub_1B6040D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::serialize_blob<applesauce::CF::ArrayRef>(uint64_t a1, const __CFArray **a2)
{
  const __CFArray *v3;
  CFArrayRef Copy;
  CFArrayRef v5;
  CFTypeID v6;

  v3 = *a2;
  if (!v3)
    goto LABEL_5;
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  v5 = Copy;
  if (Copy)
  {
    v6 = CFGetTypeID(Copy);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1B6040E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B6040EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6040FF8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4;
  const void *v5;
  const void *v6;

  v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    v4 = v6;
  }
  v5 = *a3;
  *a3 = v4;
  v6 = v5;
  if (v5)
    CFRelease(v5);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::ArrayRef>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::ArrayRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::ArrayRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, _QWORD *a3)
{
  const __CFString *v4;
  void **v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *__p[2];
  unsigned __int8 v10;

  if (*a2)
  {
    v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4)
      CFRelease(v4);
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v6 = v10;
    else
      v6 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1B6041210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)22>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x16u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60412BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B60413B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  vp::vx::deserialize_blob<applesauce::CF::DictionaryRef>(a3, a2);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  vp::vx::serialize_blob<applesauce::CF::DictionaryRef>(a3, a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::DictionaryRef>(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;
  CFDictionaryRef Copy;
  CFDictionaryRef v6;
  CFTypeID v7;
  const void *v8;
  CFDictionaryRef theDict;

  v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  v4 = v3;
  if (v3)
    CFRetain(v3);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v4);
  if (!theDict)
    goto LABEL_7;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
  v6 = Copy;
  if (Copy)
  {
    v7 = CFGetTypeID(Copy);
    if (v7 != CFDictionaryGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      v6 = 0;
    }
  }
  v8 = *a2;
  *a2 = v6;
  if (v8)
    CFRelease(v8);
  if (theDict)
    CFRelease(theDict);
}

void sub_1B60415C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::serialize_blob<applesauce::CF::DictionaryRef>(uint64_t a1, const __CFDictionary **a2)
{
  const __CFDictionary *v3;
  CFDictionaryRef Copy;
  CFDictionaryRef v5;
  CFTypeID v6;

  v3 = *a2;
  if (!v3)
    goto LABEL_5;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  v5 = Copy;
  if (Copy)
  {
    v6 = CFGetTypeID(Copy);
    if (v6 != CFDictionaryGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1B6041674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

void sub_1B6041700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6041834(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4;
  const void *v5;
  const void *v6;

  v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    v4 = v6;
  }
  v5 = *a3;
  *a3 = v4;
  v6 = v5;
  if (v5)
    CFRelease(v5);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::DictionaryRef>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, _QWORD *a3)
{
  const __CFString *v4;
  void **v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *__p[2];
  unsigned __int8 v10;

  if (*a2)
  {
    v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4)
      CFRelease(v4);
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v6 = v10;
    else
      v6 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1B6041A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)23>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x17u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6041AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)24>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x18u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6041B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Output_Port_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)25>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x19u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6041C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6042078(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B6042144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Output_Port_Type>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Output_Port_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Output_Port_Type>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B6042274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)26>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60422E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6042360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EZNS1_21create_property_stateILS3_27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B60423C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B6042564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BB910;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B60426B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB910;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BB910;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BB910;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BB910;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE27EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE27EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B6042910(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B60428F8);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Physical_Device_ID]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 27;
        v22 = 1040;
        v23 = 22;
        v24 = 2080;
        v25 = "Ref_Physical_Device_ID]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B6042B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 27;
        v21 = 1040;
        v22 = 22;
        v23 = 2080;
        v24 = "Ref_Physical_Device_ID]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Sub_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6042D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36EZNS1_21create_property_stateILS3_36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v10[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_13Port_Sub_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1B6042D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Sub_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x24u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x24u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6042EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t result;

  v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  result = vp::vx::legacy_cast<vp::vx::Port_Sub_Type>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 + 2;
  v4 = vp::vx::legacy_cast<vp::vx::Port_Sub_Type>(*a2);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob_size()
{
  return 4;
}

void sub_1B6043140(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1B6043194);
}

void sub_1B60431A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6043364(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B6043430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Sub_Type>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B6043560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_13Port_Sub_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE((uint64_t)v15, a1 + 48, (uint64_t)&v12, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B6043684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  _BYTE v19[24];
  int id;
  int v21;
  int v22;
  int v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = &off_1E69BBA88;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v18;
  v25 = v14;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v21 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v22 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v23 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v15 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v24, (uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State(v19);
  v16 = v25;
  if (v25 == v24)
  {
    v16 = v24;
    goto LABEL_5;
  }
  if (v25)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v15))();
  }
  return a1;
}

void sub_1B60437EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBA88;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBA88;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBA88;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBA88;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EEclEOS1O_OS1P_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_13Port_Sub_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE36ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_13Port_Sub_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE36ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  uint64_t (****v8)();
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD v14[7];
  unsigned int v15;
  int v16;
  int v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  v9 = *v4;
  v16 = *v6;
  v17 = v9;
  v10 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v11 = a1 + 1;
  v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1B6043A88(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6043A6CLL);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string *p_p;
  std::string __p;
  std::string v26;
  void *v27[2];
  unsigned __int8 v28;
  char *v29;
  uint8_t buf[4];
  _BYTE v31[20];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  std::string *v40;
  __int16 v41;
  std::string *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v29 = "Ref_Port_Sub_Type]";
  v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = **(unsigned int **)(a1 + 24);
  v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  v7 = v2(v3, v5, v6);
  v8 = v7;
  v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)v31 = *v9;
  *(_QWORD *)&v31[4] = v4;
  *(_QWORD *)&v31[12] = &v29;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v27);
      v12 = v28;
      v13 = v27[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        if ((v28 & 0x80u) == 0)
          v16 = v27;
        else
          v16 = (void **)v27[0];
        if (v15)
          v17 = " ";
        else
          v17 = "";
        v18 = **(_DWORD **)(a1 + 24);
        v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0)
          LODWORD(v19) = 0;
        std::to_string(&v26, v19);
        v20 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        v21 = v26.__r_.__value_.__r.__words[0];
        v22 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(**(_DWORD **)a1);
        if ((v22 & 0xFF00000000) == 0)
          LODWORD(v22) = 0;
        std::to_string(&__p, v22);
        v23 = &v26;
        if (v20 < 0)
          v23 = (std::string *)v21;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)v31 = v16;
        *(_WORD *)&v31[8] = 2080;
        *(_QWORD *)&v31[10] = v17;
        *(_WORD *)&v31[18] = 1024;
        v32 = 36;
        v33 = 1040;
        v34 = 17;
        v35 = 2080;
        v36 = "Ref_Port_Sub_Type]";
        v37 = 1024;
        v38 = v18;
        v39 = 2080;
        v40 = v23;
        v41 = 2080;
        v42 = p_p;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      if ((char)v28 < 0)
        operator delete(v27[0]);
    }
  }
}

void sub_1B6043D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

std::string *vp::vx::detail::to_string<vp::vx::Output_Port_Type>@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  v3 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(*a1);
  if ((v3 & 0xFF00000000) == 0)
    LODWORD(v3) = 0;
  return std::to_string(a2, v3);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  std::string *p_p;
  std::string __p;
  void *v15[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0)
        v6 = v16;
      else
        v6 = (unint64_t)v15[1];
      v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char)v16;
        v9 = (void **)v15[0];
        v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        v11 = v15;
        if (v8 < 0)
          v11 = v9;
        v18 = v11;
        v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6)
          v12 = " ";
        v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = v12;
        v21 = 1024;
        v22 = 36;
        v23 = 1040;
        v24 = 17;
        v25 = 2080;
        v26 = "Ref_Port_Sub_Type]";
        v27 = 1024;
        v28 = v10;
        v29 = 2080;
        v30 = p_p;
        v31 = 1024;
        v32 = a2;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v16 < 0)
        operator delete(v15[0]);
    }
  }
}

void sub_1B6043F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(int a1)
{
  return vp::vx::Legacy<vp::vx::Port_Sub_Type>::cast(a1) | 0x100000000;
}

{
  return vp::vx::Legacy<vp::vx::Port_Sub_Type>::cast(a1) | 0x100000000;
}

void sub_1B6043F94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1B6043FAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v12;

  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B6043F84);
  }
  v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t _ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_13Port_Sub_TypeEiEES4_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  result = vp::vx::get_output_port_sub_type(a1, a2, a3);
  v6 = result;
  if ((result & 0xFF00000000) == 0)
    return result;
  v4 = (int *)caulk::expected<unsigned int,int>::value((uint64_t)&v6);
  v5 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(*v4);
  if ((v5 & 0xFF00000000) != 0)
    return v5 | 0x100000000;
  else
    return 0x100000000;
}

void sub_1B6044078(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1B6044090(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v12;

  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B6044068);
  }
  v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Endpoint_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6044138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37EZNS1_21create_property_stateILS3_37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v10[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_18Port_Endpoint_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1B60441A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Endpoint_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x25u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x25u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60442B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t result;

  v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  result = vp::vx::legacy_cast<vp::vx::Port_Endpoint_Type>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 + 2;
  v4 = vp::vx::legacy_cast<vp::vx::Port_Endpoint_Type>(*a2);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob_size()
{
  return 4;
}

void sub_1B604454C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1B60445A0);
}

void sub_1B60445B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6044770(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B604483C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Endpoint_Type>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B604496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_18Port_Endpoint_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE((uint64_t)v15, a1 + 48, (uint64_t)&v12, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B6044A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  _BYTE v19[24];
  int id;
  int v21;
  int v22;
  int v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = &off_1E69BBC00;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v18;
  v25 = v14;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v21 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v22 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v23 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v15 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v24, (uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State(v19);
  v16 = v25;
  if (v25 == v24)
  {
    v16 = v24;
    goto LABEL_5;
  }
  if (v25)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v15))();
  }
  return a1;
}

void sub_1B6044BF8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBC00;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBC00;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBC00;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBC00;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EEclEOS1O_OS1P_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_18Port_Endpoint_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE37ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_18Port_Endpoint_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE37ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  uint64_t (****v8)();
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD v14[7];
  unsigned int v15;
  int v16;
  int v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  v9 = *v4;
  v16 = *v6;
  v17 = v9;
  v10 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v11 = a1 + 1;
  v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1B6044E94(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6044E78);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string *p_p;
  std::string __p;
  std::string v26;
  void *v27[2];
  unsigned __int8 v28;
  char *v29;
  uint8_t buf[4];
  _BYTE v31[20];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  std::string *v40;
  __int16 v41;
  std::string *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v29 = "Ref_Port_Endpoint_Type]";
  v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = **(unsigned int **)(a1 + 24);
  v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  v7 = v2(v3, v5, v6);
  v8 = v7;
  v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)v31 = *v9;
  *(_QWORD *)&v31[4] = v4;
  *(_QWORD *)&v31[12] = &v29;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v27);
      v12 = v28;
      v13 = v27[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        if ((v28 & 0x80u) == 0)
          v16 = v27;
        else
          v16 = (void **)v27[0];
        if (v15)
          v17 = " ";
        else
          v17 = "";
        v18 = **(_DWORD **)(a1 + 24);
        v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0)
          LODWORD(v19) = 0;
        std::to_string(&v26, v19);
        v20 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        v21 = v26.__r_.__value_.__r.__words[0];
        v22 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(**(_DWORD **)a1);
        if ((v22 & 0xFF00000000) == 0)
          LODWORD(v22) = 0;
        std::to_string(&__p, v22);
        v23 = &v26;
        if (v20 < 0)
          v23 = (std::string *)v21;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)v31 = v16;
        *(_WORD *)&v31[8] = 2080;
        *(_QWORD *)&v31[10] = v17;
        *(_WORD *)&v31[18] = 1024;
        v32 = 37;
        v33 = 1040;
        v34 = 22;
        v35 = 2080;
        v36 = "Ref_Port_Endpoint_Type]";
        v37 = 1024;
        v38 = v18;
        v39 = 2080;
        v40 = v23;
        v41 = 2080;
        v42 = p_p;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      if ((char)v28 < 0)
        operator delete(v27[0]);
    }
  }
}

void sub_1B6045128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  std::string *p_p;
  std::string __p;
  void *v15[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0)
        v6 = v16;
      else
        v6 = (unint64_t)v15[1];
      v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char)v16;
        v9 = (void **)v15[0];
        v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        v11 = v15;
        if (v8 < 0)
          v11 = v9;
        v18 = v11;
        v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6)
          v12 = " ";
        v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = v12;
        v21 = 1024;
        v22 = 37;
        v23 = 1040;
        v24 = 22;
        v25 = 2080;
        v26 = "Ref_Port_Endpoint_Type]";
        v27 = 1024;
        v28 = v10;
        v29 = 2080;
        v30 = p_p;
        v31 = 1024;
        v32 = a2;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v16 < 0)
        operator delete(v15[0]);
    }
  }
}

void sub_1B6045328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(int a1)
{
  return vp::vx::Legacy<vp::vx::Port_Endpoint_Type>::cast(a1) | 0x100000000;
}

{
  return vp::vx::Legacy<vp::vx::Port_Endpoint_Type>::cast(a1) | 0x100000000;
}

void sub_1B6045370(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1B6045388(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v12;

  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B6045360);
  }
  v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t _ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E0_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_18Port_Endpoint_TypeEiEES4_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  result = vp::vx::get_output_port_endpoint_type(a1, a2, a3);
  v6 = result;
  if ((result & 0xFF00000000) == 0)
    return result;
  v4 = (int *)caulk::expected<unsigned int,int>::value((uint64_t)&v6);
  v5 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(*v4);
  if ((v5 & 0xFF00000000) != 0)
    return v5 | 0x100000000;
  else
    return 0x100000000;
}

void sub_1B6045454(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1B604546C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v12;

  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B6045444);
  }
  v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[31];
  char v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6045514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EZNS1_21create_property_stateILS3_38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B604557C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x26u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x26u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60455F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B6045718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBC48;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B6045868(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBC48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBC48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBC48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBC48;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIbZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE38EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIbZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE38EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  BOOL *v7;
  BOOL *v8;
  unsigned __int8 v9;
  BOOL *v11[6];
  unsigned __int8 v12;
  int v13;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *(BOOL **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  v8 = (BOOL *)(a1 + 8);
  v13 = *v4;
  v12 = v9;
  v11[0] = (BOOL *)&v12;
  v11[1] = v8 + 8;
  v11[2] = v8 + 16;
  v11[3] = (BOOL *)&v13;
  v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(v11);
  return v12;
}

void sub_1B6045AC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6045AB0);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(BOOL **a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
  v2 = (unsigned __int8 *)a1[4];
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))a1[1])(*(_QWORD *)a1[2], *(unsigned int *)a1[3]);
  *(_DWORD *)buf = *(_DWORD *)a1[3];
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) != 0)
  {
    v4 = v3;
  }
  else
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = *a1[5];
  }
  **a1 = v4 != 0;
  if (*(_DWORD *)a1[3])
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1[3];
        std::to_string(&v15, **a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 38;
        v22 = 1040;
        v23 = 40;
        v24 = 2080;
        v25 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B6045CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 38;
        v21 = 1040;
        v22 = 40;
        v23 = 2080;
        v24 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[24];

  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6045EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39EZNS1_21create_property_stateILS3_39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v10[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN10applesauce2CF9StringRefEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjS9_jjEEEDaOSR_DpRKNSB_ISW_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1B6045F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENUlT_SM_DpT1_E_D1Ev(uint64_t a1)
{
  const void *v2;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 24);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x27u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x27u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6046000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN10applesauce2CF9StringRefEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjS9_jjEEEDaOSR_DpRKNSB_ISW_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf[2];
  __int128 v15;
  std::__shared_weak_count *v16;
  _BYTE v17[24];

  v8 = *a2;
  v9 = a2[1];
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)cf = v8;
  v15 = v9;
  v16 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS1_13State_ManagerESY_DpRKNSE_IT0_EE((uint64_t)v17, a1 + 48, (__int128 *)cf, a3, a4, a5, a6);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (cf[1])
    CFRelease(cf[1]);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v17);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v17);
}

void sub_1B6046138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS1_13State_ManagerESY_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, __int128 *a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  int id;
  int v22;
  int v23;
  int v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = a3[1];
  v19 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  v13 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = &off_1E69BBC90;
  *(_OWORD *)(v14 + 8) = v19;
  *(_OWORD *)(v14 + 24) = v18;
  *((_QWORD *)v14 + 5) = v13;
  v26 = v14;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v22 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v23 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v24 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v15 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v25, (uint64_t)v20);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State(v20);
  v16 = v26;
  if (v26 == v25)
  {
    v16 = v25;
    goto LABEL_5;
  }
  if (v26)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v15))();
  }
  return a1;
}

void sub_1B60462A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69BBC90;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EED0Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69BBC90;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E69BBC90;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7__cloneEPNS0_6__baseIS1V_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BBC90;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyEv(uint64_t a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyB8ne180100Ev(a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EEclEOS1Q_OS1R_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS9_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE39ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISL_iEERKNS3_8services14Audio_HardwareEjjERKNSI_IjEERKNSI_IT0_EESL_EUlT_SY_DpT1_E_JjSH_jjEEEDaOSY_DpRKNSI_IS13_EEEUlDpRKT_E_JjSH_jjEEERNS5_13State_ManagerES12_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS1O_E_S1R_S1S_EEEvDpOS1C_(a1 + 8, a2, a3);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyB8ne180100Ev(uint64_t a1)
{
  const void *v2;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 24);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

_QWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS9_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE39ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISL_iEERKNS3_8services14Audio_HardwareEjjERKNSI_IjEERKNSI_IT0_EESL_EUlT_SY_DpT1_E_JjSH_jjEEEDaOSY_DpRKNSI_IS13_EEEUlDpRKT_E_JjSH_jjEEERNS5_13State_ManagerES12_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS1O_E_S1R_S1S_EEEvDpOS1C_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEJLm0ELm1ELm2ELm3EEEEDaRKSY_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, &v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v4);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v6;
  return result;
}

void sub_1B60464D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEJLm0ELm1ELm2ELm3EEEEDaRKSY_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  uint64_t (****v7)();
  int *v8;
  uint64_t (****v9)();
  uint64_t (****v10)();
  int v11;
  const void **v12;
  uint64_t v13;
  const void **v14[7];
  uint64_t v15;
  int v16;
  int v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 8);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  v9 = *(uint64_t (*****)())(a2 + 16);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  v10 = *(uint64_t (*****)())(a2 + 24);
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  v11 = *v6;
  v16 = *v8;
  v17 = v11;
  v12 = *(const void ***)a1;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
    CFRetain(*(CFTypeRef *)(a1 + 8));
  v14[6] = (const void **)(a1 + 8);
  v15 = v13;
  v14[0] = (const void **)&v15;
  v14[1] = (const void **)(a1 + 16);
  v14[2] = (const void **)(a1 + 24);
  v14[3] = (const void **)&v17;
  v14[4] = (const void **)&v16;
  v14[5] = v12;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(v14);
  *a3 = v15;
}

void sub_1B6046600(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B60465DCLL);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(const void ***a1)
{
  const void **v2;
  _DWORD **v3;
  void (*v4)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  void *v9;
  NSObject *log;
  vp *log_context_info;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  const void *v21;
  const __CFString *v22;
  void **v23;
  void *__p[2];
  char v25;
  std::string v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 v29;
  char *v30;
  uint8_t buf[4];
  _BYTE v32[20];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  std::string *v41;
  __int16 v42;
  void **v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v30 = "Ref_Port_UID]";
  v3 = (_DWORD **)(a1 + 3);
  v4 = (void (*)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))*a1[1];
  v5 = (uint64_t)*a1[2];
  v6 = *(unsigned int *)a1[3];
  v7 = (_DWORD **)(a1 + 4);
  v8 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(*(_DWORD *)a1[4]);
  v4(&v26, v5, v6, v8);
  *(_DWORD *)buf = **v3;
  *(_DWORD *)v32 = **v7;
  *(_QWORD *)&v32[4] = v2;
  *(_QWORD *)&v32[12] = &v30;
  if (v26.__r_.__value_.__s.__data_[8])
  {
    LOBYTE(v28) = v26.__r_.__value_.__s.__data_[8];
LABEL_4:
    v27 = (void *)v26.__r_.__value_.__r.__words[0];
    v26.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_5;
  }
  _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, (int)v26.__r_.__value_.__l.__data_);
  LOBYTE(v28) = v26.__r_.__value_.__s.__data_[8];
  if (v26.__r_.__value_.__s.__data_[8])
    goto LABEL_4;
  LODWORD(v27) = v26.__r_.__value_.__l.__data_;
LABEL_5:
  caulk::expected<applesauce::CF::StringRef,int>::value_or<applesauce::CF::StringRef const&>(&v27, a1[6], __p);
  v9 = (void *)**a1;
  **a1 = __p[0];
  __p[0] = v9;
  if (v9)
    CFRelease(v9);
  if ((_BYTE)v28)
    caulk::__expected_detail::destroy<applesauce::CF::StringRef,(void *)0>((const void **)&v27);
  if (v26.__r_.__value_.__s.__data_[8])
    caulk::__expected_detail::destroy<applesauce::CF::StringRef,(void *)0>((const void **)&v26.__r_.__value_.__l.__data_);
  if (*(_DWORD *)a1[3])
  {
    log = vp::get_log((vp *)v9);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v27);
      v12 = v29;
      v13 = v28;
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = v13;
        if ((v29 & 0x80u) == 0)
          v16 = &v27;
        else
          v16 = v27;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        v18 = *(_DWORD *)a1[3];
        v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(*(_DWORD *)a1[4]);
        if ((v19 & 0xFF00000000) == 0)
          LODWORD(v19) = 0;
        v20 = &v26;
        std::to_string(&v26, v19);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
        v21 = **a1;
        if (v21)
        {
          v22 = CFCopyDescription(v21);
          applesauce::CF::details::CFString_get_value<true>(v22, (uint64_t)__p);
          if (v22)
            CFRelease(v22);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "null");
        }
        v23 = __p;
        if (v25 < 0)
          v23 = (void **)__p[0];
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)v32 = v16;
        *(_WORD *)&v32[8] = 2080;
        *(_QWORD *)&v32[10] = v17;
        *(_WORD *)&v32[18] = 1024;
        v33 = 39;
        v34 = 1040;
        v35 = 12;
        v36 = 2080;
        v37 = "Ref_Port_UID]";
        v38 = 1024;
        v39 = v18;
        v40 = 2080;
        v41 = v20;
        v42 = 2080;
        v43 = v23;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (v25 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      if ((char)v29 < 0)
        operator delete(v27);
    }
  }
}

void sub_1B6046930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13, int a14, int a15, __int16 a16, char a17, char a18, void *a19, char a20,int a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *caulk::expected<applesauce::CF::StringRef,int>::value_or<applesauce::CF::StringRef const&>@<X0>(_BYTE *result@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  CFTypeRef v4;

  if (result[8])
  {
    *a3 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
  }
  else
  {
    v4 = *a2;
    if (*a2)
      result = CFRetain(*a2);
    *a3 = v4;
  }
  return result;
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  std::string *p_p;
  std::string __p;
  void *v15[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0)
        v6 = v16;
      else
        v6 = (unint64_t)v15[1];
      v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char)v16;
        v9 = (void **)v15[0];
        v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        v11 = v15;
        if (v8 < 0)
          v11 = v9;
        v18 = v11;
        v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6)
          v12 = " ";
        v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = v12;
        v21 = 1024;
        v22 = 39;
        v23 = 1040;
        v24 = 12;
        v25 = 2080;
        v26 = "Ref_Port_UID]";
        v27 = 1024;
        v28 = v10;
        v29 = 2080;
        v30 = p_p;
        v31 = 1024;
        v32 = a2;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v16 < 0)
        operator delete(v15[0]);
    }
  }
}

void sub_1B6046BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6046C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40EZNS1_21create_property_stateILS3_40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v10[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1B6046CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x28u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x28u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6046D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE((uint64_t)v15, a1 + 48, (uint64_t)&v12, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B6046E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  _BYTE v19[24];
  int id;
  int v21;
  int v22;
  int v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = &off_1E69BBCD8;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v18;
  v25 = v14;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v21 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v22 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v23 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v15 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v24, (uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State(v19);
  v16 = v25;
  if (v25 == v24)
  {
    v16 = v24;
    goto LABEL_5;
  }
  if (v25)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v15))();
  }
  return a1;
}

void sub_1B6046FC4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBCD8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBCD8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBCD8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBCD8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EEclEOS1N_OS1O_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE40ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE40ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  uint64_t (****v8)();
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD v14[7];
  unsigned int v15;
  int v16;
  int v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  v9 = *v4;
  v16 = *v6;
  v17 = v9;
  v10 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v11 = a1 + 1;
  v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1B6047260(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6047244);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *p_p;
  std::string __p;
  std::string v25;
  void *v26[2];
  unsigned __int8 v27;
  char *v28;
  uint8_t buf[4];
  _BYTE v30[20];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  std::string *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v28 = "Ref_Port_Bluetooth_HLC_2ch_State]";
  v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = **(unsigned int **)(a1 + 24);
  v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  v7 = v2(v3, v5, v6);
  v8 = v7;
  v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)v30 = *v9;
  *(_QWORD *)&v30[4] = v4;
  *(_QWORD *)&v30[12] = &v28;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v26);
      v12 = v27;
      v13 = v26[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        if ((v27 & 0x80u) == 0)
          v16 = v26;
        else
          v16 = (void **)v26[0];
        if (v15)
          v17 = " ";
        else
          v17 = "";
        v18 = **(_DWORD **)(a1 + 24);
        v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0)
          LODWORD(v19) = 0;
        std::to_string(&v25, v19);
        v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        v21 = v25.__r_.__value_.__r.__words[0];
        std::to_string(&__p, **(_DWORD **)a1);
        v22 = &v25;
        if (v20 < 0)
          v22 = (std::string *)v21;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)v30 = v16;
        *(_WORD *)&v30[8] = 2080;
        *(_QWORD *)&v30[10] = v17;
        *(_WORD *)&v30[18] = 1024;
        v31 = 40;
        v32 = 1040;
        v33 = 32;
        v34 = 2080;
        v35 = "Ref_Port_Bluetooth_HLC_2ch_State]";
        v36 = 1024;
        v37 = v18;
        v38 = 2080;
        v39 = v22;
        v40 = 2080;
        v41 = p_p;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
      if ((char)v27 < 0)
        operator delete(v26[0]);
    }
  }
}

void sub_1B60474E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  std::string *p_p;
  std::string __p;
  void *v15[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0)
        v6 = v16;
      else
        v6 = (unint64_t)v15[1];
      v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char)v16;
        v9 = (void **)v15[0];
        v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        v11 = v15;
        if (v8 < 0)
          v11 = v9;
        v18 = v11;
        v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6)
          v12 = " ";
        v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = v12;
        v21 = 1024;
        v22 = 40;
        v23 = 1040;
        v24 = 32;
        v25 = 2080;
        v26 = "Ref_Port_Bluetooth_HLC_2ch_State]";
        v27 = 1024;
        v28 = v10;
        v29 = 2080;
        v30 = p_p;
        v31 = 1024;
        v32 = a2;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v16 < 0)
        operator delete(v15[0]);
    }
  }
}

void sub_1B60476E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _BYTE v6[24];
  double v7;

  v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6047760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EZNS1_21create_property_stateILS3_28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B60477C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B6047964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBD20;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B6047AB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBD20;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBD20;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBD20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBD20;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE28EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((double *)(a1 + 8), a2, a3);
}

double *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE28EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(double *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  double v4;
  std::pmr *v5;
  double *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

double _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(double *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  double v7;
  _QWORD *v8;
  double v9;
  _QWORD v11[6];
  double v12;
  int v13;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1 + 1;
  v13 = *v4;
  v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  v11[2] = v8 + 2;
  v11[3] = &v13;
  *(double *)&v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1B6047D1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6047D04);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  vp *v3;
  vp *v4;
  _DWORD *v5;
  char v6;
  NSObject *log;
  vp *log_context_info;
  unint64_t v9;
  NSObject *v10;
  int v11;
  void **v12;
  int v13;
  void **v14;
  const char *v15;
  std::string *v16;
  std::string v17;
  void *__p[2];
  unsigned __int8 v19;
  char *v20;
  uint8_t buf[4];
  _BYTE v22[20];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  std::string *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v20 = "Ref_Hardware_Physical_Sample_Rate]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (vp *)(**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  v5 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)buf = *v5;
  *(_QWORD *)&v22[4] = v2;
  *(_QWORD *)&v22[12] = &v20;
  if (!v6)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, (int)v3);
    v4 = **(vp ***)(a1 + 40);
    v5 = *(_DWORD **)(a1 + 24);
  }
  **(_QWORD **)a1 = v4;
  if (*v5)
  {
    log = vp::get_log(v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v19 & 0x80u) == 0)
        v9 = v19;
      else
        v9 = (unint64_t)__p[1];
      v10 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (char)v19;
        v12 = (void **)__p[0];
        v13 = **(_DWORD **)(a1 + 24);
        std::to_string(&v17, **(double **)a1);
        v14 = __p;
        if (v11 < 0)
          v14 = v12;
        *(_QWORD *)v22 = v14;
        v15 = "";
        *(_DWORD *)buf = 136316674;
        if (v9)
          v15 = " ";
        *(_WORD *)&v22[8] = 2080;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v17;
        else
          v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v22[10] = v15;
        *(_WORD *)&v22[18] = 1024;
        v23 = 28;
        v24 = 1040;
        v25 = 33;
        v26 = 2080;
        v27 = "Ref_Hardware_Physical_Sample_Rate]";
        v28 = 1024;
        v29 = v13;
        v30 = 2080;
        v31 = v16;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
      }
      if ((char)v19 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B6047F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 28;
        v21 = 1040;
        v22 = 33;
        v23 = 2080;
        v24 = "Ref_Hardware_Physical_Sample_Rate]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B604813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EZNS1_21create_property_stateILS3_29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B60481A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6048218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B6048340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBD68;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B6048490(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBD68;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBD68;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBD68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBD68;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE29EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE29EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B60486EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B60486D4);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Input_Latency]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 29;
        v22 = 1040;
        v23 = 26;
        v24 = 2080;
        v25 = "Ref_Hardware_Input_Latency]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B604890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 29;
        v21 = 1040;
        v22 = 26;
        v23 = 2080;
        v24 = "Ref_Hardware_Input_Latency]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6048B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EZNS1_21create_property_stateILS3_30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B6048B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6048BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B6048D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBDB0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B6048E5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBDB0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBDB0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBDB0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBDB0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE30EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE30EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B60490B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B60490A0);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Input_Safety_Offset]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 30;
        v22 = 1040;
        v23 = 32;
        v24 = 2080;
        v25 = "Ref_Hardware_Input_Safety_Offset]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B60492D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 30;
        v21 = 1040;
        v22 = 32;
        v23 = 2080;
        v24 = "Ref_Hardware_Input_Safety_Offset]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B60494D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EZNS1_21create_property_stateILS3_31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B604953C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60495B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B60496D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBDF8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B6049828(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBDF8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBDF8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBDF8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBDF8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE31EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE31EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B6049A84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6049A6CLL);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Output_Latency]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 31;
        v22 = 1040;
        v23 = 27;
        v24 = 2080;
        v25 = "Ref_Hardware_Output_Latency]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B6049CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 31;
        v21 = 1040;
        v22 = 27;
        v23 = 2080;
        v24 = "Ref_Hardware_Output_Latency]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6049EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EZNS1_21create_property_stateILS3_32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B6049F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x20u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x20u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6049F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B604A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBE40;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B604A1F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBE40;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBE40;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBE40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBE40;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE32EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE32EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B604A450(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B604A438);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Physical_Output_Latency]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 32;
        v22 = 1040;
        v23 = 36;
        v24 = 2080;
        v25 = "Ref_Hardware_Physical_Output_Latency]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B604A670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 32;
        v21 = 1040;
        v22 = 36;
        v23 = 2080;
        v24 = "Ref_Hardware_Physical_Output_Latency]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B604A86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EZNS1_21create_property_stateILS3_33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B604A8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x21u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x21u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604A948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B604AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBE88;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B604ABC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBE88;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBE88;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBE88;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBE88;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE33EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE33EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B604AE1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B604AE04);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Output_Safety_Offset]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 33;
        v22 = 1040;
        v23 = 33;
        v24 = 2080;
        v25 = "Ref_Hardware_Output_Safety_Offset]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B604B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 33;
        v21 = 1040;
        v22 = 33;
        v23 = 2080;
        v24 = "Ref_Hardware_Output_Safety_Offset]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B604B230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EZNS1_21create_property_stateILS3_34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v9[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1B604B298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x22u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x22u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v14, a1 + 48, (uint64_t)&v11, a3, a4, a5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B604B434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[28];
  int id;
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69BBED0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v16;
  v22 = v12;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v21, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_1B604B584(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBED0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBED0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBED0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBED0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE34EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE34EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v12[6];
  unsigned int v13;
  int v14;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  v7 = *v4;
  v8 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v9 = a1 + 1;
  v13 = v10;
  v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1B604B7E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B604B7C8);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  NSObject *log;
  vp *log_context_info;
  unint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  int v11;
  void **v12;
  const char *v13;
  std::string *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char *v18;
  uint8_t buf[4];
  _BYTE v20[20];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v18 = "Ref_Hardware_Physical_Output_Safety_Offset]";
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (**(uint64_t (***)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(a1 + 16), **(unsigned int **)(a1 + 24));
  v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_QWORD *)&v20[4] = v2;
  *(_QWORD *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = (unint64_t)__p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (char)v17;
        v10 = (void **)__p[0];
        v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        v12 = __p;
        if (v9 < 0)
          v12 = v10;
        *(_QWORD *)v20 = v12;
        v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7)
          v13 = " ";
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v15;
        else
          v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        v21 = 34;
        v22 = 1040;
        v23 = 42;
        v24 = 2080;
        v25 = "Ref_Hardware_Physical_Output_Safety_Offset]";
        v26 = 1024;
        v27 = v11;
        v28 = 2080;
        v29 = v14;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B604BA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v6 = v14;
      v7 = __p[1];
      v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0)
          v9 = v6;
        else
          v9 = (unint64_t)v7;
        if ((v14 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        v16 = v10;
        if (v9)
          v12 = " ";
        else
          v12 = "";
        v17 = 2080;
        v18 = v12;
        v19 = 1024;
        v20 = 34;
        v21 = 1040;
        v22 = 42;
        v23 = 2080;
        v24 = "Ref_Hardware_Physical_Output_Safety_Offset]";
        v25 = 1024;
        v26 = v11;
        v27 = 1024;
        v28 = a2;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE v6[28];
  int v7;

  v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B604BBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35EZNS1_21create_property_stateILS3_35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v10[24];

  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1B604BC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x23u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x23u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604BCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE((uint64_t)v15, a1 + 48, (uint64_t)&v12, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B604BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  _BYTE v19[24];
  int id;
  int v21;
  int v22;
  int v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = &off_1E69BBF18;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 3) = *(_QWORD *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v18;
  v25 = v14;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v21 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v22 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v23 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v15 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v24, (uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State(v19);
  v16 = v25;
  if (v25 == v24)
  {
    v16 = v24;
    goto LABEL_5;
  }
  if (v25)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v15))();
  }
  return a1;
}

void sub_1B604BF6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBF18;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BBF18;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E69BBF18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BBF18;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EEclEOS1N_OS1O_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE35ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE35ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  int *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  uint64_t (****v8)();
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD v14[7];
  unsigned int v15;
  int v16;
  int v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  v9 = *v4;
  v16 = *v6;
  v17 = v9;
  v10 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v11 = a1 + 1;
  v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1B604C208(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B604C1ECLL);
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *p_p;
  std::string __p;
  std::string v25;
  void *v26[2];
  unsigned __int8 v27;
  char *v28;
  uint8_t buf[4];
  _BYTE v30[20];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  std::string *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v28 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
  v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = **(unsigned int **)(a1 + 24);
  v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  v7 = v2(v3, v5, v6);
  v8 = v7;
  v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)v30 = *v9;
  *(_QWORD *)&v30[4] = v4;
  *(_QWORD *)&v30[12] = &v28;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v26);
      v12 = v27;
      v13 = v26[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        if ((v27 & 0x80u) == 0)
          v16 = v26;
        else
          v16 = (void **)v26[0];
        if (v15)
          v17 = " ";
        else
          v17 = "";
        v18 = **(_DWORD **)(a1 + 24);
        v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0)
          LODWORD(v19) = 0;
        std::to_string(&v25, v19);
        v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        v21 = v25.__r_.__value_.__r.__words[0];
        std::to_string(&__p, **(_DWORD **)a1);
        v22 = &v25;
        if (v20 < 0)
          v22 = (std::string *)v21;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)v30 = v16;
        *(_WORD *)&v30[8] = 2080;
        *(_QWORD *)&v30[10] = v17;
        *(_WORD *)&v30[18] = 1024;
        v31 = 35;
        v32 = 1040;
        v33 = 48;
        v34 = 2080;
        v35 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
        v36 = 1024;
        v37 = v18;
        v38 = 2080;
        v39 = v22;
        v40 = 2080;
        v41 = p_p;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
      if ((char)v27 < 0)
        operator delete(v26[0]);
    }
  }
}

void sub_1B604C490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  std::string *p_p;
  std::string __p;
  void *v15[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0)
        v6 = v16;
      else
        v6 = (unint64_t)v15[1];
      v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (char)v16;
        v9 = (void **)v15[0];
        v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        v11 = v15;
        if (v8 < 0)
          v11 = v9;
        v18 = v11;
        v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6)
          v12 = " ";
        v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = v12;
        v21 = 1024;
        v22 = 35;
        v23 = 1040;
        v24 = 48;
        v25 = 2080;
        v26 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
        v27 = 1024;
        v28 = v10;
        v29 = 2080;
        v30 = p_p;
        v31 = 1024;
        v32 = a2;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v16 < 0)
        operator delete(v15[0]);
    }
  }
}

void sub_1B604C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)41>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x29u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)42>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)43>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)44>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)45>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)46>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)47>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)48>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x30u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604CA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)49>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x31u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604CAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  if (*a2)
  {
    *storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)50>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x32u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = 0;
  *result = v6;
  return result;
}

void sub_1B604CD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v4;
  void *v5;

  v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  if (*a2)
    _Block_release(*a2);
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  void *v4;

  if (*a2)
    v4 = _Block_copy(*a2);
  else
    v4 = 0;
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_string(int a1, vp::utility *this, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v7;

  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B604CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)51>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x33u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)52>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x34u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<CA::ChannelLayout>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)storage = *(_OWORD *)a2;
  storage[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)53>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x35u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<char>::pointer begin;
  std::pmr *v7;
  std::vector<char> *storage;
  double result;
  std::vector<char> v10;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  begin = v10.__begin_;
  *(_QWORD *)v10.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  v7 = (std::pmr *)(*(uint64_t (**)(uint64_t, std::vector<char> *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v10, a2);
  *a3 = std::pmr::get_default_resource(v7);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  storage = (std::vector<char> *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  storage->__begin_ = 0;
  storage->__end_ = 0;
  storage->__end_cap_.__value_ = 0;
  result = *(double *)&v10.__begin_;
  *storage = v10;
  return result;
}

void sub_1B604D360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_from_blob(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  return vp::vx::deserialize_blob(a3, a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>(a3 + 2, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob_size(uint64_t a1, _QWORD *a2)
{
  return a2[1] - *a2;
}

double vp::vx::deserialize_blob(unsigned int **a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  double result;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::vector<char> __dst;

  v2 = (unint64_t)a1[1];
  if (v2 <= 0x1F)
    goto LABEL_10;
  v4 = *a1;
  v5 = (*a1)[2];
  if (v5)
  {
    if (v2 == 20 * (v5 - 1) + 32)
      goto LABEL_4;
LABEL_10:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
  }
  if (v2 != 32)
    goto LABEL_10;
LABEL_4:
  if (v5 <= 1)
    v5 = 1;
  std::vector<char>::vector(&__dst, 20 * v5 + 12);
  memcpy(__dst.__begin_, v4, 20 * v4[2] + 12);
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
  result = *(double *)&__dst.__begin_;
  *(std::vector<char> *)a2 = __dst;
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1B604D5F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<CA::ChannelLayout>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<char>::pointer begin;
  std::pmr *v7;
  std::vector<char> *storage;
  double result;
  std::vector<char> v10;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  begin = v10.__begin_;
  *(_QWORD *)v10.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  v7 = (std::pmr *)(*(uint64_t (**)(uint64_t, std::vector<char> *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v10, a2);
  *a3 = std::pmr::get_default_resource(v7);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  storage = (std::vector<char> *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  storage->__begin_ = 0;
  storage->__end_ = 0;
  storage->__end_cap_.__value_ = 0;
  result = *(double *)&v10.__begin_;
  *storage = v10;
  return result;
}

void sub_1B604D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CA::ChannelLayout>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B604D800(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  vp::vx::serialize_plist(a3, a2);
}

void vp::vx::serialize_plist(const void **a1, uint64_t a2)
{
  CFDataRef v3;
  CFTypeRef v4;
  const void *v5;
  std::runtime_error *exception;
  CFTypeRef cf;

  v3 = CFDataCreate(0, *(const UInt8 **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v3);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
}

void sub_1B604D8F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::ChannelLayout>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<CA::ChannelLayout>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::ChannelLayout>::convert_to_string(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void **v4;
  uint64_t v5;
  std::string v6;
  void *__p[2];
  unsigned __int8 v8;

  CA::AsString(a2, &v6);
  vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)&v6, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v4, v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1B604DA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Beam_Direction>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)54>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x36u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B604DF58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B604E024(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Beam_Direction>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Beam_Direction>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Beam_Direction>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B604E154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Operation_Mode>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)55>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x37u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604E268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  result = vp::vx::legacy_cast<vp::vx::Operation_Mode>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 + 2;
  v4 = vp::vx::legacy_cast<vp::vx::Operation_Mode>(*a2);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob_size()
{
  return 4;
}

void sub_1B604E500(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1B604E554);
}

void sub_1B604E564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B604E724(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_to_plist(uint64_t a1, unsigned int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = vp::vx::legacy_cast<vp::vx::Operation_Mode>(*a2);
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B604E7F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Operation_Mode>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Operation_Mode>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Operation_Mode>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B604E924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  result = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3 + 2;
  v4 = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(*a2);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob_size()
{
  return 4;
}

void sub_1B604EBB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1B604EC08);
}

void sub_1B604EC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B604EDD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_to_plist(uint64_t a1, unsigned int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(*a2);
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B604EEA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Chat_Flavor>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Chat_Flavor>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Chat_Flavor>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned __int8 v5[8];
  uint64_t *v6;

  v4 = (uint64_t *)*a2;
  v5[0] = 5;
  v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1B604EFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void sub_1B604F04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B604F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B604F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)58>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)59>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)60>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)61>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)62>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)63>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned int>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)storage = *(_OWORD *)a2;
  storage[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)64>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x40u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B604F668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_from_blob(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v4;
  uint64_t v5;
  void *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<float>(a3);
  v8 = 0uLL;
  v9 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(&v8, v4, (uint64_t)v4 + 4 * v5, (4 * v5) >> 2);
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob_size(uint64_t a1, _QWORD *a2)
{
  return a2[1] - *a2;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B604F890(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned int>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B604F938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned int>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B604FA74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  CFArrayRef CFArray;
  const void *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  CFArray = applesauce::CF::details::make_CFArrayRef<unsigned int>(&__p);
  v5 = *a3;
  *a3 = CFArray;
  if (v5)
    CFRelease(v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1B604FB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned int>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<unsigned int>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned int>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE v4[8];
  uint64_t *v5;

  v4[0] = 0;
  v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1B604FC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;
  unsigned int *v6;

  *(_BYTE *)a1 = 2;
  v3 = *(unsigned int **)a2;
  v5 = *(unsigned int **)(a2 + 8);
  v6 = v3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(unsigned int **a1, unsigned int **a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1B604FD10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(_QWORD *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned int const*,unsigned int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B604FD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned int const*,unsigned int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 6;
      *(_QWORD *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)65>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x41u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)66>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x42u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)67>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x43u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B604FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)68>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x44u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6050018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<long long>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)storage = *(_OWORD *)a2;
  storage[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)69>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x45u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B605014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B6050254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_from_blob(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v4;
  uint64_t v5;
  void *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<long long>(a3);
  v8 = 0uLL;
  v9 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&v8, v4, (uint64_t)v4 + 8 * v5, (8 * v5) >> 3);
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<long long const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_to_blob_size(uint64_t a1, _QWORD *a2)
{
  return a2[1] - *a2;
}

uint64_t vp::Blob_Viewer<vp::Blob>::view<long long>(_QWORD *a1)
{
  std::bad_cast *exception;
  std::bad_cast *v3;

  if ((a1[1] & 7) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3 = std::bad_cast::bad_cast(exception);
  }
  return *a1;
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B60504C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<long long const>>(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  std::bad_cast *exception;
  std::bad_cast *v7;

  if (*(_QWORD *)(a1 + 6) < (unint64_t)(8 * a3))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_cast::bad_cast(exception);
  }
  v3 = 8 * a3;
  v4 = a1 - 2;
  memcpy(*(void **)(a1 - 2), a2, 8 * a3);
  return vp::Mutable_Blob::set_size(v4, v3);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<long long>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B60505C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<long long>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6050704(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  CFArrayRef CFArray;
  const void *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  CFArray = applesauce::CF::details::make_CFArrayRef<long long>((void ****)&__p);
  v5 = *a3;
  *a3 = CFArray;
  if (v5)
    CFRelease(v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1B60507C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<long long>(void ****a1)
{
  unint64_t v2;
  void ***v3;
  void ***v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  uint64_t *v8;
  CFNumberRef *v9;
  unint64_t v10;
  void **v11;

  v2 = a1[1] - *a1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v9;
    do
    {
      v11 = *v3;
      if ((unint64_t)v5 >= v10)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<long long>((uint64_t *)&v8, (uint64_t *)&v11);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>(v5++, (uint64_t *)&v11);
      v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1B605089C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<long long>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B60509D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>(CFNumberRef *a1, uint64_t *a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6050A6C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<long long>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<long long>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<long long>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE v4[8];
  uint64_t *v5;

  v4[0] = 0;
  v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<long long>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1B6050BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<long long>,0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;

  *(_BYTE *)a1 = 2;
  v3 = *(uint64_t **)a2;
  v5 = *(uint64_t **)(a2 + 8);
  v6 = v3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(uint64_t **a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1B6050C5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,long long const*,long long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B6050CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,long long const*,long long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 5;
      *(_QWORD *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void vp::vx::Voice_Processor::Type_Converter<CAOrientation>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<CAOrientation>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _DWORD *result;
  int v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CAOrientation>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B605115C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const void *v6;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  v6 = *a3;
  *a3 = v5;
  if (v6)
    CFRelease(v6);
}

void sub_1B6051228(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<CAOrientation>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<CAOrientation>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<CAOrientation>::convert_to_string()
{
  return std::ostream::operator<<();
}

void sub_1B6051358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B60513D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)74>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6051450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned char>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)storage = *(_OWORD *)a2;
  storage[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)75>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6051584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B605168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  double result;
  __int128 v9;
  uint64_t v10;

  v4 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)a3 + v5;
  v9 = 0uLL;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v9, v4, v6, v5);
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
  }
  result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>(a3 + 2, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob_size(uint64_t a1, _QWORD *a2)
{
  return a2[1] - *a2;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B60518A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::~Property_List_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned char>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *storage;
  double result;
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v7, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  result = *(double *)&v7;
  *(_OWORD *)storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1B6051948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned char>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, v5, a3);
}

void sub_1B6051A84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::convert_from_plist()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  CFArrayRef CFArray;
  const void *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  CFArray = applesauce::CF::details::make_CFArrayRef<unsigned char>(&__p);
  v5 = *a3;
  *a3 = CFArray;
  if (v5)
    CFRelease(v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1B6051B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<unsigned char>(_QWORD *a1)
{
  unint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  uint64_t *v8;
  CFNumberRef *v9;
  unint64_t v10;
  void **v11;

  v2 = a1[1] - *a1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 != v4)
  {
    v5 = v9;
    do
    {
      LOBYTE(v11) = *v3;
      if ((unint64_t)v5 >= v10)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned char>((uint64_t *)&v8, (char *)&v11);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>(v5++, (char *)&v11);
      v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1B6051C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned char>(uint64_t *a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1B6051D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>(CFNumberRef *a1, char *a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  char valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6051DE4(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned char>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<unsigned char>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned char>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE v4[8];
  uint64_t *v5;

  v4[0] = 0;
  v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned char>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1B6051F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned char>,0>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  *(_BYTE *)a1 = 2;
  v3 = *(unsigned __int8 **)a2;
  v5 = *(unsigned __int8 **)(a2 + 8);
  v6 = v3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1B6051FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned char const*,unsigned char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B6052048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned char const*,unsigned char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned int v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_BYTE *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 6;
      *(_QWORD *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Spatial_Head_Tracking_Configuration>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)76>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6052208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  LODWORD(v6) = 0;
  BYTE4(v6) = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result);
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_string(int a1, vp::utility *this, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v7;

  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B605258C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)77>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6052610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)78>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B605268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(float,float)>>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  if (*a2)
  {
    *storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)84>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x54u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60527B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = 0;
  *result = v6;
  return result;
}

void sub_1B60528A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::Block<void({block_pointer})(float,float)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v4;
  void *v5;

  v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  if (*a2)
    _Block_release(*a2);
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  void *v4;

  if (*a2)
    v4 = _Block_copy(*a2);
  else
    v4 = 0;
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_string(int a1, vp::utility *this, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v7;

  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B6052B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *storage;
  _BYTE v8[24];
  _QWORD v9[3];
  _BYTE v10[24];

  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id;
  storage = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *storage = 0;
  if (*a2)
  {
    *storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)83>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x53u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6052CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = 0;
  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = 0;
  *result = v6;
  return result;
}

void sub_1B6052DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v4;
  void *v5;

  v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  if (*a2)
    _Block_release(*a2);
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  void *v4;

  if (*a2)
    v4 = _Block_copy(*a2);
  else
    v4 = 0;
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_string(int a1, vp::utility *this, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v7;

  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B60530AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)85>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x55u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6053130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)86>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x56u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60531AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<AUVoiceIOOtherAudioDuckingConfiguration>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)87>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x57u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60532C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~Blob_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  *a3 = std::pmr::get_default_resource(v4);
  a3[1] = 0;
  a3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)a3);
  *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v5, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_from_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~String_Type_Converter()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::Property::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v7, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_string(int a1, vp::utility *this, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v7;

  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B605363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B60536C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)89>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x59u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B605373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)90>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60537B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B6053834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_user_defaults_states(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  _BYTE v3[24];
  _BYTE v4[24];
  _BYTE v5[24];
  _BYTE v6[24];
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];

  v1 = **a1;
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)0>(v1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)1>(v1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)2>(v1, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)3>(v1, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)4>(v1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)5>(v1, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)6>(v1, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)7>(v1, (uint64_t)v3);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v3);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_enable_debug_features";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 0;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6053A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 1;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_enable_graph_audio_recorders";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 1;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6053B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)2>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_enable_graph_audio_recorders_predicate";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 2;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<applesauce::CF::StringRef>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6053CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)3>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "EnableTelephonyMonitor";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 3;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6053E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "EnableVPTelephonyMonitor";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 4;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6053F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)5>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_enable_io_node_cpu_profilers";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 5;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B60540B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)6>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 6;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_disable_AUPB";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 6;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6054204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int *v10;
  _BYTE v11[24];
  int v12[6];
  int *v13;
  const char *v14;

  v4 = (_QWORD *)(a1 + 856);
  v12[0] = 7;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  v5 = *(_QWORD *)(a1 + 864);
  v6 = *(_QWORD *)(a1 + 872);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    v14 = "vp_disable_RPB";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 7;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1B6054350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCD68;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[24];
  __int128 cf;
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  uint64_t v19;
  std::__shared_weak_count *v20;

  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(*(_QWORD **)(a1 + 456), &v19);
  v6 = v19;
  if (v19)
  {
    *(_QWORD *)&cf = *a2;
    *((_QWORD *)&cf + 1) = v19;
    v17 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal((dispatch_queue_t *)(a1 + 16), (uint64_t)v15);
    vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::TypeRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(char const* &&)::{lambda(applesauce::CF::TypeRef)#1},unsigned int>(a1 + 16, &cf, (vp::vx::data_flow::State_Transaction *)v15, (uint64_t)v18);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v20;
  if (!v20)
    goto LABEL_14;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v6)
      return;
  }
  else
  {
LABEL_14:
    if (v6)
      return;
  }
  *(_QWORD *)&cf = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::TypeRef>((std::pmr *)(a1 + 16), &cf, (uint64_t)v18);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
}

void sub_1B60545D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,false>,vp::vx::User_Defaults_Key>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 5;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 8;
        *a1 = v8 + 8;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCD68;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCD68;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE0EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE0EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B60548B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B60548A4);
}

void vp::vx::deserialize_plist(const __CFString **this, const applesauce::CF::TypeRef *a2, BOOL *a3)
{
  const __CFString *v4;
  CFTypeID v6;
  CFTypeID TypeID;
  const __CFNumber *v8;
  CFTypeID v9;
  std::runtime_error *exception;
  std::string __str;

  v4 = *this;
  if (!v4)
    goto LABEL_13;
  v6 = CFGetTypeID(v4);
  TypeID = CFNumberGetTypeID();
  v8 = (const __CFNumber *)*this;
  if (v6 == TypeID)
  {
    if (v8)
    {
      *(_BYTE *)a2 = applesauce::CF::convert_to<unsigned int,0>(v8) == 1;
      return;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  if (!v8)
    goto LABEL_13;
  v9 = CFGetTypeID(v8);
  if (v9 == CFStringGetTypeID())
  {
    if (!*this)
      goto LABEL_13;
    applesauce::CF::convert_to<std::string,0>(*this, (uint64_t)&__str);
    *(_BYTE *)a2 = std::stoi(&__str, 0, 10) == 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    if (!*this)
      goto LABEL_13;
    *(_BYTE *)a2 = applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)*this);
  }
}

void sub_1B60549F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::~Type_ID_Eraser()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

_QWORD *vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::copy_value(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  return std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,applesauce::CF::TypeRef const&,applesauce::CF::TypeRef*>(a2, a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::move_value(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::destroy_value(uint64_t a1, const void **a2)
{
  std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(a2);
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::compare_value(uint64_t a1, const void **a2, const void **a3)
{
  unint64_t v3;
  const void *v4;
  _BOOL8 result;
  BOOL v6;

  v3 = (unint64_t)*a2;
  v4 = *a3;
  result = (v3 | (unint64_t)*a3) == 0;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
    return CFEqual((CFTypeRef)v3, v4) != 0;
  return result;
}

_QWORD *std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,applesauce::CF::TypeRef const&,applesauce::CF::TypeRef*>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::TypeRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(char const* &&)::{lambda(applesauce::CF::TypeRef)#1},unsigned int>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  _BYTE v13[28];
  int id;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)v8 = &off_1E69BCE18;
  *(_OWORD *)(v8 + 8) = v12;
  *((_QWORD *)v8 + 3) = v7;
  v17 = v8;
  id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v16, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v13);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v13);
}

void sub_1B6054C40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::TypeRef>@<X0>(std::pmr *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v7[24];
  _QWORD v8[3];
  _BYTE v9[24];

  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::TypeRef>(void)::s_type_id;
  *(_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69BCE18;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69BCE18;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E69BCE18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E69BCE18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_PKcEENS5_5StateIT_EEOT0_EUlSJ_E_JjEEEDaOSJ_DpRKNSI_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESJ_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_QWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_PKcEENS5_5StateIT_EEOT0_EUlSJ_E_JjEEEDaOSJ_DpRKNSI_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESJ_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_PKcEENS1_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSF_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, &v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v4);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::TypeRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v6;
  return result;
}

void sub_1B6054E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_PKcEENS1_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSF_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, vp::vx::data_flow::Value **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  CFTypeRef cf;

  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage(*a2);
  vp::services::User_Defaults::default_app(*(vp::services::User_Defaults **)(a1 + 8), (uint64_t)&v8);
  vp::services::User_Defaults::Domain::get<applesauce::CF::TypeRef,char const*,(decltype(nullptr))0>(&v8, (char **)a1, a3);
  if (cf)
    CFRelease(cf);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void vp::services::User_Defaults::Domain::get<applesauce::CF::TypeRef,char const*,(decltype(nullptr))0>(_QWORD *a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  CFTypeRef v5;
  CFTypeRef cf;
  CFTypeRef v7;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v7, *a2);
  (*(void (**)(CFTypeRef *__return_ptr, _QWORD, _QWORD *, CFTypeRef *))(*(_QWORD *)*a1 + 32))(&cf, *a1, a1 + 2, &v7);
  v5 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a3 = v5;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = 0;
  }
  if (v7)
    CFRelease(v7);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>@<X0>(_QWORD *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  int *v8;
  int v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)(a3 + 2));
  v8 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(a1, &v8, &v9, a4);
  return vp::vx::data_flow::State<void>::~State(v10);
}

void sub_1B605507C(_Unwind_Exception *a1)
{
  uint64_t v1;

  vp::vx::data_flow::State<void>::~State(v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(_QWORD *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  _BOOL8 inserted;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;

  v5 = a1[1];
  if (v5 > (unint64_t)*a2)
    goto LABEL_18;
  v7 = a1[2];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)*a2 > v5 + 32 * v7)
LABEL_18:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v15 = *a2;
  v16 = 0;
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare((uint64_t)a1, &v15, a3, &v16);
  if (inserted)
  {
    v17 = v16;
    v13 = a1[1];
    if (v13 > (unint64_t)v16)
      goto LABEL_19;
    v14 = a1[2];
    if (!v13)
    {
      if (v14)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if ((unint64_t)v16 > v13 + 32 * v14)
LABEL_19:
      boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>(inserted, v11, v12);
    boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, &v17, (const char *)1, a3, a4);
  }
  else
  {
    if (!a1[1] && v16)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    *a4 = v16;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(uint64_t a1, int **a2, int *a3, int **a4)
{
  int *v4;
  uint64_t v5;
  BOOL v6;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  _BOOL8 result;
  uint64_t *v16;
  int **v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;

  v4 = *(int **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = &v4[8 * v5];
  v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a3 >= *v10)
    {
      v18 = v9;
      v19 = v10;
      v16 = (uint64_t *)&v19;
      v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  v11 = *a2;
  if (*a2 == v4)
    return 1;
  if (!v11)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v14 = *(v11 - 8);
  v12 = v11 - 8;
  v13 = v14;
  if (v14 < *a3)
    return 1;
  if (*a3 < v13)
  {
    v21 = v4;
    v20 = v12;
    v16 = (uint64_t *)&v21;
    v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, int **a3, int *a4, int **a5)
{
  uint64_t v8;
  int *v9;
  int *v11;
  uint64_t v12;
  int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(_QWORD *a1@<X0>, int **a2@<X1>, const char *a3@<X2>, int *a4@<X3>, int **a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;

  v6 = a1[2];
  v7 = a1[3];
  if (v7 < v6)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v11 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, *a2, a3, a4, a5);
  }
  else
  {
    if (v7 == v6)
      boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    v12 = (int *)(a1[1] + 32 * v6);
    if (v12 == v11)
    {
      *v11 = *a4;
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(a4 + 2));
      ++a1[2];
    }
    else
    {
      v13 = v12 - 8;
      *v12 = *(v12 - 8);
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(v12 - 6));
      ++a1[2];
      if (v13 != v11)
      {
        v14 = v13;
        do
        {
          v15 = *(v14 - 8);
          v14 -= 8;
          *v13 = v15;
          vp::vx::data_flow::State<void>::operator=((uint64_t)(v13 + 2), (uint64_t)(v13 - 6));
          v13 = v14;
        }
        while (v14 != v11);
      }
      *v11 = *a4;
      vp::vx::data_flow::State<void>::operator=((uint64_t)(v11 + 2), (uint64_t)(a4 + 2));
    }
    *a5 = *a2;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>@<X0>(_QWORD *a1@<X0>, int *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t result;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<unsigned int,vp::vx::data_flow::Value>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >> 59)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 32 * v11, 8);
  result = boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(_QWORD *a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, _DWORD *a6)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  v10 = (int *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>((uint64_t)a1, v10, a4, &v10[8 * a1[2]], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = (uint64_t)(v10 + 2);
      do
      {
        --v11;
        v12 = vp::vx::data_flow::State<void>::~State(v12) + 32;
      }
      while (v11);
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 32 * a1[3], 8);
  }
  v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1B6055650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  int *v10;
  _DWORD *v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v10 = a3;
  v11 = a5;
  if (a2 != a3)
  {
    v12 = a2;
    v11 = a5;
    do
    {
      v13 = (uint64_t)(v12 + 2);
      v14 = *v12;
      v12 += 8;
      v15 = (uint64_t)(v11 + 2);
      *v11 = v14;
      v11 += 8;
      vp::vx::data_flow::State<void>::State(v15, v13);
    }
    while (v12 != v10);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *v11 = *a7;
  vp::vx::data_flow::State<void>::State((uint64_t)(v11 + 2), (uint64_t)(a7 + 2));
  if (v10 != a4)
  {
    v16 = (uint64_t)(v11 + 10);
    do
    {
      v17 = (uint64_t)(v10 + 2);
      v18 = *v10;
      v10 += 8;
      *(_DWORD *)(v16 - 8) = v18;
      vp::vx::data_flow::State<void>::State(v16, v17);
      v16 = v19 + 32;
    }
    while (v10 != a4);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), *(_QWORD *)a1, 32 * *(_QWORD *)(a1 + 16), 8);
  return a1;
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCE60;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCE60;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCE60;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE1EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE1EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B6055994(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6055984);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCEA8;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCEA8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCEA8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE2EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS8_7TypeRefEE_JSK_EEEDaOT_DpRKNSH_IT0_EEEUlDpRKT_E_JSK_EEERNS5_13State_ManagerESP_SV_EUlPPKNS5_5ValueEPS13_E_S16_S17_EEEvDpOSW_(a1 + 8, a2, a3);
}

_QWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE2EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS8_7TypeRefEE_JSK_EEEDaOT_DpRKNSH_IT0_EEEUlDpRKT_E_JSK_EEERNS5_13State_ManagerESP_SV_EUlPPKNS5_5ValueEPS13_E_S16_S17_EEEvDpOSW_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  std::pmr *v4;
  _QWORD *result;
  uint64_t v6;

  v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS4_7TypeRefEE_JSG_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSG_EJLm0EEEEDaRKSL_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(*a2, &v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v4);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v6;
  return result;
}

void sub_1B6055B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *_ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS4_7TypeRefEE_JSG_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSG_EJLm0EEEEDaRKSL_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE@<X0>(vp::vx::data_flow::Value **a1@<X1>, _QWORD *a2@<X8>)
{
  const void **v3;
  applesauce::CF::StringRef *result;
  uint64_t v5;

  v3 = (const void **)vp::vx::data_flow::Value::view_storage(*a1);
  result = applesauce::CF::TypeRef::operator applesauce::CF::StringRef(v3, (applesauce::CF::StringRef *)&v5);
  *a2 = v5;
  return result;
}

void sub_1B6055BBC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6055BA8);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<applesauce::CF::StringRef>>>@<X0>(_QWORD *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  int *v8;
  int v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)(a3 + 2));
  v8 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(a1, &v8, &v9, a4);
  return vp::vx::data_flow::State<void>::~State(v10);
}

void sub_1B6055C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  vp::vx::data_flow::State<void>::~State(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCEF0;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCEF0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCEF0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE3EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE3EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B6055E68(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6055E58);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCF38;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCF38;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCF38;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE4EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE4EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B605605C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B605604CLL);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCF80;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCF80;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCF80;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE5EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE5EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B6056250(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6056240);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BCFC8;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BCFC8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BCFC8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE6EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE6EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B6056444(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6056434);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BD010;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD010;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD010;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE7EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE7EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  const __CFString **v2;
  BOOL *v3;
  unsigned __int8 v5;

  v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1B6056638(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6056628);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_configuration_states(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  return vp::vx::Voice_Processor::create_configuration_states(void)::$_0::operator()(*a1);
}

uint64_t vp::vx::Voice_Processor::create_configuration_states(void)::$_0::operator()(vp::vx::Voice_Processor **a1)
{
  vp::vx::Voice_Processor *v1;
  __int128 *p_p;
  uint64_t v3;
  char *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void **v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  vp::vx::IO_Port_Factory **v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  vp::vx::IO_Port_Factory **v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  vp::vx::IO_Port_Factory *v92;
  __int128 *v93;
  uint64_t v94;
  vp::vx::IO_Port_Factory *v95;
  vp::vx::IO_Port_Factory *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  vp::vx::IO_Port_Factory *v119;
  vp::vx::IO_Port_Factory *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  vp::vx::IO_Port_Factory *v124;
  vp::vx::IO_Port_Factory *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  vp::vx::IO_Port_Factory *v129;
  vp::vx::IO_Port_Factory *v130;
  vp::vx::IO_Port_Factory *v131;
  vp::vx::IO_Port_Factory *v132;
  __int128 *v133;
  uint64_t v134;
  vp::vx::IO_Port_Factory *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  void **v143;
  uint64_t *v144;
  uint64_t v145;
  __int128 *v146;
  uint64_t v147;
  vp::vx::IO_Port_Factory **v148;
  uint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  void **v156;
  uint64_t v157;
  uint64_t *v158;
  __int128 *v159;
  uint64_t v160;
  vp::vx::IO_Port_Factory **v161;
  uint64_t v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  __int128 *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  __int128 *v194;
  uint64_t v195;
  vp::vx::IO_Port_Factory **v196;
  uint64_t v197;
  vp::vx::IO_Port_Factory **v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  _BYTE v230[24];
  _BYTE v231[24];
  char v232;
  _BYTE v233[24];
  _BYTE v234[24];
  _BYTE v235[24];
  _QWORD *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  uint64_t v239;
  _DWORD v240[6];
  _BYTE v241[24];
  _BYTE v242[24];
  _BYTE v243[24];
  _BYTE v244[24];
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  _BYTE v249[24];
  _BYTE v250[24];
  _BYTE v251[24];
  _BYTE v252[24];
  _BYTE v253[24];
  _BYTE v254[24];
  _BYTE v255[24];
  _BYTE v256[24];
  _BYTE v257[24];
  _BYTE v258[24];
  _BYTE v259[24];
  _BYTE v260[24];
  _BYTE v261[24];
  _BYTE v262[24];
  _BYTE v263[24];
  _BYTE v264[24];
  _BYTE v265[24];
  __int128 v266;
  uint64_t v267;
  _BYTE v268[24];
  __int128 v269;
  uint64_t v270;
  _BYTE v271[24];
  _BYTE v272[24];
  _BYTE v273[24];
  _BYTE v274[9];
  _BYTE v275[24];
  _BYTE v276[24];
  _BYTE v277[24];
  _BYTE v278[24];
  _BYTE v279[24];
  _BYTE v280[24];
  _BYTE v281[24];
  _BYTE v282[24];
  _BYTE v283[24];
  _BYTE v284[24];
  __int128 v285;
  uint64_t v286;
  _BYTE v287[24];
  _BYTE v288[24];
  _BYTE v289[24];
  _BYTE v290[24];
  _BYTE v291[24];
  uint64_t v292;
  std::__shared_weak_count *v293;
  _BYTE v294[24];
  _BYTE v295[24];
  _BYTE v296[24];
  _BYTE v297[24];
  _BYTE v298[24];
  _BYTE v299[24];
  _BYTE v300[24];
  _BYTE v301[24];
  _BYTE v302[24];
  _BYTE v303[24];
  _BYTE v304[24];
  _BYTE v305[24];
  _BYTE v306[24];
  _BYTE v307[24];
  _BYTE v308[24];
  _BYTE v309[24];
  _BYTE v310[24];
  _BYTE v311[24];
  _BYTE v312[24];
  _BYTE v313[24];
  _BYTE v314[24];
  _BYTE v315[24];
  _BYTE v316[24];
  _BYTE v317[24];
  _BYTE v318[24];
  _BYTE v319[24];
  _BYTE v320[24];
  _BYTE v321[24];
  _BYTE v322[24];
  _BYTE v323[24];
  _BYTE v324[24];
  _BYTE v325[24];
  _BYTE v326[24];
  _BYTE v327[24];
  _BYTE v328[24];
  _BYTE v329[24];
  _BYTE v330[24];
  _BYTE v331[24];
  _BYTE v332[24];
  _BYTE v333[24];
  _BYTE v334[24];
  _BYTE v335[24];
  _BYTE v336[24];
  _BYTE v337[24];
  _BYTE v338[24];
  _BYTE v339[24];
  _BYTE v340[24];
  _BYTE v341[24];
  _BYTE v342[24];
  _DWORD v343[6];
  _DWORD v344[6];
  vp::vx::IO_Port_Factory *v345;
  std::__shared_weak_count *v346;
  vp::vx::IO_Port_Factory **v347;
  _QWORD v348[3];
  _QWORD *v349;
  __int128 __p;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  _BYTE v355[24];
  _BYTE *v356;
  _DWORD v357[6];
  _DWORD *v358;
  __int128 v359;
  uint64_t v360;
  __int128 *v361;
  void *v362;
  _BYTE *v363;
  uint64_t v364;
  _BYTE v365[24];
  _BYTE *v366;
  _DWORD v367[6];
  _DWORD *v368;
  vp::vx::IO_Port_Factory *v369;
  std::__shared_weak_count *v370;
  vp::vx::IO_Port_Factory **v371;
  void *v372;
  _BYTE *v373;
  uint64_t v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  char v377;
  void **v378;
  _DWORD v379[6];
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  vp::vx::Voice_Processor::get_global_configuration(*a1, (uint64_t)&v375);
  *(_QWORD *)&__p = &off_1E69BD058;
  *((_QWORD *)&__p + 1) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  v367[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v375);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  p_p = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v3 = 4;
    p_p = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)p_p + 8 * v3))();
LABEL_6:
  vp::vx::data_flow::State<void>::State((uint64_t)v341, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v375);
  v4 = (char *)v1 + 8;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 67);
  vp::vx::data_flow::State<void>::State((uint64_t)v340, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 48);
  vp::vx::data_flow::State<void>::State((uint64_t)v339, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v339, (uint64_t)v1 + 16, (uint64_t)v338);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 8);
  vp::vx::data_flow::State<void>::State((uint64_t)v337, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v337, (uint64_t)v1 + 16, (uint64_t)v336);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v337, (uint64_t)v1 + 16, (uint64_t)v335);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 9);
  vp::vx::data_flow::State<void>::State((uint64_t)v334, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 23);
  vp::vx::data_flow::State<void>::State((uint64_t)v333, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v333, (uint64_t)v1 + 16, (uint64_t)v332);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v333, (uint64_t)v1 + 16, (uint64_t)v331);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 24);
  vp::vx::data_flow::State<void>::State((uint64_t)v330, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  *(_QWORD *)&__p = &off_1E69BD130;
  *((_QWORD *)&__p + 1) = v1;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v334);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v330);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v5 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v6 = 4;
    v5 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  vp::vx::data_flow::State<void>::State((uint64_t)v329, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  *(_QWORD *)&__p = &off_1E69BD178;
  *((_QWORD *)&__p + 1) = v1;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v335);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v331);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v7 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v8 = 4;
    v7 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  vp::vx::data_flow::State<void>::State((uint64_t)v328, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::Voice_Processor::create_port_factory(v1, 0, (uint64_t *)&__p);
  v9 = (_QWORD *)__p;
  if (!(_QWORD)__p)
  {
    v213 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v213);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v327, (uint64_t)v334);
  vp::vx::IO_Port_Factory::set_block_size(v9, (uint64_t)v327);
  vp::vx::data_flow::State<void>::~State((uint64_t)v327);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  v10 = (_QWORD *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v326, (uint64_t)v337);
  vp::vx::IO_Port_Factory::set_format(v10, (uint64_t)v326);
  vp::vx::data_flow::State<void>::~State((uint64_t)v326);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  vp::vx::Voice_Processor::create_port_factory(v1, 1, (uint64_t *)&__p);
  v14 = (_QWORD *)__p;
  if (!(_QWORD)__p)
  {
    v214 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v214);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v325, (uint64_t)v330);
  vp::vx::IO_Port_Factory::set_block_size(v14, (uint64_t)v325);
  vp::vx::data_flow::State<void>::~State((uint64_t)v325);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  v15 = (_QWORD *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v324, (uint64_t)v333);
  vp::vx::IO_Port_Factory::set_format(v15, (uint64_t)v324);
  vp::vx::data_flow::State<void>::~State((uint64_t)v324);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  vp::vx::Voice_Processor::create_mic_ref_sync_node_factory(v1, (uint64_t *)&__p);
  v19 = __p;
  if (!(_QWORD)__p)
  {
    v215 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v215);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v323, (uint64_t)v329);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(v19, (uint64_t)v323);
  vp::vx::data_flow::State<void>::~State((uint64_t)v323);
  v20 = __p;
  vp::vx::data_flow::State<void>::State((uint64_t)v322, (uint64_t)v337);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(v20, (uint64_t)v322);
  vp::vx::data_flow::State<void>::~State((uint64_t)v322);
  v21 = __p;
  vp::vx::data_flow::State<void>::State((uint64_t)v321, (uint64_t)v333);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(v21, (uint64_t)v321);
  vp::vx::data_flow::State<void>::~State((uint64_t)v321);
  v22 = __p;
  vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(v1, (uint64_t)v320);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(v22, (uint64_t)v320);
  vp::vx::data_flow::State<void>::~State((uint64_t)v320);
  v23 = __p;
  vp::vx::Voice_Processor::get_uplink_ref_audio_ring_buffer_capacity(v1, (uint64_t)v319);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(v23, (uint64_t)v319);
  vp::vx::data_flow::State<void>::~State((uint64_t)v319);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 0, (uint64_t)v318);
  *(_QWORD *)&__p = &off_1E69BD1C0;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v332);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v318);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v27 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v28 = 4;
    v27 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_39;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_39:
  vp::vx::data_flow::State<void>::State((uint64_t)v317, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 0, (uint64_t)&v359);
  v29 = (_QWORD *)v359;
  if (!(_QWORD)v359)
  {
    v216 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v216);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v316, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v29, (uint64_t)&__p, (uint64_t)v316);
  vp::vx::data_flow::State<void>::~State((uint64_t)v316);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v30 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v315, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v30, (uint64_t)&__p, (uint64_t)v315);
  vp::vx::data_flow::State<void>::~State((uint64_t)v315);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v31 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v314, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v31, (uint64_t)&__p, (uint64_t)v314);
  vp::vx::data_flow::State<void>::~State((uint64_t)v314);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v32 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v313, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_output_format(v32, (uint64_t)&__p, (uint64_t)v313);
  vp::vx::data_flow::State<void>::~State((uint64_t)v313);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v33 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v312, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_output_format(v33, (uint64_t)&__p, (uint64_t)v312);
  vp::vx::data_flow::State<void>::~State((uint64_t)v312);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v34 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v311, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_output_format(v34, (uint64_t)&__p, (uint64_t)v311);
  vp::vx::data_flow::State<void>::~State((uint64_t)v311);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  if (*((_QWORD *)&v359 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 1, (uint64_t)v310);
  v38 = *((_QWORD *)v1 + 69);
  v39 = operator new(0x20uLL);
  *v39 = &off_1E69BD298;
  v39[1] = v38;
  v40 = (char *)(v39 + 1);
  *((_OWORD *)v39 + 1) = xmmword_1B66268A0;
  v368 = v39;
  v41 = (char *)operator new(0x20uLL);
  *(_QWORD *)v41 = &off_1E69BD298;
  *(_OWORD *)(v41 + 8) = *(_OWORD *)v40;
  *((_QWORD *)v41 + 3) = *((_QWORD *)v40 + 2);
  v361 = (__int128 *)v41;
  LOBYTE(v362) = 1;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v369, (uint64_t)&v359);
  LOBYTE(v372) = (_BYTE)v362;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v369);
  LOBYTE(v352) = (_BYTE)v372;
  v378 = 0;
  v42 = (void **)operator new(0x30uLL);
  *v42 = &off_1E69BD2E0;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v42 + 1), (uint64_t)&__p);
  *((_BYTE *)v42 + 40) = v352;
  v378 = v42;
  v357[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v328);
  v357[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v329);
  v357[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v310);
  v357[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v338);
  v357[4] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v340);
  v357[5] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v341);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v375, (uint64_t)v365);
  vp::vx::data_flow::State<void>::State((uint64_t)v355, (uint64_t)v365);
  vp::vx::data_flow::State<void>::~State(v365);
  v43 = (uint64_t *)v378;
  if (v378 == (void **)&v375)
  {
    v44 = 4;
    v43 = &v375;
  }
  else
  {
    if (!v378)
      goto LABEL_62;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_62:
  v45 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v46 = 4;
    v45 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_67;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_67:
  v47 = v371;
  if (v371 == &v369)
  {
    v48 = 4;
    v47 = &v369;
  }
  else
  {
    if (!v371)
      goto LABEL_72;
    v48 = 5;
  }
  (*((void (**)(void))*v47 + v48))();
LABEL_72:
  vp::vx::data_flow::State<void>::State((uint64_t)v309, (uint64_t)v355);
  vp::vx::data_flow::State<void>::~State((uint64_t)v355);
  v49 = v361;
  if (v361 == &v359)
  {
    v50 = 4;
    v49 = &v359;
  }
  else
  {
    if (!v361)
      goto LABEL_77;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_77:
  v51 = *((_QWORD *)v1 + 69);
  v52 = operator new(0x20uLL);
  *v52 = &off_1E69BD328;
  v52[1] = v51;
  v53 = (char *)(v52 + 1);
  *((_OWORD *)v52 + 1) = xmmword_1B66268B0;
  v366 = v52;
  v54 = (char *)operator new(0x20uLL);
  *(_QWORD *)v54 = &off_1E69BD328;
  *(_OWORD *)(v54 + 8) = *(_OWORD *)v53;
  *((_QWORD *)v54 + 3) = *((_QWORD *)v53 + 2);
  v361 = (__int128 *)v54;
  v362 = 0;
  v364 = 0;
  v363 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v362, *((const void **)v1 + 62), *((_QWORD *)v1 + 63), (uint64_t)(*((_QWORD *)v1 + 63) - *((_QWORD *)v1 + 62)) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v369, (uint64_t)&v359);
  v372 = 0;
  v373 = 0;
  v374 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v372, v362, (uint64_t)v363, (v363 - (_BYTE *)v362) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v369);
  v352 = 0uLL;
  *(_QWORD *)&v353 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v352, v372, (uint64_t)v373, (v373 - (_BYTE *)v372) >> 2);
  v378 = 0;
  v55 = (void **)operator new(0x40uLL);
  *v55 = &off_1E69BD370;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)(v55 + 1), (uint64_t)&__p);
  v55[5] = 0;
  v55[6] = 0;
  v55[7] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v55 + 5, (const void *)v352, *((uint64_t *)&v352 + 1), (uint64_t)(*((_QWORD *)&v352 + 1) - v352) >> 2);
  v378 = v55;
  LODWORD(v348[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v310);
  HIDWORD(v348[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v309);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v375, (uint64_t)v357);
  vp::vx::data_flow::State<void>::State((uint64_t)v355, (uint64_t)v357);
  vp::vx::data_flow::State<void>::~State(v357);
  v56 = (uint64_t *)v378;
  if (v378 == (void **)&v375)
  {
    v57 = 4;
    v56 = &v375;
  }
  else
  {
    if (!v378)
      goto LABEL_82;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_82:
  if ((_QWORD)v352)
  {
    *((_QWORD *)&v352 + 1) = v352;
    operator delete((void *)v352);
  }
  v58 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v59 = 4;
    v58 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_89;
    v59 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v58 + 8 * v59))();
LABEL_89:
  if (v372)
  {
    v373 = v372;
    operator delete(v372);
  }
  v60 = v371;
  if (v371 == &v369)
  {
    v61 = 4;
    v60 = &v369;
  }
  else
  {
    if (!v371)
      goto LABEL_96;
    v61 = 5;
  }
  (*((void (**)(void))*v60 + v61))();
LABEL_96:
  vp::vx::data_flow::State<void>::State((uint64_t)v308, (uint64_t)v355);
  vp::vx::data_flow::State<void>::~State((uint64_t)v355);
  if (v362)
  {
    v363 = v362;
    operator delete(v362);
  }
  v62 = v361;
  if (v361 == &v359)
  {
    v63 = 4;
    v62 = &v359;
  }
  else
  {
    if (!v361)
      goto LABEL_103;
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
LABEL_103:
  LOBYTE(__p) = 1;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)v1 + 16), &__p, (uint64_t)v307);
  *(_QWORD *)&__p = &off_1E69BD3B8;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v332);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v310);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v64 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v65 = 4;
    v64 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_108;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_108:
  vp::vx::data_flow::State<void>::State((uint64_t)v306, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 1u, (uint64_t)&v359);
  v66 = (_QWORD *)v359;
  if (!(_QWORD)v359)
  {
    v217 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v217);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v305, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v66, (uint64_t)&__p, (uint64_t)v305);
  vp::vx::data_flow::State<void>::~State((uint64_t)v305);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v67 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v304, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v67, (uint64_t)&__p, (uint64_t)v304);
  vp::vx::data_flow::State<void>::~State((uint64_t)v304);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v68 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v303, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v68, (uint64_t)&__p, (uint64_t)v303);
  vp::vx::data_flow::State<void>::~State((uint64_t)v303);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v69 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v302, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_output_format(v69, (uint64_t)&__p, (uint64_t)v302);
  vp::vx::data_flow::State<void>::~State((uint64_t)v302);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  if (*((_QWORD *)&v359 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v339, (uint64_t)v1 + 16, (uint64_t)v301);
  v73 = *((_QWORD *)v1 + 69);
  v74 = operator new(0x20uLL);
  *v74 = &off_1E69BD448;
  v74[1] = v73;
  *((_OWORD *)v74 + 1) = xmmword_1B66268C0;
  v358 = v74;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double)> const&,double,unsigned int,double>((uint64_t)v1 + 16, (uint64_t)v357, (vp::vx::data_flow::State_Transaction *)v309, (vp::vx::data_flow::State_Transaction *)v308, (vp::vx::data_flow::State_Transaction *)v301, (uint64_t)v300);
  LOBYTE(__p) = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)v1 + 16), &__p, (uint64_t)v299);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 2u, (uint64_t)&v359);
  v75 = (_QWORD *)v359;
  if (!(_QWORD)v359)
  {
    v218 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v218);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v298, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v75, (uint64_t)&__p, (uint64_t)v298);
  vp::vx::data_flow::State<void>::~State((uint64_t)v298);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v76 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "client");
  vp::vx::data_flow::State<void>::State((uint64_t)v297, (uint64_t)v339);
  vp::vx::DSP_Node_Factory::set_output_format(v76, (uint64_t)&__p, (uint64_t)v297);
  vp::vx::data_flow::State<void>::~State((uint64_t)v297);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  if (*((_QWORD *)&v359 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *((_QWORD *)v1 + 69);
  v81 = operator new(0x20uLL);
  *v81 = &off_1E69BD520;
  v81[1] = v80;
  v81[2] = vp::vx::Uplink_Configuration_Delegate::calculate_output_max_block_size_with_safety_margin;
  v81[3] = 0;
  *((_QWORD *)&v351 + 1) = v81;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)5,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>((uint64_t)v1, (uint64_t)&__p, (vp::vx::data_flow::State_Transaction *)v328, (vp::vx::data_flow::State_Transaction *)v329, (vp::vx::data_flow::State_Transaction *)v309, (vp::vx::data_flow::State_Transaction *)v308, (vp::vx::data_flow::State_Transaction *)v307, (vp::vx::data_flow::State_Transaction *)v301, (uint64_t)v296, (vp::vx::data_flow::State_Transaction *)v300, (vp::vx::data_flow::State_Transaction *)v299);
  v82 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v83 = 4;
    v82 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_137;
    v83 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
LABEL_137:
  vp::vx::Voice_Processor::create_port_factory(v1, 0x200000004, (uint64_t *)&__p);
  v84 = (_QWORD *)__p;
  if (!(_QWORD)__p)
  {
    v219 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v219);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v295, (uint64_t)v296);
  vp::vx::IO_Port_Factory::set_block_size(v84, (uint64_t)v295);
  vp::vx::data_flow::State<void>::~State((uint64_t)v295);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 0);
  v85 = (_QWORD *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v294, (uint64_t)v339);
  vp::vx::IO_Port_Factory::set_format(v85, (uint64_t)v294);
  vp::vx::data_flow::State<void>::~State((uint64_t)v294);
  v86 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  vp::vx::Voice_Processor::create_wire_factory(v1, 0, &v292);
  v89 = v293;
  if (v293)
  {
    p_shared_owners = (unint64_t *)&v293->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 3, (uint64_t)v291);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(&__p, (uint64_t)v1 + 8, 52);
  vp::vx::data_flow::State<void>::State((uint64_t)v290, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(&__p, (uint64_t)v1 + 8, 51);
  vp::vx::data_flow::State<void>::State((uint64_t)v289, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v289, (uint64_t)v1 + 16, (uint64_t)v288);
  std::string::basic_string[abi:ne180100]<0>(&v285, "mix");
  __p = v285;
  *(_QWORD *)&v351 = v286;
  v286 = 0;
  v285 = 0uLL;
  DWORD2(v351) = 1;
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v286) < 0)
    operator delete((void *)v285);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 63);
  vp::vx::data_flow::State<void>::State((uint64_t)v284, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 62);
  vp::vx::data_flow::State<void>::State((uint64_t)v283, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  vp::vx::Voice_Processor::create_port_factory(v1, 0x100000003, (uint64_t *)&v345);
  v92 = v345;
  if (!v345)
  {
    v220 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v220);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 25);
  vp::vx::data_flow::State<void>::State((uint64_t)v355, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  vp::vx::Voice_Processor::get_downlink_configuration(v1, (uint64_t)v348);
  *(_QWORD *)&__p = &off_1E69BD5B0;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  v379[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v355);
  v379[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v348);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v93 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v94 = 4;
    v93 = &__p;
    goto LABEL_157;
  }
  if (*((_QWORD *)&v351 + 1))
  {
    v94 = 5;
LABEL_157:
    (*(void (**)(void))(*(_QWORD *)v93 + 8 * v94))();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v375, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::data_flow::State<void>::State((uint64_t)v282, (uint64_t)&v375);
  vp::vx::IO_Port_Factory::set_is_enabled(v92, (uint64_t)v282);
  vp::vx::data_flow::State<void>::~State((uint64_t)v282);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v375);
  vp::vx::data_flow::State<void>::~State((uint64_t)v348);
  vp::vx::data_flow::State<void>::~State((uint64_t)v355);
  v95 = v345;
  vp::vx::data_flow::State<void>::State((uint64_t)v281, (uint64_t)v284);
  vp::vx::IO_Port_Factory::set_block_size(v95, (uint64_t)v281);
  vp::vx::data_flow::State<void>::~State((uint64_t)v281);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed(v345, 0);
  v96 = v345;
  vp::vx::data_flow::State<void>::State((uint64_t)v280, (uint64_t)v283);
  vp::vx::IO_Port_Factory::set_format(v96, (uint64_t)v280);
  vp::vx::data_flow::State<void>::~State((uint64_t)v280);
  v97 = v346;
  if (v346)
  {
    v98 = (unint64_t *)&v346->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 3u, (uint64_t)&v359);
  v100 = (_QWORD *)v359;
  if (!(_QWORD)v359)
  {
    v221 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v221);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mix");
  vp::vx::data_flow::State<void>::State((uint64_t)v279, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v100, (uint64_t)&__p, (uint64_t)v279);
  vp::vx::data_flow::State<void>::~State((uint64_t)v279);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v101 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "iv_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v278, (uint64_t)v283);
  vp::vx::DSP_Node_Factory::set_input_format(v101, (uint64_t)&__p, (uint64_t)v278);
  vp::vx::data_flow::State<void>::~State((uint64_t)v278);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v102 = (_QWORD *)v359;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hw");
  vp::vx::data_flow::State<void>::State((uint64_t)v277, (uint64_t)v289);
  vp::vx::DSP_Node_Factory::set_output_format(v102, (uint64_t)&__p, (uint64_t)v277);
  vp::vx::data_flow::State<void>::~State((uint64_t)v277);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  if (*((_QWORD *)&v359 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  vp::vx::Voice_Processor::create_port_factory(v1, 0x300000000, (uint64_t *)&__p);
  v106 = (_QWORD *)__p;
  if (!(_QWORD)__p)
  {
    v222 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v222);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v276, (uint64_t)v290);
  vp::vx::IO_Port_Factory::set_block_size(v106, (uint64_t)v276);
  vp::vx::data_flow::State<void>::~State((uint64_t)v276);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  v107 = (_QWORD *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v275, (uint64_t)v289);
  vp::vx::IO_Port_Factory::set_format(v107, (uint64_t)v275);
  vp::vx::data_flow::State<void>::~State((uint64_t)v275);
  v108 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 2, (uint64_t)v274);
  v111 = *((_QWORD *)v1 + 70);
  v112 = operator new(0x20uLL);
  *v112 = &off_1E69BD5F8;
  v112[1] = v111;
  *((_OWORD *)v112 + 1) = xmmword_1B66268D0;
  v356 = v112;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)v355, (vp::vx::data_flow::State_Transaction *)v274, (vp::vx::data_flow::State_Transaction *)v288, (vp::vx::data_flow::State_Transaction *)v290, (uint64_t)v273);
  vp::vx::data_flow::State<void>::State((uint64_t)v272, (uint64_t)v288);
  std::string::basic_string[abi:ne180100]<0>(&v269, "voice");
  __p = v269;
  *(_QWORD *)&v351 = v270;
  v270 = 0;
  v269 = 0uLL;
  DWORD2(v351) = 1;
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v270) < 0)
    operator delete((void *)v269);
  std::string::basic_string[abi:ne180100]<0>(&v266, "mix");
  __p = v266;
  *(_QWORD *)&v351 = v267;
  v267 = 0;
  v266 = 0uLL;
  DWORD2(v351) = 1;
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v267) < 0)
    operator delete((void *)v266);
  *(_QWORD *)&__p = &off_1E69BD6D0;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v289);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v272);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v113 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v114 = 4;
    v113 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_194;
    v114 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v113 + 8 * v114))();
LABEL_194:
  vp::vx::data_flow::State<void>::State((uint64_t)v265, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  *(_QWORD *)&__p = &off_1E69BD718;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  LODWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v289);
  HIDWORD(v375) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v272);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v115 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v116 = 4;
    v115 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_199;
    v116 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
LABEL_199:
  vp::vx::data_flow::State<void>::State((uint64_t)v264, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  if (*((_DWORD *)v1 + 66) != 3)
  {
    v117 = 0;
    v375 = 0x200000000;
    do
    {
      v118 = *((unsigned int *)&v375 + v117);
      vp::vx::Voice_Processor::create_port_factory(v1, v118 | 0x100000000, (uint64_t *)&v369);
      v119 = v369;
      if (!v369)
      {
        v348[0] = 0;
        v354 = 0u;
        v353 = 0u;
        v352 = 0u;
        v351 = 0u;
        __p = 0u;
        os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if ((v118 - 1) > 2)
          v211 = "dynamics DSP default audio input";
        else
          v211 = off_1E69BE5A8[(int)v118 - 1];
        LODWORD(v359) = 136315138;
        *(_QWORD *)((char *)&v359 + 4) = v211;
        _os_log_send_and_compose_impl();
        v212 = _os_crash_msg();
        caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v212);
      }
      vp::vx::data_flow::State<void>::State((uint64_t)v263, (uint64_t)v290);
      vp::vx::IO_Port_Factory::set_block_size(v119, (uint64_t)v263);
      vp::vx::data_flow::State<void>::~State((uint64_t)v263);
      vp::vx::IO_Port_Factory::set_block_size_is_fixed(v369, 1);
      v120 = v369;
      vp::vx::data_flow::State<void>::State((uint64_t)v262, (uint64_t)v265);
      vp::vx::IO_Port_Factory::set_format(v120, (uint64_t)v262);
      vp::vx::data_flow::State<void>::~State((uint64_t)v262);
      v121 = v370;
      if (v370)
      {
        v122 = (unint64_t *)&v370->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      ++v117;
    }
    while (v117 != 2);
    vp::vx::Voice_Processor::create_port_factory(v1, 0x100000001, (uint64_t *)&v369);
    v124 = v369;
    if (!v369)
    {
      v375 = 0;
      v354 = 0u;
      v353 = 0u;
      v352 = 0u;
      v351 = 0u;
      __p = 0u;
      os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      LODWORD(v359) = 136315138;
      *(_QWORD *)((char *)&v359 + 4) = "dynamics DSP system audio input";
      _os_log_send_and_compose_impl();
      v227 = _os_crash_msg();
      caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v227);
    }
    vp::vx::data_flow::State<void>::State((uint64_t)v261, (uint64_t)v290);
    vp::vx::IO_Port_Factory::set_block_size(v124, (uint64_t)v261);
    vp::vx::data_flow::State<void>::~State((uint64_t)v261);
    vp::vx::IO_Port_Factory::set_block_size_is_fixed(v369, 1);
    v125 = v369;
    vp::vx::data_flow::State<void>::State((uint64_t)v260, (uint64_t)v264);
    vp::vx::IO_Port_Factory::set_format(v125, (uint64_t)v260);
    vp::vx::data_flow::State<void>::~State((uint64_t)v260);
    v126 = v370;
    if (v370)
    {
      v127 = (unint64_t *)&v370->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 2u, (uint64_t)&v345);
  v129 = v345;
  if (!v345)
  {
    v223 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v223);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v259, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_input_format(v129, (uint64_t)&__p, (uint64_t)v259);
  vp::vx::data_flow::State<void>::~State((uint64_t)v259);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v130 = v345;
  std::string::basic_string[abi:ne180100]<0>(&__p, "default_audio");
  vp::vx::data_flow::State<void>::State((uint64_t)v258, (uint64_t)v265);
  vp::vx::DSP_Node_Factory::set_input_format(v130, (uint64_t)&__p, (uint64_t)v258);
  vp::vx::data_flow::State<void>::~State((uint64_t)v258);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v131 = v345;
  std::string::basic_string[abi:ne180100]<0>(&__p, "system_audio");
  vp::vx::data_flow::State<void>::State((uint64_t)v257, (uint64_t)v264);
  vp::vx::DSP_Node_Factory::set_input_format(v131, (uint64_t)&__p, (uint64_t)v257);
  vp::vx::data_flow::State<void>::~State((uint64_t)v257);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v132 = v345;
  std::string::basic_string[abi:ne180100]<0>(&v375, "other_audio");
  *(_QWORD *)&__p = &off_1E69BD760;
  BYTE8(__p) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  v379[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v265);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::State((uint64_t)&v359, (uint64_t)&v369);
  vp::vx::data_flow::State<void>::~State(&v369);
  v133 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v134 = 4;
    v133 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_226;
    v134 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v133 + 8 * v134))();
LABEL_226:
  vp::vx::data_flow::State<void>::State((uint64_t)v348, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  vp::vx::data_flow::State<void>::State((uint64_t)v256, (uint64_t)v348);
  vp::vx::DSP_Node_Factory::set_input_format(v132, (uint64_t)&v375, (uint64_t)v256);
  vp::vx::data_flow::State<void>::~State((uint64_t)v256);
  vp::vx::data_flow::State<void>::~State((uint64_t)v348);
  if (v377 < 0)
    operator delete((void *)v375);
  v135 = v345;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mix");
  vp::vx::data_flow::State<void>::State((uint64_t)v255, (uint64_t)&v369);
  vp::vx::DSP_Node_Factory::set_output_format(v135, (uint64_t)&__p, (uint64_t)v255);
  vp::vx::data_flow::State<void>::~State((uint64_t)v255);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v369);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v136 = v346;
  if (v346)
  {
    v137 = (unint64_t *)&v346->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 50);
  vp::vx::data_flow::State<void>::State((uint64_t)v254, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&__p, (uint64_t)v1 + 8, 49);
  vp::vx::data_flow::State<void>::State((uint64_t)v253, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v253, (uint64_t)v1 + 16, (uint64_t)v252);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v253, (uint64_t)v1 + 16, (uint64_t)v251);
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 1, (uint64_t)v250);
  v139 = *((_QWORD *)v1 + 70);
  v140 = operator new(0x20uLL);
  *v140 = &off_1E69BD7A8;
  v140[1] = v139;
  v141 = (char *)(v140 + 1);
  *((_OWORD *)v140 + 1) = xmmword_1B66268B0;
  v349 = v140;
  v142 = (char *)operator new(0x20uLL);
  *(_QWORD *)v142 = &off_1E69BD7A8;
  *(_OWORD *)(v142 + 8) = *(_OWORD *)v141;
  *((_QWORD *)v142 + 3) = *((_QWORD *)v141 + 2);
  v361 = (__int128 *)v142;
  LOBYTE(v362) = 1;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(&__p, (uint64_t)v1 + 8, 67);
  vp::vx::data_flow::State<void>::State((uint64_t)v342, (uint64_t)&__p);
  vp::vx::data_flow::State<void>::~State(&__p);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v369, (uint64_t)&v359);
  LOBYTE(v372) = (_BYTE)v362;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v369);
  LOBYTE(v352) = (_BYTE)v372;
  v378 = 0;
  v143 = (void **)operator new(0x30uLL);
  *v143 = &off_1E69BD7F0;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v143 + 1), (uint64_t)&__p);
  *((_BYTE *)v143 + 40) = v352;
  v378 = v143;
  v344[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v250);
  v344[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v252);
  v344[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v288);
  v344[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v342);
  v344[4] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v341);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v375, (uint64_t)&v345);
  vp::vx::data_flow::State<void>::State((uint64_t)v379, (uint64_t)&v345);
  vp::vx::data_flow::State<void>::~State(&v345);
  v144 = (uint64_t *)v378;
  if (v378 == (void **)&v375)
  {
    v145 = 4;
    v144 = &v375;
  }
  else
  {
    if (!v378)
      goto LABEL_240;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_240:
  v146 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v147 = 4;
    v146 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_245;
    v147 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v146 + 8 * v147))();
LABEL_245:
  v148 = v371;
  if (v371 == &v369)
  {
    v149 = 4;
    v148 = &v369;
  }
  else
  {
    if (!v371)
      goto LABEL_250;
    v149 = 5;
  }
  (*((void (**)(void))*v148 + v149))();
LABEL_250:
  vp::vx::data_flow::State<void>::State((uint64_t)v249, (uint64_t)v379);
  vp::vx::data_flow::State<void>::~State((uint64_t)v379);
  vp::vx::data_flow::State<void>::~State((uint64_t)v342);
  v150 = v361;
  if (v361 == &v359)
  {
    v151 = 4;
    v150 = &v359;
  }
  else
  {
    if (!v361)
      goto LABEL_255;
    v151 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v150 + 8 * v151))();
LABEL_255:
  v152 = *((_QWORD *)v1 + 70);
  v153 = operator new(0x20uLL);
  *v153 = &off_1E69BD838;
  v153[1] = v152;
  v154 = (char *)(v153 + 1);
  *((_OWORD *)v153 + 1) = xmmword_1B66268C0;
  v347 = (vp::vx::IO_Port_Factory **)v153;
  v155 = (char *)operator new(0x20uLL);
  *(_QWORD *)v155 = &off_1E69BD838;
  *(_OWORD *)(v155 + 8) = *(_OWORD *)v154;
  *((_QWORD *)v155 + 3) = *((_QWORD *)v154 + 2);
  v361 = (__int128 *)v155;
  v362 = 0;
  v364 = 0;
  v363 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v362, *((const void **)v1 + 62), *((_QWORD *)v1 + 63), (uint64_t)(*((_QWORD *)v1 + 63) - *((_QWORD *)v1 + 62)) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v369, (uint64_t)&v359);
  v372 = 0;
  v373 = 0;
  v374 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v372, v362, (uint64_t)v363, (v363 - (_BYTE *)v362) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v369);
  v352 = 0uLL;
  *(_QWORD *)&v353 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v352, v372, (uint64_t)v373, (v373 - (_BYTE *)v372) >> 2);
  v378 = 0;
  v156 = (void **)operator new(0x40uLL);
  *v156 = &off_1E69BD880;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)(v156 + 1), (uint64_t)&__p);
  v156[5] = 0;
  v156[6] = 0;
  v156[7] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v156 + 5, (const void *)v352, *((uint64_t *)&v352 + 1), (uint64_t)(*((_QWORD *)&v352 + 1) - v352) >> 2);
  v378 = v156;
  v343[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v250);
  v343[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v249);
  v343[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v272);
  v343[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v273);
  v157 = 4;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v375, (uint64_t)v379);
  vp::vx::data_flow::State<void>::State((uint64_t)v342, (uint64_t)v379);
  vp::vx::data_flow::State<void>::~State(v379);
  v158 = (uint64_t *)v378;
  if (v378 == (void **)&v375)
  {
    v158 = &v375;
  }
  else
  {
    if (!v378)
      goto LABEL_260;
    v157 = 5;
  }
  (*(void (**)(void))(*v158 + 8 * v157))();
LABEL_260:
  if ((_QWORD)v352)
  {
    *((_QWORD *)&v352 + 1) = v352;
    operator delete((void *)v352);
  }
  v159 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v160 = 4;
    v159 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_267;
    v160 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v159 + 8 * v160))();
LABEL_267:
  if (v372)
  {
    v373 = v372;
    operator delete(v372);
  }
  v161 = v371;
  if (v371 == &v369)
  {
    v162 = 4;
    v161 = &v369;
  }
  else
  {
    if (!v371)
      goto LABEL_274;
    v162 = 5;
  }
  (*((void (**)(void))*v161 + v162))();
LABEL_274:
  vp::vx::data_flow::State<void>::State((uint64_t)v344, (uint64_t)v342);
  vp::vx::data_flow::State<void>::~State((uint64_t)v342);
  if (v362)
  {
    v363 = v362;
    operator delete(v362);
  }
  v163 = v361;
  if (v361 == &v359)
  {
    v164 = 4;
    v163 = &v359;
  }
  else
  {
    if (!v361)
      goto LABEL_281;
    v164 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v163 + 8 * v164))();
LABEL_281:
  v165 = *((_QWORD *)v1 + 70);
  v166 = operator new(0x20uLL);
  *v166 = &off_1E69BD8C8;
  v166[1] = v165;
  *((_OWORD *)v166 + 1) = xmmword_1B66268E0;
  v371 = (vp::vx::IO_Port_Factory **)v166;
  vp::vx::Voice_Processor_State_Manager::create_state<std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)&v369, (vp::vx::data_flow::State_Transaction *)v250, (vp::vx::data_flow::State_Transaction *)v249, (vp::vx::data_flow::State_Transaction *)v272, (vp::vx::data_flow::State_Transaction *)v273, (uint64_t)v379);
  std::string::basic_string[abi:ne180100]<0>(&v247, "voice");
  __p = v247;
  *(_QWORD *)&v351 = v248;
  v248 = 0;
  v247 = 0uLL;
  DWORD2(v351) = 1;
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v248) < 0)
    operator delete((void *)v247);
  std::string::basic_string[abi:ne180100]<0>(&v245, "voice");
  __p = v245;
  *(_QWORD *)&v351 = v246;
  v246 = 0;
  v245 = 0uLL;
  DWORD2(v351) = 1;
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v246) < 0)
    operator delete((void *)v245);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 1u, (uint64_t)&v375);
  v167 = (_QWORD *)v375;
  if (!v375)
  {
    v224 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v224);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v244, (uint64_t)&v359);
  vp::vx::DSP_Node_Factory::set_input_format(v167, (uint64_t)&__p, (uint64_t)v244);
  vp::vx::data_flow::State<void>::~State((uint64_t)v244);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v168 = (_QWORD *)v375;
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v243, (uint64_t)&v359);
  vp::vx::DSP_Node_Factory::set_output_format(v168, (uint64_t)&__p, (uint64_t)v243);
  vp::vx::data_flow::State<void>::~State((uint64_t)v243);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v359);
  if (SBYTE7(v351) < 0)
    operator delete((void *)__p);
  v169 = v376;
  if (v376)
  {
    v170 = (unint64_t *)&v376->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 0, (uint64_t)v242);
  *(_QWORD *)&__p = &off_1E69BD958;
  *((_QWORD *)&__p + 1) = 0;
  *((_QWORD *)&v351 + 1) = &__p;
  v240[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v253);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::State((uint64_t)&v375, (uint64_t)&v359);
  vp::vx::data_flow::State<void>::~State(&v359);
  v172 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v173 = 4;
    v172 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_304;
    v173 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v172 + 8 * v173))();
LABEL_304:
  vp::vx::data_flow::State<void>::State((uint64_t)v241, (uint64_t)&v375);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v375);
  v174 = *((_QWORD *)v1 + 70);
  v175 = operator new(0x20uLL);
  *v175 = &off_1E69BD9A0;
  v175[1] = v174;
  *((_OWORD *)v175 + 1) = xmmword_1B66268A0;
  *((_QWORD *)&v351 + 1) = v175;
  vp::vx::Voice_Processor_State_Manager::create_state<std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)> const&,double,double,unsigned int,BOOL,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)&__p, (vp::vx::data_flow::State_Transaction *)v252, (vp::vx::data_flow::State_Transaction *)v249, (vp::vx::data_flow::State_Transaction *)v344, (vp::vx::data_flow::State_Transaction *)v379, (vp::vx::data_flow::State_Transaction *)v288, (vp::vx::data_flow::State_Transaction *)v290, (uint64_t)&v375);
  std::string::basic_string[abi:ne180100]<0>(v238, "voice");
  v359 = *(_OWORD *)v238;
  v360 = v239;
  v238[1] = 0;
  v239 = 0;
  v238[0] = 0;
  LODWORD(v361) = 1;
  if (SHIBYTE(v360) < 0)
    operator delete((void *)v359);
  if (SHIBYTE(v239) < 0)
    operator delete(v238[0]);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 0, (uint64_t)&v236);
  v176 = v236;
  if (!v236)
  {
    v225 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v225);
  }
  std::string::basic_string[abi:ne180100]<0>(&v359, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v235, (uint64_t)v253);
  vp::vx::DSP_Node_Factory::set_input_format(v176, (uint64_t)&v359, (uint64_t)v235);
  vp::vx::data_flow::State<void>::~State((uint64_t)v235);
  if (SHIBYTE(v360) < 0)
    operator delete((void *)v359);
  v177 = v236;
  std::string::basic_string[abi:ne180100]<0>(&v359, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v234, (uint64_t)v233);
  vp::vx::DSP_Node_Factory::set_output_format(v177, (uint64_t)&v359, (uint64_t)v234);
  vp::vx::data_flow::State<void>::~State((uint64_t)v234);
  vp::vx::data_flow::State<void>::~State((uint64_t)v233);
  if (SHIBYTE(v360) < 0)
    operator delete((void *)v359);
  v178 = v237;
  if (v237)
  {
    v179 = (unint64_t *)&v237->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = *((_QWORD *)v1 + 70);
  v182 = operator new(0x20uLL);
  *v182 = &off_1E69BD9A0;
  v182[1] = v181;
  *((_OWORD *)v182 + 1) = xmmword_1B66268F0;
  v361 = (__int128 *)v182;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)6,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>((uint64_t)v1, (uint64_t)&v359, (vp::vx::data_flow::State_Transaction *)v252, (vp::vx::data_flow::State_Transaction *)v249, (vp::vx::data_flow::State_Transaction *)v344, (vp::vx::data_flow::State_Transaction *)v379, (vp::vx::data_flow::State_Transaction *)v288, (vp::vx::data_flow::State_Transaction *)v290, (uint64_t)v233);
  v183 = v361;
  if (v361 == &v359)
  {
    v184 = 4;
    v183 = &v359;
  }
  else
  {
    if (!v361)
      goto LABEL_323;
    v184 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v183 + 8 * v184))();
LABEL_323:
  vp::vx::Voice_Processor::create_far_end_voice_proc_node_factory(v1, (uint64_t *)&v359);
  v185 = v359;
  if (!(_QWORD)v359)
  {
    v226 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v226);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v232, (uint64_t)v254);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(v185, (uint64_t)&v232);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v232);
  v186 = v359;
  vp::vx::data_flow::State<void>::State((uint64_t)v231, (uint64_t)v233);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(v186, (uint64_t)v231);
  vp::vx::data_flow::State<void>::~State((uint64_t)v231);
  v187 = v359;
  vp::vx::data_flow::State<void>::State((uint64_t)v230, (uint64_t)v253);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(v187, (uint64_t)v230);
  vp::vx::data_flow::State<void>::~State((uint64_t)v230);
  v188 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  if (*((_QWORD *)&v359 + 1))
  {
    v189 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  vp::vx::Voice_Processor::create_wire_factory(v1, 1, &v228);
  v191 = v229;
  if (v229)
  {
    v192 = (unint64_t *)&v229->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v233);
  vp::vx::data_flow::State<void>::~State((uint64_t)v240);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v375);
  v194 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &__p)
  {
    v195 = 4;
    v194 = &__p;
  }
  else
  {
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_339;
    v195 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v194 + 8 * v195))();
LABEL_339:
  vp::vx::data_flow::State<void>::~State((uint64_t)v241);
  vp::vx::data_flow::State<void>::~State((uint64_t)v242);
  vp::vx::data_flow::State<void>::~State((uint64_t)v343);
  vp::vx::data_flow::State<void>::~State((uint64_t)v342);
  vp::vx::data_flow::State<void>::~State((uint64_t)v379);
  v196 = v371;
  if (v371 == &v369)
  {
    v197 = 4;
    v196 = &v369;
  }
  else
  {
    if (!v371)
      goto LABEL_344;
    v197 = 5;
  }
  (*((void (**)(void))*v196 + v197))();
LABEL_344:
  vp::vx::data_flow::State<void>::~State((uint64_t)v344);
  v198 = v347;
  if (v347 == &v345)
  {
    v199 = 4;
    v198 = &v345;
  }
  else
  {
    if (!v347)
      goto LABEL_349;
    v199 = 5;
  }
  (*((void (**)(void))*v198 + v199))();
LABEL_349:
  vp::vx::data_flow::State<void>::~State((uint64_t)v249);
  v200 = v349;
  if (v349 == v348)
  {
    v201 = 4;
    v200 = v348;
  }
  else
  {
    if (!v349)
      goto LABEL_354;
    v201 = 5;
  }
  (*(void (**)(void))(*v200 + 8 * v201))();
LABEL_354:
  vp::vx::data_flow::State<void>::~State((uint64_t)v250);
  vp::vx::data_flow::State<void>::~State((uint64_t)v251);
  vp::vx::data_flow::State<void>::~State((uint64_t)v252);
  vp::vx::data_flow::State<void>::~State((uint64_t)v253);
  vp::vx::data_flow::State<void>::~State((uint64_t)v254);
  vp::vx::data_flow::State<void>::~State((uint64_t)v264);
  vp::vx::data_flow::State<void>::~State((uint64_t)v265);
  vp::vx::data_flow::State<void>::~State((uint64_t)v268);
  vp::vx::data_flow::State<void>::~State((uint64_t)v271);
  vp::vx::data_flow::State<void>::~State((uint64_t)v272);
  vp::vx::data_flow::State<void>::~State((uint64_t)v273);
  v202 = v356;
  if (v356 == v355)
  {
    v203 = 4;
    v202 = v355;
  }
  else
  {
    if (!v356)
      goto LABEL_359;
    v203 = 5;
  }
  (*(void (**)(void))(*v202 + 8 * v203))();
LABEL_359:
  vp::vx::data_flow::State<void>::~State((uint64_t)v274);
  vp::vx::data_flow::State<void>::~State((uint64_t)v283);
  vp::vx::data_flow::State<void>::~State((uint64_t)v284);
  vp::vx::data_flow::State<void>::~State((uint64_t)v287);
  vp::vx::data_flow::State<void>::~State((uint64_t)v288);
  vp::vx::data_flow::State<void>::~State((uint64_t)v289);
  vp::vx::data_flow::State<void>::~State((uint64_t)v290);
  vp::vx::data_flow::State<void>::~State((uint64_t)v291);
  vp::vx::data_flow::State<void>::~State((uint64_t)v296);
  vp::vx::data_flow::State<void>::~State((uint64_t)v299);
  vp::vx::data_flow::State<void>::~State((uint64_t)v300);
  v204 = v358;
  if (v358 == v357)
  {
    v205 = 4;
    v204 = v357;
  }
  else
  {
    if (!v358)
      goto LABEL_364;
    v205 = 5;
  }
  (*(void (**)(void))(*v204 + 8 * v205))();
LABEL_364:
  vp::vx::data_flow::State<void>::~State((uint64_t)v301);
  vp::vx::data_flow::State<void>::~State((uint64_t)v306);
  vp::vx::data_flow::State<void>::~State((uint64_t)v307);
  vp::vx::data_flow::State<void>::~State((uint64_t)v308);
  v206 = v366;
  if (v366 == v365)
  {
    v207 = 4;
    v206 = v365;
  }
  else
  {
    if (!v366)
      goto LABEL_369;
    v207 = 5;
  }
  (*(void (**)(void))(*v206 + 8 * v207))();
LABEL_369:
  vp::vx::data_flow::State<void>::~State((uint64_t)v309);
  v208 = v368;
  if (v368 == v367)
  {
    v209 = 4;
    v208 = v367;
    goto LABEL_373;
  }
  if (v368)
  {
    v209 = 5;
LABEL_373:
    (*(void (**)(void))(*v208 + 8 * v209))();
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v310);
  vp::vx::data_flow::State<void>::~State((uint64_t)v317);
  vp::vx::data_flow::State<void>::~State((uint64_t)v318);
  vp::vx::data_flow::State<void>::~State((uint64_t)v328);
  vp::vx::data_flow::State<void>::~State((uint64_t)v329);
  vp::vx::data_flow::State<void>::~State((uint64_t)v330);
  vp::vx::data_flow::State<void>::~State((uint64_t)v331);
  vp::vx::data_flow::State<void>::~State((uint64_t)v332);
  vp::vx::data_flow::State<void>::~State((uint64_t)v333);
  vp::vx::data_flow::State<void>::~State((uint64_t)v334);
  vp::vx::data_flow::State<void>::~State((uint64_t)v335);
  vp::vx::data_flow::State<void>::~State((uint64_t)v336);
  vp::vx::data_flow::State<void>::~State((uint64_t)v337);
  vp::vx::data_flow::State<void>::~State((uint64_t)v338);
  vp::vx::data_flow::State<void>::~State((uint64_t)v339);
  vp::vx::data_flow::State<void>::~State((uint64_t)v340);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v341);
}

void sub_1B60595E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x320]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x338]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x368]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x398]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x3B0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x3C8]);
  v3 = (unint64_t *)STACK[0xAF8];
  if ((unint64_t *)STACK[0xAF8] == &STACK[0xAE0])
  {
    v4 = 4;
    v3 = &STACK[0xAE0];
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x3E0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x4B8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x4D0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x500]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x518]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x530]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x548]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x560]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x5B8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x600]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x618]);
  v5 = (unint64_t *)STACK[0xB18];
  if ((unint64_t *)STACK[0xB18] == &STACK[0xB00])
  {
    v6 = 4;
    v5 = &STACK[0xB00];
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x630]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6A8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6C0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6D8]);
  v7 = (unint64_t *)STACK[0xB70];
  if ((unint64_t *)STACK[0xB70] == &STACK[0xB58])
  {
    v8 = 4;
    v7 = &STACK[0xB58];
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6F0]);
  v9 = *(_QWORD **)(v1 - 224);
  if (v9 == (_QWORD *)(v1 - 248))
  {
    v10 = 4;
    v9 = (_QWORD *)(v1 - 248);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_21:
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x708]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x7B0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x7C8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8B8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8D0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8E8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x900]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x918]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x930]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x948]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x960]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x978]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x990]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9A8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9C0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9D8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9F0]);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10[0] = &off_1E69BD0A0;
  v10[1] = 0;
  v11 = v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10[0] = &off_1E69BD0E8;
  v10[1] = 28;
  v11 = v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>(std::__fs::filesystem::path *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string::size_type v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  vp::vx::DSP_Node_Factory *v23;
  vp::vx::DSP_Node_Factory *v24;
  vp::vx::DSP_Node_Factory *v25;
  vp::vx::DSP_Node_Factory *v26;
  vp::vx::DSP_Node_Factory *v27;
  vp::vx::DSP_Node_Factory *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _QWORD v38[3];
  _BYTE v39[24];
  _BYTE v40[24];
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)&a1[30].__pn_.__r_.__value_.__l.__size_, &v45);
  if (!v46 || (v6 = v45, (v7 = std::__shared_weak_count::lock(v46)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  if (v6)
    v9 = v6 + 32;
  else
    v9 = 0;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  v14 = a1[23].__pn_.__r_.__value_.__r.__words[2];
  v43 = v9;
  v44 = v8;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  vp::vx::Voice_Processor::make_weak_state_observer((vp::vx::Voice_Processor *)a1, &v41);
  (*(void (**)(_QWORD **__return_ptr, std::string::size_type, _QWORD, _QWORD **, uint64_t *))(*(_QWORD *)v14 + 16))(&v45, v14, a2, &v43, &v41);
  v16 = v45;
  *(_QWORD *)a3 = v45;
  if (v16)
  {
    v17 = (_QWORD *)operator new();
    v18 = v45;
    *v17 = &off_1E69BD208;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = v18;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a3 + 8) = v17;
  v45 = 0;
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  vp::vx::Voice_Processor::get_block_size((uint64_t)a1, a2, (uint64_t)v40);
  vp::vx::DSP_Node_Factory::set_block_size(v16, (uint64_t)v40);
  vp::vx::data_flow::State<void>::~State((uint64_t)v40);
  v19 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_block_size_is_fixed((uint64_t)a1, a2, (uint64_t)v39);
  vp::vx::DSP_Node_Factory::set_block_size_is_fixed(v19, (uint64_t)v39);
  vp::vx::data_flow::State<void>::~State((uint64_t)v39);
  v20 = *(_QWORD **)a3;
  memset(v38, 0, sizeof(v38));
  vp::vx::data_flow::State<void>::State((uint64_t)v38);
  vp::vx::DSP_Node_Factory::set_fft_block_size(v20, (uint64_t)v38);
  vp::vx::data_flow::State<void>::~State((uint64_t)v38);
  v21 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_sample_rate((uint64_t)a1, a2, (uint64_t)v37);
  vp::vx::DSP_Node_Factory::set_sample_rate(v21, (uint64_t)v37);
  vp::vx::data_flow::State<void>::~State((uint64_t)v37);
  v22 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_configuration((uint64_t)a1, a2, (uint64_t)v36);
  vp::vx::DSP_Node_Factory::set_configuration(v22, (uint64_t)v36);
  vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  vp::vx::DSP_Node_Factory::set_tuning_resources_path(*(vp::vx::DSP_Node_Factory **)a3, a1 + 12);
  vp::vx::DSP_Node_Factory::set_temporary_directory_path(*(vp::vx::DSP_Node_Factory **)a3, a1 + 13);
  v23 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_uplink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v35);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(v23, (uint64_t)v35);
  vp::vx::data_flow::State<void>::~State((uint64_t)v35);
  v24 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_uplink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v34);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(v24, (uint64_t)v34);
  vp::vx::data_flow::State<void>::~State((uint64_t)v34);
  v25 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders((vp::vx::Voice_Processor *)a1, (uint64_t)v33);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(v25, (uint64_t)v33);
  vp::vx::data_flow::State<void>::~State((uint64_t)v33);
  v26 = *(vp::vx::DSP_Node_Factory **)a3;
  (*(void (**)(_QWORD **__return_ptr, std::string::size_type *, uint64_t))(a1->__pn_.__r_.__value_.__l.__size_
                                                                                   + 24))(&v45, &a1->__pn_.__r_.__value_.__l.__size_, 2);
  vp::vx::data_flow::State<void>::State((uint64_t)v32, (uint64_t)&v45);
  vp::vx::data_flow::State<void>::~State(&v45);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(v26, (uint64_t)v32);
  vp::vx::data_flow::State<void>::~State((uint64_t)v32);
  v27 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_connect_to_AUPB((vp::vx::Voice_Processor *)a1, (uint64_t)v31);
  vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(v27, (uint64_t)v31);
  vp::vx::data_flow::State<void>::~State((uint64_t)v31);
  v28 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_connect_to_RPB((vp::vx::Voice_Processor *)a1, (uint64_t)v30);
  vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(v28, (uint64_t)v30);
  vp::vx::data_flow::State<void>::~State((uint64_t)v30);
  v29 = a2;
  v47 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(&a1[62].__pn_.__r_.__value_.__r.__words[2], &v47, &v29, (uint64_t *)a3, (uint64_t)&v45);
  std::__shared_weak_count::__release_weak(v8);
}

void sub_1B605A520(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(std::__shared_weak_count **)(v2 - 120);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = *(std::__shared_weak_count **)(v2 - 104);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN2CA17StreamDescriptionERDoFS4_djEJdjEEEDaOT0_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, vp::vx::data_flow::State_Transaction *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE v12[24];
  int id;
  int v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a2 + 48;
  v15[0] = &off_1E69BD250;
  v15[1] = a3;
  v16 = v15;
  id = vp::vx::data_flow::State_Transaction::get_id(this);
  v14 = vp::vx::data_flow::State_Transaction::get_id(a4);
  vp::vx::data_flow::State_Manager::create_state(v7, (uint64_t)v15, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State(v12);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  vp::vx::data_flow::State<void>::State(a5, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

double vp::vx::`anonymous namespace'::make_pcm_float32_format@<D0>(vp::vx::_anonymous_namespace_ *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  double result;

  *(double *)a3 = a2;
  *(_OWORD *)(a3 + 8) = xmmword_1B6626900;
  *(_DWORD *)(a3 + 24) = 4;
  *(_DWORD *)(a3 + 28) = (_DWORD)this;
  *(_QWORD *)&result = 32;
  *(_QWORD *)(a3 + 32) = 32;
  return result;
}

_QWORD *_ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN2CA17StreamDescriptionERDoFS4_dEJdEEEDaOT0_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v9[8];
  _BYTE v10[24];
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2 + 48;
  v11[0] = &off_1E69BD400;
  v11[1] = a3;
  v12 = v11;
  v9[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v5, (uint64_t)v11, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

double vp::vx::`anonymous namespace'::make_mono_pcm_float32_format@<D0>(double a1@<D0>, uint64_t a2@<X8>)
{
  double result;

  *(double *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_1B6626900;
  *(_QWORD *)&result = 0x100000004;
  *(_OWORD *)(a2 + 24) = xmmword_1B6626910;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double)> const&,double,unsigned int,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 48;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS1_13State_ManagerET_DpRKNSG_IT0_EE((uint64_t)v14, v10, (uint64_t)v15, a3, a4, a5);
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)5,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  _BYTE v14[24];

  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>(a1 + 16, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v14, a10, a11);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)5>(a1, (uint64_t)v14);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1B605A934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Uplink_Configuration_Delegate::calculate_output_max_block_size_with_safety_margin(vp::vx::Uplink_Configuration_Delegate *this, double a2, double a3, double a4)
{
  return ((double)(*(unsigned int (**)(vp::vx::Uplink_Configuration_Delegate *, double, double, double))(*(_QWORD *)this + 48))(this, a2, a3, a4)* 1.25);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,vp::vx::`anonymous namespace'::make_input_channel_count_override_getter_lambda(std::string,unsigned int)::$_0,vp::vx::DSP_Node_Configuration_Options>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD v15[8];
  _BYTE v16[24];
  _BYTE v17[15];
  _QWORD v18[2];
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v17[7] = *(uint64_t *)((char *)a2 + 15);
  v8 = *a2;
  *(_QWORD *)v17 = a2[1];
  v7 = *(_QWORD *)v17;
  v9 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v10 = *((_DWORD *)a2 + 6);
  v18[0] = v7;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)&v17[7];
  v11 = operator new(0x28uLL);
  *v11 = off_1E69BD568;
  v11[1] = v8;
  v11[2] = v18[0];
  *(_QWORD *)((char *)v11 + 23) = *(_QWORD *)((char *)v18 + 7);
  *((_BYTE *)v11 + 31) = v9;
  *((_DWORD *)v11 + 8) = v10;
  v20 = v11;
  v15[7] = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v19, (uint64_t)v16);
  vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State(v16);
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B605AAB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>(std::__fs::filesystem::path *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string::size_type v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  vp::vx::DSP_Node_Factory *v23;
  vp::vx::DSP_Node_Factory *v24;
  vp::vx::DSP_Node_Factory *v25;
  vp::vx::DSP_Node_Factory *v26;
  vp::vx::DSP_Node_Factory *v27;
  vp::vx::DSP_Node_Factory *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _QWORD v38[3];
  _BYTE v39[24];
  _BYTE v40[24];
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)&a1[30].__pn_.__r_.__value_.__l.__size_, &v45);
  if (!v46 || (v6 = v45, (v7 = std::__shared_weak_count::lock(v46)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  if (v6)
    v9 = v6 + 32;
  else
    v9 = 0;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  v14 = a1[23].__pn_.__r_.__value_.__r.__words[2];
  v43 = v9;
  v44 = v8;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  vp::vx::Voice_Processor::make_weak_state_observer((vp::vx::Voice_Processor *)a1, &v41);
  (*(void (**)(_QWORD **__return_ptr, std::string::size_type, uint64_t, _QWORD **, uint64_t *))(*(_QWORD *)v14 + 16))(&v45, v14, a2 | 0x100000000, &v43, &v41);
  v16 = v45;
  *(_QWORD *)a3 = v45;
  if (v16)
  {
    v17 = (_QWORD *)operator new();
    v18 = v45;
    *v17 = &off_1E69BD208;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = v18;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a3 + 8) = v17;
  v45 = 0;
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  vp::vx::Voice_Processor::get_block_size((uint64_t)a1, a2, (uint64_t)v40);
  vp::vx::DSP_Node_Factory::set_block_size(v16, (uint64_t)v40);
  vp::vx::data_flow::State<void>::~State((uint64_t)v40);
  v19 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_block_size_is_fixed((uint64_t)a1, a2, (uint64_t)v39);
  vp::vx::DSP_Node_Factory::set_block_size_is_fixed(v19, (uint64_t)v39);
  vp::vx::data_flow::State<void>::~State((uint64_t)v39);
  v20 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_fft_block_size((uint64_t)a1, a2, v38);
  vp::vx::DSP_Node_Factory::set_fft_block_size(v20, (uint64_t)v38);
  vp::vx::data_flow::State<void>::~State((uint64_t)v38);
  v21 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_sample_rate((uint64_t)a1, a2, (uint64_t)v37);
  vp::vx::DSP_Node_Factory::set_sample_rate(v21, (uint64_t)v37);
  vp::vx::data_flow::State<void>::~State((uint64_t)v37);
  v22 = *(_QWORD **)a3;
  vp::vx::Voice_Processor::get_configuration((uint64_t)a1, a2, (uint64_t)v36);
  vp::vx::DSP_Node_Factory::set_configuration(v22, (uint64_t)v36);
  vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  vp::vx::DSP_Node_Factory::set_tuning_resources_path(*(vp::vx::DSP_Node_Factory **)a3, a1 + 12);
  vp::vx::DSP_Node_Factory::set_temporary_directory_path(*(vp::vx::DSP_Node_Factory **)a3, a1 + 13);
  v23 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_downlink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v35);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(v23, (uint64_t)v35);
  vp::vx::data_flow::State<void>::~State((uint64_t)v35);
  v24 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_downlink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v34);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(v24, (uint64_t)v34);
  vp::vx::data_flow::State<void>::~State((uint64_t)v34);
  v25 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders((vp::vx::Voice_Processor *)a1, (uint64_t)v33);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(v25, (uint64_t)v33);
  vp::vx::data_flow::State<void>::~State((uint64_t)v33);
  v26 = *(vp::vx::DSP_Node_Factory **)a3;
  (*(void (**)(_QWORD **__return_ptr, std::string::size_type *, uint64_t))(a1->__pn_.__r_.__value_.__l.__size_
                                                                                   + 24))(&v45, &a1->__pn_.__r_.__value_.__l.__size_, 2);
  vp::vx::data_flow::State<void>::State((uint64_t)v32, (uint64_t)&v45);
  vp::vx::data_flow::State<void>::~State(&v45);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(v26, (uint64_t)v32);
  vp::vx::data_flow::State<void>::~State((uint64_t)v32);
  v27 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_connect_to_AUPB((vp::vx::Voice_Processor *)a1, (uint64_t)v31);
  vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(v27, (uint64_t)v31);
  vp::vx::data_flow::State<void>::~State((uint64_t)v31);
  v28 = *(vp::vx::DSP_Node_Factory **)a3;
  vp::vx::Voice_Processor::get_should_connect_to_RPB((vp::vx::Voice_Processor *)a1, (uint64_t)v30);
  vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(v28, (uint64_t)v30);
  vp::vx::data_flow::State<void>::~State((uint64_t)v30);
  v29 = a2 | 0x100000000;
  v47 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(&a1[62].__pn_.__r_.__value_.__r.__words[2], &v47, &v29, (uint64_t *)a3, (uint64_t)&v45);
  std::__shared_weak_count::__release_weak(v8);
}

void sub_1B605AE38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(std::__shared_weak_count **)(v2 - 120);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = *(std::__shared_weak_count **)(v2 - 104);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 48;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEEERNS1_13State_ManagerET_DpRKNSJ_IT0_EE((uint64_t)v14, v10, (uint64_t)v15, a3, a4, a5);
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,vp::vx::`anonymous namespace'::make_output_channel_count_override_getter_lambda(std::string,unsigned int)::$_0,vp::vx::DSP_Node_Configuration_Options>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD v15[8];
  _BYTE v16[24];
  _BYTE v17[15];
  _QWORD v18[2];
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v17[7] = *(uint64_t *)((char *)a2 + 15);
  v8 = *a2;
  *(_QWORD *)v17 = a2[1];
  v7 = *(_QWORD *)v17;
  v9 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v10 = *((_DWORD *)a2 + 6);
  v18[0] = v7;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)&v17[7];
  v11 = operator new(0x28uLL);
  *v11 = off_1E69BD688;
  v11[1] = v8;
  v11[2] = v18[0];
  *(_QWORD *)((char *)v11 + 23) = *(_QWORD *)((char *)v18 + 7);
  *((_BYTE *)v11 + 31) = v9;
  *((_DWORD *)v11 + 8) = v10;
  v20 = v11;
  v15[7] = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v19, (uint64_t)v16);
  vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State(v16);
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v15);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v15);
}

void sub_1B605B0B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = a1 + 48;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v17, a2);
  _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEEERNS1_13State_ManagerESH_SO_((uint64_t)v16, v12, (uint64_t)v17, a3, a4, a5, a6);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v16);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v16);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)> const&,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = a1 + 48;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v21, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerESE_SL_((uint64_t)v20, v16, (uint64_t)v21, a3, a4, a5, a6, a7, a8);
  v17 = v22;
  if (v22 == v21)
  {
    v18 = 4;
    v17 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v18 = 5;
LABEL_5:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v20);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v20);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)6,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  _BYTE v12[24];

  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>(a1 + 16, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v12);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)6>(a1, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1B605B2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD058;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD058;
  a2[1] = v2;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::pmr *v7;
  _QWORD *result;

  v3 = *a3;
  v4 = (uint64_t *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  v5 = *v4;
  v6 = v4[1];
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v7);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v5;
  result[1] = v6;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD0A0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD0A0;
  a2[1] = v2;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD0E8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD0E8;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD130;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD130;
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  unsigned int *v6;
  vp *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  unsigned int v18;
  std::pmr *v19;
  unsigned int *result;
  void *__p[2];
  unsigned __int8 v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v8 = *v6;
  v9 = *(_DWORD *)v7;
  if (v8 != *(_DWORD *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v12 = v22;
      v13 = __p[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v16 = __p;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        *(_DWORD *)buf = 136315394;
        v24 = v16;
        v25 = 2080;
        v26 = v17;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference sample rates must be equal", buf, 0x16u);
      }
      if ((char)v22 < 0)
        operator delete(__p[0]);
    }
  }
  if (v8 <= v9)
    v18 = v9;
  else
    v18 = v8;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v19);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (unsigned int *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v18;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD178;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD178;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  double *v6;
  vp *v7;
  double v8;
  double v9;
  NSObject *log;
  vp *log_context_info;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  void **v16;
  const char *v17;
  std::pmr *v18;
  double *result;
  void *__p[2];
  unsigned __int8 v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v8 = *v6;
  v9 = *(double *)v7;
  if (*v6 != *(double *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      v12 = v21;
      v13 = __p[1];
      v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = (unint64_t)v13;
        v16 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v16 = __p;
        if (v15)
          v17 = " ";
        else
          v17 = "";
        *(_DWORD *)buf = 136315394;
        v23 = v16;
        v24 = 2080;
        v25 = v17;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference block sizes must be equal", buf, 0x16u);
      }
      if ((char)v21 < 0)
        operator delete(__p[0]);
    }
  }
  if (v8 < v9)
    v8 = v9;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v18);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (double *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD1C0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD1C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  std::pmr *v10;
  _DWORD *result;
  void *__p[2];
  char v13;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ref");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v7 + 136), (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_DWORD *)v8 + 10);
  if (v13 < 0)
    operator delete(__p[0]);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

void sub_1B605BAF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B605BAACLL);
}

void std::__shared_ptr_pointer<vp::vx::DSP_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::DSP_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  BOOL inserted;
  __int128 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;

  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 0;
  v17 = 0;
  if (*a2)
  {
    v16 = *a2;
    inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v16, (uint64_t)a3, (uint64_t *)&v17);
  }
  else
  {
    v10 = (__int128 *)a1[1];
    v11 = a1[2];
    v19 = v10;
    if (v10)
      v12 = 1;
    else
      v12 = v11 == 0;
    if (!v12)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v18 = (uint64_t)v10 + 24 * v11;
    inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v19, &v18, (uint64_t)a3, (uint64_t *)&v17);
  }
  *(_BYTE *)(a5 + 8) = inserted;
  if (inserted)
  {
    v15 = v17;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(a1, &v15, a3, a4, &v19);
    *(_QWORD *)a5 = v19;
  }
  else
  {
    v13 = a1[1];
    if (a1[2] < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v13) >> 3))
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    v14 = v13 + 8 * (((uint64_t)v17 - v13) >> 3);
    *(_QWORD *)a5 = v14;
    std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)(v14 + 8), a4);
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v5)
    v6 = 1;
  else
    v6 = v4 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v11 = v5 + 24 * v4;
  v12 = *a2;
  if (v12 != v11)
  {
    if (!v12)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a3, v12) & 0x80) == 0)
    {
      v13 = *a2;
      v19 = v11;
      v20 = v13;
      v14 = &v20;
      v15 = &v19;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v11 = *a2;
  }
  *a4 = v11;
  v17 = *a2;
  if (*a2 == v5)
    return 1;
  if (!v17)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v18 = v17 - 24;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v17 - 24, a3) & 0x80) != 0)
    return 1;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a3, v18) & 0x80) != 0)
  {
    v21 = v18;
    v22 = v5;
    v14 = &v22;
    v15 = &v21;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
  }
  result = 0;
  *a4 = v18;
  return result;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, __int128 **a5@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v6 = *a2;
  v7 = a1[1];
  if (v7 > (unint64_t)v6)
    goto LABEL_11;
  v9 = a1[2];
  if (v7)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (!v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)v6 > v7 + 24 * v9)
LABEL_11:
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)v6, (uint64_t)a3);
  v11 = a1[3];
  if (v11 < v9)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)v6, (uint64_t)a3);
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, (uint64_t)v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, v6, 1, a4, a3);
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,true>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return (std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a4, v9) & 0x80u) != 0;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,true>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *a2;
  if (*a2 != *a1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      v9 = *a1;
      if (v8 != 1 && !v9)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v9)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v10 = v8 >> 1;
      v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        v10 = v8 + ~v10;
      }
      v8 = v10;
    }
    while (v10);
    v5 = *a1;
  }
  *a4 = v5;
}

uint64_t std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  char v7;
  char *v8;

  v3 = *(unsigned int *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if ((_DWORD)v3 == -1)
  {
    if (v4 == -1)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else if (v4 == -1)
  {
    return 1;
  }
  else
  {
    if (v3 < v4)
      result = 0xFFFFFFFFLL;
    else
      result = 1;
    if ((_DWORD)v3 == v4)
    {
      v7 = 0;
      v8 = &v7;
      return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E69BD230[v3])(&v8, a1, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx18Uplink_DSP_Node_IDENSA_20Downlink_DSP_Node_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SF_E4typeEEE4typeERKNS_7variantIJDpSF_EEESP_EUlTyRKT_SS_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_EEES11_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx18Uplink_DSP_Node_IDENSA_20Downlink_DSP_Node_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SF_E4typeEEE4typeERKNS_7variantIJDpSF_EEESP_EUlTyRKT_SS_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_EEES11_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(_QWORD *a1, __int128 *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  if (v5 == a1[3])
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, (uint64_t)a2, a3);
  v9 = a1[1];
  v10 = (__int128 *)(v9 + 24 * v5);
  if (v10 == a2)
  {
    *(_QWORD *)a2 = *a5;
    v22 = v9 + 24 * v5;
    *(_QWORD *)(v22 + 8) = *a4;
    v23 = a4[1];
    *(_QWORD *)(v22 + 16) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    ++a1[2];
  }
  else
  {
    v11 = (__int128 *)((char *)v10 - 24);
    v12 = *((_QWORD *)v10 - 3);
    *(_OWORD *)(v9 + 24 * v5 + 8) = *(v10 - 1);
    *((_QWORD *)v10 - 2) = 0;
    *((_QWORD *)v10 - 1) = 0;
    *(_QWORD *)v10 = v12;
    ++a1[2];
    if ((__int128 *)((char *)v10 - 24) != a2)
    {
      v13 = (__int128 *)((char *)v10 - 24);
      do
      {
        v14 = *((_QWORD *)v13 - 3);
        v13 = (__int128 *)((char *)v13 - 24);
        *(_QWORD *)v11 = v14;
        std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v11 + 8, v11 - 1);
        v11 = v13;
      }
      while (v13 != a2);
    }
    v15 = *a5;
    *(_QWORD *)&v26 = *a4;
    v16 = a4[1];
    *((_QWORD *)&v26 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_QWORD *)a2 = v15;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)a2 + 8, &v26);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v12 = a1[1];
  v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v13 >= 0xAAAAAAAAAAAAAABLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  v15 = v13;
  v16 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 24 * v13, 8);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = a1[1] + a2 - v12;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>((uint64_t)a1, v11, a4, v11 + 24 * a1[2], a2, a5, a6, a7);
  if (v11)
  {
    v12 = a1[2];
    if (v12)
    {
      v13 = v11 + 8;
      do
      {
        --v12;
        v13 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v13) + 24;
      }
      while (v12);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  }
  v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
}

void sub_1B605C458(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  if (v2)
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 *v13;

  v8 = a5;
  if (a2 != a3)
  {
    v8 = a5;
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a2;
      result = *(__n128 *)(a2 + 8);
      *(__n128 *)(v8 + 8) = result;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v8 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  *(_QWORD *)v8 = *a8;
  v10 = a7[1];
  *(_QWORD *)(v8 + 8) = *a7;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a3 != a4)
  {
    v13 = (__n128 *)(v8 + 32);
    do
    {
      v13[-1].n128_u64[1] = *(_QWORD *)a3;
      result = *(__n128 *)(a3 + 8);
      *v13 = result;
      v13 = (__n128 *)((char *)v13 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD250;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD250;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  double result;

  *(_QWORD *)&result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_djEJdjEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_((uint64_t (**)(_QWORD, double))(a1 + 8), a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_djEJdjEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_(uint64_t (**a1)(_QWORD, double), vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  std::pmr *v4;
  uint64_t storage;
  __n128 result;
  __int128 v7;
  __n128 v8;
  uint64_t v9;

  v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS4_RDoFS4_djEJdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjEJLm0ELm1EEEEDaRKT_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v4);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  result = v8;
  *(_OWORD *)storage = v7;
  *(__n128 *)(storage + 16) = v8;
  *(_QWORD *)(storage + 32) = v9;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS4_RDoFS4_djEJdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjEJLm0ELm1EEEEDaRKT_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t (**a1)(_QWORD, double), vp::vx::data_flow::Value **a2)
{
  double *v4;
  unsigned int *v5;

  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v4 = (double *)vp::vx::data_flow::Value::view_storage(*a2);
  else
    v4 = 0;
  v5 = (unsigned int *)vp::vx::data_flow::Value::view_storage(a2[1]);
  return (*a1)(*v5, *v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD298;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EEclEObOdOjS8_SQ_SQ_OSA_(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, unsigned int *a4, uint64_t a5, unint64_t *a6, unint64_t *a7, _QWORD *a8, __n128 a9, __n128 a10, __n128 a11)
{
  return _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS4_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFSD_SF_EEUlbdjS9_ddSB_E_bdjS9_ddSB_EEEdDpOT_((_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS4_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFSD_SF_EEUlbdjS9_ddSB_E_bdjS9_ddSB_EEEdDpOT_(_QWORD *a1, unsigned __int8 *a2, unint64_t *a3, unsigned int *a4, uint64_t a5, unint64_t *a6, unint64_t *a7, _QWORD *a8, __n128 a9, __n128 a10, __n128 a11)
{
  uint64_t (*v11)(_QWORD *, BOOL, _QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128);
  uint64_t v12;
  _QWORD *v13;

  a11.n128_u64[0] = *a7;
  v11 = (uint64_t (*)(_QWORD *, BOOL, _QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128))a1[1];
  v12 = a1[2];
  v13 = (_QWORD *)(*a1 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, BOOL, _QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128))(*v13 + v11);
  a9.n128_u64[0] = *a3;
  a10.n128_u64[0] = *a6;
  return v11(v13, *a2 != 0, *a4, a5, *a8, a8[1], a9, a10, a11);
}

uint64_t std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD2E0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD2E0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = &off_1E69BD2E0;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1B605C908(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_1E69BD2E0;
  result = std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EEclEOS1B_OS1C_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  double *v7;
  uint64_t (****v8)();
  int *v9;
  uint64_t (****v10)();
  uint64_t v11;
  uint64_t (****v12)();
  double *v13;
  uint64_t (****v14)();
  double *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::pmr *v19;
  _QWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v11 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  else
    v15 = 0;
  v16 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[5]);
  std::function<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::operator()(a1 + 8, *(_BYTE *)(a1 + 40), *v9, v11, *v16, v16[1], *v7, *v13, *v15);
  v18 = v17;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v19);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v18;
  return result;
}

uint64_t std::function<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::operator()(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t v9;
  double v11;
  double v12;
  int v13;
  double v14;
  char v15;
  _QWORD v16[2];

  v16[0] = a5;
  v16[1] = a6;
  v15 = a2;
  v14 = a7;
  v13 = a3;
  v11 = a9;
  v12 = a8;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *, double *, int *, uint64_t, double *, double *, _QWORD *))(*(_QWORD *)v9 + 48))(v9, &v15, &v14, &v13, a4, &v12, &v11, v16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD328;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EEclES8_OdSD_(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t a4, __n128 a5)
{
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v6;
  _QWORD *v7;

  v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))a1[2];
  v6 = a1[3];
  v7 = (_QWORD *)(a1[1] + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(*v7 + v5);
  a5.n128_u64[0] = *a3;
  return v5(v7, a2, a4, a5);
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E69BD370;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED0Ev(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E69BD370;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_1E69BD370;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605CDCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD370;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyEv(uint64_t a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyB8ne180100Ev((_QWORD *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE18destroy_deallocateEv(_QWORD *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyB8ne180100Ev(a1 + 1);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EEclEOS1E_OS1F_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::pmr *v10;
  _DWORD *result;
  uint64_t v12;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v12 = *(_QWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v8 + 48))(v8, v7, &v12, a1 + 40);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v10);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v9;
  return result;
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  return a1;
}

void sub_1B605CF28(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyB8ne180100Ev(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD3B8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD3B8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t (****v6)();
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  std::pmr *v10;
  _DWORD *result;
  void *__p[2];
  char v13;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ref");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v7 + 96), (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_DWORD *)v8 + 10);
  if (v13 < 0)
    operator delete(__p[0]);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

void sub_1B605D128(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B605D0E0);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD400;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD400;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  double result;

  *(_QWORD *)&result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_dEJdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_((void (**)(_OWORD *__return_ptr, double))(a1 + 8), a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_dEJdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_(void (**a1)(_OWORD *__return_ptr, double), vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v4;
  double *v5;
  std::pmr *v6;
  uint64_t storage;
  uint64_t v8;
  __n128 result;
  _OWORD v10[2];
  uint64_t v11;

  v4 = *a3;
  v5 = (double *)vp::vx::data_flow::Value::view_storage(**a2);
  (*a1)(v10, *v5);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v6);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  v8 = v11;
  result = (__n128)v10[1];
  *(_OWORD *)storage = v10[0];
  *(__n128 *)(storage + 16) = result;
  *(_QWORD *)(storage + 32) = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD448;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEEclEOdOjSK_(_QWORD *a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, __n128, __n128);
  uint64_t v8;
  _QWORD *v9;

  a5.n128_u64[0] = *a2;
  v6 = *a3;
  v7 = (uint64_t (*)(_QWORD *, uint64_t, __n128, __n128))a1[2];
  v8 = a1[3];
  v9 = (_QWORD *)(a1[1] + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, __n128, __n128))(*v9 + v7);
  a6.n128_u64[0] = *a4;
  return v7(v9, v6, a5, a6);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS1_13State_ManagerET_DpRKNSG_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD v17[10];
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)v18, a3);
  v21 = 0;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E69BD490;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v18);
  v21 = v11;
  v17[7] = vp::vx::data_flow::State_Transaction::get_id(a4);
  v17[8] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v17[9] = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v20, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v15 = 5;
LABEL_10:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

void sub_1B605D440(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD490;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD490;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BD490;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605D5B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD490;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS5_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSP_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS5_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSP_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t (****v5)();
  int *v6;
  double *v7;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 16));
  return std::function<unsigned int ()(double,unsigned int,double)>::operator()(a1, *v6, *v4, *v7);
}

uint64_t std::function<unsigned int ()(double,unsigned int,double)>::operator()(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v4;
  double v6;
  int v7;
  double v8;

  v8 = a3;
  v7 = a2;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, double *, int *, double *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)v23, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE((uint64_t)v22, v18, (uint64_t)v23, a3, a4, a5, a6, a7, a8, a10, a11);
  v19 = v24;
  if (v24 == v23)
  {
    v20 = 4;
    v19 = v23;
    goto LABEL_5;
  }
  if (v24)
  {
    v20 = 5;
LABEL_5:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v22);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v22);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)5>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 5u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B605D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v24[24];
  int id;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)v33, a3);
  v36 = 0;
  v17 = operator new(0x28uLL);
  *v17 = &off_1E69BD4D8;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)(v17 + 1), (uint64_t)v33);
  v36 = v17;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v26 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v27 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v28 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v29 = vp::vx::data_flow::State_Transaction::get_id(a8);
  v30 = vp::vx::data_flow::State_Transaction::get_id(a9);
  v31 = vp::vx::data_flow::State_Transaction::get_id(a10);
  v32 = vp::vx::data_flow::State_Transaction::get_id(a11);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v35, (uint64_t)v24);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State(v24);
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = v34;
  if (v34 == v33)
  {
    v21 = 4;
    v20 = v33;
    goto LABEL_10;
  }
  if (v34)
  {
    v21 = 5;
LABEL_10:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return a1;
}

void sub_1B605DB38(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD4D8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD4D8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BD4D8;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605DC4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD4D8;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS5_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOSN_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS5_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOSN_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t (****v5)();
  int *v6;
  uint64_t (****v7)();
  double *v8;
  uint64_t (****v9)();
  int *v10;
  uint64_t (****v11)();
  char *v12;
  uint64_t (****v13)();
  double *v14;
  uint64_t (****v15)();
  int *v16;
  char *v17;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v8 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  v9 = *(uint64_t (*****)())(a2 + 24);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v10 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  else
    v10 = 0;
  v11 = *(uint64_t (*****)())(a2 + 32);
  if (v11[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v12 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  else
    v12 = 0;
  v13 = *(uint64_t (*****)())(a2 + 40);
  if (v13[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v14 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v13);
  else
    v14 = 0;
  v15 = *(uint64_t (*****)())(a2 + 48);
  if (v15[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v16 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v15);
  else
    v16 = 0;
  v17 = (char *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 56));
  return std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::operator()(a1, *v6, *v10, *v12, *v16, *v17, *v4, *v8, *v14);
}

uint64_t std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::operator()(uint64_t a1, int a2, int a3, char a4, int a5, char a6, double a7, double a8, double a9)
{
  uint64_t v9;
  char v11;
  int v12;
  double v13;
  char v14;
  int v15;
  double v16;
  int v17;
  double v18;

  v18 = a7;
  v17 = a2;
  v16 = a8;
  v15 = a3;
  v14 = a4;
  v13 = a9;
  v12 = a5;
  v11 = a6;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, double *, int *, double *, int *, char *, double *, int *, char *))(*(_QWORD *)v9 + 48))(v9, &v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD520;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD520;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEEclEOdOjSK_SL_ObSK_SL_SM_(uint64_t a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, unsigned int *a5, unsigned __int8 *a6, unint64_t *a7, unsigned int *a8, __n128 a9, __n128 a10, __n128 a11, unsigned __int8 *a12)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdjbdjbE_djdjbdjbEEEjDpOT_((_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdjbdjbE_djdjbdjbEEEjDpOT_(_QWORD *a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, unsigned int *a5, unsigned __int8 *a6, unint64_t *a7, unsigned int *a8, __n128 a9, __n128 a10, __n128 a11, unsigned __int8 *a12)
{
  uint64_t (*v12)(_QWORD *, _QWORD, _QWORD, BOOL, _QWORD, BOOL, __n128, __n128, __n128);
  uint64_t v13;
  _QWORD *v14;

  a11.n128_u64[0] = *a7;
  v12 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, BOOL, _QWORD, BOOL, __n128, __n128, __n128))a1[1];
  v13 = a1[2];
  v14 = (_QWORD *)(*a1 + (v13 >> 1));
  if ((v13 & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, BOOL, _QWORD, BOOL, __n128, __n128, __n128))(*v14 + v12);
  a10.n128_u64[0] = *a4;
  a9.n128_u64[0] = *a2;
  return v12(v14, *a3, *a5, *a6 != 0, *a8, *a12 != 0, a9, a10, a11);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69BD568;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69BD568;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  std::string *v3;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1E69BD568;
  v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_1B605E100(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_1E69BD568;
  v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7destroyEv(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE18destroy_deallocateEv(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  unsigned __int8 *v3;
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  std::pmr *v9;
  _DWORD *result;

  v3 = (unsigned __int8 *)(a1 + 8);
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v6 + 96), v3);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = *((_DWORD *)v7 + 10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v9);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v8;
  return result;
}

void sub_1B605E258(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B605E210);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD5B0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD5B0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  _DWORD *v6;
  int v7;
  BOOL v9;
  std::pmr *v10;
  BOOL *result;

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id)
    v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  v9 = *v6 == 7 && v7 != 0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v10);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (BOOL *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v9;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD5F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEEclES8_OdOj(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned int *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v7;
  _QWORD *v8;

  a5.n128_u64[0] = *a3;
  v5 = *a4;
  v6 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))a1[2];
  v7 = a1[3];
  v8 = (_QWORD *)(a1[1] + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(*v8 + v6);
  return v6(v8, a2, v5, a5);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEEERNS1_13State_ManagerET_DpRKNSJ_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD v17[10];
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v18, a3);
  v21 = 0;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E69BD640;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v18);
  v21 = v11;
  v17[7] = vp::vx::data_flow::State_Transaction::get_id(a4);
  v17[8] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v17[9] = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v20, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v15 = 5;
LABEL_10:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

void sub_1B605E568(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD640;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD640;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BD640;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605E6E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD640;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EEclEOS17_OS18_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS4_30DSP_Node_Configuration_OptionsEdjEEEJSC_djEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JSC_djEEERNS5_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS5_5ValueEPS15_E_S18_S19_EEEvDpOSS_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS4_30DSP_Node_Configuration_OptionsEdjEEEJSC_djEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JSC_djEEERNS5_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS5_5ValueEPS15_E_S18_S19_EEEvDpOSS_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (****v5)();
  double *v6;
  int *v7;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v4 = vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 16));
  return std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::operator()(a1, v4, *v7, *v6);
}

uint64_t std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  int v6;
  double v7;

  v7 = a4;
  v6 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, int *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69BD688;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69BD688;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCC95CECLL);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  std::string *v3;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1E69BD688;
  v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_1B605E9AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_1E69BD688;
  v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7destroyEv(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE18destroy_deallocateEv(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  unsigned __int8 *v3;
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  std::pmr *v9;
  _DWORD *result;

  v3 = (unsigned __int8 *)(a1 + 8);
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v6 + 136), v3);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = *((_DWORD *)v7 + 10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v9);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *result = v8;
  return result;
}

void sub_1B605EB04(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B605EABCLL);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD6D0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD6D0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v3)();
  uint64_t *v4;
  uint64_t (****v5)();
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::pmr *v9;
  uint64_t storage;
  __n128 result;
  _BYTE v12[40];

  v3 = *a2;
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id)
    v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  *(_OWORD *)v12 = *(_OWORD *)v6;
  *(_OWORD *)&v12[16] = *(_OWORD *)(v6 + 16);
  *(_QWORD *)&v12[32] = *(_QWORD *)(v6 + 32);
  v8 = *v7;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v4);
  *v4 = std::pmr::get_default_resource(v9);
  v4[1] = 0;
  v4[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v4);
  *(_QWORD *)storage = v8;
  result = *(__n128 *)&v12[8];
  *(_OWORD *)(storage + 8) = *(_OWORD *)&v12[8];
  *(_OWORD *)(storage + 24) = *(_OWORD *)&v12[24];
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD718;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD718;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(__n128 a1, uint64_t a2, uint64_t (******a3)(), uint64_t **a4)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  uint64_t v7;
  uint64_t (****v8)();
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int32 v12;
  int v13;
  int v14;
  std::pmr *v15;
  uint64_t storage;
  __n128 result;
  __n128 v18;
  uint64_t v19;
  int v20;

  v4 = *a3;
  v5 = *a4;
  v6 = **a3;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  v9 = *(_DWORD *)(v7 + 12);
  v10 = *(_DWORD *)(v7 + 28);
  a1.n128_u64[0] = *(_QWORD *)(v7 + 32);
  v18 = a1;
  if ((v9 & 0x20) != 0)
  {
    v11 = 1;
  }
  else
  {
    v11 = *(_DWORD *)(v7 + 28);
    if (!v10)
    {
      v12 = (a1.n128_u32[0] + 7) >> 3;
      goto LABEL_11;
    }
  }
  v12 = *(_DWORD *)(v7 + 24) / v11;
LABEL_11:
  if (v10 >= 2)
    v13 = 2;
  else
    v13 = *(_DWORD *)(v7 + 28);
  v14 = v9 | 0x20;
  v19 = *(_QWORD *)v7;
  v20 = *(_DWORD *)(v7 + 8);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v15);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *(_QWORD *)storage = v19;
  *(_DWORD *)(storage + 8) = v20;
  *(_DWORD *)(storage + 12) = v14;
  *(_DWORD *)(storage + 16) = v12;
  *(_DWORD *)(storage + 20) = 1;
  *(_DWORD *)(storage + 24) = v12;
  *(_DWORD *)(storage + 28) = v13;
  result = v18;
  *(_QWORD *)(storage + 32) = v18.n128_u64[0];
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BD760;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BD760;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  uint64_t storage;
  __n128 result;
  __n128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *a3;
  v4 = vp::vx::data_flow::Value::view_storage(**a2);
  v8 = *(__n128 *)v4;
  v9 = *(_OWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 32);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  result = v8;
  *(__n128 *)storage = v8;
  *(_OWORD *)(storage + 16) = v9;
  *(_QWORD *)(storage + 32) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD7A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD7A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EEclEObS8_OdSQ_SQ_OSA_(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, _QWORD *a7, __n128 a8, __n128 a9, __n128 a10)
{
  return _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS4_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSD_SF_EEUlbS9_dddSB_E_bS9_dddSB_EEEdDpOT_((_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS4_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSD_SF_EEUlbS9_dddSB_E_bS9_dddSB_EEEdDpOT_(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, _QWORD *a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t (*v10)(_QWORD *, BOOL, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128);
  uint64_t v11;
  _QWORD *v12;

  a10.n128_u64[0] = *a6;
  v10 = (uint64_t (*)(_QWORD *, BOOL, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128))a1[1];
  v11 = a1[2];
  v12 = (_QWORD *)(*a1 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, BOOL, uint64_t, _QWORD, _QWORD, __n128, __n128, __n128))(*v12 + v10);
  a8.n128_u64[0] = *a4;
  a9.n128_u64[0] = *a5;
  return v10(v12, *a2 != 0, a3, *a7, a7[1], a8, a9, a10);
}

uint64_t std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD7F0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD7F0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = &off_1E69BD7F0;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1B605F108(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_1E69BD7F0;
  result = std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EEclEOS1B_OS1C_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  uint64_t v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  double *v11;
  uint64_t (****v12)();
  double *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::pmr *v17;
  _QWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  else
    v13 = 0;
  v14 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[4]);
  std::function<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::operator()(a1 + 8, *(_BYTE *)(a1 + 40), v7, *v14, v14[1], *v9, *v11, *v13);
  v16 = v15;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v17);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v16;
  return result;
}

uint64_t std::function<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::operator()(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  char v13;
  _QWORD v14[2];

  v14[0] = a4;
  v14[1] = a5;
  v13 = a2;
  v11 = a7;
  v12 = a6;
  v10 = a8;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, double *, double *, double *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v13, a3, &v12, &v11, &v10, v14);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD838;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD838;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EEclES8_OdSS_OjSD_(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, uint64_t a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128, __n128);
  uint64_t v10;
  _QWORD *v11;

  a7.n128_u64[0] = *a3;
  v8 = *a5;
  v9 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128, __n128))a1[2];
  v10 = a1[3];
  v11 = (_QWORD *)(a1[1] + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128, __n128))(*v11 + v9);
  a8.n128_u64[0] = *a4;
  return v9(v11, a2, v8, a6, a7, a8);
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E69BD880;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED0Ev(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E69BD880;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_1E69BD880;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605F598(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD880;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyEv(uint64_t a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyB8ne180100Ev((_QWORD *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE18destroy_deallocateEv(_QWORD *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyB8ne180100Ev(a1 + 1);
  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EEclEOS1E_OS1F_(uint64_t a1, uint64_t (******a2)(), uint64_t **a3)
{
  uint64_t (*****v4)();
  uint64_t *v5;
  uint64_t (****v6)();
  uint64_t v7;
  uint64_t (****v8)();
  double *v9;
  uint64_t (****v10)();
  double *v11;
  int *v12;
  int v13;
  std::pmr *v14;
  _DWORD *result;

  v4 = *a2;
  v5 = *a3;
  v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  else
    v7 = 0;
  v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  else
    v9 = 0;
  v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  else
    v11 = 0;
  v12 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[3]);
  v13 = std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(a1 + 8, v7, *v12, a1 + 40, *v9, *v11);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v5);
  *v5 = std::pmr::get_default_resource(v14);
  v5[1] = 0;
  v5[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v5);
  *result = v13;
  return result;
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  return a1;
}

void sub_1B605F738(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  int v8;
  double v9;
  double v10;

  v10 = a5;
  v9 = a6;
  v8 = a3;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, int *, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2, &v10, &v9, &v8, a4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD8C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEEclES8_OdSN_Oj(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, __n128 a6, __n128 a7)
{
  uint64_t (*v7)(_QWORD *, uint64_t, _QWORD, __n128, __n128);
  uint64_t v8;
  _QWORD *v9;

  a7.n128_u64[0] = *a4;
  v7 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, __n128, __n128))a1[2];
  v8 = a1[3];
  v9 = (_QWORD *)(a1[1] + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, __n128, __n128))(*v9 + v7);
  a6.n128_u64[0] = *a3;
  return v7(v9, a2, *a5, a6, a7);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEEERNS1_13State_ManagerESH_SO_(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD v19[10];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v20, a3);
  v23 = 0;
  v13 = operator new(0x28uLL);
  *v13 = &off_1E69BD910;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v20);
  v23 = v13;
  v19[6] = vp::vx::data_flow::State_Transaction::get_id(a4);
  v19[7] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v19[8] = vp::vx::data_flow::State_Transaction::get_id(a6);
  v19[9] = vp::vx::data_flow::State_Transaction::get_id(a7);
  v14 = 4;
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v22, (uint64_t)v19);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State(v19);
  v15 = v23;
  if (v23 == v22)
  {
    v15 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v14))();
LABEL_6:
  v16 = v21;
  if (v21 == v20)
  {
    v17 = 4;
    v16 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v17 = 5;
LABEL_10:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return a1;
}

void sub_1B605F9D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD910;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD910;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BD910;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B605FB50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD910;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_BYTE *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS4_30DSP_Node_Configuration_OptionsEddjEEEJSC_ddjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSC_ddjEEERNS5_13State_ManagerESK_SR_EUlPPKNS5_5ValueEPSZ_E_S12_S13_EEEvDpOSS_(a1 + 8, a2, a3);
}

_BYTE *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS4_30DSP_Node_Configuration_OptionsEddjEEEJSC_ddjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSC_ddjEEERNS5_13State_ManagerESK_SR_EUlPPKNS5_5ValueEPSZ_E_S12_S13_EEEvDpOSS_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  char v4;
  std::pmr *v5;
  _BYTE *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEJLm0ELm1ELm2ELm3EEEEDaRKSH_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  result = (_BYTE *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEJLm0ELm1ELm2ELm3EEEEDaRKSH_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (****v5)();
  double *v6;
  uint64_t (****v7)();
  double *v8;
  int *v9;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id)
    v4 = vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v8 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  v9 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 24));
  return std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::operator()(a1, v4, *v9, *v6, *v8);
}

uint64_t std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v5;
  int v7;
  double v8;
  double v9;

  v9 = a4;
  v8 = a5;
  v7 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, int *))(*(_QWORD *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BD958;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BD958;
  a2[1] = v2;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  std::pmr *v5;
  _QWORD *result;

  v3 = *a3;
  v4 = *(_QWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  result = (_QWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BD9A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BD9A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEEclEOdSK_OjObSK_SL_(uint64_t a1, unint64_t *a2, unint64_t *a3, unsigned int *a4, unsigned __int8 *a5, unint64_t *a6, unsigned int *a7, __n128 a8, __n128 a9, __n128 a10)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFS8_SA_EEUlddjbdjE_ddjbdjEEEjDpOT_((_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFS8_SA_EEUlddjbdjE_ddjbdjEEEjDpOT_(_QWORD *a1, unint64_t *a2, unint64_t *a3, unsigned int *a4, unsigned __int8 *a5, unint64_t *a6, unsigned int *a7, __n128 a8, __n128 a9, __n128 a10)
{
  int v10;
  uint64_t (*v11)(_QWORD *, _QWORD, BOOL, _QWORD, __n128, __n128, __n128);
  uint64_t v12;
  _QWORD *v13;

  v10 = *a5;
  v11 = (uint64_t (*)(_QWORD *, _QWORD, BOOL, _QWORD, __n128, __n128, __n128))a1[1];
  v12 = a1[2];
  v13 = (_QWORD *)(*a1 + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, _QWORD, BOOL, _QWORD, __n128, __n128, __n128))(*v13 + v11);
  a9.n128_u64[0] = *a3;
  a10.n128_u64[0] = *a6;
  a8.n128_u64[0] = *a2;
  return v11(v13, *a4, v10 != 0, *a7, a8, a9, a10);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerESE_SL_(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[24];
  int id;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v29, a3);
  v32 = 0;
  v16 = operator new(0x28uLL);
  *v16 = &off_1E69BD9E8;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v16 + 1), (uint64_t)v29);
  v32 = v16;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v24 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v25 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v26 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v27 = vp::vx::data_flow::State_Transaction::get_id(a8);
  v28 = vp::vx::data_flow::State_Transaction::get_id(a9);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v31, (uint64_t)v22);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State(v22);
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
    goto LABEL_10;
  }
  if (v30)
  {
    v20 = 5;
LABEL_10:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  return a1;
}

void sub_1B6060088(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BD9E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BD9E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BD9E8;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B6060200(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BD9E8;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEJLm0ELm1ELm2ELm3ELm4ELm5EEEEDaRKSE_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEJLm0ELm1ELm2ELm3ELm4ELm5EEEEDaRKSE_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t (****v5)();
  double *v6;
  uint64_t (****v7)();
  int *v8;
  uint64_t (****v9)();
  char *v10;
  uint64_t (****v11)();
  double *v12;
  int *v13;

  if (*(uint64_t (****)())(*(_QWORD *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  else
    v4 = 0;
  v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  else
    v6 = 0;
  v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id)
    v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  else
    v8 = 0;
  v9 = *(uint64_t (*****)())(a2 + 24);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id)
    v10 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  else
    v10 = 0;
  v11 = *(uint64_t (*****)())(a2 + 32);
  if (v11[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id)
    v12 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  else
    v12 = 0;
  v13 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 40));
  return std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::operator()(a1, *v8, *v10, *v13, *v4, *v6, *v12);
}

uint64_t std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::operator()(uint64_t a1, int a2, char a3, int a4, double a5, double a6, double a7)
{
  uint64_t v7;
  int v9;
  double v10;
  char v11;
  int v12;
  double v13;
  double v14;

  v13 = a6;
  v14 = a5;
  v12 = a2;
  v11 = a3;
  v10 = a7;
  v9 = a4;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, double *, double *, int *, char *, double *, int *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v21, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE((uint64_t)v20, v16, (uint64_t)v21, a3, a4, a5, a6, a7, a8);
  v17 = v22;
  if (v22 == v21)
  {
    v18 = 4;
    v17 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v18 = 5;
LABEL_5:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v20);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v20);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)6>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[24];
  _BYTE v5[40];

  v2 = (_QWORD *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 6u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60605DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[24];
  int id;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v29, a3);
  v32 = 0;
  v16 = operator new(0x28uLL);
  *v16 = &off_1E69BDA30;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v16 + 1), (uint64_t)v29);
  v32 = v16;
  id = vp::vx::data_flow::State_Transaction::get_id(a4);
  v24 = vp::vx::data_flow::State_Transaction::get_id(a5);
  v25 = vp::vx::data_flow::State_Transaction::get_id(a6);
  v26 = vp::vx::data_flow::State_Transaction::get_id(a7);
  v27 = vp::vx::data_flow::State_Transaction::get_id(a8);
  v28 = vp::vx::data_flow::State_Transaction::get_id(a9);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v31, (uint64_t)v22);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State(v22);
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
    goto LABEL_10;
  }
  if (v30)
  {
    v20 = 5;
LABEL_10:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  return a1;
}

void sub_1B6060790(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BDA30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BDA30;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BDA30;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B60608A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BDA30;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(a1 + 8, a2, a3);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string v4;
  std::string v5;
  std::string __p;
  std::string v7;
  uint64_t v8;

  v1 = **a1;
  v8 = v1;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v7, (char *)(v1 + 368));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v2 = *(unsigned __int8 *)(v1 + 416);
  if (*(_BYTE *)(v1 + 416))
    v2 = *(unsigned int *)(v1 + 412);
  caulk::make_string((caulk *)"AID%u", (uint64_t)&v5, v2);
  __p = v5;
  memset(&v5, 0, sizeof(v5));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  v3 = *(unsigned __int8 *)(v1 + 396);
  if (*(_BYTE *)(v1 + 396))
    v3 = *(unsigned int *)(v1 + 392);
  caulk::make_string((caulk *)"CFG%u", (uint64_t)&v4, v3);
  v5 = v4;
  memset(&v4, 0, sizeof(v4));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v4, "Generic");
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1B6060AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::file_status vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  std::__fs::filesystem::file_status result;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  std::string __p;
  std::__fs::filesystem::path v9;
  std::__fs::filesystem::path v10;
  std::error_code __ec;

  v3 = (_QWORD *)*a1;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)a2, (uint64_t)(v3 + 36), &v9);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&__p, "VPVX");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v9, &v10);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::__fs::filesystem::path *)a2 = v10;
  *((_BYTE *)&v10.__pn_.__r_.__value_.__s + 23) = 0;
  v10.__pn_.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  result = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, &__ec);
  if (v10.__pn_.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    result = (std::__fs::filesystem::file_status)std::system_category();
    __ec.__cat_ = (const std::error_category *)result;
    if (v10.__pn_.__r_.__value_.__s.__data_[0])
    {
      if (v10.__pn_.__r_.__value_.__s.__data_[0] != 255 && !__ec.__val_)
      {
        result = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, &__ec);
        if (v10.__pn_.__r_.__value_.__s.__data_[0] == 2 && !__ec.__val_)
        {
          v5 = v3[80];
          v6 = (__n128 *)(v3[79] + 24 * v5);
          if (v5 == v3[81])
          {
            boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(v3 + 78, v6, (const char *)1, (__n128 *)a2, &v10);
            return (std::__fs::filesystem::file_status)boost::container::vec_iterator<std::__fs::filesystem::path *,false>::operator*((uint64_t *)&v10);
          }
          else
          {
            v7 = *(__n128 *)a2;
            v6[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
            *v6 = v7;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            *(_QWORD *)a2 = 0;
            ++v3[80];
          }
        }
      }
    }
  }
  return result;
}

void sub_1B6060C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(_QWORD *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 24 * v11, 8);
  boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
}

void boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  __n128 *v10;
  uint64_t i;
  uint64_t v12;

  v10 = (__n128 *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>((uint64_t)a1, v10, a4, (__n128 *)((char *)v10 + 24 * a1[2]), a2, a5, a6);
  if (v10)
  {
    for (i = a1[2]; i; --i)
    {
      if (v10[1].n128_i8[7] < 0)
        operator delete((void *)v10->n128_u64[0]);
      v10 = (__n128 *)((char *)v10 + 24);
    }
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  }
  v12 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v12;
  a1[3] = a3;
}

void sub_1B6060E30(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  if (v2)
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(v1, v2);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  uint64_t v7;
  __n128 v8;
  __n128 result;
  __n128 *v10;

  v7 = a5;
  if (a2 != a3)
  {
    v7 = a5;
    do
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = a2[1].n128_u64[0];
      *(__n128 *)v7 = v8;
      v7 += 24;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      a2 = (__n128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  result = *a7;
  *(_QWORD *)(v7 + 16) = a7[1].n128_u64[0];
  *(__n128 *)v7 = result;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  a7->n128_u64[0] = 0;
  if (a3 != a4)
  {
    v10 = (__n128 *)(v7 + 24);
    do
    {
      result = *a3;
      v10[1].n128_u64[0] = a3[1].n128_u64[0];
      *v10 = result;
      v10 = (__n128 *)((char *)v10 + 24);
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      a3->n128_u64[0] = 0;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1B6060F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_commands(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  vp::vx::Voice_Processor *v1;
  _QWORD *v2;
  uint64_t (***v3)();
  uint64_t v4;
  _BYTE v6[24];
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];
  _DWORD v11[6];
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  uint64_t (**v16)();
  char v17;
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = (_QWORD *)((char *)v1 + 8);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*((_QWORD *)v1 + 1) + 16))(&v16, (_QWORD *)v1 + 1, 54);
  vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  v16 = &off_1E69BDA78;
  v17 = 0;
  v18 = &v16;
  v11[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v12);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v16, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  v3 = v18;
  if (v18 == &v16)
  {
    v4 = 4;
    v3 = &v16;
    goto LABEL_5;
  }
  if (v18)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  vp::vx::data_flow::State<void>::State((uint64_t)v15, (uint64_t)v13);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6265616Du, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  vp::vx::Voice_Processor::get_uplink_mic_ref_delay_milliseconds(v1, (uint64_t)v13);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v13, (uint64_t)v1 + 16, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)&v16);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6D72646Du, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v2 + 16))(&v16, v2, 3);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v11, (uint64_t)v1 + 16, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v12);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x756C766Du, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v2 + 16))(&v16, v2, 4);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v10, (uint64_t)v1 + 16, (uint64_t)v11);
  vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v11);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C766Du, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v2 + 16))(&v16, v2, 60);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v9, (uint64_t)v1 + 16, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v10);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C7376u, (uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::Voice_Processor::get_downlink_software_volume_pre_gain_dB(v1, (uint64_t)v9);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v9, (uint64_t)v1 + 16, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)&v16);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C7367u, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v2 + 16))(&v16, v2, 61);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v7, (uint64_t)v1 + 16, (uint64_t)v8);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v8);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C6876u, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor::create_camera_noise_mitigation_is_required_state(v1, (uint64_t)v7);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v7, (uint64_t)v1 + 16, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)&v16);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x636E6D72u, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v2 + 16))(&v16, v2, 78);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State(&v16);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v6, (uint64_t)v1 + 16, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)&v16, (uint64_t)v7);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6D637376u, (uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1B6061450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  vp::vx::data_flow::State<void>::~State(v2 - 88);
  vp::vx::data_flow::State<void>::~State((uint64_t)va1);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BDAC0;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BDB08;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BDA78;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BDA78;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  float v4;
  std::pmr *v5;
  float *result;

  v3 = *a3;
  v4 = (float)*(int *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BDAC0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BDAC0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BDB08;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BDB08;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  float v4;
  std::pmr *v5;
  float *result;

  v3 = *a3;
  if (*(_BYTE *)vp::vx::data_flow::Value::view_storage(**a2))
    v4 = 1.0;
  else
    v4 = 0.0;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_delegates(void)::$_0>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  _BYTE v4[24];
  _BYTE v5[24];
  _BYTE v6[24];
  _QWORD v7[3];

  v1 = (_QWORD *)**a1;
  v2 = v1[1];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(v2 + 16))(v7, ++v1, 72);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v4, (uint64_t)(v1 + 1), (uint64_t)v5);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v5);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)(v1 + 156), 0x64766F72u, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*v1 + 16))(v7, v1, 73);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v4, (uint64_t)(v1 + 1), (uint64_t)v5);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v5);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)(v1 + 156), 0x75696F72u, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B6061ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  vp::vx::data_flow::State<void>::~State(v12 - 56);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a12);
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  _DWORD v8[8];
  _BYTE v9[24];
  uint64_t (**v10)();
  char v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 48;
  v10 = &off_1E69BDB50;
  v11 = 0;
  v12 = &v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  v5 = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    v5 = &v10;
    goto LABEL_5;
  }
  if (v12)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_BYTE *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69BDB50;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69BDB50;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  float v4;
  std::pmr *v5;
  float *result;

  v3 = *a3;
  v4 = (float)*(unsigned int *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  result = (float *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_commands(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  vp::vx::Voice_Processor *v1;
  _BYTE v3[24];
  _BYTE v4[24];
  _QWORD v5[3];

  v1 = **a1;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*((_QWORD *)v1 + 1) + 16))(v5, (_QWORD *)v1 + 1, 68);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State(v5);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>((uint64_t)v1 + 1376, 0x63706D73u, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(v1, (uint64_t)v5);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>((uint64_t)v1 + 1376, 0x6E6D6465u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::Voice_Processor::get_other_audio_advanced_ducking_level(v1, (uint64_t)v3);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>((uint64_t)v1 + 1376, 0x6E6D646Cu, (uint64_t)v3);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v3);
}

void sub_1B6061D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  _BYTE v7[28];
  unsigned int v8;
  uint64_t (**v9)();
  unsigned int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>;
  v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((_QWORD *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1B6061E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  _BYTE v7[28];
  unsigned int v8;
  uint64_t (**v9)();
  unsigned int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>;
  v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((_QWORD *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1B6061F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  _BYTE v7[28];
  unsigned int v8;
  uint64_t (**v9)();
  unsigned int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>;
  v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((_QWORD *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1B6062070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  *(_QWORD *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  v5 = v8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1B6626050;
  v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1B6062210(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(v10, (uint64_t)a1, a2, a3);
  v9 = 1;
  v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

uint64_t std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
}

uint64_t vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  return a1;
}

uint64_t `virtual thunk to'vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
}

_DWORD *vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _DWORD *v5;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = operator new(4uLL);
    *a3 = v5;
    *v5 = v4;
    result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  JUMPOUT(0x1BCC95CECLL);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  std::__shared_mutex_base *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  std::__shared_mutex_base *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v2 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2[1];
  if (!v3 || *(_QWORD *)(v3 + 8) == -1)
  {
    v13 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v13)
    {
      result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v13);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
    return result;
  }
  v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
  v5 = *a2;
  v6 = (unint64_t *)(v3 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = operator new(0x28uLL);
  *v8 = &off_1E69BDC78;
  v8[1] = v2;
  *((_DWORD *)v8 + 4) = v4;
  v8[3] = v5;
  v8[4] = v3;
  v18 = (std::__shared_mutex_base *)v8;
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v17);
  v22 = 0;
  v9 = operator new(0x28uLL);
  *v9 = &off_1E69BDC30;
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v19);
  v22 = v9;
  v10 = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
    goto LABEL_16;
  }
  if (v20)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v10;
  result = v18;
  if (v18 == (std::__shared_mutex_base *)v17)
  {
    v16 = 4;
    result = (std::__shared_mutex_base *)v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (std::__shared_mutex_base *)(*(uint64_t (**)(void))(result->__mut_.__m_.__sig + 8 * v16))();
}

void sub_1B6062628(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `virtual thunk to'vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BDC30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BDC30;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BDC30;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B60627A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BDC30;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BDC78;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BDC78;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BDC78;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  result[3] = *(_QWORD *)(a1 + 24);
  result[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BDC78;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, std::string::size_type *a2)
{
  vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

void vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}::operator()(uint64_t *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *log;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vp *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  unsigned int v18;
  int v19;
  std::string *p_p;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  void *v24;
  uint64_t v25;
  unsigned __int8 v26;
  _BYTE buf[12];
  __int16 v28;
  const char *v29;
  __int16 v30;
  std::string *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = *a1;
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[2];
      if (v8)
      {
        log = vp::get_log((vp *)v6);
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
            v10 = v5 + 48;
          else
            v10 = 0;
          v11 = &v24;
          vp::vx::io::get_log_context_info(v10, (uint64_t)"vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>]", 65, &v24);
          v12 = v26;
          v13 = v25;
          v15 = vp::get_log(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            if ((v12 & 0x80u) == 0)
              v16 = v12;
            else
              v16 = v13;
            if ((v26 & 0x80u) != 0)
              v11 = v24;
            if (v16)
              v17 = " ";
            else
              v17 = "";
            v18 = *((_DWORD *)a1 + 2);
            v19 = bswap32(v18);
            *(_DWORD *)&buf[1] = v19;
            if (((char)v19 - 32) > 0x5E
              || (((__int16)v19 >> 8) - 32) > 0x5E
              || ((v19 << 8 >> 24) - 32) > 0x5E
              || ((v19 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__p, v18);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__p, buf);
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v11;
            v28 = 2080;
            v29 = v17;
            v30 = 2080;
            v31 = p_p;
            _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", buf, 0x20u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((char)v26 < 0)
            operator delete(v24);
        }
        __p.__r_.__value_.__r.__words[0] = *a2;
        v24 = &__p;
        v25 = 8;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, void **))(*(_QWORD *)v8 + 40))(buf, v8, *((unsigned int *)a1 + 2), &v24);
        if (!v32)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B6062C30(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  char *v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69AB810;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = v6 + 24;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)a1 = off_1E69BDBC8;
  *(_QWORD *)(a1 + 48) = &unk_1E69BDC10;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), **(_QWORD **)a1, 72, 8);
  return a1;
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  void (**v15)();
  uint64_t v16;
  void (**v17)();
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v3 = a1[2];
  v14 = v2;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v17 = (void (**)())(v2 + 48 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(&v14, &v17, a2, &v13);
  v7 = v13;
  v8 = a1[1];
  v9 = a1[2];
  if (!v8 && v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v13 == (unsigned int *)(v8 + 48 * v9))
  {
    v10 = *a2;
LABEL_13:
    LODWORD(v14) = v10;
    v17 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    v15 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    v12 = v13;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v12, (uint64_t)&v14, (unint64_t *)&v13);
    v7 = v13;
    ((void (*)(uint64_t *))v15[3])(&v16);
    ((void (*)(_QWORD *))v17[3])(v18);
    if (!v7)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    return v7 + 2;
  }
  if (!v13)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v10 = *a2;
  if (*a2 < *v13)
    goto LABEL_13;
  return v7 + 2;
}

void sub_1B6062F2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 4);
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[12 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 12;
        *a1 = v8 + 12;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable(void)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(_QWORD *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
  v11 = v7;
  (*(void (**)(_QWORD *, uint64_t))(v7 + 16))(v12, a3 + 16);
  v9 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique(a1, &v9, &v10, a4);
  return (*(uint64_t (**)(_QWORD *))(v11 + 24))(v12);
}

void sub_1B6063168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique@<X0>(_QWORD *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t *result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;

  v5 = a1[1];
  if (v5 > (unint64_t)*a2)
    goto LABEL_14;
  v7 = a1[2];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)*a2 > v5 + 48 * v7)
LABEL_14:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v11 = *a2;
  v12 = 0;
  result = (uint64_t *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare((uint64_t)a1, &v11, a3, &v12);
  if ((_DWORD)result)
  {
    v13 = v12;
    return boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, (unint64_t *)&v13, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v12)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = (unint64_t)v12;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 result;
  uint64_t *v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;

  v4 = *(unsigned int **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = &v4[12 * v5];
  v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a3 >= *v10)
    {
      v18 = v9;
      v19 = v10;
      v16 = (uint64_t *)&v19;
      v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  v11 = *a2;
  if (*a2 == v4)
    return 1;
  if (!v11)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v14 = *(v11 - 12);
  v12 = v11 - 12;
  v13 = v14;
  if (v14 < *a3)
    return 1;
  if (*a3 < v13)
  {
    v21 = v4;
    v20 = v12;
    v16 = (uint64_t *)&v21;
    v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t *result;

  v5 = *a2;
  v6 = a1[1];
  if (v6 > v5)
    goto LABEL_11;
  v8 = a1[2];
  if (v6)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v5 > v6 + 48 * v8)
LABEL_11:
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, v5, a3);
  v10 = a1[3];
  if (v10 < v8)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, v5, a3);
  if (v10 == v8)
    return (uint64_t *)boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, (const char *)1, a3, a4);
  result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, 1, a3);
  *a4 = *a2;
  return result;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[2];
  if (v4 == a1[3])
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, a2, a3);
  v8 = a1[1];
  v9 = (_DWORD *)(v8 + 48 * v4);
  if (v9 == (_DWORD *)a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a4;
    v16 = v8 + 48 * v4;
    v17 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v16 + 8) = v17;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16 + 16, a4 + 16);
    ++a1[2];
  }
  else
  {
    v10 = (uint64_t *)(v9 - 12);
    *v9 = *(v9 - 12);
    v11 = v8 + 48 * v4;
    v12 = *((_QWORD *)v9 - 5);
    *((_QWORD *)v9 - 5) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v11 + 8) = v12;
    (*(void (**)(uint64_t, _DWORD *))(v12 + 16))(v11 + 16, v9 - 8);
    ++a1[2];
    if (v10 != (uint64_t *)a2)
    {
      v13 = v10;
      do
      {
        v14 = *((_DWORD *)v13 - 12);
        v13 -= 6;
        *(_DWORD *)v10 = v14;
        caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v10 + 1, v10 - 5);
        v10 = v13;
      }
      while (v13 != (uint64_t *)a2);
    }
    *(_DWORD *)a2 = *(_DWORD *)a4;
    return caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)(a2 + 8), (uint64_t *)(a4 + 8));
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >= 0x555555555555556)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 48 * v11, 8);
  result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>((uint64_t)a1, v10, a4, v10 + 48 * a1[2], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = v10 + 16;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v12);
        v12 += 48;
        --v11;
      }
      while (v11);
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 48 * a1[3], 8);
  }
  v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1B60637F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a3;
  if (a2 != a3)
  {
    do
    {
      v12 = a5;
      *(_DWORD *)a5 = *(_DWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
      *(_QWORD *)(a5 + 8) = v13;
      v14 = a2 + 16;
      v15 = a5 + 16;
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, a2 + 16);
      a2 = v14 + 32;
      a5 = v15 + 32;
    }
    while (v14 + 32 != v11);
    a5 = v12 + 48;
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_DWORD *)a5 = *(_DWORD *)a7;
  v16 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a7 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
  *(_QWORD *)(a5 + 8) = v16;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(a5 + 16, a7 + 16);
  v18 = a5 + 48;
  while (v11 != a4)
  {
    *(_DWORD *)v18 = *(_DWORD *)v11;
    v19 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v18 + 8) = v19;
    v20 = v11 + 16;
    v21 = v18 + 16;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18 + 16, v20);
    v11 = v20 + 32;
    v18 = v21 + 32;
  }
  return result;
}

void sub_1B606395C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 24))(v2 + 16);
    v3 = a1[1];
    v2 = *a1 + 48;
    *a1 = v2;
  }
  return a1;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), *(_QWORD *)a1, 48 * *(_QWORD *)(a1 + 16), 8);
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  *(_QWORD *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  v5 = v8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1B6626050;
  v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1B6063AFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(v10, (uint64_t)a1, a2, a3);
  v9 = 1;
  v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<BOOL> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(unsigned int const&,vp::vx::data_flow::State<BOOL> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

uint64_t vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  return a1;
}

uint64_t `virtual thunk to'vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
}

_DWORD *vp::vx::IO_Property_Setter_Command<BOOL>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _DWORD *v5;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = operator new(4uLL);
    *a3 = v5;
    *v5 = v4;
    result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  JUMPOUT(0x1BCC95CECLL);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  std::__shared_mutex_base *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  std::__shared_mutex_base *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v2 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2[1];
  if (!v3 || *(_QWORD *)(v3 + 8) == -1)
  {
    v13 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v13)
    {
      result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v13);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
    return result;
  }
  v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
  v5 = *a2;
  v6 = (unint64_t *)(v3 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = operator new(0x28uLL);
  *v8 = &off_1E69BDD80;
  v8[1] = v2;
  *((_DWORD *)v8 + 4) = v4;
  v8[3] = v5;
  v8[4] = v3;
  v18 = (std::__shared_mutex_base *)v8;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v17);
  v22 = 0;
  v9 = operator new(0x28uLL);
  *v9 = &off_1E69ABE68;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v19);
  v22 = v9;
  v10 = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
    goto LABEL_16;
  }
  if (v20)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v10;
  result = v18;
  if (v18 == (std::__shared_mutex_base *)v17)
  {
    v16 = 4;
    result = (std::__shared_mutex_base *)v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (std::__shared_mutex_base *)(*(uint64_t (**)(void))(result->__mut_.__m_.__sig + 8 * v16))();
}

void sub_1B6063ECC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `virtual thunk to'vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BDD80;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BDD80;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BDD80;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  result[3] = *(_QWORD *)(a1 + 24);
  result[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BDD80;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}::operator()((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}::operator()(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  std::__shared_weak_count *v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  NSObject *log;
  _BOOL8 v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  vp *v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  unsigned int v34;
  int v35;
  std::string *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _BYTE v39[16];
  std::string v40;
  void **v41;
  __int128 v42;
  uint64_t vars0;
  std::__shared_weak_count *vars8;

  a17 = *MEMORY[0x1E0C80C00];
  v18 = (std::__shared_weak_count *)a1[3];
  if (v18)
  {
    v20 = *a1;
    v21 = std::__shared_weak_count::lock(v18);
    vars8 = v21;
    if (v21)
    {
      v22 = v21;
      v23 = a1[2];
      vars0 = v23;
      if (v23)
      {
        log = vp::get_log((vp *)v21);
        v25 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v20)
            v26 = v20 + 48;
          else
            v26 = 0;
          v27 = (void **)&v41;
          vp::vx::io::get_log_context_info(v26, (uint64_t)"vp::vx::IO_Property_Setter_Command<BOOL>]", 40, &v41);
          v28 = HIBYTE(v42);
          v29 = v42;
          v31 = vp::get_log(v30);
          v25 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            if ((v28 & 0x80u) == 0)
              v32 = v28;
            else
              v32 = v29;
            if (v42 < 0)
              v27 = v41;
            if (v32)
              v33 = " ";
            else
              v33 = "";
            v34 = *((_DWORD *)a1 + 2);
            v35 = bswap32(v34);
            *(_DWORD *)((char *)&a9 + 1) = v35;
            if (((char)v35 - 32) > 0x5E
              || (((__int16)v35 >> 8) - 32) > 0x5E
              || ((v35 << 8 >> 24) - 32) > 0x5E
              || ((v35 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v40, v34);
            }
            else
            {
              *(_WORD *)((char *)&a9 + 5) = 39;
              LOBYTE(a9) = 39;
              std::string::basic_string[abi:ne180100]<0>(&v40, (char *)&a9);
            }
            v36 = &v40;
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
            LODWORD(a9) = 136315650;
            *(_QWORD *)((char *)&a9 + 4) = v27;
            WORD6(a9) = 2080;
            *(_QWORD *)((char *)&a9 + 14) = v33;
            a12 = 2080;
            a13 = v36;
            _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", (uint8_t *)&a9, 0x20u);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v42) < 0)
            operator delete(v41);
        }
        MEMORY[0x1E0C80A78](v25);
        v41 = (void **)((unint64_t)v39 & 0xFFFFFFFFFFFFFFC0);
        v42 = xmmword_1B6625170;
        vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)&v41 + 2, *a2);
        vp::Blob::Blob(&v40, (const void *)((unint64_t)v39 & 0xFFFFFFFFFFFFFFC0), *((uint64_t *)&v42 + 1));
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, std::string *))(*(_QWORD *)v23 + 40))(&a9, v23, *((unsigned int *)a1 + 2), &v40);
        if (!a16)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&a9);
      }
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1B6064368(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  char *v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69AB810;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = v6 + 24;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)a1 = off_1E69BDD18;
  *(_QWORD *)(a1 + 48) = &unk_1E69BDD60;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<BOOL> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(unsigned int const&,vp::vx::data_flow::State<BOOL> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), **(_QWORD **)a1, 72, 8);
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  *(_QWORD *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  v5 = v8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1B6626050;
  v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1B60645A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(v10, (uint64_t)a1, a2, a3);
  v9 = 1;
  v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

uint64_t vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  return a1;
}

uint64_t `virtual thunk to'vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
}

_DWORD *vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _DWORD *v5;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = operator new(4uLL);
    *a3 = v5;
    *v5 = v4;
    result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  JUMPOUT(0x1BCC95CECLL);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  std::__shared_mutex_base *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  std::__shared_mutex_base *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v2 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2[1];
  if (!v3 || *(_QWORD *)(v3 + 8) == -1)
  {
    v13 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v13)
    {
      result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v13);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
    return result;
  }
  v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
  v5 = *a2;
  v6 = (unint64_t *)(v3 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = operator new(0x28uLL);
  *v8 = &off_1E69BDEA8;
  v8[1] = v2;
  *((_DWORD *)v8 + 4) = v4;
  v8[3] = v5;
  v8[4] = v3;
  v18 = (std::__shared_mutex_base *)v8;
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v17);
  v22 = 0;
  v9 = operator new(0x28uLL);
  *v9 = &off_1E69BDE60;
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v19);
  v22 = v9;
  v10 = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
    goto LABEL_16;
  }
  if (v20)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v10;
  result = v18;
  if (v18 == (std::__shared_mutex_base *)v17)
  {
    v16 = 4;
    result = (std::__shared_mutex_base *)v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (std::__shared_mutex_base *)(*(uint64_t (**)(void))(result->__mut_.__m_.__sig + 8 * v16))();
}

void sub_1B6064978(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `virtual thunk to'vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(_QWORD *a1)
{
  char *v1;
  int v2;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 6) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BDE60;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BDE60;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BDE60;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B6064B5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BDE60;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int a2, vp::vx::data_flow::Value *this)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 24))
    v3 = *((_QWORD *)this + 2) == (_QWORD)&vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingLevel>(void)::s_type_id;
  else
    v3 = 0;
  if (v3)
  {
    v4 = result;
    result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)(v4 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5);
    }
  }
  return result;
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BDEA8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BDEA8;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BDEA8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  result[3] = *(_QWORD *)(a1 + 24);
  result[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E69BDEA8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}::operator()((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}::operator()(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  std::__shared_weak_count *v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  NSObject *log;
  _BOOL8 v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  vp *v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  unsigned int v34;
  int v35;
  std::string *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _BYTE v39[16];
  std::string v40;
  void **v41;
  __int128 v42;
  uint64_t vars0;
  std::__shared_weak_count *vars8;

  a17 = *MEMORY[0x1E0C80C00];
  v18 = (std::__shared_weak_count *)a1[3];
  if (v18)
  {
    v20 = *a1;
    v21 = std::__shared_weak_count::lock(v18);
    vars8 = v21;
    if (v21)
    {
      v22 = v21;
      v23 = a1[2];
      vars0 = v23;
      if (v23)
      {
        log = vp::get_log((vp *)v21);
        v25 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v20)
            v26 = v20 + 48;
          else
            v26 = 0;
          v27 = (void **)&v41;
          vp::vx::io::get_log_context_info(v26, (uint64_t)"vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>]", 67, &v41);
          v28 = HIBYTE(v42);
          v29 = v42;
          v31 = vp::get_log(v30);
          v25 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            if ((v28 & 0x80u) == 0)
              v32 = v28;
            else
              v32 = v29;
            if (v42 < 0)
              v27 = v41;
            if (v32)
              v33 = " ";
            else
              v33 = "";
            v34 = *((_DWORD *)a1 + 2);
            v35 = bswap32(v34);
            *(_DWORD *)((char *)&a9 + 1) = v35;
            if (((char)v35 - 32) > 0x5E
              || (((__int16)v35 >> 8) - 32) > 0x5E
              || ((v35 << 8 >> 24) - 32) > 0x5E
              || ((v35 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v40, v34);
            }
            else
            {
              *(_WORD *)((char *)&a9 + 5) = 39;
              LOBYTE(a9) = 39;
              std::string::basic_string[abi:ne180100]<0>(&v40, (char *)&a9);
            }
            v36 = &v40;
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
            LODWORD(a9) = 136315650;
            *(_QWORD *)((char *)&a9 + 4) = v27;
            WORD6(a9) = 2080;
            *(_QWORD *)((char *)&a9 + 14) = v33;
            a12 = 2080;
            a13 = v36;
            _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", (uint8_t *)&a9, 0x20u);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v42) < 0)
            operator delete(v41);
        }
        MEMORY[0x1E0C80A78](v25);
        v41 = (void **)((unint64_t)v39 & 0xFFFFFFFFFFFFFFC0);
        v42 = xmmword_1B6625170;
        vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)&v41 + 2, *a2);
        vp::Blob::Blob(&v40, (const void *)((unint64_t)v39 & 0xFFFFFFFFFFFFFFC0), *((uint64_t *)&v42 + 1));
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, std::string *))(*(_QWORD *)v23 + 40))(&a9, v23, *((unsigned int *)a1 + 2), &v40);
        if (!a16)
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&a9);
      }
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1B60650A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  char *v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(_QWORD *)(a1 + 48) = &off_1E69AB7F0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69AB810;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = v6 + 24;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)a1 = off_1E69BDDF8;
  *(_QWORD *)(a1 + 48) = &unk_1E69BDE40;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), **(_QWORD **)a1, 72, 8);
  return a1;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_delegates(void)::$_0>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  _BYTE v4[24];
  _BYTE v5[24];
  _BYTE v6[24];
  _QWORD v7[3];

  v1 = (_QWORD *)**a1;
  v2 = v1[1];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(v2 + 16))(v7, ++v1, 75);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>((uint64_t)(v1 + 179), 0x73706D64u, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*v1 + 16))(v7, v1, 72);
  vp::vx::data_flow::State<void>::State((uint64_t)v5, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>((uint64_t)(v1 + 179), 0x64766F72u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*v1 + 16))(v7, v1, 73);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>((uint64_t)(v1 + 179), 0x75696F72u, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1B60652F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  _BYTE v7[28];
  unsigned int v8;
  uint64_t (**v9)();
  unsigned int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>;
  v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((_QWORD *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1B60653EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  _BYTE v7[28];
  unsigned int v8;
  uint64_t (**v9)();
  unsigned int v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>;
  v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((_QWORD *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1B60654F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  *(_QWORD *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  v5 = v8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1B6624B30;
  v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1B6065694(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 112, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>((uint64_t)a1, v10, a2, a3);
  v9 = 1;
  v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1B6065780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(uint64_t a1)
{
  int v2;
  uint64_t *v4;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = (uint64_t *)(a1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 96);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2;
  uint64_t *v4;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = (uint64_t *)(a1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 96);
  return a1;
}

{
  int v2;
  uint64_t *v4;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = (uint64_t *)(a1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 96);
  return MEMORY[0x1BCC95CEC](a1, 0x10A1C40E17A702ALL);
}

uint64_t `virtual thunk to'vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::~IO_Property_Setter_Delegate(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t *v4;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  v4 = (uint64_t *)(v1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 11) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 96));
}

{
  char *v1;
  int v2;
  uint64_t *v4;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  v4 = (uint64_t *)(v1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 11) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 96));
  return MEMORY[0x1BCC95CEC](v1, 0x10A1C40E17A702ALL);
}

_DWORD *vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _DWORD *v5;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = operator new(4uLL);
    *a3 = v5;
    *v5 = v4;
    result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(std::__shared_mutex_base *result, int a2)
{
  std::__shared_mutex_base *v2;
  _QWORD *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  std::__shared_mutex_base *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v2 = result;
  v17 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    v7 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v7)
    {
      result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v7);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
    return result;
  }
  if (a2)
    return result;
  v11[0] = &off_1E69BDFD8;
  v11[1] = result;
  v12 = (std::__shared_mutex_base *)v11;
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v11);
  v16 = 0;
  v3 = operator new(0x28uLL);
  *v3 = &off_1E69BDF90;
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v13);
  v16 = v3;
  v4 = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v15);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_14;
  }
  if (v14)
  {
    v9 = 5;
LABEL_14:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v4;
  result = v12;
  if (v12 == (std::__shared_mutex_base *)v11)
  {
    v10 = 4;
    result = (std::__shared_mutex_base *)v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (std::__shared_mutex_base *)(*(uint64_t (**)(void))(result->__mut_.__m_.__sig + 8 * v10))();
}

void sub_1B6065A88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::process(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD v6[6];
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10;

  if (!a2)
  {
    v4 = result;
    v9 = result + 80;
    v5 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(result + 80));
    v10 = v5;
    if (v5 && *(_BYTE *)(v4 + 84))
    {
      vp::Blob::Blob(v8, *(const void **)(v4 + 48), *(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a3 + 40))(v6, a3, *(unsigned int *)(v4 + 8), v8);
      if (!v7)
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
      *(_BYTE *)(v4 + 84) = 0;
    }
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
  return result;
}

uint64_t **std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 24))(v1[3], v2, v1[2] - v2, 1);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BDF90;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BDF90;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BDF90;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B6065DD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BDF90;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int a2, vp::vx::data_flow::Value *this)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 24))
    v3 = *((_QWORD *)this + 2) == (_QWORD)&vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  else
    v3 = 0;
  if (v3)
  {
    v4 = result;
    result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)(v4 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5);
    }
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BDFD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BDFD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  unint64_t v15;
  caulk::pooled_semaphore_mutex *v16;
  char v17;

  v3 = *a1;
  v16 = (caulk::pooled_semaphore_mutex *)(*a1 + 80);
  v4 = caulk::pooled_semaphore_mutex::try_lock(v16);
  v17 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 - *(_QWORD *)a2;
    if (v5 != *(_QWORD *)a2)
    {
      v7 = *(char **)(v3 + 48);
      v8 = *(_QWORD *)(v3 + 56) - (_QWORD)v7;
      v9 = v6 >= v8;
      v10 = v6 - v8;
      if (v10 != 0 && v9)
      {
        std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v10);
        v7 = *(char **)(v3 + 48);
      }
      else if (!v9)
      {
        *(_QWORD *)(v3 + 56) = &v7[v6];
      }
      vp::Mutable_Blob::Mutable_Blob(v14, v7, v6);
      vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>((uint64_t)v14 + 2, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      v11 = *(_QWORD *)(v3 + 48);
      v12 = *(_QWORD *)(v3 + 56) - v11;
      if (v15 <= v12)
      {
        if (v15 < v12)
          *(_QWORD *)(v3 + 56) = v11 + v15;
      }
      else
      {
        std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v15 - v12);
      }
      *(_BYTE *)(v3 + 84) = 1;
    }
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
}

void sub_1B606604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::byte,vp::Allocator<std::byte>>::__append(uint64_t *a1, size_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t *v24;

  v6 = a1 + 1;
  result = (char *)a1[1];
  v5 = v6[1];
  if (v5 - (uint64_t)result >= a2)
  {
    if (a2)
    {
      v12 = &result[a2];
      bzero(result, a2);
      result = v12;
    }
    a1[1] = (uint64_t)result;
  }
  else
  {
    v7 = &result[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *a1;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v24 = a1 + 3;
    if (v10)
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], v10, 1);
    else
      v11 = 0;
    v13 = &v7[v11];
    v14 = v11 + v10;
    v23 = v14;
    v15 = &v13[a2];
    bzero(v13, a2);
    v22.i64[1] = (uint64_t)&v13[a2];
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_BYTE *)--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v15 = (char *)v22.i64[1];
      v14 = v23;
    }
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v15;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v14;
    v23 = v20;
    v21 = v19.i64[0];
    return (char *)std::__split_buffer<std::byte,vp::Allocator<std::byte> &>::~__split_buffer((uint64_t)&v21);
  }
  return result;
}

uint64_t std::__split_buffer<std::byte,vp::Allocator<std::byte> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v2)
    *(_QWORD *)(a1 + 16) = v2;
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1, 1);
  return a1;
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  _BYTE v7[24];

  v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::IO_Property_Setter_Delegate(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::IO_Property_Setter_Delegate(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  std::pmr *v7;
  uint64_t v9;
  _BYTE v10[24];

  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69AB810;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = v6 + 24;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)a1 = off_1E69BDF20;
  *(_QWORD *)(a1 + 88) = &unk_1E69BDF70;
  *(_DWORD *)(a1 + 8) = a2;
  v7 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = std::pmr::get_default_resource(v7);
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 80));
  *(_BYTE *)(a1 + 84) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    v9 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return a1;
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), **(_QWORD **)a1, 112, 8);
  return a1;
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  void (**v15)();
  uint64_t v16;
  void (**v17)();
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v3 = a1[2];
  v14 = v2;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v17 = (void (**)())(v2 + 48 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(&v14, &v17, a2, &v13);
  v7 = v13;
  v8 = a1[1];
  v9 = a1[2];
  if (!v8 && v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v13 == (unsigned int *)(v8 + 48 * v9))
  {
    v10 = *a2;
LABEL_13:
    LODWORD(v14) = v10;
    v17 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    v15 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    v12 = v13;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v12, (uint64_t)&v14, (unint64_t *)&v13);
    v7 = v13;
    ((void (*)(uint64_t *))v15[3])(&v16);
    ((void (*)(_QWORD *))v17[3])(v18);
    if (!v7)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    return v7 + 2;
  }
  if (!v13)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v10 = *a2;
  if (*a2 < *v13)
    goto LABEL_13;
  return v7 + 2;
}

void sub_1B606656C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 4);
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[12 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 12;
        *a1 = v8 + 12;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable(void)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(_QWORD *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
  v11 = v7;
  (*(void (**)(_QWORD *, uint64_t))(v7 + 16))(v12, a3 + 16);
  v9 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique(a1, &v9, &v10, a4);
  return (*(uint64_t (**)(_QWORD *))(v11 + 24))(v12);
}

void sub_1B60667A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique@<X0>(_QWORD *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t *result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;

  v5 = a1[1];
  if (v5 > (unint64_t)*a2)
    goto LABEL_14;
  v7 = a1[2];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)*a2 > v5 + 48 * v7)
LABEL_14:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v11 = *a2;
  v12 = 0;
  result = (uint64_t *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare((uint64_t)a1, &v11, a3, &v12);
  if ((_DWORD)result)
  {
    v13 = v12;
    return boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, (unint64_t *)&v13, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v12)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = (unint64_t)v12;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 result;
  uint64_t *v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;

  v4 = *(unsigned int **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = &v4[12 * v5];
  v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a3 >= *v10)
    {
      v18 = v9;
      v19 = v10;
      v16 = (uint64_t *)&v19;
      v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  v11 = *a2;
  if (*a2 == v4)
    return 1;
  if (!v11)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v14 = *(v11 - 12);
  v12 = v11 - 12;
  v13 = v14;
  if (v14 < *a3)
    return 1;
  if (*a3 < v13)
  {
    v21 = v4;
    v20 = v12;
    v16 = (uint64_t *)&v21;
    v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t *result;

  v5 = *a2;
  v6 = a1[1];
  if (v6 > v5)
    goto LABEL_11;
  v8 = a1[2];
  if (v6)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v5 > v6 + 48 * v8)
LABEL_11:
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, v5, a3);
  v10 = a1[3];
  if (v10 < v8)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, v5, a3);
  if (v10 == v8)
    return (uint64_t *)boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, (const char *)1, a3, a4);
  result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, 1, a3);
  *a4 = *a2;
  return result;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[2];
  if (v4 == a1[3])
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, a2, a3);
  v8 = a1[1];
  v9 = (_DWORD *)(v8 + 48 * v4);
  if (v9 == (_DWORD *)a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a4;
    v16 = v8 + 48 * v4;
    v17 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v16 + 8) = v17;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16 + 16, a4 + 16);
    ++a1[2];
  }
  else
  {
    v10 = (uint64_t *)(v9 - 12);
    *v9 = *(v9 - 12);
    v11 = v8 + 48 * v4;
    v12 = *((_QWORD *)v9 - 5);
    *((_QWORD *)v9 - 5) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v11 + 8) = v12;
    (*(void (**)(uint64_t, _DWORD *))(v12 + 16))(v11 + 16, v9 - 8);
    ++a1[2];
    if (v10 != (uint64_t *)a2)
    {
      v13 = v10;
      do
      {
        v14 = *((_DWORD *)v13 - 12);
        v13 -= 6;
        *(_DWORD *)v10 = v14;
        caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v10 + 1, v10 - 5);
        v10 = v13;
      }
      while (v13 != (uint64_t *)a2);
    }
    *(_DWORD *)a2 = *(_DWORD *)a4;
    return caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)(a2 + 8), (uint64_t *)(a4 + 8));
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >= 0x555555555555556)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 48 * v11, 8);
  result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>((uint64_t)a1, v10, a4, v10 + 48 * a1[2], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = v10 + 16;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v12);
        v12 += 48;
        --v11;
      }
      while (v11);
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a1[1], 48 * a1[3], 8);
  }
  v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1B6066E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a3;
  if (a2 != a3)
  {
    do
    {
      v12 = a5;
      *(_DWORD *)a5 = *(_DWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
      *(_QWORD *)(a5 + 8) = v13;
      v14 = a2 + 16;
      v15 = a5 + 16;
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, a2 + 16);
      a2 = v14 + 32;
      a5 = v15 + 32;
    }
    while (v14 + 32 != v11);
    a5 = v12 + 48;
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_DWORD *)a5 = *(_DWORD *)a7;
  v16 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a7 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
  *(_QWORD *)(a5 + 8) = v16;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(a5 + 16, a7 + 16);
  v18 = a5 + 48;
  while (v11 != a4)
  {
    *(_DWORD *)v18 = *(_DWORD *)v11;
    v19 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(_QWORD *)(v18 + 8) = v19;
    v20 = v11 + 16;
    v21 = v18 + 16;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18 + 16, v20);
    v11 = v20 + 32;
    v18 = v21 + 32;
  }
  return result;
}

void sub_1B6066F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 24))(v2 + 16);
    v3 = a1[1];
    v2 = *a1 + 48;
    *a1 = v2;
  }
  return a1;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), *(_QWORD *)a1, 48 * *(_QWORD *)(a1 + 16), 8);
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  *(_QWORD *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  v5 = v8;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1B6624B30;
  v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1B606713C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 112, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>((uint64_t)a1, v10, a2, a3);
  v9 = 1;
  v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<CAOrientation> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1B6067228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<CAOrientation> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2;
  uint64_t *v4;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = (uint64_t *)(a1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 96);
  return a1;
}

{
  int v2;
  uint64_t *v4;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = (uint64_t *)(a1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 96);
  return MEMORY[0x1BCC95CEC](a1, 0x10A1C40E17A702ALL);
}

uint64_t `virtual thunk to'vp::vx::IO_Property_Setter_Delegate<CAOrientation>::~IO_Property_Setter_Delegate(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t *v4;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  v4 = (uint64_t *)(v1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 11) = &off_1E69AB7F0;
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 96));
}

{
  char *v1;
  int v2;
  uint64_t *v4;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  v4 = (uint64_t *)(v1 + 48);
  std::vector<std::byte,vp::Allocator<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((_QWORD *)v1 + 11) = &off_1E69AB7F0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 96));
  return MEMORY[0x1BCC95CEC](v1, 0x10A1C40E17A702ALL);
}

_DWORD *vp::vx::IO_Property_Setter_Delegate<CAOrientation>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  _DWORD *v5;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v5 = operator new(4uLL);
    *a3 = v5;
    *v5 = v4;
    result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(std::__shared_mutex_base *result, int a2)
{
  std::__shared_mutex_base *v2;
  _QWORD *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  std::__shared_mutex_base *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v2 = result;
  v17 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    v7 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v7)
    {
      result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v7);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
    return result;
  }
  if (a2)
    return result;
  v11[0] = &off_1E69BE130;
  v11[1] = result;
  v12 = (std::__shared_mutex_base *)v11;
  std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v11);
  v16 = 0;
  v3 = operator new(0x28uLL);
  *v3 = &off_1E69BE0E8;
  std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v13);
  v16 = v3;
  v4 = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v15);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_14;
  }
  if (v14)
  {
    v9 = 5;
LABEL_14:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v4;
  result = v12;
  if (v12 == (std::__shared_mutex_base *)v11)
  {
    v10 = 4;
    result = (std::__shared_mutex_base *)v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (std::__shared_mutex_base *)(*(uint64_t (**)(void))(result->__mut_.__m_.__sig + 8 * v10))();
}

void sub_1B60674CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::process(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD v6[6];
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10;

  if (!a2)
  {
    v4 = result;
    v9 = result + 80;
    v5 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(result + 80));
    v10 = v5;
    if (v5 && *(_BYTE *)(v4 + 84))
    {
      vp::Blob::Blob(v8, *(const void **)(v4 + 48), *(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a3 + 40))(v6, a3, *(unsigned int *)(v4 + 8), v8);
      if (!v7)
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
      *(_BYTE *)(v4 + 84) = 0;
    }
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
  return result;
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BE0E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BE0E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E69BE0E8;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B6067774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BE0E8;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BE130;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BE130;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::operator()(uint64_t a1, int *a2)
{
  return vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}::operator()(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  unint64_t v11;
  caulk::pooled_semaphore_mutex *v12;
  char v13;

  v3 = *a1;
  v12 = (caulk::pooled_semaphore_mutex *)(*a1 + 80);
  v4 = caulk::pooled_semaphore_mutex::try_lock(v12);
  v13 = v4;
  if (v4)
  {
    v5 = *(char **)(v3 + 48);
    v6 = *(_QWORD *)(v3 + 56) - (_QWORD)v5;
    if (v6 > 3)
    {
      if (v6 != 4)
        *(_QWORD *)(v3 + 56) = v5 + 4;
    }
    else
    {
      std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), 4 - v6);
      v5 = *(char **)(v3 + 48);
    }
    vp::Mutable_Blob::Mutable_Blob(v10, v5, 4);
    vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)v10 + 2, *a2);
    v7 = *(_QWORD *)(v3 + 48);
    v8 = *(_QWORD *)(v3 + 56) - v7;
    if (v11 <= v8)
    {
      if (v11 < v8)
        *(_QWORD *)(v3 + 56) = v7 + v11;
    }
    else
    {
      std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v11 - v8);
    }
    *(_BYTE *)(v3 + 84) = 1;
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_1B6067978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  _BYTE v7[24];

  v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Property_Setter_Delegate<CAOrientation>::IO_Property_Setter_Delegate(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::IO_Property_Setter_Delegate(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  std::pmr *v7;
  uint64_t v9;
  _BYTE v10[24];

  *(_QWORD *)(a1 + 88) = &off_1E69AB7F0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69AB810;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(a1 + 96) = v6 + 24;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)a1 = off_1E69BE078;
  *(_QWORD *)(a1 + 88) = &unk_1E69BE0C8;
  *(_DWORD *)(a1 + 8) = a2;
  v7 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = std::pmr::get_default_resource(v7);
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 80));
  *(_BYTE *)(a1 + 84) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    v9 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return a1;
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<CAOrientation> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), **(_QWORD **)a1, 112, 8);
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_personal_audio_command(void)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v1 = **a1;
  if (!*(_BYTE *)(v1 + 2592))
  {
    vp::Service_Provider::get<vp::services::Personal_Audio,(decltype(nullptr))0>(*(_QWORD **)(v1 + 456), &v5);
    if ((_QWORD)v5)
      std::optional<vp::vx::IO_Personal_Audio_Command_Factory>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,void>((vp::vx::IO_Personal_Audio_Command_Factory *)(v1 + 2536), v1, v1, &v5);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_1B6067BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    std::pmr::polymorphic_allocator<vp::vx::components::Audio_Data_Analysis>::construct[abi:ne180100]<vp::vx::components::Audio_Data_Analysis,std::shared_ptr<vp::services::Audio_Data_Analysis> &,vp::Allocator<std::byte> &>();
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Personal_Audio,(decltype(nullptr))0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9[2];

  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"uaep", v9);
  v4 = a1[3];
  v5 = a1[4];
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    v8 = v9[1];
    *a2 = *((_QWORD *)v7 + 1);
    a2[1] = v8;
  }
}

vp::vx::IO_Personal_Audio_Command_Factory *std::optional<vp::vx::IO_Personal_Audio_Command_Factory>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,void>(vp::vx::IO_Personal_Audio_Command_Factory *this, uint64_t a2, uint64_t a3, __int128 *a4)
{
  if (*((_BYTE *)this + 56))
  {
    vp::vx::IO_Personal_Audio_Command_Factory::~IO_Personal_Audio_Command_Factory(this);
    *((_BYTE *)this + 56) = 0;
  }
  std::construct_at[abi:ne180100]<vp::vx::IO_Personal_Audio_Command_Factory,vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,vp::vx::IO_Personal_Audio_Command_Factory*>(this, a2, a3, a4);
  *((_BYTE *)this + 56) = 1;
  return this;
}

_QWORD *std::construct_at[abi:ne180100]<vp::vx::IO_Personal_Audio_Command_Factory,vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,vp::vx::IO_Personal_Audio_Command_Factory*>(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  v9 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  vp::vx::IO_Personal_Audio_Command_Factory::IO_Personal_Audio_Command_Factory(a1, (vp::vx::Voice_Processor_State_Manager *)(a2 + 16), a3 + 8, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>(vp **a1)
{
  vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0::operator()(*a1);
}

void vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0::operator()(vp *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *log;
  _BOOL4 v7;
  vp *log_context_info;
  std::string::size_type v9;
  std::string::size_type size;
  NSObject *v11;
  std::string::size_type v12;
  std::string *v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  __darwin_ct_rune_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t *v26;
  __n128 *v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  __n128 *v34;
  NSObject *v35;
  vp *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  NSObject *v39;
  std::string::size_type v40;
  std::string *v41;
  const char *v42;
  __n128 *v43;
  __n128 *v44;
  vp *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  NSObject *v48;
  std::string::size_type v49;
  std::string *v50;
  const char *v51;
  int v52;
  const char *v53;
  __n128 v54;
  __int128 v55;
  std::string v56;
  char v57;
  uint8_t buf[4];
  _BYTE v59[18];
  __int16 v60;
  _BYTE v61[14];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1 + 888;
  v3 = *(_QWORD *)a1 + 928;
  if (**((_DWORD **)a1 + 1))
    v4 = *(_QWORD *)a1 + 928;
  else
    v4 = *(_QWORD *)a1 + 888;
  v5 = *(_QWORD *)(v4 + 24);
  log = vp::get_log(a1);
  v7 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
      v9 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      size = v56.__r_.__value_.__l.__size_;
      v11 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if ((v9 & 0x80u) == 0)
          v12 = v9;
        else
          v12 = size;
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v56;
        else
          v13 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if (v12)
          v14 = " ";
        else
          v14 = "";
        v15 = **((_DWORD **)a1 + 1);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v59 = v13;
        *(_WORD *)&v59[8] = 2080;
        *(_QWORD *)&v59[10] = v14;
        if (v15)
          v16 = "downlink";
        else
          v16 = "uplink";
        v60 = 2080;
        *(_QWORD *)v61 = v16;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%s%sdetected %s configuration state changes", buf, 0x20u);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
    }
    v17 = **((_DWORD **)a1 + 1);
    if (v17)
      v18 = v3;
    else
      v18 = v2;
    if (v17)
      v19 = 100;
    else
      v19 = 117;
    v20 = __toupper(v19);
    v21 = v20;
    v22 = *(_QWORD *)(v18 + 24);
    v23 = 2 * v22;
    MEMORY[0x1E0C80A78](v20);
    v24 = &v54 - 2 * v22;
    if (v22)
    {
      v25 = &v54 - 2 * v22;
      do
      {
        v25->n128_u8[0] = 0;
        v25[1].n128_u8[8] = 0;
        v25 += 2;
      }
      while (v25 != &v54);
    }
    v26 = *(uint64_t **)(v18 + 16);
    if (v26)
    {
      v27 = &v54 - 2 * v22;
      do
      {
        *(_DWORD *)buf = *((_DWORD *)v26 + 4);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v59[4], (__int128 *)(v26 + 3));
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v56, (__int128 *)&v59[4]);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v27, (__n128 *)&v56);
        if (v57 && SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (v61[8] && (v61[7] & 0x80000000) != 0)
          operator delete(*(void **)&v59[4]);
        v26 = (uint64_t *)*v26;
        v27 += 2;
      }
      while (v26);
    }
    v28 = 126 - 2 * __clz(v22);
    if (v22)
      v29 = v28;
    else
      v29 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>((__int128 *)&v54 - 2 * v22, &v54, (uint64_t)buf, v29, 1);
    if (v22)
    {
      v54.n128_u64[1] = (unint64_t)&v54;
      v32 = v21;
      *(_QWORD *)&v31 = 136315906;
      v55 = v31;
      v33 = 32 * v22;
      v34 = &v54 - 2 * v22;
      do
      {
        if (v34[1].n128_u8[8])
        {
          v35 = vp::get_log((vp *)v30);
          v30 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          if (v30)
          {
            v36 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
            v37 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            v38 = v56.__r_.__value_.__l.__size_;
            v39 = vp::get_log(v36);
            v30 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            if (v30)
            {
              if ((v37 & 0x80u) == 0)
                v40 = v37;
              else
                v40 = v38;
              v41 = &v56;
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
              v42 = "";
              if (v40)
                v42 = " ";
              v43 = v34;
              if (v34[1].n128_i8[7] < 0)
                v43 = (__n128 *)v34->n128_u64[0];
              *(_DWORD *)buf = v55;
              *(_QWORD *)v59 = v41;
              *(_WORD *)&v59[8] = 2080;
              *(_QWORD *)&v59[10] = v42;
              v60 = 1024;
              *(_DWORD *)v61 = v32;
              *(_WORD *)&v61[4] = 2080;
              *(_QWORD *)&v61[6] = v43;
              _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEFAULT, "%s%s(%cL) %s", buf, 0x26u);
            }
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
          }
        }
        v34 += 2;
        v33 -= 32;
      }
      while (v33);
      do
      {
        v44 = &v24[v23];
        if (v24[v23 - 1].n128_u8[8])
        {
          if (v44[-1].n128_i8[7] < 0)
            operator delete((void *)v44[-2].n128_u64[0]);
        }
        v23 -= 2;
      }
      while (v23 * 16);
    }
  }
  else if (v7)
  {
    v45 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
    v46 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    v47 = v56.__r_.__value_.__l.__size_;
    v48 = vp::get_log(v45);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      if ((v46 & 0x80u) == 0)
        v49 = v46;
      else
        v49 = v47;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v56;
      else
        v50 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if (v49)
        v51 = " ";
      else
        v51 = "";
      v52 = **((_DWORD **)a1 + 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v59 = v50;
      *(_WORD *)&v59[8] = 2080;
      *(_QWORD *)&v59[10] = v51;
      if (v52)
        v53 = "downlink";
      else
        v53 = "uplink";
      v60 = 2080;
      *(_QWORD *)v61 = v53;
      _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEFAULT, "%s%sdetected no %s configuration state changes", buf, 0x20u);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
}

void sub_1B6068224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (v2)
  {
    do
    {
      v5 = v1 + v3;
      if (*(_BYTE *)(v1 + v3 - 8))
      {
        if (*(char *)(v5 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
      }
      v3 -= 32;
    }
    while (v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>(__int128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  BOOL v18;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)&a2[-2], (uint64_t)v9) & 0x80) != 0)
          std::optional<std::string>::swap[abi:ne180100](v9, (__int128 *)&a2[-2]);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9, v9 + 2, (__int128 *)&a2[-2]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9, v9 + 2, v9 + 4, (__int128 *)&a2[-2]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9, v9 + 2, v9 + 4, v9 + 6, (__int128 *)&a2[-2]);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((__n128 *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(&v9[2 * (v13 >> 1)], v9, (__int128 *)&a2[-2]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9, &v9[2 * (v13 >> 1)], (__int128 *)&a2[-2]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9 + 2, v15 - 2, (__int128 *)&a2[-4]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9 + 4, &v9[2 * v14 + 2], (__int128 *)&a2[-6]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            std::optional<std::string>::swap[abi:ne180100](v9, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)(v9 - 2), (uint64_t)v9) & 0x80) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>((uint64_t)v9, (__int128 *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>((uint64_t)v9, (unint64_t)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v16 + 2, (__int128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != (__int128 *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,std::optional<std::string> *>(v9, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v9 = (_DWORD *)(a2 - 8);
  v10 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v10;
    v11 = a2 - v10;
    v12 = (uint64_t)(a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return *(float *)&a5;
      case 2uLL:
        LODWORD(a5) = *v9;
        v39 = *(float *)v10;
        if (*(float *)v9 < *(float *)v10)
        {
          *(_DWORD *)v10 = LODWORD(a5);
          *(float *)(a2 - 8) = v39;
          LODWORD(a5) = *(_DWORD *)(v10 + 4);
          *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = LODWORD(a5);
        }
        return *(float *)&a5;
      case 3uLL:
        *(float *)&a5 = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
        return *(float *)&a5;
      case 4uLL:
        *(float *)&a5 = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)v10, v10 + 8, v10 + 16, a2 - 8);
        return *(float *)&a5;
      case 5uLL:
        *(float *)&a5 = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (float *)(v10 + 24), (float *)(a2 - 8));
        return *(float *)&a5;
      default:
        if (v11 <= 191)
        {
          v40 = v10 + 8;
          v42 = v10 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v10;
              do
              {
                v45 = v40;
                LODWORD(a5) = *(_DWORD *)(v44 + 8);
                v46 = *(float *)v44;
                if (*(float *)&a5 < *(float *)v44)
                {
                  v47 = *(_DWORD *)(v44 + 12);
                  v48 = v43;
                  while (1)
                  {
                    v49 = v10 + v48;
                    v50 = *(_DWORD *)(v10 + v48 + 4);
                    *(float *)(v49 + 8) = v46;
                    *(_DWORD *)(v49 + 12) = v50;
                    if (!v48)
                      break;
                    v46 = *(float *)(v49 - 8);
                    v48 -= 8;
                    if (*(float *)&a5 >= v46)
                    {
                      v51 = (_DWORD *)(v10 + v48 + 8);
                      goto LABEL_75;
                    }
                  }
                  v51 = (_DWORD *)v10;
LABEL_75:
                  *v51 = LODWORD(a5);
                  v51[1] = v47;
                }
                v40 = v45 + 8;
                v43 += 8;
                v44 = v45;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v42)
          {
            v78 = (float *)(v10 + 12);
            do
            {
              v79 = (float *)v40;
              *(float *)&a5 = a1[2];
              v80 = *a1;
              if (*(float *)&a5 < *a1)
              {
                v81 = *((_DWORD *)a1 + 3);
                v82 = v78;
                do
                {
                  v83 = v82;
                  *(v82 - 1) = v80;
                  v84 = *((_DWORD *)v82 - 2);
                  v82 -= 2;
                  *(_DWORD *)v83 = v84;
                  v80 = *(v83 - 5);
                }
                while (*(float *)&a5 < v80);
                *(v82 - 1) = *(float *)&a5;
                *(_DWORD *)v82 = v81;
              }
              v40 = (unint64_t)(v79 + 2);
              v78 += 2;
              a1 = v79;
            }
            while (v79 + 2 != (float *)a2);
          }
          return *(float *)&a5;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v52 = (v12 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = v10 + 8 * v55;
                if (2 * v54 + 2 < (uint64_t)v12 && *(float *)v56 < *(float *)(v56 + 8))
                {
                  v56 += 8;
                  v55 = 2 * v54 + 2;
                }
                v57 = v10 + 8 * v54;
                v58 = *(float *)v56;
                v59 = *(float *)v57;
                if (*(float *)v56 >= *(float *)v57)
                {
                  v60 = *(_DWORD *)(v57 + 4);
                  do
                  {
                    v61 = (float *)v57;
                    v57 = v56;
                    *v61 = v58;
                    v61[1] = *(float *)(v56 + 4);
                    if (v52 < v55)
                      break;
                    v62 = 2 * v55;
                    v55 = (2 * v55) | 1;
                    v56 = v10 + 8 * v55;
                    v63 = v62 + 2;
                    if (v63 < (uint64_t)v12 && *(float *)v56 < *(float *)(v56 + 8))
                    {
                      v56 += 8;
                      v55 = v63;
                    }
                    v58 = *(float *)v56;
                  }
                  while (*(float *)v56 >= v59);
                  *(float *)v57 = v59;
                  *(_DWORD *)(v57 + 4) = v60;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = (unint64_t)v11 >> 3;
            do
            {
              v65 = 0;
              v66 = *(float *)v10;
              LODWORD(a5) = *(_DWORD *)(v10 + 4);
              v67 = (_DWORD *)v10;
              do
              {
                v68 = v67;
                v67 += 2 * v65 + 2;
                v69 = 2 * v65;
                v65 = (2 * v65) | 1;
                v70 = v69 + 2;
                if (v70 < v64 && *(float *)v67 < *((float *)v67 + 2))
                {
                  v67 += 2;
                  v65 = v70;
                }
                *v68 = *v67;
                v68[1] = v67[1];
              }
              while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if (v67 == (_DWORD *)(a2 - 8))
              {
                *(float *)v67 = v66;
                v67[1] = LODWORD(a5);
              }
              else
              {
                *v67 = *(_DWORD *)(a2 - 8);
                v67[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v66;
                *(_DWORD *)(a2 - 4) = LODWORD(a5);
                v71 = (uint64_t)v67 - v10 + 8;
                if (v71 >= 9)
                {
                  v72 = (unint64_t)((v71 >> 3) - 2) >> 1;
                  v73 = (float *)(v10 + 8 * v72);
                  v74 = *v73;
                  LODWORD(a5) = *v67;
                  if (*v73 < *(float *)v67)
                  {
                    v75 = v67[1];
                    do
                    {
                      v76 = (float *)v67;
                      v67 = v73;
                      *v76 = v74;
                      v76[1] = v73[1];
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = (float *)(v10 + 8 * v72);
                      v74 = *v73;
                    }
                    while (*v73 < *(float *)&a5);
                    *v67 = LODWORD(a5);
                    v67[1] = v75;
                  }
                }
              }
              a2 -= 8;
            }
            while (v64-- > 2);
          }
          return *(float *)&a5;
        }
        v13 = v12 >> 1;
        v14 = (float *)(v10 + 8 * (v12 >> 1));
        if ((unint64_t)v11 < 0x401)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(&a1[2 * (v12 >> 1)], a1, (float *)(a2 - 8));
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, &a1[2 * (v12 >> 1)], (float *)(a2 - 8));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 2, v14 - 2, (float *)(a2 - 16));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 4, &a1[2 * v13 + 2], (float *)(a2 - 24));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(v14 - 2, v14, &a1[2 * v13 + 2]);
          v15 = *(double *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v14;
          *(double *)v14 = v15;
        }
        --a3;
        if ((a4 & 1) == 0 && *(a1 - 2) >= *a1)
        {
          a5 = *(double *)a1;
          if (COERCE_FLOAT(*(_QWORD *)a1) >= *(float *)v9)
          {
            v31 = a1 + 2;
            do
            {
              v10 = (unint64_t)v31;
              if ((unint64_t)v31 >= a2)
                break;
              ++v31;
            }
            while (*(float *)&a5 >= *(float *)v10);
          }
          else
          {
            v10 = (unint64_t)a1;
            do
            {
              v30 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (*(float *)&a5 >= v30);
          }
          v32 = (float *)a2;
          if (v10 < a2)
          {
            v32 = (float *)a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (*(float *)&a5 < v33);
          }
          if (v10 < (unint64_t)v32)
          {
            v34 = *(float *)v10;
            v35 = *v32;
            do
            {
              *(float *)v10 = v35;
              *v32 = v34;
              v36 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v32[1];
              *((_DWORD *)v32 + 1) = v36;
              do
              {
                v37 = *(float *)(v10 + 8);
                v10 += 8;
                v34 = v37;
              }
              while (*(float *)&a5 >= v37);
              do
              {
                v38 = *(v32 - 2);
                v32 -= 2;
                v35 = v38;
              }
              while (*(float *)&a5 < v38);
            }
            while (v10 < (unint64_t)v32);
          }
          if ((float *)(v10 - 8) != a1)
          {
            *a1 = *(float *)(v10 - 8);
            a1[1] = *(float *)(v10 - 4);
          }
          a4 = 0;
          *(double *)(v10 - 8) = a5;
          continue;
        }
        v16 = *(double *)a1;
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
          v20 = v19;
        }
        while (v19 < *(float *)&v16);
        v21 = (float *)a2;
        if (v18 == a1)
        {
          v21 = (float *)a2;
          do
          {
            if (v17 >= v21)
              break;
            v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= *(float *)&v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= *(float *)&v16);
        }
        if (v17 >= v21)
        {
          v10 = (unint64_t)v17;
        }
        else
        {
          v24 = *v21;
          v10 = (unint64_t)v17;
          v25 = v21;
          do
          {
            *(float *)v10 = v24;
            *v25 = v20;
            v26 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v25[1];
            *((_DWORD *)v25 + 1) = v26;
            do
            {
              v27 = *(float *)(v10 + 8);
              v10 += 8;
              v20 = v27;
            }
            while (v27 < *(float *)&v16);
            do
            {
              v28 = *(v25 - 2);
              v25 -= 2;
              v24 = v28;
            }
            while (v28 >= *(float *)&v16);
          }
          while (v10 < (unint64_t)v25);
        }
        if ((float *)(v10 - 8) != a1)
        {
          *a1 = *(float *)(v10 - 8);
          a1[1] = *(float *)(v10 - 4);
        }
        *(double *)(v10 - 8) = v16;
        if (v17 < v21)
        {
LABEL_31:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(a1, v10 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_((uint64_t)a1, v10 - 8);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_(v10, a2))
        {
          if (v29)
            continue;
          goto LABEL_31;
        }
        a2 = v10 - 8;
        if (!v29)
          goto LABEL_1;
        return *(float *)&a5;
    }
  }
}

  v9 = (_DWORD *)(a2 - 8);
  v10 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v10;
    v11 = a2 - v10;
    v12 = (uint64_t)(a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return *(float *)&a5;
      case 2uLL:
        LODWORD(a5) = *v9;
        v39 = *(float *)v10;
        if (*(float *)v9 < *(float *)v10)
        {
          *(_DWORD *)v10 = LODWORD(a5);
          *(float *)(a2 - 8) = v39;
          LODWORD(a5) = *(_DWORD *)(v10 + 4);
          *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = LODWORD(a5);
        }
        return *(float *)&a5;
      case 3uLL:
        *(float *)&a5 = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
        return *(float *)&a5;
      case 4uLL:
        *(float *)&a5 = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)v10, v10 + 8, v10 + 16, a2 - 8);
        return *(float *)&a5;
      case 5uLL:
        *(float *)&a5 = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (float *)(v10 + 24), (float *)(a2 - 8));
        return *(float *)&a5;
      default:
        if (v11 <= 191)
        {
          v40 = v10 + 8;
          v42 = v10 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v10;
              do
              {
                v45 = v40;
                LODWORD(a5) = *(_DWORD *)(v44 + 8);
                v46 = *(float *)v44;
                if (*(float *)&a5 < *(float *)v44)
                {
                  v47 = *(_DWORD *)(v44 + 12);
                  v48 = v43;
                  while (1)
                  {
                    v49 = v10 + v48;
                    v50 = *(_DWORD *)(v10 + v48 + 4);
                    *(float *)(v49 + 8) = v46;
                    *(_DWORD *)(v49 + 12) = v50;
                    if (!v48)
                      break;
                    v46 = *(float *)(v49 - 8);
                    v48 -= 8;
                    if (*(float *)&a5 >= v46)
                    {
                      v51 = (_DWORD *)(v10 + v48 + 8);
                      goto LABEL_75;
                    }
                  }
                  v51 = (_DWORD *)v10;
LABEL_75:
                  *v51 = LODWORD(a5);
                  v51[1] = v47;
                }
                v40 = v45 + 8;
                v43 += 8;
                v44 = v45;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v42)
          {
            v78 = (float *)(v10 + 12);
            do
            {
              v79 = (float *)v40;
              *(float *)&a5 = a1[2];
              v80 = *a1;
              if (*(float *)&a5 < *a1)
              {
                v81 = *((_DWORD *)a1 + 3);
                v82 = v78;
                do
                {
                  v83 = v82;
                  *(v82 - 1) = v80;
                  v84 = *((_DWORD *)v82 - 2);
                  v82 -= 2;
                  *(_DWORD *)v83 = v84;
                  v80 = *(v83 - 5);
                }
                while (*(float *)&a5 < v80);
                *(v82 - 1) = *(float *)&a5;
                *(_DWORD *)v82 = v81;
              }
              v40 = (unint64_t)(v79 + 2);
              v78 += 2;
              a1 = v79;
            }
            while (v79 + 2 != (float *)a2);
          }
          return *(float *)&a5;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v52 = (v12 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = v10 + 8 * v55;
                if (2 * v54 + 2 < (uint64_t)v12 && *(float *)v56 < *(float *)(v56 + 8))
                {
                  v56 += 8;
                  v55 = 2 * v54 + 2;
                }
                v57 = v10 + 8 * v54;
                v58 = *(float *)v56;
                v59 = *(float *)v57;
                if (*(float *)v56 >= *(float *)v57)
                {
                  v60 = *(_DWORD *)(v57 + 4);
                  do
                  {
                    v61 = (float *)v57;
                    v57 = v56;
                    *v61 = v58;
                    v61[1] = *(float *)(v56 + 4);
                    if (v52 < v55)
                      break;
                    v62 = 2 * v55;
                    v55 = (2 * v55) | 1;
                    v56 = v10 + 8 * v55;
                    v63 = v62 + 2;
                    if (v63 < (uint64_t)v12 && *(float *)v56 < *(float *)(v56 + 8))
                    {
                      v56 += 8;
                      v55 = v63;
                    }
                    v58 = *(float *)v56;
                  }
                  while (*(float *)v56 >= v59);
                  *(float *)v57 = v59;
                  *(_DWORD *)(v57 + 4) = v60;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = (unint64_t)v11 >> 3;
            do
            {
              v65 = 0;
              v66 = *(float *)v10;
              LODWORD(a5) = *(_DWORD *)(v10 + 4);
              v67 = (_DWORD *)v10;
              do
              {
                v68 = v67;
                v67 += 2 * v65 + 2;
                v69 = 2 * v65;
                v65 = (2 * v65) | 1;
                v70 = v69 + 2;
                if (v70 < v64 && *(float *)v67 < *((float *)v67 + 2))
                {
                  v67 += 2;
                  v65 = v70;
                }
                *v68 = *v67;
                v68[1] = v67[1];
              }
              while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if (v67 == (_DWORD *)(a2 - 8))
              {
                *(float *)v67 = v66;
                v67[1] = LODWORD(a5);
              }
              else
              {
                *v67 = *(_DWORD *)(a2 - 8);
                v67[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v66;
                *(_DWORD *)(a2 - 4) = LODWORD(a5);
                v71 = (uint64_t)v67 - v10 + 8;
                if (v71 >= 9)
                {
                  v72 = (unint64_t)((v71 >> 3) - 2) >> 1;
                  v73 = (float *)(v10 + 8 * v72);
                  v74 = *v73;
                  LODWORD(a5) = *v67;
                  if (*v73 < *(float *)v67)
                  {
                    v75 = v67[1];
                    do
                    {
                      v76 = (float *)v67;
                      v67 = v73;
                      *v76 = v74;
                      v76[1] = v73[1];
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = (float *)(v10 + 8 * v72);
                      v74 = *v73;
                    }
                    while (*v73 < *(float *)&a5);
                    *v67 = LODWORD(a5);
                    v67[1] = v75;
                  }
                }
              }
              a2 -= 8;
            }
            while (v64-- > 2);
          }
          return *(float *)&a5;
        }
        v13 = v12 >> 1;
        v14 = (float *)(v10 + 8 * (v12 >> 1));
        if ((unint64_t)v11 < 0x401)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(&a1[2 * (v12 >> 1)], a1, (float *)(a2 - 8));
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, &a1[2 * (v12 >> 1)], (float *)(a2 - 8));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 2, v14 - 2, (float *)(a2 - 16));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 4, &a1[2 * v13 + 2], (float *)(a2 - 24));
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(v14 - 2, v14, &a1[2 * v13 + 2]);
          v15 = *(double *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v14;
          *(double *)v14 = v15;
        }
        --a3;
        if ((a4 & 1) == 0 && *(a1 - 2) >= *a1)
        {
          a5 = *(double *)a1;
          if (COERCE_FLOAT(*(_QWORD *)a1) >= *(float *)v9)
          {
            v31 = a1 + 2;
            do
            {
              v10 = (unint64_t)v31;
              if ((unint64_t)v31 >= a2)
                break;
              ++v31;
            }
            while (*(float *)&a5 >= *(float *)v10);
          }
          else
          {
            v10 = (unint64_t)a1;
            do
            {
              v30 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (*(float *)&a5 >= v30);
          }
          v32 = (float *)a2;
          if (v10 < a2)
          {
            v32 = (float *)a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (*(float *)&a5 < v33);
          }
          if (v10 < (unint64_t)v32)
          {
            v34 = *(float *)v10;
            v35 = *v32;
            do
            {
              *(float *)v10 = v35;
              *v32 = v34;
              v36 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v32[1];
              *((_DWORD *)v32 + 1) = v36;
              do
              {
                v37 = *(float *)(v10 + 8);
                v10 += 8;
                v34 = v37;
              }
              while (*(float *)&a5 >= v37);
              do
              {
                v38 = *(v32 - 2);
                v32 -= 2;
                v35 = v38;
              }
              while (*(float *)&a5 < v38);
            }
            while (v10 < (unint64_t)v32);
          }
          if ((float *)(v10 - 8) != a1)
          {
            *a1 = *(float *)(v10 - 8);
            a1[1] = *(float *)(v10 - 4);
          }
          a4 = 0;
          *(double *)(v10 - 8) = a5;
          continue;
        }
        v16 = *(double *)a1;
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = v17[2];
          v17 += 2;
          v20 = v19;
        }
        while (v19 < *(float *)&v16);
        v21 = (float *)a2;
        if (v18 == a1)
        {
          v21 = (float *)a2;
          do
          {
            if (v17 >= v21)
              break;
            v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= *(float *)&v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= *(float *)&v16);
        }
        if (v17 >= v21)
        {
          v10 = (unint64_t)v17;
        }
        else
        {
          v24 = *v21;
          v10 = (unint64_t)v17;
          v25 = v21;
          do
          {
            *(float *)v10 = v24;
            *v25 = v20;
            v26 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v25[1];
            *((_DWORD *)v25 + 1) = v26;
            do
            {
              v27 = *(float *)(v10 + 8);
              v10 += 8;
              v20 = v27;
            }
            while (v27 < *(float *)&v16);
            do
            {
              v28 = *(v25 - 2);
              v25 -= 2;
              v24 = v28;
            }
            while (v28 >= *(float *)&v16);
          }
          while (v10 < (unint64_t)v25);
        }
        if ((float *)(v10 - 8) != a1)
        {
          *a1 = *(float *)(v10 - 8);
          a1[1] = *(float *)(v10 - 4);
        }
        *(double *)(v10 - 8) = v16;
        if (v17 < v21)
        {
LABEL_31:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(a1, v10 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_((uint64_t)a1, v10 - 8);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_(v10, a2))
        {
          if (v29)
            continue;
          goto LABEL_31;
        }
        a2 = v10 - 8;
        if (!v29)
          goto LABEL_1;
        return *(float *)&a5;
    }
  }
}

  v95 = a2 - 4;
  v96 = a2 - 2;
  v94 = a2 - 6;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = v11 >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if ((*a3)(v96, a1))
        {
          v41 = a1[1];
          v100 = *a1;
          v101 = v41;
          v42 = v96[1];
          *a1 = *v96;
          a1[1] = v42;
          result = *(double *)&v100;
          v43 = v101;
          *v96 = v100;
          v96[1] = v43;
        }
        return result;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(a1, a1 + 2, v96, a3);
        return result;
      case 4uLL:
        *(_QWORD *)&result = _ZNSt3__17__sort4B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEvT1_S9_S9_S9_T0_((uint64_t)a1, a1 + 2, a1 + 4, v96, a3).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = _ZNSt3__17__sort5B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEvT1_S9_S9_S9_S9_T0_((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, v96, a3).n128_u64[0];
        return result;
      default:
        if (v11 <= 767)
        {
          v44 = a1 + 2;
          v46 = a1 == a2 || v44 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = a1;
              do
              {
                v49 = v48;
                v48 = v44;
                if ((*a3)(v44, v49))
                {
                  v50 = v48[1];
                  v100 = *v48;
                  v101 = v50;
                  v51 = v47;
                  while (1)
                  {
                    v52 = (char *)a1 + v51;
                    v53 = *(__int128 *)((char *)a1 + v51 + 16);
                    *((_OWORD *)v52 + 2) = *(__int128 *)((char *)a1 + v51);
                    *((_OWORD *)v52 + 3) = v53;
                    if (!v51)
                      break;
                    v51 -= 32;
                    if (((*a3)(&v100, (__int128 *)((char *)a1 + v51)) & 1) == 0)
                    {
                      v54 = (__int128 *)((char *)a1 + v51 + 32);
                      goto LABEL_72;
                    }
                  }
                  v54 = a1;
LABEL_72:
                  result = *(double *)&v100;
                  v55 = v101;
                  *v54 = v100;
                  v54[1] = v55;
                }
                v44 = v48 + 2;
                v47 += 32;
              }
              while (v48 + 2 != a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v86 = a1;
              a1 = v44;
              if ((*a3)(v44, v86))
              {
                v87 = a1[1];
                v100 = *a1;
                v101 = v87;
                v88 = a1;
                do
                {
                  v89 = v88 - 2;
                  v90 = *(v88 - 1);
                  *v88 = *(v88 - 2);
                  v88[1] = v90;
                  v91 = (*a3)(&v100, v88 - 4);
                  v88 = v89;
                }
                while ((v91 & 1) != 0);
                result = *(double *)&v100;
                v92 = v101;
                *v89 = v100;
                v89[1] = v92;
              }
              v44 = a1 + 2;
            }
            while (a1 + 2 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v56 = (v12 - 2) >> 1;
            v97 = v56;
            v93 = a2;
            do
            {
              v57 = v56;
              if (v97 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &a1[2 * v58];
                if (2 * v56 + 2 < (uint64_t)v12 && (*a3)(&a1[2 * v58], v59 + 2))
                {
                  v59 += 2;
                  v58 = 2 * v57 + 2;
                }
                v60 = &a1[2 * v57];
                if (((*a3)(v59, v60) & 1) == 0)
                {
                  v61 = v60[1];
                  v100 = *v60;
                  v101 = v61;
                  do
                  {
                    v62 = v59;
                    v63 = v59[1];
                    *v60 = *v59;
                    v60[1] = v63;
                    if (v97 < v58)
                      break;
                    v64 = (2 * v58) | 1;
                    v59 = &a1[2 * v64];
                    v65 = 2 * v58 + 2;
                    if (v65 < (uint64_t)v12 && (*a3)(&a1[2 * v64], v59 + 2))
                    {
                      v59 += 2;
                      v64 = v65;
                    }
                    v60 = v62;
                    v58 = v64;
                  }
                  while (!(*a3)(v59, &v100));
                  v66 = v101;
                  *v62 = v100;
                  v62[1] = v66;
                  a2 = v93;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v67 = (unint64_t)v11 >> 5;
            do
            {
              v68 = 0;
              v69 = a1[1];
              v98 = *a1;
              v99 = v69;
              v70 = a1;
              do
              {
                v71 = &v70[2 * v68 + 2];
                v72 = (2 * v68) | 1;
                v73 = 2 * v68 + 2;
                if (v73 < v67 && (*a3)(&v70[2 * v68 + 2], &v70[2 * v68 + 4]))
                {
                  v71 += 2;
                  v72 = v73;
                }
                v74 = v71[1];
                *v70 = *v71;
                v70[1] = v74;
                v70 = v71;
                v68 = v72;
              }
              while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
              a2 -= 2;
              if (v71 == a2)
              {
                result = *(double *)&v98;
                v84 = v99;
                *v71 = v98;
                v71[1] = v84;
              }
              else
              {
                v75 = a2[1];
                *v71 = *a2;
                v71[1] = v75;
                result = *(double *)&v98;
                v76 = v99;
                *a2 = v98;
                a2[1] = v76;
                v77 = (char *)v71 - (char *)a1 + 32;
                if (v77 >= 33)
                {
                  v78 = (unint64_t)((v77 >> 5) - 2) >> 1;
                  v79 = &a1[2 * v78];
                  if ((*a3)(v79, v71))
                  {
                    v80 = v71[1];
                    v100 = *v71;
                    v101 = v80;
                    do
                    {
                      v81 = v79;
                      v82 = v79[1];
                      *v71 = *v79;
                      v71[1] = v82;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &a1[2 * v78];
                      v71 = v81;
                    }
                    while (((*a3)(v79, &v100) & 1) != 0);
                    result = *(double *)&v100;
                    v83 = v101;
                    *v81 = v100;
                    v81[1] = v83;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return result;
        }
        v13 = &a1[2 * (v12 >> 1)];
        if ((unint64_t)v11 <= 0x1000)
        {
          _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(&a1[2 * (v12 >> 1)], a1, v96, a3);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(a1, &a1[2 * (v12 >> 1)], v96, a3);
          _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(a1 + 2, v13 - 2, v95, a3);
          _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(a1 + 4, &a1[2 * (v12 >> 1) + 2], v94, a3);
          _ZNSt3__17__sort3B8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEjT1_S9_S9_T0_(v13 - 2, &a1[2 * (v12 >> 1)], &a1[2 * (v12 >> 1) + 2], a3);
          v14 = a1[1];
          v100 = *a1;
          v101 = v14;
          v15 = v13[1];
          *a1 = *v13;
          a1[1] = v15;
          v16 = v101;
          *v13 = v100;
          v13[1] = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(a1 - 2, a1) & 1) == 0)
        {
          v31 = a1[1];
          v98 = *a1;
          v99 = v31;
          if (((*a3)(&v98, v96) & 1) != 0)
          {
            v10 = a1;
            do
              v10 += 2;
            while (((*a3)(&v98, v10) & 1) == 0);
          }
          else
          {
            v32 = a1 + 2;
            do
            {
              v10 = v32;
              if (v32 >= a2)
                break;
              v33 = (*a3)(&v98, v32);
              v32 = v10 + 2;
            }
            while (!v33);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
              v34 -= 2;
            while (((*a3)(&v98, v34) & 1) != 0);
          }
          while (v10 < v34)
          {
            v35 = v10[1];
            v100 = *v10;
            v101 = v35;
            v36 = v34[1];
            *v10 = *v34;
            v10[1] = v36;
            v37 = v101;
            *v34 = v100;
            v34[1] = v37;
            do
              v10 += 2;
            while (!(*a3)(&v98, v10));
            do
              v34 -= 2;
            while (((*a3)(&v98, v34) & 1) != 0);
          }
          v38 = v10 - 2;
          if (v10 - 2 != a1)
          {
            v39 = *(v10 - 1);
            *a1 = *v38;
            a1[1] = v39;
          }
          a5 = 0;
          result = *(double *)&v98;
          v40 = v99;
          *v38 = v98;
          *(v10 - 1) = v40;
          continue;
        }
        v17 = a1[1];
        v98 = *a1;
        v99 = v17;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 += 2;
        }
        while (((*a3)(v18, &v98) & 1) != 0);
        v20 = a2;
        if (v19 == a1)
        {
          v20 = a2;
          do
          {
            if (v18 >= v20)
              break;
            v20 -= 2;
          }
          while (((*a3)(v20, &v98) & 1) == 0);
        }
        else
        {
          do
            v20 -= 2;
          while (!(*a3)(v20, &v98));
        }
        v21 = a2;
        if (v18 < v20)
        {
          v22 = v20;
          v23 = v18;
          do
          {
            v25 = v23[1];
            v100 = *v23;
            v24 = v100;
            v101 = v25;
            v26 = v22[1];
            *v23 = *v22;
            v23[1] = v26;
            *v22 = v24;
            v22[1] = v25;
            do
            {
              v19 = v23;
              v23 += 2;
            }
            while (((*a3)(v23, &v98) & 1) != 0);
            do
              v22 -= 2;
            while (!(*a3)(v22, &v98));
          }
          while (v23 < v22);
        }
        if (v19 != a1)
        {
          v27 = v19[1];
          *a1 = *v19;
          a1[1] = v27;
        }
        v28 = v99;
        *v19 = v98;
        v19[1] = v28;
        a2 = v21;
        if (v18 < v20)
        {
LABEL_29:
          _ZNSt3__111__introsortINS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_Lb0EEEvT1_S9_T0_NS_15iterator_traitsIS9_E15difference_typeEb(a1, v19, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v19 + 2;
          continue;
        }
        v29 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEbT1_S9_T0_(a1, v19, a3);
        v10 = v19 + 2;
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEbT1_S9_T0_(v19 + 2, v21, a3))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v19;
        if (!v29)
          goto LABEL_1;
        return result;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v4 = a1 + 32;
    if (a1 + 32 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4, v6) & 0x80) != 0)
        {
          LOBYTE(__p[0]) = 0;
          v12 = 0;
          if (*(_BYTE *)(v6 + 56))
          {
            *(_OWORD *)__p = *(_OWORD *)v7;
            v11 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v12 = 1;
          }
          v8 = v5;
          while (1)
          {
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v8 + 32, (__n128 *)(a1 + v8));
            if (!v8)
              break;
            v8 -= 32;
            if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, v8 + a1) & 0x80) == 0)
            {
              v9 = a1 + v8 + 32;
              goto LABEL_12;
            }
          }
          v9 = a1;
LABEL_12:
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v9, (__n128 *)__p);
          if (v12)
          {
            if (SHIBYTE(v11) < 0)
              operator delete(__p[0]);
          }
        }
        v4 = v7 + 32;
        v5 += 32;
        v6 = v7;
      }
      while (v7 + 32 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__n128 *a1, __n128 *a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 *v5;
  void *__p[2];
  unint64_t v7;
  char v8;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = (uint64_t)&a1[2];
    if (&a1[2] != a2)
    {
      do
      {
        v5 = (__n128 *)v4;
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4, (uint64_t)v3) & 0x80) != 0)
        {
          LOBYTE(__p[0]) = 0;
          v8 = 0;
          if (v3[3].n128_u8[8])
          {
            *(__n128 *)__p = *v5;
            v7 = v5[1].n128_u64[0];
            v5->n128_u64[1] = 0;
            v5[1].n128_u64[0] = 0;
            v5->n128_u64[0] = 0;
            v8 = 1;
          }
          do
          {
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v3[2], v3);
            v3 -= 2;
          }
          while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v3) & 0x80) != 0);
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v3[2], (__n128 *)__p);
          if (v8)
          {
            if (SHIBYTE(v7) < 0)
              operator delete(__p[0]);
          }
        }
        v4 = (uint64_t)&v5[2];
        v3 = v5;
      }
      while (&v5[2] != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  char v6;
  int v7;
  __int128 *v9;
  __int128 *v10;

  v6 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1);
  v7 = (char)std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2);
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a1, a3);
    }
    else
    {
      std::optional<std::string>::swap[abi:ne180100](a1, a2);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
      {
        v9 = a2;
        v10 = a3;
LABEL_9:
        std::optional<std::string>::swap[abi:ne180100](v9, v10);
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0)
      return 0;
    std::optional<std::string>::swap[abi:ne180100](a2, a3);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
    {
      v9 = a1;
      v10 = a2;
      goto LABEL_9;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>(uint64_t a1, __int128 *a2)
{
  __int128 *v2;
  unint64_t v4;
  __int128 *v5;
  char v6;
  void *__p[2];
  uint64_t v9;
  char v10;

  v2 = a2;
  LOBYTE(__p[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v10 = 1;
  }
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)(a2 - 2)) & 0x80) != 0)
  {
    v5 = (__int128 *)a1;
    do
      v5 += 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v5) & 0x80) == 0);
  }
  else
  {
    v4 = a1 + 32;
    do
    {
      v5 = (__int128 *)v4;
      if (v4 >= (unint64_t)v2)
        break;
      v6 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, v4);
      v4 = (unint64_t)(v5 + 2);
    }
    while ((v6 & 0x80) == 0);
  }
  if (v5 < v2)
  {
    do
      v2 -= 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v2) & 0x80) != 0);
  }
  while (v5 < v2)
  {
    std::optional<std::string>::swap[abi:ne180100](v5, v2);
    do
      v5 += 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v5) & 0x80) == 0);
    do
      v2 -= 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v2) & 0x80) != 0);
  }
  if (v5 - 2 != (__int128 *)a1)
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, (__n128 *)v5 - 2);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v5 - 2), (__n128 *)__p);
  if (v10 && SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return v5;
}

__n128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __int128 *v7;
  __int128 *v8;
  void *__p[2];
  uint64_t v11;
  char v12;

  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v12 = 1;
  }
  v4 = 0;
  do
    v4 += 32;
  while ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4 + a1, (uint64_t)__p) & 0x80) != 0);
  v5 = a1 + v4;
  v6 = (__n128 *)(a1 + v4 - 32);
  if (v4 == 32)
  {
    do
    {
      if (v5 >= a2)
        break;
      a2 -= 32;
    }
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>(a2, (uint64_t)__p) & 0x80) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>(a2, (uint64_t)__p) & 0x80) == 0);
  }
  if (v5 < a2)
  {
    v7 = (__int128 *)(a1 + v4);
    v8 = (__int128 *)a2;
    do
    {
      std::optional<std::string>::swap[abi:ne180100](v7, v8);
      do
        v7 += 2;
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v7, (uint64_t)__p) & 0x80) != 0);
      do
        v8 -= 2;
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)__p) & 0x80) == 0);
    }
    while (v7 < v8);
    v6 = (__n128 *)(v7 - 2);
  }
  if (v6 != (__n128 *)a1)
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, v6);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v6, (__n128 *)__p);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v14;
  char v15;

  v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)(a2 - 2), (uint64_t)a1) & 0x80) != 0)
        std::optional<std::string>::swap[abi:ne180100](a1, a2 - 2);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      v5 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4);
      v6 = (uint64_t)(a1 + 6);
      v4 = 1;
      if (a1 + 6 == a2)
        return v4;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v6, v5) & 0x80) != 0)
    {
      LOBYTE(__p[0]) = 0;
      v15 = 0;
      if (*(_BYTE *)(v6 + 24))
      {
        *(_OWORD *)__p = *(_OWORD *)v6;
        v14 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)v6 = 0;
        v15 = 1;
      }
      v9 = v7;
      while (1)
      {
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v9 + 96, (__n128 *)((char *)a1 + v9 + 64));
        if (v9 == -64)
          break;
        v10 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)a1 + v9 + 32);
        v9 -= 32;
        if ((v10 & 0x80) == 0)
        {
          v11 = (uint64_t)a1 + v9 + 96;
          goto LABEL_14;
        }
      }
      v11 = (uint64_t)a1;
LABEL_14:
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v11, (__n128 *)__p);
      if (v15 && SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      if (++v8 == 8)
        return v6 + 32 == (_QWORD)a2;
    }
    v5 = v6;
    v7 += 32;
    v6 += 32;
    if ((__int128 *)v6 == a2)
      return 1;
  }
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::string>(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, (void **)a2);
  v5 = v3 != 0;
  v4 = v2 == 0;
  v6 = v2 != 0;
  v7 = v4;
  if ((v5 & v7) != 0)
    v8 = -1;
  else
    v8 = 1;
  if (v6 != v5)
    return v8;
  else
    return 0;
}

void std::optional<std::string>::swap[abi:ne180100](__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  if ((*((_BYTE *)a1 + 24) != 0) != (*((_BYTE *)a2 + 24) != 0))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v4 = *a1;
      *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
      *a2 = v4;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *((_BYTE *)a2 + 24) = 1;
      if (*((_BYTE *)a1 + 24))
      {
        if (*((char *)a1 + 23) < 0)
          operator delete(*(void **)a1);
        *((_BYTE *)a1 + 24) = 0;
      }
    }
    else
    {
      v8 = *a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *a1 = v8;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *((_BYTE *)a1 + 24) = 1;
      if (*((_BYTE *)a2 + 24))
      {
        if (*((char *)a2 + 23) < 0)
          operator delete(*(void **)a2);
        *((_BYTE *)a2 + 24) = 0;
      }
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v5 = *((_QWORD *)a1 + 2);
    v6 = *a1;
    v7 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v7;
    *a2 = v6;
    *((_QWORD *)a2 + 2) = v5;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a4, (uint64_t)a3) & 0x80) != 0)
  {
    std::optional<std::string>::swap[abi:ne180100](a3, a4);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a2, a3);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
        std::optional<std::string>::swap[abi:ne180100](a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a5, (uint64_t)a4) & 0x80) != 0)
  {
    std::optional<std::string>::swap[abi:ne180100](a4, a5);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a4, (uint64_t)a3) & 0x80) != 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a3, a4);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
      {
        std::optional<std::string>::swap[abi:ne180100](a2, a3);
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
          std::optional<std::string>::swap[abi:ne180100](a1, a2);
      }
    }
  }
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,std::optional<std::string> *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v14, (uint64_t)a1) & 0x80) != 0)
        {
          std::optional<std::string>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 33)
    {
      v15 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void>,std::optional<std::string> *>((uint64_t)a1, v6, a4, v15);
        v6 -= 32;
      }
      while (v15-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      v9 = (a4 - a1) >> 4;
      v10 = v9 + 1;
      v11 = (__n128 *)(a1 + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && (std::operator<=>[abi:ne180100]<std::string,std::string>(a1 + 32 * (v9 + 1), (uint64_t)&v11[2]) & 0x80u) != 0)
      {
        v11 += 2;
        v10 = v12;
      }
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v11, v5) & 0x80) == 0)
      {
        LOBYTE(__p[0]) = 0;
        v18 = 0;
        if (*(_BYTE *)(v5 + 24))
        {
          *(_OWORD *)__p = *(_OWORD *)v5;
          v17 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)v5 = 0;
          v18 = 1;
        }
        do
        {
          v13 = (uint64_t)v11;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v5, v11);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = (__n128 *)(a1 + 32 * v14);
          v15 = 2 * v10 + 2;
          if (v15 < a3
            && (std::operator<=>[abi:ne180100]<std::string,std::string>(a1 + 32 * v14, (uint64_t)&v11[2]) & 0x80u) != 0)
          {
            v11 += 2;
            v14 = v15;
          }
          v5 = v13;
          v10 = v14;
        }
        while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v11, (uint64_t)__p) & 0x80) == 0);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v13, (__n128 *)__p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void>,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  void *__p[2];
  uint64_t v11;
  char v12;

  if (a4 >= 2)
  {
    LOBYTE(__p[0]) = 0;
    v12 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v11 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v12 = 1;
    }
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a3, a4);
    v8 = v7;
    v9 = (__n128 *)(a2 - 32);
    if (v7 == v9)
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v7, (__n128 *)__p);
    }
    else
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v7, v9);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v9, (__n128 *)__p);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, (uint64_t)&v8[2], a3, ((uint64_t)&v8[2] - a1) >> 5);
    }
    if (v12)
    {
      if (SHIBYTE(v11) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1B6069344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (__n128 *)(a1 + 32 * v5 + 32);
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3
      && (std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)&v8[2]) & 0x80u) != 0)
    {
      v8 += 2;
      v5 = v10;
    }
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, v8);
    a1 = (uint64_t)v8;
  }
  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  char v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__n128 *)(a1 + 32 * (v4 >> 1));
    v9 = a2 - 32;
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, a2 - 32) & 0x80) != 0)
    {
      LOBYTE(__p[0]) = 0;
      v13 = 0;
      if (*(_BYTE *)(a2 - 8))
      {
        *(_OWORD *)__p = *(_OWORD *)v9;
        v12 = *(_QWORD *)(v9 + 16);
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        v13 = 1;
      }
      do
      {
        v10 = (uint64_t)v8;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__n128 *)(a1 + 32 * v7);
        v9 = v10;
      }
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)__p) & 0x80) != 0);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v10, (__n128 *)__p);
      if (v13)
      {
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>(std::pmr *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t default_resource;
  int v4;
  std::pmr *v5;
  _QWORD v6[3];

  v1 = **(_QWORD **)a1;
  if (**(_DWORD **)(*(_QWORD *)a1 + 8))
    v2 = v1 + 832;
  else
    v2 = v1 + 808;
  default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v6, default_resource);
  vp::vx::data_flow::State<void>::get_value(v2, (vp::vx::data_flow::Value *)v6);
  v4 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  v6[0] = std::pmr::get_default_resource(v5);
  v6[1] = 0;
  v6[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v6) = v4 + 1;
  vp::vx::data_flow::State<void>::set_value(v2, (uint64_t)v6, (vp::vx::data_flow::State_Transaction *)(v1 + 784));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
}

void sub_1B60695B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::configure_control_center_manager(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  vp::vx::Voice_Processor *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[28];
  int id;
  _BYTE v21[24];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = (uint64_t *)*((_QWORD *)v1 + 338);
  if (v2)
  {
    vp::vx::Voice_Processor::get_app_bundle_id(**a1, (uint64_t)v18);
    vp::vx::Control_Center_Manager::set_app_bundle_id(v2, (uint64_t)v18);
    vp::vx::data_flow::State<void>::~State((uint64_t)v18);
    v3 = (uint64_t *)*((_QWORD *)v1 + 338);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*((_QWORD *)v1 + 1) + 16))(v22, (uint64_t)v1 + 8, 0);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v22);
    vp::vx::data_flow::State<void>::~State(v22);
    vp::vx::Control_Center_Manager::set_bypass(v3, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    v4 = (uint64_t *)*((_QWORD *)v1 + 338);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*((_QWORD *)v1 + 1) + 16))(v22, (uint64_t)v1 + 8, 86);
    vp::vx::data_flow::State<void>::State((uint64_t)v16, (uint64_t)v22);
    vp::vx::data_flow::State<void>::~State(v22);
    vp::vx::Control_Center_Manager::set_media_handoff(v4, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    v15 = 16;
    v5 = (uint64_t *)*((_QWORD *)v1 + 338);
    vp::vx::Voice_Processor::get_global_configuration(v1, (uint64_t)v21);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v21, (uint64_t)v1 + 16, &v15, (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v14, (uint64_t)v22);
    vp::vx::Control_Center_Manager::set_hidden_chat_flavors(v5, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)v21);
    v13 = 56;
    v6 = (uint64_t *)*((_QWORD *)v1 + 338);
    vp::vx::Voice_Processor::get_global_configuration(v1, (uint64_t)v21);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v21, (uint64_t)v1 + 16, &v13, (uint64_t)v22);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v22);
    vp::vx::Control_Center_Manager::set_supported_chat_flavors(v6, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v22);
    vp::vx::data_flow::State<void>::~State((uint64_t)v21);
    v7 = (uint64_t *)*((_QWORD *)v1 + 338);
    vp::vx::Voice_Processor::get_global_configuration(v1, (uint64_t)v11);
    v22[0] = &off_1E69BE1C0;
    v22[1] = 96;
    v23 = v22;
    id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v11);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)v22, (uint64_t)v21);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v21);
    vp::vx::data_flow::State<void>::~State(v21);
    v8 = v23;
    if (v23 == v22)
    {
      v9 = 4;
      v8 = v22;
    }
    else
    {
      if (!v23)
      {
LABEL_7:
        vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v19);
        vp::vx::data_flow::State<void>::~State((uint64_t)v19);
        vp::vx::data_flow::State<void>::State((uint64_t)v22, (uint64_t)v21);
        vp::vx::Control_Center_Manager::set_ideal_mic_mode(v7, (uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v22);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v11);
        v10 = (uint64_t *)*((_QWORD *)v1 + 338);
        vp::vx::data_flow::State<void>::State((uint64_t)v21, (uint64_t)v1 + 808);
        vp::vx::Control_Center_Manager::set_initialization_count(v10, (uint64_t)v21);
        vp::vx::data_flow::State<void>::~State((uint64_t)v21);
        vp::vx::Control_Center_Manager::configure(*((vp::vx::Control_Center_Manager_Impl ***)v1 + 338), (vp::vx::Voice_Processor *)((char *)v1 + 16));
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_7;
  }
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD v10[8];
  _BYTE v11[24];
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2 + 48;
  v6 = *a3;
  v12[0] = &off_1E69BE178;
  v12[1] = v6;
  v13 = v12;
  v10[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v5, (uint64_t)v12, (uint64_t)v11);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v11);
  vp::vx::data_flow::State<void>::~State(v11);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BE178;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BE178;
  a2[1] = v2;
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  BOOL v7;
  std::pmr *v8;
  uint64_t storage;
  char *result;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  const void *v16;

  v3 = *a3;
  v4 = (uint64_t *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  v11 = *v4;
  v12 = &v14;
  v13 = xmmword_1B6624BA0;
  v5 = (char *)v4[1];
  v16 = v5;
  v6 = v4[2];
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v15 = &v5[4 * v6];
  boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<boost::container::vec_iterator<vp::vx::Chat_Flavor*,true>>(&v11, &v16, (const void **)&v15);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v8);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<boost::container::small_vector<vp::vx::Chat_Flavor,3ul,vp::Allocator<vp::vx::Chat_Flavor>,void>>(void)::s_type_id;
  storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *(_QWORD *)storage = v11;
  *(_QWORD *)(storage + 8) = storage + 32;
  *(_OWORD *)(storage + 16) = xmmword_1B6624BA0;
  result = boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)storage, (uint64_t)&v11);
  if (*((_QWORD *)&v13 + 1))
    return (char *)boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v11, v12);
  return result;
}

void sub_1B6069B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&a12, a13);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BE1C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BE1C0;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, uint64_t **a3)
{
  uint64_t *v3;
  int v4;
  std::pmr *v5;
  _DWORD *result;

  v3 = *a3;
  v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(_QWORD *)(a1 + 8));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v3);
  *v3 = std::pmr::get_default_resource(v5);
  v3[1] = 0;
  v3[2] = (uint64_t)&vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v3);
  *result = v4;
  return result;
}

uint64_t boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19[2];
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a1[1];
  v3 = a1[2];
  v19[0] = v2;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v21 = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,false>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(v19, &v21, (uint64_t)a2, &v24);
  v7 = a1[1];
  v8 = a1[2];
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v10 = v24;
  if (v24 == v7 + 24 * v8)
    goto LABEL_14;
  if (!v24)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>((uint64_t)a2, v24) & 0x80) != 0)
  {
LABEL_14:
    v11 = *a2;
    v19[1] = 0;
    v20 = 0;
    v19[0] = v11;
    v21 = 0;
    v22 = 0;
    v23 = v10;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>(a1, &v23, v19, &v24);
    v10 = v24;
    v12 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v22;
    if (v22)
    {
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return v10 + 8;
}

void sub_1B6069DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,false>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *a2;
  if (*a2 != *a1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      v9 = *a1;
      if (v8 != 1 && !v9)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v9)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v10 = v8 >> 1;
      v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        v10 = v8 + ~v10;
      }
      v8 = v10;
    }
    while (v10);
    v5 = *a1;
  }
  *a4 = v5;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v8 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v7 = v4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_unique(a1, &v6, (uint64_t)&v7, a4);
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v8);
}

void sub_1B6069F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_unique(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  _BOOL8 inserted;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a1[1];
  if (v5 > *a2)
    goto LABEL_18;
  v7 = a1[2];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (*a2 > v5 + 24 * v7)
LABEL_18:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((uint64_t)a1, (uint64_t)a2, a3);
  v15 = *a2;
  v16 = 0;
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v15, a3, (uint64_t *)&v16);
  if (inserted)
  {
    v17 = v16;
    v13 = a1[1];
    if (v13 > v16)
      goto LABEL_19;
    v14 = a1[2];
    if (!v13)
    {
      if (v14)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (v16 > v13 + 24 * v14)
LABEL_19:
      boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>(inserted, v11, v12);
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, (uint64_t *)&v17, (const char *)1, a3, a4);
  }
  else
  {
    if (!a1[1] && v16)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    *a4 = v16;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;

  v6 = a1[2];
  v7 = a1[3];
  if (v7 < v6)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v10 = (__int128 *)*a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, *a2, a3, a4, a5);
  }
  else
  {
    if (v7 == v6)
      boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    v11 = a1[1];
    v12 = (__int128 *)(v11 + 24 * v6);
    if (v12 == v10)
    {
      *(_QWORD *)v10 = *(_QWORD *)a4;
      *(_OWORD *)(v11 + 24 * v6 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      ++a1[2];
    }
    else
    {
      v13 = (__int128 *)((char *)v12 - 24);
      v14 = *((_QWORD *)v12 - 3);
      *(_OWORD *)(v11 + 24 * v6 + 8) = *(v12 - 1);
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      *(_QWORD *)v12 = v14;
      ++a1[2];
      if ((__int128 *)((char *)v12 - 24) != v10)
      {
        v15 = (__int128 *)((char *)v12 - 24);
        do
        {
          v16 = *((_QWORD *)v15 - 3);
          v15 = (__int128 *)((char *)v15 - 24);
          *(_QWORD *)v13 = v16;
          std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v13 + 8, v13 - 1);
          v13 = v15;
        }
        while (v15 != v10);
      }
      *(_QWORD *)v10 = *(_QWORD *)a4;
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v10 + 8, (__int128 *)(a4 + 8));
    }
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 24 * v11, 8);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  if (v10)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = v10 + 8;
      do
      {
        --v11;
        v12 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v12) + 24;
      }
      while (v11);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  }
  v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
}

void sub_1B606A37C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  if (v2)
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 result;
  __n128 *v9;

  v7 = a5;
  if (a2 != a3)
  {
    v7 = a5;
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_QWORD *)v7 = *(_QWORD *)a7;
  result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u64[1] = *(_QWORD *)a3;
      result = *(__n128 *)(a3 + 8);
      *v9 = result;
      v9 = (__n128 *)((char *)v9 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19[2];
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a1[1];
  v3 = a1[2];
  v19[0] = v2;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v21 = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,false>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(v19, &v21, (uint64_t)a2, &v24);
  v7 = a1[1];
  v8 = a1[2];
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v10 = v24;
  if (v24 == v7 + 24 * v8)
    goto LABEL_14;
  if (!v24)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>((uint64_t)a2, v24) & 0x80) != 0)
  {
LABEL_14:
    v11 = *a2;
    v19[1] = 0;
    v20 = 0;
    v19[0] = v11;
    v21 = 0;
    v22 = 0;
    v23 = v10;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>(a1, &v23, v19, &v24);
    v10 = v24;
    v12 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v22;
    if (v22)
    {
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return v10 + 8;
}

void sub_1B606A660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,false>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *a2;
  if (*a2 != *a1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      v9 = *a1;
      if (v8 != 1 && !v9)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v9)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v10 = v8 >> 1;
      v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        v10 = v8 + ~v10;
      }
      v8 = v10;
    }
    while (v10);
    v5 = *a1;
  }
  *a4 = v5;
}

uint64_t std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  char v7;
  char *v8;

  v3 = *(unsigned int *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if ((_DWORD)v3 == -1)
  {
    if (v4 == -1)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else if (v4 == -1)
  {
    return 1;
  }
  else
  {
    if (v3 < v4)
      result = 0xFFFFFFFFLL;
    else
      result = 1;
    if ((_DWORD)v3 == v4)
    {
      v7 = 0;
      v8 = &v7;
      return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E69BE1F8[v3])(&v8, a1, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;

  if (*a2 < *a3)
    v3 = -1;
  else
    v3 = 1;
  if (*a2 == *a3)
    return 0;
  else
    return v3;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v8 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v7 = v4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_unique(a1, &v6, (uint64_t)&v7, a4);
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v8);
}

void sub_1B606A8F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_unique(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  _BOOL8 inserted;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a1[1];
  if (v5 > *a2)
    goto LABEL_18;
  v7 = a1[2];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (*a2 > v5 + 24 * v7)
LABEL_18:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>,boost::container::dtl::select1st<vp::vx::io::Object_ID<vp::vx::io::Wire>>,std::less<vp::vx::io::Object_ID<vp::vx::io::Wire>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Wire>,vp::vx::io::Wire_Address>>>::insert_unique((uint64_t)a1, (uint64_t)a2, a3);
  v15 = *a2;
  v16 = 0;
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v15, a3, (uint64_t *)&v16);
  if (inserted)
  {
    v17 = v16;
    v13 = a1[1];
    if (v13 > v16)
      goto LABEL_19;
    v14 = a1[2];
    if (!v13)
    {
      if (v14)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    if (v16 > v13 + 24 * v14)
LABEL_19:
      boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>(inserted, v11, v12);
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(a1, (uint64_t *)&v17, (const char *)1, a3, a4);
  }
  else
  {
    if (!a1[1] && v16)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    *a4 = v16;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v5)
    v6 = 1;
  else
    v6 = v4 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v11 = v5 + 24 * v4;
  v12 = *a2;
  if (v12 != v11)
  {
    if (!v12)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a3, v12) & 0x80) == 0)
    {
      v13 = *a2;
      v19 = v11;
      v20 = v13;
      v14 = &v20;
      v15 = &v19;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v11 = *a2;
  }
  *a4 = v11;
  v17 = *a2;
  if (*a2 == v5)
    return 1;
  if (!v17)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v18 = v17 - 24;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v17 - 24, a3) & 0x80) != 0)return 1;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a3, v18) & 0x80) != 0)
  {
    v21 = v18;
    v22 = v5;
    v14 = &v22;
    v15 = &v21;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
  }
  result = 0;
  *a4 = v18;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,true>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return (std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a4, v9) & 0x80u) != 0;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,true>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *a2;
  if (*a2 != *a1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      v9 = *a1;
      if (v8 != 1 && !v9)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v9)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v10 = v8 >> 1;
      v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        v10 = v8 + ~v10;
      }
      v8 = v10;
    }
    while (v10);
    v5 = *a1;
  }
  *a4 = v5;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;

  v6 = a1[2];
  v7 = a1[3];
  if (v7 < v6)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v10 = (__int128 *)*a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(a1, *a2, a3, a4, a5);
  }
  else
  {
    if (v7 == v6)
      boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    v11 = a1[1];
    v12 = (__int128 *)(v11 + 24 * v6);
    if (v12 == v10)
    {
      *(_QWORD *)v10 = *(_QWORD *)a4;
      *(_OWORD *)(v11 + 24 * v6 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      ++a1[2];
    }
    else
    {
      v13 = (__int128 *)((char *)v12 - 24);
      v14 = *((_QWORD *)v12 - 3);
      *(_OWORD *)(v11 + 24 * v6 + 8) = *(v12 - 1);
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      *(_QWORD *)v12 = v14;
      ++a1[2];
      if ((__int128 *)((char *)v12 - 24) != v10)
      {
        v15 = (__int128 *)((char *)v12 - 24);
        do
        {
          v16 = *((_QWORD *)v15 - 3);
          v15 = (__int128 *)((char *)v15 - 24);
          *(_QWORD *)v13 = v16;
          std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v13 + 8, v13 - 1);
          v13 = v15;
        }
        while (v15 != v10);
      }
      *(_QWORD *)v10 = *(_QWORD *)a4;
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v10 + 8, (__int128 *)(a4 + 8));
    }
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1[1];
  v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 24 * v11, 8);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  if (v10)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = v10 + 8;
      do
      {
        --v11;
        v12 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v12) + 24;
      }
      while (v11);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  }
  v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
}

void sub_1B606B008(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  if (v2)
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 result;
  __n128 *v9;

  v7 = a5;
  if (a2 != a3)
  {
    v7 = a5;
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_QWORD *)v7 = *(_QWORD *)a7;
  result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u64[1] = *(_QWORD *)a3;
      result = *(__n128 *)(a3 + 8);
      *v9 = result;
      v9 = (__n128 *)((char *)v9 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::__shared_ptr_pointer<vp::vx::IO_Port_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Port_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  BOOL inserted;
  __int128 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;

  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 0;
  v17 = 0;
  if (*a2)
  {
    v16 = *a2;
    inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v16, (uint64_t)a3, (uint64_t *)&v17);
  }
  else
  {
    v10 = (__int128 *)a1[1];
    v11 = a1[2];
    v19 = v10;
    if (v10)
      v12 = 1;
    else
      v12 = v11 == 0;
    if (!v12)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v18 = (uint64_t)v10 + 24 * v11;
    inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v19, &v18, (uint64_t)a3, (uint64_t *)&v17);
  }
  *(_BYTE *)(a5 + 8) = inserted;
  if (inserted)
  {
    v15 = v17;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(a1, &v15, a3, a4, &v19);
    *(_QWORD *)a5 = v19;
  }
  else
  {
    v13 = a1[1];
    if (a1[2] < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v13) >> 3))
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    v14 = v13 + 8 * (((uint64_t)v17 - v13) >> 3);
    *(_QWORD *)a5 = v14;
    std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)(v14 + 8), a4);
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, __int128 **a5@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v6 = *a2;
  v7 = a1[1];
  if (v7 > (unint64_t)v6)
    goto LABEL_11;
  v9 = a1[2];
  if (v7)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (!v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)v6 > v7 + 24 * v9)
LABEL_11:
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)v6, (uint64_t)a3);
  v11 = a1[3];
  if (v11 < v9)
    boost::container::vector<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>,vp::Allocator<boost::container::dtl::pair<vp::vx::Property_ID,vp::vx::Property>>,void>::emplace<vp::vx::Property_ID const&,vp::vx::Property>((uint64_t)a1, (uint64_t)v6, (uint64_t)a3);
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(a1, (uint64_t)v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(a1, v6, 1, a4, a3);
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(_QWORD *a1, __int128 *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  if (v5 == a1[3])
    boost::container::vector<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>,vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>*,boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>>((uint64_t)a1, (uint64_t)a2, a3);
  v9 = a1[1];
  v10 = (__int128 *)(v9 + 24 * v5);
  if (v10 == a2)
  {
    *(_QWORD *)a2 = *a5;
    v22 = v9 + 24 * v5;
    *(_QWORD *)(v22 + 8) = *a4;
    v23 = a4[1];
    *(_QWORD *)(v22 + 16) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    ++a1[2];
  }
  else
  {
    v11 = (__int128 *)((char *)v10 - 24);
    v12 = *((_QWORD *)v10 - 3);
    *(_OWORD *)(v9 + 24 * v5 + 8) = *(v10 - 1);
    *((_QWORD *)v10 - 2) = 0;
    *((_QWORD *)v10 - 1) = 0;
    *(_QWORD *)v10 = v12;
    ++a1[2];
    if ((__int128 *)((char *)v10 - 24) != a2)
    {
      v13 = (__int128 *)((char *)v10 - 24);
      do
      {
        v14 = *((_QWORD *)v13 - 3);
        v13 = (__int128 *)((char *)v13 - 24);
        *(_QWORD *)v11 = v14;
        std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v11 + 8, v11 - 1);
        v11 = v13;
      }
      while (v13 != a2);
    }
    v15 = *a5;
    *(_QWORD *)&v26 = *a4;
    v16 = a4[1];
    *((_QWORD *)&v26 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_QWORD *)a2 = v15;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)a2 + 8, &v26);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v12 = a1[1];
  v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v13 >= 0xAAAAAAAAAAAAAABLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  v15 = v13;
  v16 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 24 * v13, 8);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = a1[1] + a2 - v12;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>((uint64_t)a1, v11, a4, v11 + 24 * a1[2], a2, a5, a6, a7);
  if (v11)
  {
    v12 = a1[2];
    if (v12)
    {
      v13 = v11 + 8;
      do
      {
        --v12;
        v13 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v13) + 24;
      }
      while (v12);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (_QWORD *)a1[1]);
  }
  v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
}

void sub_1B606B72C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;

  if (v2)
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 *v13;

  v8 = a5;
  if (a2 != a3)
  {
    v8 = a5;
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a2;
      result = *(__n128 *)(a2 + 8);
      *(__n128 *)(v8 + 8) = result;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v8 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  *(_QWORD *)v8 = *a8;
  v10 = a7[1];
  *(_QWORD *)(v8 + 8) = *a7;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a3 != a4)
  {
    v13 = (__n128 *)(v8 + 32);
    do
    {
      v13[-1].n128_u64[1] = *(_QWORD *)a3;
      result = *(__n128 *)(a3 + 8);
      *v13 = result;
      v13 = (__n128 *)((char *)v13 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Wire_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Wire_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Mic_Ref_Sync_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Mic_Ref_Sync_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Far_End_Voice_Proc_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Far_End_Voice_Proc_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0>(const vp::rpb::Server ***a1)
{
  const vp::rpb::Server *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8[2];
  const vp::rpb::Server *v9;
  std::__shared_weak_count *v10[2];
  const vp::rpb::Server *v11;
  void *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = (*a1)[1];
  vp::rpb::Server::Listener::Listener((vp::rpb::Server::Listener *)&v12, **a1);
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)v1 + 91, v10);
  v11 = v1;
  v16 = 0;
  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69BE308;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)v10;
  v10[0] = 0;
  v10[1] = 0;
  *((_QWORD *)v2 + 3) = v1;
  v16 = v2;
  vp::rpb::Server::Listener::on_did_start_running(&v12, (uint64_t)v15);
  v3 = v16;
  if (v16 == v15)
  {
    v4 = 4;
    v3 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v10[1])
    std::__shared_weak_count::__release_weak(v10[1]);
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)v1 + 91, v8);
  v9 = v1;
  v14 = 0;
  v5 = (char *)operator new(0x20uLL);
  *(_QWORD *)v5 = &off_1E69BE398;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v8;
  v8[0] = 0;
  v8[1] = 0;
  *((_QWORD *)v5 + 3) = v1;
  v14 = v5;
  vp::rpb::Server::Listener::on_did_stop_running(&v12, (uint64_t)v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  if (v8[1])
    std::__shared_weak_count::__release_weak(v8[1]);
  vp::cf::Predicate::operator=((void **)v1 + 299, &v12);
  vp::cf::Predicate::~Predicate((vp::cf::Predicate *)&v12);
}

void sub_1B606BA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,__int16 *a24)
{
  __int16 *v24;
  __int16 *v26;
  uint64_t v27;

  v26 = a24;
  if (a24 == v24)
  {
    v27 = 4;
    v26 = &a19;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  vp::cf::Predicate::~Predicate((vp::cf::Predicate *)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BE308;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BE308;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E69BE308;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E69BE308;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(vp *a1)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  void **v8;
  const char *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  unsigned __int8 v19;
  void **v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v4 = v19;
    v5 = __p[1];
    v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0)
        v7 = v4;
      else
        v7 = (unint64_t)v5;
      v8 = (void **)__p[0];
      if ((v19 & 0x80u) == 0)
        v8 = __p;
      if (v7)
        v9 = " ";
      else
        v9 = "";
      *(_DWORD *)buf = 136315394;
      v22 = v8;
      v23 = 2080;
      v24 = v9;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%s%sRPB server started running", buf, 0x16u);
    }
    if ((char)v19 < 0)
      operator delete(__p[0]);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = v11;
      v13 = *((_QWORD *)a1 + 1);
      if (!v13)
        goto LABEL_22;
      __p[0] = &off_1E69BE350;
      v20 = __p;
      vp::vx::Voice_Processor::call_async(v13, (uint64_t)__p);
      v14 = v20;
      if (v20 == __p)
      {
        v15 = 4;
        v14 = __p;
      }
      else
      {
        if (!v20)
          goto LABEL_22;
        v15 = 5;
      }
      (*((void (**)(void))*v14 + v15))();
LABEL_22:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BE350;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BE350;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD v4[2];

  vp::rpb::Server::get_shared_instance((uint64_t)&v3);
  v4[0] = &v3;
  v4[1] = a2;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"connect RPB server", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)v4);
  vp::objc::ID::~ID(&v3);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BE398;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BE398;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E69BE398;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E69BE398;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(vp *a1)
{
  NSObject *log;
  vp *log_context_info;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  void **v8;
  const char *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  unsigned __int8 v19;
  void **v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v4 = v19;
    v5 = __p[1];
    v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0)
        v7 = v4;
      else
        v7 = (unint64_t)v5;
      v8 = (void **)__p[0];
      if ((v19 & 0x80u) == 0)
        v8 = __p;
      if (v7)
        v9 = " ";
      else
        v9 = "";
      *(_DWORD *)buf = 136315394;
      v22 = v8;
      v23 = 2080;
      v24 = v9;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%s%sRPB server stopped running", buf, 0x16u);
    }
    if ((char)v19 < 0)
      operator delete(__p[0]);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = v11;
      v13 = *((_QWORD *)a1 + 1);
      if (!v13)
        goto LABEL_22;
      __p[0] = &off_1E69BE3E0;
      v20 = __p;
      vp::vx::Voice_Processor::call_async(v13, (uint64_t)__p);
      v14 = v20;
      if (v20 == __p)
      {
        v15 = 4;
        v14 = __p;
      }
      else
      {
        if (!v20)
          goto LABEL_22;
        v15 = 5;
      }
      (*((void (**)(void))*v14 + v15))();
LABEL_22:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69BE3E0;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69BE3E0;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  vp::rpb::Server::get_shared_instance((uint64_t)&v3);
  v4 = a2;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"disconnect RPB server", (uint64_t (*)(_QWORD))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>, (uint64_t)&v4);
  vp::objc::ID::~ID(&v3);
}

void **caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::unregister_listener(vp::rpb::Server)::$_0>(uint64_t a1)
{
  return vp::rpb::Host::Delegate::operator=((void **)(**(_QWORD **)a1 + 2392));
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>(uint64_t *a1)
{
  vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0::operator()(*a1);
}

void vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  vp *is_running;
  NSObject *log;
  vp *log_context_info;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void **v10;
  const char *v11;
  unsigned int v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t v21;
  std::pmr *v22;
  uint64_t default_resource;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::pmr *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::pmr *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::pmr *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  std::pmr *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  std::pmr *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  std::pmr *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  std::pmr *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t i;
  std::pmr *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  std::pmr *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  std::pmr *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  std::pmr *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  std::pmr *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  std::pmr *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  std::pmr *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t j;
  std::pmr *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  std::pmr *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  std::pmr *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  std::pmr *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id *v118;
  _DWORD *k;
  _DWORD *v120;
  _DWORD *m;
  _DWORD *v122;
  _DWORD *n;
  _DWORD *v124;
  _DWORD *ii;
  _DWORD *v126;
  id **v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  CFTypeRef v132;
  CFTypeRef v133;
  CFTypeRef v134;
  CFTypeRef v135;
  CFTypeRef v136;
  id v137;
  void *__p[2];
  __int128 v139;
  uint64_t v140;
  char v141;
  CFTypeRef v142;
  CFTypeRef v143;
  CFTypeRef v144;
  id v145[3];
  id v146[3];
  id v147[3];
  CFTypeRef v148;
  void *v149;
  CFTypeRef v150;
  void *v151;
  id v152;
  id v153;
  id v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  CFTypeRef v158;
  id v159;
  CFTypeRef v160;
  id v161;
  CFTypeRef v162;
  id v163;
  CFTypeRef v164;
  id v165;
  CFTypeRef v166;
  id v167;
  id v168;
  std::__shared_weak_count *v169[2];
  std::__shared_weak_count *v170[2];
  void *v171;
  CFTypeRef v172;
  CFTypeRef v173;
  CFTypeRef v174;
  CFTypeRef v175;
  CFTypeRef v176;
  CFTypeRef v177;
  CFTypeRef v178;
  CFTypeRef v179;
  CFTypeRef v180;
  CFTypeRef v181;
  CFTypeRef v182;
  CFTypeRef cf;
  id v184;
  _OWORD v185[2];
  uint64_t v186;
  id v187;
  _OWORD v188[2];
  uint64_t v189;
  CFTypeRef v190[3];
  id v191;
  uint64_t v192;
  void *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE buf[32];
  uint64_t v198;
  uint64_t (**v199)();
  __int128 v200;
  uint64_t (***v201)();
  uint64_t (**v202)();
  __int128 v203;
  uint64_t (***v204)();
  id v205[6];

  v205[3] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  is_running = (vp *)vp::rpb::Server::is_running(*(id **)a1);
  if (!(_DWORD)is_running)
    return;
  log = vp::get_log(is_running);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v6 = (void *)BYTE7(v139);
    v7 = __p[1];
    v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)v6 >= 0)
        v9 = v6;
      else
        v9 = v7;
      v10 = (void **)__p[0];
      if ((SBYTE7(v139) & 0x80u) == 0)
        v10 = __p;
      if (v9)
        v11 = " ";
      else
        v11 = "";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s%sconnect RPB", buf, 0x16u);
    }
    if (SBYTE7(v139) < 0)
      operator delete(__p[0]);
  }
  applesauce::CF::operator"" _cf("VoiceProcessor", 0xEuLL, (CFStringRef *)&cf);
  vp::rpb::Host::Host((uint64_t)&v184, &cf);
  if (cf)
    CFRelease(cf);
  applesauce::CF::operator"" _cf("Operating System", 0x10uLL, (CFStringRef *)&v182);
  v12 = *(_DWORD *)(v2 + 264) - 1;
  if (v12 > 2)
    v13 = "iOS";
  else
    v13 = off_1E69BE5C0[v12];
  __p[0] = (void *)v13;
  vp::rpb::Object::add_user_info<char const*>(&v184, &v182, (char **)__p);
  if (v182)
    CFRelease(v182);
  applesauce::CF::operator"" _cf("Operating System Release Type", 0x1DuLL, (CFStringRef *)&v181);
  vp::rpb::Object::add_user_info<applesauce::CF::StringRef const&>(&v184, &v181, (const void **)(v2 + 272));
  if (v181)
    CFRelease(v181);
  applesauce::CF::operator"" _cf("AppleInternal Build", 0x13uLL, (CFStringRef *)&v180);
  vp::rpb::Object::add_user_info<BOOL const&>(&v184, &v180, (_BYTE *)(v2 + 280));
  if (v180)
    CFRelease(v180);
  applesauce::CF::operator"" _cf("UI Build", 8uLL, (CFStringRef *)&v179);
  vp::rpb::Object::add_user_info<BOOL const&>(&v184, &v179, (_BYTE *)(v2 + 281));
  if (v179)
    CFRelease(v179);
  applesauce::CF::operator"" _cf("Tuning Directory Path", 0x15uLL, (CFStringRef *)&v178);
  if (*(char *)(v2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 288), *(_QWORD *)(v2 + 296));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v2 + 288);
    *(_QWORD *)&v139 = *(_QWORD *)(v2 + 304);
  }
  vp::rpb::Object::add_user_info<std::string>(&v184, &v178, (uint64_t)__p);
  if (SBYTE7(v139) < 0)
    operator delete(__p[0]);
  if (v178)
    CFRelease(v178);
  applesauce::CF::operator"" _cf("Temporary Directory Path", 0x18uLL, (CFStringRef *)&v177);
  if (*(char *)(v2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 312), *(_QWORD *)(v2 + 320));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v2 + 312);
    *(_QWORD *)&v139 = *(_QWORD *)(v2 + 328);
  }
  vp::rpb::Object::add_user_info<std::string>(&v184, &v177, (uint64_t)__p);
  if (SBYTE7(v139) < 0)
    operator delete(__p[0]);
  if (v177)
    CFRelease(v177);
  applesauce::CF::operator"" _cf("Secret Directory Path", 0x15uLL, (CFStringRef *)&v176);
  if (*(char *)(v2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 336), *(_QWORD *)(v2 + 344));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v2 + 336);
    *(_QWORD *)&v139 = *(_QWORD *)(v2 + 352);
  }
  vp::rpb::Object::add_user_info<std::string>(&v184, &v176, (uint64_t)__p);
  if (SBYTE7(v139) < 0)
    operator delete(__p[0]);
  if (v176)
    CFRelease(v176);
  applesauce::CF::operator"" _cf("Hardware Model", 0xEuLL, (CFStringRef *)&v175);
  vp::rpb::Object::add_user_info<std::string const&>(&v184, &v175, v2 + 368);
  if (v175)
    CFRelease(v175);
  applesauce::CF::operator"" _cf("Hardware Layout ID", 0x12uLL, (CFStringRef *)&v174);
  v14 = *(unsigned __int8 *)(v2 + 396);
  if (*(_BYTE *)(v2 + 396))
    v14 = *(_DWORD *)(v2 + 392);
  LODWORD(__p[0]) = v14;
  vp::rpb::Object::add_user_info<unsigned int>(&v184, &v174, (int *)__p);
  if (v174)
    CFRelease(v174);
  applesauce::CF::operator"" _cf("Product Type", 0xCuLL, (CFStringRef *)&v173);
  v15 = *(unsigned __int8 *)(v2 + 404);
  if (*(_BYTE *)(v2 + 404))
    v15 = *(_DWORD *)(v2 + 400);
  LODWORD(__p[0]) = v15;
  vp::rpb::Object::add_user_info<unsigned int>(&v184, &v173, (int *)__p);
  if (v173)
    CFRelease(v173);
  applesauce::CF::operator"" _cf("Acoustic ID", 0xBuLL, (CFStringRef *)&v172);
  v16 = *(unsigned __int8 *)(v2 + 416);
  if (*(_BYTE *)(v2 + 416))
    v16 = *(_DWORD *)(v2 + 412);
  LODWORD(__p[0]) = v16;
  vp::rpb::Object::add_user_info<int>(&v184, &v172, (int *)__p);
  if (v172)
    CFRelease(v172);
  vp::rpb::Host::new_delegate((vp::objc::ID *)&v171);
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)(v2 + 728), v170);
  v203 = *(_OWORD *)v170;
  v170[0] = 0;
  v170[1] = 0;
  v202 = &off_1E69BE428;
  v204 = &v202;
  vp::rpb::Host::Delegate::on_get_property_info(&v171, (uint64_t)&v202);
  v17 = v204;
  if (v204 == &v202)
  {
    v18 = 4;
    v17 = &v202;
  }
  else
  {
    if (!v204)
      goto LABEL_68;
    v18 = 5;
  }
  (*v17)[v18]();
LABEL_68:
  if (v170[1])
    std::__shared_weak_count::__release_weak(v170[1]);
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::weak_T_ptr((uint64_t *)(v2 + 728), v169);
  v200 = *(_OWORD *)v169;
  v169[0] = 0;
  v169[1] = 0;
  v199 = &off_1E69BE4B8;
  v201 = &v199;
  vp::rpb::Host::Delegate::on_get_property(&v171, (uint64_t)&v199);
  v19 = v201;
  if (v201 == &v199)
  {
    v20 = 4;
    v19 = &v199;
    goto LABEL_74;
  }
  if (v201)
  {
    v20 = 5;
LABEL_74:
    (*v19)[v20]();
  }
  if (v169[1])
    std::__shared_weak_count::__release_weak(v169[1]);
  vp::objc::ID::ID((vp::objc::ID *)&v168, &v171);
  vp::rpb::Host::set_delegate(&v184, &v168);
  vp::objc::ID::~ID(&v168);
  applesauce::CF::operator"" _cf("Audio Client", 0xCuLL, (CFStringRef *)&v166);
  v21 = v2 + 8;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8) + 16))(buf, v2 + 8, 48);
  vp::vx::data_flow::State<void>::State((uint64_t)v188, (uint64_t)buf);
  v22 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
  default_resource = std::pmr::get_default_resource(v22);
  vp::vx::data_flow::Value::Value(buf, default_resource);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v188, (vp::vx::data_flow::Value *)buf);
  v24 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)__p = *(_OWORD *)v24;
  v139 = v26;
  v140 = v25;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v193, (const CA::StreamDescription *)__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8) + 16))(&v155, v2 + 8, 49);
  vp::vx::data_flow::State<void>::State((uint64_t)v185, (uint64_t)&v155);
  v27 = (std::pmr *)vp::vx::data_flow::State<void>::~State(&v155);
  v28 = std::pmr::get_default_resource(v27);
  vp::vx::data_flow::Value::Value(&v155, v28);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v185, (vp::vx::data_flow::Value *)&v155);
  v29 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v155);
  v30 = *(_QWORD *)(v29 + 32);
  v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)buf = *(_OWORD *)v29;
  *(_OWORD *)&buf[16] = v31;
  v198 = v30;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v155);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v205, (const CA::StreamDescription *)buf);
  vp::rpb::Item::Item((uint64_t)&v167, (id *)&v166, (uint64_t)&v193, 1, (uint64_t)v205, 1);
  vp::objc::ID::~ID(v205);
  vp::vx::data_flow::State<void>::~State((uint64_t)v185);
  vp::objc::ID::~ID(&v193);
  vp::vx::data_flow::State<void>::~State((uint64_t)v188);
  if (v166)
    CFRelease(v166);
  vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v167);
  applesauce::CF::operator"" _cf("Hardware Microphone Input", 0x19uLL, (CFStringRef *)&v164);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 8);
  vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
  v32 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
  v33 = std::pmr::get_default_resource(v32);
  vp::vx::data_flow::Value::Value(buf, v33);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
  v34 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  v35 = *(_QWORD *)(v34 + 32);
  v36 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)__p = *(_OWORD *)v34;
  v139 = v36;
  v140 = v35;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v188, (const CA::StreamDescription *)__p);
  vp::rpb::Item::Item((uint64_t)&v165, (id *)&v164, 0, 0, (uint64_t)v188, 1);
  vp::objc::ID::~ID((id *)v188);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
  if (v164)
    CFRelease(v164);
  vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v165);
  applesauce::CF::operator"" _cf("Hardware Reference Input", 0x18uLL, (CFStringRef *)&v162);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 23);
  vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
  v37 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
  v38 = std::pmr::get_default_resource(v37);
  vp::vx::data_flow::Value::Value(buf, v38);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
  v39 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  v40 = *(_QWORD *)(v39 + 32);
  v41 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)__p = *(_OWORD *)v39;
  v139 = v41;
  v140 = v40;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v188, (const CA::StreamDescription *)__p);
  vp::rpb::Item::Item((uint64_t)&v163, (id *)&v162, 0, 0, (uint64_t)v188, 1);
  vp::objc::ID::~ID((id *)v188);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
  if (v162)
    CFRelease(v162);
  vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v163);
  applesauce::CF::operator"" _cf("Hardware Mix Output", 0x13uLL, (CFStringRef *)&v160);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 51);
  vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
  v42 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
  v43 = std::pmr::get_default_resource(v42);
  vp::vx::data_flow::Value::Value(buf, v43);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
  v44 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  v45 = *(_QWORD *)(v44 + 32);
  v46 = *(_OWORD *)(v44 + 16);
  *(_OWORD *)__p = *(_OWORD *)v44;
  v139 = v46;
  v140 = v45;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v188, (const CA::StreamDescription *)__p);
  vp::rpb::Item::Item((uint64_t)&v161, (id *)&v160, (uint64_t)v188, 1, 0, 0);
  vp::objc::ID::~ID((id *)v188);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
  if (v160)
    CFRelease(v160);
  vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v161);
  v128 = *(_QWORD *)(v2 + 2400);
  applesauce::CF::operator"" _cf("Uplink", 6uLL, (CFStringRef *)&v158);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 8);
  vp::vx::data_flow::State<void>::State((uint64_t)v185, (uint64_t)buf);
  v47 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
  v48 = std::pmr::get_default_resource(v47);
  vp::vx::data_flow::Value::Value(buf, v48);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v185, (vp::vx::data_flow::Value *)buf);
  v49 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
  v50 = *(_QWORD *)(v49 + 32);
  v51 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)__p = *(_OWORD *)v49;
  v139 = v51;
  v140 = v50;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v191, (const CA::StreamDescription *)__p);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(&v155, v2 + 8, 23);
  vp::vx::data_flow::State<void>::State((uint64_t)&v193, (uint64_t)&v155);
  v52 = (std::pmr *)vp::vx::data_flow::State<void>::~State(&v155);
  v53 = std::pmr::get_default_resource(v52);
  vp::vx::data_flow::Value::Value(&v155, v53);
  vp::vx::data_flow::State<void>::get_value((uint64_t)&v193, (vp::vx::data_flow::Value *)&v155);
  v54 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v155);
  v55 = *(_QWORD *)(v54 + 32);
  v56 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)buf = *(_OWORD *)v54;
  *(_OWORD *)&buf[16] = v56;
  v198 = v55;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v155);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v192, (const CA::StreamDescription *)buf);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v188, v2 + 8, 48);
  vp::vx::data_flow::State<void>::State((uint64_t)v205, (uint64_t)v188);
  v57 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v188);
  v58 = std::pmr::get_default_resource(v57);
  vp::vx::data_flow::Value::Value(v188, v58);
  vp::vx::data_flow::State<void>::get_value((uint64_t)v205, (vp::vx::data_flow::Value *)v188);
  v59 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v188);
  v60 = *(_QWORD *)(v59 + 32);
  v61 = *(_OWORD *)(v59 + 16);
  v155 = *(_OWORD *)v59;
  v156 = v61;
  v157 = v60;
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v188);
  vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v190, (const CA::StreamDescription *)&v155);
  vp::rpb::Item::Item((uint64_t)&v159, (id *)&v158, (uint64_t)&v191, 2, (uint64_t)v190, 1);
  vp::objc::ID::~ID((id *)v190);
  vp::vx::data_flow::State<void>::~State((uint64_t)v205);
  for (i = 8; i != -8; i -= 8)
    vp::objc::ID::~ID((id *)((char *)&v191 + i));
  vp::vx::data_flow::State<void>::~State((uint64_t)&v193);
  vp::vx::data_flow::State<void>::~State((uint64_t)v185);
  if (v158)
    CFRelease(v158);
  vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v159);
  vp::rpb::Wire::Wire((vp::rpb::Wire *)&v154, (const vp::rpb::Item *)&v159, 0, (const vp::rpb::Item *)&v167, 0);
  vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)&v154);
  vp::rpb::Wire::Wire((vp::rpb::Wire *)&v153, (const vp::rpb::Item *)&v165, 0, (const vp::rpb::Item *)&v159, 0);
  vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)&v153);
  vp::rpb::Wire::Wire((vp::rpb::Wire *)&v152, (const vp::rpb::Item *)&v163, 0, (const vp::rpb::Item *)&v159, 1);
  vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)&v152);
  v129 = *(_QWORD *)(v2 + 2504);
  v151 = 0;
  if (*(_DWORD *)(v2 + 264) == 3)
  {
    applesauce::CF::operator"" _cf("Downlink", 8uLL, (CFStringRef *)&v150);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 49);
    vp::vx::data_flow::State<void>::State((uint64_t)v188, (uint64_t)buf);
    v63 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v64 = std::pmr::get_default_resource(v63);
    vp::vx::data_flow::Value::Value(buf, v64);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v188, (vp::vx::data_flow::Value *)buf);
    v65 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    v66 = *(_QWORD *)(v65 + 32);
    v67 = *(_OWORD *)(v65 + 16);
    *(_OWORD *)__p = *(_OWORD *)v65;
    v139 = v67;
    v140 = v66;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v205, (const CA::StreamDescription *)__p);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(&v155, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v185, (uint64_t)&v155);
    v68 = (std::pmr *)vp::vx::data_flow::State<void>::~State(&v155);
    v69 = std::pmr::get_default_resource(v68);
    vp::vx::data_flow::Value::Value(&v155, v69);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v185, (vp::vx::data_flow::Value *)&v155);
    v70 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v155);
    v71 = *(_QWORD *)(v70 + 32);
    v72 = *(_OWORD *)(v70 + 16);
    *(_OWORD *)buf = *(_OWORD *)v70;
    *(_OWORD *)&buf[16] = v72;
    v198 = v71;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v155);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v191, (const CA::StreamDescription *)buf);
    vp::rpb::Item::Item((uint64_t)&v193, (id *)&v150, (uint64_t)v205, 1, (uint64_t)&v191, 1);
    vp::objc::ID::operator=(&v151, &v193);
    vp::objc::ID::~ID(&v193);
    vp::objc::ID::~ID(&v191);
    vp::vx::data_flow::State<void>::~State((uint64_t)v185);
    vp::objc::ID::~ID(v205);
    vp::vx::data_flow::State<void>::~State((uint64_t)v188);
    if (v150)
      CFRelease(v150);
    vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v151);
  }
  else
  {
    applesauce::CF::operator"" _cf("Downlink", 8uLL, (CFStringRef *)&v148);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 49);
    vp::vx::data_flow::State<void>::State((uint64_t)&v191, (uint64_t)buf);
    v73 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v74 = std::pmr::get_default_resource(v73);
    vp::vx::data_flow::Value::Value(buf, v74);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v191, (vp::vx::data_flow::Value *)buf);
    v75 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    v76 = *(_QWORD *)(v75 + 32);
    v77 = *(_OWORD *)(v75 + 16);
    *(_OWORD *)__p = *(_OWORD *)v75;
    v139 = v77;
    v140 = v76;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v193, (const CA::StreamDescription *)__p);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(&v155, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v190, (uint64_t)&v155);
    v78 = (std::pmr *)vp::vx::data_flow::State<void>::~State(&v155);
    v79 = std::pmr::get_default_resource(v78);
    vp::vx::data_flow::Value::Value(&v155, v79);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v190, (vp::vx::data_flow::Value *)&v155);
    v80 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v155);
    v81 = *(_QWORD *)(v80 + 32);
    v82 = *(_OWORD *)(v80 + 16);
    *(_OWORD *)buf = *(_OWORD *)v80;
    *(_OWORD *)&buf[16] = v82;
    v198 = v81;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v155);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v194, (const CA::StreamDescription *)buf);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v188, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v147, (uint64_t)v188);
    v83 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v188);
    v84 = std::pmr::get_default_resource(v83);
    vp::vx::data_flow::Value::Value(v188, v84);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v147, (vp::vx::data_flow::Value *)v188);
    v85 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v188);
    v86 = *(_QWORD *)(v85 + 32);
    v87 = *(_OWORD *)(v85 + 16);
    v155 = *(_OWORD *)v85;
    v156 = v87;
    v157 = v86;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v188);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v195, (const CA::StreamDescription *)&v155);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v185, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v146, (uint64_t)v185);
    v88 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v185);
    v89 = std::pmr::get_default_resource(v88);
    vp::vx::data_flow::Value::Value(v185, v89);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v146, (vp::vx::data_flow::Value *)v185);
    v90 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v185);
    v91 = *(_QWORD *)(v90 + 32);
    v92 = *(_OWORD *)(v90 + 16);
    v188[0] = *(_OWORD *)v90;
    v188[1] = v92;
    v189 = v91;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v185);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v196, (const CA::StreamDescription *)v188);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v205, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)v145, (uint64_t)v205);
    v93 = (std::pmr *)vp::vx::data_flow::State<void>::~State(v205);
    v94 = std::pmr::get_default_resource(v93);
    vp::vx::data_flow::Value::Value(v205, v94);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v145, (vp::vx::data_flow::Value *)v205);
    v95 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v205);
    v96 = *(_QWORD *)(v95 + 32);
    v97 = *(_OWORD *)(v95 + 16);
    v185[0] = *(_OWORD *)v95;
    v185[1] = v97;
    v186 = v96;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v205);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v187, (const CA::StreamDescription *)v185);
    vp::rpb::Item::Item((uint64_t)&v149, (id *)&v148, (uint64_t)&v193, 4, (uint64_t)&v187, 1);
    vp::objc::ID::operator=(&v151, &v149);
    vp::objc::ID::~ID(&v149);
    vp::objc::ID::~ID(&v187);
    vp::vx::data_flow::State<void>::~State((uint64_t)v145);
    for (j = 24; j != -8; j -= 8)
      vp::objc::ID::~ID((void **)((char *)&v193 + j));
    vp::vx::data_flow::State<void>::~State((uint64_t)v146);
    vp::vx::data_flow::State<void>::~State((uint64_t)v147);
    vp::vx::data_flow::State<void>::~State((uint64_t)v190);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v191);
    if (v148)
      CFRelease(v148);
    vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v151);
    applesauce::CF::operator"" _cf("Default Audio Output", 0x14uLL, (CFStringRef *)&v144);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
    v99 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v100 = std::pmr::get_default_resource(v99);
    vp::vx::data_flow::Value::Value(buf, v100);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
    v101 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    v102 = *(_QWORD *)(v101 + 32);
    v103 = *(_OWORD *)(v101 + 16);
    *(_OWORD *)__p = *(_OWORD *)v101;
    v139 = v103;
    v140 = v102;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v185, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)v188, (id *)&v144, 0, 0, (uint64_t)v185, 1);
    vp::objc::ID::~ID((id *)v185);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
    if (v144)
      CFRelease(v144);
    vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)v188);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)v188, 0, (const vp::rpb::Item *)&v151, 1);
    vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)__p);
    vp::objc::ID::~ID(__p);
    applesauce::CF::operator"" _cf("System Audio Output", 0x13uLL, (CFStringRef *)&v143);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
    v104 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v105 = std::pmr::get_default_resource(v104);
    vp::vx::data_flow::Value::Value(buf, v105);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
    v106 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    v107 = *(_QWORD *)(v106 + 32);
    v108 = *(_OWORD *)(v106 + 16);
    *(_OWORD *)__p = *(_OWORD *)v106;
    v139 = v108;
    v140 = v107;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v193, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)v185, (id *)&v143, 0, 0, (uint64_t)&v193, 1);
    vp::objc::ID::~ID(&v193);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
    if (v143)
      CFRelease(v143);
    vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)v185);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)v185, 0, (const vp::rpb::Item *)&v151, 2);
    vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)__p);
    vp::objc::ID::~ID(__p);
    applesauce::CF::operator"" _cf("Other Audio Output", 0x12uLL, (CFStringRef *)&v142);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(buf, v2 + 8, 51);
    vp::vx::data_flow::State<void>::State((uint64_t)&v155, (uint64_t)buf);
    v109 = (std::pmr *)vp::vx::data_flow::State<void>::~State(buf);
    v110 = std::pmr::get_default_resource(v109);
    vp::vx::data_flow::Value::Value(buf, v110);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v155, (vp::vx::data_flow::Value *)buf);
    v111 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    v112 = *(_QWORD *)(v111 + 32);
    v113 = *(_OWORD *)(v111 + 16);
    *(_OWORD *)__p = *(_OWORD *)v111;
    v139 = v113;
    v140 = v112;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v205, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)&v193, (id *)&v142, 0, 0, (uint64_t)v205, 1);
    vp::objc::ID::~ID(v205);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v155);
    if (v142)
      CFRelease(v142);
    vp::rpb::Host::add_item(&v184, (vp::rpb::Wire *)&v193);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)&v193, 0, (const vp::rpb::Item *)&v151, 3);
    vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)__p);
    vp::objc::ID::~ID(__p);
    vp::objc::ID::~ID(&v193);
    vp::objc::ID::~ID((id *)v185);
    vp::objc::ID::~ID((id *)v188);
  }
  vp::rpb::Wire::Wire((vp::rpb::Wire *)v205, (const vp::rpb::Item *)&v167, 0, (const vp::rpb::Item *)&v151, 0);
  vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)v205);
  vp::rpb::Wire::Wire((vp::rpb::Wire *)&v191, (const vp::rpb::Item *)&v151, 0, (const vp::rpb::Item *)&v161, 0);
  vp::rpb::Host::add_wire(&v184, (const vp::rpb::Wire *)&v191);
  vp::rpb::Server::add_host(*(id **)a1, (const vp::rpb::Host *)&v184);
  v127 = (id **)a1;
  memset(buf, 0, 24);
  *(_QWORD *)&buf[24] = std::pmr::get_default_resource(v114);
  v155 = 0uLL;
  *(_QWORD *)&v156 = 0;
  *((_QWORD *)&v156 + 1) = std::pmr::get_default_resource(*(std::pmr **)&buf[24]);
  vp::objc::ID::ID((vp::objc::ID *)v185, &v159);
  vp::objc::ID::ID((vp::objc::ID *)((char *)v185 + 8), &v151);
  v115 = 0;
  v190[0] = (CFTypeRef)0x100000000;
  v116 = v128;
  do
  {
    if (*((_DWORD *)v190 + v115))
      v117 = v129;
    else
      v117 = v116;
    if (v117)
    {
      v118 = *((_DWORD *)v190 + v115) ? (id *)((char *)v185 + 8) : (id *)v185;
      if (*((_QWORD *)v185 + (*((_DWORD *)v190 + v115) != 0)))
      {
        vp::objc::ID::ID((vp::objc::ID *)&v137, v118);
        vp::vx::io::Graph::connect(v117, &v137, __p);
        if (v141)
        {
          vp::objc::ID::~ID(&v137);
          vp::rpb::Item::get_parameter_info(v118, 1, (uint64_t)__p);
          caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>((uint64_t *)__p, (uint64_t *)buf, (uint64_t *)v188);
          caulk::__expected_detail::base<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
          v120 = (_DWORD *)*((_QWORD *)&v188[0] + 1);
          for (k = *(_DWORD **)&v188[0]; k != v120; k += 8)
          {
            LODWORD(__p[1]) = 0;
            __p[0] = 0;
            LODWORD(__p[0]) = *k;
            HIDWORD(__p[0]) = 4;
            v194 = 0;
            v193 = 0;
            LODWORD(v193) = *k;
            HIDWORD(v193) = 1;
            vp::rpb::Host::add_parameter_wire(&v184, (unsigned int *)__p, (vp::rpb::Wire *)v118, (unsigned int *)&v193);
          }
          __p[0] = v188;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
          vp::rpb::Item::get_parameter_info(v118, 2, (uint64_t)__p);
          caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>((uint64_t *)__p, (uint64_t *)buf, (uint64_t *)v188);
          caulk::__expected_detail::base<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
          v122 = (_DWORD *)*((_QWORD *)&v188[0] + 1);
          for (m = *(_DWORD **)&v188[0]; m != v122; m += 8)
          {
            LODWORD(__p[1]) = 0;
            __p[0] = 0;
            LODWORD(__p[0]) = *m;
            HIDWORD(__p[0]) = 2;
            v194 = 0;
            v193 = 0;
            LODWORD(v193) = *m;
            HIDWORD(v193) = 4;
            vp::rpb::Host::add_parameter_wire(&v184, (vp::rpb::Wire *)v118, (unsigned int *)__p, (unsigned int *)&v193);
          }
          __p[0] = v188;
          std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
          vp::rpb::Item::get_property_info(v118, 1, (uint64_t)__p);
          caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>((uint64_t *)__p, (uint64_t *)&v155, (uint64_t *)v188);
          caulk::__expected_detail::base<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
          v124 = (_DWORD *)*((_QWORD *)&v188[0] + 1);
          for (n = *(_DWORD **)&v188[0]; n != v124; n += 8)
          {
            LODWORD(__p[1]) = 0;
            __p[0] = 0;
            LODWORD(__p[0]) = *n;
            HIDWORD(__p[0]) = 4;
            v194 = 0;
            v193 = 0;
            LODWORD(v193) = *n;
            HIDWORD(v193) = 1;
            vp::rpb::Host::add_property_wire(&v184, (unsigned int *)__p, (vp::rpb::Wire *)v118, (unsigned int *)&v193);
          }
          __p[0] = v188;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
          vp::rpb::Item::get_property_info(v118, 2, (uint64_t)__p);
          caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>((uint64_t *)__p, (uint64_t *)&v155, (uint64_t *)v188);
          caulk::__expected_detail::base<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
          v126 = (_DWORD *)*((_QWORD *)&v188[0] + 1);
          for (ii = *(_DWORD **)&v188[0]; ii != v126; ii += 8)
          {
            LODWORD(__p[1]) = 0;
            __p[0] = 0;
            LODWORD(__p[0]) = *ii;
            HIDWORD(__p[0]) = 2;
            v194 = 0;
            v193 = 0;
            LODWORD(v193) = *ii;
            HIDWORD(v193) = 4;
            vp::rpb::Host::add_property_wire(&v184, (vp::rpb::Wire *)v118, (unsigned int *)__p, (unsigned int *)&v193);
          }
          __p[0] = v188;
          std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
          v116 = v128;
        }
        else
        {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
          vp::objc::ID::~ID(&v137);
        }
      }
    }
    ++v115;
  }
  while (v115 != 2);
  vp::rpb::Item::get_sub_host(&v151, (uint64_t)__p);
  if (__p[0])
  {
    vp::rpb::Item::get_inputs(&v151, (uint64_t)&v193);
    vp::rpb::Array<vp::rpb::Terminal>::operator[](&v193, 0, (uint64_t)v188);
    applesauce::CF::operator"" _cf("RGBRPBTerminalSubHostPeerUUIDString", 0x23uLL, (CFStringRef *)&v136);
    applesauce::CF::operator"" _cf("Voice_Proc", 0xAuLL, (CFStringRef *)&v135);
    vp::rpb::Host::find_item_by_name(__p, &v135, (uint64_t)v145);
    vp::rpb::Item::get_outputs(v145, (uint64_t)v146);
    vp::rpb::Array<vp::rpb::Terminal>::operator[](v146, 0, (uint64_t)v147);
    vp::rpb::Object::get_uuid(v147, (applesauce::CF::StringRef *)v190);
    vp::rpb::Object::add_user_info<applesauce::CF::StringRef>((id *)v188, &v136, v190);
    if (v190[0])
      CFRelease(v190[0]);
    vp::objc::ID::~ID(v147);
    vp::objc::ID::~ID(v146);
    vp::objc::ID::~ID(v145);
    if (v135)
      CFRelease(v135);
    if (v136)
      CFRelease(v136);
    vp::objc::ID::~ID((id *)v188);
    vp::objc::ID::~ID(&v193);
    if (*(_DWORD *)(v2 + 264) != 3)
    {
      vp::rpb::Item::get_inputs(&v151, (uint64_t)&v193);
      vp::rpb::Array<vp::rpb::Terminal>::operator[](&v193, 1, (uint64_t)v188);
      applesauce::CF::operator"" _cf("RGBRPBTerminalSubHostPeerIndex", 0x1EuLL, (CFStringRef *)&v134);
      LODWORD(v190[0]) = 0;
      vp::rpb::Object::add_user_info<unsigned int>((id *)v188, &v134, (int *)v190);
      if (v134)
        CFRelease(v134);
      vp::objc::ID::~ID((id *)v188);
      vp::objc::ID::~ID(&v193);
      vp::rpb::Item::get_inputs(&v151, (uint64_t)&v193);
      vp::rpb::Array<vp::rpb::Terminal>::operator[](&v193, 2, (uint64_t)v188);
      applesauce::CF::operator"" _cf("RGBRPBTerminalSubHostPeerIndex", 0x1EuLL, (CFStringRef *)&v133);
      LODWORD(v190[0]) = 1;
      vp::rpb::Object::add_user_info<unsigned int>((id *)v188, &v133, (int *)v190);
      if (v133)
        CFRelease(v133);
      vp::objc::ID::~ID((id *)v188);
      vp::objc::ID::~ID(&v193);
      vp::rpb::Item::get_inputs(&v151, (uint64_t)&v193);
      vp::rpb::Array<vp::rpb::Terminal>::operator[](&v193, 3, (uint64_t)v188);
      applesauce::CF::operator"" _cf("RGBRPBTerminalSubHostPeerIndex", 0x1EuLL, (CFStringRef *)&v132);
      LODWORD(v190[0]) = 2;
      vp::rpb::Object::add_user_info<unsigned int>((id *)v188, &v132, (int *)v190);
      if (v132)
        CFRelease(v132);
      vp::objc::ID::~ID((id *)v188);
      vp::objc::ID::~ID(&v193);
    }
  }
  vp::objc::ID::~ID(__p);
  vp::objc::ID::ID((vp::objc::ID *)&v131, *v127);
  vp::objc::ID::ID((vp::objc::ID *)&v130, &v184);
  vp::rpb::Connection::Connection(__p, &v131, &v130);
  vp::objc::ID::operator=((void **)(v2 + 2368), __p);
  vp::objc::ID::operator=((void **)(v2 + 2376), &__p[1]);
  vp::rpb::Connection::~Connection((vp::rpb::Connection *)__p);
  vp::objc::ID::~ID(&v130);
  vp::objc::ID::~ID(&v131);
  vp::objc::ID::operator=((void **)(v2 + 2384), &v171);
  vp::objc::ID::~ID((id *)v185 + 1);
  vp::objc::ID::~ID((id *)v185);
  __p[0] = &v155;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  __p[0] = buf;
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
  vp::objc::ID::~ID(&v191);
  vp::objc::ID::~ID(v205);
  vp::objc::ID::~ID(&v151);
  vp::objc::ID::~ID(&v152);
  vp::objc::ID::~ID(&v153);
  vp::objc::ID::~ID(&v154);
  vp::objc::ID::~ID(&v159);
  vp::objc::ID::~ID(&v161);
  vp::objc::ID::~ID(&v163);
  vp::objc::ID::~ID(&v165);
  vp::objc::ID::~ID(&v167);
  vp::objc::ID::~ID(&v171);
  vp::objc::ID::~ID(&v184);
}

void sub_1B606DC80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<char const*>(id *a1, CFTypeRef *a2, char **a3)
{
  CFTypeRef v5;
  CFTypeRef cf;
  CFTypeRef v7;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v7 = v5;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&cf, *a3);
  vp::rpb::Object::add_user_info(a1, &v7, &cf);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void sub_1B606E594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<applesauce::CF::StringRef const&>(id *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v8 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  cf = v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B606E648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<BOOL const&>(id *a1, CFTypeRef *a2, _BYTE *a3)
{
  CFTypeRef v5;
  CFTypeRef *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v8 = v5;
  if (*a3)
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  cf = *v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B606E700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<std::string>(id *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef v11;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v11 = v5;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a3;
  else
    v7 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  cf = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v11, &cf);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
}

void sub_1B606E7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<std::string const&>(id *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef v11;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v11 = v5;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a3;
  else
    v7 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  cf = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v11, &cf);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
}

void sub_1B606E908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<unsigned int>(id *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef v8;
  int valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v8 = v5;
  valuePtr = *a3;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B606EA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<int>(id *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef v8;
  int valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v8 = v5;
  valuePtr = *a3;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B606EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)result + 32))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    v3 = result[3];
    a3[2] = result[2];
    a3[3] = v3;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v4 = a2[3];
    a3[2] = 0;
    a3[3] = v4;
    return std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(a3, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  return result;
}

uint64_t *caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)result + 32))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    v3 = result[3];
    a3[2] = result[2];
    a3[3] = v3;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v4 = a2[3];
    a3[2] = 0;
    a3[3] = v4;
    return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>(a3, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  return result;
}

void vp::rpb::Object::add_user_info<applesauce::CF::StringRef>(id *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v8 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  cf = v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B606EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BE428;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BE428;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BE428;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7__cloneEPNS0_6__baseISL_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BE428;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

uint64_t **_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEEclEOSK_@<X0>(std::pmr *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t default_resource;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v18;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v21 = 0;
  v20 = 0u;
  default_resource = std::pmr::get_default_resource(a1);
  v22 = default_resource;
  if (!v5)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    if (!v9 || (v10 = std::__shared_weak_count::lock(v9)) == 0)
    {
LABEL_15:
      v18 = v20;
      v8 = v21;
      v7 = v22;
      goto LABEL_16;
    }
    v11 = v10;
    v12 = *((_QWORD *)a1 + 1);
    if (v12)
    {
      v24[0] = &off_1E69BE470;
      v24[1] = &v20;
      v25 = v24;
      vp::vx::Voice_Processor::call_sync(v12, (uint64_t)v24);
      v13 = v25;
      if (v25 == v24)
      {
        v14 = 4;
        v13 = v24;
        goto LABEL_10;
      }
      if (v25)
      {
        v14 = 5;
LABEL_10:
        (*(void (**)(void))(*v13 + 8 * v14))();
      }
    }
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_15;
  }
  v7 = default_resource;
  v8 = 0;
  v18 = 0u;
LABEL_16:
  v19[3] = v7;
  v20 = 0uLL;
  v21 = 0;
  v23 = &v20;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v23);
  *(_OWORD *)a3 = v18;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v7;
  memset(v19, 0, 24);
  *(_BYTE *)(a3 + 32) = 1;
  *(_QWORD *)&v20 = v19;
  return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v20);
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69BE470;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69BE470;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EEclESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  return vp::vx::Property_Manager::for_each_property(a2 + 968, (uint64_t (*)(uint64_t *, _QWORD, _DWORD *))_ZN5caulk12function_refIFvN2vp2vx11Property_IDERKNS2_8PropertyEEE15functor_invokerIZZZZNS2_15Voice_Processor7connectENS1_3rpb6ServerEENK3__0clEvENKUlT_E_clINSB_5ScopeEEEDaSE_ENKUlRKSA_E_clESK_EUlS3_S6_E_EEvRKNS_7details15erased_callableIS7_EES3_S6_, (uint64_t)&v3);
}

void _ZN5caulk12function_refIFvN2vp2vx11Property_IDERKNS2_8PropertyEEE15functor_invokerIZZZZNS2_15Voice_Processor7connectENS1_3rpb6ServerEENK3__0clEvENKUlT_E_clINSB_5ScopeEEEDaSE_ENKUlRKSA_E_clESK_EUlS3_S6_E_EEvRKNS_7details15erased_callableIS7_EES3_S6_(uint64_t ***a1, int a2)
{
  uint64_t **v3;
  char *v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  void *p_p;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void **v12;
  CFIndex v13;
  unsigned __int8 *v14;
  CFIndex v15;
  size_t v16;
  int v17;
  void **v18;
  CFIndex v19;
  CFStringRef v20;
  CFStringRef v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::runtime_error *exception;
  void *__p;
  size_t v35;
  int64_t v36;
  _QWORD v37[5];

  v3 = *a1;
  v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v4;
  v7 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    p_p = operator new(v9 + 1);
    v35 = v7;
    v36 = v10 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v36) = v5;
  p_p = &__p;
  if (v5)
LABEL_8:
    memmove(p_p, v6, v7);
  *((_BYTE *)p_p + v7) = 0;
  v11 = HIBYTE(v36);
  v12 = (void **)__p;
  v13 = v35;
  if (v36 >= 0)
    v14 = (unsigned __int8 *)&__p;
  else
    v14 = (unsigned __int8 *)__p;
  v15 = HIBYTE(v36);
  if (v36 >= 0)
    v16 = HIBYTE(v36);
  else
    v16 = v35;
  if (v16)
  {
    do
    {
      v17 = *v14;
      if (v17 == 95)
        LOBYTE(v17) = 32;
      *v14++ = v17;
      --v16;
    }
    while (v16);
    v15 = HIBYTE(v36);
    v12 = (void **)__p;
    v13 = v35;
    v11 = HIBYTE(v36);
  }
  if (v11 >= 0)
    v18 = &__p;
  else
    v18 = v12;
  if (v11 >= 0)
    v19 = v15;
  else
    v19 = v13;
  v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
  v21 = v20;
  if (!v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v22 = *v3;
  v23 = (*v3)[1];
  v24 = (*v3)[2];
  if (v23 >= v24)
  {
    v26 = (uint64_t)(v23 - *v22) >> 5;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 59)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v28 = v24 - *v22;
    if (v28 >> 4 > v27)
      v27 = v28 >> 4;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
      v29 = 0x7FFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v37[4] = v22 + 3;
    v30 = std::__allocate_at_least[abi:ne180100]<vp::Allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>>(v22 + 3, v29);
    v31 = v30 + 32 * v26;
    v37[0] = v30;
    v37[1] = v31;
    v37[3] = v30 + 32 * v32;
    *(_DWORD *)v31 = a2;
    *(_QWORD *)(v31 + 8) = v21;
    *(_QWORD *)(v31 + 16) = 0;
    *(_WORD *)(v31 + 24) = 1;
    v37[2] = v31 + 32;
    std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__swap_out_circular_buffer(v22, v37);
    v25 = v22[1];
    std::__split_buffer<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info> &>::~__split_buffer(v37);
  }
  else
  {
    *(_DWORD *)v23 = a2;
    *(_QWORD *)(v23 + 8) = v20;
    *(_QWORD *)(v23 + 16) = 0;
    *(_WORD *)(v23 + 24) = 1;
    v25 = v23 + 32;
  }
  v22[1] = v25;
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
}

void sub_1B606F20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info> &>::~__split_buffer(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69BE4B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69BE4B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69BE4B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7__cloneEPNS0_6__baseISL_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69BE4B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEEclEOjOSK_SN_(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v6 = 0;
  v22 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v8 = *a4;
  v19 = *a2;
  v18 = 0;
  if (!(v8 | v7))
  {
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10 || (v11 = std::__shared_weak_count::lock(v10)) == 0)
    {
LABEL_14:
      v6 = v18;
      goto LABEL_15;
    }
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v20[0] = &off_1E69BE500;
      v20[1] = &v19;
      v20[2] = &v18;
      v21 = v20;
      vp::vx::Voice_Processor::call_sync(v13, (uint64_t)v20);
      v14 = v21;
      if (v21 == v20)
      {
        v15 = 4;
        v14 = v20;
        goto LABEL_9;
      }
      if (v21)
      {
        v15 = 5;
LABEL_9:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
    }
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_14;
  }
LABEL_15:
  *(_QWORD *)a5 = v6;
  *(_BYTE *)(a5 + 8) = 1;
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EED0Ev()
{
  JUMPOUT(0x1BCC95CECLL);
}

__n128 _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69BE500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69BE500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EEclESK_(uint64_t a1, uint64_t a2)
{
  _BYTE v2[8];

  vp::vx::Property_Manager::get_property(a2 + 968, **(_DWORD **)(a1 + 8), *(const void ***)(a1 + 16), v2);
}

void **caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>(vp *a1)
{
  uint64_t v1;
  NSObject *log;
  vp *log_context_info;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  void **v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  _QWORD *v15;
  _BOOL4 v16;
  id *v17;
  id v19;
  void *__p[2];
  unsigned __int8 v21;
  char v22;
  CFTypeRef v23;
  id v24;
  CFTypeRef cf;
  id v26;
  id v27;
  uint64_t v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = **(_QWORD **)a1;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    v4 = v21;
    v5 = __p[1];
    v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0)
        v7 = v4;
      else
        v7 = (unint64_t)v5;
      v8 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v8 = __p;
      if (v7)
        v9 = " ";
      else
        v9 = "";
      *(_DWORD *)buf = 136315394;
      v30 = v8;
      v31 = 2080;
      v32 = v9;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%s%sdisconnect RPB", buf, 0x16u);
    }
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  vp::objc::ID::ID((vp::objc::ID *)&v27, (id *)(v1 + 2376));
  if (v27)
  {
    v10 = *(_QWORD **)(v1 + 2400);
    applesauce::CF::operator"" _cf("Uplink", 6uLL, (CFStringRef *)&cf);
    vp::rpb::Host::find_item_by_name(&v27, &cf, (uint64_t)&v26);
    if (cf)
      CFRelease(cf);
    v11 = *(_QWORD **)(v1 + 2504);
    applesauce::CF::operator"" _cf("Downlink", 8uLL, (CFStringRef *)&v23);
    vp::rpb::Host::find_item_by_name(&v27, &v23, (uint64_t)&v24);
    if (v23)
      CFRelease(v23);
    vp::objc::ID::ID((vp::objc::ID *)buf, &v26);
    vp::objc::ID::ID((vp::objc::ID *)((char *)&v30 + 4), &v24);
    v12 = 0;
    v28 = 0x100000000;
    do
    {
      v13 = *(_DWORD *)&buf[v12 - 8];
      v14 = v13 == 0;
      if (v13)
        v15 = v11;
      else
        v15 = v10;
      if (v15)
      {
        v16 = v13 != 0;
        v17 = v14 ? (id *)buf : (id *)((char *)&v30 + 4);
        if (*(_QWORD *)&buf[8 * v16])
        {
          vp::objc::ID::ID((vp::objc::ID *)&v19, v17);
          vp::vx::io::Graph::disconnect(v15, &v19, __p);
          if (!v22)
            vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
          vp::objc::ID::~ID(&v19);
        }
      }
      v12 += 4;
    }
    while (v12 != 8);
    vp::objc::ID::~ID((id *)((char *)&v30 + 4));
    vp::objc::ID::~ID((id *)buf);
    vp::objc::ID::~ID(&v24);
    vp::objc::ID::~ID(&v26);
  }
  vp::objc::ID::~ID(&v27);
  vp::rpb::Connection::operator=((uint64_t *)(v1 + 2368));
  return vp::rpb::Host::Delegate::operator=((void **)(v1 + 2384));
}

void sub_1B606F7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, CFTypeRef a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_BYTE *)v11 + 24) = 0;
  *((_BYTE *)v11 + 48) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1B606FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::optional<std::string>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::optional<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 48))
    {
      if (*((char *)__p + 47) < 0)
        operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

void OUTLINED_FUNCTION_6(void **a1@<X8>, uint64_t a2, void **a3)
{
  a3 = a1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a3);
}

void vp::vx::Voice_Processor::add_component()
{
  _os_crash();
  __break(1u);
}

void ___ZN2vp2vx15Voice_Processor10call_asyncENSt3__18functionIFvRS1_EEE_block_invoke_cold_1(std::__shared_weak_count *a1)
{
  ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
  std::__shared_weak_count::__release_weak(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11__cold_1(_QWORD *result)
{
  if (result[5])
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(result + 2, (_QWORD *)result[3]);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;

  OUTLINED_FUNCTION_6((void **)(a1 + 112), v2, v5);
  OUTLINED_FUNCTION_6((void **)(a1 + 88), v3, v6);
  OUTLINED_FUNCTION_6((void **)(a1 + 64), v4, v7);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  OUTLINED_FUNCTION_17();
}

void std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(_QWORD *a1, _OWORD *a2)
{
  OUTLINED_FUNCTION_1_2(a1, a2);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_3_1();
  __break(1u);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(uint64_t a1, unint64_t *a2, float a3, float a4)
{
  uint64_t i;
  char *v6;

  if (*(_DWORD *)(a1 + 4))
  {
    DspLib::XTC::HRIRDatabase::getHRTF(a1, 0, (uint64_t)a2, a4 - (float)(a3 * 0.5), (float)(a3 * 0.5) + a4);
  }
  else
  {
    *a2 = 0;
    for (i = 2; i != 42; i += 10)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)&a2[i], *a2);
    v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC_HRIRdatabase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 107);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::XTC::HRIRDatabase::getHRTF(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  DspLib::ComplexVector *v10;
  uint64_t i;
  DspLib::ComplexVector *v12;
  DspLib::XTC::HRIRDatabase *v13;
  int v14;
  int v15;
  float v16;
  DspLib::ComplexVector *v17;
  DspLib::XTC::HRIRDatabase *v18;
  int v19;
  int v20;
  float v21;

  *(_QWORD *)a3 = (1 << (*(_DWORD *)(a1 + 4) - 1));
  v10 = (DspLib::ComplexVector *)(a3 + 16);
  for (i = 16; i != 336; i += 80)
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a3 + i), *(_QWORD *)a3);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)a1;
  if ((*(_BYTE *)(a1 + 145) & *(_BYTE *)(a1 + 144)) != 0)
  {
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, v10, a4);
    v12 = (DspLib::ComplexVector *)(a3 + 96);
    v13 = (DspLib::XTC::HRIRDatabase *)a1;
    v14 = 0;
    v15 = a2;
    v16 = a5;
LABEL_5:
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(v13, v14, v15, v12, v16);
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 1, a2, (DspLib::ComplexVector *)(a3 + 176), a4);
    v17 = (DspLib::ComplexVector *)(a3 + 256);
    v18 = (DspLib::XTC::HRIRDatabase *)a1;
    v19 = 1;
    v20 = a2;
    v21 = a5;
LABEL_8:
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(v18, v19, v20, v17, v21);
    return;
  }
  if (*(_BYTE *)(a1 + 144))
  {
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, v10, a4);
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, (DspLib::ComplexVector *)(a3 + 96), a5);
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, (DspLib::ComplexVector *)(a3 + 176), -a4);
    v21 = -a5;
    v17 = (DspLib::ComplexVector *)(a3 + 256);
    v18 = (DspLib::XTC::HRIRDatabase *)a1;
    v19 = 0;
    v20 = a2;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 145))
  {
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 1, a2, v10, -a4);
    v16 = -a5;
    v12 = (DspLib::ComplexVector *)(a3 + 96);
    v13 = (DspLib::XTC::HRIRDatabase *)a1;
    v14 = 1;
    v15 = a2;
    goto LABEL_5;
  }
}

float DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(DspLib::XTC::HRIRDatabase *a1, int a2, int a3, DspLib::ComplexVector *a4, float a5)
{
  double v9;
  float v10;
  float v11;
  _BYTE v13[96];
  _BYTE v14[24];
  double v15;
  unsigned int v16[2];

  *(_QWORD *)v16 = 0;
  v9 = DspLib::XTC::HRIRDatabase::indexesAndInterpolationFactorForAzimuth(a1, a5, &v16[1], v16);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v14, 1uLL, 1u);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v13, 1uLL, 1u);
  std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()((uint64_t)a1 + 112, v16[1], a2, a3, (uint64_t)v14);
  std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()((uint64_t)a1 + 112, v16[0], a2, a3, (uint64_t)v13);
  if (a4
    && vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v14)
    && vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v13))
  {
    v10 = v9;
    DspLib::XTC::HRIRDatabase::performFFTandInterpolation(a1, (DspLibBuffer *)v14, (DspLibBuffer *)v13, v10, a4);
  }
  v11 = v15;
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v13);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v14);
  return v11;
}

void sub_1B606FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)va);
  _Unwind_Resume(a1);
}

double DspLib::XTC::HRIRDatabase::indexesAndInterpolationFactorForAzimuth(DspLib::XTC::HRIRDatabase *this, float a2, unsigned int *a3, unsigned int *a4)
{
  vp::utility::CPU_Profiler *v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  double v14;
  double v15;
  unint64_t cycle_count;
  unint64_t v18;
  unsigned int v19;
  float v20;
  double v21;
  double v22;
  unint64_t v24;

  *a3 = 0;
  *a4 = 0;
  v7 = (DspLib::XTC::HRIRDatabase *)((char *)this + 16);
  v8 = DspLibBuffer::channel((DspLib::XTC::HRIRDatabase *)((char *)this + 16), 0);
  v9 = 180.0;
  v10 = 180.0;
  if (vp::utility::CPU_Profiler::get_cycle_count(v7))
  {
    v11 = 0;
    v12 = 0;
    v10 = 180.0;
    do
    {
      v13 = *(float *)(v8 + 4 * v11) - a2;
      v14 = v13;
      if (v13 <= 180.0)
      {
        if (v13 < -180.0)
          v14 = v14 + 360.0;
      }
      else
      {
        v14 = v14 + -360.0;
      }
      v15 = fabs(v14);
      if (v14 <= 0.0 && v15 < v10)
      {
        *a3 = v12;
        v10 = v15;
      }
      v11 = v12 + 1;
      cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v7);
      v12 = v11;
    }
    while (cycle_count > v11);
  }
  if (vp::utility::CPU_Profiler::get_cycle_count(v7))
  {
    v18 = 0;
    v19 = 0;
    v9 = 180.0;
    do
    {
      v20 = *(float *)(v8 + 4 * v18) - a2;
      v21 = v20;
      if (v20 <= 180.0)
      {
        if (v20 < -180.0)
          v21 = v21 + 360.0;
      }
      else
      {
        v21 = v21 + -360.0;
      }
      if (v19 != *a3)
      {
        v22 = fabs(v21);
        if (v21 > 0.0 && v22 < v9)
        {
          *a4 = v19;
          v9 = v22;
        }
      }
      v18 = v19 + 1;
      v24 = vp::utility::CPU_Profiler::get_cycle_count(v7);
      v19 = v18;
    }
    while (v24 > v18);
  }
  return v10 / (v10 + v9);
}

uint64_t std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

void DspLib::XTC::HRIRDatabase::performFFTandInterpolation(DspLib::XTC::HRIRDatabase *this, DspLibBuffer *a2, DspLibBuffer *x2_0, float a4, DspLib::ComplexVector *a5)
{
  int v9;
  unint64_t v10;
  int cycle_count;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  char *v21;
  DSPSplitComplex v22;
  DSPSplitComplex __Z;
  vDSP_Length v24[2];
  DSPComplex *v25;
  DSPComplex *v26;
  DSPComplex *v27;
  DSPComplex *v28;
  DSPComplex v29;

  v9 = *((_DWORD *)this + 1);
  v10 = 1 << v9;
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v12 = *((_QWORD *)a5 + 2);
  if (v12 == (unint64_t)(1 << v9) >> 1)
  {
    LODWORD(v13) = cycle_count;
    std::vector<float>::vector(&v27, v10);
    std::vector<float>::vector(&v25, v10);
    DspLib::clear((float *)v27, ((char *)v28 - (char *)v27) >> 2);
    DspLib::clear((float *)v25, ((char *)v26 - (char *)v25) >> 2);
    if (v10 >= v13)
      v13 = v13;
    else
      v13 = v10;
    v14 = (const void *)DspLibBuffer::channel(a2, 0);
    if ((_DWORD)v13)
      memmove(v27, v14, 4 * v13);
    v15 = (const void *)DspLibBuffer::channel(x2_0, 0);
    if ((_DWORD)v13)
      memmove(v25, v15, 4 * v13);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v24, v10);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, v12, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v22, v12, 0);
    DspLib::multiply((float *)v27, ((char *)v28 - (char *)v27) >> 2, 0.5);
    DspLib::multiply((float *)v25, ((char *)v26 - (char *)v25) >> 2, 0.5);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v24, v27, ((char *)v28 - (char *)v27) >> 2, &__Z);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v24, v25, ((char *)v26 - (char *)v25) >> 2, &v22);
    v16 = v10 >> 1;
    *__Z.imagp = 0.0;
    *v22.imagp = 0.0;
    if (v9)
    {
      v17 = 0;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v16;
      do
      {
        DspLib::FFT::interpolate((DspLib *)1, __Z.realp[v17], __Z.imagp[v17], v22.realp[v17], v22.imagp[v17], a4);
        DspLib::ComplexSpan::setElement(a5, v17++, v29);
      }
      while (v18 != v17);
    }
    v19 = *(float *)(*(_QWORD *)a5 + 4 * (v16 - 1));
    v20 = *(float *)(*((_QWORD *)a5 + 1) + 4 * (v16 - 1));
    **((float **)a5 + 1) = DspLib::sign((DspLib *)1, v20) * sqrtf((float)(v20 * v20) + (float)(v19 * v19));
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v22);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)v24);
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
  }
  else
  {
    v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC_HRIRdatabase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 240);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1B60704A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va1);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(v3 - 160);
  v5 = *(void **)(v3 - 144);
  if (v5)
  {
    *(_QWORD *)(v3 - 136) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v3 - 120);
  if (v6)
  {
    *(_QWORD *)(v3 - 112) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(_QWORD *a1, DSPComplex *__C, int a3, DSPSplitComplex *__Z)
{
  const vDSP_DFT_SetupStruct *v6;

  vDSP_ctoz(__C, 2, __Z, 1, *a1 >> 1);
  v6 = (const vDSP_DFT_SetupStruct *)a1[1];
  if (v6)
    vDSP_DFT_Execute(v6, __Z->realp, __Z->imagp, __Z->realp, __Z->imagp);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B60705CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(uint64_t a1)
{
  vDSP_DFT_SetupStruct *v2;

  v2 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v2)
    vDSP_DFT_DestroySetup(v2);
  return a1;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

vDSP_Length *DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(vDSP_Length *a1, vDSP_Length a2)
{
  vDSP_DFT_Setup Setup;
  char *v5;

  *a1 = a2;
  Setup = vDSP_DFT_zrop_CreateSetup(0, a2, vDSP_DFT_FORWARD);
  a1[1] = (vDSP_Length)Setup;
  if (!Setup)
  {
    v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.h");
    printf("DSP Sound assertion in %s at line %d\n", v5, 63);
    ++DspLibDebug::mAssertCounter;
  }
  return a1;
}

DspLib::PowerGuard::Algorithm *DspLib::PowerGuard::Algorithm::Algorithm(DspLib::PowerGuard::Algorithm *this)
{
  _OWORD *v2;
  uint64_t v3;
  int64x2_t v4;

  v2 = (_OWORD *)((char *)this + 428);
  v3 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::PowerGuard::Parameters::kDefinition);
  *(_QWORD *)v3 = &off_1E69BE5F8;
  *(_BYTE *)(v3 + 296) = 1;
  *(_QWORD *)(v3 + 304) = 0;
  *(_DWORD *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 328) = 0;
  v4 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v3 + 352) = v4;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_QWORD *)(v3 + 336) = &unk_1E69C4D88;
  *(_QWORD *)(v3 + 344) = 0x4097700000000000;
  *v2 = xmmword_1B6626C30;
  *(_QWORD *)(v3 + 444) = 0x3F40000000000000;
  *(_QWORD *)(v3 + 456) = 0;
  *(_BYTE *)(v3 + 464) = 0;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_QWORD *)(v3 + 536) = 1;
  *(_DWORD *)(v3 + 544) = 1065353216;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_QWORD *)(v3 + 584) = 1;
  *(_DWORD *)(v3 + 592) = 1065353216;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 616) = 0u;
  *(_QWORD *)(v3 + 632) = 0x40E7700000000000;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_DWORD *)(v3 + 688) = 1065353216;
  *(_QWORD *)(v3 + 712) = 0;
  *(_QWORD *)(v3 + 696) = 0;
  *(_QWORD *)(v3 + 704) = 0;
  *(_QWORD *)(v3 + 728) = 0x4097700000000000;
  *(_OWORD *)(v3 + 796) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)(v3 + 784) = 0u;
  *(int64x2_t *)(v3 + 736) = v4;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_QWORD *)(v3 + 720) = &unk_1E69C4D88;
  v2[24] = xmmword_1B6626C30;
  *(_QWORD *)(v3 + 828) = 0x3F40000000000000;
  *(_QWORD *)(v3 + 840) = 0;
  *(_BYTE *)(v3 + 848) = 0;
  *(_OWORD *)(v3 + 904) = 0u;
  *(_OWORD *)(v3 + 888) = 0u;
  *(_OWORD *)(v3 + 872) = 0u;
  *(_OWORD *)(v3 + 856) = 0u;
  *(_QWORD *)(v3 + 920) = 1;
  *(_DWORD *)(v3 + 928) = 1065353216;
  *(_OWORD *)(v3 + 936) = 0u;
  *(_OWORD *)(v3 + 952) = 0u;
  *(_QWORD *)(v3 + 968) = 1;
  *(_DWORD *)(v3 + 976) = 1065353216;
  *(_OWORD *)(v3 + 984) = 0u;
  *(_OWORD *)(v3 + 1000) = 0u;
  *(_QWORD *)(v3 + 1024) = 0x4097700000000000;
  *(_QWORD *)(v3 + 1032) = 1;
  *(_QWORD *)(v3 + 1040) = 1;
  *(_OWORD *)(v3 + 1092) = 0u;
  *(_OWORD *)(v3 + 1064) = 0u;
  *(_OWORD *)(v3 + 1080) = 0u;
  *(_OWORD *)(v3 + 1048) = 0u;
  *(_QWORD *)(v3 + 1016) = &unk_1E69C4DB8;
  *(_QWORD *)(v3 + 1112) = 1;
  *(_DWORD *)(v3 + 1120) = 1065353216;
  *(_OWORD *)(v3 + 1128) = 0u;
  *(_OWORD *)(v3 + 1144) = 0u;
  *(_QWORD *)(v3 + 1160) = 0x40E7700000000000;
  *(_OWORD *)(v3 + 1200) = 0u;
  *(_OWORD *)(v3 + 1184) = 0u;
  *(_OWORD *)(v3 + 1168) = 0u;
  *(_DWORD *)(v3 + 1216) = 1065353216;
  *(_QWORD *)(v3 + 1232) = 0;
  *(_QWORD *)(v3 + 1224) = 0;
  *(_QWORD *)(v3 + 1240) = 0;
  *(_QWORD *)(v3 + 1256) = 0x4097700000000000;
  *(int64x2_t *)(v3 + 1264) = v4;
  *(_OWORD *)(v3 + 1324) = 0u;
  *(_OWORD *)(v3 + 1312) = 0u;
  *(_OWORD *)(v3 + 1296) = 0u;
  *(_OWORD *)(v3 + 1280) = 0u;
  *(_QWORD *)(v3 + 1248) = &unk_1E69C4DB8;
  *(_QWORD *)(v3 + 1344) = 1;
  *(_DWORD *)(v3 + 1352) = 1065353216;
  *(_OWORD *)(v3 + 1392) = 0u;
  *(_OWORD *)(v3 + 1376) = 0u;
  *(_OWORD *)(v3 + 1360) = 0u;
  DspLib::PowerGuard::TargetCalculator::TargetCalculator((DspLib::PowerGuard::TargetCalculator *)(v3 + 1408));
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 222) = 0;
  *((_DWORD *)this + 450) = 0;
  *((_QWORD *)this + 224) = 0;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *(_OWORD *)((char *)this + 1756) = 0u;
  *((_BYTE *)this + 1808) = 0;
  *((_DWORD *)this + 453) = 0;
  (*(void (**)(DspLib::PowerGuard::Algorithm *))(*(_QWORD *)this + 152))(this);
  return this;
}

void sub_1B6070914(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::PowerGuard::WooferPowerAnalyzer *v2;
  DspLib::PowerGuard::WooferPowerAnalyzer *v3;
  DspLib::PowerGuard::TweeterPowerAnalyzer *v4;
  DspLib::PowerGuard::TweeterPowerAnalyzer *v5;
  DspLib::PowerGuard::PowerController *v6;
  DspLib::PowerGuard::PowerController *v7;

  v7 = v6;
  DspLib::PowerGuard::PowerController::~PowerController(v7);
  DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(v5);
  DspLib::PowerGuard::GainApplier::~GainApplier((DspLib::PowerGuard::GainApplier *)(v1 + 1160));
  DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(v4);
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(v3);
  DspLib::PowerGuard::GainApplier::~GainApplier((DspLib::PowerGuard::GainApplier *)(v1 + 632));
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters((DspLib::AlgorithmBaseNewParameters *)v1);
  _Unwind_Resume(a1);
}

void DspLib::PowerGuard::PowerController::~PowerController(DspLib::PowerGuard::PowerController *this)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  uint64_t j;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 46);
  if (v2)
  {
    *((_QWORD *)this + 47) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  for (i = 0; i != -96; i -= 24)
  {
    v5 = *(void **)((char *)this + i + 168);
    if (v5)
    {
      *(_QWORD *)((char *)this + i + 176) = v5;
      operator delete(v5);
    }
  }
  for (j = 0; j != -96; j -= 24)
  {
    v7 = *(void **)((char *)this + j + 72);
    if (v7)
    {
      *(_QWORD *)((char *)this + j + 80) = v7;
      operator delete(v7);
    }
  }
}

void DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(DspLib::PowerGuard::TweeterPowerAnalyzer *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E69C4DB8;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E69BE9A8;
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

void DspLib::PowerGuard::GainApplier::~GainApplier(DspLib::PowerGuard::GainApplier *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 64);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(DspLib::AlgorithmBaseNewParameters *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E69C47E8;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E69C46F0;
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

uint64_t DspLib::PowerGuard::Algorithm::initialize(DspLib::PowerGuard::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    DspLib::PowerGuard::WooferPowerAnalyzer::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 336), *((double *)this + 3));
    DspLib::PowerGuard::WooferPowerAnalyzer::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 720), *((double *)this + 3));
    DspLib::PowerGuard::TweeterPowerAnalyzer::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1016), *((double *)this + 3));
    DspLib::PowerGuard::TweeterPowerAnalyzer::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1248), *((double *)this + 3));
    v5 = (4 * *((_DWORD *)this + 90));
    *((_DWORD *)this + 8) = v5;
    *((_DWORD *)this + 9) = v5;
    DspLib::PowerGuard::GainApplier::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 632), *((double *)this + 3), 1uLL, v5);
    v6 = *((_DWORD *)this + 3);
    v7 = v6 != 0;
    v8 = v6 - 1;
    if (v7)
      v9 = v8;
    else
      v9 = 0;
    DspLib::PowerGuard::GainApplier::initialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1160), *((double *)this + 3), v9, *((unsigned int *)this + 8));
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::PowerGuard::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
  }
  (*(void (**)(DspLib::PowerGuard::Algorithm *))(*(_QWORD *)this + 152))(this);
  return v4;
}

BOOL DspLib::PowerGuard::Algorithm::uninitialize(DspLib::PowerGuard::Algorithm *this)
{
  DspLib::PowerGuard::WooferPowerAnalyzer::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 336));
  DspLib::PowerGuard::WooferPowerAnalyzer::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 720));
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 131, (unint64_t *)1, 0);
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 160, (unint64_t *)1, 0);
  DspLib::PowerGuard::GainApplier::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 632));
  DspLib::PowerGuard::GainApplier::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1160));
  return DspLib::PowerGuard::PowerController::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1408));
}

void DspLib::PowerGuard::Algorithm::enforceParameterConstraints(DspLib::PowerGuard::Algorithm *this)
{
  uint64_t v2;
  uint64_t *v3;
  float v4;
  float *v5;

  v2 = 0;
  v3 = (uint64_t *)((char *)this + 264);
  do
  {
    v4 = DspLib::AlgorithmParametersInstance::operator[](v3, v2 + 11);
    if (v4 > DspLib::AlgorithmParametersInstance::operator[](v3, v2 + 7))
    {
      v5 = (float *)((char *)this + 4 * v2);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)v3, v2 + 11, v5[416]);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)v3, v2 + 7, v5[420]);
    }
    ++v2;
  }
  while (v2 != 4);
}

char *DspLib::PowerGuard::Algorithm::setParameters(DspLib::PowerGuard::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  unint64_t v3;
  char *result;
  unint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  DspLib *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  float v30;
  float v31;

  result = DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)this + 8))
  {
    DspLib::PowerGuard::Algorithm::enforceParameterConstraints(this);
    *((_BYTE *)this + 296) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) >= 0.5;
    LODWORD(v3) = vcvtad_u64_f64(*((double *)this + 43)* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u)/ 1000.0);
    v6 = *((_QWORD *)this + 45) * v3;
    *((_QWORD *)this + 38) = v6;
    v7 = (float)((float)v6 * 1000.0) / *((double *)this + 3);
    *((float *)this + 78) = v7;
    v8 = DspLib::AlgorithmParametersInstance::group((DspLib::PowerGuard::Algorithm *)((char *)this + 264), 0);
    v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
    v11 = DspLib::dB2Amp(v10, -v9);
    DspLib::PowerGuard::PowerController::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1408), v3, (const float *)(v8 + 44), (const float *)(v8 + 28), 4uLL, v11);
    if (*((_BYTE *)this + 1808))
    {
      v12 = *((float *)this + 453);
    }
    else
    {
      v12 = (*(float (**)(DspLib::PowerGuard::Algorithm *, uint64_t))(*(_QWORD *)this + 112))(this, 15);
      *((float *)this + 453) = v12;
    }
    v13 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x11u);
    v14 = (float *)(v8 + 12);
    v15 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x14u);
    v16 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u);
    DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 336), v12, v13, v14, 4uLL, v15, v16);
    v17 = *((float *)this + 453);
    v18 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x11u);
    v19 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x14u);
    v20 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u);
    DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 720), v17, v18, v14, 4uLL, v19, v20);
    v21 = *((_QWORD *)this + 38);
    v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u);
    v23 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x16u);
    DspLib::PowerGuard::GainApplier::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 632), v21, v22, v23);
    v24 = 1.0 / DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x15u);
    v25 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x10u);
    v26 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x12u);
    DspLib::PowerGuard::TweeterPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1016), v25, v24, v26, v14, 4uLL);
    v27 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x10u);
    v28 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x12u);
    DspLib::PowerGuard::TweeterPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1248), v27, v24, v28, v14, 4uLL);
    v29 = *((_QWORD *)this + 38);
    v30 = *((float *)this + 78);
    v31 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x17u);
    return (char *)DspLib::PowerGuard::GainApplier::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1160), v29, v30, v31);
  }
  return result;
}

void DspLib::PowerGuard::Algorithm::setSpVACalibration(uint64_t a1, _DWORD *a2)
{
  uint64_t *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  *(_BYTE *)(a1 + 1808) = 1;
  *(_DWORD *)(a1 + 1812) = *a2;
  v3 = (uint64_t *)(a1 + 264);
  v4 = (float *)(DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)(a1 + 264), 0) + 12);
  v5 = *(float *)(a1 + 1812);
  v6 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x11u);
  v7 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x14u);
  v8 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x13u);
  DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::WooferPowerAnalyzer *)(a1 + 336), v5, v6, v4, 4uLL, v7, v8);
  v9 = *(float *)(a1 + 1812);
  v10 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x11u);
  v11 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x14u);
  v12 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x13u);
  DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::WooferPowerAnalyzer *)(a1 + 720), v9, v10, v4, 4uLL, v11, v12);
}

void DspLib::PowerGuard::Algorithm::reset(float **this)
{
  DspLib::PowerGuard::WooferPowerAnalyzer::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)(this + 42));
  DspLib::PowerGuard::WooferPowerAnalyzer::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)(this + 90));
  DspLib::PowerGuard::TweeterPowerAnalyzer::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)(this + 127));
  DspLib::PowerGuard::TweeterPowerAnalyzer::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)(this + 156));
  DspLib::PowerGuard::PowerController::reset(this + 176);
  this[40] = 0;
  this[41] = 0;
  *((_OWORD *)this + 87) = 0u;
  DspLib::PowerGuard::GainApplier::reset((DspLib::PowerGuard::GainApplier *)(this + 79));
  DspLib::PowerGuard::GainApplier::reset((DspLib::PowerGuard::GainApplier *)(this + 145));
}

float DspLib::PowerGuard::Algorithm::setAdmittanceModel(uint64_t a1, uint64_t a2)
{
  float result;

  DspLib::PowerGuard::WooferPowerAnalyzer::setAdmittanceCoeffs(a1 + 336, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 16);
  DspLib::PowerGuard::WooferPowerAnalyzer::setAdmittanceCoeffs(a1 + 720, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 816) = result;
  return result;
}

void DspLib::PowerGuard::Algorithm::processBlock(DspLib::PowerGuard::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float **v10;
  size_t v11;
  int v12;
  uint64_t v13;
  const float *const *v14;
  float v15;
  float v16;
  float v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float **v22;
  float *const *v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  DspLib::PowerGuard::Algorithm *v29;
  uint64_t v30;
  DspLib::PowerGuard::PowerAnalyzerBase *v31;
  const float *const *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (cycle_count)
  {
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    v7 = DspLibBuffer::numChannels(a2);
    v33 = &v30;
    MEMORY[0x1E0C80A78](v7);
    v10 = (float **)((char *)&v30 - v9);
    if (v8 >= 0x200)
      v11 = 512;
    else
      v11 = v8;
    bzero((char *)&v30 - v9, v11);
    DspLibBuffer::channelsPtr((float *)a2, v10);
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::Algorithm *)((char *)this + 336), (const float *const *)v10, 1, cycle_count, &v46, 0);
    v12 = DspLibBuffer::numChannels(a2);
    v13 = (v12 - 1);
    v44 = 0u;
    v45 = 0u;
    if (v12 == 1)
      v14 = 0;
    else
      v14 = (const float *const *)(v10 + 1);
    v32 = v14;
    v42 = 0uLL;
    v43 = 0uLL;
    v40 = 0uLL;
    v41 = 0uLL;
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::Algorithm *)((char *)this + 1016), v14, v13, cycle_count, &v40, 0);
    v15 = DspLib::PowerGuard::PowerController::process((uint64_t)this + 1408, (uint64_t)&v46, (uint64_t *)this + 94, (uint64_t)&v40, (uint64_t *)this + 160);
    v17 = v16;
    v18 = *((unsigned __int8 *)this + 296);
    v19 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v19);
    v22 = (float **)((char *)&v30 - v21);
    v31 = (DspLib::PowerGuard::Algorithm *)((char *)this + 1248);
    if ((_DWORD)v13)
      v23 = (float *const *)((char *)&v30 - v21 + 8);
    else
      v23 = 0;
    if (v18)
    {
      v17 = 1.0;
      v15 = 1.0;
    }
    if (v20 >= 0x200)
      v24 = 512;
    else
      v24 = v20;
    bzero((char *)&v30 - v21, v24);
    DspLibBuffer::channelsPtr((float *)a3, v22);
    DspLib::PowerGuard::GainApplier::process((DspLib::PowerGuard::Algorithm *)((char *)this + 632), (const float *const *)v10, v22, cycle_count, v15);
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::Algorithm *)((char *)this + 720), (const float *const *)v22, 1, cycle_count, &v34, v25);
    v48 = v36;
    v49 = v37;
    v50 = v38;
    v51 = v39;
    v46 = v34;
    v47 = v35;
    DspLib::PowerGuard::GainApplier::process((DspLib::PowerGuard::Algorithm *)((char *)this + 1160), v32, v23, cycle_count, v17);
    DspLib::PowerGuard::PowerAnalyzerBase::process(v31, (const float *const *)v23, v13, cycle_count, &v34, v26);
    v42 = v36;
    v43 = v37;
    v44 = v38;
    v45 = v39;
    v40 = v34;
    v41 = v35;
    v27 = *((unsigned __int8 *)this + 40);
    if (*((_BYTE *)this + 40) && (_QWORD)v51)
    {
      v28 = 0;
      v29 = this;
      do
      {
        *((float *)v29 + 80) = DspLib::maxv((const float *)((char *)&v47 + v28), v51);
        *((float *)v29 + 348) = DspLib::maxv((const float *)((char *)&v41 + v28), v51);
        v28 += 16;
        v29 = (DspLib::PowerGuard::Algorithm *)((char *)v29 + 4);
      }
      while (v28 != 64);
      v27 = *((unsigned __int8 *)this + 40);
    }
    if (v27)
      DspLib::CPUMeasure::stop((DspLib::PowerGuard::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
  }
}

float DspLib::PowerGuard::Algorithm::status(uint64_t a1, uint64_t a2)
{
  float v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  DspLib *v11;
  DspLib *v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float result;
  __int128 v18;
  int v19;
  float32x4_t v20;

  v4 = *(double *)(a1 + 456);
  v5 = *(_QWORD *)(a1 + 520);
  *(float *)(a2 + 52) = v4;
  *(float *)(a2 + 56) = (float)v5;
  if (!v5)
  {
    LODWORD(v7) = 0;
LABEL_7:
    v8 = a2 + 20 * v7 + 60;
    v9 = v7 + 1;
    do
    {
      v19 = 0;
      v18 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v18, v8);
      v8 += 20;
    }
    while ((_DWORD)v9++ != 4);
    goto LABEL_10;
  }
  v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a1 + 464), v6, 0, &v20);
    DspLib::Biquad::write((uint64_t)&v20, a2 + 20 * v6 + 60);
    v7 = (v7 + 1);
    v6 = v7;
  }
  while (*(_QWORD *)(a1 + 520) > v7);
  if (v7 <= 3)
    goto LABEL_7;
LABEL_10:
  DspLib::PowerGuard::TargetCalculator::status(a1 + 1408, a2);
  *(float *)(a2 + 48) = DspLib::amp2dBSafe(v11, *(float *)(a1 + 688), 0.000001);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a2 + 156) = *(_OWORD *)(a1 + 1392);
  *(float *)(a2 + 188) = DspLib::amp2dBSafe(v12, *(float *)(a1 + 1216), 0.000001);
  v13 = *(float *)(a1 + 828);
  v14 = 1.0;
  v15 = 1.0;
  if (v13 > 0.0)
    v15 = *(float *)(a1 + 824) / v13;
  if (*(float *)(a1 + 832) >= v15)
    v15 = *(float *)(a1 + 832);
  *(float *)(a2 + 224) = *(float *)(a1 + 816) * v15;
  *(float *)(a2 + 228) = *(float *)(a1 + 816) * *(float *)(a1 + 832);
  *(_DWORD *)(a2 + 232) = *(_DWORD *)(a1 + 816);
  v16 = *(_DWORD *)(a1 + 312);
  if (!*(_BYTE *)(a1 + 1808))
    v14 = 0.0;
  *(float *)(a2 + 236) = v14;
  *(_DWORD *)(a2 + 240) = v16;
  result = *(float *)(a1 + 1812);
  *(float *)(a2 + 244) = result;
  return result;
}

void DspLib::PowerGuard::Algorithm::~Algorithm(DspLib::PowerGuard::Algorithm *this)
{
  DspLib::PowerGuard::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  uint64_t j;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(_QWORD *)this = &off_1E69BE5F8;
  v2 = (void *)*((_QWORD *)this + 222);
  if (v2)
  {
    *((_QWORD *)this + 223) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 218);
  if (v3)
  {
    *((_QWORD *)this + 219) = v3;
    operator delete(v3);
  }
  for (i = 0; i != -96; i -= 24)
  {
    v5 = *(void **)((char *)this + i + 1576);
    if (v5)
    {
      *(_QWORD *)((char *)this + i + 1584) = v5;
      operator delete(v5);
    }
  }
  for (j = 0; j != -96; j -= 24)
  {
    v7 = *(void **)((char *)this + j + 1480);
    if (v7)
    {
      *(_QWORD *)((char *)this + j + 1488) = v7;
      operator delete(v7);
    }
  }
  *((_QWORD *)this + 156) = &unk_1E69C4DB8;
  v8 = (void *)*((_QWORD *)this + 170);
  if (v8)
  {
    *((_QWORD *)this + 171) = v8;
    operator delete(v8);
  }
  *((_QWORD *)this + 156) = &unk_1E69BE9A8;
  v9 = (void *)*((_QWORD *)this + 163);
  if (v9)
  {
    *((_QWORD *)this + 164) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 160);
  if (v10)
  {
    *((_QWORD *)this + 161) = v10;
    operator delete(v10);
  }
  v20 = (void **)((char *)this + 1224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v11 = (void *)*((_QWORD *)this + 149);
  if (v11)
  {
    *((_QWORD *)this + 150) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 146);
  if (v12)
  {
    *((_QWORD *)this + 147) = v12;
    operator delete(v12);
  }
  *((_QWORD *)this + 127) = &unk_1E69C4DB8;
  v13 = (void *)*((_QWORD *)this + 141);
  if (v13)
  {
    *((_QWORD *)this + 142) = v13;
    operator delete(v13);
  }
  *((_QWORD *)this + 127) = &unk_1E69BE9A8;
  v14 = (void *)*((_QWORD *)this + 134);
  if (v14)
  {
    *((_QWORD *)this + 135) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 131);
  if (v15)
  {
    *((_QWORD *)this + 132) = v15;
    operator delete(v15);
  }
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer((DspLib::PowerGuard::Algorithm *)((char *)this + 720));
  v20 = (void **)((char *)this + 696);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v16 = (void *)*((_QWORD *)this + 83);
  if (v16)
  {
    *((_QWORD *)this + 84) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 80);
  if (v17)
  {
    *((_QWORD *)this + 81) = v17;
    operator delete(v17);
  }
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer((DspLib::PowerGuard::Algorithm *)((char *)this + 336));
  *(_QWORD *)this = off_1E69C47E8;
  v18 = (void *)*((_QWORD *)this + 34);
  if (v18)
  {
    *((_QWORD *)this + 35) = v18;
    operator delete(v18);
  }
  v20 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v20);
  *(_QWORD *)this = off_1E69C46F0;
  v19 = (void *)*((_QWORD *)this + 6);
  if (v19)
  {
    *((_QWORD *)this + 7) = v19;
    operator delete(v19);
  }
}

uint64_t DspLib::AlgorithmBase::isInitialized(DspLib::AlgorithmBase *this)
{
  return *((unsigned __int8 *)this + 8);
}

double DspLib::AlgorithmBase::sampleRate(DspLib::AlgorithmBase *this)
{
  return *((double *)this + 3);
}

uint64_t DspLib::AlgorithmBase::channelLayout(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t DspLib::AlgorithmBase::numOutputFrames(DspLib::AlgorithmBase *this, uint64_t a2)
{
  return a2;
}

uint64_t DspLib::AlgorithmBase::numberOfInputChannels(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t DspLib::AlgorithmBase::numberOfOutputChannels(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 4);
}

double DspLib::PowerGuard::Algorithm::latencySamples(DspLib::PowerGuard::Algorithm *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 76);
  return (double)*(unint64_t *)&a2;
}

uint64_t DspLib::PowerGuard::Algorithm::tailTimeSamples(DspLib::PowerGuard::Algorithm *this)
{
  return (*(uint64_t (**)(DspLib::PowerGuard::Algorithm *))(*(_QWORD *)this + 80))(this);
}

uint64_t DspLib::AlgorithmBase::parametersAreValid(DspLib::AlgorithmBase *this)
{
  return 1;
}

uint64_t DspLib::AlgorithmBaseNewParameters::numParameters(DspLib::AlgorithmBaseNewParameters *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(_QWORD *)this + 232))(this);
  return DspLib::algorithmOffset(v1, *(_DWORD *)(v1 + 16) + 1);
}

float DspLib::AlgorithmBaseNewParameters::parameterBounds(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(_QWORD *)this + 232))(this);
  v4 = DspLib::parameterAddress(v3, a2);
  return *(float *)(DspLib::SystemParametersDefinition::operator[](v3, v4, v5) + 16);
}

uint64_t DspLib::AlgorithmBase::parameters(DspLib::AlgorithmBase *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t DspLib::AlgorithmBase::process(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2, a2, 1, 1);
}

uint64_t DspLib::PowerGuard::Algorithm::numStatus(DspLib::PowerGuard::Algorithm *this)
{
  return 62;
}

uint64_t DspLib::AlgorithmBase::meteringIsEnabled(DspLib::AlgorithmBase *this)
{
  return *((unsigned __int8 *)this + 40);
}

double DspLib::AlgorithmBase::percentCPU@<D0>(DspLib::AlgorithmBase *this@<X0>, uint64_t a2@<X8>)
{
  return DspLib::CPUMeasure::percentCPU((DspLib::AlgorithmBase *)((char *)this + 72), a2);
}

uint64_t DspLib::AlgorithmBase::maxNumInputFrames(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t DspLib::AlgorithmBaseNewParameters::systemDefinition(DspLib::AlgorithmBaseNewParameters *this)
{
  return (uint64_t)this + 216;
}

uint64_t DspLib::AlgorithmBaseNewParameters::numAlgorithms(DspLib::AlgorithmBaseNewParameters *this)
{
  return (*(_DWORD *)((*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(_QWORD *)this + 232))(this)
                                  + 16)
                      + 1);
}

DspLib::PowerGuard::TargetCalculator *DspLib::PowerGuard::TargetCalculator::TargetCalculator(DspLib::PowerGuard::TargetCalculator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 11);
  *((_DWORD *)this + 64) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v2)+ 12);
  v3 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 12);
  *((_DWORD *)this + 65) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v3)+ 12);
  v4 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 13);
  *((_DWORD *)this + 66) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v4)+ 12);
  v5 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 14);
  *((_DWORD *)this + 67) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v5)+ 12);
  v6 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 7);
  *((_DWORD *)this + 68) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v6)+ 12);
  v7 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 8);
  *((_DWORD *)this + 69) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v7)+ 12);
  v8 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 9);
  *((_DWORD *)this + 70) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v8)+ 12);
  v9 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 10);
  *((_DWORD *)this + 71) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v9)+ 12);
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 18) = _Q0;
  *((_OWORD *)this + 19) = _Q0;
  return this;
}

void sub_1B6071990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DspLib::PowerGuard::TargetCalculator::TargetCalculator(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmParametersDefinition::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 8) <= a2
    || (v3 = *(_QWORD *)(*(_QWORD *)v2 + 16 * a2 + 8), *(_DWORD *)(v3 + 8) <= HIDWORD(a2)))
  {
    abort();
  }
  return *(_QWORD *)v3 + 24 * HIDWORD(a2);
}

uint64_t DspLib::parameterAddress(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = v2[1];
  if (!(_DWORD)v3)
LABEL_6:
    abort();
  v4 = 0;
  v5 = *v2 + 8;
  while (1)
  {
    v6 = *(_DWORD *)(*(_QWORD *)v5 + 8);
    v7 = a2 >= v6;
    v8 = a2 - v6;
    if (!v7)
      return v4 + (a2 << 32);
    ++v4;
    v5 += 16;
    a2 = v8;
    if ((_DWORD)v3 == (_DWORD)v4)
      goto LABEL_6;
  }
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 16) == -1)
LABEL_7:
    abort();
  v4 = 0;
  while (1)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * (v4 - 1));
    if (!v4)
      v5 = (uint64_t *)a1;
    v6 = *v5;
    if (a2 < DspLib::groupOffset(*v5, *(_DWORD *)(*(_QWORD *)(*v5 + 8) + 8)))
      break;
    a2 = a2 - DspLib::groupOffset(v6, *(_DWORD *)(*(_QWORD *)(v6 + 8) + 8));
    if (++v4 >= (unint64_t)(*(_DWORD *)(a1 + 16) + 1))
      goto LABEL_7;
  }
  LODWORD(v8) = v4;
  HIDWORD(v8) = DspLib::parameterAddress(v6, a2);
  return v8;
}

void DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(DspLib::PowerGuard::WooferPowerAnalyzer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E69C4D88;
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 176));
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = &unk_1E69BE9A8;
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
}

void std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t DspLib::algorithmOffset(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (!a2)
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  v5 = a2;
  do
  {
    if ((*(_DWORD *)(a1 + 16) + 1) <= v3)
      abort();
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * (v3 - 1));
    if (!v3)
      v6 = (uint64_t *)a1;
    v4 = DspLib::groupOffset(*v6, *(_DWORD *)(*(_QWORD *)(*v6 + 8) + 8)) + v4;
    ++v3;
  }
  while (v5 != v3);
  return v4;
}

uint64_t DspLib::groupOffset(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *(uint64_t **)(a1 + 8);
  if (*((_DWORD *)v2 + 2) < a2)
    abort();
  result = 0;
  if (a2)
  {
    v4 = *v2;
    v5 = a2;
    v6 = (uint64_t *)(v4 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      result = (result + *(_DWORD *)(v7 + 8));
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t DspLib::SystemParametersDefinition::operator[](uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 16) + 1 <= a2)
    abort();
  if ((_DWORD)a2)
    a1 = *(_QWORD *)(a1 + 8) + 8 * (a2 - 1);
  return DspLib::AlgorithmParametersDefinition::operator[](*(_QWORD *)a1, __SPAIR64__(a3, HIDWORD(a2)));
}

void DspLib::PowerGuard::TargetCalculator::TargetCalculator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = a1;
  do
  {
    v7 = *(void **)(v5 - 24);
    v5 -= 24;
    v6 = v7;
    if (v7)
    {
      *(_QWORD *)(a1 - 16) = v6;
      operator delete(v6);
    }
    a1 = v5;
  }
  while (v5 != a2);
  v8 = a2;
  do
  {
    v10 = *(void **)(v8 - 24);
    v8 -= 24;
    v9 = v10;
    if (v10)
    {
      *(_QWORD *)(a2 - 16) = v9;
      operator delete(v9);
    }
    a2 = v8;
  }
  while (v8 != a3);
}

double DspLib::LoudspeakerManagerV1::Algorithm::Algorithm(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  _QWORD *v1;
  double result;

  v1 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(this, (__int128 *)&DspLib::LoudspeakerManagerV1::Parameters::kSystemDefinition);
  *v1 = &off_1E69BE9E8;
  v1[46] = 0;
  v1[47] = 0;
  v1[45] = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 37) = 0u;
  *(_OWORD *)(v1 + 39) = 0u;
  *(_OWORD *)(v1 + 41) = 0u;
  *(_OWORD *)((char *)v1 + 340) = 0u;
  *((_WORD *)v1 + 192) = 257;
  *((_BYTE *)v1 + 386) = 0;
  *(_QWORD *)((char *)v1 + 388) = 0x3F8000003FC3D70ALL;
  v1[50] = 1;
  *(_QWORD *)((char *)v1 + 484) = 0;
  *(_OWORD *)(v1 + 51) = 0u;
  *(_OWORD *)(v1 + 53) = 0u;
  *(_OWORD *)(v1 + 55) = 0u;
  *(_OWORD *)(v1 + 57) = 0u;
  *(_OWORD *)((char *)v1 + 465) = 0u;
  *(_OWORD *)((char *)v1 + 556) = 0u;
  *((_OWORD *)v1 + 33) = 0u;
  *((_OWORD *)v1 + 34) = 0u;
  *((_OWORD *)v1 + 31) = 0u;
  *((_OWORD *)v1 + 32) = 0u;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::initialize(DspLib::LoudspeakerManagerV1::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  _QWORD v10[2];
  int v11;
  void *__p;
  _BYTE *v13;

  v4 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if ((_DWORD)v4)
  {
    DspLib::LoudspeakerManagerV1::ModelManager::initialize((void **)this + 37);
    v5 = DspLib::parameterAddress((uint64_t)&DspLib::LoudspeakerManagerV1::Parameters::kDefinition, 2);
    DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerManagerV1::Parameters::kDefinition, v5);
    std::vector<DspLib::Biquad::Section>::vector(&__p, 2uLL);
    v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad((uint64_t *)&__p, *(double *)(v6 + 456), 2.8);
    v7 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    v10[0] = __p;
    v10[1] = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)__p) >> 2);
    v11 = 1052171118;
    v8 = DspLib::PowerGuard::Algorithm::setAdmittanceModel(v7, (uint64_t)v10);
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerManagerV1::Algorithm *, char *, _QWORD, float))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0, v8);
    (*(void (**)(DspLib::LoudspeakerManagerV1::Algorithm *))(*(_QWORD *)this + 152))(this);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  return v4;
}

void sub_1B6072130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::uninitialize(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = (uint64_t *)*((_QWORD *)this + 30);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  result = DspLib::LoudspeakerManagerV1::ModelManager::uninitialize((uint64_t)this + 296);
  *((_BYTE *)this + 8) = 0;
  return result;
}

void DspLib::LoudspeakerManagerV1::Algorithm::setParameters(DspLib::LoudspeakerManagerV1::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  uint64_t *v4;
  float v5;
  float v6;
  DspLib::AlgorithmParametersInstance *v7;
  unint64_t v8;
  double v9;
  const float *v10;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  *((_BYTE *)this + 386) |= DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u) >= 0.5;
  *((float *)this + 97) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
  *((_BYTE *)this + 384) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) < 0.5;
  v4 = (uint64_t *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV1::Algorithm *, uint64_t))(*(_QWORD *)this + 248))(this, 2);
  v5 = DspLib::AlgorithmParametersInstance::operator[](v4, 3);
  v6 = DspLib::AlgorithmParametersInstance::operator[](v4, 0x100000003);
  v7 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV1::Algorithm *, uint64_t))(*(_QWORD *)this + 248))(this, 1);
  v8 = *((unsigned int *)this + 8);
  v9 = *((double *)this + 3);
  v10 = (const float *)(DspLib::AlgorithmParametersInstance::group(v7, 0) + 12);
  DspLib::LoudspeakerManagerV1::PowerMeter::setParameters((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 400), v5, v6, v8, v9, v10, 4uLL);
}

int32x2_t DspLib::LoudspeakerManagerV1::Algorithm::setCalibrationData(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 568) = a2[2];
  *(_QWORD *)(a1 + 560) = v4;
  v5 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  DspLib::PowerGuard::Algorithm::setSpVACalibration(v5, a2);
  v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 2);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setSpVACalibration(v6 + 320, (uint64_t)a2);
  return DspLib::LoudspeakerManagerV1::PowerMeter::setSpVACalibration(a1 + 400, (uint64_t)a2);
}

void DspLib::LoudspeakerManagerV1::Algorithm::reset(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 30);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
  }
  *((_BYTE *)this + 386) = 1;
  DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 296));
  DspLib::LoudspeakerManagerV1::PowerMeter::reset((DspLib::CircularDelay **)this + 50);
}

void DspLib::LoudspeakerManagerV1::Algorithm::processBlock(DspLib::LoudspeakerManagerV1::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, unsigned int a4)
{
  int v8;
  float *v9;
  float *v10;
  uint64_t cycle_count;
  unint64_t v12;
  DspLib::LoudspeakerSystemIDV1::Algorithm *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  DspLib::LoudspeakerSystemIDV1::Algorithm *v19;
  DspLibBuffer *v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 v23[128];
  __int128 v24;
  uint64_t v25;

  v8 = *((unsigned __int8 *)this + 40);
  if (a4 >= 2 && *((_BYTE *)this + 40))
  {
    v9 = (float *)DspLibBuffer::channel((DspLibBuffer *)((char *)a2 + 96), 0);
    v10 = (float *)DspLibBuffer::channel((DspLibBuffer *)((char *)a2 + 96), 1u);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLibBuffer *)((char *)a2 + 96));
    DspLib::LoudspeakerManagerV1::PowerMeter::process((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 400), v9, v10, cycle_count);
    v8 = *((unsigned __int8 *)this + 40);
  }
  if (v8)
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  v12 = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v13 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  DspLib::LoudspeakerSystemIDV1::Algorithm::singleResonatorPlusLR2Inductance(v13, (uint64_t)v23);
  v14 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  v15 = *(_BYTE *)(v14 + 9426);
  *(_BYTE *)(v14 + 9426) = 0;
  v16 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  DspLib::LoudspeakerManagerV1::ModelManager::getAdmittanceModel((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 296), v23, v15, (uint64_t)&v24, *(double *)(v16 + 456));
  v17 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  v21 = v24;
  v22 = v25;
  DspLib::PowerGuard::Algorithm::setAdmittanceModel(v17, (uint64_t)&v21);
  v18 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  (*(void (**)(uint64_t, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t))(*(_QWORD *)v18 + 160))(v18, a2, a3, 1, 1);
  v19 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  if (a4 <= 1)
    v20 = 0;
  else
    v20 = (DspLibBuffer *)((char *)a2 + 96);
  DspLib::LoudspeakerSystemIDV1::Algorithm::process(v19, a3, a3, v20);
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::stop((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 72), v12, *((double *)this + 3));
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  uint64_t v5;
  uint64_t v6;

  DspLib::clear(a2, __N);
  DspLib::LoudspeakerManagerV1::PowerMeter::getPeakPowers((DspLib::LoudspeakerManagerV1::PowerMeter *)(a1 + 400), a2);
  DspLib::LoudspeakerManagerV1::PowerMeter::status(a1 + 400, (uint64_t)a2);
  v5 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v5 + 184))(v5, a2 + 8, 62);
  v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 2);
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v6 + 184))(v6, a2 + 70, 2665);
}

void DspLib::LoudspeakerManagerV1::Algorithm::~Algorithm(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  DspLib::LoudspeakerManagerV1::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1E69BE9E8;
  v2 = (void *)*((_QWORD *)this + 67);
  if (v2)
  {
    *((_QWORD *)this + 68) = v2;
    operator delete(v2);
  }
  v7 = (void **)((char *)this + 496);
  std::vector<DspLib::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = (void *)*((_QWORD *)this + 51);
  if (v3)
  {
    *((_QWORD *)this + 52) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 45);
  if (v4)
  {
    *((_QWORD *)this + 46) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E69C47E8;
  v5 = (void *)*((_QWORD *)this + 34);
  if (v5)
  {
    *((_QWORD *)this + 35) = v5;
    operator delete(v5);
  }
  v7 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(_QWORD *)this = off_1E69C46F0;
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
}

double DspLib::LoudspeakerManagerV1::Algorithm::latencySamples(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  return v3 + (*(double (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
}

double DspLib::LoudspeakerManagerV1::Algorithm::tailTimeSamples(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  return v3 + (*(double (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::numStatus(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  return 2735;
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::setMeteringIsEnabled(DspLib::LoudspeakerManagerV1::Algorithm *this, char a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_BYTE *)this + 40) = a2;
  v3 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 200))(v3, *((unsigned __int8 *)this + 40));
  v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 200))(v4, *((unsigned __int8 *)this + 40));
}

_QWORD *std::vector<DspLib::Biquad::Section>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 20 * a2;
    do
    {
      *(_DWORD *)v4 = 1065353216;
      *(_QWORD *)(v4 + 12) = 0;
      *(_QWORD *)(v4 + 4) = 0;
      v4 += 20;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B6072718(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

void std::vector<DspLib::MovingAverage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::MovingAverage>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<DspLib::MovingAverage>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 40);
      v4 -= 40;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

DspLib::AmbienceLeveler::Algorithm *DspLib::AmbienceLeveler::Algorithm::Algorithm(DspLib::AmbienceLeveler::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition);
  *(_QWORD *)v2 = &off_1E69BF650;
  *(_BYTE *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  *(_DWORD *)(v2 + 504) = 1065353216;
  *(_OWORD *)(v2 + 512) = 0u;
  *(_OWORD *)(v2 + 528) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(_QWORD *)(v2 + 624) = 0;
  *(_QWORD *)(v2 + 632) = 0x3ECBD4B4C1000000;
  v3 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 1);
  *((_DWORD *)this + 160) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v3)+ 12);
  v4 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 2);
  *((_DWORD *)this + 161) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v4)+ 12);
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 95) = 0;
  *((_DWORD *)this + 162) = -1022361600;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_QWORD *)this + 110) = 0;
  *((_DWORD *)this + 192) = -1022361600;
  v5 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 3);
  *((_DWORD *)this + 222) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v5)+ 12);
  v6 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 0);
  *((_DWORD *)this + 223) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v6)+ 12);
  v7 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 4);
  *((_DWORD *)this + 224) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v7)+ 12);
  v8 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 5);
  *((_DWORD *)this + 225) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v8)+ 12);
  v9 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 6);
  *((_DWORD *)this + 226) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v9)+ 12);
  v10 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 7);
  *((_DWORD *)this + 227) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v10)+ 12);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 17296, (char *)this + 912, 4096, 4096, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 17384, (char *)this + 912, 4096, 4096, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17472), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17552), 0, 0);
  *((_DWORD *)this + 12604) = 0;
  *(_OWORD *)((char *)this + 116072) = 0u;
  *(_OWORD *)((char *)this + 116088) = 0u;
  *(_OWORD *)((char *)this + 116104) = 0u;
  *(_OWORD *)((char *)this + 116120) = 0u;
  *(_OWORD *)((char *)this + 116136) = 0u;
  *(_OWORD *)((char *)this + 116152) = 0u;
  *(_OWORD *)((char *)this + 115992) = 0u;
  *(_OWORD *)((char *)this + 116008) = 0u;
  *(_OWORD *)((char *)this + 116024) = 0u;
  *(_OWORD *)((char *)this + 116040) = 0u;
  *(_OWORD *)((char *)this + 116049) = 0u;
  *(_OWORD *)((char *)this + 116172) = xmmword_1B6626D10;
  *(_QWORD *)((char *)this + 116188) = 0xF424000000000;
  *((_QWORD *)this + 14526) = 0;
  *((_QWORD *)this + 14527) = 0;
  *((_QWORD *)this + 14525) = 0;
  *((_DWORD *)this + 29056) = -1024458752;
  *((_WORD *)this + 58114) = 257;
  *((_QWORD *)this + 14529) = 0;
  *((_DWORD *)this + 29042) = 3;
  return this;
}

void sub_1B6072C28(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::FFT::BufferedForwardSTFT *v2;
  DspLib::FFT::BufferedForwardSTFT *v3;
  DspLib::ComplexVector *v4;
  DspLib::ComplexVector *v5;

  v5 = v4;
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v3);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v2);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v1 + 296));
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters((DspLib::AlgorithmBaseNewParameters *)v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(DspLib::FFT::BufferedForwardSTFT *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this);
}

void DspLib::Biquad::Filter::~Filter(DspLib::Biquad::Filter *this)
{
  void *v2;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::Filter *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t DspLib::AmbienceLeveler::Algorithm::initialize(DspLib::AmbienceLeveler::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v4;
  double v5;
  _BYTE v7[40];

  v4 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::AmbienceLeveler::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
    v5 = *((double *)this + 3);
    *((int32x2_t *)this + 61) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_1B6626D20, v5)));
    DspLib::Biquad::Design::kWeighting(v5, (uint64_t)v7);
    DspLib::Biquad::Filter::initialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 296), *((unsigned int *)this + 3), 2uLL);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 296, (uint64_t)v7, 2, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 116064), 1uLL, *((double *)this + 3), 1uLL);
    DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17472), 0x801uLL);
    DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17552), 0x801uLL);
    (*(void (**)(DspLib::AmbienceLeveler::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

void DspLib::AmbienceLeveler::Algorithm::uninitialize(DspLib::AmbienceLeveler::Algorithm *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 30);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17472), 0);
  DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17552), 0);
  *((_BYTE *)this + 8) = 0;
}

void DspLib::AmbienceLeveler::Algorithm::reset(DspLib::AmbienceLeveler::Algorithm *this)
{
  char *v2;
  float *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  int64x2_t v11;
  uint64x2_t v12;
  int64x2_t v13;
  float v14;
  float v15;

  v2 = (char *)this + 115992;
  v3 = (float *)((char *)this + 107796);
  DspLib::Biquad::SetupWrapper::reset((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 344));
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 1065353216;
  *((_QWORD *)this + 79) = 0x3ECBD4B4C1000000;
  memset_pattern16((char *)this + 648, &unk_1B6626D30, 0x78uLL);
  memset_pattern16((char *)this + 768, &unk_1B6626D30, 0x78uLL);
  v4 = 0;
  v5 = 0;
  *((_QWORD *)this + 78) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 32) = 0u;
  do
  {
    *(_DWORD *)((char *)this + v4 + 368) = *((_DWORD *)this + 122) + *((_DWORD *)this + 123) * v5++;
    v4 += 4;
  }
  while (v4 != 120);
  DspLib::FFT::BufferedForwardSTFT::reset((float **)this + 2173);
  DspLib::FFT::BufferedForwardSTFT::reset((float **)this + 2162);
  bzero((char *)this + 91400, 0x2004uLL);
  bzero((char *)this + 34024, 0x2004uLL);
  bzero((char *)this + 50416, 0x6010uLL);
  std::vector<DspLib::AmbienceLeveler::FilterParameters>::resize((uint64_t)v2, 5uLL);
  std::vector<DspLib::AmbienceLeveler::FilterParameters>::resize((uint64_t)(v2 + 24), 4uLL);
  std::vector<DspLib::AmbienceLeveler::FilterParameters>::resize((uint64_t)(v2 + 48), 5uLL);
  v6 = 0;
  v7 = *(_QWORD **)v2;
  *v7 = 1101004800;
  v7[1] = 1065353216;
  v8 = (_QWORD *)*((_QWORD *)v2 + 3);
  *v8 = 1101004800;
  v8[1] = 1065353216;
  v9 = (_QWORD *)*((_QWORD *)v2 + 6);
  *v9 = 1101004800;
  v9[1] = 1065353216;
  v10 = *((double *)this + 3) * 0.000244140625;
  v11 = (int64x2_t)xmmword_1B6626830;
  v12 = (uint64x2_t)vdupq_n_s64(0x801uLL);
  v13 = vdupq_n_s64(2uLL);
  do
  {
    if ((vmovn_s64((int64x2_t)vcgtq_u64(v12, (uint64x2_t)v11)).u8[0] & 1) != 0)
    {
      v14 = v10 * (double)v6;
      *(v3 - 1) = v14;
    }
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x801uLL), *(uint64x2_t *)&v11)).i32[1] & 1) != 0)
    {
      v15 = v10 * (double)(v6 + 1);
      *v3 = v15;
    }
    v6 += 2;
    v11 = vaddq_s64(v11, v13);
    v3 += 2;
  }
  while (v6 != 2050);
  *((_QWORD *)v2 + 30) = 0;
  *((_QWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 28) = 0;
  *((_DWORD *)v2 + 58) = -1024458752;
  *((_WORD *)v2 + 118) = 256;
}

void std::vector<DspLib::AmbienceLeveler::FilterParameters>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<DspLib::AmbienceLeveler::FilterParameters>::__append((void **)a1, a2 - v2);
  }
}

uint64_t DspLib::AmbienceLeveler::Algorithm::numStatus(DspLib::AmbienceLeveler::Algorithm *this)
{
  return 1;
}

double DspLib::AmbienceLeveler::Algorithm::tailTimeSamples(DspLib::AmbienceLeveler::Algorithm *this)
{
  return (*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(_QWORD *)this + 80))(this) + 0.0;
}

void DspLib::AmbienceLeveler::Algorithm::setParameters(DspLib::AmbienceLeveler::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  float v4;
  float v5;
  float v6;
  float *v7;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)this + 8))
  {
    *((float *)this + 160) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u);
    v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
    *((float *)this + 161) = v4;
    v5 = *((float *)this + 160);
    if (v4 < v5)
      *((float *)this + 161) = v5;
    *((float *)this + 222) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u);
    *((float *)this + 224) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    *((float *)this + 225) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 5u);
    *((float *)this + 226) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 6u);
    *((float *)this + 227) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 7u);
    v6 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0);
    if (v6 != *((float *)this + 223))
    {
      *((float *)this + 223) = v6;
      *((_DWORD *)this + 158) = 0;
      *((_DWORD *)this + 126) = 1065353216;
      *((_QWORD *)this + 62) = 0;
    }
    v7 = (float *)((char *)this + 912);
    DspLib::makeSymmetricHannWindow((uint64_t)v7, 0x1000uLL);
    DspLib::multiply(v7, 0x1000uLL, 0.00048828);
  }
}

void DspLib::AmbienceLeveler::Algorithm::processBlock(DspLib::AmbienceLeveler::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float **v18;
  size_t v19;
  float v20;
  DspLib *v21;
  float v22;
  float v23;
  DspLib *v24;
  float v25;
  float **v27[3];
  _QWORD v28[3];
  const float *v29;
  const float *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v7 = DspLibBuffer::numChannels(a3);
  v8 = DspLibBuffer::setNumFrames(a3, cycle_count);
  if (v7 == 2 && cycle_count)
  {
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    MEMORY[0x1E0C80A78](v8);
    v29 = (const float *)&v27[-v9 - 1];
    v30 = &v29[v9];
    v10 = DspLibBuffer::numChannels(a2);
    MEMORY[0x1E0C80A78](v10);
    v13 = (char *)&v27[-1] - v12;
    if (v11 >= 0x200)
      v14 = 512;
    else
      v14 = v11;
    bzero((char *)&v27[-1] - v12, v14);
    DspLibBuffer::channelsPtr((float *)a2, (float **)v13);
    v15 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v15);
    v18 = (float **)((char *)&v27[-1] - v17);
    if (v16 >= 0x200)
      v19 = 512;
    else
      v19 = v16;
    bzero((char *)&v27[-1] - v17, v19);
    DspLibBuffer::channelsPtr((float *)a3, v18);
    v28[0] = v13;
    v28[1] = 2;
    v28[2] = cycle_count;
    v27[0] = (float **)&v29;
    v27[1] = (float **)2;
    v27[2] = (float **)cycle_count;
    DspLib::Biquad::Filter::process((_QWORD *)this + 37, (uint64_t)v28, v27);
    v20 = DspLib::rms(v29, cycle_count);
    v22 = DspLib::amp2dBSafe(v21, v20, 1.0e-20);
    v23 = DspLib::rms(v30, cycle_count);
    v25 = DspLib::amp2dBSafe(v24, v23, 1.0e-20);
    DspLib::AmbienceLeveler::RunningStats::process((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 592), v25);
    DspLib::AmbienceLeveler::Algorithm::computeAmbienceGain(this, v22, v25, cycle_count);
    DspLib::AmbienceLeveler::Algorithm::updateSpectra((uint64_t)this, *(_QWORD *)v13, cycle_count, *((_QWORD *)v13 + 1), cycle_count);
    memmove(*v18, *(const void **)v13, 4 * cycle_count);
    DspLib::multiply(*((const float **)v13 + 1), cycle_count, v18[1], *((float *)this + 159));
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::stop((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
  }
}

double DspLib::AmbienceLeveler::RunningStats::process(DspLib::AmbienceLeveler::RunningStats *this, float a2)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v2 = *((double *)this + 1);
  v3 = *((double *)this + 2);
  v4 = a2 - v2;
  v5 = *(_QWORD *)this + 1;
  v6 = v4 / (double)(unint64_t)v5;
  v7 = v4 * v6 * (double)*(unint64_t *)this;
  v8 = *((double *)this + 3);
  v9 = *((double *)this + 4)
     + v3 * (v6 * v6 * 6.0)
     + v6
     * v6
     * v7
     * ((double)(unint64_t)v5 * -3.0 + (double)(unint64_t)v5 * (double)(unint64_t)v5 + 3.0)
     + v6 * -4.0 * v8;
  *(_QWORD *)this = v5;
  *((double *)this + 3) = v8 + v3 * (v6 * -3.0) + v6 * v7 * ((double)(unint64_t)v5 + -2.0);
  *((double *)this + 4) = v9;
  result = v3 + v7;
  *((double *)this + 1) = v2 + v6;
  *((double *)this + 2) = result;
  return result;
}

double DspLib::AmbienceLeveler::Algorithm::computeAmbienceGain(DspLib::AmbienceLeveler::Algorithm *this, float a2, float a3, int a4)
{
  float v8;
  DspLib::AmbienceLeveler::RunningStats *v9;
  uint64_t i;
  float *v11;
  float v12;
  float v13;
  int v14;
  DspLib *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  double result;

  v8 = *((float *)this + 222);
  v9 = (DspLib::AmbienceLeveler::Algorithm *)((char *)this + 512);
  for (i = 368; i != 488; i += 4)
  {
    v11 = (float *)((char *)this + i);
    v12 = *(float *)((char *)this + i + 280);
    if (v12 < a2)
    {
      v11[70] = a2;
      v12 = a2;
    }
    v13 = v11[100];
    if (v13 < a3)
    {
      v11[100] = a3;
      v13 = a3;
    }
    if (v12 > v8)
      v8 = v12;
    v14 = *(_DWORD *)((char *)this + i) - a4;
    *(_DWORD *)((char *)this + i) = v14;
    if (v14 <= 0)
    {
      if (v12 > *((float *)this + 222))
      {
        DspLib::AmbienceLeveler::RunningStats::process(v9, (float)(v12 - v13) - *((float *)this + 223));
        v16 = *((float *)this + 126);
        v17 = 1.0 / v16;
        *((float *)this + 126) = v16 + 1.0;
        v18 = *((float *)this + 124) + (float)((float)(v11[70] - *((float *)this + 124)) * (float)(1.0 / v16));
        *((float *)this + 124) = v18;
        v19 = *((float *)this + 125) + (float)((float)(v11[100] - *((float *)this + 125)) * v17);
        *((float *)this + 125) = v19;
        v20 = (float)(v18 - v19) - *((float *)this + 223);
        *((float *)this + 158) = v20;
        if (*((float *)this + 161) >= v20)
          v21 = 632;
        else
          v21 = 644;
        if (v20 < *((float *)this + 160))
          v21 = 640;
        v22 = *(float *)((char *)this + v21);
        *((float *)this + 158) = v22;
        *((float *)this + 159) = DspLib::dB2Amp(v15, v22);
      }
      *(_DWORD *)((char *)this + i) = *((_DWORD *)this + 122);
      v11[70] = -144.0;
      v11[100] = -144.0;
    }
  }
  *(float *)&result = v8 + -30.0;
  if ((float)(v8 + -30.0) < a2 && *(float *)&result > *((float *)this + 222))
    return DspLib::AmbienceLeveler::RunningStats::process((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 552), a2 - a3);
  return result;
}

void DspLib::AmbienceLeveler::Algorithm::updateSpectra(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  DSPSplitComplex *v8;
  uint64_t v9;
  DSPSplitComplex *v10;
  float *v11;
  unint64_t v12;
  double v13;
  float v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float *v20;
  float v21;
  float *v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  float *__C;
  uint64_t v30;

  if (a3)
  {
    v7 = 0;
    v30 = a1 + 17296;
    v8 = (DSPSplitComplex *)(a1 + 17472);
    v9 = a1 + 17384;
    v10 = (DSPSplitComplex *)(a1 + 17552);
    v11 = (float *)(a1 + 17632);
    __C = (float *)(a1 + 25828);
    v28 = (unsigned int *)(a1 + 50416);
    v27 = a1 + 50420;
    v26 = a1 + 34024;
    do
    {
      DspLib::FFT::BufferedForwardSTFT::addInput(v30, (void *)(a2 + 4 * v7), a3 - v7, v8);
      v12 = DspLib::FFT::BufferedForwardSTFT::addInput(v9, (void *)(a4 + 4 * v7), a5 - v7, v10);
      if (*(_QWORD *)(a1 + 17368))
      {
        DspLib::FFT::amplitude((uint64_t)v8, v11, 0x801uLL);
        DspLib::FFT::amplitude((uint64_t)v10, __C, 0x801uLL);
        v13 = *(double *)(a1 + 24);
        v14 = v13 * 0.5;
        if (v14 > 7000.0)
          v14 = 7000.0;
        v15 = v13 * 0.000244140625;
        v16 = (100.0 / v15);
        v17 = (v14 / v15);
        if (DspLib::meanSquare(&v11[v16], (v17 - v16)) > 0.0000001)
        {
          v18 = *v28 + 1;
          *v28 = v18;
          if (v16 < v17)
          {
            v19 = (float)v18;
            v20 = &v11[v16];
            v21 = 1.0 / v19;
            v22 = (float *)(v27 + 4 * v16);
            v23 = v17 - v16;
            v24 = (float *)(v26 + 4 * v16);
            do
            {
              if (*v20 > *v22)
                *v22 = *v20;
              v25 = v20[2049];
              if (v25 > v22[2049])
                v22[2049] = v25;
              *v24 = *v24 + (float)((float)(v25 - *v24) * v21);
              ++v24;
              ++v20;
              ++v22;
              --v23;
            }
            while (v23);
          }
        }
      }
      v7 += v12;
    }
    while (v7 < a3);
  }
}

float DspLib::AmbienceLeveler::Algorithm::computeEQFilters(DspLib::AmbienceLeveler::Algorithm *this)
{
  DspLib *v2;
  float v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  DspLib *v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t matched;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = (DspLib *)(*(uint64_t (**)(DspLib::AmbienceLeveler::Algorithm *))(*(_QWORD *)this + 32))(this);
  v3 = 0.0;
  if ((_DWORD)v2)
  {
    v4 = *((double *)this + 3) * 0.000244140625;
    v5 = (100.0 / v4);
    v6 = (7000.0 / v4);
    if (v6 <= v5)
    {
      v12 = -130.0;
      v14 = v5;
    }
    else
    {
      v7 = (float *)((char *)this + 4 * v5 + 50420);
      v8 = v6 - v5;
      v9 = -100.0;
      do
      {
        v10 = *v7++;
        v11 = v10;
        if (v10 > v9)
          v9 = v11;
        --v8;
      }
      while (v8);
      v12 = v9 + -30.0;
      v13 = (float *)((char *)this + 4 * v5 + 50420);
      v14 = v5;
      while (*v13 < v12)
      {
        ++v14;
        ++v13;
        if ((_DWORD)v6 == v14)
        {
          v14 = v6;
          break;
        }
      }
    }
    v15 = v6;
    v16 = v6 - v5;
    if (v6 >= v5)
    {
      v15 = v6;
      do
      {
        if (*((float *)this + v15 + 12605) >= v12)
          break;
        --v15;
      }
      while (v15 >= v5);
    }
    v17 = v15 - v14;
    if (v15 > v14)
    {
      v18 = (char *)this + 4 * v14;
      v19 = (float *)(v18 + 50420);
      v20 = (float *)(v18 + 66812);
      do
      {
        v21 = DspLib::amp2dBSafe(v2, v19[2049], 1.0e-20);
        v22 = *v19++;
        v24 = (float)(DspLib::amp2dBSafe(v23, v22, 1.0e-20) - v21) + *((float *)this + 224);
        if (v24 <= 0.0)
          v25 = v24;
        else
          v25 = 0.0;
        if (v24 >= *((float *)this + 225))
          v26 = v25;
        else
          v26 = *((float *)this + 225);
        *v20++ = v26;
        --v17;
      }
      while (v17);
    }
    bzero((char *)this + 91400, 0x2004uLL);
    DspLib::AmbienceLeveler::Algorithm::nthOctaveSmoothing(3.0, v27, (uint64_t)this + 66812, 2049, (uint64_t)this + 75008, 2049, 0, v6);
    if (*((_QWORD *)this + 14500) - *((_QWORD *)this + 14499) >= 0x11uLL)
    {
      v28 = 2;
      v29 = 1;
      do
      {
        matched = DspLib::AmbienceLeveler::Algorithm::matchBellFilterToTargetResponse((uint64_t)this, (uint64_t)this + 107792, 0x801uLL, (char *)this + 75008, 0x801uLL, (const float *)this + 22850, 0x801uLL, v5, v6);
        v31 = (uint64_t *)(*((_QWORD *)this + 14499) + 16 * v29);
        *v31 = matched;
        v31[1] = v32;
        v29 = v28++;
      }
      while (v29 < (uint64_t)(*((_QWORD *)this + 14500) - *((_QWORD *)this + 14499)) >> 4);
    }
    v3 = 0.0;
    if (v16 >= 2)
    {
      v33 = 0;
      v34 = 1;
      do
      {
        v3 = v3 + *((float *)this + (v34 + v5) + 22850);
        v34 = 1 << ++v33;
      }
      while (1 << v33 < v16);
      if (v33)
        v3 = v3 / (float)v33;
    }
    v35 = DspLib::AmbienceLeveler::Algorithm::steadyStateNotch(this);
    v36 = *((_QWORD *)this + 14500);
    *(_QWORD *)(v36 - 16) = v35;
    *(_QWORD *)(v36 - 8) = v37;
  }
  return v3;
}

void DspLib::AmbienceLeveler::Algorithm::nthOctaveSmoothing(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  float *v21;
  uint64_t v22;
  float v23;

  if (a7 < a8)
  {
    v12 = a1 + a1;
    v13 = exp2f(-1.0 / (float)(a1 + a1));
    v14 = exp2f(1.0 / v12);
    v15 = a7;
    do
    {
      v16 = vcvtas_u32_f32(v13 * (float)v15);
      v17 = vcvtas_u32_f32(v14 * (float)v15);
      if (v17 <= v16)
        v18 = v16 + 1;
      else
        v18 = v17;
      v19 = 0.0;
      v20 = v18 - v16;
      if (v18 > v16)
      {
        v21 = (float *)(a3 + 4 * v16);
        v22 = v18 - v16;
        do
        {
          v23 = *v21++;
          v19 = v19 + v23;
          --v22;
        }
        while (v22);
      }
      *(float *)(a5 + 4 * v15++) = v19 / (float)v20;
    }
    while (v15 != a8);
  }
}

uint64_t DspLib::AmbienceLeveler::Algorithm::matchBellFilterToTargetResponse(uint64_t a1, uint64_t a2, unint64_t a3, char *__src, unint64_t a5, const float *a6, vDSP_Length a7, unsigned int a8, unsigned int a9)
{
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t v21;
  float *v22;
  const float *v23;
  uint64_t v24;
  float v25;
  float v26;
  int64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  int v35;
  float v36;
  int v37;
  double v38;
  double v39;
  uint64_t v40;
  float v41;
  float v42;
  double v43;
  double v44;

  v15 = a1 + 116136;
  v16 = (float *)(a1 + 83204);
  memmove((void *)(a1 + 83204), __src, 0x2004uLL);
  v17 = (float *)a6;
  DspLib::subtract(v16, 0x801uLL, a6);
  DspLib::clip(v16, 0x801uLL, -70.0, 0.0);
  v18 = &v16[a8];
  if (a8 == a9 || (v19 = v18 + 1, v18 + 1 == &v16[a9]))
  {
    v23 = a6;
    v24 = a1;
  }
  else
  {
    v20 = *v18;
    v21 = 4 * a9 - 4 * a8 - 4;
    v22 = v18 + 1;
    v23 = a6;
    v24 = a1;
    do
    {
      v25 = *v22++;
      v26 = v25;
      if (v25 < v20)
      {
        v20 = v26;
        v18 = v19;
      }
      v19 = v22;
      v21 -= 4;
    }
    while (v21);
  }
  v27 = (char *)v18 - (char *)v16;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(a2 + v27);
  v28 = *(float *)&__src[v27] - *(const float *)((char *)v23 + v27);
  if (v28 <= 0.0)
    v29 = *(float *)&__src[v27] - *(const float *)((char *)v23 + v27);
  else
    v29 = 0.0;
  if (v28 >= *(float *)(v24 + 900))
    v30 = v29;
  else
    v30 = *(float *)(v24 + 900);
  *(float *)(v15 + 40) = v30;
  if (fabsf(v30) < 0.1)
    return 1120403456;
  v32 = 0;
  v33 = (_QWORD *)(v24 + 116064);
  v34 = (void *)(v24 + 99596);
  v35 = 0x40000000;
  v36 = 10000000.0;
  do
  {
    v37 = dword_1B6626D50[v32];
    *(_DWORD *)(v15 + 44) = v37;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v33, *(_QWORD *)(v15 + 32), *(double **)(v15 + 40), 0, 0);
    bzero(v34, 0x2004uLL);
    DspLib::Biquad::amplitudeResponse(v33, a2, a3, (uint64_t)v34, 2049, 0, *(double *)v15, v38, v39);
    DspLib::amp2dBSafe((float *)v34, 0x801uLL, 1.0e-20);
    DspLib::add((float *)v34, 0x801uLL, v17);
    if (a5)
    {
      v40 = 0;
      v41 = 0.0;
      do
      {
        v42 = *(float *)&__src[4 * v40] - *((float *)v34 + v40);
        v41 = v41 + (float)(v42 * v42);
        ++v40;
      }
      while (a5 > v40);
    }
    else
    {
      v41 = 0.0;
    }
    if (v41 < v36)
    {
      v36 = v41;
      v35 = v37;
    }
    ++v32;
  }
  while (v32 != 8);
  *(_DWORD *)(v15 + 44) = v35;
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v33, *(_QWORD *)(v15 + 32), *(double **)(v15 + 40), 0, 0);
  bzero(v34, 0x2004uLL);
  DspLib::Biquad::amplitudeResponse(v33, a2, a3, (uint64_t)v34, 2049, 0, *(double *)v15, v43, v44);
  DspLib::amp2dBSafe((float *)v34, 0x801uLL, 1.0e-20);
  DspLib::add(v17, a7, (const float *)v34);
  return *(_QWORD *)(v15 + 36);
}

unint64_t DspLib::AmbienceLeveler::Algorithm::steadyStateNotch(DspLib::AmbienceLeveler::Algorithm *this)
{
  double v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;

  v2 = *((double *)this + 3) * 0.000244140625;
  v3 = (3000.0 / v2);
  v4 = (150.0 / v2);
  v5 = (1000.0 / v2);
  v6 = (char *)this + 34024;
  DspLib::amp2dBSafe((float *)this + 8506, 0x801uLL, 1.0e-20);
  DspLib::AmbienceLeveler::Algorithm::nthOctaveSmoothing(3.0, v7, (uint64_t)v6, 2049, (uint64_t)this + 42220, 2049, 0, v3);
  v8 = 0.0;
  if (v4 < v5)
  {
    v9 = (float *)((char *)this + 4 * v4 + 34024);
    v10 = v4;
    do
    {
      v11 = v9[2049];
      if ((float)(*v9 - v11) > v8)
      {
        LODWORD(v4) = v10;
        v8 = *v9 - v11;
      }
      ++v10;
      ++v9;
    }
    while (v5 != v10);
  }
  *(float *)&v13 = -v8;
  if (v8 < 0.0)
    LODWORD(v13) = 0;
  v12 = *((float *)this + 226);
  if (v12 <= (float)-v8)
    v13 = v13;
  else
    v13 = LODWORD(v12);
  return *((unsigned int *)this + v4 + 26948) | (unint64_t)(v13 << 32);
}

float DspLib::AmbienceLeveler::Algorithm::gainInDecibels(DspLib::AmbienceLeveler::Algorithm *this)
{
  return *((float *)this + 158);
}

float DspLib::AmbienceLeveler::Algorithm::status(uint64_t a1, float *a2)
{
  float result;

  result = *(float *)(a1 + 632);
  *a2 = result;
  return result;
}

void DspLib::AmbienceLeveler::Algorithm::~Algorithm(DspLib::AmbienceLeveler::Algorithm *this)
{
  DspLib::AmbienceLeveler::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  *(_QWORD *)this = &off_1E69BF650;
  v12 = (void **)((char *)this + 116144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 116112));
  v2 = (void **)((char *)this + 115992);
  v3 = (void *)*((_QWORD *)this + 14511);
  if (v3)
  {
    *((_QWORD *)this + 14512) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14505);
  if (v4)
  {
    *((_QWORD *)this + 14506) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14502);
  if (v5)
  {
    *((_QWORD *)this + 14503) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *((_QWORD *)this + 14500) = v6;
    operator delete(v6);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17552));
  DspLib::ComplexVector::~ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17472));
  v7 = (void *)*((_QWORD *)this + 2178);
  if (v7)
  {
    *((_QWORD *)this + 2179) = v7;
    operator delete(v7);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 17384);
  v8 = (void *)*((_QWORD *)this + 2167);
  if (v8)
  {
    *((_QWORD *)this + 2168) = v8;
    operator delete(v8);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 17296);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 344));
  v9 = (void *)*((_QWORD *)this + 40);
  if (v9)
  {
    *((_QWORD *)this + 41) = v9;
    operator delete(v9);
  }
  *(_QWORD *)this = off_1E69C47E8;
  v10 = (void *)*((_QWORD *)this + 34);
  if (v10)
  {
    *((_QWORD *)this + 35) = v10;
    operator delete(v10);
  }
  v12 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v12);
  *(_QWORD *)this = off_1E69C46F0;
  v11 = (void *)*((_QWORD *)this + 6);
  if (v11)
  {
    *((_QWORD *)this + 7) = v11;
    operator delete(v11);
  }
}

double DspLib::AlgorithmBase::latencySamples(DspLib::AlgorithmBase *this)
{
  return 0.0;
}

void std::vector<DspLib::AmbienceLeveler::FilterParameters>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      do
      {
        *v7 = 1120403456;
        v7[1] = 0x13F800000;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 1120403456;
      *((_QWORD *)v17 + 1) = 0x13F800000;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this)
{
  *(_QWORD *)((char *)this + 29) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)((char *)this + 29) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  DspLibBuffer::initialize(this, a2, a3);
}

void sub_1B6074344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t DspLibBuffer::initialize(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 5))
  {
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    v27 = 100;
LABEL_48:
    printf("DSP Sound assertion in %s at line %d\n", v26, v27);
    result = 0;
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (*((_QWORD *)this + 6))
  {
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    v27 = 101;
    goto LABEL_48;
  }
  if (a2 >= 0x3B9ACA01)
  {
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    v27 = 102;
    goto LABEL_48;
  }
  if (a2 && !a3)
  {
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    v27 = 103;
    goto LABEL_48;
  }
  if (a3 >= 0x2711)
  {
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    v27 = 104;
    goto LABEL_48;
  }
  v6 = (char *)*((_QWORD *)this + 8);
  v7 = (char *)*((_QWORD *)this + 9);
  v5 = (uint64_t *)((char *)this + 64);
  if (-1431655765 * ((unint64_t)(v7 - v6) >> 3) == a3 && *(_QWORD *)this == a2)
    return 0;
  if (v7 == v6)
    v9 = 0;
  else
    v9 = 0x5555555555555554 * ((v7 - v6) >> 3) * ((*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 2);
  DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes += v9;
  *(_QWORD *)this = a2;
  std::vector<std::vector<float>>::resize(v5, a3);
  if (!a3)
    goto LABEL_37;
  v11 = 0;
  v12 = 0;
  while (*((_QWORD *)this + 5))
  {
    if (v12 >= *((unsigned int *)this + 14))
    {
      *((_QWORD *)this + 2) = 0;
      goto LABEL_24;
    }
LABEL_22:
    std::vector<float>::resize(*((_QWORD *)this + 8) + v11, *(_QWORD *)this);
    ++v12;
    v11 += 24;
  }
  if (*((_QWORD *)this + 6))
    v13 = *((unsigned int *)this + 14);
  else
    v13 = -1431655765 * ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
  if (v12 < v13)
    goto LABEL_22;
  *((_QWORD *)this + 2) = 0;
LABEL_24:
  MEMORY[0x1E0C80A78](v10);
  v16 = (char *)v28 - v15;
  if (v14 >= 0x200)
    v17 = 512;
  else
    v17 = v14;
  bzero((char *)v28 - v15, v17);
  v18 = 0;
  v19 = *((_QWORD *)this + 5);
  if (!v19)
    goto LABEL_30;
  while (1)
  {
    v20 = *((unsigned int *)this + 14);
    if (v18 >= v20)
      break;
    while (1)
    {
      *(_QWORD *)&v16[8 * v18] = DspLibBuffer::channel(this, v18);
      ++v18;
      if (v19)
        break;
LABEL_30:
      if (*((_QWORD *)this + 6))
      {
        v20 = *((unsigned int *)this + 14);
        if (v18 >= v20)
          goto LABEL_36;
      }
      else
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
        if (v18 >= v20)
          goto LABEL_36;
      }
    }
  }
LABEL_36:
  v21 = *((_QWORD *)this + 1);
  v28[0] = v16;
  v28[1] = v20;
  v28[2] = v21;
  DspLib::clear(v28);
LABEL_37:
  v22 = (_QWORD *)*((_QWORD *)this + 8);
  v23 = *((_QWORD *)this + 9) - (_QWORD)v22;
  if (v23)
    v24 = 0xAAAAAAAAAAAAAAACLL * (v23 >> 3) * ((v22[1] - *v22) >> 2);
  else
    v24 = 0;
  v25 = DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes + v24;
  DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes = v25;
  if (v25 > DspLibBuffer::mMaxHeapMemoryConsumptionInBytes)
    DspLibBuffer::mMaxHeapMemoryConsumptionInBytes = v25;
  ++DspLibBuffer::mNumHeapMemoryAllocations;
  return 1;
}

_QWORD *DspLibBuffer::setNumFrames(_QWORD *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *this - this[2];
  if (v2 >= a2)
    v2 = a2;
  this[1] = v2;
  return this;
}

unint64_t *DspLibBuffer::setFrameOffset(unint64_t *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *this;
  if (*this)
    v2 = a2 % v2;
  this[2] = v2;
  return this;
}

uint64_t DspLibBuffer::numChannels(DspLibBuffer *this)
{
  if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6))
    return *((unsigned int *)this + 14);
  else
    return -1431655765 * ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, float *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)((char *)this + 29) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = a4;
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a5)
  {
    *((_BYTE *)this + 36) = 1;
    v5 = a4;
    if (!a2)
      v5 = 0;
    v6 = DspLibBuffer::mCurrentStackMemoryConsumptionInBytes + 4 * a3 * v5;
    DspLibBuffer::mCurrentStackMemoryConsumptionInBytes = v6;
    if (DspLibBuffer::mMaxStackMemoryConsumptionInBytes > v6)
      v6 = DspLibBuffer::mMaxStackMemoryConsumptionInBytes;
    DspLibBuffer::mMaxStackMemoryConsumptionInBytes = v6;
  }
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, float *const *a2, uint64_t a3, int a4)
{
  *(_QWORD *)((char *)this + 29) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_DWORD *)this + 14) = a4;
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t *DspLibBuffer::DspLibBuffer(uint64_t *a1, char *a2, unint64_t a3)
{
  uint64_t v6;

  *((_OWORD *)a1 + 4) = 0u;
  *(uint64_t *)((char *)a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[5] = 0;
  a1[6] = 0;
  *((_DWORD *)a1 + 14) = 0;
  *((_OWORD *)a1 + 5) = 0u;
  DspLibBuffer::initialize((DspLibBuffer *)a1, a3, 1u);
  v6 = *a1;
  if (*a1 - a1[2] < (unint64_t)*a1)
    v6 = *a1 - a1[2];
  a1[1] = v6;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1[8], a2, (uint64_t)&a2[4 * a3], (uint64_t)(4 * a3) >> 2);
  return a1;
}

void sub_1B6074884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, const DspLibBuffer *a2)
{
  unint64_t v4;
  unsigned int v5;

  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)((char *)this + 29) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  v4 = *(_QWORD *)a2;
  if (*(_OWORD *)((char *)a2 + 40) == 0)
    v5 = -1431655765 * ((*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  else
    v5 = *((_DWORD *)a2 + 14);
  DspLibBuffer::initialize(this, v4, v5);
  DspLibBuffer::copy((uint64_t)this, a2);
}

void sub_1B6074938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t DspLibBuffer::copy(uint64_t this, const DspLibBuffer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int i;
  void *v10;
  const void *v11;
  int v12;
  char *v13;

  v3 = this;
  if (*(_OWORD *)((char *)a2 + 40) == 0)
    v4 = -1431655765 * ((*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  else
    v4 = *((_DWORD *)a2 + 14);
  v5 = *(_QWORD *)(this + 40);
  if (*(_OWORD *)(this + 40) == 0)
    v12 = -1431655765 * ((*(_QWORD *)(this + 72) - *(_QWORD *)(this + 64)) >> 3);
  else
    v12 = *(_DWORD *)(this + 56);
  if (v4 == v12)
  {
    v6 = 0;
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    v7 = *((_QWORD *)a2 + 1);
    v8 = *(_QWORD *)(this + 16);
    if (*(_QWORD *)this - v8 < v7)
      v7 = *(_QWORD *)this - v8;
    *(_QWORD *)(this + 8) = v7;
    if (!v5)
      goto LABEL_11;
LABEL_12:
    for (i = *(_DWORD *)(v3 + 56); v6 < i; i = -1431655765 * ((*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 3))
    {
      v10 = (void *)DspLibBuffer::channel((DspLibBuffer *)v3, v6);
      v11 = (const void *)DspLibBuffer::channel(a2, v6);
      this = (uint64_t)memcpy(v10, v11, 4 * *(_QWORD *)(v3 + 8));
      ++v6;
      if (*(_QWORD *)(v3 + 40))
        goto LABEL_12;
LABEL_11:
      if (*(_QWORD *)(v3 + 48))
        goto LABEL_12;
    }
  }
  else
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v13, 269);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

uint64_t DspLibBuffer::DspLibBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (a1 != a2)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a1 + 64, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_1B6074B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void DspLibBuffer::~DspLibBuffer(DspLibBuffer *this)
{
  unsigned int v2;
  void **v3;

  if (*((_BYTE *)this + 36))
  {
    if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6))
      v2 = *((_DWORD *)this + 14);
    else
      v2 = -1431655765 * ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
    DspLibBuffer::mCurrentStackMemoryConsumptionInBytes -= 4 * *(_QWORD *)this * v2;
  }
  DspLibBuffer::uninitialize(this);
  v3 = (void **)((char *)this + 64);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

FILE *DspLibBuffer::uninitialize(DspLibBuffer *this)
{
  FILE *result;

  if (!*((_QWORD *)this + 5) && !*((_QWORD *)this + 6))
    DspLibBuffer::initialize(this, 0, 0);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  result = (FILE *)*((_QWORD *)this + 11);
  if (result)
  {
    result = (FILE *)fclose(result);
    *((_QWORD *)this + 11) = 0;
  }
  return result;
}

uint64_t DspLibBuffer::resize(DspLibBuffer *this, unint64_t a2)
{
  unsigned int v2;

  if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6))
    v2 = *((_DWORD *)this + 14);
  else
    v2 = -1431655765 * ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
  return DspLibBuffer::initialize(this, a2, v2);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

uint64_t DspLibBuffer::channel(DspLibBuffer *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
  {
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      v6 = *((_DWORD *)this + 14);
      if (v6)
      {
        v4 = *(_QWORD *)(v5 + 8 * (a2 % v6));
        return v4 + 4 * *((_QWORD *)this + 2);
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 8);
      v8 = *((_QWORD *)this + 9);
      v9 = -1431655765 * ((unint64_t)(v8 - v7) >> 3);
      if (v9)
        v10 = v8 == v7;
      else
        v10 = 1;
      if (!v10)
      {
        v4 = *(_QWORD *)(v7 + 24 * (a2 % v9));
        return v4 + 4 * *((_QWORD *)this + 2);
      }
    }
    return 0;
  }
  v3 = *((_DWORD *)this + 14);
  if (!v3)
    return 0;
  v4 = v2 + 4 * *(_QWORD *)this * (a2 % v3);
  return v4 + 4 * *((_QWORD *)this + 2);
}

uint64_t DspLibBuffer::initializeWithExternalChannels(uint64_t this, float *const *a2, unint64_t a3, int a4)
{
  unint64_t v4;
  char *v5;

  if (*(_QWORD *)(this + 64) == *(_QWORD *)(this + 72))
  {
    *(_QWORD *)(this + 48) = a2;
    *(_DWORD *)(this + 56) = a4;
    v4 = a3 - *(_QWORD *)(this + 16);
    if (v4 >= a3)
      v4 = a3;
    *(_QWORD *)this = a3;
    *(_QWORD *)(this + 8) = v4;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v5, 145);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

double DspLibBuffer::channelBuffer@<D0>(DspLibBuffer *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  v5 = DspLibBuffer::channel(this, a2);
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)(a3 + 29) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 1;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

float *DspLibBuffer::channelsPtr(float *this, float **a2)
{
  float *v3;
  unint64_t i;
  unint64_t v5;

  v3 = this;
  for (i = 0; ; ++i)
  {
    v5 = *((_QWORD *)v3 + 5) || *((_QWORD *)v3 + 6)
       ? *((unsigned int *)v3 + 14)
       : -1431655765 * ((*((_QWORD *)v3 + 9) - *((_QWORD *)v3 + 8)) >> 3);
    if (i >= v5)
      break;
    this = (float *)DspLibBuffer::channel((DspLibBuffer *)v3, i);
    a2[i] = this;
  }
  return this;
}

unint64_t DspLibBuffer::element(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  return DspLibBuffer::channel(this, a3) + 4 * (a2 % (*(_QWORD *)this - *((_QWORD *)this + 2)));
}

void *DspLibBuffer::copy(DspLibBuffer *this, unsigned int a2, const float *__src, unint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;

  v8 = *(_QWORD *)this;
  v9 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this == v9)
  {
    v11 = 0;
  }
  else
  {
    v10 = *(_QWORD *)this - v9;
    v11 = (void *)(DspLibBuffer::channel(this, a2) + 4 * (a5 % v10));
  }
  v12 = v8 - (v9 + a5);
  if (v12 >= a4)
    v12 = a4;
  return memcpy(v11, __src, 4 * v12);
}

uint64_t DspLibBuffer::operator[](DspLibBuffer *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int v6;
  char *v7;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6))
    {
      LODWORD(v4) = *((_DWORD *)this + 14);
      if ((_DWORD)v4)
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
    }
    else
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
      if ((_DWORD)v4)
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
    }
    v6 = 292;
  }
  else
  {
    v6 = 291;
  }
  v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v7, v6);
  ++DspLibDebug::mAssertCounter;
  return DspLibBuffer::channel(this, 0);
}

unint64_t DspLibBuffer::operator[](DspLibBuffer *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int v6;
  char *v7;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6))
    {
      LODWORD(v4) = *((_DWORD *)this + 14);
      if ((_DWORD)v4)
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
    }
    else
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
      if ((_DWORD)v4)
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
    }
    v6 = 307;
  }
  else
  {
    v6 = 306;
  }
  v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v7, v6);
  ++DspLibDebug::mAssertCounter;
  return (unint64_t)this + 32;
}

uint64_t DspLibBuffer::operator=(uint64_t this, const DspLibBuffer *a2)
{
  if ((const DspLibBuffer *)this != a2)
    return DspLibBuffer::copy(this, a2);
  return this;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B6075434(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B607543C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B6075518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B6075768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

