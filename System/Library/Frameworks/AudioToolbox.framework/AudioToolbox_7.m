void sub_1B61D7490(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t i;
  uint64_t v37;

  v6 = (_BYTE *)*((_QWORD *)v1 + 219);
  if (v6)
  {
    v7 = (_BYTE *)*((_QWORD *)v1 + 220);
    if (v7 != v6)
      *((_QWORD *)v1 + 220) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v6);
    *v4 = 0;
    v4[1] = 0;
  }
  v8 = (_BYTE *)*((_QWORD *)v1 + 217);
  if (v8)
  {
    v9 = (_BYTE *)*((_QWORD *)v1 + 218);
    if (v9 != v8)
      *((_QWORD *)v1 + 218) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v8);
    *v3 = 0;
    v3[1] = 0;
  }
  v10 = (_BYTE *)*((_QWORD *)v1 + 215);
  if (v10)
  {
    v11 = (_BYTE *)*((_QWORD *)v1 + 216);
    if (v11 != v10)
      *((_QWORD *)v1 + 216) = &v11[(v10 - v11 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v10);
    *v2 = 0;
    v2[1] = 0;
  }
  v12 = (_BYTE *)*((_QWORD *)v1 + 212);
  if (v12)
  {
    v13 = (_BYTE *)*((_QWORD *)v1 + 213);
    if (v13 != v12)
      *((_QWORD *)v1 + 213) = &v13[(v12 - v13 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v12);
    *((_QWORD *)v1 + 212) = 0;
    *((_QWORD *)v1 + 213) = 0;
  }
  v14 = (_BYTE *)*((_QWORD *)v1 + 210);
  if (v14)
  {
    v15 = (_BYTE *)*((_QWORD *)v1 + 211);
    if (v15 != v14)
      *((_QWORD *)v1 + 211) = &v15[(v14 - v15 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v14);
    *((_QWORD *)v1 + 210) = 0;
    *((_QWORD *)v1 + 211) = 0;
  }
  v16 = 0;
  while (1)
  {
    v17 = (_QWORD *)((char *)v1 + v16);
    v18 = *(_BYTE **)((char *)v1 + v16 + 1576);
    if (v18)
    {
      v19 = (_BYTE *)v17[198];
      if (v19 != v18)
        v17[198] = &v19[(v18 - v19 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v20 = v17 + 197;
      operator delete(v18);
      *v20 = 0;
      v20[1] = 0;
    }
    v16 -= 16;
    if (v16 == -128)
    {
      v21 = 0;
      while (1)
      {
        v22 = (_QWORD *)((char *)v1 + v21);
        v23 = *(_BYTE **)((char *)v1 + v21 + 1448);
        if (v23)
        {
          v24 = (_BYTE *)v22[182];
          if (v24 != v23)
            v22[182] = &v24[(v23 - v24 + 3) & 0xFFFFFFFFFFFFFFFCLL];
          v25 = v22 + 181;
          operator delete(v23);
          *v25 = 0;
          v25[1] = 0;
        }
        v21 -= 16;
        if (v21 == -128)
        {
          v26 = 0;
          while (1)
          {
            v27 = (_QWORD *)((char *)v1 + v26);
            v28 = *(_BYTE **)((char *)v1 + v26 + 1320);
            if (v28)
            {
              v29 = (_BYTE *)v27[166];
              if (v29 != v28)
                v27[166] = &v29[(v28 - v29 + 3) & 0xFFFFFFFFFFFFFFFCLL];
              v30 = v27 + 165;
              operator delete(v28);
              *v30 = 0;
              v30[1] = 0;
            }
            v26 -= 16;
            if (v26 == -128)
            {
              v31 = 0;
              while (1)
              {
                v32 = (_QWORD *)((char *)v1 + v31);
                v33 = *(_BYTE **)((char *)v1 + v31 + 1192);
                if (v33)
                {
                  v34 = (_BYTE *)v32[150];
                  if (v34 != v33)
                    v32[150] = &v34[(v33 - v34 + 3) & 0xFFFFFFFFFFFFFFFCLL];
                  v35 = v32 + 149;
                  operator delete(v33);
                  *v35 = 0;
                  v35[1] = 0;
                }
                v31 -= 16;
                if (v31 == -128)
                {
                  for (i = 0; i != -256; i -= 32)
                    CDSPSplitComplex::~CDSPSplitComplex((ausdk::AUBase *)((char *)v1 + i + 1008));
                  v37 = *((_QWORD *)v1 + 93);
                  if (v37)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                    *((_QWORD *)v1 + 93) = 0;
                  }
                  ausdk::AUBase::~AUBase(v1);
                  _Unwind_Resume(a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  caulk::deferred_logger **v4;
  void *v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t Element;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 8, 1);
  *(_QWORD *)v3 = &off_1E69C6378;
  *((_BYTE *)v3 + 528) = 0;
  *((_QWORD *)v3 + 67) = 0;
  *((_BYTE *)v3 + 544) = 0;
  *((_BYTE *)v3 + 568) = 0;
  *((_QWORD *)v3 + 72) = 0;
  *((_DWORD *)v3 + 146) = 0;
  *(_OWORD *)((char *)v3 + 596) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *((_QWORD *)v3 + 89) = 0x3F800000447A0000;
  *((_QWORD *)v3 + 90) = 1112014848;
  *((_DWORD *)v3 + 182) = 1065353216;
  *(_OWORD *)((char *)v3 + 732) = 0u;
  *((_DWORD *)v3 + 189) = 0;
  *(_QWORD *)((char *)v3 + 748) = 0;
  *((_QWORD *)v3 + 95) = 1;
  *((_WORD *)v3 + 384) = 0;
  *(_QWORD *)((char *)v3 + 772) = 0xF1000000F0;
  *((_QWORD *)v3 + 98) = 0;
  *((_WORD *)v3 + 396) = 0;
  *((_QWORD *)v3 + 100) = 0;
  v4 = (caulk::deferred_logger **)egt3Subsystem();
  caulk::deferred_logger::create_v(*v4, v5);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  (*(void (**)(ausdk::AUElement *, uint64_t))(*(_QWORD *)v7 + 40))(v7, 47);
  ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 1u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 2u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 3u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 5u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 4u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 6u, -95.0, 0);
  ausdk::AUElement::SetParameter(v7, 7u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 8u, -70.0, 0);
  ausdk::AUElement::SetParameter(v7, 9u, 10.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xAu, 5.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xBu, 1.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xCu, 2.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xDu, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xEu, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0xFu, 20.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x10u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x11u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x12u, 10.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x13u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x14u, 1.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x15u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x16u, 1.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x17u, 1.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x18u, 10.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x19u, 15.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Au, 6.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x23u, -60.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x24u, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x25u, 200.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x26u, -14.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x27u, 18.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x28u, 0.5, 0);
  ausdk::AUElement::SetParameter(v7, 0x29u, 2.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x2Au, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x2Bu, 48.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x2Cu, 60.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x2Du, 30.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x2Eu, 0.25, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Bu, 2.5, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Cu, 0.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Du, 2.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Eu, 2.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x1Fu, -5.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x20u, -12.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x21u, 10.0, 0);
  ausdk::AUElement::SetParameter(v7, 0x22u, 4.0, 0);
  v25 = 0x40D5888000000000;
  v26 = xmmword_1B6626900;
  v27 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v25);
  *(_BYTE *)(a1 + 588) = 0;
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 56))(v10, &v25);
  v22 = 0x40D5888000000000;
  v24 = xmmword_1B66A0BE0;
  v23 = xmmword_1B66A0BD0;
  v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v22);
  *(_BYTE *)(a1 + 590) = 1;
  v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 56))(v12, &v22);
  *(_BYTE *)(a1 + 591) = 1;
  v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, &v22);
  *(_BYTE *)(a1 + 589) = 1;
  v19 = 0x40D5888000000000;
  v20 = xmmword_1B66A0DF0;
  v21 = xmmword_1B6626910;
  v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 56))(v14, &v19);
  *(_BYTE *)(a1 + 592) = 0;
  v15 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 5u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 56))(v15, &v19);
  *(_BYTE *)(a1 + 593) = 0;
  v16 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 6u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 56))(v16, &v19);
  *(_BYTE *)(a1 + 594) = 0;
  v17 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 7u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 56))(v17, &v19);
  *(_BYTE *)(a1 + 595) = 0;
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 240);
  return a1;
}

void sub_1B61D7DE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(char *)(v1 + 759) < 0)
    operator delete(*(void **)(v1 + 736));
  v4 = *(void **)(v1 + 688);
  if (v4)
  {
    *(_QWORD *)(v1 + 696) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 + 664);
  if (v5)
  {
    *(_QWORD *)(v1 + 672) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 + 640);
  if (v6)
  {
    *(_QWORD *)(v1 + 648) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 624) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  _QWORD *v3;
  ausdk::AUBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  ausdk::AUElement **v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  unsigned int Parameter;
  uint64_t v168;
  ausdk::AUElement *v169;
  ausdk::AUElement **v170;
  uint64_t v171;
  ausdk::AUElement *v172;
  ausdk::AUElement **v173;
  uint64_t v174;
  ausdk::AUElement *v175;
  ausdk::AUElement **v176;
  uint64_t v177;
  ausdk::AUElement *v178;
  ausdk::AUElement **v179;
  uint64_t v180;
  ausdk::AUElement *v181;
  ausdk::AUElement **v182;
  uint64_t v183;
  ausdk::AUElement *v184;
  ausdk::AUElement **v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  ausdk::AUElement **v188;
  uint64_t Element;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;

  v3 = (_QWORD *)(a1 + 540);
  v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 6, 4);
  *(_QWORD *)v4 = &off_1E69C6A08;
  *((_BYTE *)v4 + 528) = 0;
  *(_QWORD *)((char *)v4 + 532) = 0;
  *((_QWORD *)v4 + 69) = 0x1E1000001E0;
  v3[3] = 0x400000006;
  *((_WORD *)v4 + 316) = 256;
  *((_OWORD *)v4 + 36) = 0u;
  *((_DWORD *)v4 + 159) = 1048576000;
  *((_OWORD *)v4 + 41) = 0u;
  *((_OWORD *)v4 + 42) = 0u;
  *((_QWORD *)v4 + 86) = 24;
  *((_DWORD *)v4 + 174) = 1065353216;
  *((_BYTE *)v4 + 700) = 0;
  *((_DWORD *)v4 + 176) = 1101004800;
  ausdk::AUBase::CreateElements((int64x2_t *)v4);
  v5 = *(_QWORD *)(a1 + 120);
  if (v5)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
  *(_DWORD *)(a1 + 564) = v6;
  v7 = *(_QWORD *)(a1 + 168);
  if (v7)
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  else
    v8 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
  *(_DWORD *)(a1 + 568) = v8;
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  else
    v10 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, 50);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 0, 1.0, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 1u, -15.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 2u, -15.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 3u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 4u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 5u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 6u, 1.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 8u, 1.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 9u, 1.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xAu, 0.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xBu, -12.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xCu, -25.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xDu, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xEu, 0.92, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xFu, 0.87, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x10u, 25.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x11u, 25.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x12u, 25.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x13u, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x14u, 0.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x15u, 1.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x16u, -6.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x17u, -6.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x18u, 1.0, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x19u, 1.0, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x1Au, 2000.0, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Bu, -10.0, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Cu, -70.0, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Du, 0.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Eu, -6.0, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Fu, 10.0, 0);
  v107 = *(_QWORD *)(a1 + 72);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x20u, 0.0, 0);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x21u, 80.0, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x22u, 2.0, 0);
  v116 = *(_QWORD *)(a1 + 72);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x23u, 40.0, 0);
  v119 = *(_QWORD *)(a1 + 72);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  ausdk::AUElement::SetParameter(v120, 0x24u, 0.0, 0);
  v122 = *(_QWORD *)(a1 + 72);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0x25u, 0.0, 0);
  v125 = *(_QWORD *)(a1 + 72);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  ausdk::AUElement::SetParameter(v126, 0x26u, 0.0, 0);
  v128 = *(_QWORD *)(a1 + 72);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0x27u, 0.0, 0);
  v131 = *(_QWORD *)(a1 + 72);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  ausdk::AUElement::SetParameter(v132, 0x28u, 1.0e-20, 0);
  v134 = *(_QWORD *)(a1 + 72);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x29u, 0.0, 0);
  v137 = *(_QWORD *)(a1 + 72);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
  }
  else
  {
    v139 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v139)
      v138 = 0;
    else
      v138 = *v139;
  }
  ausdk::AUElement::SetParameter(v138, 0x2Au, 0.0, 0);
  v140 = *(_QWORD *)(a1 + 72);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0x2Bu, 0.0, 0);
  v143 = *(_QWORD *)(a1 + 72);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
  }
  else
  {
    v145 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v145)
      v144 = 0;
    else
      v144 = *v145;
  }
  ausdk::AUElement::SetParameter(v144, 0x2Cu, 0.0, 0);
  v146 = *(_QWORD *)(a1 + 72);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0x2Du, 0.0, 0);
  v149 = *(_QWORD *)(a1 + 72);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
  }
  else
  {
    v151 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v151)
      v150 = 0;
    else
      v150 = *v151;
  }
  ausdk::AUElement::SetParameter(v150, 0x2Eu, 1.0, 0);
  v152 = *(_QWORD *)(a1 + 72);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0x2Fu, 0.0, 0);
  v155 = *(_QWORD *)(a1 + 72);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  ausdk::AUElement::SetParameter(v156, 0x30u, 0.0, 0);
  v158 = *(_QWORD *)(a1 + 72);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0x31u, 1.0, 0);
  *(_WORD *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 618) = 0;
  *(_DWORD *)(a1 + 620) = 0;
  v161 = *(_QWORD *)(a1 + 72);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
  }
  else
  {
    v163 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v163)
      v162 = 0;
    else
      v162 = *v163;
  }
  *(float *)(a1 + 624) = ausdk::AUElement::GetParameter(v162, 0x28u);
  v164 = *(_QWORD *)(a1 + 72);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  Parameter = ausdk::AUElement::GetParameter(v165, 0x2Bu);
  if (Parameter >= 2)
    Parameter = 2;
  *(_DWORD *)(a1 + 628) = Parameter;
  v168 = *(_QWORD *)(a1 + 72);
  if (v168)
  {
    v169 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, 0);
  }
  else
  {
    v170 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v170)
      v169 = 0;
    else
      v169 = *v170;
  }
  *(_DWORD *)(a1 + 560) = ausdk::AUElement::GetParameter(v169, 8u);
  v171 = *(_QWORD *)(a1 + 72);
  if (v171)
  {
    v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0);
  }
  else
  {
    v173 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v173)
      v172 = 0;
    else
      v172 = *v173;
  }
  *(_BYTE *)(a1 + 640) = ausdk::AUElement::GetParameter(v172, 0x2Cu) != 0.0;
  v174 = *(_QWORD *)(a1 + 72);
  if (v174)
  {
    v175 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v174 + 32))(v174, 0);
  }
  else
  {
    v176 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v176)
      v175 = 0;
    else
      v175 = *v176;
  }
  *(float *)(a1 + 644) = ausdk::AUElement::GetParameter(v175, 0x2Du);
  v177 = *(_QWORD *)(a1 + 72);
  if (v177)
  {
    v178 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v177 + 32))(v177, 0);
  }
  else
  {
    v179 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v179)
      v178 = 0;
    else
      v178 = *v179;
  }
  *(_DWORD *)(a1 + 648) = (int)ausdk::AUElement::GetParameter(v178, 0x2Eu);
  v180 = *(_QWORD *)(a1 + 72);
  if (v180)
  {
    v181 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v180 + 32))(v180, 0);
  }
  else
  {
    v182 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v182)
      v181 = 0;
    else
      v181 = *v182;
  }
  *(_DWORD *)(a1 + 652) = (int)ausdk::AUElement::GetParameter(v181, 0x2Fu);
  v183 = *(_QWORD *)(a1 + 72);
  if (v183)
  {
    v184 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0);
  }
  else
  {
    v185 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v185)
      v184 = 0;
    else
      v184 = *v185;
  }
  *(_DWORD *)(a1 + 692) = ausdk::AUElement::GetParameter(v184, 0x30u);
  v186 = *(_QWORD *)(a1 + 72);
  if (v186)
  {
    v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 0);
  }
  else
  {
    v188 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v188)
      v187 = 0;
    else
      v187 = *v188;
  }
  *(float *)(a1 + 696) = ausdk::AUElement::GetParameter(v187, 0x31u);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  v203 = 0x40D5888000000000;
  v204 = xmmword_1B66A0BD0;
  v205 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v203);
  v190 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v190 + 56))(v190, &v203);
  v191 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v191 + 56))(v191, &v203);
  v192 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v192 + 56))(v192, &v203);
  if (*((_DWORD *)v3 + 6) >= 6u)
  {
    v193 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 5u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v193 + 56))(v193, &v203);
  }
  if (*(_DWORD *)(a1 + 568) >= 2u)
  {
    v194 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v194 + 56))(v194, &v203);
  }
  v200 = 0x40D5888000000000;
  v202 = xmmword_1B6626910;
  v201 = xmmword_1B6626900;
  if (*((_DWORD *)v3 + 6) >= 4u)
  {
    v195 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v195 + 56))(v195, &v200);
    if (*((_DWORD *)v3 + 6) >= 5u)
    {
      v196 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v196 + 56))(v196, &v200);
    }
  }
  if (*(_DWORD *)(a1 + 568) >= 3u)
  {
    v197 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v197 + 56))(v197, &v200);
    if (*(_DWORD *)(a1 + 568) >= 4u)
    {
      v198 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 3u);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v198 + 56))(v198, &v200);
    }
  }
  *v3 = 0x101010000010101;
  *(_WORD *)(a1 + 548) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(_BYTE *)(a1 + 376) = 1;
  return a1;
}

void sub_1B61D9160(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void *v3;

  v3 = (void *)*((_QWORD *)v1 + 83);
  if (v3)
  {
    *((_QWORD *)v1 + 84) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  ausdk::AUElement **v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  ausdk::AUElement **v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  ausdk::AUElement **v110;
  uint64_t v111;
  ausdk::AUElement *v112;
  ausdk::AUElement **v113;
  uint64_t v114;
  ausdk::AUElement *v115;
  ausdk::AUElement **v116;
  uint64_t Element;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(_QWORD *)v3 = &off_1E69E19A0;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 35) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 37);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 1.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, -15.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, -15.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 0.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 1.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 6u, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 1.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, 1.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 0.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 0xBu, -12.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xCu, -25.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xDu, 0.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xEu, 0.92, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xFu, 0.87, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0x10u, 25.0, 0);
  v57 = *(_QWORD *)(a1 + 72);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  ausdk::AUElement::SetParameter(v58, 0x11u, 25.0, 0);
  v60 = *(_QWORD *)(a1 + 72);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  ausdk::AUElement::SetParameter(v61, 0x12u, 25.0, 0);
  v63 = *(_QWORD *)(a1 + 72);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  ausdk::AUElement::SetParameter(v64, 0x13u, 0.0, 0);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  ausdk::AUElement::SetParameter(v67, 0x14u, 0.0, 0);
  v69 = *(_QWORD *)(a1 + 72);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0x15u, 1.0, 0);
  v72 = *(_QWORD *)(a1 + 72);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  ausdk::AUElement::SetParameter(v73, 0x16u, -6.0, 0);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  ausdk::AUElement::SetParameter(v76, 0x17u, -6.0, 0);
  v78 = *(_QWORD *)(a1 + 72);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  ausdk::AUElement::SetParameter(v79, 0x18u, 1.0, 0);
  v81 = *(_QWORD *)(a1 + 72);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  ausdk::AUElement::SetParameter(v82, 0x19u, 1.0, 0);
  v84 = *(_QWORD *)(a1 + 72);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  ausdk::AUElement::SetParameter(v85, 0x1Au, 2000.0, 0);
  v87 = *(_QWORD *)(a1 + 72);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  ausdk::AUElement::SetParameter(v88, 0x1Bu, -10.0, 0);
  v90 = *(_QWORD *)(a1 + 72);
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  ausdk::AUElement::SetParameter(v91, 0x1Cu, -70.0, 0);
  v93 = *(_QWORD *)(a1 + 72);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  ausdk::AUElement::SetParameter(v94, 0x1Du, 0.0, 0);
  v96 = *(_QWORD *)(a1 + 72);
  if (v96)
  {
    v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
  }
  else
  {
    v98 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v98)
      v97 = 0;
    else
      v97 = *v98;
  }
  ausdk::AUElement::SetParameter(v97, 0x1Eu, -6.0, 0);
  v99 = *(_QWORD *)(a1 + 72);
  if (v99)
  {
    v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v99 + 32))(v99, 0);
  }
  else
  {
    v101 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v101)
      v100 = 0;
    else
      v100 = *v101;
  }
  ausdk::AUElement::SetParameter(v100, 0x1Fu, 10.0, 0);
  v102 = *(_QWORD *)(a1 + 72);
  if (v102)
  {
    v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0);
  }
  else
  {
    v104 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v104)
      v103 = 0;
    else
      v103 = *v104;
  }
  ausdk::AUElement::SetParameter(v103, 0x20u, 0.0, 0);
  v105 = *(_QWORD *)(a1 + 72);
  if (v105)
  {
    v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0);
  }
  else
  {
    v107 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v107)
      v106 = 0;
    else
      v106 = *v107;
  }
  ausdk::AUElement::SetParameter(v106, 0x21u, 80.0, 0);
  v108 = *(_QWORD *)(a1 + 72);
  if (v108)
  {
    v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 32))(v108, 0);
  }
  else
  {
    v110 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v110)
      v109 = 0;
    else
      v109 = *v110;
  }
  ausdk::AUElement::SetParameter(v109, 0x22u, 2.0, 0);
  v111 = *(_QWORD *)(a1 + 72);
  if (v111)
  {
    v112 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0);
  }
  else
  {
    v113 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v113)
      v112 = 0;
    else
      v112 = *v113;
  }
  ausdk::AUElement::SetParameter(v112, 0x23u, 40.0, 0);
  v114 = *(_QWORD *)(a1 + 72);
  if (v114)
  {
    v115 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 32))(v114, 0);
  }
  else
  {
    v116 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v116)
      v115 = 0;
    else
      v115 = *v116;
  }
  ausdk::AUElement::SetParameter(v115, 0x24u, 0.0, 0);
  v128 = 0x40D5888000000000;
  v129 = xmmword_1B66A0BD0;
  v130 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v128);
  v118 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v128);
  v119 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v128);
  v120 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v120 + 56))(v120, &v128);
  v125 = 0x40D5888000000000;
  v127 = xmmword_1B6626910;
  v126 = xmmword_1B6626900;
  v121 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v121 + 56))(v121, &v125);
  v122 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 4u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v122 + 56))(v122, &v125);
  v123 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v123 + 56))(v123, &v125);
  *(_DWORD *)(a1 + 540) = 65793;
  *(_WORD *)(a1 + 544) = 256;
  *(_BYTE *)(a1 + 546) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(_BYTE *)(a1 + 376) = 1;
  return a1;
}

void sub_1B61D9D54(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  ausdk::AUElement **v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  ausdk::AUElement **v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  ausdk::AUElement **v110;
  uint64_t v111;
  ausdk::AUElement *v112;
  ausdk::AUElement **v113;
  uint64_t Element;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 4, 2);
  *(_QWORD *)v3 = &off_1E69D8258;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_QWORD *)v3 + 70) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 36);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 1.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, -15.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, -15.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 0.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 1.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 6u, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 1.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, 1.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 0.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 0xBu, -12.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xCu, -25.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xDu, 0.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xEu, 0.92, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xFu, 0.87, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0x10u, 25.0, 0);
  v57 = *(_QWORD *)(a1 + 72);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  ausdk::AUElement::SetParameter(v58, 0x11u, 25.0, 0);
  v60 = *(_QWORD *)(a1 + 72);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  ausdk::AUElement::SetParameter(v61, 0x12u, 25.0, 0);
  v63 = *(_QWORD *)(a1 + 72);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  ausdk::AUElement::SetParameter(v64, 0x13u, 0.0, 0);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  ausdk::AUElement::SetParameter(v67, 0x14u, 0.0, 0);
  v69 = *(_QWORD *)(a1 + 72);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0x15u, 1.0, 0);
  v72 = *(_QWORD *)(a1 + 72);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  ausdk::AUElement::SetParameter(v73, 0x16u, -6.0, 0);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  ausdk::AUElement::SetParameter(v76, 0x17u, -6.0, 0);
  v78 = *(_QWORD *)(a1 + 72);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  ausdk::AUElement::SetParameter(v79, 0x18u, 1.0, 0);
  v81 = *(_QWORD *)(a1 + 72);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  ausdk::AUElement::SetParameter(v82, 0x19u, 1.0, 0);
  v84 = *(_QWORD *)(a1 + 72);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  ausdk::AUElement::SetParameter(v85, 0x1Au, 2000.0, 0);
  v87 = *(_QWORD *)(a1 + 72);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  ausdk::AUElement::SetParameter(v88, 0x1Bu, -10.0, 0);
  v90 = *(_QWORD *)(a1 + 72);
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  ausdk::AUElement::SetParameter(v91, 0x1Cu, -70.0, 0);
  v93 = *(_QWORD *)(a1 + 72);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  ausdk::AUElement::SetParameter(v94, 0x1Du, 0.0, 0);
  v96 = *(_QWORD *)(a1 + 72);
  if (v96)
  {
    v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
  }
  else
  {
    v98 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v98)
      v97 = 0;
    else
      v97 = *v98;
  }
  ausdk::AUElement::SetParameter(v97, 0x1Eu, -6.0, 0);
  v99 = *(_QWORD *)(a1 + 72);
  if (v99)
  {
    v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v99 + 32))(v99, 0);
  }
  else
  {
    v101 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v101)
      v100 = 0;
    else
      v100 = *v101;
  }
  ausdk::AUElement::SetParameter(v100, 0x1Fu, 10.0, 0);
  v102 = *(_QWORD *)(a1 + 72);
  if (v102)
  {
    v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0);
  }
  else
  {
    v104 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v104)
      v103 = 0;
    else
      v103 = *v104;
  }
  ausdk::AUElement::SetParameter(v103, 0x20u, 0.0, 0);
  v105 = *(_QWORD *)(a1 + 72);
  if (v105)
  {
    v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0);
  }
  else
  {
    v107 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v107)
      v106 = 0;
    else
      v106 = *v107;
  }
  ausdk::AUElement::SetParameter(v106, 0x21u, 80.0, 0);
  v108 = *(_QWORD *)(a1 + 72);
  if (v108)
  {
    v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 32))(v108, 0);
  }
  else
  {
    v110 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v110)
      v109 = 0;
    else
      v109 = *v110;
  }
  ausdk::AUElement::SetParameter(v109, 0x22u, 2.0, 0);
  v111 = *(_QWORD *)(a1 + 72);
  if (v111)
  {
    v112 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0);
  }
  else
  {
    v113 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v113)
      v112 = 0;
    else
      v112 = *v113;
  }
  ausdk::AUElement::SetParameter(v112, 0x23u, 40.0, 0);
  v124 = 0x40D5888000000000;
  v125 = xmmword_1B66A0BD0;
  v126 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v124);
  v115 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v115 + 56))(v115, &v124);
  v116 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v116 + 56))(v116, &v124);
  v117 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v117 + 56))(v117, &v124);
  v121 = 0x40D5888000000000;
  v123 = xmmword_1B6626910;
  v122 = xmmword_1B6626900;
  v118 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v121);
  v119 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v121);
  *(_DWORD *)(a1 + 540) = 65793;
  *(_WORD *)(a1 + 544) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(_BYTE *)(a1 + 376) = 1;
  return a1;
}

void sub_1B61DA8CC(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t Element;
  uint64_t v55;
  uint64_t v57;
  __int128 v58;
  __int128 v59;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69E35B8;
  *((_QWORD *)v3 + 66) = 1186693120;
  *((_DWORD *)v3 + 134) = 0;
  *((_BYTE *)v3 + 540) = 1;
  *((_QWORD *)v3 + 68) = 0xF1000000F0;
  *((_DWORD *)v3 + 138) = 0;
  *((_DWORD *)v3 + 139) = 65793;
  *((_OWORD *)v3 + 35) = xmmword_1B66A0E30;
  *((_QWORD *)v3 + 72) = 0;
  *((_QWORD *)v3 + 74) = 0;
  *((_QWORD *)v3 + 73) = 0;
  *((_WORD *)v3 + 300) = 0;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_QWORD *)v3 + 90) = 0;
  *((_DWORD *)v3 + 182) = 1065353216;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 16);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 64.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, 1.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 1.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 1.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 0.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 0.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 7u, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 0.9, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, -100.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 1.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 0xBu, -100.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xCu, 64.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xDu, 64.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xEu, 64.0, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xFu, 64.0, 0);
  v57 = 0x40E5888000000000;
  v58 = xmmword_1B66A0BD0;
  v59 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v57);
  v55 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v55 + 56))(v55, &v57);
  *(_BYTE *)(a1 + 540) = 1;
  *(_BYTE *)(a1 + 376) = 1;
  return a1;
}

void sub_1B61DAEA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = (void *)v1[88];
  if (v3)
  {
    v1[89] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[85];
  if (v4)
  {
    v1[86] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[82];
  if (v5)
  {
    v1[83] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[79];
  if (v6)
  {
    v1[80] = v6;
    operator delete(v6);
  }
  v7 = v1[78];
  v1[78] = 0;
  if (v7)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  v8 = (_QWORD **)(v1 + 76);
  v9 = v1[77];
  v1[77] = 0;
  if (v9)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v9);
  v10 = *v8;
  *v8 = 0;
  if (v10)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t Element;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69E62E0;
  *((_DWORD *)v3 + 132) = 0;
  *((_BYTE *)v3 + 532) = 1;
  *((_DWORD *)v3 + 134) = 240;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_QWORD *)v3 + 76) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 4);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 64.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, 64.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 64.0, 0);
  v21 = 0x40E5888000000000;
  v22 = xmmword_1B66A0BD0;
  v23 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v21);
  v19 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 56))(v19, &v21);
  *(_BYTE *)(a1 + 532) = 1;
  *(_BYTE *)(a1 + 376) = 1;
  return a1;
}

void sub_1B61DB15C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (void *)v1[74];
  if (v3)
  {
    v1[75] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[71];
  if (v4)
  {
    v1[72] = v4;
    operator delete(v4);
  }
  v5 = v1[70];
  v1[70] = 0;
  if (v5)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v5);
  v6 = (_QWORD **)(v1 + 68);
  v7 = v1[69];
  v1[69] = 0;
  if (v7)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  v8 = *v6;
  *v6 = 0;
  if (v8)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v8);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Element;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 3);
  *(_QWORD *)v3 = &off_1E69CC7D0;
  *((_QWORD *)v3 + 66) = 0;
  *((_BYTE *)v3 + 536) = 0;
  *(_QWORD *)((char *)v3 + 540) = 0;
  *((_WORD *)v3 + 274) = 0;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_QWORD *)v3 + 73) = 0;
  *((_QWORD *)v3 + 74) = 1065353216;
  *((_DWORD *)v3 + 150) = 0;
  *((_QWORD *)v3 + 77) = 0;
  *((_QWORD *)v3 + 76) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 11);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, -18.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, 40.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 40.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 80.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 7u, 5.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 0.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, 1000.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 0.0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1024);
  v53 = 0x40CF400000000000;
  v54 = xmmword_1B66A0BD0;
  v55 = xmmword_1B66A0BE0;
  v50 = 0x40CF400000000000;
  v52 = xmmword_1B6626910;
  v51 = xmmword_1B66A0DF0;
  v39 = *(_QWORD *)(a1 + 120);
  if (v39)
    LODWORD(v40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  else
    v40 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
  *(_DWORD *)(a1 + 624) = v40;
  v41 = *(_QWORD *)(a1 + 168);
  if (v41)
    LODWORD(v42) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  else
    v42 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
  *(_DWORD *)(a1 + 628) = v42;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v53);
  if (*(_DWORD *)(a1 + 624) >= 2u)
  {
    v44 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 56))(v44, &v50);
    if (*(_DWORD *)(a1 + 624) >= 3u)
    {
      v45 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v45 + 56))(v45, &v50);
    }
  }
  v46 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 56))(v46, &v53);
  if (*(_DWORD *)(a1 + 628) >= 2u)
  {
    v47 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v47 + 56))(v47, &v50);
    if (*(_DWORD *)(a1 + 628) >= 3u)
    {
      v48 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v48 + 56))(v48, &v50);
    }
  }
  return a1;
}

void sub_1B61DB704(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t Element;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(_QWORD *)v3 = &off_1E69DCB70;
  *((_QWORD *)v3 + 66) = 0;
  *((_BYTE *)v3 + 536) = 0;
  *(_QWORD *)((char *)v3 + 540) = 0;
  *((_WORD *)v3 + 274) = 0;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 580) = 0u;
  *((_QWORD *)v3 + 75) = 1065353216;
  *((_DWORD *)v3 + 152) = 0;
  *((_QWORD *)v3 + 78) = 0;
  *((_QWORD *)v3 + 77) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 8);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, -6.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, 40.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 40.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 80.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 7u, 5.0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1024);
  v38 = 0x40D5888000000000;
  v39 = xmmword_1B66A0BD0;
  v40 = xmmword_1B66A0BE0;
  v35 = 0x40D5888000000000;
  v37 = xmmword_1B6626910;
  v36 = xmmword_1B66A0DF0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v38);
  v31 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 56))(v31, &v35);
  v32 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 56))(v32, &v38);
  v33 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 56))(v33, &v35);
  return a1;
}

void sub_1B61DBADC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  _OWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Element;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v3 = &off_1E69C7B40;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  v4 = (_OWORD *)((char *)v3 + 568);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 1456) = 0;
  *(_OWORD *)((char *)v3 + 1464) = 0u;
  *(_OWORD *)((char *)v3 + 1480) = 0u;
  *(_OWORD *)((char *)v3 + 1496) = 0u;
  *(_OWORD *)((char *)v3 + 1512) = 0u;
  *(_OWORD *)((char *)v3 + 1528) = 0u;
  *(_OWORD *)((char *)v3 + 1544) = 0u;
  *(_OWORD *)(a1 + 1557) = 0u;
  *(_DWORD *)(a1 + 1672) = 0;
  *((_OWORD *)v3 + 105) = 0u;
  *((_OWORD *)v3 + 106) = 0u;
  *((_OWORD *)v3 + 107) = 0u;
  *((_OWORD *)v3 + 108) = 0u;
  *((_OWORD *)v3 + 109) = 0u;
  *((_OWORD *)v3 + 110) = 0u;
  *(_OWORD *)((char *)v3 + 1773) = 0u;
  *(_DWORD *)(a1 + 1888) = 0;
  *(_OWORD *)((char *)v3 + 1896) = 0u;
  *(_OWORD *)((char *)v3 + 1912) = 0u;
  *(_OWORD *)((char *)v3 + 1928) = 0u;
  *(_OWORD *)((char *)v3 + 1944) = 0u;
  *(_OWORD *)((char *)v3 + 1960) = 0u;
  *(_OWORD *)((char *)v3 + 1976) = 0u;
  *(_OWORD *)(a1 + 1989) = 0u;
  *(_DWORD *)(a1 + 2104) = 0;
  *((_OWORD *)v3 + 132) = 0u;
  *((_OWORD *)v3 + 133) = 0u;
  *((_OWORD *)v3 + 134) = 0u;
  *((_OWORD *)v3 + 135) = 0u;
  *((_OWORD *)v3 + 136) = 0u;
  *((_OWORD *)v3 + 137) = 0u;
  *(_OWORD *)((char *)v3 + 2205) = 0u;
  *(_DWORD *)(a1 + 2320) = 0;
  *(_OWORD *)((char *)v3 + 2328) = 0u;
  *(_OWORD *)((char *)v3 + 2344) = 0u;
  *(_OWORD *)((char *)v3 + 2360) = 0u;
  *(_OWORD *)((char *)v3 + 2376) = 0u;
  *(_OWORD *)((char *)v3 + 2392) = 0u;
  *(_OWORD *)((char *)v3 + 2408) = 0u;
  *(_OWORD *)(a1 + 2421) = 0u;
  *(_DWORD *)(a1 + 2616) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *((_OWORD *)v3 + 162) = 0u;
  *((_OWORD *)v3 + 165) = 0u;
  *((_OWORD *)v3 + 166) = 0u;
  *((_OWORD *)v3 + 167) = 0u;
  *((_OWORD *)v3 + 168) = 0u;
  *((_OWORD *)v3 + 169) = 0u;
  *((_OWORD *)v3 + 170) = 0u;
  *((_OWORD *)v3 + 171) = 0u;
  *((_OWORD *)v3 + 172) = 0u;
  *((_OWORD *)v3 + 164) = 0u;
  *(_OWORD *)((char *)v3 + 2764) = 0u;
  *(_DWORD *)(a1 + 2864) = 0;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_DWORD *)(a1 + 2896) = 0;
  *(_QWORD *)(a1 + 2888) = 0;
  *(_OWORD *)((char *)v3 + 2872) = 0u;
  *(_OWORD *)((char *)v3 + 3044) = 0u;
  *(_OWORD *)((char *)v3 + 3032) = 0u;
  *(_OWORD *)((char *)v3 + 3016) = 0u;
  *(_OWORD *)((char *)v3 + 3000) = 0u;
  *(_OWORD *)((char *)v3 + 2984) = 0u;
  *(_OWORD *)((char *)v3 + 2968) = 0u;
  *(_OWORD *)((char *)v3 + 2952) = 0u;
  *(_OWORD *)((char *)v3 + 2936) = 0u;
  *(_OWORD *)((char *)v3 + 2920) = 0u;
  *(_OWORD *)((char *)v3 + 2904) = 0u;
  *(_DWORD *)(a1 + 3080) = 0;
  *(_OWORD *)((char *)v3 + 3064) = 0u;
  *(_DWORD *)(a1 + 3248) = 0;
  *((_OWORD *)v3 + 202) = 0u;
  *((_OWORD *)v3 + 201) = 0u;
  *((_OWORD *)v3 + 200) = 0u;
  *((_OWORD *)v3 + 199) = 0u;
  *((_OWORD *)v3 + 198) = 0u;
  *((_OWORD *)v3 + 197) = 0u;
  *((_OWORD *)v3 + 196) = 0u;
  *((_OWORD *)v3 + 195) = 0u;
  *((_OWORD *)v3 + 194) = 0u;
  *((_OWORD *)v3 + 193) = 0u;
  *(_DWORD *)(a1 + 3464) = 0;
  *(_OWORD *)((char *)v3 + 3448) = 0u;
  *(_OWORD *)((char *)v3 + 3432) = 0u;
  *(_OWORD *)((char *)v3 + 3416) = 0u;
  *(_OWORD *)((char *)v3 + 3400) = 0u;
  *(_OWORD *)((char *)v3 + 3384) = 0u;
  *(_OWORD *)((char *)v3 + 3368) = 0u;
  *(_OWORD *)((char *)v3 + 3352) = 0u;
  *(_OWORD *)((char *)v3 + 3336) = 0u;
  *(_OWORD *)((char *)v3 + 3320) = 0u;
  *(_OWORD *)((char *)v3 + 3304) = 0u;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3584) = 0;
  *(_DWORD *)(a1 + 3608) = 0;
  *(_QWORD *)(a1 + 3600) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 570) = 0;
  *(_QWORD *)(a1 + 3616) = 0;
  *(_DWORD *)(a1 + 3624) = 0;
  *(_DWORD *)(a1 + 3696) = 0;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  bzero((char *)v3 + 616, 0x345uLL);
  *(_OWORD *)(a1 + 1653) = 0u;
  v4[67] = 0u;
  v4[66] = 0u;
  v4[65] = 0u;
  v4[63] = 0u;
  v4[64] = 0u;
  *(_OWORD *)((char *)v4 + 1224) = 0u;
  *(_OWORD *)((char *)v4 + 1240) = 0u;
  *(_OWORD *)((char *)v4 + 1256) = 0u;
  *(_OWORD *)((char *)v4 + 1272) = 0u;
  *(_OWORD *)((char *)v4 + 1288) = 0u;
  *(_OWORD *)((char *)v4 + 1301) = 0u;
  v4[90] = 0u;
  v4[91] = 0u;
  v4[92] = 0u;
  v4[93] = 0u;
  v4[94] = 0u;
  *(_OWORD *)(a1 + 2085) = 0u;
  *(_OWORD *)((char *)v4 + 1733) = 0u;
  *(_OWORD *)((char *)v4 + 1720) = 0u;
  *(_OWORD *)((char *)v4 + 1704) = 0u;
  *(_OWORD *)((char *)v4 + 1688) = 0u;
  *(_OWORD *)((char *)v4 + 1672) = 0u;
  *(_OWORD *)((char *)v4 + 1656) = 0u;
  *(_DWORD *)(a1 + 2584) = 0;
  v4[125] = 0u;
  v4[124] = 0u;
  v4[123] = 0u;
  v4[122] = 0u;
  v4[121] = 0u;
  v4[120] = 0u;
  v4[119] = 0u;
  v4[118] = 0u;
  v4[117] = 0u;
  *(_OWORD *)((char *)v4 + 2716) = 0u;
  v4[169] = 0u;
  v4[168] = 0u;
  *(_OWORD *)(a1 + 3516) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3564) = 0u;
  *(_DWORD *)(a1 + 3700) = 3;
  *(_QWORD *)(a1 + 3704) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v5 = 0;
  v55 = 0x40CF400000000000;
  v56 = xmmword_1B6626900;
  v57 = xmmword_1B6626910;
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 120);
    if (v6)
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    else
      v7 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v5 >= v7)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v5);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v55);
    ++v5;
  }
  for (i = 0; ; ++i)
  {
    v10 = *(_QWORD *)(a1 + 168);
    if (v10)
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      v11 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v11)
      break;
    v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 56))(v12, &v55);
  }
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  else
    v14 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, 13);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 0, 80.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 1u, 2.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 3u, 120.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 2u, 480.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 4u, 1.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 5u, 1.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 6u, 0.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 7u, 0.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 8u, 0.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 9u, 0.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xAu, 0.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xBu, 2.0, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xBu, 1.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 120);
  *(_QWORD *)(a1 + 3704) = 0;
  *(_DWORD *)(a1 + 3712) = 0;
  return a1;
}

void sub_1B61DC2D8(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  AUsubMAEC::myAecCore *v2;

  AUsubMAEC::myAecCore::~myAecCore(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Construct(_QWORD *a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t Element;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69E6628;
  *((_BYTE *)v3 + 528) = 0;
  *((_DWORD *)v3 + 133) = 1;
  *((_QWORD *)v3 + 67) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_QWORD *)((char *)v3 + 588) = 1;
  *((_DWORD *)v3 + 153) = 0;
  *((_QWORD *)v3 + 80) = 1;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = a1[9];
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  ausdk::AUElement::SetParameter(v5, 0, -27.0, 0);
  v7 = a1[9];
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, 1u, -27.0, 0);
  v10 = a1[9];
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 2u, -40.0, 0);
  v13 = a1[9];
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 3u, 0.001, 0);
  v16 = a1[9];
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 4u, 0.01, 0);
  v19 = a1[9];
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 5u, 0.001, 0);
  v22 = a1[9];
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 6u, 0.001, 0);
  v25 = a1[9];
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 7u, 0.02, 0);
  v28 = a1[9];
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 8u, 0.01, 0);
  v35 = 0x40E5888000000000;
  v36 = xmmword_1B6626900;
  v37 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v35);
  v32 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 56))(v32, &v35);
  v33 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 56))(v33, &v35);
  return a1;
}

void sub_1B61DC678(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 3);
  *(_QWORD *)v3 = &off_1E69D2E88;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_QWORD *)v3 + 77) = 850045863;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_QWORD *)v3 + 84) = 0;
  v4 = (uint64_t *)((char *)v3 + 728);
  v5 = (uint64_t *)((char *)v3 + 792);
  *((_QWORD *)v3 + 99) = 0;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 769) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v88 = 0x40CF400000000000;
  v89 = xmmword_1B6626900;
  v90 = xmmword_1B66A0820;
  v85 = 0x40CF400000000000;
  v86 = xmmword_1B6626900;
  v87 = xmmword_1B66A0830;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v88);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v85);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v88);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v88);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 56))(v10, &v88);
  v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v85);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  else
    v13 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 23);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 160.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, -60.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, -60.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, 7.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, -120.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 2.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, -20.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, 2.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 3333.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 0.5, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.032, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, 3.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xCu, -80.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xDu, 32.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, 0.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xFu, 0.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x10u, 0.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x11u, 1.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x12u, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x13u, 2.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x14u, -160.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x15u, 30.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x16u, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  v83 = *v4;
  *v4 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  *(_QWORD *)(a1 + 540) = 0x3E80000000A0;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 552) = 0x200000004;
  *(_DWORD *)(a1 + 572) = 32;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 588) = 2;
  *(_QWORD *)(a1 + 592) = 0x41F00000C3200000;
  *(_OWORD *)(a1 + 680) = xmmword_1B66A0E40;
  *(_OWORD *)(a1 + 696) = xmmword_1B66A0E50;
  *(_OWORD *)(a1 + 712) = xmmword_1B66A0E60;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1B61DCF30(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  std::mutex *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  void *v7;
  uint64_t v8;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v3, 0);
  v6 = (void *)*((_QWORD *)v1 + 95);
  if (v6)
  {
    *((_QWORD *)v1 + 96) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 92);
  if (v7)
  {
    *((_QWORD *)v1 + 93) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  *v4 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::mutex::~mutex(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  _OWORD *v3;
  ausdk::AUBase *v4;
  uint64_t *v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  ausdk::AUElement **v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  ausdk::AUElement **v104;
  caulk::concurrent::messenger *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;

  v3 = (_OWORD *)(a1 + 532);
  v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v4 = &off_1E69E8050;
  *((_BYTE *)v4 + 528) = 0;
  *v3 = xmmword_1B66A0E70;
  v3[1] = xmmword_1B66A0E80;
  v3[2] = xmmword_1B66A0E90;
  *(_QWORD *)((char *)v4 + 580) = 0x140800000;
  *((_DWORD *)v4 + 147) = 1086324736;
  *((_BYTE *)v4 + 592) = 1;
  *(_QWORD *)((char *)v4 + 596) = 0x100000000;
  *((_DWORD *)v4 + 151) = 1133903872;
  *((_QWORD *)v4 + 76) = 0x3E99999A44E10000;
  *((_QWORD *)v4 + 77) = 0;
  *((_OWORD *)v4 + 39) = 0u;
  *((_DWORD *)v4 + 160) = 1065353216;
  *((_BYTE *)v4 + 644) = 0;
  *(_OWORD *)((char *)v3 + 116) = xmmword_1B66A0EA0;
  *((_QWORD *)v4 + 83) = 0xC08000003F800000;
  *((_BYTE *)v4 + 672) = 0;
  *((_DWORD *)v4 + 169) = 1008981770;
  *((_BYTE *)v4 + 680) = 0;
  *((_BYTE *)v4 + 688) = 0;
  *((_BYTE *)v4 + 696) = 0;
  *((_BYTE *)v4 + 704) = 0;
  *((_BYTE *)v4 + 712) = 0;
  v5 = (uint64_t *)((char *)v4 + 720);
  *((_OWORD *)v4 + 45) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v4);
  v112 = 0x40D7700000000000;
  v113 = xmmword_1B6626900;
  v114 = xmmword_1B66A0820;
  v109 = 0x40D7700000000000;
  v111 = xmmword_1B66A0830;
  v110 = xmmword_1B6626900;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v112);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v109);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v112);
  v9 = *(_QWORD *)(a1 + 168);
  if (v9)
    LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  else
    v10 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
  if (v10 >= 2)
  {
    v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v112);
    if ((_DWORD)v10 != 2)
    {
      v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 56))(v12, &v109);
    }
  }
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  else
    v14 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, 30);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 0, 360.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 1u, -120.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 2u, 20.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 3u, 3.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 4u, -120.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 5u, 4.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 6u, 1.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 7u, 6.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 8u, 1.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 9u, 0.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xAu, 1.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xBu, 300.0, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xCu, 1800.0, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0xDu, 0.3, 0);
  v57 = *(_QWORD *)(a1 + 72);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  ausdk::AUElement::SetParameter(v58, 0xEu, 0.0, 0);
  v60 = *(_QWORD *)(a1 + 72);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  ausdk::AUElement::SetParameter(v61, 0xFu, 0.0, 0);
  v63 = *(_QWORD *)(a1 + 72);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  ausdk::AUElement::SetParameter(v64, 0x10u, 10.0, 0);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  ausdk::AUElement::SetParameter(v67, 0x11u, 0.0, 0);
  v69 = *(_QWORD *)(a1 + 72);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0x12u, 0.0, 0);
  v72 = *(_QWORD *)(a1 + 72);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  ausdk::AUElement::SetParameter(v73, 0x13u, 1.0, 0);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  ausdk::AUElement::SetParameter(v76, 0x14u, 0.0, 0);
  v78 = *(_QWORD *)(a1 + 72);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  ausdk::AUElement::SetParameter(v79, 0x15u, 40.0, 0);
  v81 = *(_QWORD *)(a1 + 72);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  ausdk::AUElement::SetParameter(v82, 0x16u, 120.0, 0);
  v84 = *(_QWORD *)(a1 + 72);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  ausdk::AUElement::SetParameter(v85, 0x17u, 0.1, 0);
  v87 = *(_QWORD *)(a1 + 72);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  ausdk::AUElement::SetParameter(v88, 0x18u, -10.0, 0);
  v90 = *(_QWORD *)(a1 + 72);
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  ausdk::AUElement::SetParameter(v91, 0x19u, 0.0, 0);
  v93 = *(_QWORD *)(a1 + 72);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  ausdk::AUElement::SetParameter(v94, 0x1Au, -4.0, 0);
  v96 = *(_QWORD *)(a1 + 72);
  if (v96)
  {
    v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
  }
  else
  {
    v98 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v98)
      v97 = 0;
    else
      v97 = *v98;
  }
  ausdk::AUElement::SetParameter(v97, 0x1Bu, 0.0, 0);
  v99 = *(_QWORD *)(a1 + 72);
  if (v99)
  {
    v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v99 + 32))(v99, 0);
  }
  else
  {
    v101 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v101)
      v100 = 0;
    else
      v100 = *v101;
  }
  ausdk::AUElement::SetParameter(v100, 0x1Cu, 0.01, 0);
  v102 = *(_QWORD *)(a1 + 72);
  if (v102)
  {
    v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0);
  }
  else
  {
    v104 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v104)
      v103 = 0;
    else
      v103 = *v104;
  }
  ausdk::AUElement::SetParameter(v103, 0x1Du, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  v105 = (caulk::concurrent::messenger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  if (!*v5)
  {
    v106 = caulk::concurrent::messenger::shared_logging_priority(v105);
    v107 = operator new();
    MEMORY[0x1BCC94FFC](v107, 0, v106);
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, v107);
  }
  return a1;
}

void sub_1B61DDA68(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  MEMORY[0x1BCC95CEC](v3, 0x20C40A4A59CD2);
  std::unique_ptr<ecRMDF>::reset[abi:ne180100](v1 + 91, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(v1 + 88));
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(v1 + 86));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t Element;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  caulk::concurrent::messenger *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v3 = &off_1E69E5F28;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  v4 = (uint64_t *)((char *)v3 + 600);
  *(_OWORD *)((char *)v3 + 600) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v46 = 0x40D7700000000000;
  v47 = xmmword_1B66A0BD0;
  v48 = xmmword_1B66A0CE0;
  v43 = 0x40D7700000000000;
  v45 = xmmword_1B66A0BC0;
  v44 = xmmword_1B66A0BD0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v46);
  v6 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 56))(v6, &v43);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v46);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v46);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v43);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  else
    v11 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, 9);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0, 360.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 1u, -120.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 2u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 3u, 6.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 4u, -120.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 5u, 3.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 6u, 4.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 7u, 2.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 8u, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  v39 = (caulk::concurrent::messenger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(_DWORD *)(a1 + 560) = 360;
  *(_DWORD *)(a1 + 540) = 24000;
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 548) = 0x200000004;
  *(_OWORD *)(a1 + 564) = xmmword_1B66A0EB0;
  *(_DWORD *)(a1 + 580) = 3;
  *(_QWORD *)(a1 + 584) = 0x200000004;
  *(_BYTE *)(a1 + 592) = 0;
  if (!*(_QWORD *)(a1 + 600))
  {
    v40 = caulk::concurrent::messenger::shared_logging_priority(v39);
    v41 = operator new();
    MEMORY[0x1BCC94FFC](v41, 0, v40);
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v4, v41);
  }
  return a1;
}

void sub_1B61DDF5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  MEMORY[0x1BCC95CEC](v3, 0x20C40A4A59CD2);
  std::unique_ptr<ecRMGS>::reset[abi:ne180100](v1 + 76, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 4);
  *(_QWORD *)v3 = &off_1E69D2668;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_QWORD *)v3 + 78) = 850045863;
  *((_WORD *)v3 + 356) = 0;
  *((_WORD *)v3 + 378) = 0;
  v4 = (uint64_t *)((char *)v3 + 760);
  v5 = (uint64_t *)((char *)v3 + 840);
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 676) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *((_QWORD *)v3 + 105) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v111 = 0x40CF400000000000;
  v112 = xmmword_1B6626900;
  v113 = xmmword_1B66A0830;
  v108 = 0x40CF400000000000;
  v109 = xmmword_1B6626900;
  v110 = xmmword_1B66A0830;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v111);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v108);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v111);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v111);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 56))(v10, &v108);
  v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 3u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v111);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  else
    v13 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 31);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 32.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, -120.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, 1.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, -120.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 1.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 0.64, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, -80.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 32.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 0.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, 1.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xCu, 8.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xDu, 1.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, 1.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xFu, 0.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x10u, 0.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x11u, 1.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x12u, 2.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x13u, -160.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x14u, 30.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x15u, 1.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x16u, 0.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x17u, 0.0, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x18u, 0.0, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x19u, 32.0, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Au, 0.0, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Bu, 0.32, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Cu, 1.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Du, 0.0, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Eu, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  std::unique_ptr<ecSUMO>::reset[abi:ne180100](v4, 0);
  *(_QWORD *)(a1 + 540) = 0x3E8000000020;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 552) = 0x200000002;
  *(_DWORD *)(a1 + 560) = 2;
  *(_DWORD *)(a1 + 572) = 32;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 600) = 0x41F00000C3200000;
  *(_OWORD *)(a1 + 716) = xmmword_1B66A0EC0;
  *(_DWORD *)(a1 + 732) = 1065353216;
  *(_QWORD *)(a1 + 736) = 0xC2A000003F23D70ALL;
  *(_QWORD *)(a1 + 744) = 0x100000000;
  *(_DWORD *)(a1 + 588) = 8;
  *(_DWORD *)(a1 + 752) = 1;
  *(_QWORD *)(a1 + 592) = 0x23F800000;
  *(_WORD *)(a1 + 692) = 1;
  *(_QWORD *)(a1 + 696) = 0x2000000000;
  *(_WORD *)(a1 + 712) = 0;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1B61DEA90(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  std::mutex *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  void *v7;
  void *v8;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v3, 0);
  v6 = (void *)*((_QWORD *)v1 + 102);
  if (v6)
  {
    *((_QWORD *)v1 + 103) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 99);
  if (v7)
  {
    *((_QWORD *)v1 + 100) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 96);
  if (v8)
  {
    *((_QWORD *)v1 + 97) = v8;
    operator delete(v8);
  }
  std::unique_ptr<ecSUMO>::reset[abi:ne180100](v4, 0);
  std::mutex::~mutex(v2);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v3 = &off_1E69CCE50;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  v4 = (uint64_t *)((char *)v3 + 720);
  v5 = (uint64_t *)((char *)v3 + 776);
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v123 = 0x40CF400000000000;
  v124 = xmmword_1B6626900;
  v125 = xmmword_1B66A0830;
  v120 = 0x40CF400000000000;
  v121 = xmmword_1B6626900;
  v122 = xmmword_1B66A0830;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v123);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v120);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v123);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v123);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 56))(v10, &v120);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
    v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  else
    v12 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, 35);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 0, 32.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 1u, -65.0, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 2u, -65.0, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 3u, 7.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 4u, -120.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 5u, 2.0, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 6u, -20.0, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 7u, 2.0, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 8u, 3333.0, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 9u, 0.5, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0xAu, 0.032, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0xBu, 3.0, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0xCu, -160.0, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0xDu, 32.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0xEu, 0.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0xFu, 1.0, 0);
  v61 = *(_QWORD *)(a1 + 72);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  ausdk::AUElement::SetParameter(v62, 0x10u, 0.0, 0);
  v64 = *(_QWORD *)(a1 + 72);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  ausdk::AUElement::SetParameter(v65, 0x11u, 0.0, 0);
  v67 = *(_QWORD *)(a1 + 72);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  ausdk::AUElement::SetParameter(v68, 0x12u, 0.0, 0);
  v70 = *(_QWORD *)(a1 + 72);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  ausdk::AUElement::SetParameter(v71, 0x13u, 0.0, 0);
  v73 = *(_QWORD *)(a1 + 72);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  ausdk::AUElement::SetParameter(v74, 0x14u, 0.0, 0);
  v76 = *(_QWORD *)(a1 + 72);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  ausdk::AUElement::SetParameter(v77, 0x15u, 0.0, 0);
  v79 = *(_QWORD *)(a1 + 72);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  ausdk::AUElement::SetParameter(v80, 0x16u, 0.0, 0);
  v82 = *(_QWORD *)(a1 + 72);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  ausdk::AUElement::SetParameter(v83, 0x17u, 1.0, 0);
  v85 = *(_QWORD *)(a1 + 72);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 0x18u, 0.0, 0);
  v88 = *(_QWORD *)(a1 + 72);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  ausdk::AUElement::SetParameter(v89, 0x19u, -160.0, 0);
  v91 = *(_QWORD *)(a1 + 72);
  if (v91)
  {
    v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
  }
  else
  {
    v93 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v93)
      v92 = 0;
    else
      v92 = *v93;
  }
  ausdk::AUElement::SetParameter(v92, 0x1Au, 30.0, 0);
  v94 = *(_QWORD *)(a1 + 72);
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
  }
  else
  {
    v96 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  ausdk::AUElement::SetParameter(v95, 0x1Bu, 0.0, 0);
  v97 = *(_QWORD *)(a1 + 72);
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
  }
  else
  {
    v99 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  ausdk::AUElement::SetParameter(v98, 0x1Cu, 300.0, 0);
  v100 = *(_QWORD *)(a1 + 72);
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
  }
  else
  {
    v102 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  ausdk::AUElement::SetParameter(v101, 0x1Du, 1800.0, 0);
  v103 = *(_QWORD *)(a1 + 72);
  if (v103)
  {
    v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
  }
  else
  {
    v105 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v105)
      v104 = 0;
    else
      v104 = *v105;
  }
  ausdk::AUElement::SetParameter(v104, 0x1Eu, 0.03, 0);
  v106 = *(_QWORD *)(a1 + 72);
  if (v106)
  {
    v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
  }
  else
  {
    v108 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v108)
      v107 = 0;
    else
      v107 = *v108;
  }
  ausdk::AUElement::SetParameter(v107, 0x1Fu, 0.0, 0);
  v109 = *(_QWORD *)(a1 + 72);
  if (v109)
  {
    v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
  }
  else
  {
    v111 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v111)
      v110 = 0;
    else
      v110 = *v111;
  }
  ausdk::AUElement::SetParameter(v110, 0x20u, 0.0, 0);
  v112 = *(_QWORD *)(a1 + 72);
  if (v112)
  {
    v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
  }
  else
  {
    v114 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v114)
      v113 = 0;
    else
      v113 = *v114;
  }
  ausdk::AUElement::SetParameter(v113, 0x21u, 0.0, 0);
  v115 = *(_QWORD *)(a1 + 72);
  if (v115)
  {
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
  }
  else
  {
    v117 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  ausdk::AUElement::SetParameter(v116, 0x22u, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  v118 = *v4;
  *v4 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  *(_QWORD *)(a1 + 540) = 0x3E8000000020;
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 552) = 0x200000002;
  *(_DWORD *)(a1 + 568) = 32;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 588) = 1;
  *(_QWORD *)(a1 + 592) = 0x41F00000C3200000;
  *(_QWORD *)(a1 + 600) = 0x4396000000000000;
  *(_QWORD *)(a1 + 608) = 0x3CF5C28F44E10000;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 648) = xmmword_1B66A0ED0;
  *(_OWORD *)(a1 + 664) = xmmword_1B66A0E50;
  *(_OWORD *)(a1 + 680) = xmmword_1B66A0EE0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 701) = 0;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v5, 0);
  return a1;
}

void sub_1B61DF6A8(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  uint64_t *v2;
  uint64_t *v3;
  void *v5;
  void *v6;
  uint64_t v7;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  v5 = (void *)*((_QWORD *)v1 + 94);
  if (v5)
  {
    *((_QWORD *)v1 + 95) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 91);
  if (v6)
  {
    *((_QWORD *)v1 + 92) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Element;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  ausdk::AUElement **v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  ausdk::AUElement **v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  ausdk::AUElement **v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  uint64_t v185;
  ausdk::AUElement *v186;
  ausdk::AUElement **v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  ausdk::AUElement **v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  ausdk::AUElement **v193;
  uint64_t v194;
  ausdk::AUElement *v195;
  ausdk::AUElement **v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  ausdk::AUElement **v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  ausdk::AUElement **v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  ausdk::AUElement **v205;
  uint64_t v206;
  ausdk::AUElement *v207;
  ausdk::AUElement **v208;
  uint64_t v209;
  ausdk::AUElement *v210;
  ausdk::AUElement **v211;
  uint64_t v212;
  ausdk::AUElement *v213;
  ausdk::AUElement **v214;
  uint64_t v215;
  ausdk::AUElement *v216;
  ausdk::AUElement **v217;
  uint64_t v218;
  ausdk::AUElement *v219;
  ausdk::AUElement **v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  ausdk::AUElement **v223;
  uint64_t v224;
  ausdk::AUElement *v225;
  ausdk::AUElement **v226;
  uint64_t v227;
  ausdk::AUElement *v228;
  ausdk::AUElement **v229;
  uint64_t v230;
  ausdk::AUElement *v231;
  ausdk::AUElement **v232;
  uint64_t v234;
  __int128 v235;
  __int128 v236;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 6);
  *(_QWORD *)v3 = &off_1E69D9F80;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_QWORD *)v3 + 85) = 0;
  *((_BYTE *)v3 + 688) = 0;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_QWORD *)v3 + 80) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = 0;
  v234 = 0x40D5888000000000;
  v235 = xmmword_1B6626900;
  v236 = xmmword_1B6626910;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 120);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v4 >= v6)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v234);
    ++v4;
  }
  for (i = 0; ; ++i)
  {
    v9 = *(_QWORD *)(a1 + 168);
    if (v9)
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    else
      v10 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v10)
      break;
    v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v234);
  }
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  else
    v13 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 72);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 79.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, 0.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 0.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 1.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, 1.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xCu, 220.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xDu, 20.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, 100.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xFu, 200.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x10u, 150.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x11u, -35.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x12u, 0.4, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x13u, -0.5, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x14u, -6.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x15u, -90.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x16u, 20.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x17u, 0.35, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x18u, 0.15, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x19u, 0.86, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Au, 0.5, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Bu, 30.0, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Cu, 1.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Du, 0.01, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Eu, 0.0, 0);
  v107 = *(_QWORD *)(a1 + 72);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x1Fu, 0.04, 0);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x20u, 0.79, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x21u, 0.0, 0);
  v116 = *(_QWORD *)(a1 + 72);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x22u, 0.0, 0);
  v119 = *(_QWORD *)(a1 + 72);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  ausdk::AUElement::SetParameter(v120, 0x23u, -3.0, 0);
  v122 = *(_QWORD *)(a1 + 72);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0x24u, 0.0, 0);
  v125 = *(_QWORD *)(a1 + 72);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  ausdk::AUElement::SetParameter(v126, 0x25u, 0.0, 0);
  v128 = *(_QWORD *)(a1 + 72);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0x26u, 1.0, 0);
  v131 = *(_QWORD *)(a1 + 72);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  ausdk::AUElement::SetParameter(v132, 0x27u, 1.0, 0);
  v134 = *(_QWORD *)(a1 + 72);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x28u, 40.0, 0);
  v137 = *(_QWORD *)(a1 + 72);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
  }
  else
  {
    v139 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v139)
      v138 = 0;
    else
      v138 = *v139;
  }
  ausdk::AUElement::SetParameter(v138, 0x29u, 200.0, 0);
  v140 = *(_QWORD *)(a1 + 72);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0x2Au, 0.0, 0);
  v143 = *(_QWORD *)(a1 + 72);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
  }
  else
  {
    v145 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v145)
      v144 = 0;
    else
      v144 = *v145;
  }
  ausdk::AUElement::SetParameter(v144, 0x2Bu, 3.0, 0);
  v146 = *(_QWORD *)(a1 + 72);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0x2Cu, 1.0, 0);
  v149 = *(_QWORD *)(a1 + 72);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
  }
  else
  {
    v151 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v151)
      v150 = 0;
    else
      v150 = *v151;
  }
  ausdk::AUElement::SetParameter(v150, 0x2Du, 0.0, 0);
  v152 = *(_QWORD *)(a1 + 72);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0x2Eu, 1.0, 0);
  v155 = *(_QWORD *)(a1 + 72);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  ausdk::AUElement::SetParameter(v156, 0x2Fu, 1.0, 0);
  v158 = *(_QWORD *)(a1 + 72);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0x30u, 1.0, 0);
  v161 = *(_QWORD *)(a1 + 72);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
  }
  else
  {
    v163 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v163)
      v162 = 0;
    else
      v162 = *v163;
  }
  ausdk::AUElement::SetParameter(v162, 0x31u, 1.0, 0);
  v164 = *(_QWORD *)(a1 + 72);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  ausdk::AUElement::SetParameter(v165, 0x32u, 1.0, 0);
  v167 = *(_QWORD *)(a1 + 72);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
  }
  else
  {
    v169 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v169)
      v168 = 0;
    else
      v168 = *v169;
  }
  ausdk::AUElement::SetParameter(v168, 0x33u, 1.0, 0);
  v170 = *(_QWORD *)(a1 + 72);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x34u, 1.0, 0);
  v173 = *(_QWORD *)(a1 + 72);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
  }
  else
  {
    v175 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v175)
      v174 = 0;
    else
      v174 = *v175;
  }
  ausdk::AUElement::SetParameter(v174, 0x35u, 1.0, 0);
  v176 = *(_QWORD *)(a1 + 72);
  if (v176)
  {
    v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 0);
  }
  else
  {
    v178 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v178)
      v177 = 0;
    else
      v177 = *v178;
  }
  ausdk::AUElement::SetParameter(v177, 0x36u, 1.0, 0);
  v179 = *(_QWORD *)(a1 + 72);
  if (v179)
  {
    v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 32))(v179, 0);
  }
  else
  {
    v181 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v181)
      v180 = 0;
    else
      v180 = *v181;
  }
  ausdk::AUElement::SetParameter(v180, 0x37u, 1.0, 0);
  v182 = *(_QWORD *)(a1 + 72);
  if (v182)
  {
    v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
  }
  else
  {
    v184 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v184)
      v183 = 0;
    else
      v183 = *v184;
  }
  ausdk::AUElement::SetParameter(v183, 0x38u, -80.458, 0);
  v185 = *(_QWORD *)(a1 + 72);
  if (v185)
  {
    v186 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v185 + 32))(v185, 0);
  }
  else
  {
    v187 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v187)
      v186 = 0;
    else
      v186 = *v187;
  }
  ausdk::AUElement::SetParameter(v186, 0x3Bu, 0.0, 0);
  v188 = *(_QWORD *)(a1 + 72);
  if (v188)
  {
    v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 0);
  }
  else
  {
    v190 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v190)
      v189 = 0;
    else
      v189 = *v190;
  }
  ausdk::AUElement::SetParameter(v189, 0x39u, 0.0, 0);
  v191 = *(_QWORD *)(a1 + 72);
  if (v191)
  {
    v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v191 + 32))(v191, 0);
  }
  else
  {
    v193 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v193)
      v192 = 0;
    else
      v192 = *v193;
  }
  ausdk::AUElement::SetParameter(v192, 0x3Au, 1.0, 0);
  v194 = *(_QWORD *)(a1 + 72);
  if (v194)
  {
    v195 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v194 + 32))(v194, 0);
  }
  else
  {
    v196 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v196)
      v195 = 0;
    else
      v195 = *v196;
  }
  ausdk::AUElement::SetParameter(v195, 0x3Cu, -6.0, 0);
  v197 = *(_QWORD *)(a1 + 72);
  if (v197)
  {
    v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v197 + 32))(v197, 0);
  }
  else
  {
    v199 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v199)
      v198 = 0;
    else
      v198 = *v199;
  }
  ausdk::AUElement::SetParameter(v198, 0x3Du, 10.0, 0);
  v200 = *(_QWORD *)(a1 + 72);
  if (v200)
  {
    v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v200 + 32))(v200, 0);
  }
  else
  {
    v202 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v202)
      v201 = 0;
    else
      v201 = *v202;
  }
  ausdk::AUElement::SetParameter(v201, 0x3Eu, 6.0, 0);
  v203 = *(_QWORD *)(a1 + 72);
  if (v203)
  {
    v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v203 + 32))(v203, 0);
  }
  else
  {
    v205 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v205)
      v204 = 0;
    else
      v204 = *v205;
  }
  ausdk::AUElement::SetParameter(v204, 0x3Fu, 40.0, 0);
  v206 = *(_QWORD *)(a1 + 72);
  if (v206)
  {
    v207 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, 0);
  }
  else
  {
    v208 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v208)
      v207 = 0;
    else
      v207 = *v208;
  }
  ausdk::AUElement::SetParameter(v207, 0x40u, 0.0, 0);
  v209 = *(_QWORD *)(a1 + 72);
  if (v209)
  {
    v210 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v209 + 32))(v209, 0);
  }
  else
  {
    v211 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v211)
      v210 = 0;
    else
      v210 = *v211;
  }
  ausdk::AUElement::SetParameter(v210, 0x41u, 0.0, 0);
  v212 = *(_QWORD *)(a1 + 72);
  if (v212)
  {
    v213 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v212 + 32))(v212, 0);
  }
  else
  {
    v214 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v214)
      v213 = 0;
    else
      v213 = *v214;
  }
  ausdk::AUElement::SetParameter(v213, 0x42u, 0.0, 0);
  v215 = *(_QWORD *)(a1 + 72);
  if (v215)
  {
    v216 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v215 + 32))(v215, 0);
  }
  else
  {
    v217 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v217)
      v216 = 0;
    else
      v216 = *v217;
  }
  ausdk::AUElement::SetParameter(v216, 0x43u, 0.0, 0);
  v218 = *(_QWORD *)(a1 + 72);
  if (v218)
  {
    v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, 0);
  }
  else
  {
    v220 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v220)
      v219 = 0;
    else
      v219 = *v220;
  }
  ausdk::AUElement::SetParameter(v219, 0x44u, 0.0, 0);
  v221 = *(_QWORD *)(a1 + 72);
  if (v221)
  {
    v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v221 + 32))(v221, 0);
  }
  else
  {
    v223 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v223)
      v222 = 0;
    else
      v222 = *v223;
  }
  ausdk::AUElement::SetParameter(v222, 0x45u, 0.0, 0);
  v224 = *(_QWORD *)(a1 + 72);
  if (v224)
  {
    v225 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v224 + 32))(v224, 0);
  }
  else
  {
    v226 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v226)
      v225 = 0;
    else
      v225 = *v226;
  }
  ausdk::AUElement::SetParameter(v225, 0x46u, -26.0, 0);
  v227 = *(_QWORD *)(a1 + 72);
  if (v227)
  {
    v228 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v227 + 32))(v227, 0);
  }
  else
  {
    v229 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v229)
      v228 = 0;
    else
      v228 = *v229;
  }
  ausdk::AUElement::SetParameter(v228, 0x47u, 0.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(int32x4_t *)(a1 + 560) = vdupq_n_s32(0xC2C80000);
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 664) = 1;
  v230 = *(_QWORD *)(a1 + 72);
  if (v230)
  {
    v231 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v230 + 32))(v230, 0);
  }
  else
  {
    v232 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v232)
      v231 = 0;
    else
      v231 = *v232;
  }
  *(_BYTE *)(a1 + 672) = ausdk::AUElement::GetParameter(v231, 0x41u) != 0.0;
  return a1;
}

void sub_1B61E0C60(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  v3 = (_BYTE *)*((_QWORD *)v1 + 79);
  if (v3)
  {
    v4 = (_BYTE *)*((_QWORD *)v1 + 80);
    if (v4 != v3)
      *((_QWORD *)v1 + 80) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v3);
    *((_QWORD *)v1 + 79) = 0;
    *((_QWORD *)v1 + 80) = 0;
  }
  v5 = (_BYTE *)*((_QWORD *)v1 + 77);
  if (v5)
  {
    v6 = (_BYTE *)*((_QWORD *)v1 + 78);
    if (v6 != v5)
      *((_QWORD *)v1 + 78) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v5);
    *((_QWORD *)v1 + 77) = 0;
    *((_QWORD *)v1 + 78) = 0;
  }
  v7 = (_BYTE *)*((_QWORD *)v1 + 75);
  if (v7)
  {
    v8 = (_BYTE *)*((_QWORD *)v1 + 76);
    if (v8 != v7)
      *((_QWORD *)v1 + 76) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v7);
    *((_QWORD *)v1 + 75) = 0;
    *((_QWORD *)v1 + 76) = 0;
  }
  v9 = (_BYTE *)*((_QWORD *)v1 + 73);
  if (v9)
  {
    v10 = (_BYTE *)*((_QWORD *)v1 + 74);
    if (v10 != v9)
      *((_QWORD *)v1 + 74) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v9);
    *((_QWORD *)v1 + 73) = 0;
    *((_QWORD *)v1 + 74) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Element;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  ausdk::AUElement **v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  ausdk::AUElement **v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  ausdk::AUElement **v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  uint64_t v186;
  __int128 v187;
  __int128 v188;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v3 = &off_1E69CF5C0;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_QWORD *)v3 + 94) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = 0;
  v186 = 0x40D5888000000000;
  v187 = xmmword_1B6626900;
  v188 = xmmword_1B6626910;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 120);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v4 >= v6)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v186);
    ++v4;
  }
  for (i = 0; ; ++i)
  {
    v9 = *(_QWORD *)(a1 + 168);
    if (v9)
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    else
      v10 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v10)
      break;
    v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v186);
  }
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  else
    v13 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 57);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 79.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, 0.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 0.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 1.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, 1.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xCu, 220.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xDu, 20.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, 100.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xFu, 200.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x10u, 150.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x11u, -35.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x12u, 0.4, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x13u, -0.5, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x14u, -6.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x15u, -90.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x16u, 20.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x17u, 0.35, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x18u, 0.15, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x19u, 0.86, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Au, 0.5, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Bu, 30.0, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Cu, 1.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Du, 0.01, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Eu, 1.0, 0);
  v107 = *(_QWORD *)(a1 + 72);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x1Fu, 0.04, 0);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x20u, 0.79, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x21u, 0.0, 0);
  v116 = *(_QWORD *)(a1 + 72);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x22u, 0.0, 0);
  v119 = *(_QWORD *)(a1 + 72);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  ausdk::AUElement::SetParameter(v120, 0x23u, -3.0, 0);
  v122 = *(_QWORD *)(a1 + 72);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0x24u, 0.0, 0);
  v125 = *(_QWORD *)(a1 + 72);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  ausdk::AUElement::SetParameter(v126, 0x25u, 0.0, 0);
  v128 = *(_QWORD *)(a1 + 72);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0x26u, 1.0, 0);
  v131 = *(_QWORD *)(a1 + 72);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  ausdk::AUElement::SetParameter(v132, 0x27u, 1.0, 0);
  v134 = *(_QWORD *)(a1 + 72);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x28u, 40.0, 0);
  v137 = *(_QWORD *)(a1 + 72);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
  }
  else
  {
    v139 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v139)
      v138 = 0;
    else
      v138 = *v139;
  }
  ausdk::AUElement::SetParameter(v138, 0x29u, 200.0, 0);
  v140 = *(_QWORD *)(a1 + 72);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0x2Au, 0.0, 0);
  v143 = *(_QWORD *)(a1 + 72);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
  }
  else
  {
    v145 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v145)
      v144 = 0;
    else
      v144 = *v145;
  }
  ausdk::AUElement::SetParameter(v144, 0x2Bu, 3.0, 0);
  v146 = *(_QWORD *)(a1 + 72);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0x2Cu, 1.0, 0);
  v149 = *(_QWORD *)(a1 + 72);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
  }
  else
  {
    v151 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v151)
      v150 = 0;
    else
      v150 = *v151;
  }
  ausdk::AUElement::SetParameter(v150, 0x2Du, 0.0, 0);
  v152 = *(_QWORD *)(a1 + 72);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0x2Eu, 1.0, 0);
  v155 = *(_QWORD *)(a1 + 72);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  ausdk::AUElement::SetParameter(v156, 0x2Fu, 1.0, 0);
  v158 = *(_QWORD *)(a1 + 72);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0x30u, 1.0, 0);
  v161 = *(_QWORD *)(a1 + 72);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
  }
  else
  {
    v163 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v163)
      v162 = 0;
    else
      v162 = *v163;
  }
  ausdk::AUElement::SetParameter(v162, 0x31u, 1.0, 0);
  v164 = *(_QWORD *)(a1 + 72);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  ausdk::AUElement::SetParameter(v165, 0x32u, 1.0, 0);
  v167 = *(_QWORD *)(a1 + 72);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
  }
  else
  {
    v169 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v169)
      v168 = 0;
    else
      v168 = *v169;
  }
  ausdk::AUElement::SetParameter(v168, 0x33u, 1.0, 0);
  v170 = *(_QWORD *)(a1 + 72);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x34u, 1.0, 0);
  v173 = *(_QWORD *)(a1 + 72);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
  }
  else
  {
    v175 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v175)
      v174 = 0;
    else
      v174 = *v175;
  }
  ausdk::AUElement::SetParameter(v174, 0x35u, 1.0, 0);
  v176 = *(_QWORD *)(a1 + 72);
  if (v176)
  {
    v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 0);
  }
  else
  {
    v178 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v178)
      v177 = 0;
    else
      v177 = *v178;
  }
  ausdk::AUElement::SetParameter(v177, 0x36u, 1.0, 0);
  v179 = *(_QWORD *)(a1 + 72);
  if (v179)
  {
    v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 32))(v179, 0);
  }
  else
  {
    v181 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v181)
      v180 = 0;
    else
      v180 = *v181;
  }
  ausdk::AUElement::SetParameter(v180, 0x37u, 1.0, 0);
  v182 = *(_QWORD *)(a1 + 72);
  if (v182)
  {
    v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
  }
  else
  {
    v184 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v184)
      v183 = 0;
    else
      v183 = *v184;
  }
  ausdk::AUElement::SetParameter(v183, 0x38u, -80.458, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(int32x2_t *)(a1 + 680) = vdup_n_s32(0xC2C80000);
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = 0x100000001;
  *(_QWORD *)(a1 + 768) = 0x100000001;
  *(_DWORD *)(a1 + 792) = 1065353216;
  *(_DWORD *)(a1 + 764) = 0;
  return a1;
}

void sub_1B61E1E70(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  v3 = (_BYTE *)*((_QWORD *)v1 + 93);
  if (v3)
  {
    v4 = (_BYTE *)*((_QWORD *)v1 + 94);
    if (v4 != v3)
      *((_QWORD *)v1 + 94) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v3);
    *((_QWORD *)v1 + 93) = 0;
    *((_QWORD *)v1 + 94) = 0;
  }
  v5 = (_BYTE *)*((_QWORD *)v1 + 91);
  if (v5)
  {
    v6 = (_BYTE *)*((_QWORD *)v1 + 92);
    if (v6 != v5)
      *((_QWORD *)v1 + 92) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v5);
    *((_QWORD *)v1 + 91) = 0;
    *((_QWORD *)v1 + 92) = 0;
  }
  v7 = (_BYTE *)*((_QWORD *)v1 + 89);
  if (v7)
  {
    v8 = (_BYTE *)*((_QWORD *)v1 + 90);
    if (v8 != v7)
      *((_QWORD *)v1 + 90) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v7);
    *((_QWORD *)v1 + 89) = 0;
    *((_QWORD *)v1 + 90) = 0;
  }
  v9 = (_BYTE *)*((_QWORD *)v1 + 87);
  if (v9)
  {
    v10 = (_BYTE *)*((_QWORD *)v1 + 88);
    if (v10 != v9)
      *((_QWORD *)v1 + 88) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v9);
    *((_QWORD *)v1 + 87) = 0;
    *((_QWORD *)v1 + 88) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Element;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  uint64_t v141;
  __int128 v142;
  __int128 v143;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 3);
  *(_QWORD *)v3 = &off_1E69CE138;
  *((_BYTE *)v3 + 528) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_OWORD *)v3 + 45) = 0u;
  *((_OWORD *)v3 + 46) = 0u;
  *((_QWORD *)v3 + 94) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = 0;
  v141 = 0x40D5888000000000;
  v142 = xmmword_1B6626900;
  v143 = xmmword_1B6626910;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 120);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v4 >= v6)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v4);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v141);
    ++v4;
  }
  for (i = 0; ; ++i)
  {
    v9 = *(_QWORD *)(a1 + 168);
    if (v9)
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    else
      v10 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v10)
      break;
    v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v141);
  }
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  else
    v13 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 42);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 79.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, 0.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 0.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 1.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, 1.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xCu, 220.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xDu, 20.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, 100.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xFu, 200.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x10u, 150.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x11u, -35.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x12u, 0.4, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x13u, -0.5, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x14u, -6.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x15u, -90.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x16u, 20.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x17u, 0.35, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x18u, 0.15, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x19u, 0.86, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Au, 0.5, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Bu, 30.0, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Cu, 1.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Du, 0.01, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Eu, 1.0, 0);
  v107 = *(_QWORD *)(a1 + 72);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x1Fu, 0.04, 0);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x20u, 0.79, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x21u, 0.0, 0);
  v116 = *(_QWORD *)(a1 + 72);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x22u, 0.0, 0);
  v119 = *(_QWORD *)(a1 + 72);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  ausdk::AUElement::SetParameter(v120, 0x23u, -3.0, 0);
  v122 = *(_QWORD *)(a1 + 72);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0x24u, 0.0, 0);
  v125 = *(_QWORD *)(a1 + 72);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  ausdk::AUElement::SetParameter(v126, 0x25u, 0.0, 0);
  v128 = *(_QWORD *)(a1 + 72);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0x26u, 1.0, 0);
  v131 = *(_QWORD *)(a1 + 72);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  ausdk::AUElement::SetParameter(v132, 0x27u, 1.0, 0);
  v134 = *(_QWORD *)(a1 + 72);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x28u, 40.0, 0);
  v137 = *(_QWORD *)(a1 + 72);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
  }
  else
  {
    v139 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v139)
      v138 = 0;
    else
      v138 = *v139;
  }
  ausdk::AUElement::SetParameter(v138, 0x29u, 200.0, 0);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 480);
  *(int32x2_t *)(a1 + 680) = vdup_n_s32(0xC2C80000);
  return a1;
}

void sub_1B61E2C64(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  v3 = (_BYTE *)*((_QWORD *)v1 + 93);
  if (v3)
  {
    v4 = (_BYTE *)*((_QWORD *)v1 + 94);
    if (v4 != v3)
      *((_QWORD *)v1 + 94) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v3);
    *((_QWORD *)v1 + 93) = 0;
    *((_QWORD *)v1 + 94) = 0;
  }
  v5 = (_BYTE *)*((_QWORD *)v1 + 91);
  if (v5)
  {
    v6 = (_BYTE *)*((_QWORD *)v1 + 92);
    if (v6 != v5)
      *((_QWORD *)v1 + 92) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v5);
    *((_QWORD *)v1 + 91) = 0;
    *((_QWORD *)v1 + 92) = 0;
  }
  v7 = (_BYTE *)*((_QWORD *)v1 + 89);
  if (v7)
  {
    v8 = (_BYTE *)*((_QWORD *)v1 + 90);
    if (v8 != v7)
      *((_QWORD *)v1 + 90) = &v8[(v7 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v7);
    *((_QWORD *)v1 + 89) = 0;
    *((_QWORD *)v1 + 90) = 0;
  }
  v9 = (_BYTE *)*((_QWORD *)v1 + 87);
  if (v9)
  {
    v10 = (_BYTE *)*((_QWORD *)v1 + 88);
    if (v10 != v9)
      *((_QWORD *)v1 + 88) = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v9);
    *((_QWORD *)v1 + 87) = 0;
    *((_QWORD *)v1 + 88) = 0;
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *(_QWORD *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 584) = 0;
  *(_QWORD *)v3 = &off_1E69E10E0;
  *((_BYTE *)v3 + 596) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 128);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 65);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0, -100.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 1u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 2u, 2.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 3u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 4u, 0.8);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 5u, 10.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 6u, 10.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 7u, 40.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 8u, 3.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 9u, -35.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xAu, 0.06);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xBu, 0.25);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xCu, 18.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xDu, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xEu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0xFu, 12.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x10u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x11u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x12u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x13u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x14u, 60.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x15u, 0.5);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x16u, 6.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x17u, 2.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x18u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x19u, 4.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Au, 0.5);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Bu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Cu, -12.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Du, 0.03);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Eu, 300.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x1Fu, 60.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x20u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x21u, 0.125);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x22u, -48.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x23u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x24u, 0.4);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x25u, -100.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x26u, 4.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x27u, 10.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x28u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x29u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Au, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Bu, -30.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Cu, 3.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Du, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Eu, 200.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x2Fu, 18.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x30u, 12.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x31u, 0.9);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x32u, 15.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x33u, 70.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x34u, 350.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x35u, 15.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x36u, 0.2);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x37u, 0.08);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Cu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x38u, 50.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x39u, 15.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Au, 0.2);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Bu, 0.02);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Du, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x40u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Eu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x3Fu, 1.0);
  v9[0] = xmmword_1B667C9E8;
  v9[1] = unk_1B667C9F8;
  v10 = 32;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)Element + 56))(Element, v9);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 56))(v7, v9);
  *(_BYTE *)(a1 + 584) = 1;
  return a1;
}

void sub_1B61E32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void **v9;

  *v9 = &off_1E69ED840;
  a9 = v9 + 66;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69E4B98;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((ausdk::AUBase *)((char *)v3 + 528));
  *(_WORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  ausdk::AUElement::SetParameter(v5, 0, 1.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 616));
  ausdk::AUElement::SetParameter(v5, 1u, 10.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 617));
  ausdk::AUElement::SetParameter(v5, 2u, 0.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 618));
  ausdk::AUElement::SetParameter(v5, 3u, 0.0, 0);
  atomic_store(1u, (unsigned __int8 *)(a1 + 619));
  *(_QWORD *)a1 = &off_1E69E4948;
  *(_QWORD *)(a1 + 624) = 0;
  if (!*(_BYTE *)(a1 + 537))
    *(_BYTE *)(a1 + 537) = 1;
  *(_BYTE *)(a1 + 536) = 0;
  return a1;
}

void sub_1B61E3468(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 8));
  }
  return a1;
}

void AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::~AUTemplateBase(ausdk::AUBase *a1)
{
  *(_QWORD *)a1 = &off_1E69E4B98;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a1 + 544);
  ausdk::AUBase::~AUBase(a1);
}

{
  *(_QWORD *)a1 = &off_1E69E4B98;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a1 + 544);
  ausdk::AUBase::~AUBase(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetPropertyInfo(uint64_t a1, int a2, int a3, uint64_t a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t result;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956430;
  switch(a2)
  {
    case 64101:
      *a6 = *(_BYTE *)(a1 + 17) ^ 1;
      *a5 = 8;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      v11 = 136315906;
      v12 = "AUTemplateBase.h";
      v13 = 1024;
      v14 = 835;
      v15 = 1024;
      v16 = 64101;
      v17 = 2080;
      v10 = "Characterized amplifier system";
      goto LABEL_35;
    case 64100:
      *a6 = 1;
      *a5 = 8;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      v11 = 136315906;
      v12 = "AUTemplateBase.h";
      v13 = 1024;
      v14 = 835;
      v15 = 1024;
      v16 = 64100;
      v17 = 2080;
      v10 = "Power budget";
      goto LABEL_35;
    case 21:
      *a6 = 1;
      *a5 = 4;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      v11 = 136315906;
      v12 = "AUTemplateBase.h";
      v13 = 1024;
      v14 = 835;
      v15 = 1024;
      v16 = 21;
      v17 = 2080;
      v10 = "Bypass";
LABEL_35:
      v18 = v10;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Retrieved info for property %u (%s)", (uint8_t *)&v11, 0x22u);
      return 0;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
  if (!AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v9 = MEMORY[0x1E0C81028];
LABEL_38:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v11 = 136315650;
      v12 = "AUTemplateBase.h";
      v13 = 1024;
      v14 = 845;
      v15 = 1024;
      v16 = a2;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Info for unsupported property (%u) requested.", (uint8_t *)&v11, 0x18u);
    }
    return 4294956417;
  }
  v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
  if (*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    goto LABEL_38;
  return 4294956417;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetProperty(uint64_t a1, int a2, int a3, uint64_t a4, CFDictionaryRef *a5)
{
  uint64_t result;
  NSObject *v9;
  CFDictionaryRef v10;
  uint64_t m;
  const void *v12;
  const void *v13;
  _QWORD *v14;
  CFDictionaryRef CFDictionaryRef;
  uint64_t i;
  const void *v17;
  const void *v18;
  CFDictionaryRef v19;
  uint64_t j;
  const void *v21;
  const void *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CFDictionaryRef *v31;
  unint64_t v32;
  const __CFDictionary *v33;
  __int128 v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  CFArrayRef v39;
  uint64_t v40;
  float v41;
  CFDictionaryRef v42;
  uint64_t k;
  const void *v44;
  const void *v45;
  NSObject *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  std::runtime_error *exception;
  std::runtime_error *v51;
  _QWORD *v53;
  CFArrayRef v54;
  _QWORD v55[2];
  __int128 v56;
  unint64_t v57;
  int v58;
  _QWORD v59[2];
  int v60;
  int v61;
  int v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _BYTE v66[8];
  CFNumberRef v67;
  float v68;
  _BYTE v70[8];
  CFDictionaryRef v71;
  _BYTE valuePtr[24];
  __int128 v73;
  _BYTE v74[24];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956430;
  switch(a2)
  {
    case 64101:
      if (!*(_BYTE *)(a1 + 584))
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)valuePtr = 136315906;
        *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 775;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 64101;
        LOWORD(v73) = 2080;
        v49 = "Characterized amplifier system";
        goto LABEL_126;
      }
      v56 = 0uLL;
      v57 = 0;
      v14 = *(_QWORD **)(a1 + 544);
      v53 = (_QWORD *)(a1 + 552);
      if (v14 != (_QWORD *)(a1 + 552))
      {
        do
        {
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v68, "VolumeLevel");
          *(_DWORD *)valuePtr = *((_DWORD *)v14 + 7);
          if (!CFNumberCreate(0, kCFNumberFloatType, valuePtr))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          v62 = (int)(float)(*((float *)v14 + 8) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)valuePtr, "power_inst", &v62);
          v58 = (int)(float)(*((float *)v14 + 9) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)&valuePtr[16], "power_100ms", &v58);
          v61 = (int)(float)(*((float *)v14 + 10) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)((char *)&v73 + 8), "power_1000ms", &v61);
          v60 = (int)(float)(*((float *)v14 + 11) * 1000.0);
          applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)v74, "power_thermal", &v60);
          v63[0] = valuePtr;
          v63[1] = 4;
          CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v63);
          for (i = 0; i != -64; i -= 16)
          {
            v17 = *(const void **)&v74[i + 8];
            if (v17)
              CFRelease(v17);
            v18 = *(const void **)&v74[i];
            if (v18)
              CFRelease(v18);
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v70, "Measurements");
          if (CFDictionaryRef)
            CFRetain(CFDictionaryRef);
          v71 = CFDictionaryRef;
          v59[0] = &v68;
          v59[1] = 2;
          v19 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v59);
          for (j = 0; j != -32; j -= 16)
          {
            v21 = *(const void **)&valuePtr[j - 8];
            if (v21)
              CFRelease(v21);
            v22 = *(const void **)&v70[j];
            if (v22)
              CFRelease(v22);
          }
          if (CFDictionaryRef)
            CFRelease(CFDictionaryRef);
          v23 = (_QWORD *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1) >= v57)
          {
            v25 = (_QWORD *)v56;
            v26 = (uint64_t)(*((_QWORD *)&v56 + 1) - v56) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v28 = v57 - v56;
            if ((uint64_t)(v57 - v56) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            *((_QWORD *)&v73 + 1) = &v57;
            if (v29)
            {
              v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v29);
              v23 = (_QWORD *)*((_QWORD *)&v56 + 1);
              v25 = (_QWORD *)v56;
            }
            else
            {
              v30 = 0;
            }
            v31 = (CFDictionaryRef *)(v29 + 8 * v26);
            v32 = v29 + 8 * v30;
            *(_QWORD *)&v73 = v32;
            *v31 = v19;
            *(_QWORD *)&valuePtr[16] = v31 + 1;
            if (v23 == v25)
            {
              v24 = v31 + 1;
            }
            else
            {
              do
              {
                v33 = (const __CFDictionary *)*--v23;
                *--v31 = v33;
                *v23 = 0;
              }
              while (v23 != v25);
              v24 = *(_QWORD **)&valuePtr[16];
              v32 = v73;
            }
            v34 = v56;
            *(_QWORD *)&v56 = v31;
            *((_QWORD *)&v56 + 1) = v24;
            *(_OWORD *)&valuePtr[8] = v34;
            v35 = v57;
            v57 = v32;
            *(_QWORD *)&v73 = v35;
            *(_QWORD *)valuePtr = v34;
            std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)valuePtr);
          }
          else
          {
            **((_QWORD **)&v56 + 1) = v19;
            v24 = v23 + 1;
          }
          *((_QWORD *)&v56 + 1) = v24;
          v36 = (_QWORD *)v14[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v14[2];
              v38 = *v37 == (_QWORD)v14;
              v14 = v37;
            }
            while (!v38);
          }
          v14 = v37;
        }
        while (v37 != v53);
      }
      v39 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v56);
      v54 = v39;
      *(_QWORD *)valuePtr = &v56;
      std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v64, "PowerLUT", (const void **)&v54);
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 568) + 32))(valuePtr);
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v65, "AmpEfficiencyCoefs");
      v40 = *(_QWORD *)valuePtr;
      if (*(_QWORD *)valuePtr)
        CFRetain(*(CFTypeRef *)valuePtr);
      v65[1] = v40;
      v41 = *(float *)(a1 + 576);
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v66, "TargetGainLimitDB");
      v68 = log10f(v41) * 10.0;
      v67 = CFNumberCreate(0, kCFNumberFloatType, &v68);
      if (!v67)
      {
        v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }
      v55[0] = v64;
      v55[1] = 3;
      v42 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v55);
      for (k = 0; k != -48; k -= 16)
      {
        v44 = *(CFNumberRef *)((char *)&v67 + k);
        if (v44)
          CFRelease(v44);
        v45 = *(const void **)&v66[k];
        if (v45)
          CFRelease(v45);
      }
      if (*(_QWORD *)valuePtr)
        CFRelease(*(CFTypeRef *)valuePtr);
      if (v39)
        CFRelease(v39);
      *a5 = v42;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)valuePtr = 136315906;
      *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 773;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 64101;
      LOWORD(v73) = 2080;
      v47 = "Characterized amplifier system";
      break;
    case 64100:
      if (!*(_BYTE *)(a1 + 608))
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)valuePtr = 136315906;
        *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 775;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 64100;
        LOWORD(v73) = 2080;
        v49 = "Power budget";
        goto LABEL_126;
      }
      LODWORD(v68) = (int)(float)(*(float *)(a1 + 592) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)valuePtr, "cpms_ts_i", (int *)&v68);
      LODWORD(v56) = (int)(float)(*(float *)(a1 + 596) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)&valuePtr[16], "cpms_ts_100", (int *)&v56);
      LODWORD(v63[0]) = (int)(float)(*(float *)(a1 + 600) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)((char *)&v73 + 8), "cpms_ts_1000", (int *)v63);
      LODWORD(v59[0]) = (int)(float)(*(float *)(a1 + 604) * 1000.0);
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>((applesauce::CF::TypeRef *)v74, "cpms_ts_thermal", (int *)v59);
      v64[0] = valuePtr;
      v64[1] = 4;
      v10 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v64);
      for (m = 0; m != -64; m -= 16)
      {
        v12 = *(const void **)&v74[m + 8];
        if (v12)
          CFRelease(v12);
        v13 = *(const void **)&v74[m];
        if (v13)
          CFRelease(v13);
      }
      *a5 = v10;
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)valuePtr = 136315906;
      *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 773;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 64100;
      LOWORD(v73) = 2080;
      v47 = "Power budget";
      break;
    case 21:
      if (*(_BYTE *)(a1 + 537))
      {
        *(_DWORD *)a5 = *(unsigned __int8 *)(a1 + 536);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)valuePtr = 136315906;
        *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 773;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = 21;
        LOWORD(v73) = 2080;
        v47 = "Bypass";
        break;
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v9 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 0;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)valuePtr = 136315906;
      *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 775;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = 21;
      LOWORD(v73) = 2080;
      v49 = "Bypass";
LABEL_126:
      *(_QWORD *)((char *)&v73 + 2) = v49;
      v48 = "%25s:%-5d Retrieved (unset) property data for property %u (%s)";
      goto LABEL_127;
    default:
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v46 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          return 4294956417;
      }
      else
      {
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)valuePtr = 136315650;
        *(_QWORD *)&valuePtr[4] = "AUTemplateBase.h";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 786;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = a2;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Property data for unsupported property (%u) requested.", valuePtr, 0x18u);
      }
      return 4294956417;
  }
  *(_QWORD *)((char *)&v73 + 2) = v47;
  v48 = "%25s:%-5d Retrieved property data for property %u (%s)";
LABEL_127:
  _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, v48, valuePtr, 0x22u);
  return 0;
}

void sub_1B61E43D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef a33,CFTypeRef cf,CFTypeRef a35,CFTypeRef a36)
{
  const void *v36;
  char *v37;
  uint64_t v38;
  const void *v40;
  const void *v41;
  const void *v42;

  if (cf)
    CFRelease(cf);
  if (a33)
    CFRelease(a33);
  v40 = *(const void **)(v38 - 192);
  if (v40)
    CFRelease(v40);
  if (v36)
    CFRelease(v36);
  while (1)
  {
    v41 = (const void *)*((_QWORD *)v37 - 1);
    if (v41)
      CFRelease(v41);
    v42 = (const void *)*((_QWORD *)v37 - 2);
    if (v42)
      CFRelease(v42);
    v37 -= 16;
    if (v37 == &a29)
      _Unwind_Resume(exception_object);
  }
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SetProperty(uint64_t a1, int a2, int a3, uint64_t a4, const void **a5, int a6)
{
  uint64_t result;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  int v19;
  int32x2_t v20;
  int32x4_t v21;
  int v22;
  int32x4_t v23;
  int v24;
  int32x4_t v25;
  int v26;
  int32x4_t v27;
  unsigned __int8 v28;
  int v29;
  NSObject *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const __CFArray *v34;
  CFIndex Count;
  CFArrayRef v36;
  CFIndex v37;
  BOOL v38;
  const char *v39;
  unint64_t v40;
  const __CFNumber *v41;
  float v42;
  float v43;
  const void *v44;
  const void *v45;
  int v46;
  int32x2_t v47;
  int32x4_t v48;
  int v49;
  int32x4_t v50;
  int v51;
  int32x4_t v52;
  int v53;
  int32x4_t v54;
  float *v55;
  float **v56;
  float **v57;
  float v58;
  float *v59;
  const __CFDictionary *v60;
  int v61;
  float v62;
  float v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject **v78;
  std::runtime_error *exception;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  CFTypeRef v92;
  CFArrayRef theArray;
  CFTypeRef v94;
  CFTypeRef cf;
  __int128 v96;
  _BYTE buf[24];
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956430;
  if (a2 == 64101)
  {
    if (a5)
    {
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v13 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          goto LABEL_85;
      }
      else
      {
        v13 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUTemplateBase.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 801;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 64101;
        LOWORD(v98) = 2080;
        *(_QWORD *)((char *)&v98 + 2) = "Characterized amplifier system";
        _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
      }
LABEL_85:
      if (a6 == 8 && (v31 = *a5) != 0)
      {
        CFRetain(v31);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v92, v31);
        if (v92)
        {
          v32 = applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)v92, "PowerLUT");
          if (v32)
          {
            v33 = v32;
            CFRetain(v32);
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v33);
            *(_OWORD *)&buf[8] = 0uLL;
            *(_QWORD *)buf = &buf[8];
            v34 = theArray;
            if (theArray)
            {
              Count = CFArrayGetCount(theArray);
              v36 = theArray;
              if (theArray)
                v37 = CFArrayGetCount(theArray);
              else
                v37 = 0;
              if (Count)
              {
                v40 = 0;
                v89 = vdupq_n_s32(0x42480000u);
                do
                {
                  if (v34 == v36 && v40 == v37)
                    break;
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v34, v40, (applesauce::CF::DictionaryRef *)&cf);
                  if (!cf)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Could not construct");
                  }
                  v41 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>((const __CFDictionary *)cf, "VolumeLevel");
                  if (!v41)
                  {
                    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v81, "Could not find item");
                  }
                  v42 = applesauce::CF::convert_to<float,0>(v41);
                  if (!cf)
                  {
                    v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v80, "Could not construct");
                  }
                  v43 = v42;
                  v44 = applesauce::CF::details::at_key<char const(&)[13]>((const __CFDictionary *)cf, "Measurements");
                  if (!v44)
                  {
                    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v82, "Could not find item");
                  }
                  v45 = v44;
                  CFRetain(v44);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v94, v45);
                  if (!v94)
                    goto LABEL_213;
                  v91 = v89;
                  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)v94, "power_inst"))
                  {
                    if (!v94)
                      goto LABEL_213;
                    v46 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v94, cpms::powertuplekinds::PowerLUTEntry::name_inst);
                    v47.i32[0] = 1112014848;
                    v48 = vdupq_lane_s32(v47, 0);
                    *(float *)v48.i32 = (float)v46 / 1000.0;
                    v91 = v48;
                  }
                  if (!v94)
                    goto LABEL_213;
                  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)v94, "power_100ms"))
                  {
                    if (!v94)
                      goto LABEL_213;
                    v49 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v94, cpms::powertuplekinds::PowerLUTEntry::name_100ms);
                    v50 = v91;
                    *(float *)&v50.i32[1] = (float)v49 / 1000.0;
                    v91 = v50;
                  }
                  if (!v94)
                    goto LABEL_213;
                  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)v94, "power_1000ms"))
                  {
                    if (!v94)
                      goto LABEL_213;
                    v51 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v94, cpms::powertuplekinds::PowerLUTEntry::name_1000ms);
                    v52 = v91;
                    *(float *)&v52.i32[2] = (float)v51 / 1000.0;
                    v91 = v52;
                  }
                  if (!v94)
                  {
LABEL_213:
                    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v83, "Could not construct");
                  }
                  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)v94, "power_thermal"))
                  {
                    if (!v94)
                      goto LABEL_213;
                    v53 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v94, cpms::powertuplekinds::PowerLUTEntry::name_thermal);
                    v54 = v91;
                    *(float *)&v54.i32[3] = (float)v53 / 1000.0;
                    v91 = v54;
                  }
                  v55 = *(float **)&buf[8];
                  v56 = (float **)&buf[8];
                  v57 = (float **)&buf[8];
                  if (*(_QWORD *)&buf[8])
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v57 = (float **)v55;
                        v58 = v55[7];
                        if (v43 >= v58)
                          break;
                        v55 = *(float **)v55;
                        v56 = v57;
                        if (!*v57)
                          goto LABEL_141;
                      }
                      if (v58 >= v43)
                        break;
                      v55 = (float *)*((_QWORD *)v55 + 1);
                      if (!v55)
                      {
                        v56 = v57 + 1;
                        goto LABEL_141;
                      }
                    }
                  }
                  else
                  {
LABEL_141:
                    v59 = (float *)operator new(0x30uLL);
                    v59[7] = v43;
                    *((int32x4_t *)v59 + 2) = v91;
                    *(_QWORD *)v59 = 0;
                    *((_QWORD *)v59 + 1) = 0;
                    *((_QWORD *)v59 + 2) = v57;
                    *v56 = v59;
                    if (**(_QWORD **)buf)
                    {
                      *(_QWORD *)buf = **(_QWORD **)buf;
                      v59 = *v56;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], (uint64_t *)v59);
                    ++*(_QWORD *)&buf[16];
                  }
                  if (v94)
                    CFRelease(v94);
                  if (cf)
                    CFRelease(cf);
                  ++v40;
                }
                while (v40 != Count);
              }
              if (theArray)
                CFRelease(theArray);
            }
            if (!v92)
            {
              v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v86, "Could not construct");
            }
            applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>((applesauce::CF::DictionaryRef *)&cf, (const __CFDictionary *)v92, "AmpEfficiencyCoefs");
            cpms::efficiency::AmpModelFactory((cpms::efficiency *)&v98, (const __CFDictionary **)&cf);
            if (cf)
              CFRelease(cf);
            v60 = (const __CFDictionary *)v92;
            if (v92)
            {
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "TargetGainLimitDB");
              v61 = CFDictionaryContainsKey(v60, cf);
              if (cf)
                CFRelease(cf);
              if (!v61)
              {
                v63 = 0.5;
LABEL_161:
                *((_QWORD *)&v98 + 1) = LODWORD(v63) | 0x3F80000000000000;
                if (v92)
                  CFRelease(v92);
                if (*(_BYTE *)(a1 + 584))
                {
                  v64 = (_QWORD *)(a1 + 552);
                  v65 = *(_QWORD **)(a1 + 552);
                  cf = *(CFTypeRef *)(a1 + 544);
                  *(_QWORD *)&v96 = v65;
                  *((_QWORD *)&v96 + 1) = *(_QWORD *)(a1 + 560);
                  if (*((_QWORD *)&v96 + 1))
                  {
                    v65[2] = &v96;
                    v65 = 0;
                    *(_QWORD *)(a1 + 544) = v64;
                    *v64 = 0;
                    *(_QWORD *)(a1 + 560) = 0;
                  }
                  else
                  {
                    cf = &v96;
                  }
                  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v65);
                  v69 = *(_QWORD **)&buf[8];
                  *(_QWORD *)(a1 + 544) = *(_QWORD *)buf;
                  *(_QWORD *)(a1 + 552) = v69;
                  v70 = *(_QWORD *)&buf[16];
                  *(_QWORD *)(a1 + 560) = *(_QWORD *)&buf[16];
                  if (v70)
                  {
                    v69[2] = v64;
                    *(_QWORD *)buf = &buf[8];
                    *(_OWORD *)&buf[8] = 0uLL;
                    v69 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(a1 + 544) = v64;
                  }
                  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v69);
                  v71 = (_QWORD *)v96;
                  *(_QWORD *)buf = cf;
                  *(_OWORD *)&buf[8] = v96;
                  if (*((_QWORD *)&v96 + 1))
                  {
                    *(_QWORD *)(v96 + 16) = &buf[8];
                    cf = &v96;
                    v96 = 0uLL;
                    v71 = 0;
                  }
                  else
                  {
                    *(_QWORD *)buf = &buf[8];
                  }
                  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v71);
                  v72 = *(_QWORD *)(a1 + 568);
                  *(_QWORD *)(a1 + 568) = v98;
                  v73 = *(_QWORD *)(a1 + 576);
                  *(_QWORD *)(a1 + 576) = *((_QWORD *)&v98 + 1);
                  *((_QWORD *)&v98 + 1) = v73;
                  *(_QWORD *)&v98 = 0;
                  v74 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
                  v75 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
                  if (v72)
                    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
                }
                else
                {
                  v66 = *(_QWORD *)&buf[8];
                  *(_QWORD *)(a1 + 544) = *(_QWORD *)buf;
                  v67 = a1 + 552;
                  *(_QWORD *)(a1 + 552) = v66;
                  v68 = *(_QWORD *)&buf[16];
                  *(_QWORD *)(a1 + 560) = *(_QWORD *)&buf[16];
                  if (v68)
                  {
                    *(_QWORD *)(v66 + 16) = v67;
                    *(_QWORD *)buf = &buf[8];
                    *(_OWORD *)&buf[8] = 0uLL;
                  }
                  else
                  {
                    *(_QWORD *)(a1 + 544) = v67;
                  }
                  v74 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
                  v75 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
                  v77 = *((_QWORD *)&v98 + 1);
                  *(_QWORD *)(a1 + 568) = v98;
                  *(_QWORD *)(a1 + 576) = v77;
                  *(_BYTE *)(a1 + 584) = 1;
                  *(_QWORD *)&v98 = 0;
                }
                std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)&buf[8]);
                if (v75[38] != -1)
                  dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
                v78 = (NSObject **)v74[39];
                if (v78)
                {
                  v30 = *v78;
                  if (!*v78)
                    return 0;
                }
                else
                {
                  v30 = MEMORY[0x1E0C81028];
                }
                result = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
                if ((_DWORD)result)
                {
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "AUTemplateBase.h";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 812;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 64101;
                  LOWORD(v98) = 2080;
                  v39 = "Characterized amplifier system";
                  goto LABEL_205;
                }
                return result;
              }
              if (v92)
              {
                v62 = applesauce::CF::details::find_at_key<float,char const(&)[18]>((const __CFDictionary *)v92, "TargetGainLimitDB");
                v63 = __exp10((float)(v62 / 10.0));
                goto LABEL_161;
              }
            }
            v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v87, "Could not construct");
          }
          v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v84, "Could not find item");
LABEL_220:
        }
      }
      else
      {
        v92 = 0;
      }
      v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
      goto LABEL_220;
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v16 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_186:
        if (!*(_BYTE *)(a1 + 584))
          return 0;
        v76 = *(_QWORD *)(a1 + 568);
        *(_QWORD *)(a1 + 568) = 0;
        if (v76)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 552));
        result = 0;
        *(_BYTE *)(a1 + 584) = 0;
        return result;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUTemplateBase.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 796;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 64101;
      LOWORD(v98) = 2080;
      *(_QWORD *)((char *)&v98 + 2) = "Characterized amplifier system";
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
    }
    goto LABEL_186;
  }
  if (a2 != 64100)
  {
    if (a2 == 21)
    {
      if (a5)
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v11 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            goto LABEL_95;
        }
        else
        {
          v11 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AUTemplateBase.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 801;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 21;
          LOWORD(v98) = 2080;
          *(_QWORD *)((char *)&v98 + 2) = "Bypass";
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
        }
LABEL_95:
        if (a6 != 4)
        {
          v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v85, "PODProp constructor: inDataSize did not match the given type.");
        }
        v38 = *(_DWORD *)a5 != 0;
        if (!*(_BYTE *)(a1 + 537))
          *(_BYTE *)(a1 + 537) = 1;
        *(_BYTE *)(a1 + 536) = v38;
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v30 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            return 0;
        }
        else
        {
          v30 = MEMORY[0x1E0C81028];
        }
        result = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
        if ((_DWORD)result)
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AUTemplateBase.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 812;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 21;
          LOWORD(v98) = 2080;
          v39 = "Bypass";
LABEL_205:
          *(_QWORD *)((char *)&v98 + 2) = v39;
          _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully set data for property %u (%s)", buf, 0x22u);
          return 0;
        }
        return result;
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v17 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          goto LABEL_193;
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUTemplateBase.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 796;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 21;
        LOWORD(v98) = 2080;
        *(_QWORD *)((char *)&v98 + 2) = "Bypass";
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
      }
LABEL_193:
      if (*(_BYTE *)(a1 + 537))
      {
        result = 0;
        *(_BYTE *)(a1 + 537) = 0;
        return result;
      }
      return 0;
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v14 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        return 4294956417;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUTemplateBase.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 824;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Attempting to set an unsupported property: %u", buf, 0x18u);
    }
    return 4294956417;
  }
  if (!a5)
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v15 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_180:
        if (*(_BYTE *)(a1 + 608))
          *(_BYTE *)(a1 + 608) = 0;
        result = 0;
        atomic_store(1u, (unsigned __int8 *)(a1 + 620));
        return result;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUTemplateBase.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 796;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 64100;
      LOWORD(v98) = 2080;
      *(_QWORD *)((char *)&v98 + 2) = "Power budget";
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Clearing the value of property %u (%s)", buf, 0x22u);
    }
    goto LABEL_180;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v12 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      goto LABEL_52;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUTemplateBase.h";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 801;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 64100;
    LOWORD(v98) = 2080;
    *(_QWORD *)((char *)&v98 + 2) = "Power budget";
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to set data for property %u (%s)", buf, 0x22u);
  }
LABEL_52:
  if (a6 != 8 || (v18 = *a5) == 0)
  {
    cf = 0;
    goto LABEL_226;
  }
  CFRetain(v18);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v18);
  if (!cf)
    goto LABEL_226;
  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)cf, "cpms_ts_i"))
  {
    if (!cf)
      goto LABEL_226;
    v19 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, cpms::powertuplekinds::PowerBudget::name_inst);
    v20.i32[0] = 1112014848;
    v21 = vdupq_lane_s32(v20, 0);
    *(float *)v21.i32 = (float)v19 / 1000.0;
    v90 = v21;
  }
  else
  {
    v90 = vdupq_n_s32(0x42480000u);
  }
  if (!cf)
    goto LABEL_226;
  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)cf, "cpms_ts_100"))
  {
    if (!cf)
      goto LABEL_226;
    v22 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, cpms::powertuplekinds::PowerBudget::name_100ms);
    v23 = v90;
    *(float *)&v23.i32[1] = (float)v22 / 1000.0;
    v90 = v23;
  }
  if (!cf)
    goto LABEL_226;
  if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)cf, "cpms_ts_1000"))
  {
    if (!cf)
      goto LABEL_226;
    v24 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, cpms::powertuplekinds::PowerBudget::name_1000ms);
    v25 = v90;
    *(float *)&v25.i32[2] = (float)v24 / 1000.0;
    v90 = v25;
  }
  if (!cf)
    goto LABEL_226;
  if (!applesauce::CF::details::has_key<char const* const&>((_BOOL8)cf, "cpms_ts_thermal"))
    goto LABEL_71;
  if (!cf)
  {
LABEL_226:
    v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
  }
  v26 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)cf, &cpms::powertuplekinds::PowerBudget::name_thermal);
  v27 = v90;
  *(float *)&v27.i32[3] = (float)v26 / 1000.0;
  v90 = v27;
LABEL_71:
  if (cf)
    CFRelease(cf);
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  v28 = atomic_load((unsigned __int8 *)(a1 + 620));
  if ((v28 & 1) != 0)
    atomic_store(0, (unsigned __int8 *)(a1 + 620));
  v29 = *(unsigned __int8 *)(a1 + 608);
  *(int32x4_t *)(a1 + 592) = v90;
  if (!v29)
    *(_BYTE *)(a1 + 608) = 1;
  atomic_store(1u, (unsigned __int8 *)(a1 + 620));
  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v30 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      return 0;
  }
  else
  {
    v30 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUTemplateBase.h";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 812;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 64100;
    LOWORD(v98) = 2080;
    v39 = "Power budget";
    goto LABEL_205;
  }
  return result;
}

void sub_1B61E5A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef cf, uint64_t a17, uint64_t a18, __int128 buf, __int16 a20,__int16 a21,int a22,__int128 a23)
{
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject **v27;
  NSObject *v28;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v23);
  if (cf)
    CFRelease(cf);
  __cxa_begin_catch(exception_object);
  if (*(_QWORD *)(v24 + 304) != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
  v27 = *(NSObject ***)(v25 + 312);
  if (v27)
  {
    v28 = *v27;
    if (!*v27)
      goto LABEL_14;
  }
  else
  {
    v28 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315906;
    *(_QWORD *)((char *)&buf + 4) = "AUTemplateBase.h";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 807;
    a21 = 1024;
    a22 = 64100;
    LOWORD(a23) = 2080;
    *(_QWORD *)((char *)&a23 + 2) = "Power budget";
    _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set data for property %u (%s)", (uint8_t *)&buf, 0x22u);
  }
LABEL_14:
  __cxa_end_catch();
  JUMPOUT(0x1B61E4784);
}

void sub_1B61E5ED8()
{
  JUMPOUT(0x1B61E5CB8);
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameter(ausdk::AUBase *a1, unsigned int a2, unsigned int a3, uint64_t a4, float *a5)
{
  _QWORD *Scope;
  uint64_t v9;
  ausdk::AUElement *v10;
  uint64_t v11;
  float Parameter;
  uint64_t result;

  Scope = (_QWORD *)ausdk::AUBase::GetScope(a1, a3);
  v9 = Scope[5];
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v9 + 32))(Scope[5], a4);
    if (!v10)
      return 4294956419;
  }
  else
  {
    v11 = Scope[2];
    if (a4 >= (unint64_t)((Scope[3] - v11) >> 3))
      return 4294956419;
    v10 = *(ausdk::AUElement **)(v11 + 8 * a4);
    if (!v10)
      return 4294956419;
  }
  if (a2 > 3)
    return 4294956418;
  Parameter = ausdk::AUElement::GetParameter(v10, a2);
  result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SetParameter(ausdk::AUBase *a1, int a2, unsigned int a3, uint64_t a4, float a5)
{
  _QWORD *Scope;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t result;

  Scope = (_QWORD *)ausdk::AUBase::GetScope(a1, a3);
  v10 = Scope[5];
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v10 + 32))(Scope[5], a4);
    if (!v11)
      return 4294956419;
  }
  else
  {
    v12 = Scope[2];
    if (a4 >= (unint64_t)((Scope[3] - v12) >> 3))
      return 4294956419;
    v11 = *(ausdk::AUElement **)(v12 + 8 * a4);
    if (!v11)
      return 4294956419;
  }
  switch(a2)
  {
    case 0:
      ausdk::AUElement::SetParameter(v11, 0, a5, 0);
      v13 = (unsigned __int8 *)a1 + 616;
      goto LABEL_13;
    case 1:
      ausdk::AUElement::SetParameter(v11, 1u, a5, 0);
      v13 = (unsigned __int8 *)a1 + 617;
      goto LABEL_13;
    case 2:
      ausdk::AUElement::SetParameter(v11, 2u, a5, 0);
      v13 = (unsigned __int8 *)a1 + 618;
      goto LABEL_13;
    case 3:
      ausdk::AUElement::SetParameter(v11, 3u, a5, 0);
      v13 = (unsigned __int8 *)a1 + 619;
LABEL_13:
      result = 0;
      atomic_store(1u, v13);
      break;
    default:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::CanScheduleParameters()
{
  return 0;
}

double AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameterList(uint64_t a1, int a2, _OWORD *a3, _DWORD *a4)
{
  double result;

  if (!a2)
  {
    *a4 = 4;
    if (a3)
    {
      *(_QWORD *)&result = 0x100000000;
      *a3 = xmmword_1B6626920;
    }
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetParameterInfo(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  NSObject *v8;
  const __CFString *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 4;
      *(_QWORD *)(a4 + 84) = 0x4120000000000000;
      *(_QWORD *)(a4 + 92) = 0xC00000003F800000;
      v7 = "Gain smoothing attack TC";
      goto LABEL_13;
    case 1:
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 4;
      *(_QWORD *)(a4 + 84) = 0x41A0000000000000;
      *(_QWORD *)(a4 + 92) = 0xC000000041200000;
      v7 = "Gain smoothing release TC";
      goto LABEL_13;
    case 2:
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 0;
      *(_QWORD *)(a4 + 84) = 0x3F80000000000000;
      *(_QWORD *)(a4 + 92) = 0xC000000000000000;
      v7 = "Volume level";
      goto LABEL_13;
    case 3:
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 80) = 0;
      *(_QWORD *)(a4 + 84) = 3253731328;
      *(_QWORD *)(a4 + 92) = 0x4000800000000000;
      v7 = "Output gain (dB)";
LABEL_13:
      v9 = CFStringCreateWithCString(0, v7, 0x8000100u);
      *(_QWORD *)(a4 + 72) = v9;
      *(_DWORD *)(a4 + 96) |= 0x8000010u;
      CFStringGetCString(v9, (char *)a4, 52, 0x8000100u);
      return 0;
    default:
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_3180);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
        v8 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
        if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
          goto LABEL_17;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = 136315650;
        v11 = "AUTemplateBase.h";
        v12 = 1024;
        v13 = 725;
        v14 = 1024;
        v15 = a3;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Parameter info for unsupported parameter (%u) requested", (uint8_t *)&v10, 0x18u);
      }
LABEL_17:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::SupportsTail()
{
  return 1;
}

BOOL AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::StreamFormatWritable(uint64_t a1)
{
  return *(_BYTE *)(a1 + 17) == 0;
}

os_log_t ___ZN14AUTemplateBaseI14AUCPMSVolumeV1NSt3__15tupleIJN4cpms8VolumeV110Parameters18TC_smoother_attackENS5_19TC_smoother_releaseENS5_11VolumeLevelENS5_10OutputGainEEEENS2_IJN9AUGeneric10Properties6BypassENS4_10Properties9LUTSystemEEEENS2_IJNSE_11PowerBudgetEEEEE11GetLogScopeEv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "AUCPMSVolumeV1");
  *v0 = result;
  AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope = (uint64_t)v0;
  return result;
}

BOOL applesauce::CF::details::has_key<char const* const&>(_BOOL8 a1, char *a2)
{
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    a1 = CFDictionaryContainsKey((CFDictionaryRef)a1, key) != 0;
  if (key)
    CFRelease(key);
  return a1;
}

void sub_1B61E63D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key<int,char const* const&>(const __CFDictionary *a1, char **a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<int,0>(v2);
}

void sub_1B61E6430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, char *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<char const(&)[19]>(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1B61E64AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::AmpModelFactory(cpms::efficiency *this, const __CFDictionary **a2)
{
  const __CFString *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  void **v17;
  void *v18;
  uint64_t v19;
  const void *v21;
  float v22;
  float v23;
  float v24;
  std::runtime_error *v25;
  void **v26;
  int v27;
  int v28;
  void **v30;
  void *v31;
  void *v32;
  uint64_t v33;
  const void *v36;
  const void *v37;
  const void *v38;
  const __CFNumber *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  const __CFDictionary *v45;
  float v46;
  float v47;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  void *v60[2];
  unsigned __int8 v61;
  int v62;
  void *__p[3];
  void *v64;
  void *v65;
  void *v66;
  void *v67;

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_73;
  }
  v4 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[13]>(*a2, "AmpModelType");
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
LABEL_73:
  }
  applesauce::CF::convert_to<std::string,0>(v4, (uint64_t)v60);
  v5 = v61;
  if ((v61 & 0x80u) != 0)
    v5 = (uint64_t)v60[1];
  if (v5 <= 13)
  {
    if (v5 == 5)
    {
      v26 = v60;
      if ((v61 & 0x80u) != 0)
        v26 = (void **)v60[0];
      v27 = *(_DWORD *)v26;
      v28 = *((unsigned __int8 *)v26 + 4);
      if (v27 == 1835889988 && v28 == 121)
      {
        v7 = operator new();
        *(_QWORD *)v7 = &off_1E69E4EE8;
        goto LABEL_67;
      }
    }
    else if (v5 == 8)
    {
      v6 = v60;
      if ((v61 & 0x80u) != 0)
        v6 = (void **)v60[0];
      if (*v6 == (void *)0x6C65646F4D676F4CLL)
      {
        v7 = operator new();
        if (!*a2
          || (v8 = applesauce::CF::details::find_at_key<float,char const(&)[2]>(*a2, "a"), !*a2)
          || (v9 = v8, v10 = applesauce::CF::details::find_at_key<float,char const(&)[2]>(*a2, "b"), !*a2)
          || (v11 = v10, v12 = applesauce::CF::details::find_at_key<float,char const(&)[2]>(*a2, "c"), !*a2)
          || (v13 = v12, v14 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMin_W"), !*a2))
        {
          v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
        }
        v15 = v14;
        v16 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMax_W");
        *(_QWORD *)v7 = &off_1E69E4EA8;
        *(float *)(v7 + 8) = v9;
        *(float *)(v7 + 12) = v11;
        *(float *)(v7 + 16) = v13;
        *(float *)(v7 + 20) = v15;
        *(float *)(v7 + 24) = v16;
        goto LABEL_67;
      }
    }
LABEL_70:
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "No valid AmpModelType entry found in plist.");
  }
  if (v5 == 19)
  {
    v30 = v60;
    if ((v61 & 0x80u) != 0)
      v30 = (void **)v60[0];
    v31 = *v30;
    v32 = v30[1];
    v33 = *(uint64_t *)((char *)v30 + 11);
    if (v31 != (void *)0x6974617264617551 || v32 != (void *)0x6F4D74736F6F4263 || v33 != 0x6C65646F4D74736FLL)
      goto LABEL_70;
    v7 = operator new();
    if (*a2)
    {
      v36 = applesauce::CF::details::at_key<char const(&)[17]>(*a2, "high_power_coefs");
      if (v36)
      {
        applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)&v66, v36);
        if (*a2)
        {
          v37 = applesauce::CF::details::at_key<char const(&)[16]>(*a2, "low_power_coefs");
          if (v37)
          {
            applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)&v64, v37);
            if (*a2)
            {
              v38 = applesauce::CF::details::at_key<char const(&)[12]>(*a2, "boost_coefs");
              if (v38)
              {
                applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)__p, v38);
                if (*a2)
                {
                  v39 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[21]>(*a2, "high_power_threshold");
                  if (v39)
                  {
                    v40 = applesauce::CF::convert_to<float,0>(v39);
                    if (!*a2)
                    {
                      v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v57, "Could not construct");
                    }
                    v41 = v40;
                    v42 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMin_W");
                    if (!*a2)
                    {
                      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v58, "Could not construct");
                    }
                    v43 = v42;
                    v44 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMax_W");
                    v45 = *a2;
                    if (!*a2)
                    {
                      v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v59, "Could not construct");
                    }
                    v46 = v44;
                    v62 = 1065353216;
                    v47 = applesauce::CF::at_or<float,char const(&)[17]>(v45, "power_multiplier", (uint64_t)&v62);
                    *(_QWORD *)v7 = &off_1E69E4E68;
                    cpms::Polynomial<float,1ul>::Polynomial((_QWORD *)(v7 + 8), v66, (uint64_t)v67);
                    cpms::Polynomial<float,1ul>::Polynomial((_QWORD *)(v7 + 16), v64, (uint64_t)v65);
                    cpms::Polynomial<float,2ul>::Polynomial(v7 + 24, (uint64_t **)__p);
                    *(float *)(v7 + 36) = v41;
                    *(float *)(v7 + 40) = v43;
                    *(float *)(v7 + 44) = v46;
                    *(float *)(v7 + 48) = v47;
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v64)
                    {
                      v65 = v64;
                      operator delete(v64);
                    }
                    goto LABEL_65;
                  }
                  v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v56, "Could not find item");
                }
                else
                {
                  v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v56, "Could not construct");
                }
              }
              v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v54, "Could not find item");
            }
            else
            {
              v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v54, "Could not construct");
            }
          }
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not find item");
        }
        else
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
        }
      }
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Could not find item");
    }
    else
    {
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Could not construct");
    }
  }
  if (v5 != 14)
    goto LABEL_70;
  v17 = v60;
  if ((v61 & 0x80u) != 0)
    v17 = (void **)v60[0];
  v18 = *v17;
  v19 = *(uint64_t *)((char *)v17 + 6);
  if (v18 != (void *)0x6974617264617551 || v19 != 0x6C65646F4D636974)
    goto LABEL_70;
  v7 = operator new();
  if (!*a2)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    goto LABEL_78;
  }
  v21 = applesauce::CF::details::at_key<char const(&)[6]>(*a2, "coefs");
  if (!v21)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not find item");
LABEL_78:
  }
  applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)&v66, v21);
  if (!*a2)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
  }
  v22 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMin_W");
  if (!*a2)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
LABEL_88:
  }
  v23 = v22;
  v24 = applesauce::CF::details::find_at_key<float,char const(&)[11]>(*a2, "rangeMax_W");
  *(_QWORD *)v7 = &off_1E69E4E28;
  cpms::Polynomial<float,2ul>::Polynomial(v7 + 8, (uint64_t **)&v66);
  *(float *)(v7 + 20) = v23;
  *(float *)(v7 + 24) = v24;
  if (*(float *)(v7 + 16) <= 0.0)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "QuadraticModel needs a positive x^2 coefficient.");
    goto LABEL_88;
  }
LABEL_65:
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
LABEL_67:
  *(_QWORD *)this = v7;
  if ((char)v61 < 0)
    operator delete(v60[0]);
}

void sub_1B61E6D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  MEMORY[0x1BCC95CEC](v24, 0x1081C402C4B44A1);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[18]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[18]>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1B61E6EF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::Dummy<float>::~Dummy()
{
  JUMPOUT(0x1BCC95CECLL);
}

float cpms::efficiency::Dummy<float>::ComputePower(uint64_t a1, float **a2)
{
  float *v2;
  float result;
  float v4;

  v2 = *a2;
  result = 0.0;
  while (v2 != a2[1])
  {
    v4 = *v2++;
    result = result + v4;
  }
  return result;
}

float cpms::efficiency::Dummy<float>::ComputeNeededPowerGain(uint64_t a1, float *a2, uint64_t a3)
{
  return fminf(*a2 / (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3), 1.0);
}

void cpms::efficiency::Dummy<float>::CreateCFDictionary(CFDictionaryRef *a1@<X8>)
{
  CFTypeRef v2;
  CFTypeRef v3;
  _QWORD v4[2];
  CFTypeRef v5;
  CFTypeRef cf;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v3, "AmpModelType");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v2, "Dummy");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v5, &v3, &v2);
  v4[0] = &v5;
  v4[1] = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v4);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
}

void sub_1B61E703C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *cpms::efficiency::Dummy<float>::toString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Dummy amplifier (100% efficiency).");
}

float applesauce::CF::details::find_at_key<float,char const(&)[2]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *Value;
  std::runtime_error *exception;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!Value)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<float,0>(Value);
}

void sub_1B61E713C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[11]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1B61E71A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::LogModel<float>::~LogModel()
{
  JUMPOUT(0x1BCC95CECLL);
}

float cpms::efficiency::LogModel<float>::ComputePower(float *a1, float **a2)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[6];
  if (v2 >= **a2)
    v2 = **a2;
  if (a1[5] >= v2)
    v3 = a1[5];
  else
    v3 = v2;
  v4 = a1[2];
  return v3 * (float)(a1[4] + (float)(v4 * logf(v3 - a1[3])));
}

float cpms::efficiency::LogModel<float>::ComputeNeededPowerGain()
{
  return 1.0;
}

void cpms::efficiency::LogModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  CFTypeRef cf;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef valuePtr;
  CFTypeRef v22;
  CFTypeRef v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, "a");
  LODWORD(valuePtr) = a1[2];
  v22 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v25, &v23, &v22);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "b");
  LODWORD(v19) = a1[3];
  v20 = CFNumberCreate(0, kCFNumberFloatType, &v19);
  if (!v20)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v26, &valuePtr, &v20);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, "c");
  LODWORD(v17) = a1[4];
  v18 = CFNumberCreate(0, kCFNumberFloatType, &v17);
  if (!v18)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v27, &v19, &v18);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, "rangeMin_W");
  LODWORD(v15) = a1[5];
  v16 = CFNumberCreate(0, kCFNumberFloatType, &v15);
  if (!v16)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v28, &v17, &v16);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v15, "rangeMax_W");
  LODWORD(v13) = a1[6];
  v14 = CFNumberCreate(0, kCFNumberFloatType, &v13);
  if (!v14)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v29, &v15, &v14);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v13, "AmpModelType");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "LogModel");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v30, &v13, &cf);
  v24[0] = v25;
  v24[1] = 6;
  v4 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v24);
  do
  {
    v5 = (const void *)v30[v4 + 1];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v30[v4];
    if (v6)
      CFRelease(v6);
    v4 -= 2;
  }
  while (v4 != -12);
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (valuePtr)
    CFRelease(valuePtr);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
}

void sub_1B61E7600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, const void *a16, CFTypeRef a17, const void *a18, CFTypeRef a19, const void *a20,CFTypeRef a21,const void *a22,CFTypeRef a23,const void *a24,uint64_t a25,uint64_t a26,char a27)
{
  applesauce::CF::TypeRefPair *v27;

  if (cf)
    CFRelease(cf);
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::NumberRef::~NumberRef(&a17);
  applesauce::CF::StringRef::~StringRef(&a18);
  applesauce::CF::NumberRef::~NumberRef(&a19);
  applesauce::CF::StringRef::~StringRef(&a20);
  applesauce::CF::NumberRef::~NumberRef(&a21);
  applesauce::CF::StringRef::~StringRef(&a22);
  applesauce::CF::NumberRef::~NumberRef(&a23);
  applesauce::CF::StringRef::~StringRef(&a24);
  while (v27 != (applesauce::CF::TypeRefPair *)&a27)
  {
    v27 = (applesauce::CF::TypeRefPair *)((char *)v27 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v27);
  }
  _Unwind_Resume(a1);
}

void cpms::efficiency::LogModel<float>::toString(float *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;

  std::to_string(&v33, a1[2]);
  v4 = std::string::append(&v33, " * ln(x - ", 0xAuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, a1[3]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v32;
  else
    v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v34, (const std::string::value_type *)v6, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v35, ") + ", 4uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v31, a1[4]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v31;
  else
    v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v13 = v31.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v36, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v37, ", for x in [", 0xCuLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a1[5]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v30;
  else
    v18 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v19 = v30.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v38, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v39, ", ", 2uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a1[6]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v29;
  else
    v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v25 = v29.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v40, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v41, "]", 1uLL);
  *a2 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1B61E7B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 57) < 0)
    operator delete(*(void **)(v59 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  if (*(char *)(v59 - 121) < 0)
    operator delete(*(void **)(v59 - 144));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v59 - 153) < 0)
    operator delete(*(void **)(v59 - 176));
  if (*(char *)(v59 - 185) < 0)
    operator delete(*(void **)(v59 - 208));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a52 < 0)
    operator delete(a47);
  if (a33 < 0)
    operator delete(a28);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1B61E7C84()
{
  JUMPOUT(0x1B61E7C3CLL);
}

void sub_1B61E7C8C()
{
  JUMPOUT(0x1B61E7C4CLL);
}

void sub_1B61E7C94()
{
  JUMPOUT(0x1B61E7C5CLL);
}

void sub_1B61E7C9C()
{
  JUMPOUT(0x1B61E7C6CLL);
}

_QWORD *cpms::Polynomial<float,1ul>::Polynomial(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  std::string v4;
  std::string v5;
  std::string v6;

  *result = 0;
  if (a3 - (_QWORD)a2 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v4, 2uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Polynomial needs ", &v4, &v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coefficients", &v5, &v6);
    std::runtime_error::runtime_error(exception, &v6);
  }
  *result = *a2;
  return result;
}

void sub_1B61E7D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

uint64_t cpms::Polynomial<float,2ul>::Polynomial(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::runtime_error *exception;
  std::string v5;
  std::string v6;
  std::string v7;

  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 4) = 0;
  v2 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v5, 3uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Polynomial needs ", &v5, &v6);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coefficients", &v6, &v7);
    std::runtime_error::runtime_error(exception, &v7);
  }
  v3 = *v2;
  *(_DWORD *)(result + 8) = *((_DWORD *)v2 + 2);
  *(_QWORD *)result = v3;
  return result;
}

void sub_1B61E7E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void cpms::efficiency::QuadraticBoostModel<float>::~QuadraticBoostModel()
{
  JUMPOUT(0x1BCC95CECLL);
}

float cpms::efficiency::QuadraticBoostModel<float>::ComputePower(float *a1, float **a2)
{
  float *v2;
  float *v3;
  float v4;
  float v5;
  float v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    v5 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v4 = 0.0;
    v5 = 0.0;
    do
    {
      if (a1[11] >= *v2)
        v6 = *v2;
      else
        v6 = a1[11];
      if (a1[10] >= v6)
        v6 = a1[10];
      if (*v2 >= a1[9])
        v4 = v4 + (float)(a1[2] + (float)(a1[3] * v6));
      else
        v5 = v5 + (float)(a1[4] + (float)(a1[5] * v6));
      ++v2;
    }
    while (v2 != v3);
  }
  return a1[12]
       * (float)(v5 + (float)(v4 / (float)((float)(a1[6] + (float)(v4 * (float)((float)(v4 * a1[8]) + a1[7]))) / 100.0)));
}

uint64_t cpms::efficiency::QuadraticBoostModel<float>::ComputeNeededPowerGain(float *a1, float *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t result;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  float *v33;
  float v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  double v40;
  double v41;
  BOOL v42;
  BOOL v43;
  float v44;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v5 = a3[1];
  MEMORY[0x1E0C80A78](a1);
  v8 = (float *)((char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v11 = (_DWORD *)((char *)v45 - v10);
  v12 = (v5 - v6) >> 2;
  if (v5 == v6)
  {
    v17 = &v8[v12];
    result = std::__sort<std::__less<float,float> &,float *>();
  }
  else
  {
    v13 = 0;
    v14 = a1[10];
    v15 = a1[11];
    do
    {
      v16 = *(float *)(v6 + v13 * 4);
      if (v15 < v16)
        v16 = v15;
      if (v14 >= v16)
        v16 = v14;
      v8[v13++] = v16;
    }
    while (v6 + v13 * 4 != v5);
    v17 = &v8[v12];
    result = std::__sort<std::__less<float,float> &,float *>();
    v19 = *v8;
    *v11 = *(_DWORD *)v8;
    if (v5 - v6 != 4)
    {
      v20 = v8 + 1;
      v21 = (float *)(v11 + 1);
      v22 = 4 * v12 - 4;
      do
      {
        v23 = *v20++;
        v19 = v19 + v23;
        *v21++ = v19;
        v22 -= 4;
      }
      while (v22);
    }
  }
  v24 = 0;
  v25 = *a2;
  v26 = 0.0;
  v27 = 2.0;
  do
  {
    v28 = (float)(v26 + v27) * 0.5;
    v29 = v17;
    if (v6 != v5)
    {
      v29 = v8;
      v30 = (v5 - v6) >> 2;
      do
      {
        v31 = v30 >> 1;
        v32 = &v29[v30 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < (float)(a1[9] / v28))
          v29 = v33;
        else
          v30 = v31;
      }
      while (v30);
    }
    v36 = (char *)v29 - (char *)v8;
    v35 = v36 == 0;
    v37 = v36 >> 2;
    if (v35)
      v38 = 0.0;
    else
      v38 = *(float *)&v11[v37 - 1];
    v39 = (float)(a1[4] * (float)v37) + (float)(v28 * a1[5]) * v38 + 0.0;
    v40 = (float)(a1[2] * (float)(unint64_t)(v12 - v37)) + (float)(v28 * a1[3]) * (*(float *)&v11[v12 - 1] - v38);
    v41 = v40 * 100.0;
    *(float *)&v40 = v40;
    *(float *)&v40 = v41 / (float)(a1[6] + (float)((float)(a1[7] + (float)(a1[8] * *(float *)&v40)) * *(float *)&v40))
                   + v39;
    v42 = v25 < *(float *)&v40;
    v43 = v25 <= *(float *)&v40;
    v44 = (float)(v26 + v27) * 0.5;
    if (v43)
    {
      v44 = v26;
      v27 = (float)(v26 + v27) * 0.5;
      if (!v42)
        break;
    }
    ++v24;
    v26 = v44;
  }
  while (v24 != 8);
  return result;
}

void cpms::efficiency::QuadraticBoostModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  CFArrayRef CFArray;
  CFArrayRef v5;
  CFArrayRef v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  std::runtime_error *exception;
  std::runtime_error *v11;
  std::runtime_error *v12;
  std::runtime_error *v13;
  CFTypeRef cf;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef valuePtr;
  CFTypeRef v22;
  CFTypeRef v23;
  void *__p[3];
  CFArrayRef v25;
  CFTypeRef v26;
  void *v27[3];
  CFArrayRef v28;
  CFTypeRef v29;
  void *v30[3];
  CFArrayRef v31;
  CFTypeRef v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v32, "high_power_coefs");
  cpms::Polynomial<float,1ul>::as_vector(v30, a1 + 2);
  CFArray = applesauce::CF::details::make_CFArrayRef<float>(v30);
  v31 = CFArray;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v34, v32, (const void **)&v31);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v29, "low_power_coefs");
  cpms::Polynomial<float,1ul>::as_vector(v27, a1 + 4);
  v5 = applesauce::CF::details::make_CFArrayRef<float>(v27);
  v28 = v5;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v35, v29, (const void **)&v28);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "boost_coefs");
  cpms::Polynomial<float,2ul>::as_vector(__p, a1 + 6);
  v6 = applesauce::CF::details::make_CFArrayRef<float>(__p);
  v25 = v6;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v36, v26, (const void **)&v25);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, "high_power_threshold");
  LODWORD(valuePtr) = a1[9];
  v22 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v37, &v23, &v22);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "rangeMin_W");
  LODWORD(v19) = a1[10];
  v20 = CFNumberCreate(0, kCFNumberFloatType, &v19);
  if (!v20)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v38, &valuePtr, &v20);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, "rangeMax_W");
  LODWORD(v17) = a1[11];
  v18 = CFNumberCreate(0, kCFNumberFloatType, &v17);
  if (!v18)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v39, &v19, &v18);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, "power_multiplier");
  LODWORD(v15) = a1[12];
  v16 = CFNumberCreate(0, kCFNumberFloatType, &v15);
  if (!v16)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v40, &v17, &v16);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v15, "AmpModelType");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "QuadraticBoostModel");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v41, &v15, &cf);
  v33[0] = v34;
  v33[1] = 8;
  v7 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v33);
  do
  {
    v8 = (const void *)v41[v7 + 1];
    if (v8)
      CFRelease(v8);
    v9 = (const void *)v41[v7];
    if (v9)
      CFRelease(v9);
    v7 -= 2;
  }
  while (v7 != -16);
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (valuePtr)
    CFRelease(valuePtr);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  if (v6)
    CFRelease(v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26)
    CFRelease(v26);
  if (v5)
    CFRelease(v5);
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v29)
    CFRelease(v29);
  if (CFArray)
    CFRelease(CFArray);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v32)
    CFRelease(v32);
}

void sub_1B61E86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, CFTypeRef cf, const void *a12, CFTypeRef a13, const void *a14, CFTypeRef a15, const void *a16, CFTypeRef a17, const void *a18, void *__p, uint64_t a20,uint64_t a21,const void *a22,const void *a23,void *a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,void *a29,uint64_t a30,uint64_t a31,const void *a32,const void *a33)
{
  applesauce::CF::TypeRefPair *v33;
  uint64_t v34;

  if (cf)
    CFRelease(cf);
  applesauce::CF::StringRef::~StringRef(&a12);
  applesauce::CF::NumberRef::~NumberRef(&a13);
  applesauce::CF::StringRef::~StringRef(&a14);
  applesauce::CF::NumberRef::~NumberRef(&a15);
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::NumberRef::~NumberRef(&a17);
  applesauce::CF::StringRef::~StringRef(&a18);
  applesauce::CF::ArrayRef::~ArrayRef(&a22);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a27);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  applesauce::CF::StringRef::~StringRef(&a28);
  applesauce::CF::ArrayRef::~ArrayRef(&a32);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  applesauce::CF::StringRef::~StringRef(&a33);
  if (v34 - 200 != (_QWORD)v33)
  {
    do
    {
      v33 = (applesauce::CF::TypeRefPair *)((char *)v33 - 16);
      applesauce::CF::TypeRefPair::~TypeRefPair(v33);
    }
    while (v33 != (applesauce::CF::TypeRefPair *)(v34 - 200));
  }
  _Unwind_Resume(a1);
}

_QWORD *cpms::efficiency::QuadraticBoostModel<float>::toString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "QuadraticBoostModel");
}

_QWORD *cpms::Polynomial<float,1ul>::as_vector(_QWORD *a1, const void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1, a2, (uint64_t)a2 + 8, 2uLL);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(_QWORD *a1, CFTypeRef cf, const void **a3)
{
  const void *v6;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

_QWORD *cpms::Polynomial<float,2ul>::as_vector(_QWORD *a1, const void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1, a2, (uint64_t)a2 + 12, 3uLL);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B61E8AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::convert_to<std::vector<float>,0>(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  int Count;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;
  std::runtime_error *exception;

  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  Count = CFArrayGetCount((CFArrayRef)a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<float>::reserve((void **)a1, Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      v8 = applesauce::CF::convert_to<float,0>(ValueAtIndex);
      v9 = v8;
      v11 = *(float **)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(float **)a1;
        v14 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 16, v17);
          v13 = *(float **)a1;
          v11 = *(float **)(a1 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a1 + 8) = v12;
    }
  }
}

void sub_1B61E8C68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cpms::efficiency::QuadraticModel<float>::~QuadraticModel()
{
  JUMPOUT(0x1BCC95CECLL);
}

float cpms::efficiency::QuadraticModel<float>::ComputePower(float *a1, float **a2)
{
  float *v2;
  float *v3;
  float result;
  float v5;
  float v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  result = 0.0;
  do
  {
    v5 = *v2++;
    v6 = v5;
    if (a1[6] < v5)
      v6 = a1[6];
    if (a1[5] >= v6)
      v6 = a1[5];
    result = result + (float)(a1[2] + (float)(v6 * (float)(a1[3] + (float)(a1[4] * v6))));
  }
  while (v2 != v3);
  return result;
}

float cpms::efficiency::QuadraticModel<float>::ComputeNeededPowerGain(uint64_t a1)
{
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v1 = (float *)MEMORY[0x1E0C80A78](a1);
  v6 = (float *)((char *)v24 - v5);
  v7 = v3 - v4;
  if (v3 == v4)
  {
    v14 = 0.0;
    v18 = 0.0;
  }
  else
  {
    v8 = v1[5];
    v9 = v1[6];
    v10 = v6;
    do
    {
      v11 = *v4++;
      v12 = v11;
      if (v9 < v11)
        v12 = v9;
      if (v8 >= v12)
        v12 = v8;
      *v10++ = v12;
    }
    while (v4 != v3);
    v13 = 4 * v7;
    v14 = 0.0;
    v15 = 4 * v7;
    v16 = v6;
    do
    {
      v17 = *v16++;
      v14 = v14 + v17;
      v15 -= 4;
    }
    while (v15);
    v18 = 0.0;
    do
    {
      v19 = *v6++;
      v18 = v18 + (float)(v19 * v19);
      v13 -= 4;
    }
    while (v13);
  }
  v20 = v1[2] * (float)(unint64_t)v7;
  v21 = v18 * v1[4];
  if (v21 < 0.00000011921)
    v21 = 0.00000011921;
  v22 = *v2;
  if (*v2 < v20)
    v22 = v1[2] * (float)(unint64_t)v7;
  return (float)(sqrtf((float)((float)(v21 * 4.0) * (float)(v22 - v20))+ (float)((float)(v14 * v1[3]) * (float)(v14 * v1[3])))- (float)(v14 * v1[3]))/ (float)(v21 + v21);
}

void cpms::efficiency::QuadraticModel<float>::CreateCFDictionary(_DWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  CFArrayRef CFArray;
  uint64_t v5;
  const void *v6;
  const void *v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  CFTypeRef cf;
  CFTypeRef v11;
  void *valuePtr[3];
  CFArrayRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v18, "rangeMin_W");
  LODWORD(valuePtr[0]) = a1[5];
  v17 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v20, &v18, &v17);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v16, "rangeMax_W");
  LODWORD(valuePtr[0]) = a1[6];
  v15 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  if (!v15)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::NumberRef>(&v21, &v16, &v15);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v14, "coefs");
  cpms::Polynomial<float,2ul>::as_vector(valuePtr, a1 + 2);
  CFArray = applesauce::CF::details::make_CFArrayRef<float>(valuePtr);
  v13 = CFArray;
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v22, v14, (const void **)&v13);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v11, "AmpModelType");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "QuadraticModel");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(v23, &v11, &cf);
  v19[0] = v20;
  v19[1] = 4;
  v5 = 0;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v19);
  do
  {
    v6 = (const void *)v23[v5 + 1];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)v23[v5];
    if (v7)
      CFRelease(v7);
    v5 -= 2;
  }
  while (v5 != -8);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (CFArray)
    CFRelease(CFArray);
  if (valuePtr[0])
  {
    valuePtr[1] = valuePtr[0];
    operator delete(valuePtr[0]);
  }
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
}

void sub_1B61E90C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, const void *a20,CFTypeRef a21,const void *a22,uint64_t a23,uint64_t a24,char a25)
{
  applesauce::CF::TypeRefPair *v25;

  if (cf)
    CFRelease(cf);
  applesauce::CF::StringRef::~StringRef(&a20);
  applesauce::CF::NumberRef::~NumberRef(&a21);
  applesauce::CF::StringRef::~StringRef(&a22);
  while (v25 != (applesauce::CF::TypeRefPair *)&a25)
  {
    v25 = (applesauce::CF::TypeRefPair *)((char *)v25 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v25);
  }
  _Unwind_Resume(a1);
}

void cpms::efficiency::QuadraticModel<float>::toString(float *a1@<X0>, std::string *a2@<X8>)
{
  float *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string __p;
  std::string v19;
  int v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;

  v20 = 0;
  v4 = a1 + 5;
  cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(&v21, &v20, a1 + 2, a1 + 5);
  v5 = std::string::append(&v21, ", for x in [", 0xCuLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v19, *v4);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v19;
  else
    v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v22, (const std::string::value_type *)v7, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v23, ", ", 2uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[6]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v24, (const std::string::value_type *)p_p, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v25, "]", 1uLL);
  *a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1B61E941C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 41) < 0)
    operator delete(*(void **)(v40 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a40 < 0)
    operator delete(a35);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(std::string *a1, int *a2, float *a3, float *a4)
{
  int v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  int v15;
  size_t size;
  std::string *v17;
  std::string *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  int v23;
  std::string v24;
  void *__p[2];
  int64_t v26;
  std::string v27;
  std::string v28;

  if (a3 == a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  std::to_string(&v28, *a3);
  v8 = *a2;
  if (*a2 < 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  else
  {
    std::to_string(&v24, *a2);
    v9 = std::string::insert(&v24, 0, " * x^", 5uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v26 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
  }
  if (v26 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v26 >= 0)
    v12 = HIBYTE(v26);
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v28, (const std::string::value_type *)v11, v12);
  v27 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (v8 >= 1 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v23 = *a2 + 1;
  cpms::efficiency::QuadraticModel<float>::toString_impl<float const*>(__p, &v23, a3 + 1, a4);
  v14 = (void *)HIBYTE(v26);
  if (v26 < 0)
    v14 = __p[1];
  if (v14)
  {
    v15 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      size = v27.__r_.__value_.__l.__size_;
    v17 = &v28;
    std::string::basic_string[abi:ne180100]((uint64_t)&v28, size + 3);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if (size)
    {
      if (v15 >= 0)
        v18 = &v27;
      else
        v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
      memmove(v17, v18, size);
    }
    *(_DWORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 2108192;
    if (v26 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (v26 >= 0)
      v20 = HIBYTE(v26);
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  else
  {
    v15 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(a1, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      *a1 = v27;
  }
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_47:
    operator delete(v27.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_47;
}

void sub_1B61E9748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  char v28;
  uint64_t v29;

  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B61E986C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_OWORD *)v3 + 33) = 0u;
  *(_QWORD *)v3 = &off_1E69EBDE8;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 16);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 8u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 1u, 480.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, -15.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 2u, -15.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 0xAu, 0.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 9u, 0.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 0xFu, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 4u, 100.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 5u, 0.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 6u, 0.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 7u, 1.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xBu, 0.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xCu, 0.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xEu, 0.0, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xDu, 0.0, 0);
  return a1;
}

void sub_1B61E9DA8(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_OWORD *)v3 + 33) = 0u;
  *(_QWORD *)v3 = &off_1E69EC038;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 19);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 2u, 10.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 0.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 0.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 0.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 7u, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 0.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, 0.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 0.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 0xBu, 0.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xCu, 0.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xFu, 480.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0x10u, 480.0, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0x11u, 1.0, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0x12u, 0.0, 0);
  return a1;
}

void sub_1B61EA2CC(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Construct(_QWORD *a1, OpaqueAudioComponentInstance *a2)
{
  int64x2_t *v3;
  uint64_t Element;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v3 = (int64x2_t *)ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  v3->i64[0] = (uint64_t)&off_1E69C5200;
  v3[33].i8[0] = 0;
  ausdk::AUBase::CreateElements(v3);
  v13 = 0x40BF400000000000;
  v14 = xmmword_1B6626900;
  v15 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 10), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v13);
  v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v13);
  v6 = a1[9];
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0, -120.0, 0);
  v9 = a1[9];
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)a1, (const AUPreset *)&sAUCNGPresets);
  srandom(5u);
  return a1;
}

void sub_1B61EA430(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  _OWORD *v3;
  ausdk::AUBase *v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t Element;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v3 = (_OWORD *)(a1 + 536);
  v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v4 = &off_1E69C7888;
  *((_DWORD *)v4 + 132) = 0;
  *((_BYTE *)v4 + 532) = 1;
  *((_QWORD *)v4 + 67) = 1;
  *((_DWORD *)v4 + 136) = 1;
  *(_QWORD *)((char *)v4 + 548) = 0;
  *((_WORD *)v4 + 278) = 0;
  *((_DWORD *)v4 + 140) = 2;
  *(_OWORD *)((char *)v4 + 564) = 0u;
  *(_OWORD *)((char *)v4 + 580) = 0u;
  *(_OWORD *)((char *)v4 + 596) = 0u;
  *((_DWORD *)v4 + 153) = 0;
  v3[5] = xmmword_1B66A0EF0;
  v3[6] = xmmword_1B66A0F00;
  v3[7] = xmmword_1B66A0F10;
  *((_DWORD *)v4 + 166) = 1112014848;
  *((_QWORD *)v4 + 84) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)v4 + 85) = _D1;
  *((_QWORD *)v4 + 86) = 0;
  *((_DWORD *)v4 + 174) = 0;
  *((_QWORD *)v4 + 120) = 0;
  *((_OWORD *)v4 + 58) = 0u;
  *((_OWORD *)v4 + 59) = 0u;
  *((_OWORD *)v4 + 56) = 0u;
  *((_OWORD *)v4 + 57) = 0u;
  *((_OWORD *)v4 + 54) = 0u;
  *((_OWORD *)v4 + 55) = 0u;
  *((_OWORD *)v4 + 52) = 0u;
  *((_OWORD *)v4 + 53) = 0u;
  *((_OWORD *)v4 + 50) = 0u;
  *((_OWORD *)v4 + 51) = 0u;
  *((_OWORD *)v4 + 48) = 0u;
  *((_OWORD *)v4 + 49) = 0u;
  *((_OWORD *)v4 + 46) = 0u;
  *((_OWORD *)v4 + 47) = 0u;
  *((_OWORD *)v4 + 44) = 0u;
  *((_OWORD *)v4 + 45) = 0u;
  *(_QWORD *)((char *)v4 + 980) = 0xC1000000C1000000;
  *(_QWORD *)((char *)v4 + 1092) = 0;
  *((_OWORD *)v4 + 62) = 0u;
  *((_OWORD *)v4 + 63) = 0u;
  *((_OWORD *)v4 + 64) = 0u;
  *((_OWORD *)v4 + 65) = 0u;
  *((_QWORD *)v4 + 132) = 0;
  *((_WORD *)v4 + 550) = 1;
  *((_QWORD *)v4 + 138) = 0;
  *((_DWORD *)v4 + 278) = 0;
  *((_OWORD *)v4 + 70) = 0u;
  *((_OWORD *)v4 + 71) = 0u;
  *((_OWORD *)v4 + 72) = 0u;
  *((_OWORD *)v4 + 73) = 0u;
  *((_OWORD *)v4 + 74) = 0u;
  *((_OWORD *)v4 + 75) = 0u;
  *((_OWORD *)v4 + 76) = 0u;
  *((_OWORD *)v4 + 77) = 0u;
  *((_OWORD *)v4 + 78) = 0u;
  *((_OWORD *)v4 + 79) = 0u;
  *((_OWORD *)v4 + 80) = 0u;
  *((_OWORD *)v4 + 81) = 0u;
  *((_OWORD *)v4 + 82) = 0u;
  *((_OWORD *)v4 + 83) = 0u;
  *((_OWORD *)v4 + 84) = 0u;
  *((_OWORD *)v4 + 85) = 0u;
  *((_OWORD *)v4 + 86) = 0u;
  *((_OWORD *)v4 + 87) = 0u;
  *((_DWORD *)v4 + 352) = 7;
  *(_OWORD *)((char *)v4 + 1416) = 0u;
  *(_OWORD *)((char *)v4 + 1432) = 0u;
  *(_OWORD *)((char *)v4 + 1448) = 0u;
  *(_OWORD *)((char *)v4 + 1464) = 0u;
  *(_OWORD *)((char *)v4 + 1480) = 0u;
  *(_OWORD *)((char *)v4 + 1496) = 0u;
  *(_OWORD *)((char *)v4 + 1512) = 0u;
  *(_OWORD *)((char *)v4 + 1528) = 0u;
  *(_OWORD *)((char *)v4 + 1544) = 0u;
  *(_OWORD *)((char *)v4 + 1560) = 0u;
  *(_OWORD *)((char *)v4 + 1576) = 0u;
  *(_OWORD *)((char *)v4 + 1592) = 0u;
  *(_OWORD *)((char *)v4 + 1608) = 0u;
  *((_QWORD *)v4 + 203) = 0;
  *((_DWORD *)v4 + 408) = 21;
  *((_DWORD *)v4 + 429) = 1078788662;
  *(_OWORD *)((char *)v4 + 1684) = xmmword_1B6688220;
  *(_OWORD *)((char *)v4 + 1700) = unk_1B6688230;
  *(_OWORD *)((char *)v4 + 1652) = unk_1B6688200;
  *(_OWORD *)((char *)v4 + 1668) = xmmword_1B6688210;
  *(_OWORD *)((char *)v4 + 1636) = NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table;
  *(_OWORD *)((char *)v4 + 1720) = 0u;
  *(_OWORD *)((char *)v4 + 1736) = 0u;
  *(_OWORD *)((char *)v4 + 1752) = 0u;
  *(_OWORD *)((char *)v4 + 1768) = 0u;
  *(_OWORD *)((char *)v4 + 1784) = 0u;
  *(_OWORD *)((char *)v4 + 1800) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v4);
  v10 = *(_QWORD *)(a1 + 120);
  if (v10)
    LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  else
    v11 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
  *(_DWORD *)(a1 + 560) = v11;
  v37 = 0x40D7700000000000;
  v38 = xmmword_1B66A0BD0;
  v39 = xmmword_1B66A0BE0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v37);
  v13 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, &v37);
  if (*(_DWORD *)(a1 + 560) >= 2u)
  {
    v34 = 0x40D7700000000000;
    v36 = xmmword_1B6626910;
    v35 = xmmword_1B6626900;
    v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 56))(v14, &v34);
  }
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  else
    v16 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, 5);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 0, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 1u, -26.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 2u, -24.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 3u, -75.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 4u, 0.0, 0);
  v32 = AULevelDrivenSuppressor::InitializeInternals((AULevelDrivenSuppressor *)a1);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 512))(a1, 480, v32);
  *(_QWORD *)(a1 + 644) = 0x1E046BB8000;
  *(_BYTE *)(a1 + 557) = 0;
  *v3 = xmmword_1B6627BC0;
  return a1;
}

void sub_1B61EA8FC(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  v8 = (void *)*((_QWORD *)v1 + 223);
  if (v8)
  {
    *((_QWORD *)v1 + 224) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 220);
  if (v9)
  {
    *((_QWORD *)v1 + 221) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v1 + 217);
  if (v10)
  {
    *((_QWORD *)v1 + 218) = v10;
    operator delete(v10);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2);
  v11 = (void *)*((_QWORD *)v1 + 201);
  if (v11)
  {
    *((_QWORD *)v1 + 202) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)v1 + 198);
  if (v12)
  {
    *((_QWORD *)v1 + 199) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)v1 + 195);
  if (v13)
  {
    *((_QWORD *)v1 + 196) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)v1 + 192);
  if (v14)
  {
    *((_QWORD *)v1 + 193) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)v1 + 189);
  if (v15)
  {
    *((_QWORD *)v1 + 190) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)v1 + 186);
  if (v16)
  {
    *((_QWORD *)v1 + 187) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)v1 + 183);
  if (v17)
  {
    *((_QWORD *)v1 + 184) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)v1 + 180);
  if (v18)
  {
    *((_QWORD *)v1 + 181) = v18;
    operator delete(v18);
  }
  v19 = *v6;
  if (*v6)
  {
    *((_QWORD *)v1 + 178) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)v1 + 173);
  if (v20)
  {
    *((_QWORD *)v1 + 174) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)v1 + 170);
  if (v21)
  {
    *((_QWORD *)v1 + 171) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)v1 + 167);
  if (v22)
  {
    *((_QWORD *)v1 + 168) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)v1 + 164);
  if (v23)
  {
    *((_QWORD *)v1 + 165) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)v1 + 161);
  if (v24)
  {
    *((_QWORD *)v1 + 162) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)v1 + 158);
  if (v25)
  {
    *((_QWORD *)v1 + 159) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)v1 + 155);
  if (v26)
  {
    *((_QWORD *)v1 + 156) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)v1 + 152);
  if (v27)
  {
    *((_QWORD *)v1 + 153) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)v1 + 149);
  if (v28)
  {
    *((_QWORD *)v1 + 150) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)v1 + 146);
  if (v29)
  {
    *((_QWORD *)v1 + 147) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)v1 + 143);
  if (v30)
  {
    *((_QWORD *)v1 + 144) = v30;
    operator delete(v30);
  }
  v31 = *v5;
  if (*v5)
  {
    *((_QWORD *)v1 + 141) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)v1 + 130);
  if (v32)
  {
    *((_QWORD *)v1 + 131) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)v1 + 127);
  if (v33)
  {
    *((_QWORD *)v1 + 128) = v33;
    operator delete(v33);
  }
  v34 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 125) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)v1 + 118);
  if (v35)
  {
    *((_QWORD *)v1 + 119) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)v1 + 115);
  if (v36)
  {
    *((_QWORD *)v1 + 116) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)v1 + 112);
  if (v37)
  {
    *((_QWORD *)v1 + 113) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)v1 + 109);
  if (v38)
  {
    *((_QWORD *)v1 + 110) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)v1 + 106);
  if (v39)
  {
    *((_QWORD *)v1 + 107) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)v1 + 103);
  if (v40)
  {
    *((_QWORD *)v1 + 104) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)v1 + 100);
  if (v41)
  {
    *((_QWORD *)v1 + 101) = v41;
    operator delete(v41);
  }
  v42 = (void *)*((_QWORD *)v1 + 97);
  if (v42)
  {
    *((_QWORD *)v1 + 98) = v42;
    operator delete(v42);
  }
  v43 = (void *)*((_QWORD *)v1 + 94);
  if (v43)
  {
    *((_QWORD *)v1 + 95) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)v1 + 91);
  if (v44)
  {
    *((_QWORD *)v1 + 92) = v44;
    operator delete(v44);
  }
  v45 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 89) = v45;
    operator delete(v45);
  }
  v46 = (void *)*((_QWORD *)v1 + 74);
  if (v46)
  {
    *((_QWORD *)v1 + 75) = v46;
    operator delete(v46);
  }
  v47 = (void *)*((_QWORD *)v1 + 71);
  if (v47)
  {
    *((_QWORD *)v1 + 72) = v47;
    operator delete(v47);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3;
  ausdk::AUBase *v4;
  NSObject *v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  _BYTE buf[24];
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 612;
  v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(_QWORD *)v4 = &off_1E69E08B8;
  *((_QWORD *)v4 + 66) = 0;
  *((_QWORD *)v4 + 67) = 0xC304000000000140;
  *((_OWORD *)v4 + 34) = 0u;
  *((_OWORD *)v4 + 35) = xmmword_1B6627BC0;
  *((_WORD *)v4 + 288) = 0;
  *(_QWORD *)((char *)v4 + 580) = 0x467A00000000001ELL;
  *((_DWORD *)v4 + 147) = 320;
  *((_QWORD *)v4 + 74) = 0x14100000280;
  *((_BYTE *)v4 + 600) = 0;
  *(_QWORD *)((char *)v4 + 604) = 0;
  *(_OWORD *)v3 = xmmword_1B66A0F20;
  *(_OWORD *)(v3 + 16) = xmmword_1B66A0F30;
  *(_QWORD *)((char *)v4 + 644) = 0;
  *((_QWORD *)v4 + 84) = 0;
  *((_DWORD *)v4 + 170) = 0;
  *(_QWORD *)((char *)v4 + 684) = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)v4 + 692) = 0x3C7DF3B600000000;
  *(_OWORD *)(a1 + 656) = 0u;
  bzero((char *)v4 + 700, 0x39DuLL);
  *(_DWORD *)(a1 + 1652) = 1065353216;
  *(_BYTE *)(a1 + 1656) = 0;
  *(_DWORD *)(a1 + 4284) = 0;
  *(_BYTE *)(v3 + 3676) = 0;
  bzero((void *)(a1 + 1676), 0xA24uLL);
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4612) = 0u;
  *(_OWORD *)(a1 + 4628) = 0u;
  *(_OWORD *)(a1 + 4580) = 0u;
  *(_OWORD *)(a1 + 4596) = 0u;
  *(_OWORD *)(a1 + 4548) = 0u;
  *(_OWORD *)(a1 + 4564) = 0u;
  *(_OWORD *)(a1 + 4516) = 0u;
  *(_OWORD *)(a1 + 4532) = 0u;
  *(_OWORD *)(a1 + 4484) = 0u;
  *(_OWORD *)(a1 + 4500) = 0u;
  *(_OWORD *)(a1 + 4452) = 0u;
  *(_OWORD *)(a1 + 4468) = 0u;
  *(_OWORD *)(a1 + 4420) = 0u;
  *(_OWORD *)(a1 + 4436) = 0u;
  *(_OWORD *)(a1 + 4388) = 0u;
  *(_OWORD *)(a1 + 4404) = 0u;
  *(_OWORD *)(a1 + 4356) = 0u;
  *(_OWORD *)(a1 + 4372) = 0u;
  *(_OWORD *)(a1 + 4324) = 0u;
  *(_OWORD *)(a1 + 4340) = 0u;
  *(_OWORD *)(a1 + 4292) = 0u;
  *(_OWORD *)(a1 + 4308) = 0u;
  *(_OWORD *)(a1 + 4656) = xmmword_1B667C89C;
  *(_OWORD *)(a1 + 4672) = unk_1B667C8AC;
  *(_OWORD *)(a1 + 4688) = xmmword_1B667C8BC;
  *(_QWORD *)(a1 + 4704) = 0x40E0000045FA0000;
  *(_DWORD *)(a1 + 4744) = 0;
  if (AULINNLogScope(void)::once != -1)
    dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
  if (AULINNLogScope(void)::scope)
  {
    v5 = *(NSObject **)AULINNLogScope(void)::scope;
    if (!*(_QWORD *)AULINNLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 161;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AULoudnessInNoise: Initialize", buf, 0x12u);
  }
LABEL_9:
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  *(_QWORD *)buf = 0x40CF400000000000;
  v80 = xmmword_1B66A0BE0;
  *(_OWORD *)&buf[8] = xmmword_1B66A0BD0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 56))(v7, buf);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 2u);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 56))(v8, buf);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 56))(v9, buf);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  else
    v11 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, 67);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0, 0.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 1u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 2u, 1.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 3u, 1.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 4u, 90.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 5u, 0.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 6u, 0.5, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 7u, -80.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 8u, -80.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 9u, 200.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xAu, 5005.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xBu, 2.0, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xCu, 0.25, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0x1Eu, 0.0, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0x20u, 0.0, 0);
  v57 = *(_QWORD *)(a1 + 72);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  ausdk::AUElement::SetParameter(v58, 0x3Du, 0.0, 0);
  v60 = *(_QWORD *)(a1 + 72);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  ausdk::AUElement::SetParameter(v61, 0x3Cu, 0.0, 0);
  v63 = *(_QWORD *)(a1 + 72);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  ausdk::AUElement::SetParameter(v64, 0x3Eu, 0.0, 0);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  ausdk::AUElement::SetParameter(v67, 0x3Fu, -1.0, 0);
  v69 = *(_QWORD *)(a1 + 72);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0x40u, 0.0, 0);
  v72 = *(_QWORD *)(a1 + 72);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  ausdk::AUElement::SetParameter(v73, 0x41u, 0.0, 0);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  ausdk::AUElement::SetParameter(v76, 0x42u, -200.0, 0);
  *(_BYTE *)(a1 + 1656) = 0;
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 320);
  *(_DWORD *)(a1 + 596) = 321;
  *(_QWORD *)(a1 + 584) = 0x140467A0000;
  *(_BYTE *)(a1 + 577) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_1B6627BC0;
  *(_BYTE *)(a1 + 1624) = 0;
  AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults((AULoudnessInNoise *)a1);
  return a1;
}

void sub_1B61EB504(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;

  v4 = (void *)*((_QWORD *)v1 + 579);
  if (v4)
  {
    *((_QWORD *)v1 + 580) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)v1 + 576);
  if (v5)
  {
    *((_QWORD *)v1 + 577) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 573);
  if (v6)
  {
    *((_QWORD *)v1 + 574) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 570);
  if (v7)
  {
    *((_QWORD *)v1 + 571) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 567);
  if (v8)
  {
    *((_QWORD *)v1 + 568) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 564);
  if (v9)
  {
    *((_QWORD *)v1 + 565) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v1 + 561);
  if (v10)
  {
    *((_QWORD *)v1 + 562) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)v1 + 558);
  if (v11)
  {
    *((_QWORD *)v1 + 559) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)v1 + 555);
  if (v12)
  {
    *((_QWORD *)v1 + 556) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)v1 + 552);
  if (v13)
  {
    *((_QWORD *)v1 + 553) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)v1 + 549);
  if (v14)
  {
    *((_QWORD *)v1 + 550) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)v1 + 546);
  if (v15)
  {
    *((_QWORD *)v1 + 547) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)v1 + 543);
  if (v16)
  {
    *((_QWORD *)v1 + 544) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)v1 + 540);
  if (v17)
  {
    *((_QWORD *)v1 + 541) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)v1 + 537);
  if (v18)
  {
    *((_QWORD *)v1 + 538) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)v1 + 531);
  if (v19)
  {
    *((_QWORD *)v1 + 532) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)v1 + 528);
  if (v20)
  {
    *((_QWORD *)v1 + 529) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)v1 + 525);
  if (v21)
  {
    *((_QWORD *)v1 + 526) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)v1 + 522);
  if (v22)
  {
    *((_QWORD *)v1 + 523) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)v1 + 519);
  if (v23)
  {
    *((_QWORD *)v1 + 520) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)v1 + 516);
  if (v24)
  {
    *((_QWORD *)v1 + 517) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)v1 + 513);
  if (v25)
  {
    *((_QWORD *)v1 + 514) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)v1 + 510);
  if (v26)
  {
    *((_QWORD *)v1 + 511) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)v1 + 507);
  if (v27)
  {
    *((_QWORD *)v1 + 508) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)v1 + 504);
  if (v28)
  {
    *((_QWORD *)v1 + 505) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)v1 + 501);
  if (v29)
  {
    *((_QWORD *)v1 + 502) = v29;
    operator delete(v29);
  }
  v30 = 0;
  while (1)
  {
    v31 = *(void **)((char *)v1 + v30 + 3984);
    if (v31)
    {
      *(_QWORD *)((char *)v1 + v30 + 3992) = v31;
      operator delete(v31);
    }
    v30 -= 24;
    if (v30 == -720)
    {
      v32 = (void *)*((_QWORD *)v1 + 408);
      if (v32)
      {
        *((_QWORD *)v1 + 409) = v32;
        operator delete(v32);
      }
      v33 = (void *)*((_QWORD *)v1 + 405);
      if (v33)
      {
        *((_QWORD *)v1 + 406) = v33;
        operator delete(v33);
      }
      v34 = (void *)*((_QWORD *)v1 + 402);
      if (v34)
      {
        *((_QWORD *)v1 + 403) = v34;
        operator delete(v34);
      }
      v35 = (void *)*((_QWORD *)v1 + 399);
      if (v35)
      {
        *((_QWORD *)v1 + 400) = v35;
        operator delete(v35);
      }
      v36 = 0;
      while (1)
      {
        v37 = *(void **)((char *)v1 + v36 + 3168);
        if (v37)
        {
          *(_QWORD *)((char *)v1 + v36 + 3176) = v37;
          operator delete(v37);
        }
        v36 -= 24;
        if (v36 == -720)
        {
          v38 = (void *)*((_QWORD *)v1 + 306);
          if (v38)
          {
            *((_QWORD *)v1 + 307) = v38;
            operator delete(v38);
          }
          v39 = 0;
          while (1)
          {
            v40 = *(void **)((char *)v1 + v39 + 2424);
            if (v40)
            {
              *(_QWORD *)((char *)v1 + v39 + 2432) = v40;
              operator delete(v40);
            }
            v39 -= 24;
            if (v39 == -720)
            {
              v41 = (void *)*((_QWORD *)v1 + 213);
              if (v41)
              {
                *((_QWORD *)v1 + 214) = v41;
                operator delete(v41);
              }
              v42 = (void *)*((_QWORD *)v1 + 210);
              if (v42)
              {
                *((_QWORD *)v1 + 211) = v42;
                operator delete(v42);
              }
              v43 = (void *)*((_QWORD *)v1 + 200);
              if (v43)
              {
                *((_QWORD *)v1 + 201) = v43;
                operator delete(v43);
              }
              v44 = (void *)*((_QWORD *)v1 + 197);
              if (v44)
              {
                *((_QWORD *)v1 + 198) = v44;
                operator delete(v44);
              }
              v45 = (void *)*((_QWORD *)v1 + 194);
              if (v45)
              {
                *((_QWORD *)v1 + 195) = v45;
                operator delete(v45);
              }
              v46 = (void *)*((_QWORD *)v1 + 191);
              if (v46)
              {
                *((_QWORD *)v1 + 192) = v46;
                operator delete(v46);
              }
              v47 = (void *)*((_QWORD *)v1 + 187);
              if (v47)
              {
                *((_QWORD *)v1 + 188) = v47;
                operator delete(v47);
              }
              v48 = (void *)*((_QWORD *)v1 + 184);
              if (v48)
              {
                *((_QWORD *)v1 + 185) = v48;
                operator delete(v48);
              }
              v49 = 0;
              while (1)
              {
                v50 = *(void **)((char *)v1 + v49 + 1448);
                if (v50)
                {
                  *(_QWORD *)((char *)v1 + v49 + 1456) = v50;
                  operator delete(v50);
                }
                v49 -= 24;
                if (v49 == -720)
                {
                  v51 = (void *)*((_QWORD *)v1 + 91);
                  if (v51)
                  {
                    *((_QWORD *)v1 + 92) = v51;
                    operator delete(v51);
                  }
                  v52 = (void *)*((_QWORD *)v1 + 88);
                  if (v52)
                  {
                    *((_QWORD *)v1 + 89) = v52;
                    operator delete(v52);
                  }
                  v53 = *v2;
                  if (*v2)
                  {
                    *((_QWORD *)v1 + 83) = v53;
                    operator delete(v53);
                  }
                  v54 = *((_QWORD *)v1 + 66);
                  *((_QWORD *)v1 + 66) = 0;
                  if (v54)
                    MEMORY[0x1BCC95CEC](v54, 0x60C4044C4A2DFLL);
                  ausdk::AUBase::~AUBase(v1);
                  _Unwind_Resume(a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3;
  ausdk::AUBase *v4;
  WindDetectorAndSuppressor *v5;
  _DWORD *v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  unsigned int i;
  uint64_t v128;
  uint64_t v129;
  uint64_t Element;
  unsigned int j;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v143;
  __int128 v144;
  __int128 v145;

  v3 = a1 + 568;
  v4 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v4 = &off_1E69D9430;
  *((_QWORD *)v4 + 66) = 1;
  *((_BYTE *)v4 + 536) = 0;
  v5 = (ausdk::AUBase *)((char *)v4 + 544);
  *((_QWORD *)v4 + 68) = 0x1AF1C9013F800000;
  *((_BYTE *)v4 + 552) = 0;
  *((_QWORD *)v4 + 70) = 0x40CF400000000000;
  *(_OWORD *)v3 = xmmword_1B66A0F40;
  *(_OWORD *)(v3 + 16) = xmmword_1B66A0F50;
  *((_QWORD *)v4 + 75) = 0xEF00000000;
  *((_OWORD *)v4 + 38) = 0u;
  *((_OWORD *)v4 + 39) = 0u;
  *((_OWORD *)v4 + 40) = 0u;
  *(_QWORD *)((char *)v4 + 653) = 0;
  *(_OWORD *)((char *)v4 + 824) = 0u;
  *(_OWORD *)((char *)v4 + 840) = 0u;
  *(_OWORD *)((char *)v4 + 856) = 0u;
  *(_OWORD *)((char *)v4 + 872) = 0u;
  *(_OWORD *)((char *)v4 + 888) = 0u;
  *(_OWORD *)((char *)v4 + 904) = 0u;
  *(_OWORD *)((char *)v4 + 920) = 0u;
  *(_OWORD *)((char *)v4 + 936) = 0u;
  *(_OWORD *)((char *)v4 + 952) = 0u;
  v6 = operator new(0xCuLL);
  *(_QWORD *)(a1 + 944) = v6;
  *(_QWORD *)(a1 + 960) = v6 + 3;
  *(_QWORD *)v6 = 0x3F0000003E800000;
  v6[2] = 1048576000;
  *(_QWORD *)(a1 + 952) = v6 + 3;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_QWORD *)(a1 + 1125) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1076) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  LODWORD(v143) = 0;
  std::vector<float>::assign((char **)(a1 + 1040), 0xEuLL, &v143);
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(v3 + 100) = xmmword_1B66A0F60;
  *(_OWORD *)(v3 + 116) = xmmword_1B66A0F70;
  *(_OWORD *)(v3 + 132) = xmmword_1B66A0F80;
  *(_QWORD *)(v3 + 148) = 0x3F0000003F4CCCCDLL;
  *(_DWORD *)(a1 + 748) = 0;
  *(_QWORD *)(a1 + 724) = 0;
  *(_QWORD *)(a1 + 740) = 0;
  *(_QWORD *)(a1 + 732) = 0;
  *(_OWORD *)(a1 + 752) = xmmword_1B66A0F90;
  *(_OWORD *)(a1 + 768) = xmmword_1B66A0FA0;
  *(_DWORD *)(a1 + 784) = 1056964608;
  *(_BYTE *)(a1 + 788) = 0;
  *(_OWORD *)(v3 + 224) = xmmword_1B66A0FB0;
  *(_OWORD *)(v3 + 240) = xmmword_1B66A0FC0;
  WindDetectorAndSuppressor::UpdateWindSuppressorCoreState(v5);
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, 0, 0.0, 0);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 1u, 0.0, 0);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 0x1Bu, 160.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 2u, 0.7, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 3u, -12.0, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 4u, 0.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 5u, 300.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 6u, 0.05, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 7u, 0.5, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 8u, 6.0, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 0x13u, 0.0, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 9u, 500.0, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0xAu, 4000.0, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0xBu, 0.8, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0xCu, 0.5, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0xDu, 0.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0xEu, 0.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0xFu, 0.0, 0);
  v61 = *(_QWORD *)(a1 + 72);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  ausdk::AUElement::SetParameter(v62, 0x14u, 0.0, 0);
  v64 = *(_QWORD *)(a1 + 72);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  ausdk::AUElement::SetParameter(v65, 0x1Cu, 0.0, 0);
  v67 = *(_QWORD *)(a1 + 72);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  ausdk::AUElement::SetParameter(v68, 0x1Du, 0.0, 0);
  v70 = *(_QWORD *)(a1 + 72);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  ausdk::AUElement::SetParameter(v71, 0x10u, 0.0, 0);
  v73 = *(_QWORD *)(a1 + 72);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  ausdk::AUElement::SetParameter(v74, 0x15u, 160.0, 0);
  v76 = *(_QWORD *)(a1 + 72);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  ausdk::AUElement::SetParameter(v77, 0x11u, 1000.0, 0);
  v79 = *(_QWORD *)(a1 + 72);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  ausdk::AUElement::SetParameter(v80, 0x16u, 0.02, 0);
  v82 = *(_QWORD *)(a1 + 72);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  ausdk::AUElement::SetParameter(v83, 0x12u, 24.0, 0);
  v85 = *(_QWORD *)(a1 + 72);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 0x1Eu, -80.0, 0);
  v88 = *(_QWORD *)(a1 + 72);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  ausdk::AUElement::SetParameter(v89, 0x17u, -110.0, 0);
  v91 = *(_QWORD *)(a1 + 72);
  if (v91)
  {
    v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
  }
  else
  {
    v93 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v93)
      v92 = 0;
    else
      v92 = *v93;
  }
  ausdk::AUElement::SetParameter(v92, 0x18u, 0.03, 0);
  v94 = *(_QWORD *)(a1 + 72);
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
  }
  else
  {
    v96 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  ausdk::AUElement::SetParameter(v95, 0x19u, 0.5, 0);
  v97 = *(_QWORD *)(a1 + 72);
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
  }
  else
  {
    v99 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  ausdk::AUElement::SetParameter(v98, 0x1Au, 0.5, 0);
  v100 = *(_QWORD *)(a1 + 72);
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
  }
  else
  {
    v102 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  ausdk::AUElement::SetParameter(v101, 0x1Fu, 0.0, 0);
  v103 = *(_QWORD *)(a1 + 72);
  if (v103)
  {
    v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
  }
  else
  {
    v105 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v105)
      v104 = 0;
    else
      v104 = *v105;
  }
  ausdk::AUElement::SetParameter(v104, 0x20u, 0.05, 0);
  v106 = *(_QWORD *)(a1 + 72);
  if (v106)
  {
    v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
  }
  else
  {
    v108 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v108)
      v107 = 0;
    else
      v107 = *v108;
  }
  ausdk::AUElement::SetParameter(v107, 0x21u, 0.25, 0);
  v109 = *(_QWORD *)(a1 + 72);
  if (v109)
  {
    v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
  }
  else
  {
    v111 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v111)
      v110 = 0;
    else
      v110 = *v111;
  }
  ausdk::AUElement::SetParameter(v110, 0x22u, 1.5, 0);
  v112 = *(_QWORD *)(a1 + 72);
  if (v112)
  {
    v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
  }
  else
  {
    v114 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v114)
      v113 = 0;
    else
      v113 = *v114;
  }
  ausdk::AUElement::SetParameter(v113, 0x23u, 0.25, 0);
  v115 = *(_QWORD *)(a1 + 72);
  if (v115)
  {
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
  }
  else
  {
    v117 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  ausdk::AUElement::SetParameter(v116, 0x24u, 0.005, 0);
  v118 = *(_QWORD *)(a1 + 72);
  if (v118)
  {
    v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
  }
  else
  {
    v120 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v120)
      v119 = 0;
    else
      v119 = *v120;
  }
  ausdk::AUElement::SetParameter(v119, 0x25u, -20.0, 0);
  v121 = *(_QWORD *)(a1 + 72);
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  ausdk::AUElement::SetParameter(v122, 0x26u, 5.0, 0);
  v124 = *(_QWORD *)(a1 + 72);
  if (v124)
  {
    v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
  }
  else
  {
    v126 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v126)
      v125 = 0;
    else
      v125 = *v126;
  }
  ausdk::AUElement::SetParameter(v125, 0x27u, 0.0, 0);
  for (i = 0; ; ++i)
  {
    v128 = *(_QWORD *)(a1 + 120);
    if (v128)
      LODWORD(v129) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128);
    else
      v129 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (i >= v129)
      break;
    if (!i)
    {
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
      v143 = 0x40E5888000000000;
      v144 = xmmword_1B66A0BD0;
      v145 = xmmword_1B66A0BC0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v143);
    }
  }
  for (j = 0; ; ++j)
  {
    v132 = *(_QWORD *)(a1 + 168);
    if (v132)
      LODWORD(v133) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
    else
      v133 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (j >= v133)
      break;
    switch(j)
    {
      case 2u:
        v135 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 2u);
        v143 = 0x40E5888000000000;
        v144 = xmmword_1B6626900;
        v145 = xmmword_1B6626910;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v135 + 56))(v135, &v143);
        break;
      case 1u:
        v136 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 1u);
        v143 = 0x40E5888000000000;
        v144 = xmmword_1B66A0BD0;
        v145 = xmmword_1B66A0BE0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v136 + 56))(v136, &v143);
        break;
      case 0u:
        v134 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
        v143 = 0x40E5888000000000;
        v144 = xmmword_1B66A0BD0;
        v145 = xmmword_1B66A0BC0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v134 + 56))(v134, &v143);
        break;
    }
  }
  v137 = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a1 + 1480) = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 1496) = v137;
  v138 = *(_OWORD *)(a1 + 808);
  *(_OWORD *)(a1 + 1512) = *(_OWORD *)(a1 + 792);
  *(_OWORD *)(a1 + 1528) = v138;
  v139 = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 1416) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(a1 + 1432) = v139;
  v140 = *(_OWORD *)(a1 + 744);
  *(_OWORD *)(a1 + 1448) = *(_OWORD *)(a1 + 728);
  *(_OWORD *)(a1 + 1464) = v140;
  v141 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a1 + 1400) = v141;
  return a1;
}

void sub_1B61EC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  ausdk::AUBase *v20;
  WindSuppressorCore *v21;
  void **v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  WindSuppressorCore::~WindSuppressorCore(v21);
  v25 = (void *)*((_QWORD *)v20 + 127);
  if (v25)
  {
    *((_QWORD *)v20 + 128) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)v20 + 124);
  if (v26)
  {
    *((_QWORD *)v20 + 125) = v26;
    operator delete(v26);
  }
  v27 = *v23;
  if (*v23)
  {
    *((_QWORD *)v20 + 122) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)v20 + 118);
  if (v28)
  {
    *((_QWORD *)v20 + 119) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)v20 + 115);
  if (v29)
  {
    *((_QWORD *)v20 + 116) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)v20 + 112);
  if (v30)
  {
    *((_QWORD *)v20 + 113) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)v20 + 109);
  if (v31)
  {
    *((_QWORD *)v20 + 110) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)v20 + 106);
  if (v32)
  {
    *((_QWORD *)v20 + 107) = v32;
    operator delete(v32);
  }
  v33 = *v22;
  if (*v22)
  {
    *((_QWORD *)v20 + 104) = v33;
    operator delete(v33);
  }
  ausdk::AUBase::~AUBase(v20);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t Element;
  unsigned int i;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 2);
  *(_QWORD *)v3 = &off_1E69CBDE8;
  *((_OWORD *)v3 + 33) = xmmword_1B6627BC0;
  *((_BYTE *)v3 + 544) = 0;
  *((_QWORD *)v3 + 69) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0x40CF400000000000;
  *(_DWORD *)(v4 + 16) = 240;
  *(_OWORD *)(v4 + 20) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *(_DWORD *)(v4 + 52) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 56) = xmmword_1B66A0FD0;
  *(_OWORD *)(v4 + 72) = xmmword_1B66A0FE0;
  *(_OWORD *)(v4 + 88) = xmmword_1B66A0FF0;
  *(_QWORD *)(v4 + 104) = 0xC2C800003E4CCCCDLL;
  *(_QWORD *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_OWORD *)(v4 + 140) = 0u;
  *(_OWORD *)(v4 + 156) = 0u;
  *(_DWORD *)(v4 + 172) = 0;
  *(_QWORD *)(a1 + 552) = v4;
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0, -60.0, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 1u, 11.0, 0);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 2u, 2.0, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 3u, -2.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 4u, 160.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 5u, 3800.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 6u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 7u, 120.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 8u, 160.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 9u, 3800.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0xAu, 0.2, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0xBu, 0.2, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xCu, 0.2, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xDu, -100.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xEu, 0.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xFu, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x10u, 0.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0x11u, 0.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x12u, 0.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x13u, 0.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x14u, 0.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x15u, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x16u, 0.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x17u, 0.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x18u, 0.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x19u, 0.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x1Au, 0.0, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x1Bu, 0.0, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x1Cu, 0.0, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Du, 0.0, 0);
  v95 = 0;
  v107 = 0x40E5888000000000;
  v108 = xmmword_1B6626900;
  v109 = xmmword_1B66A0830;
  v104 = 0x40E5888000000000;
  v105 = xmmword_1B6626900;
  v106 = xmmword_1B6626910;
  while (1)
  {
    v96 = *(_QWORD *)(a1 + 120);
    if (v96)
      LODWORD(v97) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
    else
      v97 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v95 >= v97)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v95);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v107);
    ++v95;
  }
  for (i = 0; ; ++i)
  {
    v100 = *(_QWORD *)(a1 + 168);
    if (v100)
      LODWORD(v101) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
    else
      v101 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v101)
      break;
    v102 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v102 + 56))(v102, &v104);
  }
  return a1;
}

void sub_1B61ED300(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  uint64_t v133;
  ausdk::AUElement *v134;
  ausdk::AUElement **v135;
  uint64_t v136;
  ausdk::AUElement *v137;
  ausdk::AUElement **v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  ausdk::AUElement **v141;
  uint64_t v142;
  ausdk::AUElement *v143;
  ausdk::AUElement **v144;
  int8x16_t v145;
  int8x16_t v146;
  unint64_t k;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  ausdk::AUElement *v151;
  uint64_t v152;
  uint64_t v153;
  ausdk::AUElement *v154;
  uint64_t v155;
  uint64_t v156;
  ausdk::AUElement *v157;
  uint64_t v158;
  uint64_t v159;
  ausdk::AUElement *v160;
  uint64_t v161;
  uint64_t v162;
  ausdk::AUElement *v163;
  uint64_t v164;
  __int32 v165;
  int8x8_t v166;
  int8x16_t v167;
  int8x8_t v168;
  int8x16_t v169;
  int v170;
  int v171;
  unsigned int m;
  uint64_t v173;
  uint64_t v174;
  uint64_t Element;
  unsigned int n;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  AUDebugFeature *v181;
  _QWORD v183[2];
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int8x16_t v203;
  int8x8_t v204;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 4);
  *(_QWORD *)v3 = &off_1E69D2B60;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 35) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 576) = 0;
  *((_QWORD *)v3 + 73) = 0;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *((_DWORD *)v3 + 148) = 0;
  *((_WORD *)v3 + 316) = 0;
  *((_BYTE *)v3 + 634) = 1;
  *((_QWORD *)v3 + 80) = 0;
  *((_QWORD *)v3 + 142) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v183[0] = 0;
  v183[1] = 0;
  v184 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)v183, *(OpaqueAudioComponentInstance **)(a1 + 8));
  v4 = HIDWORD(v183[0]) == 1651340388;
  *(_BYTE *)(a1 + 633) = HIDWORD(v183[0]) == 1651340388;
  if (v4)
  {
    v6 = operator new();
    BeamformerBase::BeamformerBase((BeamformerBase *)v6);
    *(_QWORD *)v6 = &off_1E69DA258;
    *(_QWORD *)(v6 + 19600) = 0x40CF400000000000;
    bzero((void *)(v6 + 19608), 0x56118uLL);
    bzero((void *)(v6 + 390576), 0x1CB48uLL);
    BeamformerBase::SetParamDefaults((BeamformerBase *)v6);
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    BeamformerBase::BeamformerBase((BeamformerBase *)v6);
    *(_QWORD *)v6 = &off_1E69ECE38;
    *(_DWORD *)(v6 + 19600) = 0;
    bzero((void *)(v6 + 19608), 0x6F600uLL);
    for (i = 0; i != 184320; i += 40)
    {
      v8 = v6 + 475800 + i;
      *(_DWORD *)(v8 + 32) = 0;
      *(_OWORD *)v8 = 0uLL;
      *(_OWORD *)(v8 + 16) = 0uLL;
    }
    for (j = 0; j != 184320; j += 40)
    {
      v10 = v6 + 660120 + j;
      *(_DWORD *)(v10 + 32) = 0;
      *(_OWORD *)v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
    }
    v11 = -11520;
    do
    {
      v12 = v6 + 844440 + v11;
      *(_DWORD *)(v12 + 11552) = 0;
      *(_OWORD *)(v12 + 11536) = 0uLL;
      *(_OWORD *)(v12 + 11520) = 0uLL;
      v11 += 40;
    }
    while (v11);
    *(_QWORD *)(v6 + 856016) = 0;
    *(_OWORD *)(v6 + 855960) = 0u;
    *(_OWORD *)(v6 + 855976) = 0u;
    *(_OWORD *)(v6 + 855992) = 0u;
    *(_BYTE *)(v6 + 856008) = 0;
    BeamformerBase::SetParamDefaults((BeamformerBase *)v6);
    v5 = 1;
  }
  *(_BYTE *)(v6 + 548) = v5;
  *(_QWORD *)(a1 + 640) = v6;
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 0, 0.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 1u, 0.0, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 2u, 1.0, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 3u, 0.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 4u, 0.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 5u, 0.0, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 6u, 1000.0, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 7u, 5000.0, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 8u, 0.3, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 9u, -60.0, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0x15u, 0.0, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0x16u, 0.0, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0xAu, 0.0, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0xBu, 1.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0xCu, 0.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0xDu, 0.0, 0);
  v61 = *(_QWORD *)(a1 + 72);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  ausdk::AUElement::SetParameter(v62, 0xEu, 1.0, 0);
  v64 = *(_QWORD *)(a1 + 72);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  ausdk::AUElement::SetParameter(v65, 0xFu, 1.0, 0);
  v67 = *(_QWORD *)(a1 + 72);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  ausdk::AUElement::SetParameter(v68, 0x10u, 0.0, 0);
  v70 = *(_QWORD *)(a1 + 72);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  ausdk::AUElement::SetParameter(v71, 0x11u, -3.0, 0);
  v73 = *(_QWORD *)(a1 + 72);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  ausdk::AUElement::SetParameter(v74, 0x12u, -60.0, 0);
  v76 = *(_QWORD *)(a1 + 72);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  ausdk::AUElement::SetParameter(v77, 0x13u, -60.0, 0);
  v79 = *(_QWORD *)(a1 + 72);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  ausdk::AUElement::SetParameter(v80, 0x14u, 0.0, 0);
  v82 = *(_QWORD *)(a1 + 72);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  ausdk::AUElement::SetParameter(v83, 0x17u, 0.0, 0);
  v85 = *(_QWORD *)(a1 + 72);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 0x18u, 0.0, 0);
  v88 = *(_QWORD *)(a1 + 72);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  ausdk::AUElement::SetParameter(v89, 0x19u, 500.0, 0);
  v91 = *(_QWORD *)(a1 + 72);
  if (v91)
  {
    v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
  }
  else
  {
    v93 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v93)
      v92 = 0;
    else
      v92 = *v93;
  }
  ausdk::AUElement::SetParameter(v92, 0x1Au, 6.0, 0);
  v94 = *(_QWORD *)(a1 + 72);
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
  }
  else
  {
    v96 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  ausdk::AUElement::SetParameter(v95, 0x1Bu, 0.0, 0);
  v97 = *(_QWORD *)(a1 + 72);
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
  }
  else
  {
    v99 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  ausdk::AUElement::SetParameter(v98, 0x1Cu, 20.0, 0);
  v100 = *(_QWORD *)(a1 + 72);
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
  }
  else
  {
    v102 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  ausdk::AUElement::SetParameter(v101, 0x1Du, -100.0, 0);
  v103 = *(_QWORD *)(a1 + 72);
  if (v103)
  {
    v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
  }
  else
  {
    v105 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v105)
      v104 = 0;
    else
      v104 = *v105;
  }
  ausdk::AUElement::SetParameter(v104, 0x1Eu, 0.03, 0);
  v106 = *(_QWORD *)(a1 + 72);
  if (v106)
  {
    v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
  }
  else
  {
    v108 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v108)
      v107 = 0;
    else
      v107 = *v108;
  }
  ausdk::AUElement::SetParameter(v107, 0x1Fu, -12.0, 0);
  v109 = *(_QWORD *)(a1 + 72);
  if (v109)
  {
    v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
  }
  else
  {
    v111 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v111)
      v110 = 0;
    else
      v110 = *v111;
  }
  ausdk::AUElement::SetParameter(v110, 0x20u, 1250.0, 0);
  v112 = *(_QWORD *)(a1 + 72);
  if (v112)
  {
    v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
  }
  else
  {
    v114 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v114)
      v113 = 0;
    else
      v113 = *v114;
  }
  ausdk::AUElement::SetParameter(v113, 0x21u, 0.1, 0);
  v115 = *(_QWORD *)(a1 + 72);
  if (v115)
  {
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
  }
  else
  {
    v117 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  ausdk::AUElement::SetParameter(v116, 0x22u, 1.0, 0);
  v118 = *(_QWORD *)(a1 + 72);
  if (v118)
  {
    v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
  }
  else
  {
    v120 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v120)
      v119 = 0;
    else
      v119 = *v120;
  }
  ausdk::AUElement::SetParameter(v119, 0x23u, 1.5, 0);
  v121 = *(_QWORD *)(a1 + 72);
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  ausdk::AUElement::SetParameter(v122, 0x24u, 0.4, 0);
  v124 = *(_QWORD *)(a1 + 72);
  if (v124)
  {
    v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
  }
  else
  {
    v126 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v126)
      v125 = 0;
    else
      v125 = *v126;
  }
  ausdk::AUElement::SetParameter(v125, 0x25u, 250.0, 0);
  v127 = *(_QWORD *)(a1 + 72);
  if (v127)
  {
    v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
  }
  else
  {
    v129 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v129)
      v128 = 0;
    else
      v128 = *v129;
  }
  ausdk::AUElement::SetParameter(v128, 0x26u, -90.0, 0);
  v130 = *(_QWORD *)(a1 + 72);
  if (v130)
  {
    v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
  }
  else
  {
    v132 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v132)
      v131 = 0;
    else
      v131 = *v132;
  }
  ausdk::AUElement::SetParameter(v131, 0x27u, 0.25, 0);
  v133 = *(_QWORD *)(a1 + 72);
  if (v133)
  {
    v134 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
  }
  else
  {
    v135 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v135)
      v134 = 0;
    else
      v134 = *v135;
  }
  ausdk::AUElement::SetParameter(v134, 0x28u, 0.25, 0);
  v136 = *(_QWORD *)(a1 + 72);
  if (v136)
  {
    v137 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v136 + 32))(v136, 0);
  }
  else
  {
    v138 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v138)
      v137 = 0;
    else
      v137 = *v138;
  }
  ausdk::AUElement::SetParameter(v137, 0x29u, 0.75, 0);
  v139 = *(_QWORD *)(a1 + 72);
  if (v139)
  {
    v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 0);
  }
  else
  {
    v141 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v141)
      v140 = 0;
    else
      v140 = *v141;
  }
  ausdk::AUElement::SetParameter(v140, 0x2Au, 0.0, 0);
  v142 = *(_QWORD *)(a1 + 72);
  if (v142)
  {
    v143 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v142 + 32))(v142, 0);
  }
  else
  {
    v144 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v144)
      v143 = 0;
    else
      v143 = *v144;
  }
  ausdk::AUElement::SetParameter(v143, 0x2Bu, 1.0, 0);
  for (k = 0; ; ++k)
  {
    v148 = *(_QWORD *)(a1 + 624);
    if (v148)
      LODWORD(v149) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148);
    else
      v149 = (*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 3;
    if (k >= v149)
      break;
    v150 = *(_QWORD *)(a1 + 624);
    if (v150)
    {
      v151 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v150 + 32))(v150, k);
    }
    else
    {
      v152 = *(_QWORD *)(a1 + 600);
      if (k >= (*(_QWORD *)(a1 + 608) - v152) >> 3)
        v151 = 0;
      else
        v151 = *(ausdk::AUElement **)(v152 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v151, 0x64u, 0.0, 0);
    v153 = *(_QWORD *)(a1 + 624);
    if (v153)
    {
      v154 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v153 + 32))(v153, k);
    }
    else
    {
      v155 = *(_QWORD *)(a1 + 600);
      if (k >= (*(_QWORD *)(a1 + 608) - v155) >> 3)
        v154 = 0;
      else
        v154 = *(ausdk::AUElement **)(v155 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v154, 0x65u, 0.0, 0);
    v156 = *(_QWORD *)(a1 + 624);
    if (v156)
    {
      v157 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v156 + 32))(v156, k);
    }
    else
    {
      v158 = *(_QWORD *)(a1 + 600);
      if (k >= (*(_QWORD *)(a1 + 608) - v158) >> 3)
        v157 = 0;
      else
        v157 = *(ausdk::AUElement **)(v158 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v157, 0x66u, 0.0, 0);
    v159 = *(_QWORD *)(a1 + 624);
    if (v159)
    {
      v160 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v159 + 32))(v159, k);
    }
    else
    {
      v161 = *(_QWORD *)(a1 + 600);
      if (k >= (*(_QWORD *)(a1 + 608) - v161) >> 3)
        v160 = 0;
      else
        v160 = *(ausdk::AUElement **)(v161 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v160, 0x67u, 0.0, 0);
    v162 = *(_QWORD *)(a1 + 624);
    if (v162)
    {
      v163 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v162 + 32))(v162, k);
    }
    else
    {
      v164 = *(_QWORD *)(a1 + 600);
      if (k >= (*(_QWORD *)(a1 + 608) - v164) >> 3)
        v163 = 0;
      else
        v163 = *(ausdk::AUElement **)(v164 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v163, 0x68u, 0.0, 0);
  }
  v145.i32[0] = 0;
  v165 = *(unsigned __int8 *)(a1 + 633);
  v146.i32[0] = v165;
  v166 = vceq_s8(*(int8x8_t *)v146.i8, *(int8x8_t *)v145.i8);
  v167 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v146, v145), 0);
  v168 = vorr_s8(vand_s8(vdup_lane_s8(v166, 0), (int8x8_t)64), vbic_s8((int8x8_t)32, v166));
  v169 = vbslq_s8(v167, (int8x16_t)xmmword_1B66A1010, (int8x16_t)xmmword_1B66A1000);
  v201 = 0x40E5888000000000;
  v202 = 0x296C70636DLL;
  if (v165)
    v170 = 4;
  else
    v170 = 8;
  v203 = v169;
  if (v165)
    v171 = 32;
  else
    v171 = 64;
  v204 = v168;
  v193 = 0x40E5888000000000;
  v194 = 0x296C70636DLL;
  v195 = v170;
  v196 = 1;
  v197 = v170;
  v198 = 16;
  v199 = v171;
  v200 = 0;
  v185 = 0x40E5888000000000;
  v186 = 0x296C70636DLL;
  v187 = v170;
  v188 = 1;
  v189 = v170;
  v190 = 288;
  v191 = v171;
  v192 = 0;
  if (!v165)
  {
    LODWORD(v202) = 1718773105;
    LODWORD(v194) = 1718773105;
    LODWORD(v186) = 1718773105;
  }
  for (m = 0; ; ++m)
  {
    v173 = *(_QWORD *)(a1 + 120);
    if (v173)
      LODWORD(v174) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173);
    else
      v174 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (m >= v174)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), m);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v193);
  }
  for (n = 0; ; ++n)
  {
    v177 = *(_QWORD *)(a1 + 168);
    if (v177)
      LODWORD(v178) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177);
    else
      v178 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (n >= v178)
      break;
    v179 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), n);
    if ((n & 0xFFFFFFFE) == 2)
      v180 = &v185;
    else
      v180 = &v201;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v179 + 56))(v179, v180);
  }
  v181 = (AUDebugFeature *)memcpy((void *)(a1 + 648), (const void *)(*(_QWORD *)(a1 + 640) + 64), 0x1E8uLL);
  *(_BYTE *)(a1 + 634) = AUDebugFeature::IsNonFiniteHandlingEnabled(v181);
  return a1;
}

void sub_1B61EE568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14)
{
  ausdk::AUBase *v14;
  BeamformerBase *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  void *v42;
  void *v44;
  void *v45;

  v23 = v18[11];
  v18[11] = 0;
  if (v23)
    std::default_delete<SubbandDOACalculator>::operator()[abi:ne180100](v23);
  v24 = (void *)v18[7];
  if (v24)
  {
    v18[8] = v24;
    operator delete(v24);
  }
  v25 = *v19;
  if (*v19)
  {
    v18[5] = v25;
    operator delete(v25);
  }
  v26 = -11520;
  while (1)
  {
    v27 = (void *)*(v18 - 1);
    if (v27)
    {
      *v18 = v27;
      operator delete(v27);
    }
    v18 -= 5;
    v26 += 40;
    if (!v26)
    {
      v28 = -110592;
      v29 = -184320;
      v30 = -184320;
      while (1)
      {
        v31 = (void *)*(v17 - 1);
        if (v31)
        {
          *v17 = v31;
          operator delete(v31);
        }
        v17 -= 5;
        v30 += 40;
        if (!v30)
        {
          while (1)
          {
            v32 = (void *)*(v22 - 1);
            if (v32)
            {
              *v22 = v32;
              operator delete(v32);
            }
            v22 -= 5;
            v29 += 40;
            if (!v29)
            {
              v33 = -110592;
              while (1)
              {
                v34 = (void *)*(v21 - 1);
                if (v34)
                {
                  *v21 = v34;
                  operator delete(v34);
                }
                v21 -= 3;
                v33 += 24;
                if (!v33)
                {
                  v35 = -110592;
                  while (1)
                  {
                    v36 = (void *)*(v20 - 1);
                    if (v36)
                    {
                      *v20 = v36;
                      operator delete(v36);
                    }
                    v20 -= 3;
                    v35 += 24;
                    if (!v35)
                    {
                      v37 = -6912;
                      while (1)
                      {
                        v39 = (void *)*(a10 - 1);
                        if (v39)
                        {
                          *a10 = v39;
                          operator delete(v39);
                        }
                        a10 -= 3;
                        v37 += 24;
                        if (!v37)
                        {
                          v40 = -6912;
                          while (1)
                          {
                            v42 = (void *)*(a11 - 1);
                            if (v42)
                            {
                              *a11 = v42;
                              operator delete(v42);
                            }
                            a11 -= 3;
                            v40 += 24;
                            if (!v40)
                            {
                              while (1)
                              {
                                v44 = (void *)*(a12 - 1);
                                if (v44)
                                {
                                  *a12 = v44;
                                  operator delete(v44);
                                }
                                a12 -= 3;
                                v28 += 24;
                                if (!v28)
                                {
                                  while (1)
                                  {
                                    v45 = *(void **)((char *)v15 + v16 + 19584);
                                    if (v45)
                                    {
                                      *(_QWORD *)((char *)v15 + v16 + 19592) = v45;
                                      operator delete(v45);
                                    }
                                    v16 -= 24;
                                    if (!v16)
                                    {
                                      BeamformerBase::~BeamformerBase(v15);
                                      MEMORY[0x1BCC95CEC](v15, 0x10B1C403E6D1052);
                                      a14 = a13;
                                      std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
                                      ausdk::AUBase::~AUBase(v14);
                                      _Unwind_Resume(a1);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  NSObject *v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Element;
  unsigned int i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  AUDebugFeature *v41;
  NSObject *v42;
  _BYTE buf[24];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69E2AB0;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 544) = 0;
  *((_QWORD *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 600) = 0;
  *((_DWORD *)v3 + 151) = 1156;
  *((_QWORD *)v3 + 76) = 0x40E5888000000000;
  *((_DWORD *)v3 + 154) = 16;
  *((_BYTE *)v3 + 620) = 1;
  *((_QWORD *)v3 + 82) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v4 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUDistance.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 627;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting the default parameter values.", buf, 0x12u);
  }
LABEL_9:
  *(_DWORD *)(a1 + 624) = 50;
  *(_OWORD *)(a1 + 628) = xmmword_1B66A0780;
  *(_QWORD *)(a1 + 644) = 0x3F0000003DCCCCCDLL;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0, 1.0, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 1u, 0.5, 0);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 2u, 50.0, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 3u, 1.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 4u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 6u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 7u, 0.1, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 8u, 0.5, 0);
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v32 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      goto LABEL_62;
  }
  else
  {
    v32 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUDistance.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 651;
    _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting the format defaults.", buf, 0x12u);
  }
LABEL_62:
  v33 = 0;
  *(_QWORD *)(a1 + 608) = 0x40E5888000000000;
  *(_QWORD *)buf = 0x40E5888000000000;
  v45 = xmmword_1B66A1020;
  *(_OWORD *)&buf[8] = xmmword_1B66A0BD0;
  while (1)
  {
    v34 = *(_QWORD *)(a1 + 120);
    if (v34)
      LODWORD(v35) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
    else
      v35 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v33 >= v35)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v33);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
    ++v33;
  }
  for (i = 0; ; ++i)
  {
    v38 = *(_QWORD *)(a1 + 168);
    if (v38)
      LODWORD(v39) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
    else
      v39 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v39)
      break;
    v40 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v40 + 56))(v40, buf);
  }
  v41 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 620) = AUDebugFeature::IsNonFiniteHandlingEnabled(v41);
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v42 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      return a1;
  }
  else
  {
    v42 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUDistance.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 70;
    _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_INFO, "%25s:%-5d Constructed.", buf, 0x12u);
  }
  return a1;
}

void sub_1B61EEEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100](v2 + 82, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t Element;
  unsigned int i;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69CC4C0;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 35) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 576) = 0;
  *((_DWORD *)v3 + 145) = 1156;
  *((_QWORD *)v3 + 73) = 0x40E5888000000000;
  *((_DWORD *)v3 + 148) = 16;
  *((_BYTE *)v3 + 596) = 1;
  v4 = (uint64_t *)((char *)v3 + 736);
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *((_QWORD *)v3 + 119) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 616) = xmmword_1B6626830;
  *(_QWORD *)(a1 + 632) = 1092616192;
  *(_QWORD *)(a1 + 640) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 648) = 1056964608;
  *(_BYTE *)(a1 + 652) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 1056964608;
  *(float *)(a1 + 672) = __exp10f(-15.0);
  *(_DWORD *)(a1 + 676) = 1065353216;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(float *)(a1 + 700) = __exp10f(-15.0);
  *(_QWORD *)(a1 + 704) = 1165623296;
  *(float *)(a1 + 712) = __exp10f(-1.0);
  *(_QWORD *)(a1 + 716) = 0x3D4CCCCD00000000;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0, 0.0, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 1u, 0.0, 0);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 2u, 0.0, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 3u, 1.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 4u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 6u, 1.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 7u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 8u, 10.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 9u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0xAu, 0.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0xBu, 0.5, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xCu, 0.5, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xDu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xEu, 0.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xFu, 0.5, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x10u, 0.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0x11u, -300.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x12u, 1.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x13u, 0.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x14u, 0.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x15u, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x16u, 0.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x17u, 0.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x18u, -300.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x19u, 4000.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x1Au, 0.0, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x1Bu, -20.0, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x1Cu, 0.0, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Du, 0.05, 0);
  v95 = 0;
  *(_QWORD *)(a1 + 584) = 0x40E5888000000000;
  v112 = 0x40E5888000000000;
  v113 = xmmword_1B66A0BD0;
  v114 = xmmword_1B66A1020;
  v109 = 0x40E5888000000000;
  v111 = xmmword_1B66A1020;
  v110 = xmmword_1B66A0BD0;
  while (1)
  {
    v96 = *(_QWORD *)(a1 + 120);
    if (v96)
      LODWORD(v97) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
    else
      v97 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v95 >= v97)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v95);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v112);
    ++v95;
  }
  for (i = 0; ; ++i)
  {
    v100 = *(_QWORD *)(a1 + 168);
    if (v100)
      LODWORD(v101) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
    else
      v101 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v101)
      break;
    v102 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v102 + 56))(v102, &v109);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  *(_BYTE *)(a1 + 376) = 1;
  v103 = operator new();
  v104 = *(unsigned int *)(a1 + 592);
  *(_OWORD *)v103 = 0u;
  *(_OWORD *)(v103 + 16) = 0u;
  *(_OWORD *)(v103 + 32) = 0u;
  *(_BYTE *)(v103 + 60) = 1;
  *(_QWORD *)(v103 + 64) = 0;
  v105 = (_QWORD *)operator new();
  *v105 = 0;
  v106 = *(_QWORD *)(v103 + 64);
  *(_QWORD *)(v103 + 64) = v105;
  if (v106)
    MEMORY[0x1BCC95CEC](v106, 0x60C4044C4A2DFLL);
  *(_DWORD *)(v103 + 48) = v104;
  std::vector<std::vector<float>>::resize((uint64_t *)v103, v104);
  std::vector<std::vector<float>>::resize((uint64_t *)(v103 + 24), *(unsigned int *)(v103 + 48));
  v107 = std::unique_ptr<stvPlistHolder>::reset[abi:ne180100](v4, v103);
  *(_BYTE *)(a1 + 596) = AUDebugFeature::IsNonFiniteHandlingEnabled((AUDebugFeature *)v107);
  return a1;
}

void sub_1B61EFA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  ausdk::AUBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v19 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v16 + 64) = 0;
  if (v19)
    MEMORY[0x1BCC95CEC](v19, 0x60C4044C4A2DFLL);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = (void **)v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  MEMORY[0x1BCC95CEC](v16, 0x1020C40A98CFEF5);
  v20 = (void *)*((_QWORD *)v14 + 117);
  if (v20)
  {
    *((_QWORD *)v14 + 118) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)v14 + 114);
  if (v21)
  {
    *((_QWORD *)v14 + 115) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)v14 + 111);
  if (v22)
  {
    *((_QWORD *)v14 + 112) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)v14 + 108);
  if (v23)
  {
    *((_QWORD *)v14 + 109) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)v14 + 105);
  if (v24)
  {
    *((_QWORD *)v14 + 106) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)v14 + 102);
  if (v25)
  {
    *((_QWORD *)v14 + 103) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)v14 + 99);
  if (v26)
  {
    *((_QWORD *)v14 + 100) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)v14 + 96);
  if (v27)
  {
    *((_QWORD *)v14 + 97) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)v14 + 93);
  if (v28)
  {
    *((_QWORD *)v14 + 94) = v28;
    operator delete(v28);
  }
  std::unique_ptr<stvPlistHolder>::reset[abi:ne180100](v15, 0);
  v29 = *v17;
  *v17 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  ausdk::AUBase::~AUBase(v14);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t Element;
  unsigned int i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  AUDebugFeature *v57;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69EA2F8;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 544) = 0;
  *((_QWORD *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_DWORD *)v3 + 150) = 512;
  *((_QWORD *)v3 + 76) = 0x40E5888000000000;
  *((_DWORD *)v3 + 154) = 3;
  *((_BYTE *)v3 + 620) = 1;
  *((_OWORD *)v3 + 43) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 628) = xmmword_1B66A1030;
  *(_DWORD *)(a1 + 644) = -1046478848;
  *(_BYTE *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 652) = -1041235968;
  *(_OWORD *)(a1 + 660) = xmmword_1B66A1040;
  *(_DWORD *)(a1 + 676) = -1027080192;
  *(_QWORD *)(a1 + 680) = 0xC2C80000C2B40000;
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  ausdk::AUElement::SetParameter(v5, 0, 0.0, 0);
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, 1u, 2.0, 0);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 2u, 0.9, 0);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 3u, -30.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 4u, 9.5424, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 5u, -20.0, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 6u, 0.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 7u, -30.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 8u, 60.0, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 9u, 7000.0, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 0xAu, 0.1, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 0xBu, 6.0, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 0xCu, -100.0, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0xDu, -90.0, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0xEu, -100.0, 0);
  v49 = 0;
  *(_QWORD *)(a1 + 608) = 0x40E5888000000000;
  v62 = 0x40E5888000000000;
  v63 = xmmword_1B66A0BD0;
  v64 = xmmword_1B66A0DD0;
  v59 = 0x40E5888000000000;
  v61 = xmmword_1B66A0DD0;
  v60 = xmmword_1B66A0BD0;
  while (1)
  {
    v50 = *(_QWORD *)(a1 + 120);
    if (v50)
      LODWORD(v51) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
    else
      v51 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v49 >= v51)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v49);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v62);
    ++v49;
  }
  for (i = 0; ; ++i)
  {
    v54 = *(_QWORD *)(a1 + 168);
    if (v54)
      LODWORD(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
    else
      v55 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v55)
      break;
    v56 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v56 + 56))(v56, &v59);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  *(_BYTE *)(a1 + 376) = 1;
  AUSeparate::InitializeIVAClasses((AUSeparate *)a1);
  *(_BYTE *)(a1 + 620) = AUDebugFeature::IsNonFiniteHandlingEnabled(v57);
  return a1;
}

void sub_1B61F016C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  SeparationBase **v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<IVA_DirectiV_Rank1A>::reset[abi:ne180100](v2 + 87, 0);
  std::unique_ptr<IVA_HRLS_Rank1>::reset[abi:ne180100](v2 + 86, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t Element;
  unsigned int i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  AUDebugFeature *v82;
  uint64_t v84;
  __int128 v85;
  __int128 v86;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69CF1B0;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 544) = 0;
  *((_QWORD *)v3 + 69) = 0;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_WORD *)v3 + 300) = 256;
  *((_DWORD *)v3 + 151) = 1156;
  *((_OWORD *)v3 + 38) = xmmword_1B66A1050;
  *((_DWORD *)v3 + 156) = 1;
  v4 = (uint64_t)v3 + 736;
  *(_OWORD *)((char *)v3 + 628) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 677) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(_QWORD *)((char *)v3 + 725) = 0;
  *((_QWORD *)v3 + 96) = 0;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0, 0.0, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 1u, 1.0, 0);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 2u, 0.3, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 3u, 0.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 4u, 0.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 6u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 7u, 0.5, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 8u, 10.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 9u, 0.1, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0xAu, 0.1, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0xBu, 0.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0x16u, 0.0, 0);
  *(_BYTE *)(a1 + 692) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 708) = 0x3F0000003F800000;
  *(_DWORD *)(a1 + 716) = 2;
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 1162039296;
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xCu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xDu, 0.0, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xEu, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0xFu, 0.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0x10u, 1.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x11u, 0.5, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x12u, 2.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x13u, 0.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x14u, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x15u, 3125.0, 0);
  v74 = 0;
  *(_QWORD *)(a1 + 608) = 0x40E5888000000000;
  v84 = 0x40E5888000000000;
  v85 = xmmword_1B66A0BD0;
  v86 = xmmword_1B66A0BE0;
  while (1)
  {
    v75 = *(_QWORD *)(a1 + 120);
    if (v75)
      LODWORD(v76) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
    else
      v76 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v74 >= v76)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v74);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v84);
    ++v74;
  }
  for (i = 0; ; ++i)
  {
    v79 = *(_QWORD *)(a1 + 168);
    if (v79)
      LODWORD(v80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
    else
      v80 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v80)
      break;
    v81 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v81 + 56))(v81, &v84);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  *(_BYTE *)(a1 + 376) = 1;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a1 + 736);
  std::vector<float>::resize(v4, (*(_DWORD *)(a1 + 604) + 1));
  *(_BYTE *)(a1 + 601) = AUDebugFeature::IsNonFiniteHandlingEnabled(v82);
  return a1;
}

void sub_1B61F0A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  void *v13;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v9 + 96, 0);
  std::unique_ptr<DirectionalVAD>::reset[abi:ne180100](v9 + 95, 0);
  v13 = *v11;
  if (*v11)
  {
    v9[93] = (uint64_t)v13;
    operator delete(v13);
  }
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](v10, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  void *v3;
  char *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t Element;
  unsigned int i;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  _BYTE buf[24];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1) = &off_1E69C94B8;
  if (AUNeuralNetLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetLogScope(void)::once, &__block_literal_global_1862);
  caulk::deferred_logger::create_v(*(caulk::deferred_logger **)AUNeuralNetLogScope(void)::scope, v3);
  *(_DWORD *)(a1 + 544) = 1156;
  *(_DWORD *)(a1 + 596) = 0;
  *(_WORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 548) = 0u;
  *(_OWORD *)(a1 + 564) = 0u;
  *(_OWORD *)(a1 + 578) = 0u;
  *(_OWORD *)(a1 + 604) = 0u;
  *(_DWORD *)(a1 + 620) = 1036831949;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_BYTE *)(a1 + 652) = 1;
  *(_DWORD *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 672) = 1;
  *(_QWORD *)(a1 + 680) = 1;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)buf = a1 + 800;
  buf[8] = 0;
  v4 = (char *)operator new(0x270uLL);
  *(_QWORD *)(a1 + 800) = v4;
  v5 = v4 + 624;
  *(_QWORD *)(a1 + 816) = v4 + 624;
  bzero(v4, 0x270uLL);
  *(_QWORD *)(a1 + 808) = v5;
  *(_DWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1193) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 1240));
  *(_WORD *)(a1 + 1244) = 256;
  *(_DWORD *)(a1 + 1248) = 1;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_QWORD *)(a1 + 1304) = 0x33D6BF953F800000;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_QWORD *)(a1 + 1356) = 0x3ECCCCCD3F666666;
  *(_QWORD *)(a1 + 1364) = 0x3200000003;
  *(_BYTE *)(a1 + 1372) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_WORD *)(a1 + 1400) = 0;
  if (getAUNeuralNetLog(void)::onceToken != -1)
    dispatch_once(&getAUNeuralNetLog(void)::onceToken, &__block_literal_global_66);
  v6 = getAUNeuralNetLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUNeuralNetLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_debug_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "[%p] will construct", buf, 0xCu);
  }
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, 0, 0.0, 0);
  *(_DWORD *)(a1 + 548) = 1065353216;
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 1u, 0.0, 0);
  *(float *)(a1 + 552) = __exp10f(-14.0);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 2u, -140.0, 0);
  *(_DWORD *)(a1 + 556) = -1035468800;
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 3u, -50.0, 0);
  *(_DWORD *)(a1 + 560) = -1035468800;
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 4u, -50.0, 0);
  *(_DWORD *)(a1 + 564) = 0;
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 5u, 0.0, 0);
  *(_DWORD *)(a1 + 568) = 0;
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 6u, 0.0, 0);
  *(float *)(a1 + 572) = __exp10f(-5.0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 7u, -100.0, 0);
  *(_BYTE *)(a1 + 592) = 0;
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 0xCu, 0.0, 0);
  *(_BYTE *)(a1 + 593) = 0;
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 0xDu, 0.0, 0);
  *(float *)(a1 + 576) = __exp10f(-15.0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 8u, -300.0, 0);
  *(float *)(a1 + 580) = __exp10f(5.0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 9u, 100.0, 0);
  *(float *)(a1 + 584) = __exp10f(-15.0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0xAu, -300.0, 0);
  *(float *)(a1 + 588) = __exp10f(5.0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0xBu, 100.0, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0xEu, 0.0, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0xFu, 1.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0x10u, 1.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0x11u, 0.0, 0);
  v61 = *(_QWORD *)(a1 + 72);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  ausdk::AUElement::SetParameter(v62, 0x12u, 480.0, 0);
  v64 = *(_QWORD *)(a1 + 72);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  ausdk::AUElement::SetParameter(v65, 0x13u, 0.0, 0);
  v67 = *(_QWORD *)(a1 + 72);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  ausdk::AUElement::SetParameter(v68, 0x14u, 0.0, 0);
  v70 = *(_QWORD *)(a1 + 72);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  ausdk::AUElement::SetParameter(v71, 0x13u, 0.0, 0);
  *(_BYTE *)(a1 + 600) = 0;
  v73 = *(_QWORD *)(a1 + 72);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  ausdk::AUElement::SetParameter(v74, 0x15u, 0.0, 0);
  *(_BYTE *)(a1 + 601) = 0;
  v76 = *(_QWORD *)(a1 + 72);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  ausdk::AUElement::SetParameter(v77, 0x16u, 0.0, 0);
  *(_DWORD *)(a1 + 604) = 925353388;
  v79 = *(_QWORD *)(a1 + 72);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  ausdk::AUElement::SetParameter(v80, 0x17u, 0.00001, 0);
  *(_DWORD *)(a1 + 608) = 925353388;
  v82 = *(_QWORD *)(a1 + 72);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  ausdk::AUElement::SetParameter(v83, 0x18u, 0.00001, 0);
  v85 = *(_QWORD *)(a1 + 72);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 0x19u, 1.0, 0);
  v88 = *(_QWORD *)(a1 + 72);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  ausdk::AUElement::SetParameter(v89, 0x1Au, 1.0, 0);
  v91 = 0;
  *(_QWORD *)buf = 0x40E5888000000000;
  *(_OWORD *)&buf[8] = xmmword_1B6626900;
  v102 = 0x100000004;
  v103 = 32;
  while (1)
  {
    v92 = *(_QWORD *)(a1 + 120);
    if (v92)
      LODWORD(v93) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
    else
      v93 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v91 >= v93)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v91);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
    ++v91;
  }
  for (i = 0; ; ++i)
  {
    v96 = *(_QWORD *)(a1 + 168);
    if (v96)
      LODWORD(v97) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
    else
      v97 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v97)
      break;
    v98 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 56))(v98, buf);
  }
  *(_BYTE *)(a1 + 376) = 1;
  if (getAUNeuralNetLog(void)::onceToken != -1)
    dispatch_once(&getAUNeuralNetLog(void)::onceToken, &__block_literal_global_66);
  v99 = getAUNeuralNetLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUNeuralNetLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_1B5ED0000, v99, OS_LOG_TYPE_DEFAULT, "[%p] constructed", buf, 0xCu);
  }
  return a1;
}

void sub_1B61F16C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void **v28;
  void *v29;
  void *v30;

  if (*(_BYTE *)(v10 + 1232))
  {
    v13 = *(void **)(v10 + 1208);
    if (v13)
    {
      *(_QWORD *)(v10 + 1216) = v13;
      operator delete(v13);
    }
  }
  v14 = *(const void **)(v10 + 1200);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(v10 + 1192);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(v10 + 1184);
  if (v16)
    CFRelease(v16);
  v17 = *(void **)(v10 + 1160);
  if (v17)
  {
    *(_QWORD *)(v10 + 1168) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v10 + 1128);
  if (v18)
  {
    *(_QWORD *)(v10 + 1136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v10 + 1104);
  if (v19)
  {
    *(_QWORD *)(v10 + 1112) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 1080);
  if (v20)
  {
    *(_QWORD *)(v10 + 1088) = v20;
    operator delete(v20);
  }
  a10 = (void **)(v10 + 1056);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v21 = *(void **)(v10 + 1032);
  if (v21)
  {
    *(_QWORD *)(v10 + 1040) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v10 + 1008);
  if (v22)
  {
    *(_QWORD *)(v10 + 1016) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v10 + 984);
  if (v23)
  {
    *(_QWORD *)(v10 + 992) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v10 + 952);
  if (v24)
  {
    *(_QWORD *)(v10 + 960) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v10 + 928);
  if (v25)
  {
    *(_QWORD *)(v10 + 936) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v10 + 904);
  if (v26)
  {
    *(_QWORD *)(v10 + 912) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v10 + 880);
  if (v27)
  {
    *(_QWORD *)(v10 + 888) = v27;
    operator delete(v27);
  }
  v28 = (void **)(v10 + 832);
  v29 = *(void **)(v10 + 856);
  if (v29)
  {
    *(_QWORD *)(v10 + 864) = v29;
    operator delete(v29);
  }
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v10 + 840) = v30;
    operator delete(v30);
  }
  std::vector<AUNeuralNet::NeuralNetWrapper>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v11);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  unint64_t j;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  uint64_t v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  uint64_t v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  uint64_t v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t Element;
  unsigned int k;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  AUDebugFeature *v76;
  uint64_t v78;
  __int128 v79;
  __int128 v80;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 3, 1);
  *(_QWORD *)v3 = &off_1E69E8FE8;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 560) = 0;
  *((_QWORD *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *((_WORD *)v3 + 308) = 0;
  *((_DWORD *)v3 + 155) = 1156;
  *((_QWORD *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 16;
  *((_BYTE *)v3 + 636) = 1;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 640) = _Q0;
  *(_BYTE *)(a1 + 656) = 0;
  v9 = 0;
  *(float *)(a1 + 660) = __exp10f(-30.0);
  for (i = 664; ; i += 20)
  {
    v11 = *(_QWORD *)(a1 + 608);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (v9 >= v12)
      break;
    v13 = a1 + i;
    ++v9;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 0;
  }
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0, 0.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 1u, 1.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 2u, 0.3, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 3u, 0.0, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 4u, 0.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 5u, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 6u, 1.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 7u, 0.3, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 8u, 0.0, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 9u, 0.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xAu, 0.0, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xBu, -300.0, 0);
  for (j = 0; ; ++j)
  {
    v51 = *(_QWORD *)(a1 + 608);
    if (v51)
      LODWORD(v52) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
    else
      v52 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (j >= v52)
      break;
    v53 = *(_QWORD *)(a1 + 608);
    if (v53)
    {
      v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 32))(v53, j);
    }
    else
    {
      v55 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v55) >> 3)
        v54 = 0;
      else
        v54 = *(ausdk::AUElement **)(v55 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v54, 0x64u, 0.0, 0);
    v56 = *(_QWORD *)(a1 + 608);
    if (v56)
    {
      v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v56 + 32))(v56, j);
    }
    else
    {
      v58 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v58) >> 3)
        v57 = 0;
      else
        v57 = *(ausdk::AUElement **)(v58 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v57, 0x65u, 0.0, 0);
    v59 = *(_QWORD *)(a1 + 608);
    if (v59)
    {
      v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 32))(v59, j);
    }
    else
    {
      v61 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v61) >> 3)
        v60 = 0;
      else
        v60 = *(ausdk::AUElement **)(v61 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v60, 0x66u, 0.0, 0);
    v62 = *(_QWORD *)(a1 + 608);
    if (v62)
    {
      v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 32))(v62, j);
    }
    else
    {
      v64 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v64) >> 3)
        v63 = 0;
      else
        v63 = *(ausdk::AUElement **)(v64 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v63, 0x67u, 0.0, 0);
    v65 = *(_QWORD *)(a1 + 608);
    if (v65)
    {
      v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v65 + 32))(v65, j);
    }
    else
    {
      v67 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v67) >> 3)
        v66 = 0;
      else
        v66 = *(ausdk::AUElement **)(v67 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v66, 0x68u, 0.0, 0);
  }
  v68 = 0;
  *(_QWORD *)(a1 + 624) = 0x40E5888000000000;
  v78 = 0x40E5888000000000;
  v79 = xmmword_1B66A0BD0;
  v80 = xmmword_1B66A1020;
  while (1)
  {
    v69 = *(_QWORD *)(a1 + 120);
    if (v69)
      LODWORD(v70) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
    else
      v70 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v68 >= v70)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v68);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v78);
    ++v68;
  }
  for (k = 0; ; ++k)
  {
    v73 = *(_QWORD *)(a1 + 168);
    if (v73)
      LODWORD(v74) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
    else
      v74 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (k >= v74)
      break;
    v75 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), k);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v75 + 56))(v75, &v78);
  }
  v76 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 636) = AUDebugFeature::IsNonFiniteHandlingEnabled(v76);
  return a1;
}

void sub_1B61F1FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t *v9;
  void **v10;
  void *v12;
  void *v13;

  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v9 + 130, 0);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v9 + 129, 0);
  v12 = (void *)v9[126];
  if (v12)
  {
    v9[127] = (uint64_t)v12;
    operator delete(v12);
  }
  v13 = *v10;
  if (*v10)
  {
    v9[124] = (uint64_t)v13;
    operator delete(v13);
  }
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  unint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  uint64_t v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  uint64_t v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  uint64_t v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  uint64_t v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Element;
  unsigned int k;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  AUDebugFeature *v50;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69CC1E0;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 560) = 0;
  *((_QWORD *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *((_BYTE *)v3 + 616) = 0;
  *((_DWORD *)v3 + 155) = 1156;
  *((_QWORD *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 16;
  *((_BYTE *)v3 + 636) = 1;
  *((_QWORD *)v3 + 121) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = 0;
  *(float *)(a1 + 640) = __exp10f(-15.0);
  *(_BYTE *)(a1 + 644) = 0;
  for (i = 648; ; i += 20)
  {
    v6 = *(_QWORD *)(a1 + 608);
    if (v6)
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    else
      v7 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (v4 >= v7)
      break;
    v8 = a1 + i;
    ++v4;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
  }
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 0, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 1u, 1.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 2u, 0.3, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 3u, -300.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 4u, 0.0, 0);
  for (j = 0; ; ++j)
  {
    v25 = *(_QWORD *)(a1 + 608);
    if (v25)
      LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    else
      v26 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (j >= v26)
      break;
    v27 = *(_QWORD *)(a1 + 608);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 32))(v27, j);
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v29) >> 3)
        v28 = 0;
      else
        v28 = *(ausdk::AUElement **)(v29 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v28, 0x64u, 0.0, 0);
    v30 = *(_QWORD *)(a1 + 608);
    if (v30)
    {
      v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 32))(v30, j);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v32) >> 3)
        v31 = 0;
      else
        v31 = *(ausdk::AUElement **)(v32 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v31, 0x65u, 0.0, 0);
    v33 = *(_QWORD *)(a1 + 608);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 32))(v33, j);
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v35) >> 3)
        v34 = 0;
      else
        v34 = *(ausdk::AUElement **)(v35 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v34, 0x66u, 0.0, 0);
    v36 = *(_QWORD *)(a1 + 608);
    if (v36)
    {
      v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 32))(v36, j);
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v38) >> 3)
        v37 = 0;
      else
        v37 = *(ausdk::AUElement **)(v38 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v37, 0x67u, 0.0, 0);
    v39 = *(_QWORD *)(a1 + 608);
    if (v39)
    {
      v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 32))(v39, j);
    }
    else
    {
      v41 = *(_QWORD *)(a1 + 584);
      if (j >= (*(_QWORD *)(a1 + 592) - v41) >> 3)
        v40 = 0;
      else
        v40 = *(ausdk::AUElement **)(v41 + 8 * j);
    }
    ausdk::AUElement::SetParameter(v40, 0x68u, 0.0, 0);
  }
  v42 = 0;
  *(_QWORD *)(a1 + 624) = 0x40E5888000000000;
  v55 = 0x40E5888000000000;
  v56 = xmmword_1B66A0BD0;
  v57 = xmmword_1B66A1020;
  v52 = 0x40E5888000000000;
  v54 = xmmword_1B66A0BE0;
  v53 = xmmword_1B66A0BD0;
  while (1)
  {
    v43 = *(_QWORD *)(a1 + 120);
    if (v43)
      LODWORD(v44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    else
      v44 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v42 >= v44)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v42);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v55);
    ++v42;
  }
  for (k = 0; ; ++k)
  {
    v47 = *(_QWORD *)(a1 + 168);
    if (v47)
      LODWORD(v48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
    else
      v48 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (k >= v48)
      break;
    v49 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), k);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 56))(v49, &v52);
  }
  v50 = (AUDebugFeature *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1156);
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 636) = AUDebugFeature::IsNonFiniteHandlingEnabled(v50);
  return a1;
}

void sub_1B61F2564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v2 + 121, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  unint64_t i;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  uint64_t v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  uint64_t v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  uint64_t v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  uint64_t v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t Element;
  unsigned int j;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  AUDebugFeature *v150;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(_QWORD *)v3 = &off_1E69D6078;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 560) = 0;
  *((_QWORD *)v3 + 71) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *((_DWORD *)v3 + 144) = 0;
  *((_DWORD *)v3 + 154) = 512;
  *((_QWORD *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 3;
  *((_WORD *)v3 + 328) = 1;
  v4 = (uint64_t *)((char *)v3 + 1248);
  *(_OWORD *)((char *)v3 + 1144) = 0u;
  *(_OWORD *)((char *)v3 + 1160) = 0u;
  *(_OWORD *)((char *)v3 + 1176) = 0u;
  *(_OWORD *)((char *)v3 + 1192) = 0u;
  *(_OWORD *)((char *)v3 + 1208) = 0u;
  *(_OWORD *)((char *)v3 + 1224) = 0u;
  *(_OWORD *)((char *)v3 + 1240) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_DWORD *)(a1 + 660) = 0;
  *(_OWORD *)(a1 + 664) = xmmword_1B66A1060;
  *(_OWORD *)(a1 + 680) = xmmword_1B66A1070;
  *(_QWORD *)(a1 + 696) = 0x500000005;
  *(_OWORD *)(a1 + 704) = xmmword_1B66A1080;
  *(_DWORD *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 724) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 3279552512;
  *(_DWORD *)(a1 + 756) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 764) = 1;
  *(_OWORD *)(a1 + 768) = xmmword_1B66A1090;
  *(_QWORD *)(a1 + 784) = 0x40C000003F800000;
  *(_DWORD *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 796) = 1;
  *(_QWORD *)(a1 + 800) = 0x200000001;
  *(_WORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 812) = 0xC2700000C2700000;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1124) = 0u;
  *(_OWORD *)(a1 + 1076) = 0u;
  *(_OWORD *)(a1 + 1092) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(_OWORD *)(a1 + 1028) = 0u;
  *(_OWORD *)(a1 + 980) = 0u;
  *(_OWORD *)(a1 + 996) = 0u;
  *(_OWORD *)(a1 + 948) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 916) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 900) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0, 0.0, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 1u, 0.38, 0);
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 2u, 0.38, 0);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 3u, 0.0, 0);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 4u, 1.0, 0);
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 5u, -30.0, 0);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 6u, 0.5, 0);
  v26 = *(_QWORD *)(a1 + 72);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 7u, 1.0, 0);
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 8u, 100000.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 9u, 5.0, 0);
  v35 = *(_QWORD *)(a1 + 72);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0xAu, 5.0, 0);
  v38 = *(_QWORD *)(a1 + 72);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0xBu, 6.9897, 0);
  v41 = *(_QWORD *)(a1 + 72);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xCu, -300.0, 0);
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xDu, 0.99, 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0x17u, 0.05, 0);
  v50 = *(_QWORD *)(a1 + 72);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0x18u, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x19u, 0.0, 0);
  v56 = *(_QWORD *)(a1 + 72);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0x1Au, 0.0, 0);
  v59 = *(_QWORD *)(a1 + 72);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x1Bu, 0.0, 0);
  v62 = *(_QWORD *)(a1 + 72);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x1Cu, -250.0, 0);
  v65 = *(_QWORD *)(a1 + 72);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x1Du, 0.0, 0);
  v68 = *(_QWORD *)(a1 + 72);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x1Eu, 0.0, 0);
  v71 = *(_QWORD *)(a1 + 72);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x1Fu, 0.0, 0);
  v74 = *(_QWORD *)(a1 + 72);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x20u, 1.0, 0);
  v77 = *(_QWORD *)(a1 + 72);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x21u, 100.0, 0);
  v80 = *(_QWORD *)(a1 + 72);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x22u, 7000.0, 0);
  v83 = *(_QWORD *)(a1 + 72);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x23u, 0.5, 0);
  v86 = *(_QWORD *)(a1 + 72);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x24u, 0.001, 0);
  v89 = *(_QWORD *)(a1 + 72);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x25u, 1.0, 0);
  v92 = *(_QWORD *)(a1 + 72);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x26u, 6.0, 0);
  v95 = *(_QWORD *)(a1 + 72);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x27u, 0.0, 0);
  v98 = *(_QWORD *)(a1 + 72);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x28u, 1.0, 0);
  v101 = *(_QWORD *)(a1 + 72);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x29u, 1.0, 0);
  v104 = *(_QWORD *)(a1 + 72);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x2Au, 2.0, 0);
  v107 = *(_QWORD *)(a1 + 72);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0xEu, 0.0, 0);
  v110 = *(_QWORD *)(a1 + 72);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0xFu, 0.0, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x10u, -60.0, 0);
  v116 = *(_QWORD *)(a1 + 72);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x11u, -60.0, 0);
  for (i = 0; ; ++i)
  {
    v120 = *(_QWORD *)(a1 + 608);
    if (v120)
      LODWORD(v121) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120);
    else
      v121 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (i >= v121)
      break;
    v122 = *(_QWORD *)(a1 + 608);
    if (v122)
    {
      v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v122 + 32))(v122, i);
    }
    else
    {
      v124 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v124) >> 3)
        v123 = 0;
      else
        v123 = *(ausdk::AUElement **)(v124 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v123, 0x12u, 0.0, 0);
    v125 = *(_QWORD *)(a1 + 608);
    if (v125)
    {
      v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v125 + 32))(v125, i);
    }
    else
    {
      v127 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v127) >> 3)
        v126 = 0;
      else
        v126 = *(ausdk::AUElement **)(v127 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v126, 0x13u, 0.0, 0);
    v128 = *(_QWORD *)(a1 + 608);
    if (v128)
    {
      v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v128 + 32))(v128, i);
    }
    else
    {
      v130 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v130) >> 3)
        v129 = 0;
      else
        v129 = *(ausdk::AUElement **)(v130 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v129, 0x14u, 0.0, 0);
    v131 = *(_QWORD *)(a1 + 608);
    if (v131)
    {
      v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v131 + 32))(v131, i);
    }
    else
    {
      v133 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v133) >> 3)
        v132 = 0;
      else
        v132 = *(ausdk::AUElement **)(v133 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v132, 0x15u, 0.0, 0);
    v134 = *(_QWORD *)(a1 + 608);
    if (v134)
    {
      v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v134 + 32))(v134, i);
    }
    else
    {
      v136 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v136) >> 3)
        v135 = 0;
      else
        v135 = *(ausdk::AUElement **)(v136 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v135, 0x16u, 0.0, 0);
  }
  v137 = 0;
  *(_QWORD *)(a1 + 624) = 0x40E5888000000000;
  v155 = 0x40E5888000000000;
  v156 = xmmword_1B66A0BD0;
  v157 = xmmword_1B66A0DD0;
  v152 = 0x40E5888000000000;
  v154 = xmmword_1B66A0DD0;
  v153 = xmmword_1B66A0BD0;
  while (1)
  {
    v138 = *(_QWORD *)(a1 + 120);
    if (v138)
      LODWORD(v139) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
    else
      v139 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v137 >= v139)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v137);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v155);
    ++v137;
  }
  for (j = 0; ; ++j)
  {
    v142 = *(_QWORD *)(a1 + 168);
    if (v142)
      LODWORD(v143) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142);
    else
      v143 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (j >= v143)
      break;
    v144 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v144 + 56))(v144, &v152);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  *(_BYTE *)(a1 + 376) = 1;
  v145 = operator new();
  v146 = *(unsigned int *)(a1 + 632);
  *(_OWORD *)v145 = 0u;
  *(_OWORD *)(v145 + 16) = 0u;
  *(_OWORD *)(v145 + 32) = 0u;
  *(_BYTE *)(v145 + 60) = 1;
  *(_QWORD *)(v145 + 64) = 0;
  v147 = (_QWORD *)operator new();
  *v147 = 0;
  v148 = *(_QWORD *)(v145 + 64);
  *(_QWORD *)(v145 + 64) = v147;
  if (v148)
    MEMORY[0x1BCC95CEC](v148, 0x60C4044C4A2DFLL);
  *(_DWORD *)(v145 + 48) = v146;
  std::vector<std::vector<float>>::resize((uint64_t *)v145, v146);
  std::vector<std::vector<float>>::resize((uint64_t *)(v145 + 24), *(unsigned int *)(v145 + 48));
  v149 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = v145;
  if (v149)
    std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](v149);
  AUDenoise::InitializePMWFClasses((AUDenoise *)a1);
  v150 = (AUDebugFeature *)std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v4, 0);
  *(_BYTE *)(a1 + 656) = AUDebugFeature::IsNonFiniteHandlingEnabled(v150);
  return a1;
}

void sub_1B61F34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  ausdk::AUBase *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v21 = *(_QWORD *)(v19 + 64);
  *(_QWORD *)(v19 + 64) = 0;
  if (v21)
    MEMORY[0x1BCC95CEC](v21, 0x60C4044C4A2DFLL);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  MEMORY[0x1BCC95CEC](v19, 0x1020C40A98CFEF5);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v18, 0);
  v22 = (void *)*((_QWORD *)v16 + 153);
  if (v22)
  {
    *((_QWORD *)v16 + 154) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)v16 + 150);
  if (v23)
  {
    *((_QWORD *)v16 + 151) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)v16 + 147);
  if (v24)
  {
    *((_QWORD *)v16 + 148) = v24;
    operator delete(v24);
  }
  v25 = *((_QWORD *)v16 + 146);
  *((_QWORD *)v16 + 146) = 0;
  if (v25)
    std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](v25);
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((_QWORD *)v16 + 145, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((_QWORD *)v16 + 144, 0);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](v17, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase(v16);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  unint64_t i;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  uint64_t v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  uint64_t v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  uint64_t v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t Element;
  unsigned int j;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  AUDebugFeature *v87;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 2);
  *(_QWORD *)v3 = &off_1E69D0C10;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0DC0;
  *((_OWORD *)v3 + 34) = xmmword_1B66A0DC0;
  *((_BYTE *)v3 + 560) = 0;
  *((_QWORD *)v3 + 71) = 0;
  *((_DWORD *)v3 + 144) = 0;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *((_DWORD *)v3 + 154) = 512;
  *((_QWORD *)v3 + 78) = 0x40E5888000000000;
  *((_DWORD *)v3 + 158) = 3;
  *((_BYTE *)v3 + 656) = 1;
  v4 = (uint64_t *)((char *)v3 + 1072);
  *(_OWORD *)((char *)v3 + 1048) = 0u;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v5 = 0;
  *(_QWORD *)(a1 + 664) = 0x500000001;
  *(_QWORD *)(a1 + 684) = 0xC2700000C2700000;
  *(_DWORD *)(a1 + 660) = 1;
  *(_QWORD *)(a1 + 672) = 0x412000003FCA3D71;
  *(_WORD *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 1012) = 1;
  *(_QWORD *)(a1 + 1016) = 0x45DAC00042480000;
  *(_DWORD *)(a1 + 1024) = 0;
  v6 = 692;
  *(_OWORD *)(a1 + 1028) = xmmword_1B66A10A0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 608);
    if (v7)
      LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    else
      v8 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (v5 >= v8)
      break;
    v9 = a1 + v6;
    ++v5;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    v6 += 20;
  }
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 0, 1.0, 0);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 1u, 1.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 2u, 5.0, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 3u, 1.58, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 4u, 10.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 5u, 0.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 6u, 0.0, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 7u, -60.0, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 8u, -60.0, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 0xEu, 1.0, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 0xFu, 50.0, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0x10u, 7000.0, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0x11u, 0.0, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0x12u, -70.0, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0x13u, 0.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0x14u, 0.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0x15u, 0.0, 0);
  for (i = 0; ; ++i)
  {
    v62 = *(_QWORD *)(a1 + 608);
    if (v62)
      LODWORD(v63) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
    else
      v63 = (*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3;
    if (i >= v63)
      break;
    v64 = *(_QWORD *)(a1 + 608);
    if (v64)
    {
      v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 32))(v64, i);
    }
    else
    {
      v66 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v66) >> 3)
        v65 = 0;
      else
        v65 = *(ausdk::AUElement **)(v66 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v65, 9u, 0.0, 0);
    v67 = *(_QWORD *)(a1 + 608);
    if (v67)
    {
      v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 32))(v67, i);
    }
    else
    {
      v69 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v69) >> 3)
        v68 = 0;
      else
        v68 = *(ausdk::AUElement **)(v69 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v68, 0xAu, 0.0, 0);
    v70 = *(_QWORD *)(a1 + 608);
    if (v70)
    {
      v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 32))(v70, i);
    }
    else
    {
      v72 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v72) >> 3)
        v71 = 0;
      else
        v71 = *(ausdk::AUElement **)(v72 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v71, 0xBu, 0.0, 0);
    v73 = *(_QWORD *)(a1 + 608);
    if (v73)
    {
      v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 32))(v73, i);
    }
    else
    {
      v75 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v75) >> 3)
        v74 = 0;
      else
        v74 = *(ausdk::AUElement **)(v75 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v74, 0xCu, 0.0, 0);
    v76 = *(_QWORD *)(a1 + 608);
    if (v76)
    {
      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 32))(v76, i);
    }
    else
    {
      v78 = *(_QWORD *)(a1 + 584);
      if (i >= (*(_QWORD *)(a1 + 592) - v78) >> 3)
        v77 = 0;
      else
        v77 = *(ausdk::AUElement **)(v78 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v77, 0xDu, 0.0, 0);
  }
  v79 = 0;
  *(_QWORD *)(a1 + 624) = 0x40E5888000000000;
  v92 = 0x40E5888000000000;
  v93 = xmmword_1B66A0BD0;
  v94 = xmmword_1B66A0DD0;
  v89 = 0x40E5888000000000;
  v91 = xmmword_1B66A0DD0;
  v90 = xmmword_1B66A0BD0;
  while (1)
  {
    v80 = *(_QWORD *)(a1 + 120);
    if (v80)
      LODWORD(v81) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
    else
      v81 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v79 >= v81)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v79);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v92);
    ++v79;
  }
  for (j = 0; ; ++j)
  {
    v84 = *(_QWORD *)(a1 + 168);
    if (v84)
      LODWORD(v85) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
    else
      v85 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (j >= v85)
      break;
    v86 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v86 + 56))(v86, &v89);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 512);
  *(_BYTE *)(a1 + 376) = 1;
  AUDereverb::InitializeMCLPClasses((AUDereverb *)a1);
  v87 = (AUDebugFeature *)std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v4, 0);
  *(_BYTE *)(a1 + 656) = AUDebugFeature::IsNonFiniteHandlingEnabled(v87);
  return a1;
}

void sub_1B61F3EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100](v2 + 133, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100](v2 + 132, 0);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](v3, 0);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t Element;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 584) = 0;
  *(_QWORD *)v3 = &off_1E69D0888;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v7 = 0x40E5888000000000;
  v8 = xmmword_1B6626900;
  v9 = xmmword_1B66A0830;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v7);
  v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v7);
  return a1;
}

void sub_1B61F4014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  const void *v12;
  const void *v13;
  void *v14;

  v12 = *(const void **)(v10 + 624);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(v10 + 616);
  if (v13)
    CFRelease(v13);
  v14 = *(void **)(v10 + 592);
  if (v14)
  {
    *(_QWORD *)(v10 + 600) = v14;
    operator delete(v14);
  }
  *(_QWORD *)v10 = &off_1E69ED840;
  a10 = (void **)(v10 + 528);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  unsigned int v16;
  ausdk::AUElement *v17;
  ausdk::AUElement *v18;
  ausdk::AUElement *v19;
  ausdk::AUElement *v20;
  ausdk::AUElement *v21;
  ausdk::AUElement *v22;
  ausdk::AUElement *v23;
  ausdk::AUElement *v24;
  ausdk::AUElement *v25;
  ausdk::AUElement *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69D2148;
  *((_BYTE *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *((_QWORD *)v3 + 79) = 1148846080;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 1);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), CFSTR("Mic 1 EC LEE"));
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, 5);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), CFSTR("Mic 4 EC LEE"));
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, 5);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v10 + 72), CFSTR("EC LEE Output"));
  v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, 5);
  *(_BYTE *)(a1 + 376) = 1;
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0, 0.0, 0);
  v15 = 0;
  *(_QWORD *)&v37[0] = 0x100000000;
  do
  {
    v16 = *(_DWORD *)((char *)v37 + v15);
    v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v17, 0, 0.0, 0);
    v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v18, 1u, 0.0, 0);
    v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v19, 2u, 0.0, 0);
    v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v20, 3u, 0.0, 0);
    v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v21, 4u, 0.0, 0);
    v15 += 4;
  }
  while (v15 != 8);
  v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v22, 0, 0.0, 0);
  v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v23, 1u, 0.0, 0);
  v24 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v24, 2u, 0.0, 0);
  v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v25, 3u, 0.0, 0);
  v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v26, 4u, 0.0, 0);
  v27 = 0;
  v37[0] = xmmword_1B664E050;
  v37[1] = unk_1B664E060;
  v38 = 64;
  while (1)
  {
    v28 = *(_QWORD *)(a1 + 120);
    if (v28)
      LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    else
      v29 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v27 >= v29)
      break;
    v30 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v27);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v30 + 56))(v30, v37);
    ++v27;
  }
  for (i = 0; ; ++i)
  {
    v32 = *(_QWORD *)(a1 + 168);
    if (v32)
      LODWORD(v33) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    else
      v33 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v33)
      break;
    v34 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v34 + 56))(v34, v37);
  }
  if (getAUMixSwitchNFLog(void)::onceToken != -1)
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
  v35 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(v37[0]) = 134217984;
    *(_QWORD *)((char *)v37 + 4) = a1;
    _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_INFO, "[%p] created", (uint8_t *)v37, 0xCu);
  }
  return a1;
}

void sub_1B61F44D0(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = (void *)*((_QWORD *)v1 + 76);
  if (v4)
  {
    *((_QWORD *)v1 + 77) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)v1 + 73);
  if (v5)
  {
    *((_QWORD *)v1 + 74) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 70);
  if (v6)
  {
    *((_QWORD *)v1 + 71) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 68) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  unsigned int v16;
  ausdk::AUElement *v17;
  ausdk::AUElement *v18;
  ausdk::AUElement *v19;
  ausdk::AUElement *v20;
  ausdk::AUElement *v21;
  ausdk::AUElement *v22;
  ausdk::AUElement *v23;
  ausdk::AUElement *v24;
  ausdk::AUElement *v25;
  ausdk::AUElement *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69C5B08;
  *((_BYTE *)v3 + 528) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_QWORD *)v3 + 73) = 1148846080;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 1);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), CFSTR("Front mic EC LEE"));
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, 5);
  v8 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), CFSTR("Back mic EC LEE"));
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 1u);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, 5);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v10 + 72), CFSTR("EC LEE Output"));
  v11 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, 5);
  *(_BYTE *)(a1 + 376) = 1;
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0, 0.0, 0);
  v15 = 0;
  *(_QWORD *)&v37[0] = 0x100000000;
  do
  {
    v16 = *(_DWORD *)((char *)v37 + v15);
    v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v17, 0, 0.0, 0);
    v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v18, 1u, 0.0, 0);
    v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v19, 2u, 0.0, 0);
    v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v20, 3u, 0.0, 0);
    v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v16);
    ausdk::AUElement::SetParameter(v21, 4u, 0.0, 0);
    v15 += 4;
  }
  while (v15 != 8);
  v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v22, 0, 0.0, 0);
  v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v23, 1u, 0.0, 0);
  v24 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v24, 2u, 0.0, 0);
  v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v25, 3u, 0.0, 0);
  v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  ausdk::AUElement::SetParameter(v26, 4u, 0.0, 0);
  v27 = 0;
  v37[0] = xmmword_1B664E050;
  v37[1] = unk_1B664E060;
  v38 = 64;
  while (1)
  {
    v28 = *(_QWORD *)(a1 + 120);
    if (v28)
      LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    else
      v29 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v27 >= v29)
      break;
    v30 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v27);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v30 + 56))(v30, v37);
    ++v27;
  }
  for (i = 0; ; ++i)
  {
    v32 = *(_QWORD *)(a1 + 168);
    if (v32)
      LODWORD(v33) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    else
      v33 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v33)
      break;
    v34 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v34 + 56))(v34, v37);
  }
  if (getAUMixSwitchLog(void)::onceToken != -1)
    dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_96);
  v35 = getAUMixSwitchLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(v37[0]) = 134217984;
    *(_QWORD *)((char *)v37 + 4) = a1;
    _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_INFO, "[%p] created", (uint8_t *)v37, 0xCu);
  }
  return a1;
}

void sub_1B61F4980(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)*((_QWORD *)v1 + 70);
  if (v4)
  {
    *((_QWORD *)v1 + 71) = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 68) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t Element;
  unsigned int i;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  __int128 v97;
  __int128 v98;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 5, 2);
  *(_QWORD *)v3 = &off_1E69DF998;
  *((_QWORD *)v3 + 66) = 1;
  *((_BYTE *)v3 + 536) = 0;
  *((_DWORD *)v3 + 135) = 0;
  *((_QWORD *)v3 + 68) = 0x48400000000;
  *((_QWORD *)v3 + 69) = 0x40E5888000000000;
  *((_DWORD *)v3 + 140) = 0;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  *(_OWORD *)((char *)v3 + 600) = 0u;
  *(_OWORD *)((char *)v3 + 616) = 0u;
  *(_OWORD *)((char *)v3 + 632) = 0u;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_DWORD *)v3 + 176) = 0;
  *((_DWORD *)v3 + 178) = 0;
  *(_QWORD *)((char *)v3 + 716) = 0;
  *((_DWORD *)v3 + 166) = 0;
  *((_QWORD *)v3 + 153) = 0;
  *(_OWORD *)((char *)v3 + 1192) = 0u;
  *(_OWORD *)((char *)v3 + 1208) = 0u;
  *(_OWORD *)((char *)v3 + 1160) = 0u;
  *(_OWORD *)((char *)v3 + 1176) = 0u;
  *(_OWORD *)((char *)v3 + 1128) = 0u;
  *(_OWORD *)((char *)v3 + 1144) = 0u;
  *(_OWORD *)((char *)v3 + 1096) = 0u;
  *(_OWORD *)((char *)v3 + 1112) = 0u;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  *(_OWORD *)((char *)v3 + 1080) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  *(_OWORD *)((char *)v3 + 1048) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 968) = 0u;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *(_OWORD *)((char *)v3 + 952) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 27);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 2u, 0.0, 0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 1u, 0.0, 0);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0, 1.0, 0);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 3u, 0.0, 0);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 4u, 1.0, 0);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 5u, 4.0, 0);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 6u, 7.0, 0);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 7u, 4.0, 0);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 8u, 60.0, 0);
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 9u, 75.0, 0);
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 0xAu, 60.0, 0);
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 0xBu, 0.0, 0);
  v42 = *(_QWORD *)(a1 + 72);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 0xCu, 1.0, 0);
  v45 = *(_QWORD *)(a1 + 72);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  ausdk::AUElement::SetParameter(v46, 0xDu, 0.84, 0);
  v48 = *(_QWORD *)(a1 + 72);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 0xEu, -0.13, 0);
  v51 = *(_QWORD *)(a1 + 72);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  ausdk::AUElement::SetParameter(v52, 0xFu, 160.0, 0);
  v54 = *(_QWORD *)(a1 + 72);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  ausdk::AUElement::SetParameter(v55, 0x10u, 800.0, 0);
  v57 = *(_QWORD *)(a1 + 72);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  ausdk::AUElement::SetParameter(v58, 0x11u, 0.0, 0);
  v60 = *(_QWORD *)(a1 + 72);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  ausdk::AUElement::SetParameter(v61, 0x12u, 0.0, 0);
  v63 = *(_QWORD *)(a1 + 72);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  ausdk::AUElement::SetParameter(v64, 0x13u, 0.0, 0);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  ausdk::AUElement::SetParameter(v67, 0x14u, 0.0, 0);
  v69 = *(_QWORD *)(a1 + 72);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0x15u, 0.1, 0);
  v72 = *(_QWORD *)(a1 + 72);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  ausdk::AUElement::SetParameter(v73, 0x16u, 0.5, 0);
  v75 = *(_QWORD *)(a1 + 72);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  ausdk::AUElement::SetParameter(v76, 0x17u, 0.0, 0);
  v78 = *(_QWORD *)(a1 + 72);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  ausdk::AUElement::SetParameter(v79, 0x18u, 0.0, 0);
  v81 = *(_QWORD *)(a1 + 72);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  ausdk::AUElement::SetParameter(v82, 0x19u, 0.0, 0);
  v84 = *(_QWORD *)(a1 + 72);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  ausdk::AUElement::SetParameter(v85, 0x1Au, 5.0, 0);
  *(_OWORD *)(a1 + 1232) = xmmword_1B66A0DC0;
  *(_DWORD *)(a1 + 1248) = 1;
  *(_OWORD *)(a1 + 1252) = xmmword_1B66A10B0;
  *(_DWORD *)(a1 + 1268) = 1117126656;
  *(_QWORD *)(a1 + 1272) = 1114636288;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1284) = 1065353216;
  *(_QWORD *)(a1 + 1288) = 0xBE051EB83F570A3DLL;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1308) = 0u;
  *(_OWORD *)(a1 + 1324) = 0u;
  *(_DWORD *)(a1 + 1340) = 5;
  (*(void (**)(uint64_t, uint64_t, void (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(_QWORD *)a1 + 112))(a1, 2, AUBeamNFSelector::SampleRateChangedCallback, a1);
  (*(void (**)(uint64_t, uint64_t, void (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(_QWORD *)a1 + 112))(a1, 8, AUBeamNFSelector::SampleRateChangedCallback, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(AUBeamNFSelector *, AudioUnit, OpaqueAudioComponentInstance *, AudioUnitScope, AudioUnitElement), uint64_t))(*(_QWORD *)a1 + 112))(a1, 14, AUBeamNFSelector::BlockSizeChangedCallback, a1);
  v87 = 0;
  *(_BYTE *)(a1 + 376) = 1;
  v96 = 0x40E5888000000000;
  v97 = xmmword_1B66A0BD0;
  v98 = xmmword_1B66A0BE0;
  while (1)
  {
    v88 = *(_QWORD *)(a1 + 120);
    if (v88)
      LODWORD(v89) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
    else
      v89 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (v87 >= v89)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), v87);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v96);
    ++v87;
  }
  for (i = 0; ; ++i)
  {
    v92 = *(_QWORD *)(a1 + 168);
    if (v92)
      LODWORD(v93) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
    else
      v93 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (i >= v93)
      break;
    v94 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), i);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v94 + 56))(v94, &v96);
  }
  return a1;
}

void sub_1B61F53F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v5 = *(void **)(v1 + 1208);
  if (v5)
  {
    *(_QWORD *)(v1 + 1216) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 + 1184);
  if (v6)
  {
    *(_QWORD *)(v1 + 1192) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 + 1160);
  if (v7)
  {
    *(_QWORD *)(v1 + 1168) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v1 + 1136);
  if (v8)
  {
    *(_QWORD *)(v1 + 1144) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v1 + 1112);
  if (v9)
  {
    *(_QWORD *)(v1 + 1120) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(v1 + 1088);
  if (v10)
  {
    *(_QWORD *)(v1 + 1096) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v1 + 1064);
  if (v11)
  {
    *(_QWORD *)(v1 + 1072) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v1 + 1040);
  if (v12)
  {
    *(_QWORD *)(v1 + 1048) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v1 + 1016);
  if (v13)
  {
    *(_QWORD *)(v1 + 1024) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v1 + 992);
  if (v14)
  {
    *(_QWORD *)(v1 + 1000) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v1 + 968);
  if (v15)
  {
    *(_QWORD *)(v1 + 976) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v1 + 944);
  if (v16)
  {
    *(_QWORD *)(v1 + 952) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v1 + 920);
  if (v17)
  {
    *(_QWORD *)(v1 + 928) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v1 + 896);
  if (v18)
  {
    *(_QWORD *)(v1 + 904) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v1 + 872);
  if (v19)
  {
    *(_QWORD *)(v1 + 880) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v1 + 848);
  if (v20)
  {
    *(_QWORD *)(v1 + 856) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v1 + 824);
  if (v21)
  {
    *(_QWORD *)(v1 + 832) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v1 + 800);
  if (v22)
  {
    *(_QWORD *)(v1 + 808) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v1 + 776);
  if (v23)
  {
    *(_QWORD *)(v1 + 784) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v1 + 752);
  if (v24)
  {
    *(_QWORD *)(v1 + 760) = v24;
    operator delete(v24);
  }
  v25 = (void **)(v1 + 672);
  v26 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 736) = v26;
    operator delete(v26);
  }
  v27 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v1 + 680) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v1 + 632);
  if (v28)
  {
    *(_QWORD *)(v1 + 640) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v1 + 608);
  if (v29)
  {
    *(_QWORD *)(v1 + 616) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v1 + 584);
  if (v30)
  {
    *(_QWORD *)(v1 + 592) = v30;
    operator delete(v30);
  }
  if (*v2)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, *v2);
    *v2 = 0;
  }
  *(_QWORD *)(v1 + 576) = 0;
  *(_DWORD *)(v1 + 560) = 0;
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  const __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  __int32 v15;
  NSObject *v16;
  int v17;
  __n128 v18;
  int v19;
  int v20;
  unsigned int i;
  uint64_t v22;
  uint64_t v23;
  uint64_t Element;
  unsigned int j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  uint64_t v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  uint64_t v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  uint64_t v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  uint64_t v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  uint64_t v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  uint64_t v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  uint64_t v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  uint64_t v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  uint64_t v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  uint64_t v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  uint64_t v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  uint64_t v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  uint64_t v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  uint64_t v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  uint64_t v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  uint64_t v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  uint64_t v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  uint64_t v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  uint64_t v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  ausdk::AUElement **v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  uint64_t v185;
  ausdk::AUElement *v186;
  uint64_t v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  ausdk::AUElement **v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  uint64_t v193;
  uint64_t v194;
  ausdk::AUElement *v195;
  ausdk::AUElement **v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  ausdk::AUElement **v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  uint64_t v205;
  uint64_t v206;
  ausdk::AUElement *v207;
  ausdk::AUElement **v208;
  uint64_t v209;
  ausdk::AUElement *v210;
  uint64_t v211;
  uint64_t v212;
  ausdk::AUElement *v213;
  ausdk::AUElement **v214;
  uint64_t v215;
  ausdk::AUElement *v216;
  uint64_t v217;
  uint64_t v218;
  ausdk::AUElement *v219;
  ausdk::AUElement **v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  uint64_t v223;
  uint64_t v224;
  ausdk::AUElement *v225;
  ausdk::AUElement **v226;
  uint64_t v227;
  ausdk::AUElement *v228;
  uint64_t v229;
  uint64_t v230;
  ausdk::AUElement *v231;
  ausdk::AUElement **v232;
  uint64_t v233;
  ausdk::AUElement *v234;
  uint64_t v235;
  uint64_t v236;
  ausdk::AUElement *v237;
  ausdk::AUElement **v238;
  uint64_t v239;
  ausdk::AUElement *v240;
  uint64_t v241;
  uint64_t v242;
  ausdk::AUElement *v243;
  ausdk::AUElement **v244;
  uint64_t v245;
  ausdk::AUElement *v246;
  uint64_t v247;
  uint64_t v248;
  ausdk::AUElement *v249;
  ausdk::AUElement **v250;
  uint64_t v251;
  ausdk::AUElement *v252;
  uint64_t v253;
  uint64_t v254;
  ausdk::AUElement *v255;
  ausdk::AUElement **v256;
  uint64_t v257;
  ausdk::AUElement *v258;
  uint64_t v259;
  uint64_t v260;
  ausdk::AUElement *v261;
  ausdk::AUElement **v262;
  uint64_t v263;
  ausdk::AUElement *v264;
  uint64_t v265;
  uint64_t v266;
  ausdk::AUElement *v267;
  ausdk::AUElement **v268;
  uint64_t v269;
  ausdk::AUElement *v270;
  uint64_t v271;
  uint64_t v272;
  ausdk::AUElement *v273;
  ausdk::AUElement **v274;
  uint64_t v275;
  ausdk::AUElement *v276;
  uint64_t v277;
  __int32 v279;
  unsigned __int32 v280;
  char v281;
  __int32 v282;
  char v283;
  unsigned __int32 v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  _BYTE buf[20];
  unsigned __int32 *v298;
  _BYTE v299[12];
  unsigned __int32 *v300;
  uint64_t v301;

  v301 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 2);
  *(_QWORD *)v3 = &off_1E69D1E70;
  *((_QWORD *)v3 + 66) = 0x200000000;
  *((_BYTE *)v3 + 536) = 0;
  *((_BYTE *)v3 + 540) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_BYTE *)v3 + 552) = 1;
  *((_QWORD *)v3 + 70) = 0;
  *((_QWORD *)v3 + 72) = 0;
  *((_QWORD *)v3 + 71) = 0;
  *((_DWORD *)v3 + 146) = 0;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *(_OWORD *)((char *)v3 + 620) = 0u;
  v286 = 0;
  v287 = 0;
  v288 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)&v286, *((OpaqueAudioComponentInstance **)v3 + 1));
  *(_BYTE *)(a1 + 636) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_random_input"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 636) = 1;
  *(_BYTE *)(a1 + 637) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_dump_diffr"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 637) = 1;
  *(_BYTE *)(a1 + 638) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_dump_eq"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 638) = 1;
  *(_BYTE *)(a1 + 639) = 0;
  v4 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("beam2_custom_diffr_path"), CFSTR("com.apple.coreaudio"));
  v5 = v4;
  if (v4)
  {
    CFStringGetCString(v4, (char *)(a1 + 640), 1024, 0x600u);
    CFRelease(v5);
    *(_BYTE *)(a1 + 639) = 1;
  }
  *(_BYTE *)(a1 + 1664) = 0;
  v6 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("beam2_custom_eq_path"), CFSTR("com.apple.coreaudio"));
  v9 = v6;
  if (v6)
  {
    CFStringGetCString(v6, (char *)(a1 + 1665), 1024, 0x600u);
    CFRelease(v9);
    *(_BYTE *)(a1 + 1664) = 1;
  }
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope
    && (*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0
    && (v10 = *(NSObject **)AUBeamNFLogScope(void)::scope) != 0
    && os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 222;
    *(_WORD *)&buf[18] = 2048;
    v298 = (unsigned __int32 *)a1;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::AUBeamNF (%p)", buf, 0x1Cu);
    v11 = AUBeamNFLogScope(void)::once;
  }
  else
  {
    v11 = -1;
  }
  v8.i32[0] = HIDWORD(v286);
  v7.i32[0] = v286;
  v12 = (int16x8_t)vmovl_u8(v7);
  *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
  v284 = vmovn_s16(v12).u32[0];
  v285 = 0;
  v13 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
  *(int8x8_t *)v13.i8 = vmovn_s16(v13);
  v282 = v13.i32[0];
  v283 = 0;
  v13.i32[0] = v287;
  v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
  *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
  v280 = vmovn_s16(v14).u32[0];
  v281 = 0;
  if (v11 != -1)
  {
    v279 = HIDWORD(v286);
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    v8.i32[0] = v279;
  }
  v15 = v8.i32[0];
  if (AUBeamNFLogScope(void)::scope)
  {
    v16 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_27;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 227;
    *(_WORD *)&buf[18] = 2080;
    v298 = &v284;
    *(_WORD *)v299 = 2080;
    *(_QWORD *)&v299[2] = &v282;
    *(_WORD *)&v299[10] = 2080;
    v300 = &v280;
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Component info: %s %s %s", buf, 0x30u);
  }
LABEL_27:
  if (v15 == 1650814258)
  {
    *(_BYTE *)(a1 + 552) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_BYTE *)(a1 + 376) = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 240);
  }
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v17 = *(unsigned __int8 *)(a1 + 552);
  *(_QWORD *)buf = 0x40E5888000000000;
  v18.n128_u64[0] = 0x296C70636DLL;
  if (v17)
    v19 = 4;
  else
    v19 = 8;
  *(_QWORD *)&buf[8] = 0x296C70636DLL;
  if (v17)
    v20 = 32;
  else
    v20 = 64;
  *(_DWORD *)&buf[16] = v19;
  LODWORD(v298) = 1;
  HIDWORD(v298) = v19;
  *(_DWORD *)v299 = 2;
  *(_DWORD *)&v299[4] = v20;
  *(_DWORD *)&v299[8] = 0;
  v289 = 0x40E5888000000000;
  v290 = 0x296C70636DLL;
  v291 = v19;
  v292 = 1;
  v293 = v19;
  v294 = 1;
  v295 = v20;
  v296 = 0;
  if (!v17)
  {
    LODWORD(v290) = 1718773105;
    *(_DWORD *)&buf[8] = 1718773105;
  }
  for (i = 0; ; ++i)
  {
    v22 = *(_QWORD *)(a1 + 120);
    if (v22)
      LODWORD(v23) = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 24))(v22, v18);
    else
      v23 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (i >= v23)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), i);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
  }
  for (j = 0; ; ++j)
  {
    v26 = *(_QWORD *)(a1 + 168);
    if (v26)
      LODWORD(v27) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    else
      v27 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (j >= v27)
      break;
    v28 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 56))(v28, &v289);
  }
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 0, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 0x20u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 616);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 1u, 1.0, 0);
  v38 = *(_QWORD *)(a1 + 616);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, 1);
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v40) < 9)
      v39 = 0;
    else
      v39 = *(ausdk::AUElement **)(v40 + 8);
  }
  ausdk::AUElement::SetParameter(v39, 1u, 1.0, 0);
  v41 = *(_QWORD *)(a1 + 616);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 2u, 1.0, 0);
  v44 = *(_QWORD *)(a1 + 616);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, 1);
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v46) < 9)
      v45 = 0;
    else
      v45 = *(ausdk::AUElement **)(v46 + 8);
  }
  ausdk::AUElement::SetParameter(v45, 2u, 1.0, 0);
  v47 = *(_QWORD *)(a1 + 616);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 3u, 0.0, 0);
  v50 = *(_QWORD *)(a1 + 616);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, 1);
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v52) < 9)
      v51 = 0;
    else
      v51 = *(ausdk::AUElement **)(v52 + 8);
  }
  ausdk::AUElement::SetParameter(v51, 3u, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 616);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x2Au, 1.0, 0);
  v56 = *(_QWORD *)(a1 + 616);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 32))(v56, 1);
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v58) < 9)
      v57 = 0;
    else
      v57 = *(ausdk::AUElement **)(v58 + 8);
  }
  ausdk::AUElement::SetParameter(v57, 0x2Au, 1.0, 0);
  v59 = *(_QWORD *)(a1 + 616);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 4u, 0.0, 0);
  v62 = *(_QWORD *)(a1 + 616);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(v62, 1);
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v64) < 9)
      v63 = 0;
    else
      v63 = *(ausdk::AUElement **)(v64 + 8);
  }
  ausdk::AUElement::SetParameter(v63, 4u, 0.0, 0);
  if (*(_BYTE *)(a1 + 552))
  {
    v65 = *(_QWORD *)(a1 + 616);
    if (v65)
    {
      v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
    }
    else
    {
      v67 = *(ausdk::AUElement ***)(a1 + 592);
      if (*(ausdk::AUElement ***)(a1 + 600) == v67)
        v66 = 0;
      else
        v66 = *v67;
    }
    ausdk::AUElement::SetParameter(v66, 5u, 0.0, 0);
    v68 = *(_QWORD *)(a1 + 616);
    if (v68)
    {
      v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 32))(v68, 1);
    }
    else
    {
      v70 = *(_QWORD *)(a1 + 592);
      if ((unint64_t)(*(_QWORD *)(a1 + 600) - v70) < 9)
        v69 = 0;
      else
        v69 = *(ausdk::AUElement **)(v70 + 8);
    }
    ausdk::AUElement::SetParameter(v69, 5u, 0.0, 0);
    v71 = *(_QWORD *)(a1 + 616);
    if (v71)
    {
      v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
    }
    else
    {
      v73 = *(ausdk::AUElement ***)(a1 + 592);
      if (*(ausdk::AUElement ***)(a1 + 600) == v73)
        v72 = 0;
      else
        v72 = *v73;
    }
    ausdk::AUElement::SetParameter(v72, 6u, 0.5, 0);
    v74 = *(_QWORD *)(a1 + 616);
    if (v74)
    {
      v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 32))(v74, 1);
    }
    else
    {
      v76 = *(_QWORD *)(a1 + 592);
      if ((unint64_t)(*(_QWORD *)(a1 + 600) - v76) < 9)
        v75 = 0;
      else
        v75 = *(ausdk::AUElement **)(v76 + 8);
    }
    ausdk::AUElement::SetParameter(v75, 6u, 0.5, 0);
    v77 = *(_QWORD *)(a1 + 616);
    if (v77)
    {
      v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
    }
    else
    {
      v79 = *(ausdk::AUElement ***)(a1 + 592);
      if (*(ausdk::AUElement ***)(a1 + 600) == v79)
        v78 = 0;
      else
        v78 = *v79;
    }
    ausdk::AUElement::SetParameter(v78, 0x29u, 1.0, 0);
    v80 = *(_QWORD *)(a1 + 616);
    if (v80)
    {
      v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 32))(v80, 1);
    }
    else
    {
      v82 = *(_QWORD *)(a1 + 592);
      if ((unint64_t)(*(_QWORD *)(a1 + 600) - v82) < 9)
        v81 = 0;
      else
        v81 = *(ausdk::AUElement **)(v82 + 8);
    }
    ausdk::AUElement::SetParameter(v81, 0x29u, 1.0, 0);
  }
  v83 = *(_QWORD *)(a1 + 616);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 7u, 0.0, 0);
  v86 = *(_QWORD *)(a1 + 616);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 32))(v86, 1);
  }
  else
  {
    v88 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v88) < 9)
      v87 = 0;
    else
      v87 = *(ausdk::AUElement **)(v88 + 8);
  }
  ausdk::AUElement::SetParameter(v87, 7u, 0.0, 0);
  v89 = *(_QWORD *)(a1 + 616);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 8u, 0.5, 0);
  v92 = *(_QWORD *)(a1 + 616);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 32))(v92, 1);
  }
  else
  {
    v94 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v94) < 9)
      v93 = 0;
    else
      v93 = *(ausdk::AUElement **)(v94 + 8);
  }
  ausdk::AUElement::SetParameter(v93, 8u, 0.5, 0);
  v95 = *(_QWORD *)(a1 + 616);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 9u, -100.0, 0);
  v98 = *(_QWORD *)(a1 + 616);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 32))(v98, 1);
  }
  else
  {
    v100 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v100) < 9)
      v99 = 0;
    else
      v99 = *(ausdk::AUElement **)(v100 + 8);
  }
  ausdk::AUElement::SetParameter(v99, 9u, -100.0, 0);
  v101 = *(_QWORD *)(a1 + 616);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0xAu, 0.0, 0);
  v104 = *(_QWORD *)(a1 + 616);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 32))(v104, 1);
  }
  else
  {
    v106 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v106) < 9)
      v105 = 0;
    else
      v105 = *(ausdk::AUElement **)(v106 + 8);
  }
  ausdk::AUElement::SetParameter(v105, 0xAu, 0.0, 0);
  v107 = *(_QWORD *)(a1 + 616);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0xBu, 24000.0, 0);
  v110 = *(_QWORD *)(a1 + 616);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 32))(v110, 1);
  }
  else
  {
    v112 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v112) < 9)
      v111 = 0;
    else
      v111 = *(ausdk::AUElement **)(v112 + 8);
  }
  ausdk::AUElement::SetParameter(v111, 0xBu, 24000.0, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0xCu, 26.0, 0);
  v116 = *(_QWORD *)(a1 + 616);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0xDu, 1.0, 0);
  v119 = *(_QWORD *)(a1 + 616);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 32))(v119, 1);
  }
  else
  {
    v121 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v121) < 9)
      v120 = 0;
    else
      v120 = *(ausdk::AUElement **)(v121 + 8);
  }
  ausdk::AUElement::SetParameter(v120, 0xDu, 1.0, 0);
  v122 = *(_QWORD *)(a1 + 616);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0xEu, 5.0, 0);
  v125 = *(_QWORD *)(a1 + 616);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 32))(v125, 1);
  }
  else
  {
    v127 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v127) < 9)
      v126 = 0;
    else
      v126 = *(ausdk::AUElement **)(v127 + 8);
  }
  ausdk::AUElement::SetParameter(v126, 0xEu, 5.0, 0);
  v128 = *(_QWORD *)(a1 + 616);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0xFu, 26.0, 0);
  v131 = *(_QWORD *)(a1 + 616);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 32))(v131, 1);
  }
  else
  {
    v133 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v133) < 9)
      v132 = 0;
    else
      v132 = *(ausdk::AUElement **)(v133 + 8);
  }
  ausdk::AUElement::SetParameter(v132, 0xFu, 26.0, 0);
  v134 = *(_QWORD *)(a1 + 616);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x10u, 145.0, 0);
  v137 = *(_QWORD *)(a1 + 616);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 32))(v137, 1);
  }
  else
  {
    v139 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v139) < 9)
      v138 = 0;
    else
      v138 = *(ausdk::AUElement **)(v139 + 8);
  }
  ausdk::AUElement::SetParameter(v138, 0x10u, 145.0, 0);
  v140 = *(_QWORD *)(a1 + 616);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0x11u, 12.0, 0);
  v143 = *(_QWORD *)(a1 + 616);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, 1);
  }
  else
  {
    v145 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v145) < 9)
      v144 = 0;
    else
      v144 = *(ausdk::AUElement **)(v145 + 8);
  }
  ausdk::AUElement::SetParameter(v144, 0x11u, 12.0, 0);
  v146 = *(_QWORD *)(a1 + 616);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0x12u, 1.0, 0);
  v149 = *(_QWORD *)(a1 + 616);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 32))(v149, 1);
  }
  else
  {
    v151 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v151) < 9)
      v150 = 0;
    else
      v150 = *(ausdk::AUElement **)(v151 + 8);
  }
  ausdk::AUElement::SetParameter(v150, 0x12u, 1.0, 0);
  v152 = *(_QWORD *)(a1 + 616);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0x13u, 45.0, 0);
  v155 = *(_QWORD *)(a1 + 616);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 32))(v155, 1);
  }
  else
  {
    v157 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v157) < 9)
      v156 = 0;
    else
      v156 = *(ausdk::AUElement **)(v157 + 8);
  }
  ausdk::AUElement::SetParameter(v156, 0x13u, 45.0, 0);
  v158 = *(_QWORD *)(a1 + 616);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0x14u, 90.0, 0);
  v161 = *(_QWORD *)(a1 + 616);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 32))(v161, 1);
  }
  else
  {
    v163 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v163) < 9)
      v162 = 0;
    else
      v162 = *(ausdk::AUElement **)(v163 + 8);
  }
  ausdk::AUElement::SetParameter(v162, 0x14u, 90.0, 0);
  v164 = *(_QWORD *)(a1 + 616);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  ausdk::AUElement::SetParameter(v165, 0x15u, 3072.0, 0);
  v167 = *(_QWORD *)(a1 + 616);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 32))(v167, 1);
  }
  else
  {
    v169 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v169) < 9)
      v168 = 0;
    else
      v168 = *(ausdk::AUElement **)(v169 + 8);
  }
  ausdk::AUElement::SetParameter(v168, 0x15u, 3072.0, 0);
  v170 = *(_QWORD *)(a1 + 616);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x16u, 3072.0, 0);
  v173 = *(_QWORD *)(a1 + 616);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 32))(v173, 1);
  }
  else
  {
    v175 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v175) < 9)
      v174 = 0;
    else
      v174 = *(ausdk::AUElement **)(v175 + 8);
  }
  ausdk::AUElement::SetParameter(v174, 0x16u, 3072.0, 0);
  v176 = *(_QWORD *)(a1 + 616);
  if (v176)
  {
    v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 0);
  }
  else
  {
    v178 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v178)
      v177 = 0;
    else
      v177 = *v178;
  }
  ausdk::AUElement::SetParameter(v177, 0x17u, 9.3132e-13, 0);
  v179 = *(_QWORD *)(a1 + 616);
  if (v179)
  {
    v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 32))(v179, 1);
  }
  else
  {
    v181 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v181) < 9)
      v180 = 0;
    else
      v180 = *(ausdk::AUElement **)(v181 + 8);
  }
  ausdk::AUElement::SetParameter(v180, 0x17u, 9.3132e-13, 0);
  v182 = *(_QWORD *)(a1 + 616);
  if (v182)
  {
    v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
  }
  else
  {
    v184 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v184)
      v183 = 0;
    else
      v183 = *v184;
  }
  ausdk::AUElement::SetParameter(v183, 0x18u, 768.0, 0);
  v185 = *(_QWORD *)(a1 + 616);
  if (v185)
  {
    v186 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 32))(v185, 1);
  }
  else
  {
    v187 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v187) < 9)
      v186 = 0;
    else
      v186 = *(ausdk::AUElement **)(v187 + 8);
  }
  ausdk::AUElement::SetParameter(v186, 0x18u, 768.0, 0);
  v188 = *(_QWORD *)(a1 + 616);
  if (v188)
  {
    v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 0);
  }
  else
  {
    v190 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v190)
      v189 = 0;
    else
      v189 = *v190;
  }
  ausdk::AUElement::SetParameter(v189, 0x19u, -2304.0, 0);
  v191 = *(_QWORD *)(a1 + 616);
  if (v191)
  {
    v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 32))(v191, 1);
  }
  else
  {
    v193 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v193) < 9)
      v192 = 0;
    else
      v192 = *(ausdk::AUElement **)(v193 + 8);
  }
  ausdk::AUElement::SetParameter(v192, 0x19u, -2304.0, 0);
  v194 = *(_QWORD *)(a1 + 616);
  if (v194)
  {
    v195 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v194 + 32))(v194, 0);
  }
  else
  {
    v196 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v196)
      v195 = 0;
    else
      v195 = *v196;
  }
  ausdk::AUElement::SetParameter(v195, 0x1Au, -512.0, 0);
  v197 = *(_QWORD *)(a1 + 616);
  if (v197)
  {
    v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 32))(v197, 1);
  }
  else
  {
    v199 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v199) < 9)
      v198 = 0;
    else
      v198 = *(ausdk::AUElement **)(v199 + 8);
  }
  ausdk::AUElement::SetParameter(v198, 0x1Au, -512.0, 0);
  v200 = *(_QWORD *)(a1 + 616);
  if (v200)
  {
    v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v200 + 32))(v200, 0);
  }
  else
  {
    v202 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v202)
      v201 = 0;
    else
      v201 = *v202;
  }
  ausdk::AUElement::SetParameter(v201, 0x1Bu, 768.0, 0);
  v203 = *(_QWORD *)(a1 + 616);
  if (v203)
  {
    v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v203 + 32))(v203, 1);
  }
  else
  {
    v205 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v205) < 9)
      v204 = 0;
    else
      v204 = *(ausdk::AUElement **)(v205 + 8);
  }
  ausdk::AUElement::SetParameter(v204, 0x1Bu, 768.0, 0);
  v206 = *(_QWORD *)(a1 + 616);
  if (v206)
  {
    v207 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, 0);
  }
  else
  {
    v208 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v208)
      v207 = 0;
    else
      v207 = *v208;
  }
  ausdk::AUElement::SetParameter(v207, 0x1Cu, 250.0, 0);
  v209 = *(_QWORD *)(a1 + 616);
  if (v209)
  {
    v210 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 32))(v209, 1);
  }
  else
  {
    v211 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v211) < 9)
      v210 = 0;
    else
      v210 = *(ausdk::AUElement **)(v211 + 8);
  }
  ausdk::AUElement::SetParameter(v210, 0x1Cu, 250.0, 0);
  v212 = *(_QWORD *)(a1 + 616);
  if (v212)
  {
    v213 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v212 + 32))(v212, 0);
  }
  else
  {
    v214 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v214)
      v213 = 0;
    else
      v213 = *v214;
  }
  ausdk::AUElement::SetParameter(v213, 0x1Du, 1625.0, 0);
  v215 = *(_QWORD *)(a1 + 616);
  if (v215)
  {
    v216 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v215 + 32))(v215, 1);
  }
  else
  {
    v217 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v217) < 9)
      v216 = 0;
    else
      v216 = *(ausdk::AUElement **)(v217 + 8);
  }
  ausdk::AUElement::SetParameter(v216, 0x1Du, 1625.0, 0);
  v218 = *(_QWORD *)(a1 + 616);
  if (v218)
  {
    v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, 0);
  }
  else
  {
    v220 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v220)
      v219 = 0;
    else
      v219 = *v220;
  }
  ausdk::AUElement::SetParameter(v219, 0x1Eu, 800.0, 0);
  v221 = *(_QWORD *)(a1 + 616);
  if (v221)
  {
    v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v221 + 32))(v221, 1);
  }
  else
  {
    v223 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v223) < 9)
      v222 = 0;
    else
      v222 = *(ausdk::AUElement **)(v223 + 8);
  }
  ausdk::AUElement::SetParameter(v222, 0x1Eu, 800.0, 0);
  v224 = *(_QWORD *)(a1 + 616);
  if (v224)
  {
    v225 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v224 + 32))(v224, 0);
  }
  else
  {
    v226 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v226)
      v225 = 0;
    else
      v225 = *v226;
  }
  ausdk::AUElement::SetParameter(v225, 0x1Fu, 800.0, 0);
  v227 = *(_QWORD *)(a1 + 616);
  if (v227)
  {
    v228 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v227 + 32))(v227, 1);
  }
  else
  {
    v229 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v229) < 9)
      v228 = 0;
    else
      v228 = *(ausdk::AUElement **)(v229 + 8);
  }
  ausdk::AUElement::SetParameter(v228, 0x1Fu, 800.0, 0);
  v230 = *(_QWORD *)(a1 + 616);
  if (v230)
  {
    v231 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v230 + 32))(v230, 0);
  }
  else
  {
    v232 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v232)
      v231 = 0;
    else
      v231 = *v232;
  }
  ausdk::AUElement::SetParameter(v231, 0x21u, 0.0, 0);
  v233 = *(_QWORD *)(a1 + 616);
  if (v233)
  {
    v234 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v233 + 32))(v233, 1);
  }
  else
  {
    v235 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v235) < 9)
      v234 = 0;
    else
      v234 = *(ausdk::AUElement **)(v235 + 8);
  }
  ausdk::AUElement::SetParameter(v234, 0x21u, 0.0, 0);
  v236 = *(_QWORD *)(a1 + 616);
  if (v236)
  {
    v237 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v236 + 32))(v236, 0);
  }
  else
  {
    v238 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v238)
      v237 = 0;
    else
      v237 = *v238;
  }
  ausdk::AUElement::SetParameter(v237, 0x22u, 0.0, 0);
  v239 = *(_QWORD *)(a1 + 616);
  if (v239)
  {
    v240 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 32))(v239, 1);
  }
  else
  {
    v241 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v241) < 9)
      v240 = 0;
    else
      v240 = *(ausdk::AUElement **)(v241 + 8);
  }
  ausdk::AUElement::SetParameter(v240, 0x22u, 0.0, 0);
  v242 = *(_QWORD *)(a1 + 616);
  if (v242)
  {
    v243 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v242 + 32))(v242, 0);
  }
  else
  {
    v244 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v244)
      v243 = 0;
    else
      v243 = *v244;
  }
  ausdk::AUElement::SetParameter(v243, 0x23u, 2500.0, 0);
  v245 = *(_QWORD *)(a1 + 616);
  if (v245)
  {
    v246 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v245 + 32))(v245, 1);
  }
  else
  {
    v247 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v247) < 9)
      v246 = 0;
    else
      v246 = *(ausdk::AUElement **)(v247 + 8);
  }
  ausdk::AUElement::SetParameter(v246, 0x23u, 2500.0, 0);
  v248 = *(_QWORD *)(a1 + 616);
  if (v248)
  {
    v249 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v248 + 32))(v248, 0);
  }
  else
  {
    v250 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v250)
      v249 = 0;
    else
      v249 = *v250;
  }
  ausdk::AUElement::SetParameter(v249, 0x24u, 0.7, 0);
  v251 = *(_QWORD *)(a1 + 616);
  if (v251)
  {
    v252 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v251 + 32))(v251, 1);
  }
  else
  {
    v253 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v253) < 9)
      v252 = 0;
    else
      v252 = *(ausdk::AUElement **)(v253 + 8);
  }
  ausdk::AUElement::SetParameter(v252, 0x24u, 0.7, 0);
  v254 = *(_QWORD *)(a1 + 616);
  if (v254)
  {
    v255 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v254 + 32))(v254, 0);
  }
  else
  {
    v256 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v256)
      v255 = 0;
    else
      v255 = *v256;
  }
  ausdk::AUElement::SetParameter(v255, 0x25u, 0.5, 0);
  v257 = *(_QWORD *)(a1 + 616);
  if (v257)
  {
    v258 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v257 + 32))(v257, 1);
  }
  else
  {
    v259 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v259) < 9)
      v258 = 0;
    else
      v258 = *(ausdk::AUElement **)(v259 + 8);
  }
  ausdk::AUElement::SetParameter(v258, 0x25u, 0.5, 0);
  v260 = *(_QWORD *)(a1 + 616);
  if (v260)
  {
    v261 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v260 + 32))(v260, 0);
  }
  else
  {
    v262 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v262)
      v261 = 0;
    else
      v261 = *v262;
  }
  ausdk::AUElement::SetParameter(v261, 0x27u, 1.0, 0);
  v263 = *(_QWORD *)(a1 + 616);
  if (v263)
  {
    v264 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v263 + 32))(v263, 1);
  }
  else
  {
    v265 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v265) < 9)
      v264 = 0;
    else
      v264 = *(ausdk::AUElement **)(v265 + 8);
  }
  ausdk::AUElement::SetParameter(v264, 0x27u, 1.0, 0);
  v266 = *(_QWORD *)(a1 + 616);
  if (v266)
  {
    v267 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v266 + 32))(v266, 0);
  }
  else
  {
    v268 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v268)
      v267 = 0;
    else
      v267 = *v268;
  }
  ausdk::AUElement::SetParameter(v267, 0x26u, 750.0, 0);
  v269 = *(_QWORD *)(a1 + 616);
  if (v269)
  {
    v270 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 32))(v269, 1);
  }
  else
  {
    v271 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v271) < 9)
      v270 = 0;
    else
      v270 = *(ausdk::AUElement **)(v271 + 8);
  }
  ausdk::AUElement::SetParameter(v270, 0x26u, 750.0, 0);
  v272 = *(_QWORD *)(a1 + 616);
  if (v272)
  {
    v273 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v272 + 32))(v272, 0);
  }
  else
  {
    v274 = *(ausdk::AUElement ***)(a1 + 592);
    if (*(ausdk::AUElement ***)(a1 + 600) == v274)
      v273 = 0;
    else
      v273 = *v274;
  }
  ausdk::AUElement::SetParameter(v273, 0x28u, 0.0, 0);
  v275 = *(_QWORD *)(a1 + 616);
  if (v275)
  {
    v276 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v275 + 32))(v275, 1);
  }
  else
  {
    v277 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)(*(_QWORD *)(a1 + 600) - v277) < 9)
      v276 = 0;
    else
      v276 = *(ausdk::AUElement **)(v277 + 8);
  }
  ausdk::AUElement::SetParameter(v276, 0x28u, 0.0, 0);
  return a1;
}

void sub_1B61F7364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  void **v15;

  a15 = v15 + 74;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a15);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v15);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  const __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  __int32 v15;
  NSObject *v16;
  int v17;
  __n128 v18;
  int v19;
  int v20;
  unsigned int i;
  uint64_t v22;
  uint64_t v23;
  uint64_t Element;
  unsigned int j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  uint64_t v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  uint64_t v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  uint64_t v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  uint64_t v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  uint64_t v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  uint64_t v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  uint64_t v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  uint64_t v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  uint64_t v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  uint64_t v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  uint64_t v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  uint64_t v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  uint64_t v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  uint64_t v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  uint64_t v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  uint64_t v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  uint64_t v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  uint64_t v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  uint64_t v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  ausdk::AUElement **v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  uint64_t v185;
  ausdk::AUElement *v186;
  uint64_t v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  ausdk::AUElement **v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  uint64_t v193;
  uint64_t v194;
  ausdk::AUElement *v195;
  ausdk::AUElement **v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  ausdk::AUElement **v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  uint64_t v205;
  uint64_t v206;
  ausdk::AUElement *v207;
  ausdk::AUElement **v208;
  uint64_t v209;
  ausdk::AUElement *v210;
  uint64_t v211;
  uint64_t v212;
  ausdk::AUElement *v213;
  ausdk::AUElement **v214;
  uint64_t v215;
  ausdk::AUElement *v216;
  uint64_t v217;
  uint64_t v218;
  ausdk::AUElement *v219;
  ausdk::AUElement **v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  uint64_t v223;
  uint64_t v224;
  ausdk::AUElement *v225;
  ausdk::AUElement **v226;
  uint64_t v227;
  ausdk::AUElement *v228;
  uint64_t v229;
  uint64_t v230;
  ausdk::AUElement *v231;
  ausdk::AUElement **v232;
  uint64_t v233;
  ausdk::AUElement *v234;
  uint64_t v235;
  uint64_t v236;
  ausdk::AUElement *v237;
  ausdk::AUElement **v238;
  uint64_t v239;
  ausdk::AUElement *v240;
  uint64_t v241;
  uint64_t v242;
  ausdk::AUElement *v243;
  ausdk::AUElement **v244;
  uint64_t v245;
  ausdk::AUElement *v246;
  uint64_t v247;
  uint64_t v248;
  ausdk::AUElement *v249;
  ausdk::AUElement **v250;
  uint64_t v251;
  ausdk::AUElement *v252;
  uint64_t v253;
  uint64_t v254;
  ausdk::AUElement *v255;
  ausdk::AUElement **v256;
  uint64_t v257;
  ausdk::AUElement *v258;
  uint64_t v259;
  uint64_t v260;
  ausdk::AUElement *v261;
  ausdk::AUElement **v262;
  uint64_t v263;
  ausdk::AUElement *v264;
  uint64_t v265;
  uint64_t v266;
  ausdk::AUElement *v267;
  ausdk::AUElement **v268;
  uint64_t v269;
  ausdk::AUElement *v270;
  uint64_t v271;
  uint64_t v272;
  ausdk::AUElement *v273;
  ausdk::AUElement **v274;
  uint64_t v275;
  ausdk::AUElement *v276;
  uint64_t v277;
  __int32 v279;
  unsigned __int32 v280;
  char v281;
  __int32 v282;
  char v283;
  unsigned __int32 v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  _BYTE buf[20];
  unsigned __int32 *v298;
  _BYTE v299[12];
  unsigned __int32 *v300;
  uint64_t v301;

  v301 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69EAD88;
  *((_OWORD *)v3 + 33) = xmmword_1B66A0CF0;
  *((_DWORD *)v3 + 136) = 0;
  *((_WORD *)v3 + 274) = 1;
  *((_BYTE *)v3 + 632) = 0;
  *((_QWORD *)v3 + 80) = 0;
  *((_DWORD *)v3 + 162) = 0;
  *(_OWORD *)((char *)v3 + 2760) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *((_BYTE *)v3 + 568) = 0;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *(_OWORD *)((char *)v3 + 684) = 0u;
  std::unique_ptr<CmhBEAM>::reset[abi:ne180100]((uint64_t *)v3 + 69, 0);
  v286 = 0;
  v287 = 0;
  v288 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)&v286, *(OpaqueAudioComponentInstance **)(a1 + 8));
  *(_BYTE *)(a1 + 700) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_random_input"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 700) = 1;
  *(_BYTE *)(a1 + 701) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_dump_diffr"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 701) = 1;
  *(_BYTE *)(a1 + 702) = 0;
  if (CACFPreferencesGetAppIntegerValue(CFSTR("beam2_dump_eq"), CFSTR("com.apple.coreaudio"), 0))
    *(_BYTE *)(a1 + 702) = 1;
  *(_BYTE *)(a1 + 703) = 0;
  v4 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("beam2_custom_diffr_path"), CFSTR("com.apple.coreaudio"));
  v5 = v4;
  if (v4)
  {
    CFStringGetCString(v4, (char *)(a1 + 704), 1024, 0x600u);
    CFRelease(v5);
    *(_BYTE *)(a1 + 703) = 1;
  }
  *(_BYTE *)(a1 + 1728) = 0;
  v6 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("beam2_custom_eq_path"), CFSTR("com.apple.coreaudio"));
  v9 = v6;
  if (v6)
  {
    CFStringGetCString(v6, (char *)(a1 + 1729), 1024, 0x600u);
    CFRelease(v9);
    *(_BYTE *)(a1 + 1728) = 1;
  }
  if (AUBeam2LogScope(void)::once != -1)
    dispatch_once(&AUBeam2LogScope(void)::once, &__block_literal_global_22967);
  if (AUBeam2LogScope(void)::scope
    && (*(_BYTE *)(AUBeam2LogScope(void)::scope + 8) & 1) != 0
    && (v10 = *(NSObject **)AUBeam2LogScope(void)::scope) != 0
    && os_log_type_enabled(*(os_log_t *)AUBeam2LogScope(void)::scope, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUBeam2.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 227;
    *(_WORD *)&buf[18] = 2048;
    v298 = (unsigned __int32 *)a1;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeam2::AUBeam2 (%p)", buf, 0x1Cu);
    v11 = AUBeam2LogScope(void)::once;
  }
  else
  {
    v11 = -1;
  }
  v8.i32[0] = HIDWORD(v286);
  v7.i32[0] = v286;
  v12 = (int16x8_t)vmovl_u8(v7);
  *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
  v284 = vmovn_s16(v12).u32[0];
  v285 = 0;
  v13 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
  *(int8x8_t *)v13.i8 = vmovn_s16(v13);
  v282 = v13.i32[0];
  v283 = 0;
  v13.i32[0] = v287;
  v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
  *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
  v280 = vmovn_s16(v14).u32[0];
  v281 = 0;
  if (v11 != -1)
  {
    v279 = HIDWORD(v286);
    dispatch_once(&AUBeam2LogScope(void)::once, &__block_literal_global_22967);
    v8.i32[0] = v279;
  }
  v15 = v8.i32[0];
  if (AUBeam2LogScope(void)::scope)
  {
    v16 = *(NSObject **)AUBeam2LogScope(void)::scope;
    if (!*(_QWORD *)AUBeam2LogScope(void)::scope)
      goto LABEL_27;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AUBeam2.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 232;
    *(_WORD *)&buf[18] = 2080;
    v298 = &v284;
    *(_WORD *)v299 = 2080;
    *(_QWORD *)&v299[2] = &v282;
    *(_WORD *)&v299[10] = 2080;
    v300 = &v280;
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Component info: %s %s %s", buf, 0x30u);
  }
LABEL_27:
  if (v15 == 1650814258)
  {
    *(_BYTE *)(a1 + 548) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 548) = 0;
    *(_BYTE *)(a1 + 376) = 1;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 3701, 0, 0, &kAUBeam2Default_TransformSize, 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 240);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 3709, 0, 0, &kAUBeam2Default_ReverseMicChannelFlag, 4);
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v17 = *(unsigned __int8 *)(a1 + 548);
  *(_QWORD *)buf = 0x40E5888000000000;
  v18.n128_u64[0] = 0x296C70636DLL;
  if (v17)
    v19 = 4;
  else
    v19 = 8;
  *(_QWORD *)&buf[8] = 0x296C70636DLL;
  if (v17)
    v20 = 32;
  else
    v20 = 64;
  *(_DWORD *)&buf[16] = v19;
  LODWORD(v298) = 1;
  HIDWORD(v298) = v19;
  *(_DWORD *)v299 = 2;
  *(_DWORD *)&v299[4] = v20;
  *(_DWORD *)&v299[8] = 0;
  v289 = 0x40E5888000000000;
  v290 = 0x296C70636DLL;
  v291 = v19;
  v292 = 1;
  v293 = v19;
  v294 = 1;
  v295 = v20;
  v296 = 0;
  if (!v17)
  {
    LODWORD(v290) = 1718773105;
    *(_DWORD *)&buf[8] = 1718773105;
  }
  for (i = 0; ; ++i)
  {
    v22 = *(_QWORD *)(a1 + 120);
    if (v22)
      LODWORD(v23) = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 24))(v22, v18);
    else
      v23 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
    if (i >= v23)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), i);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
  }
  for (j = 0; ; ++j)
  {
    v26 = *(_QWORD *)(a1 + 168);
    if (v26)
      LODWORD(v27) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    else
      v27 = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    if (j >= v27)
      break;
    v28 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), j);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 56))(v28, &v289);
  }
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 0, 0.0, 0);
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 0x20u, 0.0, 0);
  v35 = *(_QWORD *)(a1 + 680);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 1u, 1.0, 0);
  v38 = *(_QWORD *)(a1 + 680);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, 1);
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v40) < 9)
      v39 = 0;
    else
      v39 = *(ausdk::AUElement **)(v40 + 8);
  }
  ausdk::AUElement::SetParameter(v39, 1u, 1.0, 0);
  v41 = *(_QWORD *)(a1 + 680);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 2u, 1.0, 0);
  v44 = *(_QWORD *)(a1 + 680);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, 1);
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v46) < 9)
      v45 = 0;
    else
      v45 = *(ausdk::AUElement **)(v46 + 8);
  }
  ausdk::AUElement::SetParameter(v45, 2u, 1.0, 0);
  v47 = *(_QWORD *)(a1 + 680);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 3u, 0.0, 0);
  v50 = *(_QWORD *)(a1 + 680);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, 1);
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v52) < 9)
      v51 = 0;
    else
      v51 = *(ausdk::AUElement **)(v52 + 8);
  }
  ausdk::AUElement::SetParameter(v51, 3u, 0.0, 0);
  v53 = *(_QWORD *)(a1 + 680);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x2Au, 1.0, 0);
  v56 = *(_QWORD *)(a1 + 680);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 32))(v56, 1);
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v58) < 9)
      v57 = 0;
    else
      v57 = *(ausdk::AUElement **)(v58 + 8);
  }
  ausdk::AUElement::SetParameter(v57, 0x2Au, 1.0, 0);
  v59 = *(_QWORD *)(a1 + 680);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 4u, 1.0, 0);
  v62 = *(_QWORD *)(a1 + 680);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(v62, 1);
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v64) < 9)
      v63 = 0;
    else
      v63 = *(ausdk::AUElement **)(v64 + 8);
  }
  ausdk::AUElement::SetParameter(v63, 4u, 1.0, 0);
  if (*(_BYTE *)(a1 + 548))
  {
    v65 = *(_QWORD *)(a1 + 680);
    if (v65)
    {
      v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
    }
    else
    {
      v67 = *(ausdk::AUElement ***)(a1 + 656);
      if (*(ausdk::AUElement ***)(a1 + 664) == v67)
        v66 = 0;
      else
        v66 = *v67;
    }
    ausdk::AUElement::SetParameter(v66, 5u, 0.0, 0);
    v68 = *(_QWORD *)(a1 + 680);
    if (v68)
    {
      v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 32))(v68, 1);
    }
    else
    {
      v70 = *(_QWORD *)(a1 + 656);
      if ((unint64_t)(*(_QWORD *)(a1 + 664) - v70) < 9)
        v69 = 0;
      else
        v69 = *(ausdk::AUElement **)(v70 + 8);
    }
    ausdk::AUElement::SetParameter(v69, 5u, 0.0, 0);
    v71 = *(_QWORD *)(a1 + 680);
    if (v71)
    {
      v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
    }
    else
    {
      v73 = *(ausdk::AUElement ***)(a1 + 656);
      if (*(ausdk::AUElement ***)(a1 + 664) == v73)
        v72 = 0;
      else
        v72 = *v73;
    }
    ausdk::AUElement::SetParameter(v72, 6u, 0.5, 0);
    v74 = *(_QWORD *)(a1 + 680);
    if (v74)
    {
      v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 32))(v74, 1);
    }
    else
    {
      v76 = *(_QWORD *)(a1 + 656);
      if ((unint64_t)(*(_QWORD *)(a1 + 664) - v76) < 9)
        v75 = 0;
      else
        v75 = *(ausdk::AUElement **)(v76 + 8);
    }
    ausdk::AUElement::SetParameter(v75, 6u, 0.5, 0);
    v77 = *(_QWORD *)(a1 + 680);
    if (v77)
    {
      v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
    }
    else
    {
      v79 = *(ausdk::AUElement ***)(a1 + 656);
      if (*(ausdk::AUElement ***)(a1 + 664) == v79)
        v78 = 0;
      else
        v78 = *v79;
    }
    ausdk::AUElement::SetParameter(v78, 0x29u, 1.0, 0);
    v80 = *(_QWORD *)(a1 + 680);
    if (v80)
    {
      v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 32))(v80, 1);
    }
    else
    {
      v82 = *(_QWORD *)(a1 + 656);
      if ((unint64_t)(*(_QWORD *)(a1 + 664) - v82) < 9)
        v81 = 0;
      else
        v81 = *(ausdk::AUElement **)(v82 + 8);
    }
    ausdk::AUElement::SetParameter(v81, 0x29u, 1.0, 0);
  }
  v83 = *(_QWORD *)(a1 + 680);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 7u, 0.0, 0);
  v86 = *(_QWORD *)(a1 + 680);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 32))(v86, 1);
  }
  else
  {
    v88 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v88) < 9)
      v87 = 0;
    else
      v87 = *(ausdk::AUElement **)(v88 + 8);
  }
  ausdk::AUElement::SetParameter(v87, 7u, 0.0, 0);
  v89 = *(_QWORD *)(a1 + 680);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 8u, 0.5, 0);
  v92 = *(_QWORD *)(a1 + 680);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 32))(v92, 1);
  }
  else
  {
    v94 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v94) < 9)
      v93 = 0;
    else
      v93 = *(ausdk::AUElement **)(v94 + 8);
  }
  ausdk::AUElement::SetParameter(v93, 8u, 0.5, 0);
  v95 = *(_QWORD *)(a1 + 680);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 9u, -100.0, 0);
  v98 = *(_QWORD *)(a1 + 680);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 32))(v98, 1);
  }
  else
  {
    v100 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v100) < 9)
      v99 = 0;
    else
      v99 = *(ausdk::AUElement **)(v100 + 8);
  }
  ausdk::AUElement::SetParameter(v99, 9u, -100.0, 0);
  v101 = *(_QWORD *)(a1 + 680);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0xAu, 0.0, 0);
  v104 = *(_QWORD *)(a1 + 680);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 32))(v104, 1);
  }
  else
  {
    v106 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v106) < 9)
      v105 = 0;
    else
      v105 = *(ausdk::AUElement **)(v106 + 8);
  }
  ausdk::AUElement::SetParameter(v105, 0xAu, 0.0, 0);
  v107 = *(_QWORD *)(a1 + 680);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0xBu, 24000.0, 0);
  v110 = *(_QWORD *)(a1 + 680);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 32))(v110, 1);
  }
  else
  {
    v112 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v112) < 9)
      v111 = 0;
    else
      v111 = *(ausdk::AUElement **)(v112 + 8);
  }
  ausdk::AUElement::SetParameter(v111, 0xBu, 24000.0, 0);
  v113 = *(_QWORD *)(a1 + 72);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0xCu, 26.0, 0);
  v116 = *(_QWORD *)(a1 + 680);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0xDu, 1.0, 0);
  v119 = *(_QWORD *)(a1 + 680);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 32))(v119, 1);
  }
  else
  {
    v121 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v121) < 9)
      v120 = 0;
    else
      v120 = *(ausdk::AUElement **)(v121 + 8);
  }
  ausdk::AUElement::SetParameter(v120, 0xDu, 1.0, 0);
  v122 = *(_QWORD *)(a1 + 680);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0xEu, 5.0, 0);
  v125 = *(_QWORD *)(a1 + 680);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 32))(v125, 1);
  }
  else
  {
    v127 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v127) < 9)
      v126 = 0;
    else
      v126 = *(ausdk::AUElement **)(v127 + 8);
  }
  ausdk::AUElement::SetParameter(v126, 0xEu, 5.0, 0);
  v128 = *(_QWORD *)(a1 + 680);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0xFu, 26.0, 0);
  v131 = *(_QWORD *)(a1 + 680);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 32))(v131, 1);
  }
  else
  {
    v133 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v133) < 9)
      v132 = 0;
    else
      v132 = *(ausdk::AUElement **)(v133 + 8);
  }
  ausdk::AUElement::SetParameter(v132, 0xFu, 26.0, 0);
  v134 = *(_QWORD *)(a1 + 680);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0x10u, 145.0, 0);
  v137 = *(_QWORD *)(a1 + 680);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 32))(v137, 1);
  }
  else
  {
    v139 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v139) < 9)
      v138 = 0;
    else
      v138 = *(ausdk::AUElement **)(v139 + 8);
  }
  ausdk::AUElement::SetParameter(v138, 0x10u, 145.0, 0);
  v140 = *(_QWORD *)(a1 + 680);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0x11u, 4.0, 0);
  v143 = *(_QWORD *)(a1 + 680);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, 1);
  }
  else
  {
    v145 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v145) < 9)
      v144 = 0;
    else
      v144 = *(ausdk::AUElement **)(v145 + 8);
  }
  ausdk::AUElement::SetParameter(v144, 0x11u, 4.0, 0);
  v146 = *(_QWORD *)(a1 + 680);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0x12u, 1.0, 0);
  v149 = *(_QWORD *)(a1 + 680);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 32))(v149, 1);
  }
  else
  {
    v151 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v151) < 9)
      v150 = 0;
    else
      v150 = *(ausdk::AUElement **)(v151 + 8);
  }
  ausdk::AUElement::SetParameter(v150, 0x12u, 1.0, 0);
  v152 = *(_QWORD *)(a1 + 680);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0x13u, 45.0, 0);
  v155 = *(_QWORD *)(a1 + 680);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 32))(v155, 1);
  }
  else
  {
    v157 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v157) < 9)
      v156 = 0;
    else
      v156 = *(ausdk::AUElement **)(v157 + 8);
  }
  ausdk::AUElement::SetParameter(v156, 0x13u, 45.0, 0);
  v158 = *(_QWORD *)(a1 + 680);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0x14u, 90.0, 0);
  v161 = *(_QWORD *)(a1 + 680);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 32))(v161, 1);
  }
  else
  {
    v163 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v163) < 9)
      v162 = 0;
    else
      v162 = *(ausdk::AUElement **)(v163 + 8);
  }
  ausdk::AUElement::SetParameter(v162, 0x14u, 90.0, 0);
  v164 = *(_QWORD *)(a1 + 680);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  ausdk::AUElement::SetParameter(v165, 0x15u, 3072.0, 0);
  v167 = *(_QWORD *)(a1 + 680);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 32))(v167, 1);
  }
  else
  {
    v169 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v169) < 9)
      v168 = 0;
    else
      v168 = *(ausdk::AUElement **)(v169 + 8);
  }
  ausdk::AUElement::SetParameter(v168, 0x15u, 3072.0, 0);
  v170 = *(_QWORD *)(a1 + 680);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x16u, 3072.0, 0);
  v173 = *(_QWORD *)(a1 + 680);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 32))(v173, 1);
  }
  else
  {
    v175 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v175) < 9)
      v174 = 0;
    else
      v174 = *(ausdk::AUElement **)(v175 + 8);
  }
  ausdk::AUElement::SetParameter(v174, 0x16u, 3072.0, 0);
  v176 = *(_QWORD *)(a1 + 680);
  if (v176)
  {
    v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 0);
  }
  else
  {
    v178 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v178)
      v177 = 0;
    else
      v177 = *v178;
  }
  ausdk::AUElement::SetParameter(v177, 0x17u, 9.3132e-13, 0);
  v179 = *(_QWORD *)(a1 + 680);
  if (v179)
  {
    v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 32))(v179, 1);
  }
  else
  {
    v181 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v181) < 9)
      v180 = 0;
    else
      v180 = *(ausdk::AUElement **)(v181 + 8);
  }
  ausdk::AUElement::SetParameter(v180, 0x17u, 9.3132e-13, 0);
  v182 = *(_QWORD *)(a1 + 680);
  if (v182)
  {
    v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
  }
  else
  {
    v184 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v184)
      v183 = 0;
    else
      v183 = *v184;
  }
  ausdk::AUElement::SetParameter(v183, 0x18u, 768.0, 0);
  v185 = *(_QWORD *)(a1 + 680);
  if (v185)
  {
    v186 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 32))(v185, 1);
  }
  else
  {
    v187 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v187) < 9)
      v186 = 0;
    else
      v186 = *(ausdk::AUElement **)(v187 + 8);
  }
  ausdk::AUElement::SetParameter(v186, 0x18u, 768.0, 0);
  v188 = *(_QWORD *)(a1 + 680);
  if (v188)
  {
    v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 0);
  }
  else
  {
    v190 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v190)
      v189 = 0;
    else
      v189 = *v190;
  }
  ausdk::AUElement::SetParameter(v189, 0x19u, -2304.0, 0);
  v191 = *(_QWORD *)(a1 + 680);
  if (v191)
  {
    v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 32))(v191, 1);
  }
  else
  {
    v193 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v193) < 9)
      v192 = 0;
    else
      v192 = *(ausdk::AUElement **)(v193 + 8);
  }
  ausdk::AUElement::SetParameter(v192, 0x19u, -2304.0, 0);
  v194 = *(_QWORD *)(a1 + 680);
  if (v194)
  {
    v195 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v194 + 32))(v194, 0);
  }
  else
  {
    v196 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v196)
      v195 = 0;
    else
      v195 = *v196;
  }
  ausdk::AUElement::SetParameter(v195, 0x1Au, -512.0, 0);
  v197 = *(_QWORD *)(a1 + 680);
  if (v197)
  {
    v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 32))(v197, 1);
  }
  else
  {
    v199 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v199) < 9)
      v198 = 0;
    else
      v198 = *(ausdk::AUElement **)(v199 + 8);
  }
  ausdk::AUElement::SetParameter(v198, 0x1Au, -512.0, 0);
  v200 = *(_QWORD *)(a1 + 680);
  if (v200)
  {
    v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v200 + 32))(v200, 0);
  }
  else
  {
    v202 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v202)
      v201 = 0;
    else
      v201 = *v202;
  }
  ausdk::AUElement::SetParameter(v201, 0x1Bu, 768.0, 0);
  v203 = *(_QWORD *)(a1 + 680);
  if (v203)
  {
    v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v203 + 32))(v203, 1);
  }
  else
  {
    v205 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v205) < 9)
      v204 = 0;
    else
      v204 = *(ausdk::AUElement **)(v205 + 8);
  }
  ausdk::AUElement::SetParameter(v204, 0x1Bu, 768.0, 0);
  v206 = *(_QWORD *)(a1 + 680);
  if (v206)
  {
    v207 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, 0);
  }
  else
  {
    v208 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v208)
      v207 = 0;
    else
      v207 = *v208;
  }
  ausdk::AUElement::SetParameter(v207, 0x1Cu, 250.0, 0);
  v209 = *(_QWORD *)(a1 + 680);
  if (v209)
  {
    v210 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 32))(v209, 1);
  }
  else
  {
    v211 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v211) < 9)
      v210 = 0;
    else
      v210 = *(ausdk::AUElement **)(v211 + 8);
  }
  ausdk::AUElement::SetParameter(v210, 0x1Cu, 250.0, 0);
  v212 = *(_QWORD *)(a1 + 680);
  if (v212)
  {
    v213 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v212 + 32))(v212, 0);
  }
  else
  {
    v214 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v214)
      v213 = 0;
    else
      v213 = *v214;
  }
  ausdk::AUElement::SetParameter(v213, 0x1Du, 1625.0, 0);
  v215 = *(_QWORD *)(a1 + 680);
  if (v215)
  {
    v216 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v215 + 32))(v215, 1);
  }
  else
  {
    v217 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v217) < 9)
      v216 = 0;
    else
      v216 = *(ausdk::AUElement **)(v217 + 8);
  }
  ausdk::AUElement::SetParameter(v216, 0x1Du, 1625.0, 0);
  v218 = *(_QWORD *)(a1 + 680);
  if (v218)
  {
    v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, 0);
  }
  else
  {
    v220 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v220)
      v219 = 0;
    else
      v219 = *v220;
  }
  ausdk::AUElement::SetParameter(v219, 0x1Eu, 800.0, 0);
  v221 = *(_QWORD *)(a1 + 680);
  if (v221)
  {
    v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v221 + 32))(v221, 1);
  }
  else
  {
    v223 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v223) < 9)
      v222 = 0;
    else
      v222 = *(ausdk::AUElement **)(v223 + 8);
  }
  ausdk::AUElement::SetParameter(v222, 0x1Eu, 800.0, 0);
  v224 = *(_QWORD *)(a1 + 680);
  if (v224)
  {
    v225 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v224 + 32))(v224, 0);
  }
  else
  {
    v226 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v226)
      v225 = 0;
    else
      v225 = *v226;
  }
  ausdk::AUElement::SetParameter(v225, 0x1Fu, 800.0, 0);
  v227 = *(_QWORD *)(a1 + 680);
  if (v227)
  {
    v228 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v227 + 32))(v227, 1);
  }
  else
  {
    v229 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v229) < 9)
      v228 = 0;
    else
      v228 = *(ausdk::AUElement **)(v229 + 8);
  }
  ausdk::AUElement::SetParameter(v228, 0x1Fu, 800.0, 0);
  v230 = *(_QWORD *)(a1 + 680);
  if (v230)
  {
    v231 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v230 + 32))(v230, 0);
  }
  else
  {
    v232 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v232)
      v231 = 0;
    else
      v231 = *v232;
  }
  ausdk::AUElement::SetParameter(v231, 0x21u, 0.0, 0);
  v233 = *(_QWORD *)(a1 + 680);
  if (v233)
  {
    v234 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v233 + 32))(v233, 1);
  }
  else
  {
    v235 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v235) < 9)
      v234 = 0;
    else
      v234 = *(ausdk::AUElement **)(v235 + 8);
  }
  ausdk::AUElement::SetParameter(v234, 0x21u, 0.0, 0);
  v236 = *(_QWORD *)(a1 + 680);
  if (v236)
  {
    v237 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v236 + 32))(v236, 0);
  }
  else
  {
    v238 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v238)
      v237 = 0;
    else
      v237 = *v238;
  }
  ausdk::AUElement::SetParameter(v237, 0x22u, 0.0, 0);
  v239 = *(_QWORD *)(a1 + 680);
  if (v239)
  {
    v240 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 32))(v239, 1);
  }
  else
  {
    v241 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v241) < 9)
      v240 = 0;
    else
      v240 = *(ausdk::AUElement **)(v241 + 8);
  }
  ausdk::AUElement::SetParameter(v240, 0x22u, 0.0, 0);
  v242 = *(_QWORD *)(a1 + 680);
  if (v242)
  {
    v243 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v242 + 32))(v242, 0);
  }
  else
  {
    v244 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v244)
      v243 = 0;
    else
      v243 = *v244;
  }
  ausdk::AUElement::SetParameter(v243, 0x23u, 2500.0, 0);
  v245 = *(_QWORD *)(a1 + 680);
  if (v245)
  {
    v246 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v245 + 32))(v245, 1);
  }
  else
  {
    v247 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v247) < 9)
      v246 = 0;
    else
      v246 = *(ausdk::AUElement **)(v247 + 8);
  }
  ausdk::AUElement::SetParameter(v246, 0x23u, 2500.0, 0);
  v248 = *(_QWORD *)(a1 + 680);
  if (v248)
  {
    v249 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v248 + 32))(v248, 0);
  }
  else
  {
    v250 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v250)
      v249 = 0;
    else
      v249 = *v250;
  }
  ausdk::AUElement::SetParameter(v249, 0x24u, 0.7, 0);
  v251 = *(_QWORD *)(a1 + 680);
  if (v251)
  {
    v252 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v251 + 32))(v251, 1);
  }
  else
  {
    v253 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v253) < 9)
      v252 = 0;
    else
      v252 = *(ausdk::AUElement **)(v253 + 8);
  }
  ausdk::AUElement::SetParameter(v252, 0x24u, 0.7, 0);
  v254 = *(_QWORD *)(a1 + 680);
  if (v254)
  {
    v255 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v254 + 32))(v254, 0);
  }
  else
  {
    v256 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v256)
      v255 = 0;
    else
      v255 = *v256;
  }
  ausdk::AUElement::SetParameter(v255, 0x25u, 0.5, 0);
  v257 = *(_QWORD *)(a1 + 680);
  if (v257)
  {
    v258 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v257 + 32))(v257, 1);
  }
  else
  {
    v259 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v259) < 9)
      v258 = 0;
    else
      v258 = *(ausdk::AUElement **)(v259 + 8);
  }
  ausdk::AUElement::SetParameter(v258, 0x25u, 0.5, 0);
  v260 = *(_QWORD *)(a1 + 680);
  if (v260)
  {
    v261 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v260 + 32))(v260, 0);
  }
  else
  {
    v262 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v262)
      v261 = 0;
    else
      v261 = *v262;
  }
  ausdk::AUElement::SetParameter(v261, 0x27u, 0.0, 0);
  v263 = *(_QWORD *)(a1 + 680);
  if (v263)
  {
    v264 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v263 + 32))(v263, 1);
  }
  else
  {
    v265 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v265) < 9)
      v264 = 0;
    else
      v264 = *(ausdk::AUElement **)(v265 + 8);
  }
  ausdk::AUElement::SetParameter(v264, 0x27u, 0.0, 0);
  v266 = *(_QWORD *)(a1 + 680);
  if (v266)
  {
    v267 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v266 + 32))(v266, 0);
  }
  else
  {
    v268 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v268)
      v267 = 0;
    else
      v267 = *v268;
  }
  ausdk::AUElement::SetParameter(v267, 0x26u, 24000.0, 0);
  v269 = *(_QWORD *)(a1 + 680);
  if (v269)
  {
    v270 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 32))(v269, 1);
  }
  else
  {
    v271 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v271) < 9)
      v270 = 0;
    else
      v270 = *(ausdk::AUElement **)(v271 + 8);
  }
  ausdk::AUElement::SetParameter(v270, 0x26u, 24000.0, 0);
  v272 = *(_QWORD *)(a1 + 680);
  if (v272)
  {
    v273 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v272 + 32))(v272, 0);
  }
  else
  {
    v274 = *(ausdk::AUElement ***)(a1 + 656);
    if (*(ausdk::AUElement ***)(a1 + 664) == v274)
      v273 = 0;
    else
      v273 = *v274;
  }
  ausdk::AUElement::SetParameter(v273, 0x28u, 0.0, 0);
  v275 = *(_QWORD *)(a1 + 680);
  if (v275)
  {
    v276 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v275 + 32))(v275, 1);
  }
  else
  {
    v277 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)(*(_QWORD *)(a1 + 664) - v277) < 9)
      v276 = 0;
    else
      v276 = *(ausdk::AUElement **)(v277 + 8);
  }
  ausdk::AUElement::SetParameter(v276, 0x28u, 0.0, 0);
  return a1;
}

void sub_1B61F9194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _BYTE *v19;
  _BYTE *v20;

  v19 = *(_BYTE **)(v15 + 2760);
  if (v19)
  {
    v20 = *(_BYTE **)(v15 + 2768);
    if (v20 != v19)
      *(_QWORD *)(v15 + 2768) = &v20[(v19 - v20 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v19);
    *v17 = 0;
    v17[1] = 0;
  }
  a15 = (void **)(v15 + 656);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((_BYTE *)(v15 + 568));
  std::unique_ptr<CmhBEAM2NOpt>::reset[abi:ne180100]((CmhBEAM2NOpt **)(v15 + 560), 0);
  std::unique_ptr<CmhBEAM>::reset[abi:ne180100](v16, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v15);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  int AppIntegerValue;
  int v7;
  uint64_t Element;
  uint64_t v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  unint64_t i;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  uint64_t v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  uint64_t v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  uint64_t v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  uint64_t v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  uint64_t v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  uint64_t v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  uint64_t v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  uint64_t v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  uint64_t v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  uint64_t v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  uint64_t v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  uint64_t v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  uint64_t v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  uint64_t v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  uint64_t v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  uint64_t v114;
  BOOL v116[8];
  __int128 v117;
  __int128 v118;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69E25C8;
  *((_WORD *)v3 + 264) = 0;
  *((_BYTE *)v3 + 530) = 0;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *((_DWORD *)v3 + 138) = -1;
  *((_QWORD *)v3 + 70) = 0;
  *((_DWORD *)v3 + 142) = 0;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_BYTE *)v3 + 640) = 0;
  *(_OWORD *)((char *)v3 + 648) = 0u;
  *(_OWORD *)((char *)v3 + 664) = 0u;
  *(_OWORD *)((char *)v3 + 680) = 0u;
  *(_OWORD *)((char *)v3 + 696) = 0u;
  *(_OWORD *)((char *)v3 + 712) = 0u;
  *(_OWORD *)((char *)v3 + 728) = 0u;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *((_QWORD *)v3 + 101) = 0;
  v4 = *((_QWORD *)v3 + 9);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 34);
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v116[0] = 0;
  AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("clsp_logging_level"), CFSTR("com.apple.coreaudio"), v116);
  if (v116[0])
    *(_DWORD *)(a1 + 632) = AppIntegerValue;
  v116[0] = 0;
  v7 = CACFPreferencesGetAppIntegerValue(CFSTR("clsp_syslog_level"), CFSTR("com.apple.coreaudio"), v116);
  if (v116[0])
    *(_DWORD *)(a1 + 636) = v7;
  *(_BYTE *)(a1 + 640) = CACFPreferencesGetAppBooleanValue(CFSTR("clsp_allow_restore"), CFSTR("com.apple.coreaudio"), 0);
  *(_QWORD *)v116 = 0x40E5888000000000;
  v117 = xmmword_1B6626900;
  v118 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, BOOL *))(*(_QWORD *)Element + 56))(Element, v116);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, BOOL *))(*(_QWORD *)v9 + 56))(v9, v116);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  ausdk::AUElement::SetParameter(v11, 0, 1.0, 0);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 1u, 1.0, 0);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  ausdk::AUElement::SetParameter(v17, 2u, 0.0, 0);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 3u, 0.0, 0);
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 4u, 0.0, 0);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 6u, 0.0, 0);
  v28 = *(_QWORD *)(a1 + 72);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 7u, 0.0, 0);
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 8u, 0.0, 0);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 5u, 0.0, 0);
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 0x1Du, 0.0, 0);
  v40 = *(_QWORD *)(a1 + 72);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 9u, 0.0, 0);
  v43 = *(_QWORD *)(a1 + 72);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 0xAu, 0.0, 0);
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  ausdk::AUElement::SetParameter(v47, 0xBu, 0.0, 0);
  v49 = *(_QWORD *)(a1 + 72);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  ausdk::AUElement::SetParameter(v50, 0x1Eu, 1.0, 0);
  v52 = *(_QWORD *)(a1 + 72);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 0x1Fu, 0.0, 0);
  v55 = *(_QWORD *)(a1 + 72);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  ausdk::AUElement::SetParameter(v56, 0x20u, 5.0, 0);
  v58 = *(_QWORD *)(a1 + 72);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  ausdk::AUElement::SetParameter(v59, 0x21u, 0.0, 0);
  for (i = 0; ; ++i)
  {
    v62 = *(_QWORD *)(a1 + 600);
    if (v62)
      LODWORD(v63) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
    else
      v63 = (*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3;
    if (i >= v63)
      break;
    v64 = *(_QWORD *)(a1 + 600);
    if (v64)
    {
      v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 32))(v64, i);
    }
    else
    {
      v66 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v66) >> 3)
        v65 = 0;
      else
        v65 = *(ausdk::AUElement **)(v66 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v65, 0x18u, 50.0, 0);
    v67 = *(_QWORD *)(a1 + 600);
    if (v67)
    {
      v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 32))(v67, i);
    }
    else
    {
      v69 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v69) >> 3)
        v68 = 0;
      else
        v68 = *(ausdk::AUElement **)(v69 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v68, 0x17u, 50.0, 0);
    v70 = *(_QWORD *)(a1 + 600);
    if (v70)
    {
      v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 32))(v70, i);
    }
    else
    {
      v72 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v72) >> 3)
        v71 = 0;
      else
        v71 = *(ausdk::AUElement **)(v72 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v71, 0xCu, 0.0, 0);
    v73 = *(_QWORD *)(a1 + 600);
    if (v73)
    {
      v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 32))(v73, i);
    }
    else
    {
      v75 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v75) >> 3)
        v74 = 0;
      else
        v74 = *(ausdk::AUElement **)(v75 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v74, 0xDu, 0.0, 0);
    v76 = *(_QWORD *)(a1 + 600);
    if (v76)
    {
      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 32))(v76, i);
    }
    else
    {
      v78 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v78) >> 3)
        v77 = 0;
      else
        v77 = *(ausdk::AUElement **)(v78 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v77, 0xEu, 0.0, 0);
    v79 = *(_QWORD *)(a1 + 600);
    if (v79)
    {
      v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 32))(v79, i);
    }
    else
    {
      v81 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v81) >> 3)
        v80 = 0;
      else
        v80 = *(ausdk::AUElement **)(v81 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v80, 0xFu, 0.0, 0);
    v82 = *(_QWORD *)(a1 + 600);
    if (v82)
    {
      v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v82 + 32))(v82, i);
    }
    else
    {
      v84 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v84) >> 3)
        v83 = 0;
      else
        v83 = *(ausdk::AUElement **)(v84 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v83, 0x10u, 0.0, 0);
    v85 = *(_QWORD *)(a1 + 600);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 32))(v85, i);
    }
    else
    {
      v87 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v87) >> 3)
        v86 = 0;
      else
        v86 = *(ausdk::AUElement **)(v87 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v86, 0x11u, 0.0, 0);
    v88 = *(_QWORD *)(a1 + 600);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v88 + 32))(v88, i);
    }
    else
    {
      v90 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v90) >> 3)
        v89 = 0;
      else
        v89 = *(ausdk::AUElement **)(v90 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v89, 0x12u, 0.0, 0);
    v91 = *(_QWORD *)(a1 + 600);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v91 + 32))(v91, i);
    }
    else
    {
      v93 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v93) >> 3)
        v92 = 0;
      else
        v92 = *(ausdk::AUElement **)(v93 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v92, 0x13u, 0.0, 0);
    v94 = *(_QWORD *)(a1 + 600);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v94 + 32))(v94, i);
    }
    else
    {
      v96 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v96) >> 3)
        v95 = 0;
      else
        v95 = *(ausdk::AUElement **)(v96 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v95, 0x14u, 0.0, 0);
    v97 = *(_QWORD *)(a1 + 600);
    if (v97)
    {
      v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v97 + 32))(v97, i);
    }
    else
    {
      v99 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v99) >> 3)
        v98 = 0;
      else
        v98 = *(ausdk::AUElement **)(v99 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v98, 0x15u, 0.0, 0);
    v100 = *(_QWORD *)(a1 + 600);
    if (v100)
    {
      v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v100 + 32))(v100, i);
    }
    else
    {
      v102 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v102) >> 3)
        v101 = 0;
      else
        v101 = *(ausdk::AUElement **)(v102 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v101, 0x16u, 0.0, 0);
    v103 = *(_QWORD *)(a1 + 600);
    if (v103)
    {
      v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v103 + 32))(v103, i);
    }
    else
    {
      v105 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v105) >> 3)
        v104 = 0;
      else
        v104 = *(ausdk::AUElement **)(v105 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v104, 0x19u, 0.0, 0);
    v106 = *(_QWORD *)(a1 + 600);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 32))(v106, i);
    }
    else
    {
      v108 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v108) >> 3)
        v107 = 0;
      else
        v107 = *(ausdk::AUElement **)(v108 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v107, 0x1Au, 0.0, 0);
    v109 = *(_QWORD *)(a1 + 600);
    if (v109)
    {
      v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v109 + 32))(v109, i);
    }
    else
    {
      v111 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v111) >> 3)
        v110 = 0;
      else
        v110 = *(ausdk::AUElement **)(v111 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v110, 0x1Bu, 0.0, 0);
    v112 = *(_QWORD *)(a1 + 600);
    if (v112)
    {
      v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v112 + 32))(v112, i);
    }
    else
    {
      v114 = *(_QWORD *)(a1 + 576);
      if (i >= (*(_QWORD *)(a1 + 584) - v114) >> 3)
        v113 = 0;
      else
        v113 = *(ausdk::AUElement **)(v114 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v113, 0x1Cu, 0.0, 0);
  }
  ++*(_DWORD *)(a1 + 548);
  return a1;
}

void sub_1B61F9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t i;

  v11 = *(void **)(v9 + 704);
  if (v11)
  {
    *(_QWORD *)(v9 + 712) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v9 + 680);
  if (v12)
  {
    *(_QWORD *)(v9 + 688) = v12;
    operator delete(v12);
  }
  for (i = 0; i != -32; i -= 16)
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v9 + 664 + i);
  a9 = (void **)(v9 + 608);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 + 576);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a9);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v9);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t Element;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69D6FE0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_OWORD *)v3 + 35) = 0u;
  *((_OWORD *)v3 + 36) = 0u;
  *((_OWORD *)v3 + 37) = 0u;
  *((_OWORD *)v3 + 38) = 0u;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = 0u;
  *((_OWORD *)v3 + 41) = 0u;
  *((_OWORD *)v3 + 42) = 0u;
  *((_OWORD *)v3 + 43) = 0u;
  *((_OWORD *)v3 + 44) = 0u;
  *((_QWORD *)v3 + 90) = 0;
  *((_OWORD *)v3 + 46) = 0u;
  *((_OWORD *)v3 + 47) = 0u;
  *((_OWORD *)v3 + 48) = 0u;
  *((_OWORD *)v3 + 49) = 0u;
  *((_OWORD *)v3 + 50) = 0u;
  *((_OWORD *)v3 + 51) = 0u;
  *((_OWORD *)v3 + 52) = 0u;
  *((_OWORD *)v3 + 53) = 0u;
  *((_OWORD *)v3 + 54) = 0u;
  *((_OWORD *)v3 + 55) = 0u;
  *((_OWORD *)v3 + 56) = 0u;
  *((_OWORD *)v3 + 57) = 0u;
  *((_OWORD *)v3 + 58) = 0u;
  *((_OWORD *)v3 + 59) = 0u;
  *((_OWORD *)v3 + 60) = 0u;
  *((_OWORD *)v3 + 61) = 0u;
  *((_OWORD *)v3 + 62) = 0u;
  *((_OWORD *)v3 + 63) = 0u;
  *((_OWORD *)v3 + 64) = 0u;
  *((_OWORD *)v3 + 65) = 0u;
  *((_OWORD *)v3 + 66) = 0u;
  *((_OWORD *)v3 + 67) = 0u;
  *((_OWORD *)v3 + 68) = 0u;
  *((_OWORD *)v3 + 69) = 0u;
  *((_OWORD *)v3 + 70) = 0u;
  *((_OWORD *)v3 + 71) = 0u;
  *((_OWORD *)v3 + 72) = 0u;
  *((_OWORD *)v3 + 73) = 0u;
  *((_QWORD *)v3 + 148) = 0x40000000080;
  *((_QWORD *)v3 + 150) = 0x43FA000044FA0000;
  *((_QWORD *)v3 + 151) = 0;
  *((_BYTE *)v3 + 1216) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 512))(a1, *(unsigned int *)(a1 + 1188));
  v10 = 0x40E5888000000000;
  v11 = xmmword_1B6626900;
  v12 = xmmword_1B66A0820;
  v7 = 0x40E5888000000000;
  v8 = xmmword_1B6626900;
  v9 = xmmword_1B66A0820;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v10);
  v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v7);
  return a1;
}

void sub_1B61F9F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ausdk::AUBase *v2;
  ParametricProcessor **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  va_list va;

  va_start(va, a2);
  v6 = (void *)*((_QWORD *)v2 + 145);
  if (v6)
  {
    *((_QWORD *)v2 + 146) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v2 + 142);
  if (v7)
  {
    *((_QWORD *)v2 + 143) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v2 + 139);
  if (v8)
  {
    *((_QWORD *)v2 + 140) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v2 + 134);
  if (v9)
  {
    *((_QWORD *)v2 + 135) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v2 + 129);
  if (v10)
  {
    *((_QWORD *)v2 + 130) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)v2 + 124);
  if (v11)
  {
    *((_QWORD *)v2 + 125) = v11;
    operator delete(v11);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v12 = (void *)*((_QWORD *)v2 + 116);
  if (v12)
  {
    *((_QWORD *)v2 + 117) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)v2 + 111);
  if (v13)
  {
    *((_QWORD *)v2 + 112) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)v2 + 106);
  if (v14)
  {
    *((_QWORD *)v2 + 107) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)v2 + 103);
  if (v15)
  {
    *((_QWORD *)v2 + 104) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)v2 + 100);
  if (v16)
  {
    *((_QWORD *)v2 + 101) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)v2 + 95);
  if (v17)
  {
    *((_QWORD *)v2 + 96) = v17;
    operator delete(v17);
  }
  v18 = *v4;
  if (*v4)
  {
    *((_QWORD *)v2 + 93) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)v2 + 88);
  if (v19)
  {
    *((_QWORD *)v2 + 89) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)v2 + 83);
  if (v20)
  {
    *((_QWORD *)v2 + 84) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)v2 + 78);
  if (v21)
  {
    *((_QWORD *)v2 + 79) = v21;
    operator delete(v21);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v22 = (void *)*((_QWORD *)v2 + 70);
  if (v22)
  {
    *((_QWORD *)v2 + 71) = v22;
    operator delete(v22);
  }
  v23 = *((_QWORD *)v2 + 67);
  *((_QWORD *)v2 + 67) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](v3, 0);
  ausdk::AUBase::~AUBase(v2);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;

  v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *(_QWORD *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 584) = 0;
  *(_QWORD *)v3 = &off_1E69DFCB0;
  *((_QWORD *)v3 + 75) = 0;
  *(_DWORD *)((char *)v3 + 595) = 0;
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)v3, 0x7063676Eu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x5F737776u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x766F6C74u, 0.05);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6365696Cu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x636C6970u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6D6F6465u, 1.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x766F6C76u, 0.05);
  return a1;
}

void sub_1B61FA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  ausdk::AUBase *v10;
  void **v11;
  void **v12;

  v12 = v11;
  *(_QWORD *)v10 = &off_1E69ED840;
  a10 = v12;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase(v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t Element;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *(_QWORD *)((char *)v3 + 588) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_QWORD *)v3 = &off_1E69D85D8;
  *((_BYTE *)v3 + 584) = 1;
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)v3, 0x736F6674u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate(a1, 0x68617264u, 0.0);
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  v7 = 0x40E5888000000000;
  v8 = xmmword_1B66A10C0;
  v9 = xmmword_1B66A10D0;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v7);
  v5 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v7);
  return a1;
}

void sub_1B61FA360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;

  *v10 = &off_1E69ED840;
  a10 = v10 + 66;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;

  v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_QWORD *)v3 = &off_1E69E1700;
  *((_QWORD *)v3 + 74) = 0;
  *((_BYTE *)v3 + 584) = 1;
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)v3, 0x626F6F66u, 0.2);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x63757466u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x7063676Eu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x5F737776u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6D617867u, 12.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x766F6C74u, 0.05);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6E61746Bu, 0.05);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6E72656Cu, 0.05);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x61746B74u, 0.5);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x72656C74u, 0.5);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6365696Cu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x636C6970u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x74687273u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6E6F6973u, -100.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6D6F6465u, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x7363656Eu, 1.0);
  return a1;
}

void sub_1B61FA574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  ausdk::AUBase *v10;
  void **v11;
  void **v12;

  v12 = v11;
  *(_QWORD *)v10 = &off_1E69ED840;
  a10 = v12;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase(v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

AudioComponent RegisterInternalAudioUnits_iOS(UInt32 a1)
{
  AudioComponentDescription inDesc;

  qmemcpy(&inDesc, "xfuadqbplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBiquad"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Factory);
  qmemcpy(&inDesc, "xfuadvpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEndpointVAD"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Factory);
  qmemcpy(&inDesc, "xfua2vpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEndpointVAD2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Factory);
  qmemcpy(&inDesc, "xfua3vpelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEndpointVAD3"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Factory);
  qmemcpy(&inDesc, "xfuailcblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBoostClip"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBoostClip>::Factory);
  qmemcpy(&inDesc, "xfualcfslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSoftClip"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSoftClip>::Factory);
  qmemcpy(&inDesc, "xfuailovlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUVolume"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolume>::Factory);
  qmemcpy(&inDesc, "xfuapmpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpatialMap"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpatialMap>::Factory);
  qmemcpy(&inDesc, "xfua2ppslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpeakerProtectionV2"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV2>::Factory);
  qmemcpy(&inDesc, "xfua3ppslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpeakerProtectionV3"), 0x10001u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeakerProtectionV3>::Factory);
  qmemcpy(&inDesc, "xfua2meblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeam2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Factory);
  qmemcpy(&inDesc, "xfuan2mblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeam2N"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeam2>::Factory);
  qmemcpy(&inDesc, "xfuafnmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeamNF"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNF>::Factory);
  qmemcpy(&inDesc, "xfuasfnblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeamNFSelector"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamNFSelector>::Factory);
  qmemcpy(&inDesc, "xfuatwsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMixSwitch"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitch>::Factory);
  qmemcpy(&inDesc, "xfuafnsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMixSwitchNF"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMixSwitchNF>::Factory);
  qmemcpy(&inDesc, "xfuafriflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUFIRFilter"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFIRFilter>::Factory);
  qmemcpy(&inDesc, "xfuaverdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDereverb"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Factory);
  qmemcpy(&inDesc, "xfuasondlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDenoise"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Factory);
  qmemcpy(&inDesc, "xfuasrnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNeuralNetRES"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetRES>::Factory);
  qmemcpy(&inDesc, "xfuapsnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNeuralNetSPP"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetSPP>::Factory);
  qmemcpy(&inDesc, "xfuatennlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNeuralNet"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Factory);
  qmemcpy(&inDesc, "xfuaavnnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNeuralNetVAD"), 0x10601u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNetVAD>::Factory);
  qmemcpy(&inDesc, "xfuassualppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSeparate"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSeparate>::Factory);
  qmemcpy(&inDesc, "xfuaorpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpatialProbability"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialProbability>::Factory);
  qmemcpy(&inDesc, "xfuantsdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDistance"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDistance>::Factory);
  qmemcpy(&inDesc, "xfuadfmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeamItFD"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Factory);
  qmemcpy(&inDesc, "xfuadtmblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBeamItTD"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBeamIt>::Factory);
  qmemcpy(&inDesc, "xfuasnfnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNFNSwitch"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNFNSwitch>::Factory);
  qmemcpy(&inDesc, "xfuakdnwlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUWindKill"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUWindKill>::Factory);
  qmemcpy(&inDesc, "xfuacatflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUFTSpatialAC"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFTSpatialAC>::Factory);
  qmemcpy(&inDesc, "xfuannillppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudnessInNoise"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Factory);
  qmemcpy(&inDesc, "xfuapusllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULevelDrivenSuppressor"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuangnclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUCNG"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCNG>::Factory);
  qmemcpy(&inDesc, "xauauvxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUAuxVPUplink"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<AUAuxVPLookup,AUAuxVPUplink>::Factory);
  qmemcpy(&inDesc, "xauadvxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUAuxVPDownlink"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<AUAuxVPLookup,AUAuxVPDownlink>::Factory);
  qmemcpy(&inDesc, "xfua1mpclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUCPMSVolumeV1"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCPMSVolumeV1>::Factory);
  qmemcpy(&inDesc, "xfua2cgalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUAGCV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAGCV2>::Factory);
  qmemcpy(&inDesc, "xfua3cellppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULinearEchoCancelerV3"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULinearEchoCancelerV3>::Factory);
  qmemcpy(&inDesc, "xfuacecmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMultiChanEchoCanceler"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiChanEchoCanceler>::Factory);
  qmemcpy(&inDesc, "xfua5cellppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEchoCancelerV5"), 0x10601u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoCancelerV5>::Factory);
  qmemcpy(&inDesc, "xfuaomcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECMIMO"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMO>::Factory);
  qmemcpy(&inDesc, "xfuaoscelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECSUMO"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECSUMO>::Factory);
  qmemcpy(&inDesc, "xfuasgcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECRMGS"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMGS>::Factory);
  qmemcpy(&inDesc, "xfuamrcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECRMDF"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECRMDF>::Factory);
  qmemcpy(&inDesc, "xfuarmcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECMicRef"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMicRef>::Factory);
  qmemcpy(&inDesc, "xfuaeyttlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUTTYEchoSuppressor"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTTYEchoSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuacemslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSubBandMultEchoCanceler"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSubBandMultEchoCanceler>::Factory);
  qmemcpy(&inDesc, "xfuasncolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUOneChannelNS"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNS>::Factory);
  qmemcpy(&inDesc, "xfua4snolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUOneChannelNSV4"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNSV4>::Factory);
  qmemcpy(&inDesc, "xfuaencolppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUOneChannelNoiseEstimator"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUOneChannelNoiseEstimator>::Factory);
  qmemcpy(&inDesc, "xfuaelpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpeechLevelEstimator"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechLevelEstimator>::Factory);
  qmemcpy(&inDesc, "xfua3serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUResidualEchoSuppressorV3"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV3>::Factory);
  qmemcpy(&inDesc, "xfua4serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUResidualEchoSuppressorV4"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV4>::Factory);
  qmemcpy(&inDesc, "xfua5serlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUResidualEchoSuppressorV5"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUResidualEchoSuppressorV5>::Factory);
  qmemcpy(&inDesc, "xfua3tgelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEchoGateV3"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEchoGateV3>::Factory);
  qmemcpy(&inDesc, "xfua2clvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUVolumeCompressorV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeCompressorV2>::Factory);
  qmemcpy(&inDesc, "xfuaseedlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDeesser"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDeesser>::Factory);
  qmemcpy(&inDesc, "xfua2lsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMicSelectorV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSelectorV2>::Factory);
  qmemcpy(&inDesc, "xfuasndmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMagnitudeDifferenceNoiseSuppressor"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressor>::Factory);
  qmemcpy(&inDesc, "xfua4snmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMagnitudeDifferenceNoiseSuppressorV4"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMagnitudeDifferenceNoiseSuppressorV4>::Factory);
  qmemcpy(&inDesc, "xfua1ssblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBSS1"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS1>::Factory);
  qmemcpy(&inDesc, "xfua2ssblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBSS2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUBSS2>::Factory);
  qmemcpy(&inDesc, "xfuaqenhlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUHandsetNoiseEQ"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Factory);
  qmemcpy(&inDesc, "xfualesnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNoiseSelector"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Factory);
  qmemcpy(&inDesc, "xfuabvrdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUReverbSuppressor"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReverbSuppressor>::Factory);
  qmemcpy(&inDesc, "xfua2pdmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMultiBandDynamicsProcessorV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMultiBandDynamicsProcessorV2>::Factory);
  qmemcpy(&inDesc, "xfuakdydlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDynamicDucker"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDucker>::Factory);
  qmemcpy(&inDesc, "xfua2vddlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDynamicDuckerV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDynamicDuckerV2>::Factory);
  qmemcpy(&inDesc, "xfuadmnalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUAnomalyDetection"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUAnomalyDetection>::Factory);
  qmemcpy(&inDesc, "xfua2qrvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUVariableEQV2"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVariableEQV2>::Factory);
  qmemcpy(&inDesc, "xfuaqebmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMNBandEQ"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMNBandEQ>::Factory);
  qmemcpy(&inDesc, "xfuaxmsrlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUReferenceSignalMixer"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUReferenceSignalMixer>::Factory);
  qmemcpy(&inDesc, "xfuahsorlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AURotationShading"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AURotationShading>::Factory);
  qmemcpy(&inDesc, "xfuagulplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEarPlug"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUEarPlug>::Factory);
  qmemcpy(&inDesc, "xfuabccdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDCBlocker"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDCBlocker>::Factory);
  qmemcpy(&inDesc, "xfuarikllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUTweakaLeakIR"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUTweakaLeakIR>::Factory);
  qmemcpy(&inDesc, "xfuarcedlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDecorrelator"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDecorrelator>::Factory);
  qmemcpy(&inDesc, "xfuagpsdlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUDSPGraph"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDSPGraph>::Factory);
  qmemcpy(&inDesc, "xfuarhcplppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMatrixPatcher"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixPatcher>::Factory);
  qmemcpy(&inDesc, "xfuaeriflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUFIREngine"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUFIREngine>::Factory);
  qmemcpy(&inDesc, "xfuatraclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUCarter"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCarter>::Factory);
  qmemcpy(&inDesc, "xfuadnallppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULando"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULando>::Factory);
  qmemcpy(&inDesc, "xfuaytcslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUScotty"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUScotty>::Factory);
  qmemcpy(&inDesc, "xfuaacrclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUCircArray"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUCircArray>::Factory);
  qmemcpy(&inDesc, "xfuaduollppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudnessWarrior"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessWarrior>::Factory);
  qmemcpy(&inDesc, "xfuappahlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUHapticsProtection"), 0x20000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHapticsProtection>::Factory);
  qmemcpy(&inDesc, "xfuangxflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUFixedGain"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUFixedGain>::Factory);
  qmemcpy(&inDesc, "xfuayldclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUChannelSpecificDelay"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUChannelSpecificDelay>::Factory);
  qmemcpy(&inDesc, "xfuapcpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpatialCapture"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialCapture>::Factory);
  qmemcpy(&inDesc, "xfuazaohlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUHOAZoom"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHOAZoom>::Factory);
  qmemcpy(&inDesc, "xfuasneslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMicSense"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicSense>::Factory);
  qmemcpy(&inDesc, "xfuacgamlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMultiChannelAGC"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMultiChannelAGC>::Factory);
  qmemcpy(&inDesc, "xfualslclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUChannelSelector"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUChannelSelector>::Factory);
  qmemcpy(&inDesc, "xfuaisimlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMidSide"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMidSide>::Factory);
  qmemcpy(&inDesc, "xfuanepslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSpeechEnhancer"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpeechEnhancer>::Factory);
  qmemcpy(&inDesc, "xfuaraehlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUHearingLossCompensator"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHearingLossCompensator>::Factory);
  qmemcpy(&inDesc, "xfuaobwllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULimitWindBoost"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULimitWindBoost>::Factory);
  qmemcpy(&inDesc, "xfuatdlclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUClipDetector"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUClipDetector>::Factory);
  qmemcpy(&inDesc, "xfuatcxelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUExpanseController"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUExpanseController>::Factory);
  qmemcpy(&inDesc, "xfuamcislppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSignalCombiner"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSignalCombiner>::Factory);
  qmemcpy(&inDesc, "xfuadsimlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMicIssueDetector"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMicIssueDetector>::Factory);
  qmemcpy(&inDesc, "xfuakrfclppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUControlFreak"), 0x40301u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUControlFreak>::Factory);
  qmemcpy(&inDesc, "xfuakzublppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBuzzKill"), 0x20700u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBuzzKill>::Factory);
  qmemcpy(&inDesc, "xfuanebvlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUVirtualBass"), 0x10502u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVirtualBass>::Factory);
  qmemcpy(&inDesc, "xfuagnkblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBassKoenig"), 0x30300u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,BassKoenig>::Factory);
  qmemcpy(&inDesc, "xfuanqsblppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUBassQueen"), 0x1080000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBassQueen>::Factory);
  qmemcpy(&inDesc, "xfuawolflppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULowFlow"), 0x30500u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULowFlow>::Factory);
  qmemcpy(&inDesc, "xfuaktsmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMeisterStueck"), 0x20100u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMeisterStueck>::Factory);
  qmemcpy(&inDesc, "xfuatsmtlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUToneMeister"), 0x60400u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUToneMeister>::Factory);
  qmemcpy(&inDesc, "xfuatmdllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudnessMeter"), 0x20000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudnessMeter>::Factory);
  qmemcpy(&inDesc, "xfuaszomlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMozartCompressorSingleBand"), 0x20304u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMozartCompressorSingleBand>::Factory);
  qmemcpy(&inDesc, "xfuamnlllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULittleLateNightMode"), 0, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULittleLateNightMode>::Factory);
  qmemcpy(&inDesc, "xfuagppalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUPeakPowerGuard"), 0x10403u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUPeakPowerGuard>::Factory);
  qmemcpy(&inDesc, "xfuapstalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUThermalSpeakerProtection"), 0x20301u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUThermalSpeakerProtection>::Factory);
  qmemcpy(&inDesc, "xfuactxalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUXTC"), 0x30502u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUXTC>::Factory);
  qmemcpy(&inDesc, "xfuamndllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudnessNormalizer"), 0x3040000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessAndMultipleLookup,AULoudnessNormalizer>::Factory);
  qmemcpy(&inDesc, "xfuagmsllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudspeakerManager"), 1u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManager>::Factory);
  qmemcpy(&inDesc, "xfua2msllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudspeakerManagerV2"), 3u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudspeakerManagerV2>::Factory);
  qmemcpy(&inDesc, "xfuadisllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudspeakerSystemIDV2"), 0x2000000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AULoudspeakerSystemIDV2>::Factory);
  qmemcpy(&inDesc, "xfuatlovlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUVolumeTaper"), 0x101000Au, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUVolumeTaper>::Factory);
  qmemcpy(&inDesc, "xfuavelalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUAmbienceLeveler"), 0x2030000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUAmbienceLeveler>::Factory);
  qmemcpy(&inDesc, "xfuapcgmlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUMixGainCompensation"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUMixGainCompensation>::Factory);
  qmemcpy(&inDesc, "xfualesnlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUNoiseSelector"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNoiseSelector>::Factory);
  qmemcpy(&inDesc, "xfuaqenhlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUHandsetNoiseEQ"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUHandsetNoiseEQ>::Factory);
  qmemcpy(&inDesc, "xfuaalislppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSilenceNonFiniteAnalyzer"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Factory);
  qmemcpy(&inDesc, "xfuaoccelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUEcConvergenceOversight"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEcConvergenceOversight>::Factory);
  qmemcpy(&inDesc, "xfuannillppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULoudnessInNoise"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessInNoise>::Factory);
  qmemcpy(&inDesc, "xfuapusllppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AULevelDrivenSuppressor"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULevelDrivenSuppressor>::Factory);
  qmemcpy(&inDesc, "xfuahmcelppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUECMIMOHelper"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUECMIMOHelper>::Factory);
  qmemcpy(&inDesc, "xfuamlpslppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUSPLMeter"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Factory);
  qmemcpy(&inDesc, "xfuarocxlppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  AudioComponentRegister(&inDesc, CFSTR("Apple: AUCrossCorrelator"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Factory);
  qmemcpy(&inDesc, "xfuaksmalppa", 12);
  inDesc.componentFlags = a1;
  inDesc.componentFlagsMask = 0;
  return AudioComponentRegister(&inDesc, CFSTR("Apple: AUADAMSink"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUADAMSink>::Factory);
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x2E0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x2B0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x2C8uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x2A0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  char *v5;
  char *v6;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69E2330;
  *((_QWORD *)v3 + 66) = &unk_1E69E25A0;
  *((_BYTE *)v3 + 536) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E69E2D00;
  *(_BYTE *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 20) = 0;
  *(_QWORD *)(v4 + 12) = 0;
  v5 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E69E2D20;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  v5[72] = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *((_QWORD *)v5 + 11) = 0;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 10) = 0;
  v5[104] = 0;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_DWORD *)v5 + 36) = 0;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *((_QWORD *)v5 + 23) = 0;
  *(_QWORD *)(v4 + 32) = v5 + 24;
  *(_QWORD *)(v4 + 40) = v5;
  v6 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E69E2D20;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  v6[72] = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *((_QWORD *)v6 + 11) = 0;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 10) = 0;
  v6[104] = 0;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_DWORD *)v6 + 36) = 0;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_QWORD *)v6 + 23) = 0;
  *(_QWORD *)(v4 + 48) = v6 + 24;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 0;
  *(_OWORD *)(v4 + 120) = 0u;
  *(int32x4_t *)(v4 + 136) = vdupq_n_s32(0x3ECCCCCDu);
  *(_OWORD *)(v4 + 152) = xmmword_1B66A10E0;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 344) = 0;
  *(_QWORD *)(v4 + 352) = 0;
  *(_DWORD *)(v4 + 528) = 0;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_BYTE *)(v4 + 536) = 0;
  *(_OWORD *)(v4 + 544) = 0u;
  *(_OWORD *)(v4 + 560) = 0u;
  *(_OWORD *)(v4 + 576) = 0u;
  *(_OWORD *)(v4 + 592) = 0u;
  *(_OWORD *)(v4 + 608) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_OWORD *)(v4 + 640) = 0u;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_OWORD *)(v4 + 720) = 0u;
  *(_QWORD *)(v4 + 912) = 0;
  *(_OWORD *)(v4 + 896) = 0u;
  *(_OWORD *)(v4 + 880) = 0u;
  *(_OWORD *)(v4 + 864) = 0u;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_OWORD *)(v4 + 832) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_OWORD *)(v4 + 752) = 0u;
  std::vector<float>::resize(v4 + 264, 2uLL);
  *(_QWORD *)(a1 + 544) = v4;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 320);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 600))(a1, &EndpointVAD2Defaults::kParam_DefaultAudioSampleRateHz);
  return a1;
}

void sub_1B61FC4E0(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 71) = v4;
    operator delete(v4);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD3>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  char *v5;
  char *v6;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69D7978;
  *((_QWORD *)v3 + 66) = &unk_1E69D7BE8;
  *((_BYTE *)v3 + 536) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E69CB9C0;
  *(_BYTE *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 20) = 0;
  *(_QWORD *)(v4 + 12) = 0;
  *(_DWORD *)(v4 + 28) = 0;
  v5 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E69E2D20;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  v5[72] = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *((_QWORD *)v5 + 11) = 0;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 10) = 0;
  v5[104] = 0;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_DWORD *)v5 + 36) = 0;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *((_QWORD *)v5 + 23) = 0;
  *(_QWORD *)(v4 + 32) = v5 + 24;
  *(_QWORD *)(v4 + 40) = v5;
  v6 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E69E2D20;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  v6[72] = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *((_QWORD *)v6 + 10) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  v6[104] = 0;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_DWORD *)v6 + 36) = 0;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *((_QWORD *)v6 + 23) = 0;
  *(_QWORD *)(v4 + 48) = v6 + 24;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(int32x4_t *)(v4 + 112) = vdupq_n_s32(0x3ECCCCCDu);
  *(_QWORD *)(v4 + 296) = 0;
  *(_OWORD *)(v4 + 128) = xmmword_1B66A10E0;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_QWORD *)(v4 + 224) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 372) = 0u;
  *(_QWORD *)(a1 + 544) = v4;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 572) = 0;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 612) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  ausdk::AUBase::CreateElements((int64x2_t *)a1);
  *(_BYTE *)(a1 + 376) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 320);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 600))(a1, &EndpointVAD2Defaults::kParam_DefaultAudioSampleRateHz);
  return a1;
}

void sub_1B61FC88C(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;
  void *v3;

  v3 = (void *)*((_QWORD *)v1 + 75);
  if (v3)
  {
    *((_QWORD *)v1 + 76) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69D3DE0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_OWORD *)v3 + 34) = 0u;
  *((_QWORD *)v3 + 70) = 0;
  *(_OWORD *)((char *)v3 + 568) = xmmword_1B66A10F0;
  *((_DWORD *)v3 + 146) = 0;
  *((_QWORD *)v3 + 74) = 0;
  *((_DWORD *)v3 + 150) = 0;
  *((_QWORD *)v3 + 76) = 0;
  *((_DWORD *)v3 + 154) = 0;
  *((_BYTE *)v3 + 620) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1024);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  else
    v5 = **(_QWORD **)(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, 4);
  v9 = 0x40CF400000000000;
  v10 = xmmword_1B6626900;
  v11 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v9);
  v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, &v9);
  return a1;
}

void sub_1B61FCA1C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100](v1 + 67, 0);
  std::unique_ptr<EndpointVAD>::reset[abi:ne180100](v1 + 66, 0);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUEndpointVAD>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Construct(ausdk::AUBase *a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;

  v3 = ausdk::AUBase::AUBase(a1, a2, 1, 1);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 584) = 0;
  *(_QWORD *)v3 = &off_1E69D38B8;
  *((_DWORD *)v3 + 150) = 0x1000000;
  *((_QWORD *)v3 + 74) = 0;
  *(_OWORD *)((char *)v3 + 604) = 0u;
  *(_OWORD *)((char *)v3 + 620) = 0u;
  *(_QWORD *)((char *)v3 + 636) = 0;
  *((_DWORD *)v3 + 162) = 0;
  *((_QWORD *)v3 + 82) = 0;
  *((_BYTE *)v3 + 664) = 1;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  *((_BYTE *)a1 + 553) = 1;
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x62717470u, 2.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x66726571u, 1000.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x6761696Eu, 0.0);
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)a1, 0x62647774u, 1.0);
  return a1;
}

void sub_1B61FCB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  ausdk::AUBase *v10;
  void **v11;
  void **v12;

  v12 = v11;
  *(_QWORD *)v10 = &off_1E69ED840;
  a10 = v12;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  ausdk::AUBase::~AUBase(v10);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUBiquad>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

AudioComponent RegisterPublicAudioUnits()
{
  AudioComponentDescription v1;

  *(_OWORD *)&v1.componentType = xmmword_1B66A1100;
  v1.componentFlagsMask = 0;
  AudioComponentRegister(&v1, CFSTR("Apple: AUSpatialMixer"), 0x10608u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1B66A1110;
  v1.componentFlagsMask = 0;
  AudioComponentRegister(&v1, CFSTR("Apple: AUSoundIsolation"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1B66A1120;
  v1.componentFlagsMask = 0;
  return AudioComponentRegister(&v1, CFSTR("Apple: AULoudnessNormalizer"), 0x3040000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Factory);
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x3B70uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x338uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x8B8uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AULoudnessNormalizer>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

ausdk::AUBase *ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Construct(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  int *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;
  uint64_t **v17;
  _DWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t i;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t Element;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  caulk::concurrent::messenger *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *p_shared_weak_owners;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  __CFDictionary *Mutable;
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  CFStringRef v85;
  void *v86;
  pid_t v87;
  std::string *v88;
  CFStringRef v89;
  void *v90;
  void *v91;
  uint64_t v92;
  std::string::size_type v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  NSObject *v99;
  int *v100;
  NSObject *v101;
  int AppIntegerValue;
  BOOL v103;
  char v104;
  NSObject *v105;
  NSObject *v106;
  int v108;
  NSObject *v109;
  uint64_t v110;
  __int128 v111;
  ausdk::AUBase *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  size_t v116;
  uint64_t *v117;
  std::string v118;
  void *v119;
  void *value;
  _BYTE buf[20];
  _BYTE v122[12];
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  std::string::value_type v129[789];
  int v130[2];
  int v131;
  pid_t v132;
  char v133;
  _QWORD v134[3];
  _QWORD *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  *(_QWORD *)v3 = &off_1E69D3298;
  *((_WORD *)v3 + 264) = 0;
  *(_QWORD *)((char *)v3 + 532) = 0x100000001;
  *(_QWORD *)((char *)v3 + 540) = 0x42C8000000000000;
  *(_OWORD *)((char *)v3 + 548) = 0u;
  v112 = v3;
  v4 = _get_cpu_capabilities() & 0x78000000;
  if (!v4)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      _os_log_debug_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%s:%i non-AMX iOS device: HQ model not supported", buf, 0x12u);
    }
  }
  v6 = 0;
  v7 = 0;
  *(_BYTE *)(a1 + 564) = v4 != 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 572) = 0;
  *(_QWORD *)(a1 + 592) = 1;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  v8 = (uint64_t **)(a1 + 680);
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(_DWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[16] = 1;
  *(_QWORD *)&v122[4] = 0;
  v123 = 2;
  v124 = 0;
  v125 = 3;
  v126 = 0;
  v127 = 4;
  v128 = 0;
  v9 = (uint64_t *)(a1 + 688);
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  v10 = (uint64_t *)(a1 + 688);
  *(_QWORD *)(a1 + 680) = a1 + 688;
  while (1)
  {
    v11 = (int *)&buf[16 * v7];
    v12 = v9;
    if (v10 == v9)
      goto LABEL_13;
    v13 = v6;
    v14 = v9;
    if (v6)
    {
      do
      {
        v12 = v13;
        v13 = (uint64_t *)v13[1];
      }
      while (v13);
    }
    else
    {
      do
      {
        v12 = (uint64_t *)v14[2];
        v103 = *v12 == (_QWORD)v14;
        v14 = v12;
      }
      while (v103);
    }
    v15 = *v11;
    if (*((_DWORD *)v12 + 8) < *v11)
    {
LABEL_13:
      v16 = (uint64_t **)(v6 ? v12 : v9);
      v17 = (uint64_t **)(v6 ? v12 + 1 : v9);
    }
    else
    {
      v16 = (uint64_t **)v9;
      v17 = (uint64_t **)v9;
      if (v6)
      {
        v21 = v6;
        v17 = (uint64_t **)v9;
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v21;
            v22 = *((_DWORD *)v21 + 8);
            if (v15 >= v22)
              break;
            v21 = *v16;
            v17 = v16;
            if (!*v16)
              goto LABEL_20;
          }
          if (v22 >= v15)
            break;
          v17 = v16 + 1;
          v21 = v16[1];
          if (!v21)
            goto LABEL_20;
        }
      }
    }
    if (!*v17)
    {
LABEL_20:
      v18 = operator new(0x30uLL);
      *(_QWORD *)&v114 = v9;
      v18[8] = *v11;
      v19 = &buf[16 * v7];
      v20 = *((_QWORD *)v19 + 1);
      if (v20)
        CFRetain(*((CFTypeRef *)v19 + 1));
      *((_QWORD *)v18 + 5) = v20;
      BYTE8(v114) = 1;
      std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v8, (uint64_t)v16, v17, (uint64_t *)v18);
      v113 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&v113);
    }
    if (++v7 == 5)
      break;
    v6 = (uint64_t *)*v9;
    v10 = *v8;
  }
  for (i = 72; i != -8; i -= 16)
  {
    v24 = *(void **)&buf[i];
    if (v24)
      CFRelease(v24);
  }
  *((_BYTE *)v112 + 704) = 0;
  *((_BYTE *)v112 + 712) = 0;
  *((_OWORD *)v112 + 45) = 0u;
  *((_OWORD *)v112 + 46) = 0u;
  *((_BYTE *)v112 + 752) = 0;
  if (DSPGraph::ABIVersion((DSPGraph *)v24) == 4)
  {
    if (getAUSoundIsolationLog(void)::onceToken == -1)
      goto LABEL_39;
  }
  else
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8881);
    v109 = (id)DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v109, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: DSPGraph ABI runtime/compile-time mismatch", buf, 2u);
    }

    qword_1EF134C88 = (uint64_t)buf;
    __break(1u);
  }
  dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
LABEL_39:
  v25 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 247;
    _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEFAULT, "%s:%i will try to construct", buf, 0x12u);
  }
  ausdk::AUBase::CreateElements((int64x2_t *)v112);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v26 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 250;
    _os_log_debug_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%s:%i set the default ioFormat", buf, 0x12u);
  }
  v113 = 0x40E7700000000000;
  v114 = xmmword_1B6626900;
  v115 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUBase *)((char *)v112 + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v113);
  v28 = ausdk::AUScope::SafeGetElement((ausdk::AUBase *)((char *)v112 + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 56))(v28, &v113);
  (*(void (**)(ausdk::AUBase *, uint64_t))(*(_QWORD *)v112 + 512))(v112, 1156);
  *((_DWORD *)v112 + 144) = 1;
  *((_QWORD *)v112 + 71) = 0x42C8000000000001;
  *((_BYTE *)v112 + 580) = 0;
  *((_DWORD *)v112 + 146) = 0;
  v29 = *((_QWORD *)v112 + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)v112 + 6);
    if (*((ausdk::AUElement ***)v112 + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 0, 100.0, 0);
  v32 = *((_QWORD *)v112 + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)v112 + 6);
    if (*((ausdk::AUElement ***)v112 + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 1u, 1.0, 0);
  v35 = *((_QWORD *)v112 + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)v112 + 6);
    if (*((ausdk::AUElement ***)v112 + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0x17626u, 0.0, 0);
  v38 = *((_QWORD *)v112 + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)v112 + 6);
    if (*((ausdk::AUElement ***)v112 + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0x17627u, 0.0, 0);
  *((_DWORD *)v112 + 136) = *((_DWORD *)v112 + 143);
  v42 = caulk::concurrent::messenger::shared_logging_priority(v41);
  std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>((uint64_t *)buf, 0, v42);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v112 + 720, (__int128 *)buf);
  v43 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v46 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1934;
    _os_log_debug_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%s:%i will create metrics reporter", buf, 0x12u);
  }
  v47 = *((_QWORD *)v112 + 90);
  v48 = (std::__shared_weak_count *)*((_QWORD *)v112 + 91);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
  }
  v134[0] = &off_1E69D35F8;
  v135 = v134;
  v51 = operator new();
  if (v48)
  {
    v52 = (unint64_t *)&v48->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v134);
    *(_QWORD *)v51 = 0;
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = v47;
    *(_QWORD *)(v51 + 24) = v48;
    do
      v54 = __ldxr(v52);
    while (__stxr(v54 + 1, v52));
  }
  else
  {
    std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v134);
    *(_QWORD *)v51 = 0;
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = v47;
    *(_QWORD *)(v51 + 24) = 0;
  }
  std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100](v51 + 32, (uint64_t)buf);
  *(_QWORD *)(v51 + 64) = 850045863;
  *(_OWORD *)(v51 + 72) = 0u;
  *(_OWORD *)(v51 + 88) = 0u;
  *(_OWORD *)(v51 + 104) = 0u;
  *(_OWORD *)(v51 + 120) = 0u;
  *(_OWORD *)(v51 + 136) = 0u;
  *(_QWORD *)(v51 + 152) = 30;
  *(_OWORD *)(v51 + 160) = 0u;
  *(_OWORD *)(v51 + 176) = 0u;
  *(_DWORD *)(v51 + 192) = 1065353216;
  v55 = (std::__shared_weak_count *)operator new();
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CF9E8;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
  v57 = *(std::__shared_weak_count **)(v51 + 8);
  if (v57)
  {
    if (v57->__shared_owners_ != -1)
      goto LABEL_99;
    do
      v58 = __ldxr(v56);
    while (__stxr(v58 + 1, v56));
    p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v60 = __ldxr(p_shared_weak_owners);
    while (__stxr(v60 + 1, p_shared_weak_owners));
    *(_QWORD *)v51 = v51;
    *(_QWORD *)(v51 + 8) = v55;
    std::__shared_weak_count::__release_weak(v57);
  }
  else
  {
    do
      v61 = __ldxr(v56);
    while (__stxr(v61 + 1, v56));
    v62 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    *(_QWORD *)v51 = v51;
    *(_QWORD *)(v51 + 8) = v55;
  }
  do
    v64 = __ldaxr(v56);
  while (__stlxr(v64 - 1, v56));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_99:
  *(_QWORD *)&v65 = v51;
  v66 = *(_QWORD **)&v122[4];
  if (*(_BYTE **)&v122[4] == buf)
  {
    v110 = v51;
    v67 = 4;
    v66 = buf;
    goto LABEL_103;
  }
  if (*(_QWORD *)&v122[4])
  {
    v110 = v51;
    v67 = 5;
LABEL_103:
    (*(void (**)(void))(*v66 + 8 * v67))();
    *(_QWORD *)&v65 = v110;
  }
  *((_QWORD *)&v65 + 1) = v55;
  if (v48)
  {
    v68 = (unint64_t *)&v48->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      v111 = v65;
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      v65 = v111;
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)v112 + 93);
  *((_OWORD *)v112 + 46) = v65;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v135;
  if (v135 == v134)
  {
    v74 = 4;
    v73 = v134;
    goto LABEL_118;
  }
  if (v135)
  {
    v74 = 5;
LABEL_118:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  if (v48)
  {
    v75 = (unint64_t *)&v48->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (*((_BYTE *)v112 + 712))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v77 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
    {
      v78 = *((_QWORD *)v112 + 88);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1894;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)v122 = v78;
      _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_INFO, "%s:%i internal CAReporterID is already set to %llu", buf, 0x1Cu);
    }
    goto LABEL_175;
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v79 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1898;
    _os_log_debug_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEBUG, "%s:%i will setup internal CAReporterID", buf, 0x12u);
  }
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  if (AudioStatisticsLibraryLoader(void)::libSym)
  {
    AudioStatisticsLibraryLoader(void)::libSym();
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym)
  {
    v80 = AudioStatisticsLibraryLoader(void)::libSym();
    v81 = AudioStatisticsLibraryLoader(void)::once;
    *((_QWORD *)v112 + 88) = v80;
    *((_BYTE *)v112 + 712) = 1;
    if (v81 != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  }
  else
  {
    v80 = 0;
    *((_QWORD *)v112 + 88) = 0;
    *((_BYTE *)v112 + 712) = 1;
  }
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(v80, 0);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MainBundle = CFBundleGetMainBundle();
  Identifier = CFBundleGetIdentifier(MainBundle);
  v85 = Identifier;
  if (!Identifier)
  {
    value = 0;
LABEL_148:
    v87 = getpid();
    memset(&v118, 0, sizeof(v118));
    bzero(buf, 0x288uLL);
    v116 = 648;
    *(_QWORD *)v130 = 0xE00000001;
    v131 = 1;
    v132 = v87;
    if (sysctl(v130, 4u, buf, &v116, 0, 0) == -1)
    {
      perror("sysctl");
    }
    else if (v116)
    {
      std::string::__assign_external(&v118, v129);
    }
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v118;
    else
      v88 = (std::string *)v118.__r_.__value_.__r.__words[0];
    v89 = CFStringCreateWithCString(0, (const char *)v88, 0x8000100u);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v119, v89);
    v91 = v119;
    v90 = value;
    v119 = value;
    value = v91;
    if (v119)
      CFRelease(v90);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    v86 = value;
    goto LABEL_159;
  }
  CFRetain(Identifier);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&value, v85);
  v86 = value;
  if (!value)
    goto LABEL_148;
LABEL_159:
  CFDictionaryAddValue(Mutable, CFSTR("HostApplicationDisplayID"), v86);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v118, Mutable);
  v92 = *((_QWORD *)v112 + 88);
  v93 = v118.__r_.__value_.__r.__words[0];
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  if (AudioStatisticsLibraryLoader(void)::libSym)
  {
    AudioStatisticsLibraryLoader(void)::libSym(v92, v93);
    v94 = *((_QWORD *)v112 + 88);
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  }
  else
  {
    v94 = *((_QWORD *)v112 + 88);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(v94);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v95 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1918;
    _os_log_debug_impl(&dword_1B5ED0000, v95, OS_LOG_TYPE_DEBUG, "%s:%i interal CAReporterID successfully initialized", buf, 0x12u);
  }
  if (v118.__r_.__value_.__r.__words[0])
    CFRelease(v118.__r_.__value_.__l.__data_);
  if (value)
    CFRelease(value);
LABEL_175:
  v96 = *((_QWORD *)v112 + 88);
  v97 = operator new(8uLL);
  *v97 = v96;
  LOBYTE(v116) = 2;
  *(_QWORD *)buf = v97;
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)(v97 + 1);
  v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((uint64_t **)buf, (uint64_t **)&v118);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
  v98 = *((_QWORD *)v112 + 92);
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  v118.__r_.__value_.__l.__size_ = (std::string::size_type)(v97 + 1);
  v118.__r_.__value_.__r.__words[2] = (std::string::size_type)(v97 + 1);
  AU::SoundIsolation::MetricsReporter::setCAReporterIDs(v98, (uint64_t)&v118);
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v99 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v116, -1, 0x20u, 0, 0, v130);
    v100 = v133 >= 0 ? v130 : *(int **)v130;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1944;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)v122 = v100;
    _os_log_impl(&dword_1B5ED0000, v99, OS_LOG_TYPE_INFO, "%s:%i set CoreAudio reporter IDs to internal reporter - %s", buf, 0x1Cu);
    if (v133 < 0)
      operator delete(*(void **)v130);
  }

  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v101 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1946;
    _os_log_debug_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_DEBUG, "%s:%i metrics reporter created", buf, 0x12u);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v117, v116);
  buf[0] = 0;
  AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("auvois_show_internal_params"), CFSTR("com.apple.coreaudio"), buf);
  if (buf[0])
    v103 = AppIntegerValue == 0;
  else
    v103 = 1;
  v104 = !v103;
  *((_BYTE *)v112 + 752) = v104;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v105 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v108 = *((unsigned __int8 *)v112 + 752);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 271;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)v122 = v108;
    _os_log_debug_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_DEBUG, "%s:%i show internal params set to %u", buf, 0x18u);
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  }
  v106 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 273;
    _os_log_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_DEFAULT, "%s:%i constructed", buf, 0x12u);
  }
  return v112;
}

void sub_1B61FDF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, ausdk::AUBase *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,CFTypeRef cf,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSpatialMixerV2>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

AudioComponent RegisterAudioUnits_Analyzer()
{
  AudioComponentDescription v1;

  *(_OWORD *)&v1.componentType = xmmword_1B66A1130;
  v1.componentFlagsMask = 0;
  AudioComponentRegister(&v1, CFSTR("Apple: AUSilenceNonFiniteAnalyzer"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSilenceNonFiniteAnalyzer>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1B66A1140;
  v1.componentFlagsMask = 0;
  AudioComponentRegister(&v1, CFSTR("Apple: AUSPLMeter"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSPLMeter>::Factory);
  *(_OWORD *)&v1.componentType = xmmword_1B66A1150;
  v1.componentFlagsMask = 0;
  return AudioComponentRegister(&v1, CFSTR("Apple: AUCrossCorrelator"), 0x10000u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessLookup,AUCrossCorrelator>::Factory);
}

AudioComponent RegisterAudioUnits_Internal()
{
  if (CACFPreferencesGetAppBooleanValue(CFSTR("AllAUsPublic"), CFSTR("com.apple.coreaudio"), 0))
    return RegisterInternalAudioUnits_iOS(0);
  else
    return RegisterInternalAudioUnits_iOS(0x8000u);
}

AudioComponent RegisterAudioUnits_InternalUnsearchable()
{
  if (CACFPreferencesGetAppBooleanValue(CFSTR("AllAUsPublic"), CFSTR("com.apple.coreaudio"), 0))
    return RegisterInternalAudioUnits_iOS(1u);
  else
    return RegisterInternalAudioUnits_iOS(0x8001u);
}

AudioComponent RegisterAUVoiceIsolation_Unsearchable()
{
  AudioComponent result;
  AudioComponentDescription v1;
  AudioComponentDescription inDesc;

  v1.componentFlagsMask = 0;
  *(_OWORD *)&v1.componentType = *(_OWORD *)"xfuasiovlppa";
  result = AudioComponentFindNext(0, &v1);
  if (!result)
  {
    *(_OWORD *)&inDesc.componentType = xmmword_1B66A1160;
    inDesc.componentFlagsMask = 0;
    return AudioComponentRegister(&inDesc, CFSTR("Apple: AUSoundIsolation"), 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUSoundIsolation>::Factory);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::default_delete<AU::FTSpatialAC::MetricsReporter>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 160);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 144);
    *(_QWORD *)(v1 + 144) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(void **)(v1 + 112);
    if (v5)
    {
      *(_QWORD *)(v1 + 120) = v5;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 48));
    v6 = *(_QWORD **)(v1 + 40);
    if (v6 == (_QWORD *)(v1 + 16))
    {
      v7 = 4;
      v6 = (_QWORD *)(v1 + 16);
    }
    else
    {
      if (!v6)
        goto LABEL_14;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
    v8 = *(std::__shared_weak_count **)(v1 + 8);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__shared_ptr_pointer<AU::FTSpatialAC::MetricsReporter *,std::shared_ptr<AU::FTSpatialAC::MetricsReporter>::__shared_ptr_default_delete<AU::FTSpatialAC::MetricsReporter,AU::FTSpatialAC::MetricsReporter>,std::allocator<AU::FTSpatialAC::MetricsReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<AU::FTSpatialAC::MetricsReporter *,std::shared_ptr<AU::FTSpatialAC::MetricsReporter>::__shared_ptr_default_delete<AU::FTSpatialAC::MetricsReporter,AU::FTSpatialAC::MetricsReporter>,std::allocator<AU::FTSpatialAC::MetricsReporter>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AU::FTSpatialAC::MetricsReporter>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

void AU::FTSpatialAC::MetricsReporter::getCAReporterIDs(AU::FTSpatialAC::MetricsReporter *this, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a2 + 48);
  std::mutex::lock((std::mutex *)(a2 + 48));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  std::mutex::unlock(v4);
}

void sub_1B61FE578(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~rt_message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69CB0E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69CB0E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  caulk::concurrent::message *v2;

  v2 = (caulk::concurrent::message *)a1;
  AU::FTSpatialAC::MetricsReporter::report(*(_QWORD *)(a1 + 24), a1 + 40, (unsigned int *)(a1 + 96), (_QWORD *)(a1 + 104));
  return caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B61FE640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void AU::FTSpatialAC::MetricsReporter::report(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4)
{
  unint64_t v4;
  std::mutex *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  void **v43;
  unsigned __int8 *v44;
  void **v45;
  unsigned __int8 *v46;
  void **v47;
  unsigned __int8 *v48;
  void **v49;
  unsigned __int8 *v50;
  void **v51;
  unsigned __int8 *v52;
  void **v53;
  _QWORD *v54;
  int v55;
  unsigned __int8 *v56;
  void **v57;
  uint64_t *v58;
  uint64_t *v59;
  CFTypeRef v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  CFTypeRef v64;
  CFTypeRef cf;
  void *__p[2];
  char v67;
  std::string v68;
  _OWORD v69[2];
  int v70;
  void **v71;

  v9 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v10 = *a3;
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    goto LABEL_33;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a3;
    if (v11 <= v10)
      v13 = v10 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & v10;
  }
  v14 = *(uint64_t ***)(*(_QWORD *)(a1 + 144) + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_18:
    if (v12.u32[0] > 1uLL)
    {
      v4 = *a3;
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v17 = *(uint64_t ***)(*(_QWORD *)(a1 + 144) + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = (uint64_t *)*i)
      {
        v19 = i[1];
        if (v19 == v10)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v10)
            goto LABEL_89;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v19 >= v11)
              v19 %= v11;
          }
          else
          {
            v19 &= v11 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
LABEL_33:
    v20 = operator new(0x20uLL);
    *v20 = 0;
    v20[1] = v10;
    *((_DWORD *)v20 + 4) = v10;
    v20[3] = *a4;
    v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 168) + 1);
    v22 = *(float *)(a1 + 176);
    if (v11 && (float)(v22 * (float)v11) >= v21)
    {
      v10 = v4;
      goto LABEL_79;
    }
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v11 = *(_QWORD *)(a1 + 152);
    }
    if (*(_QWORD *)&prime <= v11)
    {
      if (*(_QWORD *)&prime >= v11)
        goto LABEL_75;
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 168) / *(float *)(a1 + 176));
      if (v11 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 152);
        goto LABEL_75;
      }
      if (!*(_QWORD *)&prime)
      {
        v63 = *(void **)(a1 + 144);
        *(_QWORD *)(a1 + 144) = 0;
        if (v63)
          operator delete(v63);
        v11 = 0;
        *(_QWORD *)(a1 + 152) = 0;
        goto LABEL_75;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v27 = operator new(8 * *(_QWORD *)&prime);
    v28 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *(int8x8_t *)(a1 + 152) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v29++) = 0;
    while (*(_QWORD *)&prime != v29);
    v30 = *(_QWORD **)(a1 + 160);
    if (v30)
    {
      v31 = v30[1];
      v32 = (uint8x8_t)vcnt_s8(prime);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        if (v31 >= *(_QWORD *)&prime)
          v31 %= *(_QWORD *)&prime;
      }
      else
      {
        v31 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v31) = a1 + 160;
      v36 = (_QWORD *)*v30;
      if (*v30)
      {
        do
        {
          v37 = v36[1];
          if (v32.u32[0] > 1uLL)
          {
            if (v37 >= *(_QWORD *)&prime)
              v37 %= *(_QWORD *)&prime;
          }
          else
          {
            v37 &= *(_QWORD *)&prime - 1;
          }
          if (v37 != v31)
          {
            v38 = *(_QWORD *)(a1 + 144);
            if (!*(_QWORD *)(v38 + 8 * v37))
            {
              *(_QWORD *)(v38 + 8 * v37) = v30;
              goto LABEL_71;
            }
            *v30 = *v36;
            *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * v37);
            **(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * v37) = v36;
            v36 = v30;
          }
          v37 = v31;
LABEL_71:
          v30 = v36;
          v36 = (_QWORD *)*v36;
          v31 = v37;
        }
        while (v36);
      }
    }
    v11 = (unint64_t)prime;
LABEL_75:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v10 %= v11;
    }
    else
    {
      v10 = ((_DWORD)v11 - 1) & v10;
    }
LABEL_79:
    v39 = *(_QWORD *)(a1 + 144);
    v40 = *(_QWORD **)(v39 + 8 * v10);
    if (v40)
    {
      *v20 = *v40;
    }
    else
    {
      *v20 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v20;
      *(_QWORD *)(v39 + 8 * v10) = a1 + 160;
      if (!*v20)
      {
LABEL_88:
        ++*(_QWORD *)(a1 + 168);
        goto LABEL_89;
      }
      v41 = *(_QWORD *)(*v20 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11)
          v41 %= v11;
      }
      else
      {
        v41 &= v11 - 1;
      }
      v40 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v41);
    }
    *v40 = v20;
    goto LABEL_88;
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= v11)
        v16 %= v11;
    }
    else
    {
      v16 &= v11 - 1;
    }
    if (v16 != v13)
      goto LABEL_18;
LABEL_17:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_18;
  }
  if (*((_DWORD *)v15 + 4) != (_DWORD)v10)
    goto LABEL_17;
  if ((*a4 - v15[3]) / 1000000 >= *(_QWORD *)(a1 + 136))
  {
    v15[3] = *a4;
LABEL_89:
    memset(v69, 0, sizeof(v69));
    v70 = 1065353216;
    if (*(_BYTE *)(a2 + 4))
    {
      std::to_string(&v68, *(float *)a2);
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_window_x");
      v71 = __p;
      v42 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v43 = (void **)(v42 + 40);
      if ((char)v42[63] < 0)
        operator delete(*v43);
      *(std::string *)v43 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 12))
    {
      std::to_string(&v68, *(float *)(a2 + 8));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_window_y");
      v71 = __p;
      v44 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v45 = (void **)(v44 + 40);
      if ((char)v44[63] < 0)
        operator delete(*v45);
      *(std::string *)v45 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 20))
    {
      std::to_string(&v68, *(float *)(a2 + 16));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_aspect_ratio_in_portrait_orientation");
      v71 = __p;
      v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v47 = (void **)(v46 + 40);
      if ((char)v46[63] < 0)
        operator delete(*v47);
      *(std::string *)v47 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 28))
    {
      std::to_string(&v68, *(float *)(a2 + 24));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_aspect_ratio_in_landscape_orientation");
      v71 = __p;
      v48 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v49 = (void **)(v48 + 40);
      if ((char)v48[63] < 0)
        operator delete(*v49);
      *(std::string *)v49 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
    if (*(_DWORD *)(a2 + 32))
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v68, (_QWORD *)(a2 + 32));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_cx_bitset");
      v71 = __p;
      v50 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v51 = (void **)(v50 + 40);
      if ((char)v50[63] < 0)
        operator delete(*v51);
      *(std::string *)v51 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
        operator delete(__p[0]);
    }
    if (*(_DWORD *)(a2 + 40))
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v68, (_QWORD *)(a2 + 40));
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_cy_bitset");
      v71 = __p;
      v52 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v53 = (void **)(v52 + 40);
      if ((char)v52[63] < 0)
        operator delete(*v53);
      *(std::string *)v53 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
        operator delete(__p[0]);
    }
    v55 = *(_DWORD *)(a2 + 48);
    v54 = (_QWORD *)(a2 + 48);
    if (v55)
    {
      std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v68, v54);
      std::string::basic_string[abi:ne180100]<0>(__p, "ftac_invalid_client_all_zero_bitset");
      v71 = __p;
      v56 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v71);
      v57 = (void **)(v56 + 40);
      if ((char)v56[63] < 0)
        operator delete(*v57);
      *(std::string *)v57 = v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      if (v67 < 0)
        operator delete(__p[0]);
    }
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, (uint64_t)v69);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v69);
    v58 = *(uint64_t **)(a1 + 112);
    v59 = *(uint64_t **)(a1 + 120);
    v60 = cf;
    while (v58 != v59)
    {
      v61 = *v58;
      if (v60)
        CFRetain(v60);
      v64 = v60;
      *(_QWORD *)&v69[0] = v61;
      v62 = *(_QWORD *)(a1 + 40);
      if (!v62)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _OWORD *, CFTypeRef *))(*(_QWORD *)v62 + 48))(v62, v69, &v64);
      if (v64)
        CFRelease(v64);
      ++v58;
    }
    if (v60)
      CFRelease(v60);
  }
  std::mutex::unlock(v9);
}

void sub_1B61FEF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::mutex *v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a23);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69CB0E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 112, 8);
  return a1;
}

_OWORD *std::bitset<32ul>::to_string[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, _QWORD *a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;

  result = operator new(0x28uLL);
  v5 = 0;
  *a1 = (uint64_t)result;
  *(_OWORD *)(a1 + 1) = xmmword_1B66A1170;
  *(_QWORD *)&v6 = 0x3030303030303030;
  *((_QWORD *)&v6 + 1) = 0x3030303030303030;
  *result = v6;
  result[1] = v6;
  *((_BYTE *)result + 32) = 0;
  v7 = 31;
  do
  {
    if (((*a2 >> v5) & 1) != 0)
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = (uint64_t *)*a1;
      *((_BYTE *)v8 + v7) = 49;
    }
    ++v5;
    --v7;
  }
  while (v5 != 32);
  return result;
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, uint64_t a2)
{
  const UInt8 *i;
  CFDictionaryRef CFDictionaryRef;
  void **v6[3];
  void ***v7;

  memset(v6, 0, sizeof(v6));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v6, *(_QWORD *)(a2 + 24));
  for (i = (const UInt8 *)(a2 + 16);
        ;
        std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(v6, i + 16, (uint64_t)(i + 40)))
  {
    i = *(const UInt8 **)i;
    if (!i)
      break;
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v6);
  v7 = v6;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  *a1 = CFDictionaryRef;
}

void sub_1B61FF1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(_QWORD *a1, const UInt8 *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  CFStringRef *v18;
  CFStringRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v12 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v13 = v7 - *a1;
    v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v21 = v6;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
    else
      v16 = 0;
    v17 = v16;
    v18 = (CFStringRef *)&v16[16 * v12];
    v20 = &v16[16 * v15];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v11 = a1[1];
    result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    v11 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1B61FF2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  std::runtime_error *exception;
  std::runtime_error *v14;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a3;
  else
    v9 = *(const UInt8 **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  return a1;
}

void sub_1B61FF408(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69CB0E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69CB0E8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void caulk::concurrent::details::message_call<AU::FTSpatialAC::MetricsReporter::reportAsync(AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::FTSpatialAC::MetricsReporter::Issue const&,caulk::option_set<AU::FTSpatialAC::MetricsReporter::IssueTag,unsigned int> const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  AU::FTSpatialAC::MetricsReporter::report(*(_QWORD *)(a1 + 24), a1 + 40, (unsigned int *)(a1 + 96), (_QWORD *)(a1 + 104));
}

void AUScotty::~AUScotty(AUScotty *this)
{
  AUScotty::~AUScotty(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69CB110;
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v3 = (_QWORD *)*v3;
    v5 = 136315394;
    v6 = v3;
    v7 = 2080;
    v8 = "~AUScotty";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Destructing", (uint8_t *)&v5, 0x16u);
  }
  v4 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUScotty::Initialize(AUScotty *this)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  const char *v9;
  char *v10;
  double v11;
  int v12;
  char v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  float v19;
  char *v20;
  float v21;
  float v22;
  uint32x2_t v23;
  NSObject *v24;
  double v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  NSObject *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  char *v41;
  const char *v42;
  char *v43;
  char *v44;
  char *v45;
  const char *v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  char **v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  int v54;
  uint64_t v55;
  _BYTE v56[32];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  std::string v61;
  std::string v62;
  _BYTE buf[32];
  uint64_t v64;
  uint8_t v65[4];
  char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  double v70;
  __int16 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Initialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing", buf, 0x16u);
  }
  v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0) + 108);
  v5 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0) + 108);
  (*(void (**)(__int128 *__return_ptr, AUScotty *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v58, this, 1, 0);
  *(_OWORD *)buf = v58;
  *(_OWORD *)&buf[16] = v59;
  v64 = v60;
  (*(void (**)(_BYTE *__return_ptr, AUScotty *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(v56, this, 2, 0);
  v58 = *(_OWORD *)v56;
  v59 = *(_OWORD *)&v56[16];
  v60 = v57;
  *(_OWORD *)&v56[8] = xmmword_1B6626900;
  *(_DWORD *)&v56[24] = 4;
  *(_DWORD *)&v56[28] = v4;
  v57 = 32;
  v51 = *(_QWORD *)buf;
  v52 = xmmword_1B6626900;
  v53 = 4;
  v54 = v5;
  v55 = 32;
  *(_QWORD *)v56 = *(_QWORD *)buf;
  v6 = (*(uint64_t (**)(AUScotty *, uint64_t, _QWORD, _BYTE *, _BYTE *))(*(_QWORD *)this + 400))(this, 1, 0, buf, v56);
  if ((_DWORD)v6)
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v7 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v8 = (char *)this + 528;
      if (*((char *)this + 551) < 0)
        v8 = *(char **)v8;
      *(_DWORD *)v65 = 136315650;
      v66 = v8;
      v67 = 2080;
      v68 = "Initialize";
      v69 = 1024;
      LODWORD(v70) = v6;
      v9 = "[%s|%s] Error with input stream format with error code %d";
LABEL_21:
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v9, v65, 0x1Cu);
      return v6;
    }
    return v6;
  }
  v6 = (*(uint64_t (**)(AUScotty *, uint64_t, _QWORD, __int128 *, uint64_t *))(*(_QWORD *)this + 400))(this, 2, 0, &v58, &v51);
  if (!(_DWORD)v6)
  {
    v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0) + 80);
    v12 = *((_DWORD *)this + 84);
    v13 = *((_BYTE *)this + 376);
    v14 = operator new();
    if (*((char *)this + 551) < 0)
      std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)this + 66), *((_QWORD *)this + 67));
    else
      v61 = *(std::string *)((_BYTE *)this + 22);
    v50 = (char **)((char *)this + 528);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v62, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    else
      v62 = v61;
    *(_QWORD *)v14 = off_1E69E7148;
    *(_WORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 12) = -1;
    *(double *)(v14 + 24) = v11;
    *(_BYTE *)(v14 + 32) = 1;
    *(_QWORD *)(v14 + 40) = (char *)this + 592;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = 0;
    *(_DWORD *)(v14 + 64) = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v14 + 68));
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v14 + 72));
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    *(_QWORD *)(v14 + 96) = 1065353216;
    *(_DWORD *)(v14 + 104) = 0;
    *(_BYTE *)(v14 + 108) = v13;
    *(_DWORD *)(v14 + 112) = v12;
    *(_BYTE *)(v14 + 116) = 1;
    *(_DWORD *)(v14 + 120) = 0;
    *(_OWORD *)(v14 + 128) = 0u;
    v15 = (char *)(v14 + 296);
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 192) = 0u;
    *(_OWORD *)(v14 + 208) = 0u;
    *(_OWORD *)(v14 + 224) = 0u;
    *(_OWORD *)(v14 + 240) = 0u;
    *(_OWORD *)(v14 + 256) = 0u;
    *(_OWORD *)(v14 + 272) = 0u;
    *(_DWORD *)(v14 + 288) = 0;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v14 + 296), v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
      *(_QWORD *)(v14 + 312) = *((_QWORD *)&v62.__r_.__value_.__l + 2);
    }
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v16 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v17 = v14 + 296;
      if (*(char *)(v14 + 319) < 0)
        v17 = *(_QWORD *)v15;
      *(_DWORD *)v65 = 136315394;
      v66 = (char *)v17;
      v67 = 2080;
      v68 = "ScottyUpmixer";
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Constructing", v65, 0x16u);
    }
    if (v11 < 0.0)
    {
      if (getScottyLog(void)::onceToken != -1)
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
      v18 = getScottyLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v14 + 319) < 0)
          v15 = *(char **)v15;
        *(_DWORD *)v65 = 136315394;
        v66 = v15;
        v67 = 2080;
        v68 = "ScottyUpmixer";
        _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] Sample rate must be greater than zero", v65, 0x16u);
      }
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    *(_QWORD *)v14 = &off_1E69D2AB8;
    v19 = v11;
    *(float *)(v14 + 320) = v19;
    *(_DWORD *)(v14 + 324) = 0;
    *(_BYTE *)(v14 + 328) = 0;
    *(_QWORD *)(v14 + 332) = 0;
    *(_QWORD *)(v14 + 340) = 0;
    *(_DWORD *)(v14 + 348) = 1065353216;
    *(_QWORD *)(v14 + 352) = 2;
    *(_QWORD *)(v14 + 360) = 0x13F353BEFLL;
    *(_DWORD *)(v14 + 368) = 1;
    *(_OWORD *)(v14 + 372) = xmmword_1B66A1180;
    *(_OWORD *)(v14 + 388) = xmmword_1B66A1190;
    *(_OWORD *)(v14 + 404) = xmmword_1B66A11A0;
    *(_OWORD *)(v14 + 420) = xmmword_1B66A11B0;
    *(_QWORD *)(v14 + 436) = 0xC1F0000042B40000;
    *(_DWORD *)(v14 + 444) = 1;
    *(_BYTE *)(v14 + 448) = 0;
    *(_QWORD *)(v14 + 464) = 0;
    *(_QWORD *)(v14 + 472) = 0;
    *(_BYTE *)(v14 + 460) = 0;
    *(_QWORD *)(v14 + 452) = 0;
    *(_QWORD *)(v14 + 480) = 0x23F800000;
    *(_QWORD *)(v14 + 488) = 0x3F353BEF00000000;
    *(_QWORD *)(v14 + 496) = 0x100000001;
    *(_OWORD *)(v14 + 504) = xmmword_1B66A1180;
    *(_OWORD *)(v14 + 520) = xmmword_1B66A1190;
    *(_OWORD *)(v14 + 536) = xmmword_1B66A11A0;
    *(_OWORD *)(v14 + 552) = xmmword_1B66A11B0;
    *(_QWORD *)(v14 + 568) = 0xC1F0000042B40000;
    *(_DWORD *)(v14 + 576) = 1;
    *(_BYTE *)(v14 + 580) = 0;
    *(_QWORD *)(v14 + 584) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v14 + 592) = 0xFF00000000;
    *(_DWORD *)(v14 + 632) = 8;
    *(_OWORD *)(v14 + 640) = 0u;
    *(_OWORD *)(v14 + 656) = 0u;
    *(_OWORD *)(v14 + 672) = 0u;
    *(_OWORD *)(v14 + 688) = 0u;
    *(_OWORD *)(v14 + 704) = 0u;
    *(_OWORD *)(v14 + 720) = 0u;
    *(_OWORD *)(v14 + 736) = 0u;
    *(_OWORD *)(v14 + 752) = 0u;
    *(_OWORD *)(v14 + 768) = 0u;
    *(_OWORD *)(v14 + 784) = 0u;
    *(_OWORD *)(v14 + 800) = 0u;
    *(_OWORD *)(v14 + 816) = 0u;
    *(_OWORD *)(v14 + 832) = 0u;
    *(_OWORD *)(v14 + 848) = 0u;
    *(_OWORD *)(v14 + 864) = 0u;
    *(_OWORD *)(v14 + 880) = 0u;
    *(_OWORD *)(v14 + 896) = 0u;
    bzero((void *)(v14 + 944), 0x3D8uLL);
    *(_OWORD *)(v14 + 2408) = 0u;
    *(_OWORD *)(v14 + 2424) = 0u;
    *(_OWORD *)(v14 + 2376) = 0u;
    *(_OWORD *)(v14 + 2392) = 0u;
    *(_OWORD *)(v14 + 2344) = 0u;
    *(_OWORD *)(v14 + 2360) = 0u;
    *(_OWORD *)(v14 + 2312) = 0u;
    *(_OWORD *)(v14 + 2328) = 0u;
    *(_OWORD *)(v14 + 2280) = 0u;
    *(_OWORD *)(v14 + 2296) = 0u;
    *(_OWORD *)(v14 + 2248) = 0u;
    *(_OWORD *)(v14 + 2264) = 0u;
    *(_OWORD *)(v14 + 2216) = 0u;
    *(_OWORD *)(v14 + 2232) = 0u;
    *(_OWORD *)(v14 + 2184) = 0u;
    *(_OWORD *)(v14 + 2200) = 0u;
    *(_BYTE *)(v14 + 2440) = 1;
    v20 = (char *)(v14 + 2448);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v14 + 2448), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
      *(_QWORD *)(v14 + 2464) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v14 + 600) = 0u;
    *(_OWORD *)(v14 + 616) = 0u;
    v21 = log2f(v19 / 48000.0);
    v22 = exp2f(roundf(v21));
    *(_OWORD *)(v14 + 1928) = 0u;
    *(_OWORD *)(v14 + 1944) = 0u;
    *(_OWORD *)(v14 + 1960) = 0u;
    *(_OWORD *)(v14 + 1976) = 0u;
    *(_OWORD *)(v14 + 1992) = 0u;
    *(_OWORD *)(v14 + 2008) = 0u;
    *(_OWORD *)(v14 + 2024) = 0u;
    *(_OWORD *)(v14 + 2040) = 0u;
    *(_OWORD *)(v14 + 2056) = 0u;
    *(_OWORD *)(v14 + 2072) = 0u;
    *(_OWORD *)(v14 + 2088) = 0u;
    *(_OWORD *)(v14 + 2104) = 0u;
    *(_OWORD *)(v14 + 2120) = 0u;
    *(_OWORD *)(v14 + 2136) = 0u;
    *(_OWORD *)(v14 + 2152) = 0u;
    *(_OWORD *)(v14 + 2168) = 0u;
    v23 = vcvt_u32_f32(vrnda_f32(vmul_n_f32((float32x2_t)0x4500000044800000, v22)));
    *(uint32x2_t *)(v14 + 336) = v23;
    *(_DWORD *)(v14 + 344) = v23.i32[0];
    *(_DWORD *)(v14 + 356) = v23.i32[0];
    *(float *)(v14 + 348) = v22;
    *(float *)(v14 + 592) = expf(-1.0 / (float)((float)(*(float *)(v14 + 320) * 0.1) / (float)v23.u32[0]));
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v24 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v14 + 2471) < 0)
        v20 = *(char **)v20;
      v25 = *(float *)(v14 + 320);
      v26 = *(_DWORD *)(v14 + 344);
      *(_DWORD *)v65 = 136315906;
      v66 = v20;
      v67 = 2080;
      v68 = "ScottySTFTUpmixer";
      v69 = 2048;
      v70 = v25;
      v71 = 1024;
      v72 = v26;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "[%s|%s] Constructing : sample rate = %f, frame size = %u", v65, 0x26u);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    v27 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v14;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v4 - 1;
    if ((v4 - 1) >= 8 || ((0xA3u >> v28) & 1) == 0)
    {
      if (getScottyLog(void)::onceToken != -1)
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
      v29 = getScottyLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294967246;
      if (*((char *)this + 551) < 0)
        v44 = *v50;
      else
        v44 = (char *)this + 528;
      *(_DWORD *)v65 = 136315650;
      v66 = v44;
      v67 = 2080;
      v68 = "Initialize";
      v69 = 1024;
      LODWORD(v70) = v4;
      v46 = "[%s|%s] Unsupported input channel count %u";
LABEL_111:
      _os_log_error_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, v46, v65, 0x1Cu);
      return 4294967246;
    }
    v31 = dword_1B66479D8[v28];
    *((_DWORD *)this + 138) = v31;
    switch(v5)
    {
      case 1:
        v32 = 2;
        break;
      case 6:
        v32 = 0;
        break;
      case 8:
        v32 = 1;
        break;
      default:
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
        v29 = getScottyLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294967246;
        if (*((char *)this + 551) < 0)
          v43 = *v50;
        else
          v43 = (char *)this + 528;
        *(_DWORD *)v65 = 136315650;
        v66 = v43;
        v67 = 2080;
        v68 = "Initialize";
        v69 = 1024;
        LODWORD(v70) = v5;
        v46 = "[%s|%s] Unsupported output channel count %u";
        goto LABEL_111;
    }
    *((_DWORD *)this + 139) = v32;
    v33 = *((_QWORD *)this + 91);
    if (!v33)
    {
      v6 = 4294956429;
      goto LABEL_90;
    }
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 80))(v33);
    v35 = *((_QWORD *)this + 91);
    if (*(_BYTE *)(v35 + 108))
    {
      v36 = *(_DWORD *)(v35 + 112);
      if (!(v36 % (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35)))
      {
LABEL_74:
        v37 = *((_QWORD *)this + 91);
        if (!*(_BYTE *)(v37 + 8))
        {
          if (getScottyLog(void)::onceToken != -1)
            dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
          v38 = getScottyLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            v39 = (char *)(v37 + 296);
            if (*(char *)(v37 + 319) < 0)
              v39 = *(char **)v39;
            *(_DWORD *)v65 = 136315650;
            v66 = v39;
            v67 = 2080;
            v68 = "SetTargetLatency";
            v69 = 1024;
            LODWORD(v70) = v34;
            _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting target latency to %u", v65, 0x1Cu);
          }
          *(_DWORD *)(v37 + 104) = v34;
          v37 = *((_QWORD *)this + 91);
        }
        v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v31);
        if ((_DWORD)v6)
        {
          if (getScottyLog(void)::onceToken != -1)
            dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
          v40 = getScottyLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_103;
          v41 = (char *)this + 528;
          if (*((char *)this + 551) < 0)
            v41 = *v50;
          *(_DWORD *)v65 = 136315650;
          v66 = v41;
          v67 = 2080;
          v68 = "InitializeUpmixer";
          v69 = 1024;
          LODWORD(v70) = v6;
          v42 = "[%s|%s] Error setting upmixer input layout with error code %d";
        }
        else
        {
          v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 91) + 48))(*((_QWORD *)this + 91), v32);
          if ((_DWORD)v6)
          {
            if (getScottyLog(void)::onceToken != -1)
              dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
            v40 = getScottyLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_103;
            v49 = (char *)this + 528;
            if (*((char *)this + 551) < 0)
              v49 = *v50;
            *(_DWORD *)v65 = 136315650;
            v66 = v49;
            v67 = 2080;
            v68 = "InitializeUpmixer";
            v69 = 1024;
            LODWORD(v70) = v6;
            v42 = "[%s|%s] Error setting upmixer output layout with error code %d";
          }
          else
          {
            v47 = (_BYTE *)*((_QWORD *)this + 91);
            if (v47[8] || (v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v47 + 16))(v47), !(_DWORD)v6))
            {
              (*(void (**)(AUScotty *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
              AUScotty::UpdateParametersFromAU(this);
              return 0;
            }
            if (getScottyLog(void)::onceToken != -1)
              dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
            v40 = getScottyLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_103;
            v48 = (char *)this + 528;
            if (*((char *)this + 551) < 0)
              v48 = *v50;
            *(_DWORD *)v65 = 136315650;
            v66 = v48;
            v67 = 2080;
            v68 = "InitializeUpmixer";
            v69 = 1024;
            LODWORD(v70) = v6;
            v42 = "[%s|%s] Error with upmixer initialization with error code %d";
          }
        }
        _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, v42, v65, 0x1Cu);
LABEL_90:
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
LABEL_103:
        v7 = getScottyLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return v6;
        if (*((char *)this + 551) < 0)
          v45 = *v50;
        else
          v45 = (char *)this + 528;
        *(_DWORD *)v65 = 136315650;
        v66 = v45;
        v67 = 2080;
        v68 = "Initialize";
        v69 = 1024;
        LODWORD(v70) = v6;
        v9 = "[%s|%s] Failed to initialize with error code %d";
        goto LABEL_21;
      }
      v35 = *((_QWORD *)this + 91);
    }
    v34 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
    goto LABEL_74;
  }
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v7 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v10 = (char *)this + 528;
    if (*((char *)this + 551) < 0)
      v10 = *(char **)v10;
    *(_DWORD *)v65 = 136315650;
    v66 = v10;
    v67 = 2080;
    v68 = "Initialize";
    v69 = 1024;
    LODWORD(v70) = v6;
    v9 = "[%s|%s] Error with output stream format with error code %d";
    goto LABEL_21;
  }
  return v6;
}

void sub_1B6200388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  ScottyUpmixer *v39;
  uint64_t *v40;
  ScottySTFTUpmixer::STFT_tables_t *v41;
  uint64_t *v42;
  ScottySTFTUpmixer::STFT_state_t *v43;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;

  v45 = 0;
  v46 = (_QWORD *)((char *)v39 + 2432);
  while (1)
  {
    v47 = (_QWORD *)v46[v45];
    v46[v45] = 0;
    if (v47)
      break;
    if (--v45 == -3)
    {
      v48 = 0;
      v49 = (_QWORD *)((char *)v39 + 2408);
      while (1)
      {
        v50 = (_QWORD *)v49[v48];
        v49[v48] = 0;
        if (v50)
          break;
        if (--v48 == -3)
        {
          v51 = 0;
          v52 = (_QWORD *)((char *)v39 + 2384);
          while (1)
          {
            v53 = (_QWORD *)v52[v51];
            v52[v51] = 0;
            if (v53)
              break;
            if (--v51 == -3)
            {
              v54 = 0;
              v55 = (_QWORD *)((char *)v39 + 2360);
              while (1)
              {
                v56 = (_QWORD *)v55[v54];
                v55[v54] = 0;
                if (v56)
                  break;
                if (--v54 == -3)
                {
                  v57 = 0;
                  v58 = (_QWORD *)((char *)v39 + 2336);
                  while (1)
                  {
                    v59 = (_QWORD *)v58[v57];
                    v58[v57] = 0;
                    if (v59)
                      break;
                    if (--v57 == -3)
                    {
                      v60 = 0;
                      v61 = (_QWORD *)((char *)v39 + 2312);
                      while (1)
                      {
                        v62 = (_QWORD *)v61[v60];
                        v61[v60] = 0;
                        if (v62)
                          break;
                        if (--v60 == -3)
                        {
                          v63 = (void *)*((_QWORD *)v39 + 284);
                          if (v63)
                          {
                            *((_QWORD *)v39 + 285) = v63;
                            operator delete(v63);
                          }
                          v64 = (void *)*((_QWORD *)v39 + 281);
                          if (v64)
                          {
                            *((_QWORD *)v39 + 282) = v64;
                            operator delete(v64);
                          }
                          v65 = *((_QWORD *)v39 + 280);
                          *((_QWORD *)v39 + 280) = 0;
                          if (v65)
                            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                          v66 = *((_QWORD *)v39 + 279);
                          *((_QWORD *)v39 + 279) = 0;
                          if (v66)
                            (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
                          v67 = *((_QWORD *)v39 + 278);
                          *((_QWORD *)v39 + 278) = 0;
                          if (v67)
                            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                          v68 = *((_QWORD *)v39 + 277);
                          *((_QWORD *)v39 + 277) = 0;
                          if (v68)
                            (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                          v69 = *((_QWORD *)v39 + 276);
                          *((_QWORD *)v39 + 276) = 0;
                          if (v69)
                            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
                          v70 = *((_QWORD *)v39 + 275);
                          *((_QWORD *)v39 + 275) = 0;
                          if (v70)
                            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
                          v71 = *((_QWORD *)v39 + 274);
                          *((_QWORD *)v39 + 274) = 0;
                          if (v71)
                            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
                          v72 = *v40;
                          *v40 = 0;
                          if (v72)
                            (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
                          v73 = 0;
                          while (1)
                          {
                            v74 = *(void **)((char *)v39 + v73 + 1904);
                            if (v74)
                            {
                              *(_QWORD *)((char *)v39 + v73 + 1912) = v74;
                              operator delete(v74);
                            }
                            v73 -= 24;
                            if (v73 == -96)
                            {
                              ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t(v41);
                              ScottySTFTUpmixer::STFT_state_t::~STFT_state_t(v43);
                              v75 = *v42;
                              *v42 = 0;
                              if (v75)
                                MultiRadixFFT_Dispose(v75);
                              ScottyUpmixer::~ScottyUpmixer(v39);
                              if (a32 < 0)
                                operator delete(__p);
                              MEMORY[0x1BCC95CEC](v39, 0x10F3C406FF32ED7);
                              _Unwind_Resume(a1);
                            }
                          }
                        }
                      }
                      std::default_delete<AllPassComb>::operator()[abi:ne180100](v62);
                    }
                  }
                  std::default_delete<AllPassComb>::operator()[abi:ne180100](v59);
                }
              }
              std::default_delete<AllPassComb>::operator()[abi:ne180100](v56);
            }
          }
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v53);
        }
      }
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v50);
    }
  }
  std::default_delete<AllPassComb>::operator()[abi:ne180100](v47);
}

uint64_t AUScotty::Cleanup(AUScotty *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t result;
  int v5;
  _QWORD *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v3 = (_QWORD *)*v3;
    v5 = 136315394;
    v6 = v3;
    v7 = 2080;
    v8 = "Cleanup";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Cleanup", (uint8_t *)&v5, 0x16u);
  }
  result = *((_QWORD *)this + 91);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t AUScotty::Reset(AUScotty *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v3 = (_QWORD *)*v3;
    v6 = 136315394;
    v7 = v3;
    v8 = 2080;
    v9 = "Reset";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting", (uint8_t *)&v6, 0x16u);
  }
  v4 = *((_QWORD *)this + 91);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  return 0;
}

uint64_t AUScotty::GetPropertyInfo(AUScotty *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 == 21 && !a3)
  {
LABEL_7:
    result = 0;
    *a6 = 1;
    *a5 = 4;
    return result;
  }
  if (a2 == 1885566051 || a2 == 3700)
  {
    if (a3)
      return 4294956430;
    goto LABEL_7;
  }
  return 4294956417;
}

uint64_t AUScotty::GetProperty(AUScotty *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a2 != 21 || a3)
  {
    if (a2 == 1885566051)
    {
      if (!a3)
      {
        v7 = *((_DWORD *)this + 141);
        goto LABEL_12;
      }
    }
    else
    {
      if (a2 != 3700)
        return 4294956417;
      if (!a3)
      {
        v7 = *((unsigned __int8 *)this + 376);
LABEL_12:
        result = 0;
        goto LABEL_13;
      }
    }
    return 4294956430;
  }
  result = 0;
  v7 = *((unsigned __int8 *)this + 561);
LABEL_13:
  *a5 = v7;
  return result;
}

uint64_t AUScotty::SetProperty(AUScotty *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 != 21 || a3)
  {
    if (a2 == 3700)
    {
      if (!a3)
      {
        result = 0;
        *((_BYTE *)this + 376) = *a5 != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 1885566051)
        return 4294956417;
      if (!a5)
        __assert_rtn("SetProperty", "AUScotty.cpp", 418, "inData");
      if (!a3)
      {
        result = 0;
        *((_DWORD *)this + 141) = *a5;
        atomic_store(1u, (unsigned __int8 *)this + 568);
        return result;
      }
    }
    return 4294956430;
  }
  if (a6 < 4)
    return 4294956445;
  v8 = *a5 != 0;
  if (*((unsigned __int8 *)this + 561) == v8)
    return 0;
  if (*((_BYTE *)this + 17))
    (*(void (**)(AUScotty *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  *((_BYTE *)this + 561) = v8;
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v9 = getScottyLog(void)::gLog;
  v10 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    v11 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v11 = (_QWORD *)*v11;
    v12 = *((unsigned __int8 *)this + 561);
    v13 = 136315650;
    v14 = v11;
    v15 = 2080;
    v16 = "SetProperty";
    v17 = 1024;
    v18 = v12;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] Scotty Bypass %i", (uint8_t *)&v13, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t AUScotty::SetParameter(AUScotty *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  char *v13;
  char v14;

  v13 = (char *)this + 576;
  v14 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  atomic_store(1u, (unsigned __int8 *)this + 568);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  return 0;
}

void sub_1B6200B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUScotty::CanScheduleParameters(AUScotty *this)
{
  return 0;
}

uint64_t AUScotty::ProcessMultipleBufferLists(AUScotty *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unint64_t v12;
  uint64_t Element;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  uint64_t v20;
  BOOL *v21;
  BOOL *v22;
  NSObject *v23;
  vDSP_Length v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int *v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  vDSP_Length v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  int v75;
  uint64_t v76;
  uint64_t k;
  uint64_t v78;
  uint64_t v79;
  uint64_t j;
  uint64_t v81;
  int v82;
  NSObject *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  float *__B;
  unsigned int v96;
  AUScotty *v97;
  uint64_t v98;
  AudioBufferList v99;
  int v100;
  int v101;
  uint64_t v102;
  AudioBufferList v103;
  int v104;
  int v105;
  uint64_t v106;
  _BYTE v107[42];
  __int128 v108;
  __int128 v109;
  uint8_t buf[32];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 17))
  {
    v12 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0) + 108);
    Element = ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
    if ((v12 - 9) <= 0xFFFFFFF7)
      __assert_rtn("ProcessMultipleBufferLists", "AUScotty.cpp", 817, "numIn > 0 && numIn <= kScotty_MaxNumIn");
    v14 = *(unsigned int *)(Element + 108);
    if ((v14 - 9) <= 0xFFFFFFF7)
      __assert_rtn("ProcessMultipleBufferLists", "AUScotty.cpp", 818, "numOut > 0 && numOut <= kScotty_MaxNumOut");
    if (*((_BYTE *)this + 561))
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = (char *)*a7 + v15 * 16;
        v18 = (void *)*((_QWORD *)v17 + 2);
        if (v16 >= v12)
          bzero(v18, *((unsigned int *)v17 + 3));
        else
          memcpy(v18, (*a5)->mBuffers[v15].mData, (*a5)->mBuffers[v15].mDataByteSize);
        ++v16;
        ++v15;
      }
      while (v14 != v15);
      return 0;
    }
    v97 = this;
    *(_WORD *)v107 = 0;
    v20 = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0) + 80);
    v103.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
    v104 = 4;
    v105 = v12;
    v106 = 32;
    *(_QWORD *)&v99.mNumberBuffers = v20;
    v99.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
    v100 = 4;
    v101 = v14;
    v102 = 32;
    *(_QWORD *)&v103.mNumberBuffers = v20;
    v96 = a3;
    AudioDSP::Utility::DetectNonFinites(a3, *a5, &v103, (const AudioStreamBasicDescription *)&v107[1], v21);
    if (v107[1] && *((_BYTE *)this + 563))
    {
      if (getScottyLog(void)::onceToken != -1)
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
      v23 = getScottyLog(void)::gLog;
      v24 = a3;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v88 = (_QWORD *)((char *)this + 528);
        if (*((char *)this + 551) < 0)
          v88 = (_QWORD *)*v88;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v88;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "ProcessMultipleBufferLists";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v107[1];
        _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] (InputSignals) is NOT finite: (%d)", buf, 0x1Cu);
      }
      v25 = 0;
      v26 = v14;
      do
      {
        bzero((*a7)->mBuffers[v25].mData, (*a7)->mBuffers[v25].mDataByteSize);
        ++v25;
        --v26;
      }
      while (v26);
      goto LABEL_127;
    }
    v27 = *a5;
    v28 = (unsigned int *)*a7;
    v29 = *a2;
    v30 = *((unsigned __int8 *)this + 562);
    *((_BYTE *)this + 562) = (v29 & 0x10) != 0;
    if ((v29 & 0x10) != 0)
    {
      v44 = v29 & 0x10;
      if (*v28)
      {
        v45 = 0;
        v46 = (void **)(v28 + 4);
        do
        {
          bzero(*v46, *((unsigned int *)v46 - 1));
          ++v45;
          v46 += 2;
        }
        while (v45 < *v28);
      }
      v24 = v96;
      if (v30 == v44 >> 4)
        goto LABEL_127;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 91) + 32))(*((_QWORD *)this + 91));
      goto LABEL_126;
    }
    v31 = atomic_load((unsigned __int8 *)this + 568);
    if ((v31 & 1) != 0)
    {
      *(_QWORD *)buf = (char *)this + 576;
      v32 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 576);
      buf[8] = v32;
      if (v32)
      {
        AUScotty::UpdateParametersFromAU(this);
        atomic_store(0, (unsigned __int8 *)this + 568);
      }
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
    }
    v33 = *v27;
    if (*v27 >= 8u)
      v34 = 8;
    else
      v34 = v33;
    if (*v28 >= 8)
      v35 = 8;
    else
      v35 = *v28;
    v111 = 0u;
    v112 = 0u;
    memset(buf, 0, sizeof(buf));
    v108 = 0u;
    v109 = 0u;
    memset(&v107[10], 0, 32);
    if ((_DWORD)v34)
    {
      v36 = (uint64_t *)(v27 + 4);
      v37 = buf;
      v38 = v34;
      do
      {
        v39 = *v36;
        v36 += 2;
        *(_QWORD *)v37 = v39;
        v37 += 8;
        --v38;
      }
      while (v38);
      if (v33 <= 7)
      {
        v40 = *(_QWORD *)&v27[4 * (v34 - 1) + 4];
        v41 = 8 * v34;
        do
        {
          *(_QWORD *)&buf[v41] = v40;
          v41 += 8;
        }
        while (v41 != 64);
      }
    }
    v42 = *((unsigned int *)this + 139);
    if ((_DWORD)v42)
    {
      v24 = v96;
      if ((_DWORD)v42 != 2)
      {
        if ((_DWORD)v35)
        {
          v49 = (uint64_t *)(v28 + 4);
          v50 = &v107[10];
          do
          {
            v51 = *v49;
            v49 += 2;
            *v50++ = v51;
            --v35;
          }
          while (v35);
        }
        goto LABEL_50;
      }
      v43 = 0;
    }
    else
    {
      v47 = *((_QWORD *)v28 + 4);
      *(_QWORD *)&v107[10] = *((_QWORD *)v28 + 2);
      *(_QWORD *)&v107[18] = v47;
      v48 = *((_QWORD *)v28 + 12);
      *(_QWORD *)&v108 = *((_QWORD *)v28 + 10);
      *((_QWORD *)&v108 + 1) = v48;
      *(_QWORD *)&v107[26] = *((_QWORD *)v28 + 6);
      v42 = 3;
      v43 = 2;
      v24 = v96;
    }
    *(_QWORD *)&v107[8 * v42 + 10] = *(_QWORD *)&v28[6 * v43 + 4];
LABEL_50:
    v52 = *((_QWORD *)this + 91);
    if (!v52 || !*(_BYTE *)(v52 + 8))
      goto LABEL_127;
    v94 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v52 + 72))(*((_QWORD *)this + 91));
    if (*(_BYTE *)(v52 + 8) && *(_BYTE *)(v52 + 9) && (!*(_BYTE *)(v52 + 116) || *(_DWORD *)(v52 + 120)))
    {
      if ((_DWORD)v24)
      {
        v53 = 0;
        v98 = v52 + 216;
        __B = (float *)(v52 + 96);
        v54 = v24;
        v91 = v14;
        while (1)
        {
          while (1)
          {
            v55 = *(_DWORD *)(v52 + 280);
            if (v94 < v55)
              __assert_rtn("Process", "ScottyUpmixer.cpp", 426, "nativeFrameSize >= mInputStagingBufferOffset");
            if (v94 - v55 >= v54)
              v56 = v54;
            else
              v56 = v94 - v55;
            if (v56)
            {
              v57 = v24 - v54;
              if (v56 + v57 > v24)
                __assert_rtn("Process", "ScottyUpmixer.cpp", 430, "(inFramesToProcess-inFramesPending+inFramesToCopy) <= inFramesToProcess");
              if (v56 + v55 > v94)
                __assert_rtn("Process", "ScottyUpmixer.cpp", 431, "(mInputStagingBufferOffset+inFramesToCopy) <= nativeFrameSize");
              v58 = v53;
              v59 = v54;
              for (i = 0; i != 8; ++i)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 128))(v52, i))
                {
                  v61 = *(_QWORD *)&buf[8 * i];
                  if (v61)
                    memmove((void *)(*(_QWORD *)(v52 + 8 * i + 152) + 4 * *(unsigned int *)(v52 + 280)), (const void *)(v61 + 4 * v57), 4 * v56);
                }
              }
              v54 = v59 - v56;
              v55 = *(_DWORD *)(v52 + 280) + v56;
              *(_DWORD *)(v52 + 280) = v55;
              v24 = v96;
              v14 = v91;
              v53 = v58;
            }
            v93 = v54;
            if (v55 == v94 && !*(_DWORD *)(v52 + 288))
            {
              v62 = v53;
              *(_QWORD *)&v113 = v52 + 72;
              v63 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v52 + 72));
              BYTE8(v113) = v63;
              if (v63)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 144))(v52, v52 + 152, v98);
                *(_DWORD *)(v52 + 288) = v94;
                *(_QWORD *)(v52 + 280) = 0;
              }
              std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v113);
              v24 = v96;
              v53 = v62;
            }
            v64 = *(_DWORD *)(v52 + 288);
            v65 = (int)v24 - (int)v53 >= v64 ? v64 : (v24 - v53);
            if (!(_DWORD)v65)
              break;
            if ((int)v65 + (int)v53 > v24)
              __assert_rtn("Process", "ScottyUpmixer.cpp", 460, "(outFramesCompleted+outFramesToCopy) <= inFramesToProcess");
            v92 = v65 + v53;
            if ((*(_DWORD *)(v52 + 284) + v65) > *(_DWORD *)(v52 + 120))
              __assert_rtn("Process", "ScottyUpmixer.cpp", 461, "(mOutputStagingBufferOffset+outFramesToCopy) <= mOutputBufSize");
            v66 = COERCE_FLOAT(atomic_load((unsigned int *)(*(_QWORD *)(v52 + 40) + 124)));
            v67 = *(float *)(v52 + 100);
            if (fabsf(v66) > 0.01 || fabsf(v67) > 0.01)
            {
              v90 = v53;
              if (v67 == v66)
              {
                v68 = 0;
                v113 = xmmword_1B66A0770;
                do
                {
                  v69 = *(unsigned int *)((char *)&v113 + v68);
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, v69))
                  {
                    v70 = (float *)(*(_QWORD *)(v98 + 8 * v69) + 4 * *(unsigned int *)(v52 + 284));
                    vDSP_vsmul(v70, 1, __B, v70, 1, v65);
                  }
                  v68 += 4;
                }
                while (v68 != 16);
              }
              else
              {
                v71 = __exp10f(v66 / 20.0);
                v72 = 0;
                *(float *)&v107[6] = (float)(v71 - *__B) / (float)v65;
                v113 = xmmword_1B66A0770;
                do
                {
                  v73 = *(unsigned int *)((char *)&v113 + v72);
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, v73))
                  {
                    *(_DWORD *)&v107[2] = *(_DWORD *)(v52 + 96);
                    v74 = (float *)(*(_QWORD *)(v98 + 8 * v73) + 4 * *(unsigned int *)(v52 + 284));
                    vDSP_vrampmul(v74, 1, (float *)&v107[2], (const float *)&v107[6], v74, 1, v65);
                  }
                  v72 += 4;
                }
                while (v72 != 16);
                *(float *)(v52 + 100) = v66;
                *(float *)(v52 + 96) = v71;
              }
              LODWORD(v53) = v90;
            }
            v75 = *(_DWORD *)(v52 + 16);
            if (v75 == 2)
            {
              if (*(_QWORD *)&v107[26])
                memmove((void *)(*(_QWORD *)&v107[26] + 4 * v53), (const void *)(*(_QWORD *)(v52 + 232) + 4 * *(unsigned int *)(v52 + 284)), 4 * v65);
            }
            else
            {
              v76 = v53;
              if (v75)
              {
                for (j = 0; j != 8; ++j)
                {
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, j))
                  {
                    v81 = *(_QWORD *)&v107[8 * j + 10];
                    if (v81)
                      memmove((void *)(v81 + 4 * v76), (const void *)(*(_QWORD *)(v52 + 8 * j + 216) + 4 * *(unsigned int *)(v52 + 284)), 4 * v65);
                  }
                }
              }
              else
              {
                for (k = 0; k != 6; ++k)
                {
                  v78 = dword_1B6686D64[k];
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, v78))
                  {
                    v79 = *(_QWORD *)&v107[8 * v78 + 10];
                    if (v79)
                      memmove((void *)(v79 + 4 * v76), (const void *)(*(_QWORD *)(v98 + 8 * v78) + 4 * *(unsigned int *)(v52 + 284)), 4 * v65);
                  }
                }
                v14 = v91;
                if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, 4) & 1) != 0
                  && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, 6)
                  && (_QWORD)v108)
                {
                  vDSP_vadd((const float *)(*(_QWORD *)(v52 + 264) + 4 * *(unsigned int *)(v52 + 284)), 1, (const float *)(v108 + 4 * v76), 1, (float *)(v108 + 4 * v76), 1, v65);
                }
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, 5)
                  && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 136))(v52, 7)
                  && *((_QWORD *)&v108 + 1))
                {
                  vDSP_vadd((const float *)(*(_QWORD *)(v52 + 272) + 4 * *(unsigned int *)(v52 + 284)), 1, (const float *)(*((_QWORD *)&v108 + 1) + 4 * v76), 1, (float *)(*((_QWORD *)&v108 + 1) + 4 * v76), 1, v65);
                }
              }
            }
            v82 = *(_DWORD *)(v52 + 288) - v65;
            *(_DWORD *)(v52 + 288) = v82;
            if (v82)
              v82 = *(_DWORD *)(v52 + 284) + v65;
            v53 = v92;
            v54 = v93;
            *(_DWORD *)(v52 + 284) = v82;
            v24 = v96;
            if (!v93)
              goto LABEL_123;
          }
          v54 = v93;
          if (!v93)
          {
LABEL_123:
            if (v53 >= v24)
              break;
          }
        }
      }
LABEL_127:
      AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)v24, *a7, &v99, (const AudioStreamBasicDescription *)v107, v22);
      if (v107[0] && *((_BYTE *)v97 + 563))
      {
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
        v83 = getScottyLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v89 = (_QWORD *)((char *)v97 + 528);
          if (*((char *)v97 + 551) < 0)
            v89 = (_QWORD *)*v89;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v89;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "ProcessMultipleBufferLists";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v107[0];
          _os_log_error_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_ERROR, "[%s|%s] (OutputSignals) is NOT finite: (%d)", buf, 0x1Cu);
        }
        (*(void (**)(_QWORD))(**((_QWORD **)v97 + 91) + 32))(*((_QWORD *)v97 + 91));
        if ((_DWORD)v14)
        {
          v84 = 0;
          v85 = 0;
          do
          {
            v86 = (char *)*a7 + v84 * 16;
            v87 = (void *)*((_QWORD *)v86 + 2);
            if (v85 >= v12)
              bzero(v87, *((unsigned int *)v86 + 3));
            else
              memcpy(v87, (*a5)->mBuffers[v84].mData, (*a5)->mBuffers[v84].mDataByteSize);
            ++v85;
            ++v84;
          }
          while (v14 != v84);
        }
      }
      return 0;
    }
    ScottyUpmixer::ProcessBypass((ScottyUpmixer *)buf, (const float **)&v107[10], v24);
LABEL_126:
    v24 = v96;
    goto LABEL_127;
  }
  return 4294956429;
}

void sub_1B62016F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t AUScotty::Render(AUScotty *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t BufferList;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v8 = (AUScotty *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUScotty *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v14, 1, &BufferList);
  }
  return result;
}

uint64_t AUScotty::GetParameterInfo(AUScotty *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  const __CFString *v7;
  AudioUnitParameterOptions flags;
  UInt32 v9;
  int v10;
  int v11;
  CFStringRef theString;
  int v13;
  uint64_t v14;
  uint64_t v15;

  a4->flags = 0;
  a4->unitName = 0;
  if (a2)
    return 4294956418;
  v11 = -1;
  theString = 0;
  v13 = 2;
  v15 = 0;
  v14 = 0;
  if (!ScottyUpmixer::GetParamInfo(a3, (uint64_t)&v11))
    return 4294956418;
  if (v11 == -1)
    return 4294956418;
  v7 = theString;
  a4->cfNameString = theString;
  a4->flags |= 0x8000000u;
  CFStringGetCString(v7, a4->name, 52, 0x8000100u);
  *(_QWORD *)&a4->minValue = v15;
  LODWORD(a4->defaultValue) = v14;
  flags = a4->flags;
  a4->flags = flags | 0xC0000000;
  if (a3 > 0x21)
    return 4294956418;
  result = 0;
  v9 = dword_1B6647A80[a3];
  v10 = dword_1B6647B08[a3];
  a4->unit = dword_1B66479F8[a3];
  a4->clumpID = v9;
  a4->flags = flags | v10;
  return result;
}

uint64_t AUScotty::RestoreState(AUScotty *this, const void *a2)
{
  uint64_t v4;
  char *v6;
  char v7;

  v6 = (char *)this + 576;
  v7 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  v4 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  if (!(_DWORD)v4)
    atomic_store(1u, (unsigned __int8 *)this + 568);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_1B6201970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUScotty::GetParameterValueStrings(AUScotty *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  __CFString **v6;
  CFIndex v7;
  const __CFArray *v8;

  if (a2)
    return 0;
  switch(a3)
  {
    case 4:
      goto LABEL_6;
    case 14:
      if (a4)
      {
        v6 = ScottyUpmixer::kAllpass_Labels;
        v7 = 6;
        goto LABEL_10;
      }
      return 0;
    case 6:
LABEL_6:
      if (a4)
      {
        v6 = ScottyUpmixer::kCrossover_OrderLabels;
        v7 = 5;
LABEL_10:
        v8 = CFArrayCreate(0, (const void **)v6, v7, 0);
        result = 0;
        *a4 = v8;
        return result;
      }
      return 0;
  }
  return 4294956417;
}

uint64_t AUScotty::GetPresets(AUScotty *this, const __CFArray **a2)
{
  __CFArray *Mutable;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, &kPresets);
    CFArrayAppendValue(Mutable, &dword_1E69CB360);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUScotty::NewFactoryPresetSet(AUScotty *this, const AUPreset *a2)
{
  char v4;
  uint64_t v5;
  unsigned int presetNumber;
  char v7;
  const AUPreset *v8;
  unsigned int i;
  float v10;
  ausdk::AUElement *Element;
  uint64_t v12;
  float v14;
  char *v15;
  char v16;

  v15 = (char *)this + 576;
  v4 = 1;
  v16 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
  v5 = 0;
  presetNumber = a2->presetNumber;
  while (1)
  {
    v7 = v4;
    v8 = (const AUPreset *)&kPresets[4 * v5];
    if (presetNumber == v8->presetNumber)
      break;
    v4 = 0;
    v5 = 1;
    if ((v7 & 1) == 0)
      goto LABEL_11;
  }
  if (presetNumber > 1)
  {
LABEL_11:
    v12 = 4294956445;
    goto LABEL_12;
  }
  for (i = 0; i != 34; ++i)
  {
    v14 = 0.0;
    if (ScottyUpmixer::GetParamDefault(i, presetNumber, &v14))
    {
      v10 = v14;
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(Element, i, v10, 0);
    }
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v8);
  v12 = 0;
  atomic_store(1u, (unsigned __int8 *)this + 568);
LABEL_12:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
  return v12;
}

void sub_1B6201B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUScotty::GetLatency(AUScotty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 91);
  if (result)
  {
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
    return ausdk::AUScope::SafeGetElement((AUScotty *)((char *)this + 128), 0);
  }
  return result;
}

double AUScotty::GetTailTime(AUScotty *this)
{
  return 0.0;
}

uint64_t AUScotty::SupportsTail(AUScotty *this)
{
  return 1;
}

BOOL AUScotty::StreamFormatWritable(AUScotty *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUScotty::SupportedNumChannels(AUScotty *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 15;
}

void AUScotty::GetChannelLayoutTags(AUScotty *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  char *v6;
  NSObject *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5 = operator new(0xCuLL);
    v6 = (char *)(v5 + 3);
    a3[2] = v5 + 3;
    *(_QWORD *)v5 = 0x7E000800790006;
    v5[2] = 6553601;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v5 = operator new(0x14uLL);
    v6 = (char *)(v5 + 5);
    a3[2] = v5 + 5;
    v5[4] = 8388616;
    *(_OWORD *)v5 = xmmword_1B66479A0;
LABEL_5:
    *a3 = v5;
    a3[1] = v6;
    return;
  }
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v8 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v9 = (_QWORD *)((char *)this + 528);
    if (*((char *)this + 551) < 0)
      v9 = (_QWORD *)*v9;
    v10 = 136315650;
    v11 = v9;
    v12 = 2080;
    v13 = "GetChannelLayoutTags";
    v14 = 1024;
    v15 = a2;
    _os_log_error_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid scope %u", (uint8_t *)&v10, 0x1Cu);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void AUScotty::UpdateParametersFromAU(AUScotty *this)
{
  char v2;
  unsigned int v3;
  ausdk::AUScope *v4;
  ausdk::AUElement *Element;
  float Parameter;
  NSObject *v7;
  _BOOL4 v8;
  ausdk::AUElement *v9;
  float v10;
  ausdk::AUElement *v11;
  float v12;
  unsigned int v13;
  float v14;
  ausdk::AUElement *v15;
  ausdk::AUElement *v16;
  unsigned int v17;
  float v18;
  ausdk::AUElement *v19;
  ausdk::AUElement *v20;
  ScottyUpmixer *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[12];
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 91))
    return;
  v2 = 0;
  v3 = 0;
  v4 = (AUScotty *)((char *)this + 32);
  while (2)
  {
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
    Parameter = ausdk::AUElement::GetParameter(Element, v3);
    switch(v3)
    {
      case 0x18u:
        if (vabds_f32(Parameter, *((float *)this + 188)) > 0.01)
        {
          *((float *)this + 188) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x19u:
        if (vabds_f32(Parameter, *((float *)this + 189)) > 0.01)
        {
          *((float *)this + 189) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x1Au:
        goto LABEL_19;
      case 0x1Bu:
        if (vabds_f32(Parameter, *((float *)this + 184)) > 0.01)
        {
          *((float *)this + 184) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      case 0x1Cu:
        if (vabds_f32(Parameter, *((float *)this + 186)) > 0.01)
        {
          *((float *)this + 186) = Parameter;
          goto LABEL_18;
        }
        goto LABEL_19;
      default:
        if (v3 == 4)
        {
          if (vabds_f32(Parameter, *((float *)this + 185)) <= 0.01)
            goto LABEL_19;
          *((float *)this + 185) = Parameter;
          goto LABEL_18;
        }
        if (v3 == 6 && vabds_f32(Parameter, *((float *)this + 187)) > 0.01)
        {
          *((float *)this + 187) = Parameter;
LABEL_18:
          v2 = 1;
        }
LABEL_19:
        AUScotty::SetParameterImmediately((uint64_t)this, v3++, Parameter);
        if (v3 != 34)
          continue;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 91) + 56))(*((_QWORD *)this + 91));
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 91) + 64))(*((_QWORD *)this + 91), *((float *)this + 141));
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
        v7 = getScottyLog(void)::gLog;
        v8 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEBUG);
        if ((v2 & 1) != 0)
        {
          if (v8)
          {
            v22 = (_QWORD *)((char *)this + 528);
            if (*((char *)this + 551) < 0)
              v22 = (_QWORD *)*v22;
            *(_DWORD *)v24 = 136315394;
            *(_QWORD *)&v24[4] = v22;
            v25 = 2080;
            v26 = "UpdateParametersFromAU";
            _os_log_debug_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "[%s|%s] Sufficient filter parameter changes occurred --- recalculate filters", v24, 0x16u);
          }
          *(_QWORD *)v24 = (char *)this + 576;
          v24[8] = 1;
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 576);
          v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
          v10 = ausdk::AUElement::GetParameter(v9, 5u);
          v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
          v12 = ausdk::AUElement::GetParameter(v11, 7u);
          if (v10 != -1.0)
          {
            v13 = (int)v10 & ~((int)v10 >> 31);
            if (v13 >= 8)
              v13 = 8;
            v14 = flt_1B66479B4[v13];
            *((float *)this + 184) = v14;
            v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v15, 0x1Bu, v14, 0);
            v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v16, 5u, -1.0, 0);
            AUScotty::SetParameterImmediately((uint64_t)this, 0x1Bu, *((float *)this + 184));
          }
          if (v12 != -1.0)
          {
            v17 = (int)v12 & ~((int)v12 >> 31);
            if (v17 >= 3)
              v17 = 3;
            v18 = flt_1B66A2A30[v17];
            *((float *)this + 186) = v18;
            v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v19, 0x1Cu, v18, 0);
            v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
            ausdk::AUElement::SetParameter(v20, 7u, -1.0, 0);
            AUScotty::SetParameterImmediately((uint64_t)this, 0x1Cu, *((float *)this + 186));
          }
          v21 = (ScottyUpmixer *)*((_QWORD *)this + 91);
          if (v21)
          {
            ScottyUpmixer::UpdateCrossover(v21);
            ScottyUpmixer::UpdateSurroundFilters(*((ScottyUpmixer **)this + 91));
          }
          std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v24);
        }
        else if (v8)
        {
          v23 = (_QWORD *)((char *)this + 528);
          if (*((char *)this + 551) < 0)
            v23 = (_QWORD *)*v23;
          *(_DWORD *)v24 = 136315394;
          *(_QWORD *)&v24[4] = v23;
          v25 = 2080;
          v26 = "UpdateParametersFromAU";
          _os_log_debug_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "[%s|%s] Filter parameter changes were not signficant; filters will not be recalculated",
            v24,
            0x16u);
        }
        return;
    }
  }
}

void sub_1B62021A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AUScotty::SetParameterImmediately(uint64_t a1, unsigned int a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16[3];
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x21)
  {
    v12 = -1;
    v13 = 0;
    v14 = 2;
    *(_QWORD *)v16 = 0;
    v15 = 0;
    if (ScottyUpmixer::GetParamInfo(a2, (uint64_t)&v12))
    {
      v6 = roundf(a3);
      v7 = 0.0;
      if (a3 != 0.0)
        v7 = 1.0;
      if (v14)
        v7 = a3;
      if (v14 != 1)
        v6 = v7;
      v8 = v16[1];
      if (v16[1] >= v6)
        v8 = v6;
      if (v6 >= v16[0])
        v9 = v8;
      else
        v9 = v16[0];
      atomic_store(LODWORD(v9), (unsigned int *)(a1 + 592 + 4 * a2));
    }
    else
    {
      if (getScottyLog(void)::onceToken != -1)
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
      v10 = getScottyLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v11 = (_QWORD *)(a1 + 528);
        if (*(char *)(a1 + 551) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136315650;
        v18 = v11;
        v19 = 2080;
        v20 = "SetParameterImmediately";
        v21 = 1024;
        v22 = a2;
        _os_log_debug_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set parameter %i immediately - Not Found", buf, 0x1Cu);
      }
    }
  }
}

void AUAnomalyDetection::~AUAnomalyDetection(AUAnomalyDetection *this)
{
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUAnomalyDetection::Initialize(AUAnomalyDetection *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t Element;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  uint64_t result;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  NSObject *v28;
  _BOOL4 v29;
  uint8_t v30[16];
  uint8_t buf[16];

  v2 = AUAnomalyDetectionLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "Initialize.", buf, 2u);
  }
  v3 = *((_QWORD *)this + 15);
  if (v3)
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v5 = *((_QWORD *)this + 21);
  if (v5)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 2u) + 108);
  if (v7 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), 0) + 108))
    return 4294956428;
  Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 0);
  v9 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 1u);
  v10 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 136) = v10;
  v11 = *(_DWORD *)(v9 + 108);
  *((_DWORD *)this + 137) = v11;
  *((_DWORD *)this + 135) = *(double *)(Element + 80);
  if (v10 != v11)
    return 4294956428;
  if ((_DWORD)v4)
  {
    v12 = 0;
    do
    {
      v13 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), v12);
      LODWORD(v14) = *((_DWORD *)this + 135);
      if (*(double *)(v13 + 80) != (double)v14)
        return 4294956428;
    }
    while ((_DWORD)v4 != ++v12);
  }
  if ((_DWORD)v6)
  {
    v15 = 0;
    do
    {
      v16 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), v15);
      LODWORD(v17) = *((_DWORD *)this + 135);
      if (*(double *)(v16 + 80) != (double)v17)
        return 4294956428;
    }
    while ((_DWORD)v6 != ++v15);
  }
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v21)
      v19 = 0;
    else
      v19 = *v21;
  }
  *((float *)this + 138) = ausdk::AUElement::GetParameter(v19, 0);
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  *((_DWORD *)this + 139) = ausdk::AUElement::GetParameter(v23, 1u);
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  *((float *)this + 140) = ausdk::AUElement::GetParameter(v26, 2u);
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  (*(void (**)(AUAnomalyDetection *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v28 = AUAnomalyDetectionLogScope();
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v29)
  {
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEFAULT, "Successfully initialized.", v30, 2u);
    return 0;
  }
  return result;
}

uint64_t AUAnomalyDetection::Reset(AUAnomalyDetection *this)
{
  return 0;
}

uint64_t AUAnomalyDetection::GetPropertyInfo(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUAnomalyDetection::GetProperty(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 528;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUAnomalyDetection::SetProperty(AUAnomalyDetection *this, int a2, int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 0;
    *((_BYTE *)this + 376) = *a5;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_BYTE *)this + 528) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUAnomalyDetection::SetParameter(AUAnomalyDetection *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUAnomalyDetection::CanScheduleParameters(AUAnomalyDetection *this)
{
  return 0;
}

uint64_t AUAnomalyDetection::ProcessMultipleBufferLists(AUAnomalyDetection *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  const AudioBufferList *v9;
  const float **v10;
  const AudioBufferList *v11;
  float **v12;
  uint64_t Element;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  UInt32 mNumberBuffers;
  uint64_t v20;
  unint64_t v21;
  const float **p_mData;
  const float **v23;
  const float *v24;
  const float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  const float **v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  const float **v39;
  uint64_t __C;

  v10 = (const float **)*a5;
  v9 = a5[1];
  v11 = a5[2];
  v12 = (float **)*a7;
  Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 1u);
  v14 = *((unsigned int *)v12 + 3);
  if (*((_BYTE *)this + 528))
  {
    if (*(_DWORD *)v12)
    {
      v15 = 0;
      v16 = 2;
      do
      {
        memcpy(v12[v16], *(const void **)((char *)&v11->mNumberBuffers + v16 * 8), v14);
        ++v15;
        v16 += 2;
      }
      while (v15 < *(unsigned int *)v12);
    }
    v17 = 0;
    *((_DWORD *)this + 139) = 0;
  }
  else
  {
    v18 = *(_DWORD *)v10;
    mNumberBuffers = v9->mNumberBuffers;
    *((_DWORD *)this + 139) = 0;
    if (v18 == mNumberBuffers)
    {
      v20 = Element;
      if (*(_DWORD *)(Element + 108))
      {
        v21 = 0;
        p_mData = (const float **)&v9->mBuffers[0].mData;
        v39 = v10;
        v23 = v10 + 2;
        do
        {
          v24 = *v23;
          v25 = *p_mData;
          __C = 0;
          vDSP_svesq(v24, 1, (float *)&__C + 1, a3);
          vDSP_svesq(v25, 1, (float *)&__C, a3);
          v26 = *(float *)&__C;
          if (fabsf(*(float *)&__C) == INFINITY
            || (v27 = *((float *)&__C + 1) + 1.0e-20,
                v28 = log10f(v27) * 10.0,
                v29 = v26 + 1.0e-20,
                (float)((float)(log10f(v29) * 10.0) - v28) > *((float *)this + 138)))
          {
            *((_DWORD *)this + 139) = 1;
            v30 = v39;
            goto LABEL_19;
          }
          ++v21;
          p_mData += 2;
          v23 += 2;
        }
        while (v21 < *(unsigned int *)(v20 + 108));
        v30 = v39;
        if (!*((_DWORD *)this + 139))
          goto LABEL_13;
LABEL_19:
        vDSP_vsmul(v30[2], 1, (const float *)this + 140, v12[2], 1, a3);
        if (*(_DWORD *)v12 >= 2u)
        {
          v33 = 1;
          v34 = 4;
          do
          {
            bzero(v12[v34], v14);
            ++v33;
            v34 += 2;
          }
          while (v33 < *(unsigned int *)v12);
        }
      }
      else
      {
LABEL_13:
        if (*(_DWORD *)v12)
        {
          v31 = 0;
          v32 = 2;
          do
          {
            memcpy(v12[v32], *(const void **)((char *)&v11->mNumberBuffers + v32 * 8), v14);
            ++v31;
            v32 += 2;
          }
          while (v31 < *(unsigned int *)v12);
        }
      }
      v17 = 0;
    }
    else
    {
      v17 = 4294956428;
    }
  }
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 1u, (float)*((unsigned int *)this + 139), 0);
  return v17;
}

uint64_t AUAnomalyDetection::Render(AUAnomalyDetection *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t v12;
  AudioBufferList *BufferList;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUInputElement *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v8 = (AUAnomalyDetection *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUAnomalyDetection *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  v12 = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)v12)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
  }
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    v12 = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
    if ((_DWORD)v12)
      return v12;
    v15 = ausdk::AUScope::SafeGetElement(v8, 1u);
    v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
  }
  else
  {
    v16 = 0;
  }
  if (ausdk::AUBase::HasInput(this, 2u))
  {
    v18 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 2u);
    v12 = ausdk::AUInputElement::PullInput(v18, a2, a3, 2, a4);
    if ((_DWORD)v12)
      return v12;
    v19 = ausdk::AUScope::SafeGetElement(v8, 2u);
    v20 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
  }
  else
  {
    v20 = 0;
  }
  if (ausdk::AUBase::HasInput(this, 1u) && ausdk::AUBase::HasInput(this, 2u))
  {
    v21 = ausdk::AUScope::SafeGetElement(v8, 0);
    v23[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v21 + 144));
    v23[1] = v16;
    v23[2] = v20;
    v22 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUAnomalyDetection *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 3, v23, 1, &v22);
  }
  return v12;
}

BOOL AUAnomalyDetection::BusCountWritable(AUAnomalyDetection *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUAnomalyDetection::GetParameterList(AUAnomalyDetection *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_QWORD *)a3 = 0x100000000;
    a3[2] = 2;
  }
  result = 0;
  *a4 = 3;
  return result;
}

uint64_t AUAnomalyDetection::GetParameterInfo(AUAnomalyDetection *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  if (a3 > 2)
    return 4294956430;
  v6 = off_1E69CB5C0[a3];
  v7 = dword_1B6647B94[a3];
  v8 = flt_1B6647BA0[a3];
  v9 = flt_1B6647BAC[a3];
  v10 = flt_1B6647BB8[a3];
  v11 = dword_1B6647BC4[a3];
  buffer->cfNameString = v6;
  buffer->flags = 1207959552;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = v8;
  buffer->maxValue = v9;
  buffer->defaultValue = v10;
  buffer->flags |= v11;
  return result;
}

uint64_t AUAnomalyDetection::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

uint64_t ausdk::AUBase::SupportsTail(ausdk::AUBase *this)
{
  return 0;
}

BOOL AUAnomalyDetection::StreamFormatWritable(AUAnomalyDetection *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUAnomalyDetection::SupportedNumChannels(AUAnomalyDetection *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUAnomalyDetection::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUAnomalyDetectionLogScope(void)
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v1 = &unk_1EF135000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF135000;
    if (v3)
    {
      AUAnomalyDetectionLogScope(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", " AUAnomalyDetection");
      v1 = (_QWORD *)&unk_1EF135000;
    }
  }
  return v1[276];
}

void CmhBEAM2NOpt::CmhBEAM2NOpt(CmhBEAM2NOpt *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v2 = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  v3 = (_OWORD *)((char *)this + 72);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 120) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 61) = 0x100000000;
  *((_DWORD *)this + 124) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_QWORD *)this + 96) = 0;
  do
  {
    *(_DWORD *)((char *)this + v2 * 4 + 500) = MC_default_param[v2];
    ++v2;
  }
  while ((_DWORD)(v2 * 4) != 76);
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 103) = 0;
  v4 = operator new[]();
  *(_QWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *((_QWORD *)this + 103) = v4;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 194) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_DWORD *)this + 103) = 0;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 4) = xmmword_1B66A11C0;
  *((_OWORD *)this + 2) = xmmword_1B66A11D0;
  *((_QWORD *)this + 35) = 0x12EDBE6FFLL;
  *((_DWORD *)this + 72) = 1031798784;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 95) = 0;
  *(_QWORD *)((char *)this + 388) = 0x3F0000003F333333;
  *(_OWORD *)((char *)this + 120) = xmmword_1B66A11E0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 216) = 0;
}

void sub_1B620317C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CmhMicCheck::deallocate_memory(v1 + 464);
  _Unwind_Resume(a1);
}

uint64_t CmhBEAM2NOpt::deallocate_memory(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;

  if (*(_DWORD *)this)
  {
    v1 = this;
    *(_DWORD *)this = 0;
    if (*(_QWORD *)(this + 160))
    {
      v2 = *(_DWORD *)(this + 44);
      if (v2 < 1)
        goto LABEL_9;
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 8 * i);
        if (v4)
        {
          MEMORY[0x1BCC95CC8](v4, 0x1000C8052888210);
          v2 = *(_DWORD *)(v1 + 44);
        }
      }
      if (*(_QWORD *)(v1 + 160))
LABEL_9:
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 160) = 0;
    }
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v6;
      v8 = v1 + 16 * v5;
      v11 = *(_QWORD *)(v8 + 168);
      v10 = (_QWORD *)(v8 + 168);
      v9 = v11;
      if (v11)
        MEMORY[0x1BCC95CC8](v9, 0x1000C8052888210);
      v6 = 0;
      *v10 = 0;
      v10[1] = 0;
      v5 = 1;
    }
    while ((v7 & 1) != 0);
    if (*(_QWORD *)(v1 + 408))
    {
      if (*(int *)(v1 + 8) < 1)
        goto LABEL_36;
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(v1 + 408);
        v15 = *(_QWORD *)(v14 + v12);
        if (v15)
        {
          MEMORY[0x1BCC95CC8](v15, 0x1000C8052888210);
          v14 = *(_QWORD *)(v1 + 408);
          v16 = (_QWORD *)(v14 + v12);
          *v16 = 0;
          v16[1] = 0;
        }
        v17 = *(_QWORD *)(v14 + v12 + 16);
        if (v17)
        {
          MEMORY[0x1BCC95CC8](v17, 0x1000C8052888210);
          v14 = *(_QWORD *)(v1 + 408);
        }
        v18 = *(_QWORD *)(v14 + v12 + 24);
        if (v18)
        {
          MEMORY[0x1BCC95CC8](v18, 0x1000C8052888210);
          v14 = *(_QWORD *)(v1 + 408);
        }
        v19 = *(_QWORD *)(v14 + v12 + 32);
        if (v19)
        {
          MEMORY[0x1BCC95CC8](v19, 0x1000C8052888210);
          v14 = *(_QWORD *)(v1 + 408);
        }
        v20 = *(_QWORD *)(v14 + v12 + 40);
        if (v20)
        {
          MEMORY[0x1BCC95CC8](v20, 0x1000C8052888210);
          v14 = *(_QWORD *)(v1 + 408);
        }
        v21 = *(_QWORD *)(v14 + v12 + 48);
        if (v21)
        {
          MEMORY[0x1BCC95CC8](v21, 0x1000C8052888210);
          *(_QWORD *)(*(_QWORD *)(v1 + 408) + v12 + 48) = 0;
          v14 = *(_QWORD *)(v1 + 408);
        }
        v22 = *(_QWORD *)(v14 + v12 + 56);
        if (v22)
        {
          MEMORY[0x1BCC95CC8](v22, 0x1000C8052888210);
          *(_QWORD *)(*(_QWORD *)(v1 + 408) + v12 + 56) = 0;
          v14 = *(_QWORD *)(v1 + 408);
        }
        v23 = *(_QWORD *)(v14 + v12 + 120);
        if (v23)
          MEMORY[0x1BCC95CC8](v23, 0x1000C8052888210);
        ++v13;
        v12 += 136;
      }
      while (v13 < *(int *)(v1 + 8));
      if (*(_QWORD *)(v1 + 408))
LABEL_36:
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 408) = 0;
    }
    v24 = *(_QWORD *)(v1 + 416);
    if (v24)
    {
      MEMORY[0x1BCC95CC8](v24, 0x1000C8052888210);
      *(_QWORD *)(v1 + 416) = 0;
    }
    v25 = *(_QWORD *)(v1 + 424);
    if (v25)
    {
      MEMORY[0x1BCC95CC8](v25, 0x1000C8052888210);
      *(_QWORD *)(v1 + 424) = 0;
    }
    v26 = *(_QWORD *)(v1 + 432);
    if (v26)
    {
      MEMORY[0x1BCC95CC8](v26, 0x1000C8052888210);
      *(_QWORD *)(v1 + 432) = 0;
    }
    v27 = *(_QWORD *)(v1 + 440);
    if (v27)
    {
      MEMORY[0x1BCC95CC8](v27, 0x1000C8052888210);
      *(_QWORD *)(v1 + 440) = 0;
    }
    v28 = *(_QWORD *)(v1 + 448);
    if (v28)
    {
      MEMORY[0x1BCC95CC8](v28, 0x1000C8052888210);
      *(_QWORD *)(v1 + 448) = 0;
    }
    v29 = *(_QWORD *)(v1 + 456);
    if (v29)
    {
      MEMORY[0x1BCC95CC8](v29, 0x1000C8052888210);
      *(_QWORD *)(v1 + 456) = 0;
    }
    v30 = *(_QWORD *)(v1 + 248);
    if (v30)
      MEMORY[0x1BCC95CC8](v30, 0x1000C8052888210);
    v31 = *(_QWORD *)(v1 + 296);
    if (v31)
      MEMORY[0x1BCC95CC8](v31, 0x1000C8052888210);
    v32 = *(_QWORD *)(v1 + 304);
    if (v32)
      MEMORY[0x1BCC95CC8](v32, 0x1000C8052888210);
    v33 = *(_QWORD *)(v1 + 312);
    if (v33)
      MEMORY[0x1BCC95CC8](v33, 0x1000C8052888210);
    v34 = *(_QWORD *)(v1 + 320);
    if (v34)
      MEMORY[0x1BCC95CC8](v34, 0x1000C8052888210);
    v35 = *(_QWORD *)(v1 + 352);
    if (v35)
      MEMORY[0x1BCC95CC8](v35, 0x1000C8052888210);
    v36 = *(_QWORD *)(v1 + 328);
    if (v36)
      MEMORY[0x1BCC95CC8](v36, 0x1000C8052888210);
    v37 = *(_QWORD *)(v1 + 336);
    if (v37)
      MEMORY[0x1BCC95CC8](v37, 0x1000C8052888210);
    v38 = *(_QWORD *)(v1 + 344);
    if (v38)
      MEMORY[0x1BCC95CC8](v38, 0x1000C8052888210);
    v39 = *(_QWORD *)(v1 + 200);
    if (v39)
    {
      MEMORY[0x1BCC95CC8](v39, 0x1000C8052888210);
      v40 = *(_QWORD *)(v1 + 208);
      if (v40)
        MEMORY[0x1BCC95CC8](v40, 0x1000C8052888210);
    }
    v41 = *(_QWORD *)(v1 + 216);
    if (v41)
    {
      MEMORY[0x1BCC95CC8](v41, 0x1000C8052888210);
      v42 = *(_QWORD *)(v1 + 224);
      if (v42)
        MEMORY[0x1BCC95CC8](v42, 0x1000C8052888210);
    }
    v43 = *(_QWORD **)(v1 + 232);
    if (v43)
    {
      if (*v43)
      {
        MEMORY[0x1BCC95CC8](*v43, 0x1000C8052888210);
        v43 = *(_QWORD **)(v1 + 232);
      }
      if (!v43[1] || (MEMORY[0x1BCC95CC8](v43[1], 0x1000C8052888210), *(_QWORD *)(v1 + 232)))
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 232) = 0;
    }
    v44 = *(_QWORD **)(v1 + 96);
    if (v44)
    {
      if (*v44)
      {
        MEMORY[0x1BCC95CC8](*v44, 0x1000C8052888210);
        v44 = *(_QWORD **)(v1 + 96);
      }
      if (!v44[1] || (MEMORY[0x1BCC95CC8](v44[1], 0x1000C8052888210), *(_QWORD *)(v1 + 96)))
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 96) = 0;
    }
    v45 = *(_QWORD **)(v1 + 104);
    if (v45)
    {
      if (*v45)
      {
        MEMORY[0x1BCC95CC8](*v45, 0x1000C8052888210);
        v45 = *(_QWORD **)(v1 + 104);
      }
      if (!v45[1] || (MEMORY[0x1BCC95CC8](v45[1], 0x1000C8052888210), *(_QWORD *)(v1 + 104)))
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 104) = 0;
    }
    v46 = *(_QWORD **)(v1 + 112);
    if (v46)
    {
      if (*v46)
      {
        MEMORY[0x1BCC95CC8](*v46, 0x1000C8052888210);
        v46 = *(_QWORD **)(v1 + 112);
      }
      if (!v46[1] || (MEMORY[0x1BCC95CC8](v46[1], 0x1000C8052888210), *(_QWORD *)(v1 + 112)))
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 112) = 0;
    }
    v47 = *(_QWORD *)(v1 + 272);
    if (v47)
      MEMORY[0x1BCC95CC8](v47, 0x1000C8052888210);
    v48 = *(_QWORD **)(v1 + 808);
    if (v48)
    {
      if (*v48)
      {
        MEMORY[0x1BCC95CC8](*v48, 0x1000C8052888210);
        v48 = *(_QWORD **)(v1 + 808);
      }
      if (!v48[1] || (MEMORY[0x1BCC95CC8](v48[1], 0x1000C8052888210), *(_QWORD *)(v1 + 808)))
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 808) = 0;
    }
    if (*(_QWORD *)(v1 + 784))
    {
      v49 = 0;
      v50 = 1;
      do
      {
        v51 = v50;
        v52 = *(_QWORD *)(*(_QWORD *)(v1 + 784) + 8 * v49);
        if (v52)
          MEMORY[0x1BCC95CC8](v52, 0x1000C8052888210);
        v50 = 0;
        v49 = 1;
      }
      while ((v51 & 1) != 0);
      v53 = *(_QWORD *)(v1 + 784);
      if (v53)
        MEMORY[0x1BCC95CC8](v53, 0x80C80B8603338);
      *(_QWORD *)(v1 + 784) = 0;
    }
    if (*(_QWORD *)(v1 + 792))
    {
      v54 = 0;
      v55 = 1;
      do
      {
        v56 = v55;
        v57 = *(_QWORD *)(*(_QWORD *)(v1 + 792) + 8 * v54);
        if (v57)
          MEMORY[0x1BCC95CC8](v57, 0x1000C8052888210);
        v55 = 0;
        v54 = 1;
      }
      while ((v56 & 1) != 0);
      v58 = *(_QWORD *)(v1 + 792);
      if (v58)
        MEMORY[0x1BCC95CC8](v58, 0x80C80B8603338);
      *(_QWORD *)(v1 + 792) = 0;
    }
    this = *(_QWORD *)(v1 + 800);
    if (this)
    {
      if (*(_QWORD *)this)
      {
        MEMORY[0x1BCC95CC8](*(_QWORD *)this, 0x1000C8052888210);
        this = *(_QWORD *)(v1 + 800);
      }
      if (!*(_QWORD *)(this + 8)
        || (MEMORY[0x1BCC95CC8](*(_QWORD *)(this + 8), 0x1000C8052888210), (this = *(_QWORD *)(v1 + 800)) != 0))
      {
        this = MEMORY[0x1BCC95CC8]();
      }
      *(_QWORD *)(v1 + 800) = 0;
    }
  }
  return this;
}

void CmhBEAM2NOpt::~CmhBEAM2NOpt(CmhBEAM2NOpt *this)
{
  uint64_t v2;

  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  v2 = *((_QWORD *)this + 103);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8015A9971DLL);
  CmhMicCheck::deallocate_memory((uint64_t)this + 464);
}

uint64_t CmhBEAM2NOpt::initialize(CmhBEAM2NOpt *this, int a2, int a3, int a4, int a5, int a6)
{
  float v12;
  int v13;
  double v14;
  double v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  double v28;
  double v29;
  float v30;
  int v31;
  int v32;
  int v33;
  int v34;
  float v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  uint64_t v44;
  int **v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  int v53;
  void **v54;
  size_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  int v68;
  float *v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  double v73;
  long double v74;
  uint64_t v75;
  size_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  const std::nothrow_t *v87;
  void *v88;
  uint64_t v89;
  size_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  const std::nothrow_t *v95;
  char v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  const std::nothrow_t *v101;
  uint64_t v102;
  size_t v103;
  char *v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  size_t v119;
  size_t v120;
  void *v121;
  uint64_t v122;
  size_t v123;
  void *v124;
  int v125;
  size_t v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  size_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  float v141;
  int32x2_t v142;
  uint64_t v143;
  float *v144;
  signed int v145;
  int v146;
  uint64x2_t v147;
  int32x2_t v148;
  float32x2_t v149;
  uint64_t v150;
  int32x2_t v151;
  int64x2_t v152;
  float *v153;
  float32x2_t v154;
  float32x2_t v155;
  int64x2_t v161;
  int32x2_t v162;
  float32x2_t v163;
  float *v164;
  uint64_t v165;
  float *v166;
  float *v167;
  uint64_t v168;
  double v169;
  float v170;
  uint64_t v171;
  float *v172;
  float *v173;
  double v174;
  float v175;
  int32x2_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  float32x2_t v181;
  int8x8_t v182;
  int8x16_t v183;
  int32x2_t v186;
  double v187;
  double v188;
  double v189;
  float v190;
  float v191;
  double v192;
  double v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  long double v198;
  uint64_t v199;
  float v200;
  char v201;
  int32x2_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  uint64_t v216;
  size_t v217;
  void *v218;
  size_t v219;
  void *v220;
  void *v221;
  void *v222;
  size_t v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  const std::nothrow_t *v233;
  const std::nothrow_t *v234;
  uint64_t v235;
  char v236;
  char v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  size_t v246;
  const std::nothrow_t *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  uint64_t v252;
  char v253;
  const std::nothrow_t *v254;
  char v255;
  void *v256;
  void *v257;
  uint64_t v258;
  uint64_t __len;
  size_t v260;
  float v261;
  uint64_t v262;
  float __sz;
  size_t __sza;

  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a4;
  *((_DWORD *)this + 12) = a5;
  v12 = (double)a5 * 0.001;
  *((float *)this + 13) = v12;
  *((_DWORD *)this + 2) = a6;
  *((_DWORD *)this + 3) = a2;
  if (a3 >= 0)
    v13 = a3;
  else
    v13 = a3 + 1;
  *((int32x2_t *)this + 3) = vadd_s32(vdup_n_s32(v13 >> 1), (int32x2_t)0x1FFFFFFFFLL);
  CmhBEAM2NOpt::deallocate_memory((uint64_t)this);
  if (*(_DWORD *)this)
  {
LABEL_5:
    CmhBEAM2NOpt::calc_cr_ci_vect(this, *((float **)this + 25), *((float **)this + 27));
    CmhBEAM2NOpt::calc_cr_ci_vect(this, *((float **)this + 26), *((float **)this + 28));
    *((_QWORD *)this + 7) = 0x40A0000041C00000;
    v14 = __exp10(1.2);
    v15 = __exp10(*((float *)this + 15) * 0.05);
    v16 = *((float *)this + 13);
    v18 = *((_DWORD *)this + 3);
    v17 = *((_DWORD *)this + 4);
    if (v17 >= 0)
      v19 = *((_DWORD *)this + 4);
    else
      v19 = v17 + 1;
    v20 = v19 >> 1;
    if (v17 >= -1)
    {
      v21 = 0;
      v22 = v16 * 6.28318531 * (double)v18 / (double)(343 * v17);
      v23 = v14;
      v24 = (uint64_t *)*((_QWORD *)this + 29);
      v25 = *v24;
      v26 = v24[1];
      while (1)
      {
        v27 = sinf(v22 * (float)(int)v21);
        v28 = (float)(v27 + v27);
        if (v28 > 0.032)
          break;
        v28 = 0.032;
        v29 = v23;
        if (v23 > 31.25)
          goto LABEL_14;
LABEL_15:
        v30 = v29;
        *(float *)(v25 + 4 * v21) = v30;
        *(float *)(v26 + 4 * v21++) = v30;
        if (v20 + 1 == v21)
        {
          v16 = *((float *)this + 13);
          goto LABEL_17;
        }
      }
      v29 = v23;
      if (1.0 / v28 >= v23)
        goto LABEL_15;
LABEL_14:
      v29 = 1.0 / v28;
      goto LABEL_15;
    }
LABEL_17:
    v31 = vcvtmd_s64_f64(343.0 / (float)(v16 + v16) * 0.9 / (float)((float)v18 / (float)v17));
    v32 = *((_DWORD *)this + 6);
    v33 = v31 & ~(v31 >> 31);
    v34 = v32 - 1;
    if (v32 > v33)
      v34 = v33;
    *((_DWORD *)this + 64) = v34;
    *((_DWORD *)this + 8) = 24000;
    if (v34 <= v20)
    {
      v35 = v15;
      v36 = (uint64_t *)*((_QWORD *)this + 29);
      v38 = *v36;
      v37 = v36[1];
      v39 = v20 - v34 + 1;
      v40 = (float *)(v37 + 4 * v34);
      v41 = (float *)(v38 + 4 * v34);
      do
      {
        v42 = *v41;
        if (*v41 >= v35)
          v42 = v15;
        *v41++ = v42;
        v43 = *v40;
        if (*v40 >= v35)
          v43 = v15;
        *v40++ = v43;
        --v39;
      }
      while (v39);
    }
    v44 = *((unsigned int *)this + 7);
    if ((int)v44 >= 1)
    {
      v45 = (int **)*((_QWORD *)this + 29);
      v46 = *((_QWORD *)this + 12);
      v47 = *v45;
      v48 = v45[1];
      v49 = *(_DWORD **)v46;
      v50 = *(_DWORD **)(v46 + 8);
      v51 = *((unsigned int *)this + 7);
      do
      {
        v52 = *v47++;
        *v49++ = v52;
        v53 = *v48++;
        *v50++ = v53;
        --v51;
      }
      while (v51);
      v54 = (void **)*((_QWORD *)this + 13);
      v55 = 4 * v44;
      memset_pattern16(*v54, &unk_1B6627B80, 4 * v44);
      memset_pattern16(v54[1], &unk_1B6627B80, v55);
      v56 = (void **)*((_QWORD *)this + 14);
      memset_pattern16(*v56, &unk_1B6627B80, v55);
      memset_pattern16(v56[1], &unk_1B6627B80, v55);
    }
    if (*((int *)this + 2) <= 0)
    {
      v73 = (double)(v18 / *((_DWORD *)this + 5));
    }
    else
    {
      v57 = 0;
      v58 = *((_QWORD *)this + 51);
      do
      {
        *(_QWORD *)(v58 + 136 * v57 + 64) = 0x3F0000003F000000;
        v59 = *((_DWORD *)this + 4);
        if (v59 >= 0)
          v60 = *((_DWORD *)this + 4);
        else
          v60 = v59 + 1;
        v61 = v60 >> 1;
        if (v59 < 2)
        {
          v71 = *(_DWORD **)(v58 + 136 * v57 + 48);
        }
        else
        {
          v62 = 0;
          v63 = 32767.0 / (double)v59 * 0.0000305175781;
          v64 = *(_QWORD *)(v58 + 136 * v57 + 16);
          do
            *(float *)(v64 + 4 * v62++) = v63;
          while (v61 != (_DWORD)v62);
          v65 = 0;
          v66 = *(_QWORD *)(v58 + 136 * v57 + 24);
          do
            *(float *)(v66 + 4 * v65++) = v63;
          while (v61 != (_DWORD)v65);
          v67 = *(float **)(v58 + 136 * v57 + 32);
          v68 = v61;
          do
          {
            *v67++ = v63;
            --v68;
          }
          while (v68);
          v69 = *(float **)(v58 + 136 * v57 + 40);
          v70 = v61;
          do
          {
            *v69++ = v63;
            --v70;
          }
          while (v70);
          v71 = *(_DWORD **)(v58 + 136 * v57 + 48);
          memset_pattern16(v71, &unk_1B66A2BC0, 4 * (v61 - 1) + 4);
        }
        *v71 = 0;
        bzero(*(void **)(v58 + 136 * v57 + 56), 4 * v61);
        v58 = *((_QWORD *)this + 51);
        v72 = v58 + 136 * v57;
        *(_DWORD *)(v72 + 76) = 1048600;
        *(_OWORD *)(v72 + 80) = xmmword_1B66A11F0;
        *(_DWORD *)(v72 + 96) = 1065353216;
        v73 = (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5));
        v74 = exp(-1.0 / (v73 * 0.3));
        *(float *)&v74 = v74;
        *(int32x2_t *)(v72 + 100) = vdup_lane_s32(*(int32x2_t *)&v74, 0);
        ++v57;
      }
      while (v57 < *((int *)this + 2));
    }
    v141 = exp(-1.0 / (v73 * 0.123745791));
    *((float *)this + 16) = v141;
    CmhBEAM2NOpt::calc_wng_beta_bound((void **)this, *((float *)this + 70));
    v143 = *((unsigned int *)this + 6);
    *((_DWORD *)this + 93) = v143;
    *(_QWORD *)((char *)this + 364) = 0x3F0000003E800000;
    if ((int)v143 >= 1)
      memset_pattern16(*((void **)this + 40), &unk_1B6627B80, 4 * v143);
    v144 = (float *)*((unsigned int *)this + 7);
    v145 = *((_DWORD *)this + 3);
    v146 = *((_DWORD *)this + 4);
    if ((int)v144 <= 0)
    {
      *(float *)v142.i32 = (float)v146;
    }
    else
    {
      *(float *)v142.i32 = (float)v146;
      v147 = (uint64x2_t)vdupq_n_s64((unint64_t)v144 - 1);
      v148 = vdup_n_s32(v145);
      v149 = (float32x2_t)vdup_lane_s32(v142, 0);
      v150 = ((unint64_t)v144 + 1) & 0x1FFFFFFFELL;
      v151 = (int32x2_t)0x100000000;
      v152 = (int64x2_t)xmmword_1B6626830;
      v153 = (float *)(*((_QWORD *)this + 43) + 4);
      v154 = (float32x2_t)vdup_n_s32(0xBA15CBEC);
      v155 = (float32x2_t)vdup_n_s32(0x3F524925u);
      __asm { FMOV            V16.2S, #0.75 }
      v161 = vdupq_n_s64(2uLL);
      do
      {
        v162 = vmovn_s64((int64x2_t)vcgeq_u64(v147, (uint64x2_t)v152));
        v163 = vminnm_f32(vmla_f32(v155, v154, vdiv_f32(vcvt_f32_s32(vmul_s32(v148, v151)), v149)), _D16);
        if ((v162.i8[0] & 1) != 0)
          *(v153 - 1) = fmaxf(v163.f32[0], 0.25);
        if ((v162.i8[4] & 1) != 0)
          *v153 = fmaxf(v163.f32[1], 0.25);
        v152 = vaddq_s64(v152, v161);
        v151 = vadd_s32(v151, (int32x2_t)0x200000002);
        v153 += 2;
        v150 -= 2;
      }
      while (v150);
    }
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&model_env_tc_vector_attack_sec, (float *)0x41, *((_QWORD *)this + 42), 125.0, v144, (float)v145 / *(float *)v142.i32);
    v164 = (float *)*((unsigned int *)this + 7);
    v165 = *((_QWORD *)this + 42);
    if ((int)v164 >= 1)
    {
      v166 = (float *)*((_QWORD *)this + 41);
      v167 = (float *)*((_QWORD *)this + 42);
      v168 = *((unsigned int *)this + 7);
      do
      {
        v169 = 0.0;
        if (*v167 > 0.0)
          v169 = exp(-1.0 / (*v167 * (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5))));
        v170 = v169;
        *v166 = v170;
        v166 += 2;
        ++v167;
        --v168;
      }
      while (v168);
    }
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&model_env_tc_vector_decay_sec, (float *)0x41, v165, 125.0, v164, (float)*((int *)this + 3) / (float)*((int *)this + 4));
    v171 = *((unsigned int *)this + 7);
    if ((int)v171 >= 1)
    {
      v172 = (float *)*((_QWORD *)this + 42);
      v173 = (float *)(*((_QWORD *)this + 41) + 4);
      do
      {
        v174 = 0.0;
        if (*v172 > 0.0)
          v174 = exp(-1.0 / (*v172 * (double)(*((_DWORD *)this + 3) / *((_DWORD *)this + 5))));
        v175 = v174;
        *v173 = v175;
        v173 += 2;
        ++v172;
        --v171;
      }
      while (v171);
    }
    CmhBEAM2NOpt::loadRVSSSuppressionLimits(this);
    v177 = *((_DWORD *)this + 3);
    v178 = *((_DWORD *)this + 4);
    if (v177 >= 0)
      v179 = *((_DWORD *)this + 3);
    else
      v179 = v177 + 1;
    *((float *)this + 35) = (float)(v179 >> 1);
    *((float *)this + 96) = (float)*((int *)this + 7);
    *(float *)v176.i32 = (float)v177;
    v180 = *((_DWORD *)this + 5);
    __sz = (float)v177;
    v181 = vmul_n_f32(vdiv_f32((float32x2_t)0x441C4000443B8000, (float32x2_t)vdup_lane_s32(v176, 0)), (float)v178);
    v261 = (float)v178;
    v182 = vmvn_s8((int8x8_t)vcgez_f32(v181));
    v183.i64[0] = v182.i32[0];
    v183.i64[1] = v182.i32[1];
    __asm
    {
      FMOV            V2.2D, #0.5
      FMOV            V3.2D, #-0.5
    }
    v186 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v183, _Q3, _Q2), vcvtq_f64_f32(v181))));
    *((int32x2_t *)this + 104) = v186;
    *(float *)v182.i32 = (float)(2000.0 / (float)v177) * (float)v178;
    v187 = *(float *)v182.i32;
    if (*(float *)v182.i32 >= 0.0)
      v188 = 0.5;
    else
      v188 = -0.5;
    *((_DWORD *)this + 210) = (int)(v188 + v187) - v186.i32[1] + 1;
    *((_DWORD *)this + 211) = v178 / 2 - 1;
    v189 = (double)(v177 / v180);
    v190 = exp(-1.0 / (v189 * 0.123745791));
    *((float *)this + 212) = v190;
    v191 = (float)(200.0 / __sz) * v261;
    v192 = v191;
    if (v191 >= 0.0)
      v193 = 0.5;
    else
      v193 = -0.5;
    *((_DWORD *)this + 213) = (int)(v193 + v192);
    v194 = *((_QWORD *)this + 103);
    v195 = exp(-1.0 / (v189 * 0.01));
    v196 = exp(-1.0 / (v189 * 0.1));
    v197 = exp(-1.0 / (v189 * 0.03));
    v198 = exp(-1.0 / (v189 + v189));
    v199 = 0;
    v200 = v198;
    v201 = 1;
    v202 = vdup_n_s32(0x39400000u);
    do
    {
      v203 = v194 + 76 * v199;
      *(_DWORD *)v203 = 0;
      v204 = v201;
      *(float *)(v203 + 4) = v195;
      *(float *)(v203 + 8) = v196;
      *(_OWORD *)(v203 + 12) = xmmword_1B66A1200;
      *(_DWORD *)(v203 + 28) = 0;
      *(_DWORD *)(v203 + 32) = 0;
      *(float *)(v203 + 36) = v195;
      *(float *)(v203 + 40) = v197;
      *(int32x2_t *)(v203 + 48) = v202;
      *(float *)(v203 + 56) = v200;
      *(_OWORD *)(v203 + 60) = xmmword_1B66A1210;
      v199 = 1;
      v201 = 0;
    }
    while ((v204 & 1) != 0);
    *(_DWORD *)(v194 + 44) = 0;
    *(_DWORD *)(v194 + 120) = 1;
    CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&sns_gain_table, (float *)0x3F, *((_QWORD *)this + 31), 125.0, (float *)*((unsigned int *)this + 6), __sz / v261);
    v205 = *((unsigned int *)this + 2);
    v206 = *((_QWORD *)this + 51);
    if ((int)v205 >= 1)
    {
      v207 = 0;
      v208 = *((_DWORD *)this + 6);
      do
      {
        *(_QWORD *)(v206 + 136 * v207 + 108) = 0x3F00000000000000;
        if (v208 >= 1)
        {
          v209 = 0;
          v210 = *(_QWORD *)(v206 + 136 * v207 + 120);
          do
            *(_DWORD *)(v210 + 4 * (unsigned __int16)v209++) = 1065353216;
          while (v208 > (unsigned __int16)v209);
        }
        *(_QWORD *)(v206 + 136 * v207++ + 128) = 0x3F8000003DE38E39;
      }
      while (v207 != v205);
    }
    *((_DWORD *)this + 60) = 1;
    *(_QWORD *)((char *)this + 260) = 0;
    *((_DWORD *)this + 94) = 0;
    *(_QWORD *)((char *)this + 396) = 0;
    *((_DWORD *)this + 101) = *(_DWORD *)(v206 + 108);
    return CmhMicCheck::initialize((CmhBEAM2NOpt *)((char *)this + 464), *((_DWORD *)this + 3), *((_DWORD *)this + 5), *((_DWORD *)this + 4) / 2 + 1, (float **)this + 25, (float **)this + 27);
  }
  else
  {
    *(_DWORD *)this = 1;
    LODWORD(v75) = *((_DWORD *)this + 2);
    if (is_mul_ok((int)v75, 0x88uLL))
      v76 = 136 * (int)v75;
    else
      v76 = -1;
    v77 = (char *)operator new[](v76, MEMORY[0x1E0DE4E10]);
    if (v77)
    {
      if ((_DWORD)v75)
      {
        v78 = 136 * (int)v75;
        v79 = v77 + 120;
        do
        {
          *v79 = 0;
          *(_OWORD *)(v79 - 13) = 0uLL;
          *(_OWORD *)(v79 - 11) = 0uLL;
          *(_OWORD *)(v79 - 9) = 0uLL;
          v79 += 17;
          v78 -= 136;
        }
        while (v78);
      }
      *((_QWORD *)this + 51) = v77;
      v80 = *((int *)this + 11);
      if ((int)v80 < 0)
        v81 = -1;
      else
        v81 = 8 * v80;
      v82 = (char *)operator new[](v81, MEMORY[0x1E0DE4E10]);
      *((_QWORD *)this + 20) = v82;
      if (v82)
      {
        v83 = v82;
        bzero(v82, 8 * (int)v80);
        v84 = *((unsigned int *)this + 4);
        if ((int)v80 <= 0)
        {
LABEL_68:
          v89 = 0;
          if ((int)v84 < 0)
            v90 = -1;
          else
            v90 = 4 * (int)v84;
          if ((int)v84 >= 0)
            v91 = v84;
          else
            v91 = v84 + 1;
          v92 = v91 >> 1;
          v93 = (uint64_t)v91 >> 1;
          v94 = 1;
          v95 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v96 = v94;
            v97 = (char *)operator new[](v90, v95);
            v98 = (char *)this + 16 * v89;
            *((_QWORD *)v98 + 21) = v97;
            if (!v97)
              break;
            *((_QWORD *)v98 + 22) = &v97[4 * v93];
            bzero(v97, 4 * (int)v84);
            v94 = 0;
            v89 = 1;
            if ((v96 & 1) == 0)
            {
              if ((int)v75 < 1)
              {
LABEL_116:
                if ((int)v84 < -1)
                  v126 = -1;
                else
                  v126 = 4 * v93;
                v127 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                *((_QWORD *)this + 52) = v127;
                if (v127)
                {
                  v128 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                  *((_QWORD *)this + 53) = v128;
                  if (v128)
                  {
                    v129 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                    *((_QWORD *)this + 54) = v129;
                    if (v129)
                    {
                      v130 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                      *((_QWORD *)this + 55) = v130;
                      if (v130)
                      {
                        v131 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                        *((_QWORD *)this + 56) = v131;
                        if (v131)
                        {
                          v132 = operator new[](v126, MEMORY[0x1E0DE4E10]);
                          *((_QWORD *)this + 57) = v132;
                          if (v132)
                          {
                            v133 = *((int *)this + 6);
                            v134 = (int)v133 < 0 ? -1 : 4 * v133;
                            v135 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                            *((_QWORD *)this + 31) = v135;
                            if (v135)
                            {
                              v136 = v133;
                              if ((int)v133 < 1)
                              {
                                v212 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 37) = v212;
                                if (!v212)
                                  return 4294967294;
                                v213 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 38) = v213;
                                if (!v213)
                                  return 4294967294;
                                v214 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 39) = v214;
                                if (!v214)
                                  return 4294967294;
                                v215 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 40) = v215;
                                if (!v215)
                                  return 4294967294;
                              }
                              else
                              {
                                bzero(v135, 4 * v133);
                                v137 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 37) = v137;
                                if (!v137)
                                  return 4294967294;
                                bzero(v137, 4 * v133);
                                v138 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 38) = v138;
                                if (!v138)
                                  return 4294967294;
                                bzero(v138, 4 * v133);
                                v139 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 39) = v139;
                                if (!v139)
                                  return 4294967294;
                                bzero(v139, 4 * v133);
                                v140 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 40) = v140;
                                if (!v140)
                                  return 4294967294;
                                bzero(v140, 4 * v133);
                              }
                              v216 = *((int *)this + 7);
                              if ((int)v216 < 0)
                                v217 = -1;
                              else
                                v217 = 8 * v216;
                              v218 = operator new[](v217, MEMORY[0x1E0DE4E10]);
                              *((_QWORD *)this + 41) = v218;
                              if (v218)
                              {
                                v262 = v216;
                                if ((int)v216 >= 1)
                                  bzero(v218, 4 * (2 * v216));
                                v219 = (int)v216 < 0 ? -1 : 4 * v216;
                                __sza = v219;
                                v220 = operator new[](v219, MEMORY[0x1E0DE4E10]);
                                *((_QWORD *)this + 42) = v220;
                                if (v220)
                                {
                                  if ((int)v216 < 1)
                                  {
                                    v222 = operator new[](__sza, MEMORY[0x1E0DE4E10]);
                                    *((_QWORD *)this + 44) = v222;
                                    if (!v222)
                                      return 4294967294;
                                  }
                                  else
                                  {
                                    bzero(v220, 4 * v216);
                                    v221 = operator new[](__sza, MEMORY[0x1E0DE4E10]);
                                    *((_QWORD *)this + 44) = v221;
                                    if (!v221)
                                      return 4294967294;
                                    bzero(v221, 4 * v216);
                                  }
                                  if ((int)v84 < -3)
                                    v223 = -1;
                                  else
                                    v223 = 4 * (int)(v92 + 1);
                                  v260 = v223;
                                  v224 = operator new[](v223, MEMORY[0x1E0DE4E10]);
                                  *((_QWORD *)this + 43) = v224;
                                  if (v224)
                                  {
                                    if ((int)v84 >= -1)
                                      bzero(v224, 4 * (v92 + 1));
                                    v225 = operator new[](v260, MEMORY[0x1E0DE4E10]);
                                    *((_QWORD *)this + 25) = v225;
                                    if (v225)
                                    {
                                      v226 = v225;
                                      v227 = operator new[](v260, MEMORY[0x1E0DE4E10]);
                                      *((_QWORD *)this + 26) = v227;
                                      if (v227)
                                      {
                                        if ((int)v84 >= -1)
                                        {
                                          v228 = v227;
                                          bzero(v226, 4 * (v92 + 1));
                                          bzero(v228, 4 * (v92 + 1));
                                        }
                                        v229 = operator new[](v260, MEMORY[0x1E0DE4E10]);
                                        *((_QWORD *)this + 27) = v229;
                                        if (v229)
                                        {
                                          v230 = v229;
                                          v231 = operator new[](v260, MEMORY[0x1E0DE4E10]);
                                          *((_QWORD *)this + 28) = v231;
                                          if (v231)
                                          {
                                            v258 = 4 * (v92 + 1);
                                            if ((int)v84 >= -1)
                                            {
                                              v232 = v231;
                                              bzero(v230, v258);
                                              bzero(v232, v258);
                                            }
                                            v233 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                                            *((_QWORD *)this + 29) = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
                                            *((_QWORD *)this + 12) = operator new[](0x10uLL, v233);
                                            *((_QWORD *)this + 13) = operator new[](0x10uLL, v233);
                                            v234 = v233;
                                            v235 = 0;
                                            *((_QWORD *)this + 14) = operator new[](0x10uLL, v233);
                                            __len = 4 * v262;
                                            v236 = 1;
                                            while (1)
                                            {
                                              v237 = v236;
                                              *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v235) = operator new[](v260, v234);
                                              v238 = *(void **)(*((_QWORD *)this + 29) + 8 * v235);
                                              if (!v238)
                                                break;
                                              if ((int)v84 >= -1)
                                                bzero(v238, v258);
                                              *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v235) = operator new[](__sza, v234);
                                              v239 = *(void **)(*((_QWORD *)this + 12) + 8 * v235);
                                              if (!v239)
                                                break;
                                              if ((int)v262 >= 1)
                                                bzero(v239, __len);
                                              *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v235) = operator new[](__sza, v234);
                                              v240 = *(void **)(*((_QWORD *)this + 13) + 8 * v235);
                                              if (!v240)
                                                break;
                                              if ((int)v262 >= 1)
                                                bzero(v240, __len);
                                              *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v235) = operator new[](__sza, v234);
                                              v241 = *(void **)(*((_QWORD *)this + 14) + 8 * v235);
                                              if (!v241)
                                                break;
                                              if ((int)v262 >= 1)
                                                bzero(v241, __len);
                                              v236 = 0;
                                              v235 = 1;
                                              if ((v237 & 1) == 0)
                                              {
                                                v242 = operator new[](v134, MEMORY[0x1E0DE4E10]);
                                                *((_QWORD *)this + 34) = v242;
                                                if (v242)
                                                {
                                                  if ((int)v136 >= 1)
                                                    bzero(v242, 4 * v136);
                                                  v243 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
                                                  *((_QWORD *)this + 98) = v243;
                                                  if (v243)
                                                  {
                                                    *v243 = 0;
                                                    v243[1] = 0;
                                                    v244 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
                                                    *((_QWORD *)this + 99) = v244;
                                                    if (v244)
                                                    {
                                                      *v244 = 0;
                                                      v244[1] = 0;
                                                      if ((int)v75 < 1)
                                                      {
LABEL_240:
                                                        v250 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
                                                        *((_QWORD *)this + 101) = v250;
                                                        if (v250)
                                                        {
                                                          v251 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
                                                          *((_QWORD *)this + 100) = v251;
                                                          if (v251)
                                                          {
                                                            v252 = 0;
                                                            v253 = 1;
                                                            v254 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                                                            while (1)
                                                            {
                                                              v255 = v253;
                                                              *(_QWORD *)(*((_QWORD *)this + 101) + 8 * v252) = operator new[](__sza, v254);
                                                              v256 = *(void **)(*((_QWORD *)this + 101) + 8 * v252);
                                                              if (!v256)
                                                                break;
                                                              if ((int)v262 >= 1)
                                                                memset_pattern16(v256, &unk_1B6627B80, __len);
                                                              *(_QWORD *)(*((_QWORD *)this + 100) + 8 * v252) = operator new[](v126, v254);
                                                              v257 = *(void **)(*((_QWORD *)this + 100) + 8 * v252);
                                                              if (!v257)
                                                                break;
                                                              if ((int)v84 >= 2)
                                                                bzero(v257, 4 * v92);
                                                              v253 = 0;
                                                              v252 = 1;
                                                              if ((v255 & 1) == 0)
                                                                goto LABEL_5;
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v245 = 0;
                                                        if ((int)v84 < 0)
                                                          v246 = -1;
                                                        else
                                                          v246 = 4 * (int)v84;
                                                        v247 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                                                        while (1)
                                                        {
                                                          *(_QWORD *)(*((_QWORD *)this + 98) + v245) = operator new[](v246, v247);
                                                          v248 = *(void **)(*((_QWORD *)this + 98) + v245);
                                                          if (!v248)
                                                            break;
                                                          if ((int)v84 >= 1)
                                                            bzero(v248, 4 * v84);
                                                          *(_QWORD *)(*((_QWORD *)this + 99) + v245) = operator new[](v246, v247);
                                                          v249 = *(void **)(*((_QWORD *)this + 99) + v245);
                                                          if (!v249)
                                                            break;
                                                          if ((int)v84 >= 1)
                                                            bzero(v249, 4 * v84);
                                                          v245 += 8;
                                                          if (8 * v75 == v245)
                                                            goto LABEL_240;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                return 4294967294;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v99 = 0;
                v100 = 120;
                v101 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                while (1)
                {
                  v102 = *((int *)this + 4);
                  v103 = (int)v102 < 0 ? -1 : 4 * v102;
                  v104 = (char *)operator new[](v103, v101);
                  v105 = *((_QWORD *)this + 51) + v100;
                  *(_QWORD *)(v105 - 120) = v104;
                  if (!v104)
                    break;
                  v106 = (int)v102 >= 0 ? v102 : (int)v102 + 1;
                  v107 = v106 >> 1;
                  *(_QWORD *)(v105 - 112) = &v104[4 * (v106 >> 1)];
                  bzero(v104, 4 * v102);
                  v108 = (int)v102 < -1 ? -1 : 4 * (int)v107;
                  *(_QWORD *)(v105 - 104) = operator new[](v108, v101);
                  v109 = *((_QWORD *)this + 51) + v100;
                  if (!*(_QWORD *)(v109 - 104))
                    break;
                  *(_QWORD *)(v109 - 96) = operator new[](v108, v101);
                  v110 = *((_QWORD *)this + 51);
                  v111 = *(void **)(v110 + v100 - 96);
                  if (!v111)
                    break;
                  if ((int)v102 >= 2)
                  {
                    bzero(*(void **)(v110 + v100 - 104), 4 * v107);
                    v101 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                    bzero(v111, 4 * v107);
                  }
                  *(_QWORD *)(v110 + v100 - 88) = operator new[](v108, v101);
                  v112 = *((_QWORD *)this + 51) + v100;
                  if (!*(_QWORD *)(v112 - 88))
                    break;
                  *(_QWORD *)(v112 - 80) = operator new[](v108, v101);
                  v113 = *((_QWORD *)this + 51);
                  v114 = *(void **)(v113 + v100 - 80);
                  if (!v114)
                    break;
                  if ((int)v102 >= 2)
                  {
                    bzero(*(void **)(v113 + v100 - 88), 4 * v107);
                    v101 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                    bzero(v114, 4 * v107);
                  }
                  *(_QWORD *)(v113 + v100 - 72) = operator new[](v108, v101);
                  v115 = *(void **)(*((_QWORD *)this + 51) + v100 - 72);
                  if (!v115)
                    break;
                  bzero(v115, 4 * (int)v107);
                  v116 = *((_DWORD *)this + 4);
                  v117 = v116 >= 0 ? *((_DWORD *)this + 4) : v116 + 1;
                  v118 = v117 >> 1;
                  v119 = 4 * v118;
                  v120 = v116 < -1 ? -1 : 4 * v118;
                  *(_QWORD *)(*((_QWORD *)this + 51) + v100 - 64) = operator new[](v120, v101);
                  v121 = *(void **)(*((_QWORD *)this + 51) + v100 - 64);
                  if (!v121)
                    break;
                  bzero(v121, v119);
                  v122 = *((int *)this + 6);
                  v123 = (int)v122 < 0 ? -1 : 4 * v122;
                  v124 = operator new[](v123, v101);
                  *(_QWORD *)(*((_QWORD *)this + 51) + v100) = v124;
                  if (!v124)
                    break;
                  if ((int)v122 >= 1)
                    bzero(v124, 4 * v122);
                  ++v99;
                  v75 = *((int *)this + 2);
                  v100 += 136;
                  if (v99 >= v75)
                  {
                    LODWORD(v84) = *((_DWORD *)this + 4);
                    if ((int)v84 >= 0)
                      v125 = *((_DWORD *)this + 4);
                    else
                      v125 = v84 + 1;
                    v92 = v125 >> 1;
                    v93 = (uint64_t)v125 >> 1;
                    goto LABEL_116;
                  }
                }
              }
              return 4294967294;
            }
          }
        }
        else
        {
          v85 = 0;
          if ((int)v84 < 0)
            v86 = -1;
          else
            v86 = 4 * (int)v84;
          v87 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            *(_QWORD *)&v83[v85] = operator new[](v86, v87);
            v83 = (char *)*((_QWORD *)this + 20);
            v88 = *(void **)&v83[v85];
            if (!v88)
              break;
            if ((int)v84 >= 1)
              bzero(v88, 4 * v84);
            v85 += 8;
            if (8 * v80 == v85)
              goto LABEL_68;
          }
        }
      }
    }
    else
    {
      *((_QWORD *)this + 51) = 0;
    }
    return 4294967294;
  }
}

void CmhBEAM2NOpt::calc_cr_ci_vect(CmhBEAM2NOpt *this, float *a2, float *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  __double2 v12;
  float cosval;
  float sinval;

  v6 = *((_DWORD *)this + 4);
  if (v6 >= 0)
    v7 = *((_DWORD *)this + 4);
  else
    v7 = v6 + 1;
  v8 = v7 >> 1;
  if (v6 >= -1)
  {
    v9 = 0;
    v10 = (float)v6;
    v11 = (float)((float)(*((float *)this + 13) * (float)*((int *)this + 3)) / 343.0);
    do
    {
      v12 = __sincos_stret((double)(int)v9 * 6.28318531 / v10 * v11);
      cosval = v12.__cosval;
      a2[v9] = cosval;
      sinval = v12.__sinval;
      a3[v9++] = -sinval;
    }
    while (v8 + 1 != v9);
  }
  *a2 = 1.0;
  a2[v8] = 1.0;
  *a3 = 0.0;
  a3[v8] = 0.0;
  *((_DWORD *)this + 9) = 0;
}

void CmhBEAM2NOpt::calc_wng_beta_bound(void **this, float a2)
{
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64x2_t v7;
  float64x2_t v8;
  int64x2_t v9;
  float *v10;
  int64x2_t v17;
  int32x2_t v18;
  float32x2_t v19;

  v2 = fminf(a2, 1.0);
  v3 = *((unsigned int *)this + 6);
  if (v2 <= 0.0)
  {
    if ((int)v3 >= 1)
      memset_pattern16(this[34], &unk_1B6627B80, 4 * v3);
  }
  else if ((int)v3 >= 1)
  {
    v4 = *((float *)this + 13) * 6.28318531 * (double)*((int *)this + 3) / (double)(343 * *((_DWORD *)this + 4));
    *(double *)&v5 = sqrt(2.0 / v2);
    v6 = (v3 + 1) & 0x1FFFFFFFELL;
    v7 = (uint64x2_t)vdupq_n_s64(v3 - 1);
    v8 = (float64x2_t)vdupq_lane_s64(v5, 0);
    v9 = (int64x2_t)xmmword_1B6626830;
    v10 = (float *)((char *)this[34] + 4);
    __asm
    {
      FMOV            V5.2D, #-1.0
      FMOV            V6.2S, #1.0
    }
    v17 = vdupq_n_s64(2uLL);
    do
    {
      v18 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)v9));
      v19 = vminnm_f32(vcvt_f32_f64(vmlaq_f64(_Q5, vcvtq_f64_f32(vmul_n_f32(vcvt_f32_s32(vadd_s32(vmovn_s64(v9), (int32x2_t)0x100000001)), v4)), v8)), _D6);
      if ((v18.i8[0] & 1) != 0)
        *(v10 - 1) = fmaxf(v19.f32[0], -1.0);
      if ((v18.i8[4] & 1) != 0)
        *v10 = fmaxf(v19.f32[1], -1.0);
      v9 = vaddq_s64(v9, v17);
      v10 += 2;
      v6 -= 2;
    }
    while (v6);
  }
}

uint64_t CmhBEAM2NOpt::loadRVSSSuppressionLimits(CmhBEAM2NOpt *this)
{
  uint64_t result;
  uint64_t v3;
  float *v4;
  float v5;

  result = CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)&max_s_table, (float *)0x41, *((_QWORD *)this + 44), 125.0, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  v3 = *((unsigned int *)this + 7);
  if ((int)v3 >= 1)
  {
    v4 = (float *)*((_QWORD *)this + 44);
    do
    {
      v5 = *v4;
      if (*v4 <= *((float *)this + 90))
        v5 = *((float *)this + 90);
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::interpolateFrequencyVector(uint64_t this, float *a2, uint64_t a3, float a4, float *a5, float a6)
{
  uint64_t v6;
  float v7;
  int v8;
  int v9;
  float v10;

  if ((int)a5 >= 1 && a4 > 0.0 && a6 > 0.0)
  {
    v6 = 0;
    do
    {
      v7 = (float)((float)(int)v6 * a6) / a4;
      v8 = vcvtps_s32_f32(v7);
      if (v8 >= (int)a2)
      {
        v10 = *(float *)(this + 4 * ((_DWORD)a2 - 1));
      }
      else
      {
        v9 = vcvtms_s32_f32(v7);
        if (v8 == v9)
          v10 = *(float *)(this + 4 * v9);
        else
          v10 = *(float *)(this + 4 * v9)
              + (float)((float)(v7 - (float)v9)
                      * (float)((float)(*(float *)(this + 4 * v8) - *(float *)(this + 4 * v9)) / (float)(v8 - v9)));
      }
      *(float *)(a3 + 4 * v6++) = v10;
    }
    while ((_DWORD)a5 != (_DWORD)v6);
  }
  return this;
}

void CmhBEAM2NOpt::process(CmhBEAM2NOpt *this, const DSPSplitComplex *__A, DSPSplitComplex *__C)
{
  const DSPSplitComplex *v3;
  const DSPSplitComplex *v4;
  uint64_t v6;
  float *v7;
  DSPSplitComplex v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float **v29;
  uint64_t v30;
  uint64_t v31;
  const DSPSplitComplex *v32;
  int v33;
  const DSPSplitComplex *v34;
  vDSP_Length v35;
  const DSPSplitComplex *p_Aa;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float *v75;
  float *v76;
  int v77;
  float v78;
  int v79;
  int v80;
  float *v81;
  float *v82;
  float *v83;
  float *v84;
  float *v85;
  float *v86;
  uint64_t v87;
  float *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  int v99;
  float *v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  int v105;
  float *v106;
  float *v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  float **v115;
  float *v116;
  const float **v117;
  const float **v118;
  float v119;
  uint64_t v120;
  int v121;
  float v122;
  float **v123;
  CmhBEAM2NOpt *v124;
  const float **v125;
  const float **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float **p_imagp;
  int v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  float **v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  _QWORD *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t i;
  uint64_t v153;
  DSPSplitComplex *v154;
  uint64_t v155;
  int v156;
  BOOL v157;
  uint64_t v159;
  int v160;
  DSPSplitComplex *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  uint64_t *v167;
  float *imagp;
  float *realp;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float *v174;
  float *v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  const float *v185;
  float *v186;
  float *v187;
  uint64_t v188;
  uint64_t v189;
  const float *v190;
  float *v191;
  float *v192;
  const float *v193;
  float *v194;
  uint64_t v195;
  _DWORD **v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  DSPSplitComplex v200;
  DSPSplitComplex __Aa;
  DSPSplitComplex v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)this)
    return;
  v3 = __C;
  v4 = __A;
  if (*((_DWORD *)this + 38) != 1)
  {
    v8 = __A[1];
    __Aa = *__C;
    v202 = v8;
    vDSP_zvmov(__A, 1, __C, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
    if (!*((_DWORD *)this + 60))
    {
      *((_DWORD *)this + 33) = 5;
      if (*((_DWORD *)this + 2) != 2)
      {
        v33 = *((_DWORD *)this + 1);
        if (v33 == 1)
        {
          v34 = (const DSPSplitComplex *)*((_QWORD *)this + 51);
          v35 = (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1;
          p_Aa = &v202;
        }
        else
        {
          if (v33)
            goto LABEL_75;
          v34 = (const DSPSplitComplex *)*((_QWORD *)this + 51);
          v35 = (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1;
          p_Aa = &__Aa;
        }
        vDSP_zvmov(p_Aa, 1, v34, 1, v35);
        goto LABEL_75;
      }
      if (*((int *)this + 11) >= 1)
      {
        v30 = 0;
        v31 = 0;
        v32 = &__Aa;
        do
        {
          vDSP_zvmov(v32, 1, (const DSPSplitComplex *)(*((_QWORD *)this + 51) + v30), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          ++v31;
          v30 += 136;
          ++v32;
        }
        while (v31 < *((int *)this + 11));
      }
LABEL_75:
      if (*((_DWORD *)this + 94))
      {
        v79 = *((_DWORD *)this + 6);
        if (v79 >= 1)
        {
          v80 = 0;
          v81 = (float *)*((_QWORD *)this + 37);
          v82 = (float *)*((_QWORD *)this + 38);
          v83 = v202.imagp + 1;
          v84 = __Aa.imagp + 1;
          v85 = v202.realp + 1;
          v86 = __Aa.realp + 1;
          v87 = *((_QWORD *)this + 41) + 8;
          v88 = v82;
          v89 = v81;
          do
          {
            v90 = fabsf(*v86 + *v85) + fabsf(*v84 + *v83);
            *v89 = fmaxf(v90 + (float)(*(float *)(v87 + 4 * (*v89 > v90)) * (float)(*v89 - v90)), 0.000091553);
            ++v89;
            v91 = *v85++;
            v92 = v91;
            v93 = *v86++;
            v94 = v93;
            v95 = *v83++;
            v96 = v95;
            v97 = *v84++;
            v98 = vabds_f32(v92, v94) + vabds_f32(v96, v97);
            *v88 = fmaxf(v98 + (float)(*(float *)(v87 + 4 * (*v88 > v98)) * (float)(*v88 - v98)), 0.000030518);
            ++v88;
            ++v80;
            v87 += 8;
          }
          while (v79 > (unsigned __int16)v80);
          v99 = 0;
          v100 = (float *)*((_QWORD *)this + 39);
          v101 = v100;
          do
          {
            v102 = *v81++;
            v103 = v102;
            v104 = *v82++;
            *v101++ = (float)(*((float *)this + 91) * v103) / v104;
            ++v99;
          }
          while (v79 > (unsigned __int16)v99);
          v105 = 0;
          v106 = (float *)*((_QWORD *)this + 40);
          v107 = (float *)(*((_QWORD *)this + 44) + 4);
          do
          {
            v108 = *v100++;
            v109 = v108;
            if (v108 > 0.708)
              v109 = *(float *)"}?5?";
            if (v109 < 0.125)
              v109 = 0.125;
            v110 = v109 * 108.2375 + -13.6263;
            if (v110 < 0.0)
              v110 = 0.0;
            if (v110 > 63.0)
              v110 = 63.0;
            v111 = rvss_table[v110];
            *v106 = v111;
            v112 = *v107++;
            v113 = v112;
            if (v112 > v111)
              v111 = v113;
            *v106++ = v111;
            ++v105;
          }
          while (v79 > (unsigned __int16)v105);
        }
      }
      if (!*((_DWORD *)this + 60))
        goto LABEL_138;
      if (*((int *)this + 11) >= 1)
      {
        v114 = 0;
        v115 = (float **)((char *)this + 176);
        do
        {
          vDSP_vmul(*(const float **)(*((_QWORD *)this + 29) + 8 * v114), 1, *(v115 - 1), 1, *(v115 - 1), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          v116 = *v115;
          v115 += 2;
          vDSP_vmul(*(const float **)(*((_QWORD *)this + 29) + 8 * v114++), 1, v116, 1, v116, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
        }
        while (v114 < *((int *)this + 11));
      }
      memcpy(**((void ***)this + 100), *(const void **)(*((_QWORD *)this + 51) + 48), 4 * (*((int *)this + 4) >> 1));
      if (*((_DWORD *)this + 2) == 2
        && (memcpy(*(void **)(*((_QWORD *)this + 100) + 8), *(const void **)(*((_QWORD *)this + 51) + 184), 4 * (*((int *)this + 4) >> 1)), *((_DWORD *)this + 2) == 2))
      {
        v117 = (const float **)((char *)this + 168);
        v118 = (const float **)((char *)this + 184);
        CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 21, (const float **)this + 23, (float **)(*((_QWORD *)this + 51) + 136), *((_QWORD *)this + 51) + 136, 1);
        v120 = *((_QWORD *)this + 51);
        if (*((_DWORD *)this + 66))
          CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 23, (const float **)this + 21, (float **)(v120 + 136), v120 + 136, 0);
        else
          CmhBEAM2NOpt::abf_output_only((uint64_t)this, *((_QWORD *)this + 23), *((_QWORD *)this + 24), *((_QWORD *)this + 21), *((_QWORD *)this + 22), (_QWORD *)(v120 + 136), v119);
        CmhBEAM2NOpt::sns((uint64_t)this, *((_QWORD *)this + 51) + 136);
      }
      else
      {
        v121 = *((_DWORD *)this + 1);
        if (v121)
        {
          if (v121 != 1)
            goto LABEL_120;
          CmhBEAM2NOpt::abf((uint64_t)this, (const float **)this + 21, (const float **)this + 23, *((float ***)this + 51), *((_QWORD *)this + 51), 1);
          v123 = (float **)*((_QWORD *)this + 51);
          if (*((_DWORD *)this + 65))
          {
            v124 = this;
            v125 = (const float **)((char *)this + 184);
            v126 = (const float **)((char *)this + 168);
LABEL_112:
            CmhBEAM2NOpt::abf((uint64_t)v124, v125, v126, v123, (uint64_t)v123, 0);
            goto LABEL_116;
          }
          v127 = *((_QWORD *)this + 23);
          v128 = *((_QWORD *)this + 24);
          v129 = *((_QWORD *)this + 21);
          v130 = *((_QWORD *)this + 22);
LABEL_115:
          CmhBEAM2NOpt::abf_output_only((uint64_t)this, v127, v128, v129, v130, v123, v122);
LABEL_116:
          CmhBEAM2NOpt::sns((uint64_t)this, *((_QWORD *)this + 51));
          if (*((_DWORD *)this + 2) == 2)
          {
            v131 = 0;
            v132 = 0;
            do
            {
              vDSP_vmul(*(const float **)(*((_QWORD *)this + 13) + 8 * v132), 1, *(const float **)(*((_QWORD *)this + 51) + v131), 1, *(float **)(*((_QWORD *)this + 51) + v131), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
              vDSP_vmul(*(const float **)(*((_QWORD *)this + 13) + 8 * v132++), 1, *(const float **)(*((_QWORD *)this + 51) + v131 + 8), 1, *(float **)(*((_QWORD *)this + 51) + v131 + 8), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
              v133 = *((int *)this + 2);
              v131 += 136;
            }
            while (v132 < v133);
LABEL_121:
            if ((_DWORD)v133 == 2)
            {
              v134 = 0;
              v135 = 0;
              p_imagp = &__Aa.imagp;
              while (1)
              {
                v137 = *((_DWORD *)this + 36);
                if (v137 == 1)
                  break;
                if (v137)
                {
                  memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &v202.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                  v142 = *((int *)this + 64);
                  v139 = v142 + 2;
                  v140 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134 + 8) + 4 * (v142 + 2));
                  v141 = &v202.imagp;
                  goto LABEL_128;
                }
                memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &(*(p_imagp - 1))[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                v138 = *((int *)this + 64);
                v139 = v138 + 2;
                v140 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134 + 8) + 4 * (v138 + 2));
                v141 = p_imagp;
LABEL_129:
                memcpy(v140, &(*v141)[v139], 4 * (*((_DWORD *)this + 6) + ~(_DWORD)v138));
                ++v135;
                v134 += 136;
                p_imagp += 2;
                if (v135 >= *((int *)this + 2))
                  goto LABEL_138;
              }
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134) + 4 * (*((_DWORD *)this + 64) + 2)), &__Aa.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              v142 = *((int *)this + 64);
              v139 = v142 + 2;
              v140 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + v134 + 8) + 4 * (v142 + 2));
              v141 = &__Aa.imagp;
LABEL_128:
              LODWORD(v138) = v142;
              goto LABEL_129;
            }
            v143 = *((_DWORD *)this + 36);
            if (v143 == 1)
            {
              v144 = (_DWORD *)((char *)this + 24);
              memcpy((void *)(**((_QWORD **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), &__Aa.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              v149 = *((int *)this + 64);
              v146 = v149 + 2;
              v147 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + 8) + 4 * (v149 + 2));
              v148 = &__Aa.imagp;
            }
            else
            {
              if (!v143)
              {
                v144 = (_DWORD *)((char *)this + 24);
                memcpy((void *)(**((_QWORD **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), (const void *)(*((_QWORD *)&__Aa.realp + 2 * *((int *)this + 1)) + 4 * (*((_DWORD *)this + 64) + 2)), 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
                v145 = *((int *)this + 64);
                v146 = v145 + 2;
                v147 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + 8) + 4 * (v145 + 2));
                v148 = (_QWORD *)((unint64_t)(&__Aa + *((int *)this + 1)) | 8);
LABEL_137:
                memcpy(v147, (const void *)(*v148 + 4 * v146), 4 * (*v144 + ~(_DWORD)v145));
LABEL_138:
                if (!*((_DWORD *)this + 94))
                  goto LABEL_187;
                v150 = *((_DWORD *)this + 2);
                if (v150 < 1)
                  goto LABEL_187;
                v151 = 0;
                for (i = 0; i < v150; ++i)
                {
                  v153 = *((_QWORD *)this + 51);
                  *((_DWORD *)this + 31) = 1;
                  if (*((_DWORD *)this + 32))
                  {
                    v154 = &v202;
                    switch(*((_DWORD *)this + 33))
                    {
                      case 0:
                      case 2:
                        goto LABEL_144;
                      case 1:
                      case 3:
                        goto LABEL_143;
                      case 4:
                        v156 = *((_DWORD *)this + 34);
                        if (v156 == 1)
                        {
LABEL_143:
                          v154 = &__Aa;
                        }
                        else
                        {
                          v154 = &v202;
                          if (!v156)
                          {
                            if (v150 == 2)
                              v157 = v151 == 0;
                            else
                              v157 = *((_DWORD *)this + 1) == 0;
                            if (v157)
                              v154 = &__Aa;
                            else
                              v154 = &v202;
                          }
                        }
LABEL_144:
                        if ((DSPSplitComplex *)(v153 + v151) != v154)
                        {
                          v155 = v153 + v151;
                          memcpy(*(void **)(v153 + v151), v154->realp, 4 * (*((_DWORD *)this + 4) / 2));
                          memcpy(*(void **)(v155 + 8), v154->imagp, 4 * (*((_DWORD *)this + 4) / 2));
                          v150 = *((_DWORD *)this + 2);
                        }
                        break;
                      default:
                        goto LABEL_146;
                    }
                  }
                  else
                  {
LABEL_146:
                    *((_DWORD *)this + 31) = 0;
                  }
                  v151 += 136;
                }
                if (*((_DWORD *)this + 31) || v150 < 1)
                {
LABEL_187:
                  if (*((_DWORD *)this + 10))
                  {
                    if (*((_DWORD *)this + 2) == 2)
                    {
                      v188 = 0;
                      v189 = 0;
                      do
                      {
                        v190 = (const float *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * v189) + 4);
                        v191 = (float *)(*(_QWORD *)(*((_QWORD *)this + 51) + v188) + 4);
                        vDSP_vmul(v191, 1, v190, 1, v191, 1, *((int *)this + 6));
                        v192 = (float *)(*(_QWORD *)(*((_QWORD *)this + 51) + v188 + 8) + 4);
                        vDSP_vmul(v192, 1, v190, 1, v192, 1, *((int *)this + 6));
                        ++v189;
                        v188 += 136;
                      }
                      while (v189 < *((int *)this + 2));
                    }
                    else
                    {
                      v193 = (const float *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * *((int *)this + 1)) + 4);
                      vDSP_vmul((const float *)(**((_QWORD **)this + 51) + 4), 1, v193, 1, (float *)(**((_QWORD **)this + 51) + 4), 1, *((int *)this + 6));
                      v194 = (float *)(*(_QWORD *)(*((_QWORD *)this + 51) + 8) + 4);
                      vDSP_vmul(v194, 1, v193, 1, v194, 1, *((int *)this + 6));
                    }
                  }
                  v195 = *((unsigned int *)this + 2);
                  if ((int)v195 >= 1)
                  {
                    v196 = (_DWORD **)(*((_QWORD *)this + 51) + 8);
                    do
                    {
                      **v196 = 0;
                      **(v196 - 1) = 0;
                      v196 += 17;
                      --v195;
                    }
                    while (v195);
                    v197 = 0;
                    v198 = 0;
                    do
                    {
                      vDSP_zvmov((const DSPSplitComplex *)(*((_QWORD *)this + 51) + v197), 1, v3, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
                      ++v198;
                      v195 = *((int *)this + 2);
                      ++v3;
                      v197 += 136;
                    }
                    while (v198 < v195);
                  }
                  if (*((_DWORD *)this + 194))
                  {
                    if ((_DWORD)v195 == 2)
                    {
                      CmhBEAM2NOpt::getAuxVectors((uint64_t)this, 0);
                      v199 = 1;
                    }
                    else
                    {
                      v199 = *((_DWORD *)this + 1);
                    }
                    CmhBEAM2NOpt::getAuxVectors((uint64_t)this, v199);
                  }
                  return;
                }
                v159 = 0;
                v160 = *((_DWORD *)this + 34);
                while (v160 != 1)
                {
                  if (v160)
                  {
                    v161 = &v202;
                    goto LABEL_171;
                  }
                  if (v150 == 2)
                  {
                    v161 = &__Aa + v159;
                    goto LABEL_171;
                  }
                  v162 = *((_DWORD *)this + 1);
                  if (!v162)
                    break;
                  v161 = &v202;
                  if (v162 == 1)
                    goto LABEL_171;
LABEL_184:
                  if (++v159 == v150)
                  {
                    v183 = 0;
                    v184 = 0;
                    do
                    {
                      v185 = (const float *)*((_QWORD *)this + 40);
                      v186 = (float *)(*(_QWORD *)(*((_QWORD *)this + 51) + v183) + 4);
                      vDSP_vmul(v186, 1, v185, 1, v186, 1, *((int *)this + 6));
                      v187 = (float *)(*(_QWORD *)(*((_QWORD *)this + 51) + v183 + 8) + 4);
                      vDSP_vmul(v187, 1, v185, 1, v187, 1, *((int *)this + 6));
                      ++v184;
                      v183 += 136;
                    }
                    while (v184 < *((int *)this + 2));
                    goto LABEL_187;
                  }
                }
                v161 = &__Aa;
LABEL_171:
                v163 = *((unsigned int *)this + 93);
                if ((int)v163 >= 1)
                {
                  v164 = 0;
                  v165 = *((float *)this + 95);
                  v166 = fabsf(v165);
                  v167 = (uint64_t *)(*((_QWORD *)this + 51) + 136 * v159);
                  realp = v161->realp;
                  imagp = v161->imagp;
                  v170 = *(_QWORD *)(*((_QWORD *)this + 101) + 8 * (int)v159);
                  v171 = *v167;
                  v172 = v167[1] + 4;
                  v173 = v171 + 4;
                  v174 = imagp + 1;
                  v175 = realp + 1;
                  do
                  {
                    v176 = *(float *)(v173 + 4 * v164);
                    v177 = (float)(fabsf(v175[v164]) + fabsf(v174[v164]))
                         / (float)(fabsf(v176) + fabsf(*(float *)(v172 + 4 * v164)));
                    v178 = 1.0;
                    if (v177 < *((float *)this + 92))
                    {
                      *(float *)(v173 + 4 * v164) = v176 * v177;
                      *(float *)(v172 + 4 * v164) = v177 * *(float *)(v172 + 4 * v164);
                      v178 = v177;
                    }
                    *(float *)(v170 + 4 * v164) = v178;
                    if (*((float *)this + 95) != 0.0 && *((float *)this + 96) < (float)(v164 + 1))
                    {
                      v179 = *((float *)this + 97);
                      if (v177 < v179)
                      {
                        v180 = (float)(v177 - *((float *)this + 98))
                             / (float)(vabds_f32(v179, *((float *)this + 98)) + 1.0e-10);
                        if (v180 < 0.0)
                          v180 = 0.0;
                        v181 = (float)(1.0 - v166) + (float)(v166 * v180);
                        v182 = 1.0 - v181;
                        if (v165 >= 0.0)
                          v182 = -(float)(1.0 - v181);
                        *(float *)(v173 + 4 * v164) = (float)(v175[v164] * v182)
                                                    + (float)(v181 * *(float *)(v173 + 4 * v164));
                        *(float *)(v172 + 4 * v164) = (float)(v174[v164] * v182)
                                                    + (float)(v181 * *(float *)(v172 + 4 * v164));
                      }
                    }
                    ++v164;
                  }
                  while (v163 != v164);
                }
                goto LABEL_184;
              }
              v144 = (_DWORD *)((char *)this + 24);
              memcpy((void *)(**((_QWORD **)this + 51) + 4 * (*((_DWORD *)this + 64) + 2)), &v202.realp[*((_DWORD *)this + 64) + 2], 4 * (*((_DWORD *)this + 6) + ~*((_DWORD *)this + 64)));
              v149 = *((int *)this + 64);
              v146 = v149 + 2;
              v147 = (void *)(*(_QWORD *)(*((_QWORD *)this + 51) + 8) + 4 * (v149 + 2));
              v148 = &v202.imagp;
            }
            LODWORD(v145) = v149;
            goto LABEL_137;
          }
LABEL_120:
          vDSP_vmul(*(const float **)(*((_QWORD *)this + 13) + 8 * *((int *)this + 1)), 1, **((const float ***)this + 51), 1, **((float ***)this + 51), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          vDSP_vmul(*(const float **)(*((_QWORD *)this + 13) + 8 * *((int *)this + 1)), 1, *(const float **)(*((_QWORD *)this + 51) + 8), 1, *(float **)(*((_QWORD *)this + 51) + 8), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
          LODWORD(v133) = *((_DWORD *)this + 2);
          goto LABEL_121;
        }
        v117 = (const float **)((char *)this + 168);
        v118 = (const float **)((char *)this + 184);
      }
      CmhBEAM2NOpt::abf((uint64_t)this, v118, v117, *((float ***)this + 51), *((_QWORD *)this + 51), 1);
      v123 = (float **)*((_QWORD *)this + 51);
      if (*((_DWORD *)this + 65))
      {
        v124 = this;
        v125 = v117;
        v126 = v118;
        goto LABEL_112;
      }
      v127 = *((_QWORD *)this + 21);
      v128 = *((_QWORD *)this + 22);
      v129 = *((_QWORD *)this + 23);
      v130 = *((_QWORD *)this + 24);
      goto LABEL_115;
    }
    v9 = *((_QWORD *)this + 103);
    if (!*(_DWORD *)(v9 + 44))
    {
LABEL_69:
      v75 = (float *)*((_QWORD *)this + 27);
      v200.realp = (float *)*((_QWORD *)this + 25);
      v200.imagp = v75;
      vDSP_zvmul(&v200, 1, &v202, 1, (const DSPSplitComplex *)((char *)this + 168), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1, 1);
      vDSP_zvsub(&__Aa, 1, (const DSPSplitComplex *)((char *)this + 168), 1, (const DSPSplitComplex *)((char *)this + 168), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      v76 = (float *)*((_QWORD *)this + 28);
      v200.realp = (float *)*((_QWORD *)this + 26);
      v200.imagp = v76;
      vDSP_zvmul(&v200, 1, &__Aa, 1, (const DSPSplitComplex *)((char *)this + 184), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1, 1);
      vDSP_zvsub(&v202, 1, (const DSPSplitComplex *)((char *)this + 184), 1, (const DSPSplitComplex *)((char *)this + 184), 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      if (*((_DWORD *)this + 216))
      {
        v77 = 5;
      }
      else
      {
        v78 = *(float *)(*((_QWORD *)this + 39) + 4 * *((int *)this + 177)) * 32767.0;
        if (v78 > 32767.0)
          v78 = 32767.0;
        *((float *)this + 155) = v78;
        CmhMicCheck::process((CmhBEAM2NOpt *)((char *)this + 464), (const DSPSplitComplex *)__Aa.realp, (const DSPSplitComplex *)__Aa.imagp, (const DSPSplitComplex *)v202.realp, (const DSPSplitComplex *)v202.imagp, (const float **)this + 21, (const float **)this + 23);
        v77 = *((_DWORD *)this + 164);
      }
      *((_DWORD *)this + 33) = v77;
      **((_DWORD **)this + 22) = 0;
      **((_DWORD **)this + 21) = 0;
      **((_DWORD **)this + 24) = 0;
      **((_DWORD **)this + 23) = 0;
      goto LABEL_75;
    }
    v10 = *((_QWORD *)this + 51);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = *((int *)this + 213);
    v13 = __Aa.realp;
    v14 = __Aa.imagp;
    v15 = __Aa.realp[v12];
    v16 = v202.realp[v12];
    v17 = *(_QWORD *)(v10 + 40);
    v18 = __Aa.imagp[v12];
    v19 = v202.imagp[v12];
    v20 = (float)(fabsf((float)(v15 + v16) * 0.5) + fabsf((float)(v18 + v19) * 0.5)) * 0.5;
    v21 = (float)(fabsf((float)(v15 - v16) * 0.5) + fabsf((float)(v18 - v19) * 0.5)) * 0.5;
    if (v20 >= 0.399987793)
      v20 = 0.39999;
    v22 = *((_DWORD *)this + 30);
    v23 = fmaxf(v20 + (float)(*(float *)(v9 + 36 + 4 * (*(float *)(v9 + 32) > v20)) * (float)(*(float *)(v9 + 32) - v20)), 0.000030518);
    if (v21 >= 0.399987793)
      v21 = 0.39999;
    v24 = fmaxf(v21 + (float)(*(float *)(v9 + 36 + 4 * (*(float *)(v9 + 28) > v21)) * (float)(*(float *)(v9 + 28) - v21)), 0.000030518);
    *(float *)(v9 + 28) = v24;
    *(float *)(v9 + 32) = v23;
    v25 = v23 - v24;
    if ((float)(v23 - v24) < 0.0)
      v25 = -(float)(v23 - v24);
    if (v23 > v24)
      v24 = v23;
    v26 = fminf(v25 / v24, 1.0);
    v27 = v26 * v26;
    v28 = 0.0;
    if (v27 > 0.25)
      v28 = v27 * *(float *)(v9 + 24);
    *(float *)(v9 + 20) = v28;
    if (v22)
      goto LABEL_21;
    v37 = *((unsigned int *)this + 210);
    if ((int)v37 > 0)
    {
      v38 = *((int *)this + 209);
      v39 = *(float *)(v11 + 4 * v38 + 4);
      v40 = *(float *)(v17 + 4 * v38 + 4);
      if (v39 * 0.3 > v40 || v40 * 0.3 > v39)
      {
LABEL_21:
        *((_DWORD *)this + 214) = 0;
LABEL_22:
        *(_DWORD *)(*((_QWORD *)this + 103) + 20) = 0;
        goto LABEL_51;
      }
      v42 = 0;
      v43 = 4 * v38 + 8;
      v44 = v17 + v43;
      v45 = v11 + v43;
      while (v37 - 1 != v42)
      {
        v46 = *(float *)(v45 + 4 * v42);
        v47 = *(float *)(v44 + 4 * v42++);
        if (v46 * 0.3 > v47 || v47 * 0.3 > v46)
        {
          *((_DWORD *)this + 214) = v42 >= v37;
          if (v42 < v37)
            goto LABEL_22;
          goto LABEL_51;
        }
      }
    }
    *((_DWORD *)this + 214) = 1;
LABEL_51:
    v49 = *((int *)this + 208);
    v50 = (float)(fabsf(v202.realp[v49]) + fabsf(v202.imagp[v49])) * 0.5;
    v51 = (float *)*((_QWORD *)this + 103);
    v52 = fmaxf(v50 + (float)(v51[(v51[19] > v50) + 20] * (float)(v51[19] - v50)), 0.000030518);
    v51[19] = v52;
    v53 = *((float *)this + 212);
    v54 = (float)(fabsf(v13[v49]) + fabsf(v14[v49])) * 0.5;
    v55 = fmaxf(v54 + (float)(v51[(*v51 > v54) + 1] * (float)(*v51 - v54)), 0.000030518);
    *v51 = v55;
    v57 = v51[3];
    v56 = v51[4];
    v58 = v57 * v53;
    if (v55 > v57)
      v58 = v55;
    if (v58 < 0.00048828)
      v58 = 0.00048828;
    v51[3] = v58;
    v59 = v52 + (float)((float)(v56 * -4.0) * v55);
    v60 = v51[5];
    v61 = v51[12];
    if (v60 <= 0.0075)
    {
      v64 = v51[13];
    }
    else
    {
      v62 = v51[14];
      v61 = v52 + (float)(v62 * (float)(v61 - v52));
      v63 = fabsf(v59);
      v64 = v63 + (float)(v62 * (float)(v51[13] - v63));
      v51[12] = v61;
      v51[13] = v64;
    }
    v65 = fmax(v64, 0.00000000305175781) / fmaxf(v61, 0.000015259);
    v66 = v51[15];
    v67 = v51[16];
    v68 = (float)(v55 * v66) < v52;
    v69 = fmin(v65, 1.0);
    v70 = v66 * v52;
    v71 = !v68 && v55 <= v70;
    v72 = v69 * 0.01;
    if (v71)
      v72 = v69;
    v73 = v56 + (float)((float)(v55 * (float)(v59 * (float)((float)(v60 / (float)(v58 * v58)) * v72))) * 0.25);
    v51[4] = v73;
    v51[18] = v72;
    v74 = v73 * 4.0;
    if ((float)(v73 * 4.0) <= v51[17])
      v74 = v51[17];
    if (v74 >= v67)
      v74 = v67;
    *(float *)&v200.realp = v74;
    vDSP_vsmul(v13, 1, (const float *)&v200, v13, 1, *((int *)this + 211) + 1);
    vDSP_vsmul(__Aa.imagp, 1, (const float *)&v200, __Aa.imagp, 1, *((int *)this + 211) + 1);
    goto LABEL_69;
  }
  if (*((_DWORD *)this + 2) == 2)
  {
    v6 = 0;
    do
    {
      vDSP_zvmov(v4, 1, v3, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
      ++v6;
      ++v3;
      ++v4;
    }
    while (v6 < *((int *)this + 2));
    if (*((_DWORD *)this + 194))
    {
      LODWORD(__Aa.realp) = 1065353216;
      vDSP_vfill((const float *)&__Aa, **((float ***)this + 98), 1, *((int *)this + 4));
      vDSP_vclr(**((float ***)this + 99), 1, *((int *)this + 4));
      vDSP_vclr(*(float **)(*((_QWORD *)this + 98) + 8), 1, *((int *)this + 4));
      v7 = *(float **)(*((_QWORD *)this + 99) + 8);
LABEL_26:
      vDSP_vfill((const float *)&__Aa, v7, 1, *((int *)this + 4));
    }
  }
  else
  {
    vDSP_zvmov(&__A[*((int *)this + 1)], 1, __C, 1, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
    if (!*((_DWORD *)this + 194))
      return;
    LODWORD(__Aa.realp) = 1065353216;
    v29 = (float **)*((_QWORD *)this + 98);
    if (*((_DWORD *)this + 1))
    {
      vDSP_vclr(*v29, 1, *((int *)this + 4));
      v7 = (float *)**((_QWORD **)this + 99);
      goto LABEL_26;
    }
    vDSP_vfill((const float *)&__Aa, *v29, 1, *((int *)this + 4));
    vDSP_vclr(**((float ***)this + 99), 1, *((int *)this + 4));
  }
}

void CmhBEAM2NOpt::abf(uint64_t a1, const float **a2, const float **a3, float **a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float *v13;
  float *v14;
  float *v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  uint64_t v19;
  float v20;
  int v21;
  int v22;
  int v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int v28;
  int v29;
  int v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  _WORD *v36;
  float *v37;
  int v38;
  uint64_t v39;
  float *v40;
  float v41;
  uint64_t v42;
  const float **v43;
  const float *v44;
  int v45;
  const float **v46;
  uint64_t v47;
  int v48;
  int v49;
  float v50;
  float *v51;
  float *v52;
  _DWORD *v53;
  float v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  vDSP_Length v75;
  const float *v76;
  const float *v77;
  int v78;
  uint64_t v81;
  float __A;
  float __B;

  v10 = a6;
  v11 = a5 + 8 * a6;
  v14 = *(float **)(v11 + 32);
  v12 = (uint64_t *)(v11 + 32);
  v13 = v14;
  v15 = (float *)*(v12 - 2);
  if ((v16 & 1) == 0
  {
    CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay = *(_DWORD *)(a1 + 64);
  }
  v17 = *(_DWORD *)(a1 + 24);
  if (v17 >= 30)
    v18 = 30;
  else
    v18 = *(_DWORD *)(a1 + 24);
  v78 = v18;
  v81 = v10;
  v19 = a5 + 4 * v10;
  v20 = *(float *)(v19 + 64);
  __A = *(float *)(v19 + 88);
  __B = v20;
  vDSP_vabs(*a2, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vabs(a2[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vasm(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kOneHalf, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(v15, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMinThreshold, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMaxThreshold, v15, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsmul(v15, 1, (const float *)&CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  v21 = *(_DWORD *)(a1 + 16);
  if (v21 >= 0)
    v22 = *(_DWORD *)(a1 + 16);
  else
    v22 = v21 + 1;
  v23 = v22 >> 1;
  if (v21 >= 2)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 416);
    v26 = *(v12 - 2);
    do
    {
      v27 = *(float *)(v25 + 4 * v24);
      if (v27 <= *(float *)(v26 + 4 * v24))
        v27 = *(float *)(*(_QWORD *)(a1 + 424) + 4 * v24);
      *(float *)(v26 + 4 * v24++) = v27;
    }
    while (v23 > v24);
  }
  vDSP_vthr(v15, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue0, v15, 1, v23);
  vDSP_vabs(*a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vabs(a3[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vasm(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kOneHalf, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(v13, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMinThreshold, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kMaxThreshold, v13, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsmul(v13, 1, (const float *)&CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakDecay, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  v28 = *(_DWORD *)(a1 + 16);
  if (v28 >= 0)
    v29 = *(_DWORD *)(a1 + 16);
  else
    v29 = v28 + 1;
  v30 = v29 >> 1;
  if (v28 > 1)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 416);
    v33 = *v12;
    do
    {
      v34 = *(float *)(v32 + 4 * v31);
      if (v34 <= *(float *)(v33 + 4 * v31))
        v34 = *(float *)(*(_QWORD *)(a1 + 424) + 4 * v31);
      *(float *)(v33 + 4 * v31++) = v34;
    }
    while (v30 > v31);
  }
  vDSP_vthr(v13, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue0, v13, 1, v30);
  v35 = a5 + 2 * v10;
  *(_WORD *)(v35 + 72) = 0;
  v36 = (_WORD *)(v35 + 72);
  vDSP_vsmsb(v15, 1, &__B, v13, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  v37 = *(float **)(a1 + 416);
  if (v17 >= 1)
  {
    v38 = (unsigned __int16)*v36;
    if (v78 <= 1)
      v39 = 1;
    else
      v39 = v78;
    v40 = v37 + 1;
    do
    {
      v41 = *v40++;
      if (v41 < 0.0)
        ++v38;
      else
        --v38;
      --v39;
    }
    while (v39);
    *v36 = v38;
  }
  v42 = a5 + 8 * v10;
  v44 = *(const float **)(v42 + 48);
  v43 = (const float **)(v42 + 48);
  vDSP_vmul(v44, 1, *a3, 1, v37, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 416), 1, *a2, 1, *a4, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*v43, 1, a3[1], 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 416), 1, a2[1], 1, a4[1], 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmax(v15, 1, v13, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vthr(*(const float **)(a1 + 416), 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kPeakMinValue, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsq(*(const float **)(a1 + 416), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vfill(&__A, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vdiv(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 432), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  if (*v36 >= *(_WORD *)(a5 + 2 * v81 + 76))
  {
    v55 = *(_DWORD *)(a1 + 256);
    v48 = a6;
    if (v55 < 0)
    {
      v57 = 0;
      v47 = v81;
      v46 = a2;
    }
    else
    {
      v56 = 0;
      v57 = 0;
      v47 = v81;
      v46 = a2;
      v58 = *(_QWORD *)(a1 + 432);
      v59 = *(_QWORD *)(a1 + 440);
      v60 = *(_QWORD *)(a1 + 448);
      v61 = *(_QWORD *)(a1 + 456);
      do
      {
        v62 = v56 + 1;
        v63 = *(_DWORD *)(a5 + 4 * v81 + 96);
        *(_DWORD *)(v59 + 4 * v62) = *(_DWORD *)(v58 + 4 * v62);
        *(_DWORD *)(v60 + 4 * v62) = 0;
        *(_DWORD *)(v61 + 4 * v62) = v63;
        v56 = (unsigned __int16)++v57;
      }
      while (v55 >= (unsigned __int16)v57);
    }
    v64 = *(_DWORD *)(a1 + 24);
    if (v64 > (unsigned __int16)v57)
    {
      v65 = (unsigned __int16)v57;
      v66 = (float)a6;
      v67 = *(_QWORD *)(a1 + 440);
      v68 = *(_QWORD *)(a1 + 448);
      v69 = *(_QWORD *)(a1 + 456);
      do
      {
        v70 = *(float *)(a5 + 4 * v47 + 96);
        v71 = *(float *)(a5 + 104) * v66;
        v72 = v65 + 1;
        *(_DWORD *)(v67 + 4 * v72) = 0;
        *(float *)(v68 + 4 * v72) = v66;
        *(float *)(v69 + 4 * v72) = v71 + (float)((float)(1 - a6) * v70);
        v65 = (unsigned __int16)++v57;
      }
      while (v64 > (unsigned __int16)v57);
    }
  }
  else
  {
    v45 = *(_DWORD *)(a1 + 24);
    v47 = v81;
    v46 = a2;
    v48 = a6;
    if (v45 >= 1)
    {
      v49 = 0;
      v50 = (float)a6;
      v51 = (float *)(*(_QWORD *)(a1 + 456) + 4);
      v52 = (float *)(*(_QWORD *)(a1 + 448) + 4);
      v53 = (_DWORD *)(*(_QWORD *)(a1 + 440) + 4);
      do
      {
        v54 = (float)(*(float *)(a5 + 104) * v50) + (float)((float)(1 - a6) * *(float *)(a5 + 4 * v81 + 96));
        *v53++ = 0;
        *v52++ = v50;
        *v51++ = v54;
        ++v49;
      }
      while (v45 > (unsigned __int16)v49);
    }
  }
  vDSP_vmul(*a4, 1, *a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(a4[1], 1, a3[1], 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 440), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 456), 1, *v43, 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vmul(*(const float **)(a1 + 448), 1, *(const float **)(a1 + 456), 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vsub(*(const float **)(a1 + 424), 1, *(const float **)(a1 + 448), 1, *(float **)(a1 + 424), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vadd(*(const float **)(a1 + 416), 1, *(const float **)(a1 + 424), 1, (float *)*v43, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  vDSP_vclip(*v43, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMin, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMax, (float *)*v43, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  if (!v48)
  {
    vDSP_vmin(*v43 + 1, 1, *(const float **)(a1 + 272), 1, (float *)*v43 + 1, 1, *(_DWORD *)(a1 + 16) / 2 - 1);
    if (!*(_DWORD *)(a1 + 284))
      vDSP_vclip(*v43, 1, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::kLmsHMin, &CmhBEAM2NOpt::abf(DSPSplitComplex const&,DSPSplitComplex const&,DSPSplitComplex&,CmhBEAM2NOpt::DABF_STRUCT *,int)::zerof, (float *)*v43, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  }
  v73 = *(float *)(a5 + 4 * v47 + 80) + -1.0;
  if (v73 >= (float)(*(_DWORD *)(a1 + 24) - 1))
    v73 = (float)(*(_DWORD *)(a1 + 24) - 1);
  v74 = v73 + 1.0;
  v75 = (int)v74;
  if ((int)v75 >= 1)
  {
    v76 = (const float *)(*(_QWORD *)(a1 + 200) + 4);
    v77 = (const float *)(*(_QWORD *)(a1 + 320) + 8);
    vDSP_vsmul(*v43 + 1, 1, v77, (float *)(*(_QWORD *)(a1 + 416) + 4), 1, (int)v74);
    vDSP_vsmul(v76, 1, v77, (float *)(*(_QWORD *)(a1 + 424) + 4), 1, v75);
    vDSP_vadd((const float *)(*(_QWORD *)(a1 + 416) + 4), 1, (const float *)(*(_QWORD *)(a1 + 424) + 4), 1, (float *)(*(_QWORD *)(a1 + 416) + 4), 1, v75);
    vDSP_vsub(v76, 1, (const float *)(*(_QWORD *)(a1 + 416) + 4), 1, (float *)(*(_QWORD *)(a1 + 424) + 4), 1, v75);
    vDSP_vmul((const float *)(*(_QWORD *)(a1 + 424) + 4), 1, *a3 + 1, 1, (float *)(*(_QWORD *)(a1 + 416) + 4), 1, v75);
    vDSP_vsub((const float *)(*(_QWORD *)(a1 + 416) + 4), 1, *v46 + 1, 1, *a4 + 1, 1, v75);
    vDSP_vmul((const float *)(*(_QWORD *)(a1 + 424) + 4), 1, a3[1] + 1, 1, (float *)(*(_QWORD *)(a1 + 416) + 4), 1, v75);
    vDSP_vsub((const float *)(*(_QWORD *)(a1 + 416) + 4), 1, v46[1] + 1, 1, a4[1] + 1, 1, v75);
  }
  if (!v48)
  {
    vDSP_vadd(*v46, 1, *a3, 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vsmul(*(const float **)(a1 + 416), 1, (const float *)(a1 + 288), *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(*a4, 1, *(const float **)(a1 + 416), 1, *a4, 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(v46[1], 1, a3[1], 1, *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vsmul(*(const float **)(a1 + 416), 1, (const float *)(a1 + 288), *(float **)(a1 + 416), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    vDSP_vadd(a4[1], 1, *(const float **)(a1 + 416), 1, a4[1], 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
  }
}

float CmhBEAM2NOpt::abf_output_only(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, float result)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v7 = *(unsigned int *)(a1 + 24);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = 4 * v7;
    v10 = a6[1] + 4;
    v11 = *(_QWORD *)(a1 + 272);
    v12 = *a6 + 4;
    v13 = a6[6] + 4;
    do
    {
      v14 = *(float *)(v11 + v8);
      if (v14 >= *(float *)(v13 + v8))
        v14 = *(float *)(v13 + v8);
      *(float *)(v13 + v8) = v14;
      *(float *)(v12 + v8) = *(float *)(a2 + 4 + v8) - (float)(v14 * *(float *)(a4 + 4 + v8));
      result = *(float *)(a3 + 4 + v8) - (float)(*(float *)(v13 + v8) * *(float *)(a5 + 4 + v8));
      *(float *)(v10 + v8) = result;
      v8 += 4;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::sns(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = *(_QWORD *)(a2 + 56);
  v3 = 8;
  v4 = 0.0;
  do
  {
    v4 = v4 + fminf(fmaxf(*(float *)(v2 + v3), 0.0), 1.0);
    v3 += 4;
  }
  while (v3 != 44);
  v5 = fmaxf(v4 * *(float *)(a2 + 128), 0.0);
  if (v5 >= 1.0)
    v6 = 64.0;
  else
    v6 = v5 * 64.0;
  v7 = *(float **)(a2 + 120);
  *v7 = sns_table[(int)v6 + 1];
  v8 = *(unsigned int *)(result + 24);
  if ((int)v8 > 1)
  {
    v9 = v7 + 1;
    v10 = v8 - 1;
    v11 = (float *)(v2 + 8);
    do
    {
      v12 = *v11++;
      *v9++ = LODWORD(sns_table[vcvtd_n_s64_f64(fminf(fmaxf(v12, 0.0), 1.0), 6uLL) + 1]);
      --v10;
    }
    while (v10);
  }
  if ((int)v8 >= 1)
  {
    v13 = *(float **)(result + 248);
    v14 = 0.0;
    do
    {
      v14 = *v7 + (float)(v14 - *v7) * 0.5;
      *v7 = v14;
      v15 = *v13++;
      v16 = v15;
      if (v15 < v14)
        v16 = v14;
      if (v16 <= *(float *)(a2 + 112))
        v16 = *(float *)(a2 + 112);
      *v7 = v16;
      v17 = *(float *)(a2 + 132) * (v16 + -1.0) + 1.0;
      *v7++ = v17;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::getAuxVectors(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int v62;
  int v63;
  BOOL v64;
  float *v65;
  float *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;

  v2 = *(_QWORD *)(this + 784);
  v3 = *(_DWORD *)(this + 8);
  v4 = v3 - 1;
  if (v3 - 1 >= a2)
    v5 = a2;
  else
    v5 = v3 - 1;
  v6 = (_QWORD *)(v2 + 8 * v5);
  v7 = *(unsigned int *)(this + 16);
  if ((int)v7 >= 0)
    v8 = *(_DWORD *)(this + 16);
  else
    v8 = v7 + 1;
  v9 = (uint64_t)v8 >> 1;
  v10 = *(_QWORD *)(this + 792);
  v11 = (_QWORD *)(v10 + 8 * v5);
  v12 = *(uint64_t **)(this + 232);
  v13 = *(_QWORD *)(this + 408) + 136 * v5;
  v14 = *(_QWORD *)(this + 320);
  if (v3 > 2)
    v4 = 1;
  v15 = (_QWORD *)(v10 + 8 * v4);
  v16 = (_QWORD *)(v2 + 8 * v4);
  if (a2 == 1)
  {
    v17 = *(_QWORD *)(this + 208);
  }
  else
  {
    v15 = v6;
    v16 = v11;
    v17 = *(_QWORD *)(this + 200);
  }
  if (a2 == 1)
    v18 = *(_QWORD *)(this + 224);
  else
    v18 = *(_QWORD *)(this + 216);
  if (a2 == 1)
    v19 = *(_QWORD *)(this + 200);
  else
    v19 = *(_QWORD *)(this + 208);
  if (a2 == 1)
    v20 = *(_QWORD *)(this + 216);
  else
    v20 = *(_QWORD *)(this + 224);
  if (a2 == 1)
    v21 = v12[1];
  else
    v21 = *v12;
  if (a2 == 1)
    v22 = *v12;
  else
    v22 = v12[1];
  v23 = *v16 + 4;
  v24 = v23 + 4 * v9;
  v25 = *v15 + 4;
  v26 = v25 + 4 * v9;
  v27 = *(_QWORD *)(this + 824);
  if (*(_DWORD *)(v27 + 44))
    v28 = *(float *)(v27 + 16) * 4.0;
  else
    v28 = 1.0;
  v29 = *(_QWORD *)(v13 + 48);
  v30 = *(_QWORD *)(*(_QWORD *)(this + 808) + 8 * v5);
  v73 = *(_QWORD *)(*(_QWORD *)(this + 112) + 8 * a2);
  v31 = *(float *)(v13 + 80);
  v32 = *(_QWORD *)(*(_QWORD *)(this + 104) + 8 * a2);
  v33 = *(float *)(v14 + 8);
  v34 = *(float *)(this + 288);
  if (!*(_DWORD *)(this + 124) || !*(_DWORD *)(this + 376))
  {
    v38 = *(unsigned int *)(this + 24);
    if ((int)v38 < 1)
      goto LABEL_77;
    v39 = 0;
    v40 = v5;
    v41 = *(_QWORD *)(this + 200) + 4;
    v42 = *(_QWORD *)(*(_QWORD *)(this + 800) + 8 * v5) + 4;
    v43 = v29 + 4;
    v44 = v32 + 4;
    v45 = v22 + 4;
    v46 = v21 + 4;
    v47 = v20 + 4;
    v48 = v19 + 4;
    v49 = v18 + 4;
    v50 = this + 4 * v40;
    v51 = *(int *)(this + 256);
    v52 = v17 + 4;
    v53 = -v34;
    v54 = *(_DWORD *)(this + 376);
    v55 = (_DWORD *)(v50 + 260);
    while (v39 > v51)
    {
      *(_DWORD *)(v25 + 4 * v39) = 1065353216;
      *(_DWORD *)(v26 + 4 * v39) = 0;
      *(_DWORD *)(v23 + 4 * v39) = 0;
      *(_DWORD *)(v24 + 4 * v39) = 0;
      if (v54)
        goto LABEL_58;
LABEL_61:
      if (v38 == ++v39)
      {
        v62 = v38;
        goto LABEL_71;
      }
    }
    if (v39 >= (int)v31)
    {
      v56 = *(_QWORD *)(this + 272);
      v57 = *(_DWORD *)(this + 284);
    }
    else
    {
      v56 = *(_QWORD *)(this + 272);
      v57 = *(_DWORD *)(this + 284);
      if (*v55 == 1)
      {
        v58 = *(float *)(v56 + 4 * v39);
        if (v58 >= *(float *)(v43 + 4 * v39))
          v58 = *(float *)(v43 + 4 * v39);
        v59 = fminf(v58, 0.0);
        if (!v57)
          v58 = v59;
        v60 = (float)(v58 * v33) - (float)(*(float *)(v41 + 4 * v39) * (float)(1.0 - v33));
        goto LABEL_53;
      }
    }
    v60 = *(float *)(v56 + 4 * v39);
    if (v60 >= *(float *)(v42 + 4 * v39))
      v60 = *(float *)(v42 + 4 * v39);
    v61 = fminf(v60, 0.0);
    if (!v57)
      v60 = v61;
LABEL_53:
    if (*(_DWORD *)(this + 240))
    {
      *(float *)(v25 + 4 * v39) = *(float *)(v46 + 4 * v39)
                                + (float)((float)(v60 * *(float *)(v48 + 4 * v39)) * *(float *)(v45 + 4 * v39));
      *(float *)(v26 + 4 * v39) = (float)(v60 * *(float *)(v47 + 4 * v39)) * *(float *)(v45 + 4 * v39);
      *(float *)(v23 + 4 * v39) = (float)-(float)(*(float *)(v46 + 4 * v39) * *(float *)(v52 + 4 * v39))
                                - (float)(*(float *)(v45 + 4 * v39) * v60);
      *(float *)(v24 + 4 * v39) = -(float)(*(float *)(v46 + 4 * v39) * *(float *)(v49 + 4 * v39));
      if (*v55 == 1)
      {
        *(float *)(v25 + 4 * v39) = *(float *)(v25 + 4 * v39)
                                  + (float)(v34
                                          * (float)(*(float *)(v46 + 4 * v39)
                                                  - (float)(*(float *)(v48 + 4 * v39) * *(float *)(v45 + 4 * v39))));
        *(float *)(v26 + 4 * v39) = *(float *)(v26 + 4 * v39)
                                  + (float)((float)(*(float *)(v47 + 4 * v39) * v53) * *(float *)(v45 + 4 * v39));
        *(float *)(v23 + 4 * v39) = *(float *)(v23 + 4 * v39)
                                  + (float)(v34
                                          * (float)(*(float *)(v45 + 4 * v39)
                                                  - (float)(*(float *)(v52 + 4 * v39) * *(float *)(v46 + 4 * v39))));
        *(float *)(v24 + 4 * v39) = *(float *)(v24 + 4 * v39)
                                  + (float)((float)(*(float *)(v49 + 4 * v39) * v53) * *(float *)(v46 + 4 * v39));
      }
    }
    else
    {
      *(_DWORD *)(v25 + 4 * v39) = 1065353216;
      *(_DWORD *)(v26 + 4 * v39) = 0;
      *(_DWORD *)(v23 + 4 * v39) = 0;
      *(_DWORD *)(v24 + 4 * v39) = 0;
    }
    *(float *)(v25 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v25 + 4 * v39);
    *(float *)(v26 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v26 + 4 * v39);
    *(float *)(v23 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v23 + 4 * v39);
    *(float *)(v24 + 4 * v39) = *(float *)(v44 + 4 * v39) * *(float *)(v24 + 4 * v39);
    if (!v54)
      goto LABEL_61;
LABEL_58:
    if (v39 < *(int *)(this + 372))
    {
      *(float *)(v25 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v25 + 4 * v39);
      *(float *)(v26 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v26 + 4 * v39);
      *(float *)(v23 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v23 + 4 * v39);
      *(float *)(v24 + 4 * v39) = *(float *)(v30 + 4 * v39) * *(float *)(v24 + 4 * v39);
    }
    *(float *)(v25 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v25 + 4 * v39);
    *(float *)(v26 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v26 + 4 * v39);
    *(float *)(v23 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v23 + 4 * v39);
    *(float *)(v24 + 4 * v39) = *(float *)(v14 + 4 * v39) * *(float *)(v24 + 4 * v39);
    goto LABEL_61;
  }
  v35 = *(_DWORD *)(this + 132);
  v36 = 0.0;
  v37 = 1.0;
  if (v35 != 4)
  {
    if (v35 != 2 && v35)
      goto LABEL_68;
LABEL_67:
    v36 = 1.0;
    v37 = 0.0;
    goto LABEL_68;
  }
  v63 = *(_DWORD *)(this + 136);
  if (v63 == 1)
    goto LABEL_68;
  if (v63)
    goto LABEL_67;
  if (v3 == 2)
    v64 = a2 == 0;
  else
    v64 = *(_DWORD *)(this + 4) == 0;
  if (v64)
    v37 = 1.0;
  else
    v37 = 0.0;
  if (!v64)
    v36 = 1.0;
LABEL_68:
  v62 = *(_DWORD *)(this + 24);
  if (v62 >= 1)
  {
    v65 = (float *)(*v6 + 4);
    v66 = (float *)(*v11 + 4);
    v67 = *(unsigned int *)(this + 24);
    do
    {
      *v65 = v37;
      v65[v9] = 0.0;
      *v66 = v36;
      v66[v9] = 0.0;
      ++v66;
      ++v65;
      --v67;
    }
    while (v67);
LABEL_71:
    if (*(_DWORD *)(this + 40))
      v68 = v62 < 1;
    else
      v68 = 1;
    if (!v68)
    {
      v69 = 0;
      v70 = v73 + 4;
      v71 = 4 * v62;
      do
      {
        *(float *)(v25 + v69) = *(float *)(v70 + v69) * *(float *)(v25 + v69);
        *(float *)(v26 + v69) = *(float *)(v70 + v69) * *(float *)(v26 + v69);
        *(float *)(v23 + v69) = *(float *)(v70 + v69) * *(float *)(v23 + v69);
        *(float *)(v24 + v69) = *(float *)(v70 + v69) * *(float *)(v24 + v69);
        v69 += 4;
      }
      while (v71 != v69);
    }
  }
LABEL_77:
  if ((int)v7 >= 1)
  {
    v72 = (float *)*v6;
    do
    {
      *v72 = v28 * *v72;
      ++v72;
      --v7;
    }
    while (v7);
  }
  return this;
}

float CmhBEAM2NOpt::setParameter(CmhBEAM2NOpt *this, int a2, CmhBEAM2NOpt *a3, double a4, double a5)
{
  float v6;
  CmhBEAM2NOpt *v7;
  unsigned int v8;
  CmhBEAM2NOpt *v9;
  unsigned int v10;
  CmhBEAM2NOpt *v11;
  unsigned int v12;
  CmhBEAM2NOpt *v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  float v19;
  CmhMicCheck *v20;
  float v21;
  int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  CmhBEAM2NOpt *v31;
  unsigned int v32;

  switch(a2)
  {
    case 3:
      *(_DWORD *)(*((_QWORD *)this + 103) + 44) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 4:
      v6 = *(float *)a3;
      *((_DWORD *)this + 65) = *(_DWORD *)a3;
      goto LABEL_42;
    case 5:
      *((_DWORD *)this + 94) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 9:
      CmhBEAM2NOpt::setSpatialFilterReal((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 10:
      CmhBEAM2NOpt::setSpatialFilterImag((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 13:
      v7 = a3;
      v8 = 0;
      goto LABEL_10;
    case 14:
      v9 = a3;
      v10 = 0;
      goto LABEL_12;
    case 15:
      v7 = a3;
      v8 = 1;
LABEL_10:
      CmhBEAM2NOpt::setModelSpatialFilterReal(this, v7, v8);
      return *(float *)&a4;
    case 16:
      v9 = a3;
      v10 = 1;
LABEL_12:
      CmhBEAM2NOpt::setModelSpatialFilterImag(this, v9, v10);
      return *(float *)&a4;
    case 17:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector(this, a3);
      return *(float *)&a4;
    case 18:
      CmhBEAM2NOpt::setModelOmniEQVector(this, a3);
      return *(float *)&a4;
    case 19:
      v11 = a3;
      v12 = 0;
      goto LABEL_18;
    case 20:
      v13 = a3;
      v14 = 0;
      goto LABEL_20;
    case 21:
      v11 = a3;
      v12 = 1;
LABEL_18:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector(this, v11, v12);
      return *(float *)&a4;
    case 22:
      v13 = a3;
      v14 = 1;
LABEL_20:
      CmhBEAM2NOpt::setModelOmniEQVector(this, v13, v14);
      return *(float *)&a4;
    case 29:
      v15 = *((unsigned int *)this + 2);
      if ((int)v15 >= 1)
      {
        LODWORD(a4) = *(_DWORD *)a3;
        v16 = (_DWORD *)(*((_QWORD *)this + 51) + 64);
        do
        {
          *v16 = LODWORD(a4);
          v16 += 34;
          --v15;
        }
        while (v15);
      }
      return *(float *)&a4;
    case 30:
      CmhBEAM2NOpt::setWNG(this, *(float *)a3);
      return *(float *)&a4;
    case 31:
      v28 = *(float *)a3;
      v29 = *((_QWORD *)this + 51);
      *(_DWORD *)(v29 + 108) = *(_DWORD *)a3;
      if (*((int *)this + 2) >= 2)
        *(float *)(v29 + 244) = v28;
      return *(float *)&a4;
    case 34:
      LODWORD(a4) = *(_DWORD *)a3;
      v17 = *((_QWORD *)this + 51);
      *(_DWORD *)(v17 + 112) = *(_DWORD *)a3;
      if (*((int *)this + 2) >= 2)
        *(_DWORD *)(v17 + 248) = LODWORD(a4);
      return *(float *)&a4;
    case 35:
      *((_DWORD *)this + 71) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 36:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 72) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 37:
      if (*(_DWORD *)a3 <= 1u)
        *((_DWORD *)this + 1) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 38:
      *((_DWORD *)this + 30) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 39:
      CmhBEAM2NOpt::setABFVector((uint64_t)this, (float *)a3);
      return *(float *)&a4;
    case 40:
      v18 = 0;
      goto LABEL_34;
    case 41:
      v18 = 1;
LABEL_34:
      *(float *)&a4 = CmhBEAM2NOpt::setABFVector(this, v18, (float *)a3);
      return *(float *)&a4;
    case 44:
      *((_DWORD *)this + 38) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 45:
      *((_DWORD *)this + 32) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 46:
      *((_DWORD *)this + 31) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 47:
      *((_DWORD *)this + 33) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 48:
      v19 = *(float *)a3;
      *((_DWORD *)this + 34) = *(_DWORD *)a3;
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      *((float *)this + 143) = v19;
      goto LABEL_88;
    case 49:
      *((_DWORD *)this + 60) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 50:
      *((_DWORD *)this + 65) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 51:
      v6 = *(float *)a3;
LABEL_42:
      *((float *)this + 66) = v6;
      return *(float *)&a4;
    case 52:
      v21 = *(float *)a3;
      v22 = *((_DWORD *)this + 2);
      if (v22 >= 1)
        v22 = 1;
      goto LABEL_78;
    case 53:
      v21 = *(float *)a3;
      v22 = *((_DWORD *)this + 2);
      if (v22 >= 2)
        v22 = 2;
LABEL_78:
      *(float *)(*((_QWORD *)this + 51) + 136 * v22 - 28) = v21;
      return *(float *)&a4;
    case 54:
      LODWORD(a4) = *(_DWORD *)a3;
      v23 = *((_DWORD *)this + 2);
      if (v23 >= 1)
        v23 = 1;
      goto LABEL_49;
    case 55:
      LODWORD(a4) = *(_DWORD *)a3;
      v23 = *((_DWORD *)this + 2);
      if (v23 >= 2)
        v23 = 2;
LABEL_49:
      *(_DWORD *)(*((_QWORD *)this + 51) + 136 * v23 - 24) = LODWORD(a4);
      return *(float *)&a4;
    case 56:
      *(float *)&a4 = (float)((float)*(int *)a3 / (float)*((int *)this + 3)) * (float)*((int *)this + 4);
      *((_DWORD *)this + 8) = *(_DWORD *)a3;
      v24 = *((_DWORD *)this + 6) - 1;
      if (v24 >= (int)*(float *)&a4)
        v24 = (int)*(float *)&a4;
      *((_DWORD *)this + 64) = v24;
      return *(float *)&a4;
    case 58:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 125) = *(_DWORD *)a3;
      goto LABEL_88;
    case 59:
      v25 = __exp10((float)(*(float *)a3 / -20.0));
      *((float *)this + 90) = v25;
      CmhBEAM2NOpt::loadRVSSSuppressionLimits(this);
      return *(float *)&a4;
    case 60:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 126) = *(_DWORD *)a3;
      goto LABEL_88;
    case 61:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 127) = *(_DWORD *)a3;
      goto LABEL_88;
    case 62:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 128) = *(_DWORD *)a3;
      goto LABEL_88;
    case 63:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 129) = *(_DWORD *)a3;
      goto LABEL_88;
    case 64:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 130) = *(_DWORD *)a3;
      goto LABEL_88;
    case 65:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 131) = *(_DWORD *)a3;
      goto LABEL_88;
    case 66:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 132) = *(_DWORD *)a3;
      goto LABEL_88;
    case 67:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      goto LABEL_88;
    case 68:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 134) = *(_DWORD *)a3;
      goto LABEL_88;
    case 69:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 135) = *(_DWORD *)a3;
      goto LABEL_88;
    case 70:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 136) = *(_DWORD *)a3;
      goto LABEL_88;
    case 71:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 137) = *(_DWORD *)a3;
      goto LABEL_88;
    case 72:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 138) = *(_DWORD *)a3;
      goto LABEL_88;
    case 73:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 139) = *(_DWORD *)a3;
      goto LABEL_88;
    case 74:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 140) = *(_DWORD *)a3;
      goto LABEL_88;
    case 75:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 141) = *(_DWORD *)a3;
      goto LABEL_88;
    case 76:
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 142) = *(_DWORD *)a3;
      goto LABEL_88;
    case 77:
      v30 = 0;
      do
      {
        LODWORD(a4) = *(_DWORD *)((char *)a3 + v30);
        *(_DWORD *)((char *)this + v30 + 500) = LODWORD(a4);
        v30 += 4;
      }
      while ((_DWORD)v30 != 76);
      v20 = (CmhBEAM2NOpt *)((char *)this + 464);
LABEL_88:
      LODWORD(a4) = CmhMicCheck::init_check_mics(v20, a4, a5).u32[0];
      return *(float *)&a4;
    case 78:
      CmhBEAM2NOpt::setModelFreqEQVector(this, a3);
      return *(float *)&a4;
    case 79:
      v31 = a3;
      v32 = 0;
      goto LABEL_92;
    case 80:
      v31 = a3;
      v32 = 1;
LABEL_92:
      CmhBEAM2NOpt::setModelFreqEQVector(this, v31, v32);
      break;
    case 84:
      *((_DWORD *)this + 10) = *(_DWORD *)a3;
      break;
    case 85:
      *((_DWORD *)this + 194) = *(_DWORD *)a3;
      break;
    case 90:
      *((_DWORD *)this + 216) = *(_DWORD *)a3;
      break;
    case 91:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 95) = *(_DWORD *)a3;
      break;
    case 92:
      v26 = *(float *)a3;
      *((_DWORD *)this + 35) = *(_DWORD *)a3;
      v27 = (int)(float)((float)(v26 / (float)*((int *)this + 3)) * (float)*((int *)this + 4));
      if (*((_DWORD *)this + 6) - 1 < v27)
        v27 = *((_DWORD *)this + 6) - 1;
      *(float *)&a4 = (float)v27;
      *((float *)this + 96) = (float)v27;
      break;
    case 93:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 97) = *(_DWORD *)a3;
      break;
    case 94:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 98) = *(_DWORD *)a3;
      break;
    case 95:
      *((_DWORD *)this + 36) = *(_DWORD *)a3;
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

uint64_t CmhBEAM2NOpt::setSpatialFilterReal(uint64_t this, float *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  int v5;

  v2 = *(unsigned int *)(this + 28);
  if ((int)v2 >= 1)
  {
    v3 = *(_DWORD **)(this + 200);
    do
    {
      v4 = *(_DWORD *)a2++;
      *v3++ = v4;
      --v2;
    }
    while (v2);
  }
  v5 = (int)(float)((float)((float)*(int *)(this + 32) / (float)*(int *)(this + 12)) * (float)*(int *)(this + 16));
  if (*(_DWORD *)(this + 24) - 1 < v5)
    v5 = *(_DWORD *)(this + 24) - 1;
  *(_DWORD *)(this + 256) = v5;
  *(_DWORD *)(this + 36) = 1;
  return this;
}

uint64_t CmhBEAM2NOpt::setSpatialFilterImag(uint64_t this, float *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  int v5;

  v2 = *(unsigned int *)(this + 28);
  if ((int)v2 >= 1)
  {
    v3 = *(_DWORD **)(this + 216);
    do
    {
      v4 = *(_DWORD *)a2++;
      *v3++ = v4;
      --v2;
    }
    while (v2);
  }
  v5 = (int)(float)((float)((float)*(int *)(this + 32) / (float)*(int *)(this + 12)) * (float)*(int *)(this + 16));
  if (*(_DWORD *)(this + 24) - 1 < v5)
    v5 = *(_DWORD *)(this + 24) - 1;
  *(_DWORD *)(this + 256) = v5;
  *(_DWORD *)(this + 36) = 1;
  return this;
}

uint64_t CmhBEAM2NOpt::setModelSpatialFilterReal(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  uint64_t result;
  int v5;

  result = CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *((_QWORD *)this + a3 + 25), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  v5 = (int)(float)((float)((float)*((int *)this + 8) / (float)*((int *)this + 3)) * (float)*((int *)this + 4));
  if (*((_DWORD *)this + 6) - 1 < v5)
    v5 = *((_DWORD *)this + 6) - 1;
  *((_DWORD *)this + 64) = v5;
  *((_DWORD *)this + 9) = 1;
  return result;
}

uint64_t CmhBEAM2NOpt::setModelSpatialFilterImag(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  float **v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = (float **)((char *)this + 216);
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *((_QWORD *)this + a3 + 27), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  v5 = *((_DWORD *)this + 3);
  v6 = *((_DWORD *)this + 4);
  v7 = (int)(float)((float)((float)*((int *)this + 8) / (float)v5) * (float)v6);
  v8 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 6) - 1 < v7)
    v7 = *((_DWORD *)this + 6) - 1;
  *((_DWORD *)this + 64) = v7;
  *((_DWORD *)this + 9) = 1;
  return CmhMicCheck::initialize((CmhBEAM2NOpt *)((char *)this + 464), v5, v8, v6 / 2 + 1, (float **)this + 25, v4);
}

float CmhBEAM2NOpt::setModelFreqCompVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::setModelFreqCompVector(this, a2, 0);
  return CmhBEAM2NOpt::setModelFreqCompVector(this, a2, 1u);
}

float CmhBEAM2NOpt::setModelFreqCompVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  float result;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;

  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 12) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  v6 = *((unsigned int *)this + 7);
  if ((int)v6 >= 1)
  {
    v7 = *(float **)(*((_QWORD *)this + 12) + 8 * a3);
    v8 = *(float **)(*((_QWORD *)this + 29) + 8 * a3);
    do
    {
      v9 = *v7++;
      result = v9;
      *v8++ = v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t CmhBEAM2NOpt::setModelOmniEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((_QWORD **)this + 13), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 13) + 8), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

uint64_t CmhBEAM2NOpt::setModelOmniEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 13) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

uint64_t CmhBEAM2NOpt::setABFVector(uint64_t this, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  float *v9;
  uint64_t v10;
  int v11;

  v2 = *(unsigned int *)(this + 8);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(unsigned int *)(this + 24);
    do
    {
      if ((int)v4 >= 1)
      {
        v5 = *(_QWORD *)(this + 408) + 136 * v3;
        v6 = *(_QWORD *)(v5 + 48);
        v7 = (_DWORD *)(*(_QWORD *)(v5 + 56) + 4);
        v8 = (_DWORD *)(v6 + 4);
        v9 = a2;
        v10 = v4;
        do
        {
          *v8++ = *(_DWORD *)v9;
          v11 = *(_DWORD *)v9++;
          *v7++ = v11;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return this;
}

float CmhBEAM2NOpt::setABFVector(CmhBEAM2NOpt *this, int a2, float *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float result;

  v3 = *((unsigned int *)this + 6);
  if ((int)v3 >= 1)
  {
    v4 = *((_DWORD *)this + 2) - 1;
    if (v4 >= a2)
      v4 = a2;
    v5 = *((_QWORD *)this + 51) + 136 * v4;
    v6 = *(_QWORD *)(v5 + 48);
    v7 = (float *)(*(_QWORD *)(v5 + 56) + 4);
    v8 = (float *)(v6 + 4);
    do
    {
      *v8++ = *a3;
      v9 = *a3++;
      result = v9;
      *v7++ = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

void CmhBEAM2NOpt::setWNG(CmhBEAM2NOpt *this, float a2)
{
  float v3;

  v3 = __exp10(a2 * 0.1);
  *((float *)this + 70) = v3;
  CmhBEAM2NOpt::calc_wng_beta_bound((void **)this, v3);
}

uint64_t CmhBEAM2NOpt::setModelFreqEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((_QWORD **)this + 14), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 14) + 8), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

uint64_t CmhBEAM2NOpt::setModelFreqEQVector(CmhBEAM2NOpt *this, CmhBEAM2NOpt *a2, unsigned int a3)
{
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 14) + 8 * a3), 93.75, (float *)*((unsigned int *)this + 7), (float)*((int *)this + 3) / (float)*((int *)this + 4));
}

void CartesianSpatializer::~CartesianSpatializer(CartesianSpatializer *this)
{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69CB5E8;
  for (i = 1720; i != 136; i -= 264)
    CartesianPanner::~CartesianPanner((CartesianSpatializer *)((char *)this + i));
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 42);
  if (v4)
  {
    *((_QWORD *)this + 43) = v4;
    operator delete(v4);
  }
  Spatializer::~Spatializer(this);
}

{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69CB5E8;
  for (i = 1720; i != 136; i -= 264)
    CartesianPanner::~CartesianPanner((CartesianSpatializer *)((char *)this + i));
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 42);
  if (v4)
  {
    *((_QWORD *)this + 43) = v4;
    operator delete(v4);
  }
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t Spatializer::setEnable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 132) = a2;
  return this;
}

uint64_t Spatializer::getNumOutputChannels(Spatializer *this)
{
  return (*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2;
}

uint64_t CartesianSpatializer::setParams(CartesianSpatializer *this, const SpatializerParams *a2)
{
  if (!*((_BYTE *)this + 16))
    (*(void (**)(CartesianSpatializer *, char *))(*(_QWORD *)this + 152))(this, (char *)a2 + 40);
  return Spatializer::setParams(this, a2);
}

float Spatializer::getBypassCoeffs(Spatializer *this, float *a2, unsigned int a3)
{
  float *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float result;

  v3 = (float *)*((_QWORD *)this + 17);
  v4 = (*((_QWORD *)this + 18) - (_QWORD)v3) >> 2;
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v6 = v5;
    do
    {
      v7 = *v3++;
      result = v7;
      *a2++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t Spatializer::setBypassCoeffs(Spatializer *this, float *a2, unsigned int a3)
{
  uint64_t v6;
  _DWORD **v7;
  uint64_t result;
  _DWORD *v9;
  int v10;

  v6 = a3;
  v7 = (_DWORD **)((char *)this + 136);
  if (a3 != (uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2)
  {
    if (*((_BYTE *)this + 16))
      return 0xFFFFFFFFLL;
    std::vector<float>::resize((uint64_t)this + 136, a3);
  }
  if (a3)
  {
    v9 = *v7;
    do
    {
      v10 = *(_DWORD *)a2++;
      *v9++ = v10;
      --v6;
    }
    while (v6);
  }
  result = 0;
  *((_BYTE *)this + 321) = 1;
  return result;
}

uint64_t Spatializer::setAzimuth(uint64_t this, float a2)
{
  if (*(float *)(this + 48) != a2)
  {
    *(float *)(this + 48) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setElevation(uint64_t this, float a2)
{
  if (*(float *)(this + 52) != a2)
  {
    *(float *)(this + 52) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 56) != a2)
  {
    *(float *)(this + 56) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSourceWidth(uint64_t this, float a2)
{
  if (*(float *)(this + 60) != a2)
  {
    *(float *)(this + 60) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSourceHeight(uint64_t this, float a2)
{
  if (*(float *)(this + 64) != a2)
  {
    *(float *)(this + 64) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSourceDepth(uint64_t this, float a2)
{
  if (*(float *)(this + 68) != a2)
  {
    *(float *)(this + 68) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::implementsDiffuse(Spatializer *this)
{
  return 0;
}

uint64_t Spatializer::setDiffuse(uint64_t this, float a2)
{
  if (*(float *)(this + 72) != a2)
  {
    *(float *)(this + 72) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setBinauralCompatibilityMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 76) != a2)
  {
    *(_DWORD *)(result + 76) = a2;
    *(_BYTE *)(result + 320) = 1;
  }
  return result;
}

uint64_t Spatializer::setIsInternalized(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 80) != a2)
  {
    *(_BYTE *)(this + 80) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setStereoAngle(uint64_t this, float a2)
{
  if (*(float *)(this + 84) != a2)
  {
    *(float *)(this + 84) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setSpeakerSnap(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 113) != a2)
  {
    *(_BYTE *)(this + 113) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t CartesianSpatializer::setExclusionZones(uint64_t a1, uint64_t a2)
{
  int PresetFromExclusionZones;
  int v4;

  Spatializer::setExclusionZones(a1, a2);
  if (*(_BYTE *)(a1 + 328))
  {
    PresetFromExclusionZones = AUSM::ExclusionZone::getPresetFromExclusionZones((float **)(a1 + 88));
    if (PresetFromExclusionZones == -1)
      v4 = 0;
    else
      v4 = PresetFromExclusionZones;
    *(_DWORD *)(a1 + 396) = v4;
  }
  return 0;
}

uint64_t Spatializer::setEnableExclusionZones(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 112) != a2)
  {
    *(_BYTE *)(this + 112) = a2;
    *(_BYTE *)(this + 328) = 1;
  }
  return this;
}

uint64_t Spatializer::setOrientation(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 116) != a2)
  {
    *(_DWORD *)(result + 116) = a2;
    *(_BYTE *)(result + 320) = 1;
  }
  return result;
}

uint64_t Spatializer::setInputChannelLabel(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 120) != a2)
  {
    *(_DWORD *)(this + 120) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setRefDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 124) != a2)
  {
    *(float *)(this + 124) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setMaxDistance(uint64_t this, float a2)
{
  if (*(float *)(this + 128) != a2)
  {
    *(float *)(this + 128) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t Spatializer::setParameterSmoothing(uint64_t result, int a2)
{
  *(_DWORD *)(result + 324) = a2;
  return result;
}

CFTypeRef Spatializer::getPropertyDictionary@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 4));
  *a2 = v3;
  return this;
}

void Spatializer::setPropertyDictionary(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *(const void **)(a1 + 32);
  v4 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  atomic_store(1u, (unsigned __int8 *)(a1 + 322));
}

CFTypeRef Spatializer::getOptionalFeatureSupportDictionary@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 5));
  *a2 = v3;
  return this;
}

void Spatializer::setOptionalFeatureSupportDictionary(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *(const void **)(a1 + 40);
  v4 = *a2;
  *(_QWORD *)(a1 + 40) = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
}

uint64_t Spatializer::isInitialized(Spatializer *this)
{
  return *((unsigned __int8 *)this + 16);
}

BOOL Spatializer::needsToProcess(Spatializer *this)
{
  return *((_BYTE *)this + 132) || *((_BYTE *)this + 268) != 0;
}

uint64_t CartesianSpatializer::initialize(CartesianSpatializer *this, float a2, unsigned int a3, int a4)
{
  double v6;
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  int v21;
  std::string v22;
  std::string v23;
  void *__p[2];
  int64_t v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v6 = a2 * 0.001953125 * 0.02;
  if (v6 >= 2.22507386e-308)
    v7 = -6.90775528 / v6;
  else
    v7 = -INFINITY;
  v8 = exp(v7);
  if (v7 < -708.4)
    v8 = 0.0;
  v9 = v8;
  *((float *)this + 96) = v9;
  if (a3 < (unint64_t)((uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2))
    return 4294900553;
  v11 = 0;
  while (1)
  {
    v12 = dword_1B6686D64[v11];
    v13 = CartesianPanner::initialize((uint64_t)this + 264 * v12 + 400, *((_DWORD *)this + 83), v12);
    if ((_DWORD)v13)
      break;
    if (++v11 == 6)
    {
      *(_DWORD *)buf = 0;
      std::vector<float>::resize((uint64_t)this + 136, a3, buf);
      *(_DWORD *)buf = 0;
      std::vector<float>::resize((uint64_t)this + 272, a3, buf);
      v10 = 0;
      *((_WORD *)this + 8) = 257;
      return v10;
    }
  }
  v10 = v13;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v14 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "CartesianSpatializer");
    v16 = std::string::append(&v22, "::", 2uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v23, "initialize", 0xAuLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v25 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = __p;
    if (v25 < 0)
      v20 = (void **)__p[0];
    v21 = *((_DWORD *)this + 83);
    *(_DWORD *)buf = 136315906;
    v27 = v20;
    v28 = 1024;
    v29 = v12;
    v30 = 1024;
    v31 = v21;
    v32 = 1024;
    v33 = v10;
    _os_log_debug_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%s: ERROR: could not initialize the cartesian panner #%i with channel layout tag %u: err=%d", buf, 0x1Eu);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B6208970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void CartesianSpatializer::reset(CartesianSpatializer *this)
{
  void *v2;
  uint64_t v3;

  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  v2 = (void *)*((_QWORD *)this + 42);
  v3 = *((_QWORD *)this + 43) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
}

uint64_t CartesianSpatializer::processAccumulating(CartesianSpatializer *this, const float *a2, float *const *a3, int a4, float *const *a5, unsigned int a6, unsigned int a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  float v15;
  float v16;
  __float2 v17;
  float cosval;
  __float2 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;
  _BOOL4 v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  __int128 *p_Start;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 *v59;
  std::string v60;
  std::string __Step;
  __int128 __Start;
  int64_t v63;
  uint8_t buf[4];
  __int128 *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 16))
  {
    if (*((_WORD *)this + 160) || *((_BYTE *)this + 17) || *((_BYTE *)this + 328))
    {
      *((_WORD *)this + 160) = 0;
      v15 = *((float *)this + 13);
      v16 = *((float *)this + 14);
      v17 = __sincosf_stret(*((float *)this + 12) * 0.017453);
      v19 = __sincosf_stret(v15 * 0.017453);
      cosval = v19.__cosval;
      v20 = (float)(v17.__cosval * v16) * v19.__cosval;
      v21 = (float)(v17.__sinval * v16) * v19.__cosval;
      v22 = v16 * v19.__sinval;
      if ((*((_BYTE *)this + 24) & 0x80) != 0)
      {
        v23 = fabsf(v21);
        v24 = fabsf(v20);
        v25 = fabsf(v22);
        if (v23 < v24)
          v23 = v24;
        if (v23 < v25)
          v23 = v25;
        if (v23 != 0.0)
        {
          v26 = sqrtf((float)((float)(v20 * v20) + (float)(v21 * v21)) + (float)(v22 * v22)) / v23;
          v21 = v21 * v26;
          v20 = v20 * v26;
          v22 = v22 * v26;
        }
      }
      v27 = fabsf(v21);
      v28 = fabsf(v20);
      v29 = fabsf(v22);
      if (v27 < v28)
        v27 = v28;
      if (v27 >= v29)
        v30 = v27;
      else
        v30 = v29;
      if (v30 > 1.0)
      {
        v31 = 1.0 / v30;
        v21 = v21 * v31;
        v20 = v20 * v31;
        v22 = v22 * v31;
      }
      v32 = *((_BYTE *)this + 392) != 0;
      v33 = v15 < 0.0;
      if (!v32 || !v33)
        cosval = 1.0;
      v34 = v20 * cosval;
      v35 = 0.0;
      if (!v32 || !v33)
        v35 = v22;
      v36 = v21 * cosval;
      v37 = *((float *)this + 15);
      if (v37 < *((float *)this + 16))
        v37 = *((float *)this + 16);
      if (v37 < *((float *)this + 17))
        v37 = *((float *)this + 17);
      if (*((_BYTE *)this + 112))
        v38 = *((_DWORD *)this + 99);
      else
        v38 = 0;
      v40 = CartesianPanner::pan((CartesianSpatializer *)((char *)this + 264 * v38 + 400), v37, v36, v34, v35, *((float **)this + 45), (*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      if ((_DWORD)v40)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v41 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          std::string::basic_string[abi:ne180100]<0>(&v60, "CartesianSpatializer");
          v50 = std::string::append(&v60, "::", 2uLL);
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          __Step.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v63 = v52->__r_.__value_.__r.__words[2];
          __Start = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          p_Start = &__Start;
          if (v63 < 0)
            p_Start = (__int128 *)__Start;
          *(_DWORD *)buf = 136315394;
          v65 = p_Start;
          v66 = 1024;
          v67 = v40;
          _os_log_debug_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%s: ERROR: could not compute the panning gains, err=%d", buf, 0x12u);
          if (SHIBYTE(v63) < 0)
            operator delete((void *)__Start);
          if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__Step.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
        }
        v42 = (void *)*((_QWORD *)this + 45);
        v43 = *((_QWORD *)this + 46) - (_QWORD)v42;
        if (v43 >= 1)
          bzero(v42, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
      }
      if (*((_BYTE *)this + 113))
        AUSM::speakerSnap(*((AUSM **)this + 45), (*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      if (*((_BYTE *)this + 17))
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 336, *((char **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      *((_BYTE *)this + 17) = 0;
    }
    else
    {
      v40 = 0;
    }
    v44 = *((_BYTE *)this + 132);
    if (!v44)
      a8 = 0.0;
    if (a4)
    {
      v45 = 0;
      do
      {
        LODWORD(__Start) = 0;
        v46 = *((_QWORD *)this + 42);
        LODWORD(__Start) = *(_DWORD *)(v46 + 4 * v45);
        v47 = a8 * *(float *)(*((_QWORD *)this + 45) + 4 * v45);
        v48 = v47;
        if (!*((_DWORD *)this + 81))
          v48 = v47 + (float)(*((float *)this + 96) * (float)(*(float *)(v46 + 4 * v45) - v47));
        *(float *)(v46 + 4 * v45) = v48;
        if (a7)
        {
          LODWORD(__Step.__r_.__value_.__l.__data_) = 0;
          *(float *)&__Step.__r_.__value_.__l.__data_ = (float)(*(float *)(v46 + 4 * v45) - *(float *)&__Start)
                                                      / (float)a7;
          if (fabsf(*(float *)&__Step.__r_.__value_.__l.__data_) <= 0.000001)
          {
            if (fabsf(*(float *)&__Start) > 0.000001)
            {
              *(float *)(v46 + 4 * v45) = v47;
              vDSP_vsma(a2, 1, (const float *)&__Start, a3[v45], 1, a3[v45], 1, a7);
            }
          }
          else
          {
            vDSP_vrampmuladd(a2, 1, (float *)&__Start, (const float *)&__Step, a3[v45], 1, a7);
          }
        }
        ++v45;
      }
      while (a4 != v45);
      v44 = *((_BYTE *)this + 132);
    }
    *((_BYTE *)this + 268) = v44;
    *((_DWORD *)this + 5) = a7;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v39 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "CartesianSpatializer");
      v55 = std::string::append(&v60, "::", 2uLL);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __Step.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v63 = v57->__r_.__value_.__r.__words[2];
      __Start = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = &__Start;
      if (v63 < 0)
        v59 = (__int128 *)__Start;
      *(_DWORD *)buf = 136315138;
      v65 = v59;
      _os_log_debug_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v63) < 0)
        operator delete((void *)__Start);
      if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__Step.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
    return 4294956429;
  }
  return v40;
}

void sub_1B6208FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void Spatializer::getLoadedIRDataAttributes(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[152] = 0;
}

void Spatializer::getFFTFilterConfigParams(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

float Spatializer::getDryMix(Spatializer *this)
{
  return 0.0;
}

uint64_t Spatializer::getLatencyFrames(Spatializer *this)
{
  return 0;
}

uint64_t Spatializer::getTailTimeFrames(Spatializer *this)
{
  return *((unsigned int *)this + 5);
}

void AUSM::speakerSnap(AUSM *this, vDSP_Length __N)
{
  vDSP_Length v3;
  float v4;
  float __B;
  float __C;

  __C = 0.0;
  v3 = __N;
  vDSP_svesq((const float *)this, 1, &__C, __N);
  v4 = __C;
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  vDSP_vsq((const float *)this, 1, (float *)this, 1, v3);
  __C = 0.0;
  vDSP_svesq((const float *)this, 1, &__C, v3);
  if (__C > 0.0)
  {
    __C = powf(__C, -0.5);
    vDSP_vsmul((const float *)this, 1, &__C, (float *)this, 1, v3);
  }
  __B = 0.01;
  vDSP_vthres((const float *)this, 1, &__B, (float *)this, 1, v3);
  __C = 0.0;
  vDSP_svesq((const float *)this, 1, &__C, v3);
  if (__C > 0.0)
  {
    __C = sqrtf(v4) * powf(__C, -0.5);
    vDSP_vsmul((const float *)this, 1, &__C, (float *)this, 1, v3);
  }
}

uint64_t Spatializer::setExclusionZones(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  float *v9;

  v5 = *(_QWORD *)(a1 + 88);
  v4 = (char *)(a1 + 88);
  v7 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v8 == *(_QWORD *)(a1 + 96) - v5)
  {
    if (v7 == (char *)v6)
      return 0;
    v9 = *(float **)a2;
    while (AUSM::ExclusionZone::operator==(v9, v5))
    {
      v9 += 7;
      v5 += 28;
      if (v9 == (float *)v6)
        return 0;
    }
  }
  if (v4 != (char *)a2)
    std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(v4, v7, v6, 0x6DB6DB6DB6DB6DB7 * (v8 >> 2));
  *(_BYTE *)(a1 + 328) = 1;
  return 0;
}

char *std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x492492492492492)
      v12 = 0x924924924924924;
    else
      v12 = v11;
    result = std::vector<AUSM::ExclusionZone>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t Spatializer::setParams(Spatializer *this, const SpatializerParams *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v12;

  if (!*((_BYTE *)this + 16)
    || (v5 = *((_QWORD *)a2 + 11),
        v4 = *((_QWORD *)a2 + 12),
        v6 = (void *)*((_QWORD *)this + 17),
        v7 = *((_QWORD *)this + 18) - (_QWORD)v6,
        v4 - v5 == v7)
    && *((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5) == *((_QWORD *)this + 12) - *((_QWORD *)this + 11))
  {
    v8 = *(_OWORD *)a2;
    v9 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 3) = v8;
    *((_OWORD *)this + 4) = v9;
    if ((Spatializer *)((char *)this + 48) == a2)
    {
      v12 = *((_OWORD *)a2 + 4);
      *(_QWORD *)((char *)this + 125) = *(_QWORD *)((char *)a2 + 77);
      *((_OWORD *)this + 7) = v12;
    }
    else
    {
      std::vector<AUSM::ExclusionZone>::__assign_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>((char *)this + 88, *((char **)a2 + 5), *((_QWORD *)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2));
      v10 = *((_OWORD *)a2 + 4);
      *(_QWORD *)((char *)this + 125) = *(_QWORD *)((char *)a2 + 77);
      *((_OWORD *)this + 7) = v10;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 136, *((char **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 160, *((char **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
    }
    *((_WORD *)this + 160) = 257;
    *((_BYTE *)this + 328) = 1;
  }
  else
  {
    *((_OWORD *)this + 3) = *(_OWORD *)a2;
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 19) = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 32);
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 9);
    *((_BYTE *)this + 113) = *((_BYTE *)a2 + 65);
    *(_QWORD *)((char *)this + 116) = *(_QWORD *)((char *)a2 + 68);
    *(_QWORD *)((char *)this + 124) = *(_QWORD *)((char *)a2 + 76);
    *((_BYTE *)this + 132) = *((_BYTE *)a2 + 84);
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    *((_WORD *)this + 160) = 257;
    *((_BYTE *)this + 328) = 1;
    *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
    *((_BYTE *)this + 112) = 0;
    if (v4 != v5)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

void Spatializer::~Spatializer(Spatializer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;

  *(_QWORD *)this = &off_1E69ED430;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 20);
  if (v5)
  {
    *((_QWORD *)this + 21) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  v8 = (const void *)*((_QWORD *)this + 5);
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 4);
  if (v9)
    CFRelease(v9);
}

{
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t Spatializer::initialize(Spatializer *this, float a2, unsigned int a3)
{
  unint64_t v4;
  int v6;
  int v7;

  v4 = a3;
  v7 = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &v7);
  v6 = 0;
  std::vector<float>::resize((uint64_t)this + 272, v4, &v6);
  *((_WORD *)this + 8) = 257;
  return 0;
}

_BYTE *Spatializer::reset(_BYTE *this)
{
  this[17] = 1;
  this[268] = this[132];
  return this;
}

uint64_t Spatializer::processAccumulating(uint64_t a1)
{
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a1 + 132);
  return 0;
}

void Spatializer::Spatializer(Spatializer *this)
{
  *(_QWORD *)this = &off_1E69ED430;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 256;
  *(_QWORD *)((char *)this + 20) = 0x400000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_DWORD *)this + 19) = 4;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 21) = 1110704128;
  *(_QWORD *)((char *)this + 116) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 56) = 0;
  *(_QWORD *)((char *)this + 124) = 0x447A00003F800000;
  *((_BYTE *)this + 132) = 1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *((_DWORD *)this + 53) = 4;
  *((_BYTE *)this + 216) = 0;
  *((_DWORD *)this + 55) = 1110704128;
  *(_QWORD *)((char *)this + 252) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 124) = 0;
  *((_BYTE *)this + 268) = 1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_WORD *)this + 160) = 257;
  *((_BYTE *)this + 322) = 0;
  *((_DWORD *)this + 81) = 0;
  *((_BYTE *)this + 328) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)((char *)this + 260) = 0x447A00003F800000;
}

void CartesianSpatializer::CartesianSpatializer(CartesianSpatializer *this, AudioChannelLayout *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;
  AudioChannelLayout __p;

  Spatializer::Spatializer(this);
  *(_QWORD *)v4 = &off_1E69CB5E8;
  *(_DWORD *)(v4 + 332) = a2->mChannelLayoutTag;
  v5 = v4 + 336;
  *(_DWORD *)(v4 + 396) = 0;
  *(_OWORD *)(v4 + 377) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  v6 = 400;
  do
  {
    v7 = (char *)this + v6;
    *v7 = 0;
    v7[256] = 0;
    *(_OWORD *)(v7 + 4) = 0uLL;
    *(_OWORD *)(v7 + 20) = 0uLL;
    *(_OWORD *)(v7 + 36) = 0uLL;
    *(_OWORD *)(v7 + 52) = 0uLL;
    *(_OWORD *)(v7 + 68) = 0uLL;
    *(_OWORD *)(v7 + 84) = 0uLL;
    *(_OWORD *)(v7 + 100) = 0uLL;
    *(_OWORD *)(v7 + 116) = 0uLL;
    *(_OWORD *)(v7 + 132) = 0uLL;
    *(_OWORD *)(v7 + 148) = 0uLL;
    *(_OWORD *)(v7 + 164) = 0uLL;
    *(_OWORD *)(v7 + 180) = 0uLL;
    *(_OWORD *)(v7 + 196) = 0uLL;
    *(_OWORD *)(v7 + 212) = 0uLL;
    v6 += 264;
    *(_OWORD *)(v7 + 228) = 0uLL;
    *(_OWORD *)(v7 + 237) = 0uLL;
  }
  while (v7 + 264 != (char *)(v4 + 1984));
  GetChannelLayoutChannelLabels(&__p, (int *)a2);
  v8 = ((*(_QWORD *)&__p.mNumberChannelDescriptions - *(_QWORD *)&__p.mChannelLayoutTag) >> 2);
  v9 = 0;
  std::vector<float>::resize(v5, v8, &v9);
  v9 = 0;
  std::vector<float>::resize((uint64_t)this + 360, v8, &v9);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (*(_QWORD *)&__p.mChannelLayoutTag)
  {
    *(_QWORD *)&__p.mNumberChannelDescriptions = *(_QWORD *)&__p.mChannelLayoutTag;
    operator delete(*(void **)&__p.mChannelLayoutTag);
  }
}

id DeviceNameAsString(int a1)
{
  __CFString *v1;
  __CFString *v2;
  void *v3;

  v1 = (__CFString *)PlatformUtilities_iOS::CopyProductTypeFilePrefix(a1);
  if (!v1)
    __assert_rtn("DeviceNameAsString", "vpDSPEngineConfiguration.mm", 47, "lowerCaseName != NULL");
  v2 = v1;
  -[__CFString capitalizedString](v1, "capitalizedString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B6209928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DSPEngineConfiguration::DSPEngineConfiguration(DSPEngineConfiguration *this)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSArray *v17;
  NSArray *v18;
  void **v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  void **v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  _BYTE v89[128];
  _QWORD v90[52];
  _QWORD v91[52];
  _QWORD v92[3];
  void *v93;
  void *v94;
  _QWORD v95[3];
  _QWORD v96[3];
  _QWORD v97[5];

  v97[3] = *MEMORY[0x1E0C80C00];
  GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration = 0;
  v1 = (void *)MEMORY[0x1E0C99E08];
  v96[0] = CFSTR("VP configuration info");
  v95[0] = CFSTR("ref port subtype");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("b%u"), 205);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = v78;
  v94 = &unk_1E6A12050;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v94, &v93, 1);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v95[1] = v77;
  v92[0] = CFSTR("device");
  DeviceNameAsString(24);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v90[0] = v76;
  v91[0] = &unk_1E6A12078;
  DeviceNameAsString(25);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v90[1] = v75;
  v91[1] = &unk_1E6A120A0;
  DeviceNameAsString(125);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v90[2] = v74;
  v91[2] = &unk_1E6A120C8;
  DeviceNameAsString(27);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v90[3] = v73;
  v91[3] = &unk_1E6A120F0;
  DeviceNameAsString(28);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v90[4] = v72;
  v91[4] = &unk_1E6A12118;
  DeviceNameAsString(46);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v90[5] = v71;
  v91[5] = &unk_1E6A12140;
  DeviceNameAsString(26);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v90[6] = v70;
  v91[6] = &unk_1E6A12168;
  DeviceNameAsString(32);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v90[7] = v69;
  v91[7] = &unk_1E6A12190;
  DeviceNameAsString(33);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v90[8] = v68;
  v91[8] = &unk_1E6A121B8;
  DeviceNameAsString(34);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v90[9] = v67;
  v91[9] = &unk_1E6A121E0;
  DeviceNameAsString(35);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v90[10] = v66;
  v91[10] = &unk_1E6A12208;
  DeviceNameAsString(9);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v90[11] = v65;
  v91[11] = &unk_1E6A12230;
  DeviceNameAsString(10);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v90[12] = v64;
  v91[12] = &unk_1E6A12258;
  DeviceNameAsString(180);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v90[13] = v63;
  v91[13] = &unk_1E6A12280;
  DeviceNameAsString(36);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v90[14] = v62;
  v91[14] = &unk_1E6A122A8;
  DeviceNameAsString(37);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v90[15] = v61;
  v91[15] = &unk_1E6A122D0;
  DeviceNameAsString(31);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v90[16] = v60;
  v91[16] = &unk_1E6A122F8;
  DeviceNameAsString(2);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v90[17] = v59;
  v91[17] = &unk_1E6A12320;
  DeviceNameAsString(4);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v90[18] = v58;
  v91[18] = &unk_1E6A12348;
  DeviceNameAsString(5);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v90[19] = v57;
  v91[19] = &unk_1E6A12370;
  DeviceNameAsString(72);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v90[20] = v56;
  v91[20] = &unk_1E6A12398;
  DeviceNameAsString(73);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v90[21] = v55;
  v91[21] = &unk_1E6A123C0;
  DeviceNameAsString(74);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v90[22] = v54;
  v91[22] = &unk_1E6A123E8;
  DeviceNameAsString(87);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v90[23] = v53;
  v91[23] = &unk_1E6A12410;
  DeviceNameAsString(88);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v90[24] = v52;
  v91[24] = &unk_1E6A12438;
  DeviceNameAsString(96);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v90[25] = v51;
  v91[25] = &unk_1E6A12460;
  DeviceNameAsString(97);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v90[26] = v50;
  v91[26] = &unk_1E6A12488;
  DeviceNameAsString(100);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v90[27] = v49;
  v91[27] = &unk_1E6A124B0;
  DeviceNameAsString(101);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v90[28] = v48;
  v91[28] = &unk_1E6A124D8;
  DeviceNameAsString(104);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v90[29] = v47;
  v91[29] = &unk_1E6A12500;
  DeviceNameAsString(105);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v90[30] = v46;
  v91[30] = &unk_1E6A12528;
  DeviceNameAsString(77);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v90[31] = v45;
  v91[31] = &unk_1E6A12550;
  DeviceNameAsString(78);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v90[32] = v44;
  v91[32] = &unk_1E6A12578;
  DeviceNameAsString(83);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v90[33] = v43;
  v91[33] = &unk_1E6A125A0;
  DeviceNameAsString(85);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v90[34] = v42;
  v91[34] = &unk_1E6A125C8;
  DeviceNameAsString(92);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v90[35] = v41;
  v91[35] = &unk_1E6A125F0;
  DeviceNameAsString(80);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v90[36] = v40;
  v91[36] = &unk_1E6A12618;
  DeviceNameAsString(134);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v90[37] = v39;
  v91[37] = &unk_1E6A12640;
  DeviceNameAsString(138);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v90[38] = v38;
  v91[38] = &unk_1E6A12668;
  DeviceNameAsString(141);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v90[39] = v37;
  v91[39] = &unk_1E6A12690;
  DeviceNameAsString(147);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v90[40] = v36;
  v91[40] = &unk_1E6A126B8;
  DeviceNameAsString(148);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v90[41] = v35;
  v91[41] = &unk_1E6A126E0;
  DeviceNameAsString(150);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v90[42] = v34;
  v91[42] = &unk_1E6A12708;
  DeviceNameAsString(152);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v90[43] = v33;
  v91[43] = &unk_1E6A12730;
  DeviceNameAsString(154);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v90[44] = v32;
  v91[44] = &unk_1E6A12758;
  DeviceNameAsString(156);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v90[45] = v31;
  v91[45] = &unk_1E6A12780;
  DeviceNameAsString(158);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v90[46] = v30;
  v91[46] = &unk_1E6A127A8;
  DeviceNameAsString(160);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v90[47] = v2;
  v91[47] = &unk_1E6A127D0;
  DeviceNameAsString(161);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v90[48] = v3;
  v91[48] = &unk_1E6A127F8;
  DeviceNameAsString(163);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v90[49] = v4;
  v91[49] = &unk_1E6A12820;
  DeviceNameAsString(169);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v90[50] = v5;
  v91[50] = &unk_1E6A12848;
  DeviceNameAsString(177);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v90[51] = v6;
  v91[51] = &unk_1E6A12870;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v91, v90, 52);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v92[1] = v7;
  v92[2] = &unk_1E6A12898;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v95[2] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v95, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v97[0] = v9;
  v97[1] = &unk_1E6A12910;
  v96[1] = CFSTR("tree index");
  v96[2] = CFSTR("version");
  v97[2] = &unk_1E6A12970;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v97, v96, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dictionaryWithDictionary:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("tree index"));
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v80;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v80 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * v15);
        objc_msgSend(v11, "objectForKeyedSubscript:", v16);
        v17 = (NSArray *)objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v17)
        {
          if ((LookUpTreeIsValid(v17) & 1) == 0)
          {
            objc_msgSend(v11, "removeObjectForKey:", v16);
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v19 = (void **)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope)
            {
              if (CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v20 = *v19;
                if (!*v19)
                  v20 = (void *)MEMORY[0x1E0C81028];
                v21 = v20;
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  v22 = objc_msgSend(objc_retainAutorelease(v16), "UTF8String");
                  *(_DWORD *)buf = 136315650;
                  v84 = "vpDSPEngineConfiguration.mm";
                  v85 = 1024;
                  v86 = 132;
                  v87 = 2080;
                  v88 = v22;
                  v23 = v21;
                  v24 = OS_LOG_TYPE_ERROR;
                  v25 = "%25s:%-5d DSPEngine configuration file claimed to have tree %s, but it was an a valid tree";
                  goto LABEL_24;
                }
                goto LABEL_25;
              }
            }
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v26 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v27 = *v26;
            if (!*v26)
              v27 = (void *)MEMORY[0x1E0C81028];
            v21 = v27;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              v28 = objc_msgSend(objc_retainAutorelease(v16), "UTF8String");
              *(_DWORD *)buf = 136315650;
              v84 = "vpDSPEngineConfiguration.mm";
              v85 = 1024;
              v86 = 128;
              v87 = 2080;
              v88 = v28;
              v23 = v21;
              v24 = OS_LOG_TYPE_DEFAULT;
              v25 = "%25s:%-5d DSPEngine configuration file claimed to have tree %s, but it was not found";
LABEL_24:
              _os_log_impl(&dword_1B5ED0000, v23, v24, v25, buf, 0x1Cu);
            }
LABEL_25:

          }
        }

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
    }
    while (v13);
  }

  v29 = (void *)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration;
  GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration = (uint64_t)v11;

}

void sub_1B620A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  void *v59;
  void *v60;

  _Unwind_Resume(a1);
}

uint64_t GetVoiceProcessorVersion(const vp::Context *a1, AudioObjectID a2, unsigned int a3, AudioObjectID a4, unsigned int a5)
{
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  NSDictionary *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  __CFString *v43;
  void *v44;
  int v45;
  NSArray *v46;
  void **v47;
  void *v48;
  NSObject *v49;
  __CFString *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void **v56;
  void *v57;
  NSObject *v58;
  void **v59;
  void *v60;
  NSObject *v61;
  unsigned int AppIntegerValue;
  DSPEngineConfiguration *v64;
  unsigned int v65;
  unsigned int v66[2];
  char __s[8];
  _BYTE __p[12];
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 47) >= 0)
    v10 = (char *)a1 + 24;
  else
    v10 = (char *)*((_QWORD *)a1 + 3);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v10, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(_QWORD *)((_BYTE *)a1 + 148) & 0xFF00000000) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("AID%u"), *(_QWORD *)((char *)a1 + 148));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringByAppendingPathComponent:", v12);
    v13 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = (_QWORD *)((char *)a1 + 104);
    if (*((char *)a1 + 127) < 0)
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v14, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringByAppendingPathComponent:", v12);
    v13 = objc_claimAutoreleasedReturnValue();
  }
  v15 = (void *)v13;

  v11 = v15;
LABEL_10:
  __p[0] = 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("VPVX"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v16, "fileExistsAtPath:isDirectory:", v17, __p);

  if (__p[0])
    v19 = v18;
  else
    v19 = 0;

  if ((v19 & 1) == 0)
  {
    if ((v21 & 1) == 0)
    {
      if ((_DWORD)v64)
      {
        DSPEngineConfiguration::DSPEngineConfiguration(v64);
      }
    }
    if (*((_BYTE *)a1 + 140))
      v22 = *((_DWORD *)a1 + 34);
    else
      v22 = 0;
    v23 = (NSDictionary *)objc_opt_new();
    GetVPProductFamilyType(v22);
    DeviceNameAsString(25);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s = 0;
    *(_QWORD *)v66 = 0;
    v65 = 0;
    if (a2 && a3)
    {
      GetAndPrintPortTypeProperty(0x6F757470u, a3, a2, 0x70737562u, "sub", (unsigned int *)__s);
      GetAndPrintPortTypeProperty(0x6F757470u, a3, a2, 0x70657074u, "end point", &v66[1]);
    }
    if (a4 && a5)
    {
      GetAndPrintPortTypeProperty(0x696E7074u, a5, a4, 0x70737562u, "sub", v66);
      GetAndPrintPortTypeProperty(0x696E7074u, a5, a4, 0x70657074u, "end point", &v65);
    }
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v24, CFSTR("device"));
    v25 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, a3);
    objc_msgSend(v25, "stringWithUTF8String:", __p);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v26, CFSTR("ref port"));

    v27 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, a5);
    objc_msgSend(v27, "stringWithUTF8String:", __p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v28, CFSTR("mic port"));

    v29 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(unsigned int *)__s);
    objc_msgSend(v29, "stringWithUTF8String:", __p);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v30, CFSTR("ref port subtype"));

    v31 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v66[1]);
    objc_msgSend(v31, "stringWithUTF8String:", __p);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v32, CFSTR("ref port endpoint type"));

    v33 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v66[0]);
    objc_msgSend(v33, "stringWithUTF8String:", __p);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v34, CFSTR("mic port subtype"));

    v35 = (void *)MEMORY[0x1E0CB3940];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v65);
    objc_msgSend(v35, "stringWithUTF8String:", __p);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v36, CFSTR("mic port endpoint type"));

    v37 = (void *)MEMORY[0x1E0CB3940];
    strcpy(__s, "j327");
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    if ((v72 & 0x80000000) == 0)
      v38 = __p;
    else
      v38 = *(_BYTE **)__p;
    objc_msgSend(v37, "stringWithUTF8String:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if (SBYTE3(v72) < 0)
      operator delete(*(void **)__p);
    -[NSDictionary objectForKeyedSubscript:](v23, "objectForKeyedSubscript:", CFSTR("ref port subtype"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v40, "isEqualToString:", v39) & 1) != 0)
    {
      -[NSDictionary objectForKeyedSubscript:](v23, "objectForKeyedSubscript:", CFSTR("mic port subtype"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v41, "isEqualToString:", v39);

      if ((v42 & 1) != 0)
      {
        v20 = 6;
LABEL_73:

        return v20;
      }
    }
    else
    {

    }
    v43 = CFSTR("VP configuration info");
    objc_msgSend((id)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration, "allKeys");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend(v44, "containsObject:", CFSTR("VP configuration info"));

    if (v45)
    {
      objc_msgSend((id)GetVoiceProcessorVersion(vp::Context const&,unsigned int,unsigned int,unsigned int,unsigned int)::sDSPEngineConfiguration, "objectForKeyedSubscript:", CFSTR("VP configuration info"));
      v46 = (NSArray *)objc_claimAutoreleasedReturnValue();
      goto LABEL_46;
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v47 = (void **)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope)
    {
      v46 = 0;
      if (!CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        goto LABEL_46;
      v48 = *v47;
      if (!*v47)
        v48 = (void *)MEMORY[0x1E0C81028];
      v49 = v48;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = objc_retainAutorelease(CFSTR("VP configuration info"));
        v51 = objc_msgSend(CFSTR("VP configuration info"), "UTF8String");
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "vpDSPEngineConfiguration.mm";
        v69 = 1024;
        v70 = 142;
        v71 = 2080;
        v72 = v51;
        _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't get DSPEngine configuration tree %s", __p, 0x1Cu);
      }

    }
    v46 = 0;
LABEL_46:

    LookUpTreeGet(v23, v46);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v52, "objectForKeyedSubscript:", CFSTR("vp version"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "objectForKeyedSubscript:", CFSTR("unknown device"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = v54;
    if (v54 && objc_msgSend(v54, "unsignedIntegerValue"))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v56 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v57 = *v56;
        if (!*v56)
          v57 = (void *)MEMORY[0x1E0C81028];
        v58 = v57;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "vpDSPEngineConfiguration.mm";
          v69 = 1024;
          v70 = 253;
          _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unsupported device!!", __p, 0x12u);
        }

      }
    }
    if (v53)
    {
      LODWORD(v20) = objc_msgSend(v53, "unsignedIntegerValue");
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v59 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v60 = *v59;
        if (!*v59)
          v60 = (void *)MEMORY[0x1E0C81028];
        v61 = v60;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "vpDSPEngineConfiguration.mm";
          v69 = 1024;
          v70 = 260;
          _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't find the VP version in the DSPEngine configuration file!", __p, 0x12u);
        }

      }
      LODWORD(v20) = 3;
    }
    __p[0] = 0;
    AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("vp_force_version"), CFSTR("com.apple.coreaudio"), __p);
    if (__p[0])
      v20 = AppIntegerValue;
    else
      v20 = v20;

    goto LABEL_73;
  }
  return 10;
}

void sub_1B620B408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t *NeuralNet::NeuralNet(uint64_t a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t *v4;
  NSObject *v5;
  const void *Value;
  const void *v7;
  NSObject **v8;
  NSObject *v9;
  NSObject **v10;
  NSObject *v11;
  const __CFString *v12;
  _BYTE *v13;
  const __CFString *v14;
  BOOL v15;
  int v16;
  const __CFString *v17;
  BOOL v18;
  const __CFString *v19;
  BOOL v20;
  const __CFString *v21;
  BOOL v22;
  const __CFString *v23;
  BOOL v24;
  NSObject **v25;
  NSObject *v26;
  gid_t v27;
  dev_t v28;
  NSObject **v29;
  NSObject *v30;
  caulk::deferred_logger **v31;
  NSObject *v32;
  caulk::deferred_logger **v33;
  NSObject *v34;
  caulk::deferred_logger **v35;
  NSObject *v36;
  caulk::deferred_logger **v37;
  NSObject *v38;
  __uint32_t v39;
  uint64_t v40;
  __uint32_t st_gen;
  uint64_t v42;
  int v43;
  uint64_t v44;
  NSObject *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  _BOOL4 v48;
  caulk::deferred_logger **v49;
  NSObject *v50;
  _OWORD *v51;
  const void **v52;
  NSObject **v53;
  NSObject *v54;
  std::string *v55;
  NSObject **v56;
  NSObject *v57;
  NSObject **v58;
  NSObject *v59;
  char *v60;
  std::string::size_type v61;
  _QWORD *v62;
  std::string::size_type v63;
  const __CFDictionary *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const __CFData *v68;
  const UInt8 *BytePtr;
  NSObject **v70;
  NSObject *v71;
  NSObject **v72;
  NSObject *v73;
  std::string *v74;
  _BOOL4 v75;
  _BOOL4 v76;
  char *v77;
  _BOOL4 v78;
  int v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::string::size_type v83;
  E5RT::IOPort *v84;
  _QWORD *InputPorts;
  _QWORD *i;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  E5RT::IOPort *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  E5RT::BufferObject *v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  E5RT::IOPort *v99;
  _QWORD *OutputPorts;
  _QWORD *j;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  E5RT::IOPort *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  E5RT::BufferObject *v108;
  E5RT::ExecutionStream *DataSpan;
  unint64_t v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::size_type v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *size;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  NSObject **v129;
  NSObject *v130;
  NSObject **v131;
  NSObject *v132;
  NSObject **v133;
  NSObject *v134;
  uint64_t v135;
  unint64_t v136;
  caulk::deferred_logger **v137;
  NSObject *v138;
  const __CFNumber *v139;
  NSObject **v140;
  NSObject *v141;
  NSObject **v142;
  NSObject *v143;
  const char *v144;
  NSObject *v145;
  os_log_type_t v146;
  const void *v147;
  std::string::size_type v148;
  const __CFNumber *v149;
  const __CFNumber *v150;
  int v151;
  NSObject **v152;
  NSObject *v153;
  NSObject *v154;
  uint64_t k;
  uint64_t v156;
  const __CFNumber *v157;
  unint64_t v158;
  std::string *v159;
  __int128 v160;
  const UInt8 *v161;
  CFIndex v162;
  CFStringRef v163;
  const void *v164;
  const void *v165;
  NSObject **v166;
  NSObject *v167;
  _BYTE *v168;
  const __CFString *v169;
  const __CFString *v170;
  NSObject **v171;
  NSObject *v172;
  std::string *v173;
  const __CFString *v174;
  const __CFString *v175;
  NSObject **v176;
  NSObject *v177;
  std::string *v178;
  NSObject **v179;
  NSObject *v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  std::string::size_type v184;
  _QWORD *v185;
  uint64_t v186;
  __int128 v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  int v196;
  uint64_t v197;
  __darwin_ino64_t v198;
  unint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  __darwin_ino64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float32x2_t v215;
  float32x2_t v216;
  int v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::string::size_type v223;
  _QWORD *v224;
  uint64_t v225;
  __int128 v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  __darwin_ino64_t v238;
  char **v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  size_t v248;
  char **v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  void **v255;
  void *v256;
  char *v257;
  _BYTE *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  float32x2_t v264;
  float32x2_t v265;
  int v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::string::size_type v272;
  _QWORD *v273;
  uint64_t v274;
  __int128 v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  char *v283;
  int v284;
  uint64_t v285;
  __darwin_ino64_t st_ino;
  unint64_t v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  __darwin_ino64_t v291;
  std::vector<int> *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  float32x2_t v303;
  float32x2_t v304;
  int v305;
  void *LayerFullyConnected;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::string::size_type v311;
  _QWORD *v312;
  uint64_t v313;
  __int128 v314;
  unint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __darwin_ino64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  _BYTE *v335;
  _BYTE *v336;
  char **v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  size_t v342;
  uint64_t v343;
  _BYTE *v344;
  uint64_t v345;
  char *v346;
  size_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t v353;
  float32x2_t v354;
  int v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  const UInt8 *p_buf;
  __darwin_ino64_t st_gid_high;
  CFStringRef v363;
  const void *v364;
  void *v365;
  void *v366;
  void *v367;
  char *v368;
  int v370;
  BOOL v371;
  int v372;
  NSObject **v373;
  NSObject *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  caulk::deferred_logger **v378;
  NSObject *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  caulk::deferred_logger **v383;
  NSObject *v384;
  stat *v385;
  void *v386;
  std::string *v387;
  const char *v388;
  uint64_t v389;
  BOOL v390;
  NSObject **v391;
  NSObject *v392;
  int v393;
  _BOOL4 v394;
  std::string *v395;
  const char *v396;
  NSObject **v397;
  NSObject *v398;
  std::string *v399;
  std::string *v400;
  const char *v401;
  int v402;
  int v403;
  off_t st_size;
  void *v405;
  NSObject **v406;
  NSObject *v407;
  _BOOL4 v408;
  NSObject **v409;
  NSObject *v410;
  std::string *v411;
  NSObject **v412;
  NSObject *v413;
  char *v414;
  char *v415;
  uint64_t v416;
  const __CFAllocator *v417;
  const __CFUUID *v418;
  CFStringRef v419;
  _BYTE *v420;
  size_t v421;
  stat *v422;
  _BYTE *v423;
  std::string *v424;
  __int128 v425;
  const std::string::value_type *v426;
  __darwin_ino64_t v427;
  NSObject **v428;
  NSObject *v429;
  NSObject **v430;
  NSObject *v431;
  _BYTE *v432;
  uint64_t v433;
  std::string::size_type v434;
  NSObject **v435;
  NSObject *v436;
  int v437;
  std::string *v438;
  uint64_t v439;
  uint64_t v440;
  char v441;
  NSObject **v442;
  NSObject *v443;
  uint64_t v444;
  NSObject **v445;
  NSObject *v446;
  std::string *v447;
  NSObject **v448;
  NSObject *v449;
  _BYTE *v450;
  NSObject **v451;
  NSObject *v452;
  uint64_t v453;
  unint64_t v454;
  caulk::deferred_logger **v455;
  NSObject *v456;
  NSObject *v458;
  NSObject **v459;
  NSObject *v460;
  NSObject **v461;
  NSObject *v462;
  NSObject **v463;
  NSObject *v464;
  NSObject **v465;
  NSObject *v466;
  NSObject **v467;
  NSObject *v468;
  NSObject **v469;
  NSObject *v470;
  NSObject **v471;
  NSObject *v472;
  NSObject **v473;
  NSObject *v474;
  NSObject **v475;
  NSObject *v476;
  NSObject **v477;
  NSObject *v478;
  NSObject **v479;
  NSObject *v480;
  NSObject **v481;
  NSObject *v482;
  int v483;
  const char *v484;
  NSObject *v485;
  uint32_t v486;
  _DWORD *v487;
  int v488;
  uint64_t v489;
  const char *v490;
  NSObject *v491;
  int v492;
  uint64_t v493;
  const char *v494;
  NSObject *v495;
  int v496;
  uint64_t v497;
  const char *v498;
  NSObject *v499;
  int v500;
  uint64_t v501;
  const char *v502;
  NSObject *v503;
  uint64_t v504;
  uint32_t v505;
  uint64_t v506;
  uint32_t v507;
  uint64_t v508;
  uint32_t v509;
  uint64_t v510;
  uint32_t v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  _DWORD *v515;
  NSObject *v516;
  NSObject **v517;
  NSObject *v518;
  _DWORD *v519;
  _DWORD *v520;
  NSObject **v521;
  NSObject *v522;
  NSObject *v523;
  _DWORD *v524;
  _DWORD *v525;
  std::runtime_error *v526;
  NSObject *v527;
  NSObject **v528;
  _BYTE *v529;
  _DWORD *v530;
  NSObject **v531;
  NSObject *v532;
  NSObject **v533;
  NSObject *v534;
  _BYTE *v535;
  _DWORD *v536;
  _BYTE *v537;
  _DWORD *v538;
  NSObject **v539;
  NSObject *v540;
  std::runtime_error *v541;
  std::string *v542;
  __int128 v543;
  std::runtime_error *v544;
  std::string *v545;
  __int128 v546;
  NSObject *v547;
  NSObject **v548;
  NSObject *v549;
  NSObject **v550;
  NSObject *v551;
  _DWORD *v552;
  NSObject **v553;
  NSObject *v554;
  NSObject **v555;
  NSObject *v556;
  NSObject *v557;
  NSObject **v558;
  _DWORD *v559;
  NSObject **v560;
  NSObject *v561;
  std::string *v562;
  _DWORD *v563;
  std::string *v564;
  int *v565;
  char *v566;
  _DWORD *v567;
  std::runtime_error *v568;
  std::runtime_error *v569;
  std::string *v570;
  _DWORD *v571;
  _DWORD *v572;
  _DWORD *v573;
  NSObject *v574;
  _BYTE *v575;
  _DWORD *exception;
  NSObject **v577;
  NSObject *v578;
  std::string *v579;
  _DWORD *v580;
  uint64_t v581;
  uint64_t v582;
  const void **v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t *v586;
  unsigned __int8 *v587;
  uint64_t v588;
  __darwin_ino64_t v589;
  uint64_t v590;
  __darwin_ino64_t v591;
  uint64_t v592;
  __darwin_ino64_t v593;
  const __CFNumber *v594;
  CFTypeRef v595;
  int v596;
  CFTypeRef v597;
  int v598;
  caulk::deferred_logger ***v599;
  _QWORD *v600;
  unint64_t v601;
  _QWORD *v602;
  uint64_t *v603;
  CFStringRef v604;
  void *v605[2];
  char v606;
  CFStringRef v607;
  void *v608[2];
  char v609;
  CFStringRef v610;
  void *v611[2];
  char v612;
  CFStringRef v613;
  void *v614[2];
  char v615;
  CFStringRef v616;
  void *v617[2];
  char v618;
  CFStringRef v619;
  CFTypeRef v620;
  uint64_t *v621;
  const __CFDictionary *v622;
  CFDictionaryRef theDicta;
  CFTypeRef cf;
  std::string v625;
  std::string v626;
  std::string v627;
  std::string v628;
  std::string v629;
  std::string valuePtr;
  std::string v631;
  std::string v632;
  std::string v633;
  std::string v634;
  _BYTE __p[40];
  _BYTE v636[32];
  std::string v637;
  std::string v638;
  int v639;
  stat buf;
  int v641;
  uint64_t v642;
  int v643;
  int v644;
  int v645;
  unint64_t v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  void *v656;
  void *v657;
  void *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  void *v663;
  void *v664;
  _BYTE *v665;
  void *v666;
  void *v667;
  void *__src;
  _BYTE *v669;
  int v670;
  int v671;
  _BYTE v672[34];
  __int16 v673;
  char *v674;
  uint64_t v675;
  std::__fs::filesystem::path::__string_view v676;
  std::__fs::filesystem::path::__string_view v677;
  std::__fs::filesystem::path::__string_view v678;

  v4 = (uint64_t *)a1;
  v675 = *MEMORY[0x1E0C80C00];
  v621 = a3;
  v622 = theDict;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  v599 = (caulk::deferred_logger ***)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  v583 = (const void **)(a1 + 24);
  if (a3)
  {
    v5 = *a3;
    if (!*a3)
      goto LABEL_7;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    buf.st_dev = 136315394;
    *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
    WORD2(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 6) = 48;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preparing a NeuralNet from topLevelDict.", (uint8_t *)&buf, 0x12u);
  }
LABEL_7:
  Value = CFDictionaryGetValue(theDict, CFSTR("NeuralNetImplementationType"));
  v7 = Value;
  v586 = v4;
  if (Value)
  {
    CFRetain(Value);
    v620 = v7;
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v620, (applesauce::CF::StringRef *)v672);
    v8 = (NSObject **)*v599;
    if (*v599)
    {
      v9 = *v8;
      if (!*v8)
        goto LABEL_22;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v12 = CFCopyDescription(*(CFTypeRef *)v672);
      applesauce::CF::details::CFString_get_value<true>(v12, (uint64_t)__p);
      if (v12)
        CFRelease(v12);
      v13 = __p;
      if (__p[23] < 0)
        v13 = *(_BYTE **)__p;
      buf.st_dev = 136315650;
      *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 57;
      HIWORD(buf.st_uid) = 2080;
      *(_QWORD *)&buf.st_gid = v13;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved implementation type (%s).", (uint8_t *)&buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
LABEL_22:
    v14 = *(const __CFString **)v672;
    if (*(_QWORD *)v672)
      CFRetain(*(CFTypeRef *)v672);
    v619 = v14;
    std::string::basic_string[abi:ne180100]<0>(v617, "BNNS");
    v15 = matchiString(&v619, (const UInt8 *)v617);
    if (v618 < 0)
    {
      operator delete(v617[0]);
      if (!v14)
        goto LABEL_29;
    }
    else if (!v14)
    {
LABEL_29:
      if (v15)
      {
        v16 = 0;
        goto LABEL_68;
      }
      v17 = *(const __CFString **)v672;
      if (*(_QWORD *)v672)
        CFRetain(*(CFTypeRef *)v672);
      v616 = v17;
      std::string::basic_string[abi:ne180100]<0>(v614, "Espresso");
      v18 = matchiString(&v616, (const UInt8 *)v614);
      if (v615 < 0)
      {
        operator delete(v614[0]);
        if (!v17)
          goto LABEL_41;
      }
      else if (!v17)
      {
LABEL_41:
        if (v18)
        {
          v16 = 1;
LABEL_68:
          *((_DWORD *)v4 + 2) = v16;
          if (*(_QWORD *)v672)
            CFRelease(*(CFTypeRef *)v672);
          goto LABEL_70;
        }
        v19 = *(const __CFString **)v672;
        if (*(_QWORD *)v672)
          CFRetain(*(CFTypeRef *)v672);
        v613 = v19;
        std::string::basic_string[abi:ne180100]<0>(v611, "EspressoV2");
        v20 = matchiString(&v613, (const UInt8 *)v611);
        if (v612 < 0)
        {
          operator delete(v611[0]);
          if (!v19)
            goto LABEL_50;
        }
        else if (!v19)
        {
LABEL_50:
          if (v20)
          {
            v16 = 2;
          }
          else
          {
            v21 = *(const __CFString **)v672;
            if (*(_QWORD *)v672)
              CFRetain(*(CFTypeRef *)v672);
            v610 = v21;
            std::string::basic_string[abi:ne180100]<0>(v608, "MIL2BNNS");
            v22 = matchiString(&v610, (const UInt8 *)v608);
            if (v609 < 0)
              operator delete(v608[0]);
            if (v21)
              CFRelease(v21);
            if (v22)
            {
              v16 = 3;
            }
            else
            {
              v23 = *(const __CFString **)v672;
              if (*(_QWORD *)v672)
                CFRetain(*(CFTypeRef *)v672);
              v607 = v23;
              std::string::basic_string[abi:ne180100]<0>(v605, "MIL2BNNS_PREPROCESSED");
              v24 = matchiString(&v607, (const UInt8 *)v605);
              if (v606 < 0)
                operator delete(v605[0]);
              if (v23)
                CFRelease(v23);
              if (!v24)
              {
                if (*v599)
                  v574 = **v599;
                else
                  v574 = 0;
                if (os_log_type_enabled(v574, OS_LOG_TYPE_ERROR))
                {
                  applesauce::CF::StringRef::to_description((applesauce::CF::StringRef *)__p, *(const void **)v672);
                  v575 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                  buf.st_dev = 136315906;
                  *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
                  WORD2(buf.st_ino) = 1024;
                  *(_DWORD *)((char *)&buf.st_ino + 6) = 85;
                  HIWORD(buf.st_uid) = 1024;
                  buf.st_gid = -66743;
                  LOWORD(buf.st_rdev) = 2080;
                  *(_QWORD *)((char *)&buf.st_rdev + 2) = v575;
                  _os_log_impl(&dword_1B5ED0000, v574, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown implementation type (%s).\"", (uint8_t *)&buf, 0x22u);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69EE218;
                exception[2] = -66743;
              }
              v16 = 4;
            }
          }
          goto LABEL_68;
        }
        CFRelease(v19);
        goto LABEL_50;
      }
      CFRelease(v17);
      goto LABEL_41;
    }
    CFRelease(v14);
    goto LABEL_29;
  }
  v620 = 0;
  *((_DWORD *)v4 + 2) = 0;
  v10 = (NSObject **)v4[2];
  if (!v10)
  {
    v11 = MEMORY[0x1E0C81028];
LABEL_37:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      buf.st_dev = 136315394;
      *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 92;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Missing dictionary NeuralNetImplementationType, set mImplType to default value.", (uint8_t *)&buf, 0x12u);
    }
LABEL_70:
    v25 = (NSObject **)*v599;
    if (*v599)
    {
      v26 = *v25;
      if (!*v25)
        goto LABEL_76;
    }
    else
    {
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *((_DWORD *)v4 + 2);
      buf.st_dev = 136315650;
      *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 95;
      HIWORD(buf.st_uid) = 1024;
      buf.st_gid = v27;
      _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mImplType set to value (%u).", (uint8_t *)&buf, 0x18u);
    }
    goto LABEL_76;
  }
  v11 = *v10;
  if (*v10)
    goto LABEL_37;
LABEL_76:
  v28 = *((_DWORD *)v4 + 2);
  switch(v28)
  {
    case 0:
      v29 = (NSObject **)*v599;
      if (*v599)
      {
        v30 = *v29;
        if (!*v29)
        {
          LODWORD(v631.__r_.__value_.__l.__data_) = 0;
          goto LABEL_331;
        }
      }
      else
      {
        v30 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 102;
        _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing BNNS NeuralNet implementation.", (uint8_t *)&buf, 0x12u);
        v29 = (NSObject **)*v599;
      }
      LODWORD(v631.__r_.__value_.__l.__data_) = 0;
      if (v29)
      {
        v45 = *v29;
        if (!*v29)
          goto LABEL_331;
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 106;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_INFO, "%25s:%-5d Loading NumLayers from topLevelDict.", (uint8_t *)&buf, 0x12u);
      }
LABEL_331:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(&v621, theDict, CFSTR("NumLayers"), &v631))
      {
        if (*v599)
          v516 = **v599;
        else
          v516 = 0;
        if (os_log_type_enabled(v516, OS_LOG_TYPE_ERROR))
        {
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 108;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = -66741;
          _os_log_impl(&dword_1B5ED0000, v516, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve NumLayers.\"", (uint8_t *)&buf, 0x18u);
        }
        v519 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v519 = &off_1E69EE218;
        v519[2] = -66741;
      }
      v139 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Quantization"));
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 8;
      if (v139)
      {
        CFNumberGetValue(v139, kCFNumberIntType, &valuePtr);
        v140 = (NSObject **)*v599;
        if (*v599)
        {
          v141 = *v140;
          if (!*v140)
            goto LABEL_448;
        }
        else
        {
          v141 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
        {
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 116;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = (gid_t)valuePtr.__r_.__value_.__l.__data_;
          v144 = "%25s:%-5d Successfully retrieved Quantization (%u).\n";
          v145 = v141;
          v146 = OS_LOG_TYPE_DEBUG;
LABEL_447:
          _os_log_impl(&dword_1B5ED0000, v145, v146, v144, (uint8_t *)&buf, 0x18u);
        }
      }
      else
      {
        v142 = (NSObject **)*v599;
        if (*v599)
        {
          v143 = *v142;
          if (!*v142)
            goto LABEL_448;
        }
        else
        {
          v143 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 120;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = 8;
          v144 = "%25s:%-5d Quantization not found, using default (%u) bit.\n";
          v145 = v143;
          v146 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_447;
        }
      }
LABEL_448:
      HIDWORD(v183) = valuePtr.__r_.__value_.__l.__data_;
      LODWORD(v183) = valuePtr.__r_.__value_.__l.__data_;
      v182 = v183 >> 3;
      if (v182 == 4)
      {
        memset(&v634, 0, sizeof(v634));
        std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v634, LODWORD(v631.__r_.__value_.__l.__data_));
        v633.__r_.__value_.__r.__words[2] = (std::string::size_type)*v599;
        v272 = v633.__r_.__value_.__r.__words[2];
        v273 = (_QWORD *)operator new();
        *v273 = v272;
        v633.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
        LODWORD(v633.__r_.__value_.__r.__words[1]) = 32;
        NeuralNetLoader<FullyConnectedLayerBNNS<int>>::loadLayers((uint64_t)&v633, theDict, (uint64_t *)&v634);
        v274 = operator new();
        memset(v672, 0, 24);
        v275 = *(_OWORD *)&v634.__r_.__value_.__l.__data_;
        *(_QWORD *)&buf.st_dev = v672;
        LOBYTE(buf.st_ino) = 0;
        if (v634.__r_.__value_.__l.__size_ != v634.__r_.__value_.__r.__words[0])
        {
          v276 = 0x1B810ECF56BE69C9
               * ((uint64_t)(v634.__r_.__value_.__l.__size_ - v634.__r_.__value_.__r.__words[0]) >> 3);
          if (v276 > 0x43B3D5AF9A723FLL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v277 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v276);
          v278 = 0;
          *(_QWORD *)v672 = v277;
          *(_QWORD *)&v672[8] = v277;
          *(_QWORD *)&v672[16] = &v277[968 * v279];
          do
          {
            FullyConnectedLayerBNNS<int>::FullyConnectedLayerBNNS((uint64_t)&v277[v278], v275 + v278);
            v278 += 968;
          }
          while ((_QWORD)v275 + v278 != *((_QWORD *)&v275 + 1));
          *(_QWORD *)&v672[8] = &v277[v278];
        }
        NeuralNetImpl::NeuralNetImpl(v274, *v599);
        *(_QWORD *)v274 = &off_1E69D6CE8;
        v280 = 0x1B810ECF56BE69C9 * ((uint64_t)(*(_QWORD *)&v672[8] - *(_QWORD *)v672) >> 3);
        *(_DWORD *)(v274 + 44) = v280;
        *(_QWORD *)(v274 + 48) = 0;
        v281 = (_QWORD *)(v274 + 48);
        *(_QWORD *)(v274 + 56) = 0;
        *(_QWORD *)(v274 + 64) = 0;
        std::vector<FullyConnectedLayerBNNS<float>>::resize(v274 + 48, v280);
        if (*(_DWORD *)(v274 + 44))
        {
          v282 = 0;
          v283 = 0;
          v592 = v274;
          v602 = (_QWORD *)(v274 + 48);
          while (1)
          {
            v597 = v283;
            FullyConnectedLayerBNNS<int>::FullyConnectedLayerBNNS((uint64_t)&buf, *(_QWORD *)v672 + v282);
            v284 = v671;
            v285 = *v281 + v282;
            *(_DWORD *)(v285 + 964) = v671;
            st_ino = buf.st_ino;
            v287 = v646;
            if (v671 == 1)
              v288 = v646;
            else
              v288 = 0;
            v289 = v281;
            if (v671 == 1)
              v290 = 4 * v646;
            else
              v290 = v646;
            LODWORD(v632.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::resize(v285 + 792, buf.st_ino, &v632);
            v291 = v288 + st_ino;
            v292 = (std::vector<int> *)(*v289 + v282 + 912);
            LODWORD(v632.__r_.__value_.__l.__data_) = 0;
            std::vector<int>::resize(v292, v288 + st_ino, (std::vector<int>::const_reference)&v632);
            v293 = *v289 + v282 + 816;
            LODWORD(v632.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::resize(v293, v287, &v632);
            if (v284 == 1)
            {
              v294 = *v602 + v282 + 840;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v294, v290, &v632);
              v295 = *v602 + v282 + 864;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v295, v287, &v632);
            }
            v296 = *v602;
            v297 = *v602 + v282;
            *(_DWORD *)(v297 + 4) = 0x10000;
            *(_QWORD *)(v297 + 8) = st_ino;
            *(_QWORD *)(v297 + 72) = 1;
            *(_DWORD *)(v297 + 144) = v641;
            *(_QWORD *)(v297 + 164) = v642;
            *(_DWORD *)(v297 + 356) = 0x10000;
            *(_QWORD *)(v297 + 360) = v287;
            *(_QWORD *)(v297 + 424) = 1;
            *(_DWORD *)(v297 + 496) = v647;
            *(_DWORD *)(v297 + 516) = v648;
            *(_DWORD *)(v297 + 520) = v649;
            v298 = v291 * v290;
            if (v291 * v290 != (v669 - (_BYTE *)__src) >> 2)
            {
              v463 = *(NSObject ***)(v592 + 8);
              if (v463)
                v464 = *v463;
              else
                v464 = 0;
              v496 = -66743;
              if (os_log_type_enabled(v464, OS_LOG_TYPE_ERROR))
              {
                v497 = (uint64_t)(*(_QWORD *)(v296 + 968 * (_QWORD)v597 + 944)
                               - *(_QWORD *)(v296 + 968 * (_QWORD)v597 + 936)) >> 2;
                *(_DWORD *)__p = 136316418;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 213;
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = -66743;
                *(_WORD *)&__p[24] = 1024;
                *(_DWORD *)&__p[26] = (_DWORD)v597;
                *(_WORD *)&__p[30] = 2048;
                *(_QWORD *)&__p[32] = v497;
                *(_WORD *)v636 = 2048;
                *(_QWORD *)&v636[2] = v298;
                v498 = "%25s:%-5d EXCEPTION (%d) [layer.mWeightsQuantized.size() != weightsNumberOfCoefficients is false]"
                       ": \"NeuralNetBNNS: Layer (%u), number of weights (%lu) is not matching the required number of weights (%lu).\"";
                v499 = v464;
                goto LABEL_1035;
              }
              goto LABEL_1058;
            }
            if ((void **)(v297 + 936) != &__src)
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v297 + 936), (char *)__src, (uint64_t)v669, v291 * v290);
              v296 = *v602;
            }
            v299 = v296 + v282;
            *(_DWORD *)(v299 + 180) = 0x20000;
            *(_QWORD *)(v299 + 184) = v291;
            *(_QWORD *)(v299 + 192) = v290;
            *(_QWORD *)(v299 + 248) = 1;
            *(_QWORD *)(v299 + 256) = v291;
            *(_DWORD *)(v299 + 320) = v643;
            *(_DWORD *)(v299 + 340) = v644;
            *(_DWORD *)(v299 + 344) = v645;
            *(_QWORD *)(v299 + 312) = *(_QWORD *)(v296 + v282 + 936);
            if (v290 != (v665 - (_BYTE *)v664) >> 2)
              break;
            if ((void **)(v299 + 888) != &v664)
            {
              std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v299 + 888), (char *)v664, (uint64_t)v665, v290);
              v296 = *v602;
            }
            v300 = v296 + v282;
            *(_DWORD *)(v300 + 532) = 0x10000;
            v301 = *(_QWORD *)(v296 + v282 + 888);
            *(_QWORD *)(v300 + 536) = (*(_QWORD *)(v296 + v282 + 896) - v301) >> 2;
            *(_QWORD *)(v300 + 600) = 1;
            *(_DWORD *)(v300 + 672) = v650;
            *(_DWORD *)(v300 + 692) = v651;
            *(_DWORD *)(v300 + 696) = v652;
            *(_QWORD *)(v300 + 664) = v301;
            *(_DWORD *)(v300 + 704) = v653;
            *(_DWORD *)(v300 + 960) = v670;
            *(_DWORD *)(v300 + 708) = v654;
            *(_DWORD *)(v300 + 712) = v655;
            *(_OWORD *)(v300 + 752) = 0u;
            *(_OWORD *)(v300 + 768) = 0u;
            v302 = *v602 + v282;
            *(_DWORD *)(v302 + 752) = 1;
            *(_QWORD *)(v302 + 760) = 1;
            v303 = *(float32x2_t *)(v302 + 164);
            v304 = *(float32x2_t *)(v302 + 340);
            v305 = *(_DWORD *)(v302 + 704);
            *(_QWORD *)(v302 + 164) = 1065353216;
            *(_QWORD *)(v302 + 340) = vmul_f32(v303, v304).u32[0];
            *(_DWORD *)(v302 + 704) = 0;
            if (v284 == 1)
            {
              *(_QWORD *)(v302 + 8) = v291;
              *(_QWORD *)(v302 + 360) = v290;
            }
            LayerFullyConnected = BNNSFilterCreateLayerFullyConnected((const BNNSLayerParametersFullyConnected *)v302, (const BNNSFilterParameters *)(v302 + 752));
            v307 = *v602;
            *(_QWORD *)(*v602 + v282 + 784) = LayerFullyConnected;
            if (!LayerFullyConnected)
            {
              v479 = *(NSObject ***)(v592 + 8);
              if (v479)
                v480 = *v479;
              else
                v480 = 0;
              v496 = -10875;
              if (os_log_type_enabled(v480, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__p = 136315906;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 278;
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = -10875;
                *(_WORD *)&__p[24] = 1024;
                *(_DWORD *)&__p[26] = (_DWORD)v597;
                v498 = "%25s:%-5d EXCEPTION (%d) [mDNNLayer[layerIdx].mFilter == nullptr is false]: \"NeuralNetBNNS: Laye"
                       "r (%u), filter not created.\"";
                v499 = v480;
                v507 = 30;
                goto LABEL_1057;
              }
              goto LABEL_1058;
            }
            v281 = v602;
            if (v284 == 1)
            {
              v308 = v307 + v282;
              *(_QWORD *)(v308 + 8) = st_ino;
              *(_QWORD *)(v308 + 360) = v287;
            }
            v309 = v307 + v282;
            *(float32x2_t *)(v309 + 164) = v303;
            *(float32x2_t *)(v309 + 340) = v304;
            *(_DWORD *)(v309 + 704) = v305;
            if (__src)
            {
              v669 = __src;
              operator delete(__src);
            }
            v274 = v592;
            if (v666)
            {
              v667 = v666;
              operator delete(v666);
            }
            if (v664)
            {
              v665 = v664;
              operator delete(v664);
            }
            if (v662)
            {
              v663 = v662;
              operator delete(v662);
            }
            if (v660)
            {
              v661 = v660;
              operator delete(v660);
            }
            if (v658)
            {
              v659 = v658;
              operator delete(v658);
            }
            if (v656)
            {
              v657 = v656;
              operator delete(v656);
            }
            v283 = (char *)v597 + 1;
            v282 += 968;
            if ((unint64_t)v597 + 1 >= *(unsigned int *)(v592 + 44))
              goto LABEL_605;
          }
          v469 = *(NSObject ***)(v592 + 8);
          if (v469)
            v470 = *v469;
          else
            v470 = 0;
          v496 = -66743;
          if (os_log_type_enabled(v470, OS_LOG_TYPE_ERROR))
          {
            v506 = (uint64_t)(*(_QWORD *)(v296 + 968 * (_QWORD)v597 + 896)
                           - *(_QWORD *)(v296 + 968 * (_QWORD)v597 + 888)) >> 2;
            *(_DWORD *)__p = 136316418;
            *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 230;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = -66743;
            *(_WORD *)&__p[24] = 1024;
            *(_DWORD *)&__p[26] = (_DWORD)v597;
            *(_WORD *)&__p[30] = 2048;
            *(_QWORD *)&__p[32] = v506;
            *(_WORD *)v636 = 2048;
            *(_QWORD *)&v636[2] = v290;
            v498 = "%25s:%-5d EXCEPTION (%d) [layer.mBiasVector.size() != weightsSizeOutput is false]: \"NeuralNetBNNS: L"
                   "ayer (%u), bias size (%lu) is not matching the weight output vector size (%lu).\"";
            v499 = v470;
LABEL_1035:
            v507 = 50;
LABEL_1057:
            _os_log_impl(&dword_1B5ED0000, v499, OS_LOG_TYPE_ERROR, v498, __p, v507);
          }
LABEL_1058:
          v514 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v514 = &off_1E69EE218;
          v514[2] = v496;
        }
LABEL_605:
        *(_DWORD *)(v274 + 40) = 32;
        *(_QWORD *)&buf.st_dev = v672;
        std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        v310 = *v4;
        *v4 = v274;
        if (v310)
          (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
        if (v633.__r_.__value_.__r.__words[0])
          MEMORY[0x1BCC95CEC](v633.__r_.__value_.__r.__words[0], 0x60C4044C4A2DFLL);
        goto LABEL_681;
      }
      if (v182 != 2)
      {
        if (v182)
        {
          memset(&v634, 0, sizeof(v634));
          std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v634, LODWORD(v631.__r_.__value_.__l.__data_));
          v633.__r_.__value_.__r.__words[2] = (std::string::size_type)*v599;
          v311 = v633.__r_.__value_.__r.__words[2];
          v312 = (_QWORD *)operator new();
          *v312 = v311;
          v633.__r_.__value_.__r.__words[0] = (std::string::size_type)v312;
          LODWORD(v633.__r_.__value_.__r.__words[1]) = 8;
          NeuralNetLoader<FullyConnectedLayerBNNS<signed char>>::loadLayers((uint64_t)&v633, theDict, (uint64_t *)&v634);
          v313 = operator new();
          memset(v672, 0, 24);
          v314 = *(_OWORD *)&v634.__r_.__value_.__l.__data_;
          *(_QWORD *)&buf.st_dev = v672;
          LOBYTE(buf.st_ino) = 0;
          if (v634.__r_.__value_.__l.__size_ != v634.__r_.__value_.__r.__words[0])
          {
            v315 = 0x1B810ECF56BE69C9
                 * ((uint64_t)(v634.__r_.__value_.__l.__size_ - v634.__r_.__value_.__r.__words[0]) >> 3);
            if (v315 > 0x43B3D5AF9A723FLL)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v316 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v315);
            v317 = 0;
            *(_QWORD *)v672 = v316;
            *(_QWORD *)&v672[8] = v316;
            *(_QWORD *)&v672[16] = &v316[968 * v318];
            do
            {
              FullyConnectedLayerBNNS<signed char>::FullyConnectedLayerBNNS((uint64_t)&v316[v317], v314 + v317);
              v317 += 968;
            }
            while ((_QWORD)v314 + v317 != *((_QWORD *)&v314 + 1));
            *(_QWORD *)&v672[8] = &v316[v317];
          }
          NeuralNetImpl::NeuralNetImpl(v313, *v599);
          *(_QWORD *)v313 = &off_1E69D6C28;
          v319 = 0x1B810ECF56BE69C9 * ((uint64_t)(*(_QWORD *)&v672[8] - *(_QWORD *)v672) >> 3);
          *(_DWORD *)(v313 + 44) = v319;
          *(_QWORD *)(v313 + 48) = 0;
          *(_QWORD *)(v313 + 56) = 0;
          *(_QWORD *)(v313 + 64) = 0;
          v603 = (uint64_t *)(v313 + 48);
          std::vector<FullyConnectedLayerBNNS<float>>::resize(v313 + 48, v319);
          if (*(_DWORD *)(v313 + 44))
          {
            v320 = 0;
            v321 = 0;
            v582 = v313;
            while (1)
            {
              v585 = v321;
              FullyConnectedLayerBNNS<signed char>::FullyConnectedLayerBNNS((uint64_t)&buf, *(_QWORD *)v672 + v320);
              v322 = *v603 + v320;
              v598 = v671;
              *(_DWORD *)(v322 + 964) = v671;
              v323 = v646;
              if (v671 == 1)
                v324 = v646;
              else
                v324 = 0;
              if (v671 == 1)
                v325 = 4 * v646;
              else
                v325 = v646;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              v589 = buf.st_ino;
              std::vector<float>::resize(v322 + 792, buf.st_ino, &v632);
              v326 = *v603;
              v327 = *v603 + v320;
              v632.__r_.__value_.__s.__data_[0] = 0;
              v328 = *(_QWORD *)(v327 + 912);
              v329 = *(_QWORD *)(v327 + 920) - v328;
              v593 = v324 + v589;
              if (v324 + v589 <= v329)
              {
                if (v324 + v589 < v329)
                  *(_QWORD *)(v327 + 920) = v328 + v593;
              }
              else
              {
                std::vector<signed char>::__append((_QWORD *)(v327 + 912), v324 + v589 - v329, &v632);
                v326 = *v603;
              }
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v326 + v320 + 816, v323, &v632);
              if (v598 == 1)
              {
                v330 = *v603 + v320 + 840;
                LODWORD(v632.__r_.__value_.__l.__data_) = 0;
                std::vector<float>::resize(v330, v325, &v632);
                v331 = *v603 + v320 + 864;
                LODWORD(v632.__r_.__value_.__l.__data_) = 0;
                std::vector<float>::resize(v331, v323, &v632);
              }
              v332 = *v603;
              v333 = *v603 + v320;
              *(_DWORD *)(v333 + 4) = 0x10000;
              *(_QWORD *)(v333 + 8) = v589;
              *(_QWORD *)(v333 + 72) = 1;
              *(_DWORD *)(v333 + 144) = v641;
              *(_QWORD *)(v333 + 164) = v642;
              *(_DWORD *)(v333 + 356) = 0x10000;
              *(_QWORD *)(v333 + 360) = v323;
              *(_QWORD *)(v333 + 424) = 1;
              *(_DWORD *)(v333 + 496) = v647;
              *(_DWORD *)(v333 + 516) = v648;
              *(_DWORD *)(v333 + 520) = v649;
              v334 = v593 * v325;
              v335 = v669;
              v336 = __src;
              if (v669 - (_BYTE *)__src != v593 * v325)
              {
                v459 = *(NSObject ***)(v313 + 8);
                if (v459)
                  v460 = *v459;
                else
                  v460 = 0;
                v488 = -66743;
                if (os_log_type_enabled(v460, OS_LOG_TYPE_ERROR))
                {
                  v489 = *(_QWORD *)(v332 + 968 * v585 + 944) - *(_QWORD *)(v332 + 968 * v585 + 936);
                  *(_DWORD *)__p = 136316418;
                  *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 213;
                  *(_WORD *)&__p[18] = 1024;
                  *(_DWORD *)&__p[20] = -66743;
                  *(_WORD *)&__p[24] = 1024;
                  *(_DWORD *)&__p[26] = v585;
                  *(_WORD *)&__p[30] = 2048;
                  *(_QWORD *)&__p[32] = v489;
                  *(_WORD *)v636 = 2048;
                  *(_QWORD *)&v636[2] = v334;
                  v490 = "%25s:%-5d EXCEPTION (%d) [layer.mWeightsQuantized.size() != weightsNumberOfCoefficients is fals"
                         "e]: \"NeuralNetBNNS: Layer (%u), number of weights (%lu) is not matching the required number of"
                         " weights (%lu).\"";
                  v491 = v460;
                  goto LABEL_1031;
                }
                goto LABEL_1048;
              }
              v337 = (char **)(v333 + 936);
              if ((void **)(v333 + 936) != &__src)
              {
                v338 = v332 + v320;
                v339 = *(_QWORD *)(v332 + v320 + 952);
                v340 = *v337;
                if (v339 - (unint64_t)*v337 >= v334)
                {
                  v344 = *(_BYTE **)(v338 + 944);
                  v345 = v344 - v340;
                  if (v344 - v340 >= v334)
                  {
                    if (v669 != __src)
                      memmove(v340, __src, v593 * v325);
                    v348 = &v340[v334];
                  }
                  else
                  {
                    if (v344 != v340)
                    {
                      memmove(v340, __src, v344 - v340);
                      v340 = *(char **)(v338 + 944);
                    }
                    v346 = &v336[v345];
                    v347 = v335 - &v336[v345];
                    if (v347)
                      memmove(v340, v346, v347);
                    v348 = &v340[v347];
                  }
                  *(_QWORD *)(v338 + 944) = v348;
                  v313 = v582;
                }
                else
                {
                  if (v340)
                  {
                    *(_QWORD *)(v332 + v320 + 944) = v340;
                    operator delete(v340);
                    v339 = 0;
                    *v337 = 0;
                    v337[1] = 0;
                    v337[2] = 0;
                  }
                  v313 = v582;
                  if ((v334 & 0x8000000000000000) != 0)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  v341 = 2 * v339;
                  if (2 * v339 <= v334)
                    v341 = v593 * v325;
                  if (v339 >= 0x3FFFFFFFFFFFFFFFLL)
                    v342 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v342 = v341;
                  std::vector<signed char>::__vallocate[abi:ne180100](v337, v342);
                  v343 = *(_QWORD *)(v332 + v320 + 944);
                  if (v335 != v336)
                    memmove(*(void **)(v332 + v320 + 944), v336, v334);
                  *(_QWORD *)(v332 + v320 + 944) = v343 + v334;
                }
                v332 = *v603;
                v4 = v586;
              }
              v349 = v332 + v320;
              *(_DWORD *)(v349 + 180) = 0x20000;
              *(_QWORD *)(v349 + 184) = v593;
              *(_QWORD *)(v349 + 192) = v325;
              *(_QWORD *)(v349 + 248) = 1;
              *(_QWORD *)(v349 + 256) = v593;
              *(_DWORD *)(v349 + 320) = v643;
              *(_DWORD *)(v349 + 340) = v644;
              *(_DWORD *)(v349 + 344) = v645;
              *(_QWORD *)(v349 + 312) = *(_QWORD *)(v332 + v320 + 936);
              if (v325 != (v665 - (_BYTE *)v664) >> 2)
                break;
              if ((void **)(v349 + 888) != &v664)
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v349 + 888), (char *)v664, (uint64_t)v665, v325);
                v332 = *v603;
              }
              v350 = v332 + v320;
              *(_DWORD *)(v350 + 532) = 0x10000;
              v351 = *(_QWORD *)(v332 + v320 + 888);
              *(_QWORD *)(v350 + 536) = (*(_QWORD *)(v332 + v320 + 896) - v351) >> 2;
              *(_QWORD *)(v350 + 600) = 1;
              *(_DWORD *)(v350 + 672) = v650;
              *(_DWORD *)(v350 + 692) = v651;
              *(_DWORD *)(v350 + 696) = v652;
              *(_QWORD *)(v350 + 664) = v351;
              *(_DWORD *)(v350 + 704) = v653;
              *(_DWORD *)(v350 + 960) = v670;
              *(_DWORD *)(v350 + 708) = v654;
              *(_DWORD *)(v350 + 712) = v655;
              *(_OWORD *)(v350 + 752) = 0u;
              *(_OWORD *)(v350 + 768) = 0u;
              v352 = *v603 + v320;
              *(_DWORD *)(v352 + 752) = 1;
              *(_QWORD *)(v352 + 760) = 1;
              v353 = *(float32x2_t *)(v352 + 164);
              v354 = *(float32x2_t *)(v352 + 340);
              v355 = *(_DWORD *)(v352 + 704);
              *(_QWORD *)(v352 + 164) = 1065353216;
              *(_QWORD *)(v352 + 340) = vmul_f32(v353, v354).u32[0];
              *(_DWORD *)(v352 + 704) = 0;
              if (v598 == 1)
              {
                *(_QWORD *)(v352 + 8) = v593;
                *(_QWORD *)(v352 + 360) = v325;
              }
              v356 = BNNSFilterCreateLayerFullyConnected((const BNNSLayerParametersFullyConnected *)v352, (const BNNSFilterParameters *)(v352 + 752));
              v357 = *v603;
              *(_QWORD *)(*v603 + v320 + 784) = v356;
              if (!v356)
              {
                v475 = *(NSObject ***)(v313 + 8);
                if (v475)
                  v476 = *v475;
                else
                  v476 = 0;
                v488 = -10875;
                if (os_log_type_enabled(v476, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__p = 136315906;
                  *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 278;
                  *(_WORD *)&__p[18] = 1024;
                  *(_DWORD *)&__p[20] = -10875;
                  *(_WORD *)&__p[24] = 1024;
                  *(_DWORD *)&__p[26] = v585;
                  v490 = "%25s:%-5d EXCEPTION (%d) [mDNNLayer[layerIdx].mFilter == nullptr is false]: \"NeuralNetBNNS: La"
                         "yer (%u), filter not created.\"";
                  v491 = v476;
                  v505 = 30;
                  goto LABEL_1047;
                }
                goto LABEL_1048;
              }
              if (v598 == 1)
              {
                v358 = v357 + v320;
                *(_QWORD *)(v358 + 8) = v589;
                *(_QWORD *)(v358 + 360) = v323;
              }
              v359 = v357 + v320;
              *(float32x2_t *)(v359 + 164) = v353;
              *(float32x2_t *)(v359 + 340) = v354;
              *(_DWORD *)(v359 + 704) = v355;
              if (__src)
              {
                v669 = __src;
                operator delete(__src);
              }
              if (v666)
              {
                v667 = v666;
                operator delete(v666);
              }
              if (v664)
              {
                v665 = v664;
                operator delete(v664);
              }
              if (v662)
              {
                v663 = v662;
                operator delete(v662);
              }
              if (v660)
              {
                v661 = v660;
                operator delete(v660);
              }
              if (v658)
              {
                v659 = v658;
                operator delete(v658);
              }
              if (v656)
              {
                v657 = v656;
                operator delete(v656);
              }
              v321 = v585 + 1;
              v320 += 968;
              if (v585 + 1 >= (unint64_t)*(unsigned int *)(v313 + 44))
                goto LABEL_677;
            }
            v467 = *(NSObject ***)(v313 + 8);
            if (v467)
              v468 = *v467;
            else
              v468 = 0;
            v488 = -66743;
            if (os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
            {
              v504 = (uint64_t)(*(_QWORD *)(v332 + 968 * v585 + 896) - *(_QWORD *)(v332 + 968 * v585 + 888)) >> 2;
              *(_DWORD *)__p = 136316418;
              *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 230;
              *(_WORD *)&__p[18] = 1024;
              *(_DWORD *)&__p[20] = -66743;
              *(_WORD *)&__p[24] = 1024;
              *(_DWORD *)&__p[26] = v585;
              *(_WORD *)&__p[30] = 2048;
              *(_QWORD *)&__p[32] = v504;
              *(_WORD *)v636 = 2048;
              *(_QWORD *)&v636[2] = v325;
              v490 = "%25s:%-5d EXCEPTION (%d) [layer.mBiasVector.size() != weightsSizeOutput is false]: \"NeuralNetBNNS:"
                     " Layer (%u), bias size (%lu) is not matching the weight output vector size (%lu).\"";
              v491 = v468;
LABEL_1031:
              v505 = 50;
LABEL_1047:
              _os_log_impl(&dword_1B5ED0000, v491, OS_LOG_TYPE_ERROR, v490, __p, v505);
            }
LABEL_1048:
            v512 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v512 = &off_1E69EE218;
            v512[2] = v488;
          }
LABEL_677:
          *(_DWORD *)(v313 + 40) = 8;
          *(_QWORD *)&buf.st_dev = v672;
          std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          v360 = *v4;
          *v4 = v313;
          if (v360)
            (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
          if (v633.__r_.__value_.__r.__words[0])
            MEMORY[0x1BCC95CEC](v633.__r_.__value_.__r.__words[0], 0x60C4044C4A2DFLL);
        }
        else
        {
          memset(&v634, 0, sizeof(v634));
          std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v634, LODWORD(v631.__r_.__value_.__l.__data_));
          v633.__r_.__value_.__r.__words[2] = (std::string::size_type)*v599;
          v184 = v633.__r_.__value_.__r.__words[2];
          v185 = (_QWORD *)operator new();
          *v185 = v184;
          v633.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
          LODWORD(v633.__r_.__value_.__r.__words[1]) = 0;
          NeuralNetLoader<FullyConnectedLayerBNNS<float>>::loadLayers((uint64_t)&v633, theDict, (uint64_t *)&v634);
          v186 = operator new();
          memset(v672, 0, 24);
          v187 = *(_OWORD *)&v634.__r_.__value_.__l.__data_;
          *(_QWORD *)&buf.st_dev = v672;
          LOBYTE(buf.st_ino) = 0;
          if (v634.__r_.__value_.__l.__size_ != v634.__r_.__value_.__r.__words[0])
          {
            v188 = 0x1B810ECF56BE69C9
                 * ((uint64_t)(v634.__r_.__value_.__l.__size_ - v634.__r_.__value_.__r.__words[0]) >> 3);
            if (v188 > 0x43B3D5AF9A723FLL)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v188);
            v190 = 0;
            *(_QWORD *)v672 = v189;
            *(_QWORD *)&v672[8] = v189;
            *(_QWORD *)&v672[16] = &v189[968 * v191];
            do
            {
              FullyConnectedLayerBNNS<float>::FullyConnectedLayerBNNS((uint64_t)&v189[v190], v187 + v190);
              v190 += 968;
            }
            while ((_QWORD)v187 + v190 != *((_QWORD *)&v187 + 1));
            *(_QWORD *)&v672[8] = &v189[v190];
          }
          NeuralNetImpl::NeuralNetImpl(v186, *v599);
          *(_QWORD *)v186 = &off_1E69D6D48;
          v192 = 0x1B810ECF56BE69C9 * ((uint64_t)(*(_QWORD *)&v672[8] - *(_QWORD *)v672) >> 3);
          *(_DWORD *)(v186 + 44) = v192;
          *(_QWORD *)(v186 + 48) = 0;
          v193 = (_QWORD *)(v186 + 48);
          *(_QWORD *)(v186 + 56) = 0;
          *(_QWORD *)(v186 + 64) = 0;
          std::vector<FullyConnectedLayerBNNS<float>>::resize(v186 + 48, v192);
          if (*(_DWORD *)(v186 + 44))
          {
            v194 = 0;
            v195 = 0;
            v590 = v186;
            v600 = (_QWORD *)(v186 + 48);
            while (1)
            {
              v595 = v195;
              FullyConnectedLayerBNNS<float>::FullyConnectedLayerBNNS((uint64_t)&buf, *(_QWORD *)v672 + v194);
              v196 = v671;
              v197 = *v193 + v194;
              *(_DWORD *)(v197 + 964) = v671;
              v198 = buf.st_ino;
              v199 = v646;
              if (v671 == 1)
                v200 = v646;
              else
                v200 = 0;
              v201 = v193;
              if (v671 == 1)
                v202 = 4 * v646;
              else
                v202 = v646;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v197 + 792, buf.st_ino, &v632);
              v203 = v200 + v198;
              v204 = *v201 + v194 + 912;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v204, v200 + v198, &v632);
              v205 = *v201 + v194 + 816;
              LODWORD(v632.__r_.__value_.__l.__data_) = 0;
              std::vector<float>::resize(v205, v199, &v632);
              if (v196 == 1)
              {
                v206 = *v600 + v194 + 840;
                LODWORD(v632.__r_.__value_.__l.__data_) = 0;
                std::vector<float>::resize(v206, v202, &v632);
                v207 = *v600 + v194 + 864;
                LODWORD(v632.__r_.__value_.__l.__data_) = 0;
                std::vector<float>::resize(v207, v199, &v632);
              }
              v208 = *v600;
              v209 = *v600 + v194;
              *(_DWORD *)(v209 + 4) = 0x10000;
              *(_QWORD *)(v209 + 8) = v198;
              *(_QWORD *)(v209 + 72) = 1;
              *(_DWORD *)(v209 + 144) = v641;
              *(_QWORD *)(v209 + 164) = v642;
              *(_DWORD *)(v209 + 356) = 0x10000;
              *(_QWORD *)(v209 + 360) = v199;
              *(_QWORD *)(v209 + 424) = 1;
              *(_DWORD *)(v209 + 496) = v647;
              *(_DWORD *)(v209 + 516) = v648;
              *(_DWORD *)(v209 + 520) = v649;
              v210 = v203 * v202;
              if (v203 * v202 != (v669 - (_BYTE *)__src) >> 2)
              {
                v465 = *(NSObject ***)(v590 + 8);
                if (v465)
                  v466 = *v465;
                else
                  v466 = 0;
                v500 = -66743;
                if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
                {
                  v501 = (uint64_t)(*(_QWORD *)(v208 + 968 * (_QWORD)v595 + 944)
                                 - *(_QWORD *)(v208 + 968 * (_QWORD)v595 + 936)) >> 2;
                  *(_DWORD *)__p = 136316418;
                  *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 213;
                  *(_WORD *)&__p[18] = 1024;
                  *(_DWORD *)&__p[20] = -66743;
                  *(_WORD *)&__p[24] = 1024;
                  *(_DWORD *)&__p[26] = (_DWORD)v595;
                  *(_WORD *)&__p[30] = 2048;
                  *(_QWORD *)&__p[32] = v501;
                  *(_WORD *)v636 = 2048;
                  *(_QWORD *)&v636[2] = v210;
                  v502 = "%25s:%-5d EXCEPTION (%d) [layer.mWeightsQuantized.size() != weightsNumberOfCoefficients is fals"
                         "e]: \"NeuralNetBNNS: Layer (%u), number of weights (%lu) is not matching the required number of"
                         " weights (%lu).\"";
                  v503 = v466;
                  goto LABEL_1043;
                }
                goto LABEL_1063;
              }
              if ((void **)(v209 + 936) != &__src)
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v209 + 936), (char *)__src, (uint64_t)v669, v203 * v202);
                v208 = *v600;
              }
              v211 = v208 + v194;
              *(_DWORD *)(v211 + 180) = 0x20000;
              *(_QWORD *)(v211 + 184) = v203;
              *(_QWORD *)(v211 + 192) = v202;
              *(_QWORD *)(v211 + 248) = 1;
              *(_QWORD *)(v211 + 256) = v203;
              *(_DWORD *)(v211 + 320) = v643;
              *(_DWORD *)(v211 + 340) = v644;
              *(_DWORD *)(v211 + 344) = v645;
              *(_QWORD *)(v211 + 312) = *(_QWORD *)(v208 + v194 + 936);
              if (v202 != (v665 - (_BYTE *)v664) >> 2)
                break;
              if ((void **)(v211 + 888) != &v664)
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v211 + 888), (char *)v664, (uint64_t)v665, v202);
                v208 = *v600;
              }
              v212 = v208 + v194;
              *(_DWORD *)(v212 + 532) = 0x10000;
              v213 = *(_QWORD *)(v208 + v194 + 888);
              *(_QWORD *)(v212 + 536) = (*(_QWORD *)(v208 + v194 + 896) - v213) >> 2;
              *(_QWORD *)(v212 + 600) = 1;
              *(_DWORD *)(v212 + 672) = v650;
              *(_DWORD *)(v212 + 692) = v651;
              *(_DWORD *)(v212 + 696) = v652;
              *(_QWORD *)(v212 + 664) = v213;
              *(_DWORD *)(v212 + 704) = v653;
              *(_DWORD *)(v212 + 960) = v670;
              *(_DWORD *)(v212 + 708) = v654;
              *(_DWORD *)(v212 + 712) = v655;
              *(_OWORD *)(v212 + 752) = 0u;
              *(_OWORD *)(v212 + 768) = 0u;
              v214 = *v600 + v194;
              *(_DWORD *)(v214 + 752) = 1;
              *(_QWORD *)(v214 + 760) = 1;
              v215 = *(float32x2_t *)(v214 + 164);
              v216 = *(float32x2_t *)(v214 + 340);
              v217 = *(_DWORD *)(v214 + 704);
              *(_QWORD *)(v214 + 164) = 1065353216;
              *(_QWORD *)(v214 + 340) = vmul_f32(v215, v216).u32[0];
              *(_DWORD *)(v214 + 704) = 0;
              if (v196 == 1)
              {
                *(_QWORD *)(v214 + 8) = v203;
                *(_QWORD *)(v214 + 360) = v202;
              }
              v218 = BNNSFilterCreateLayerFullyConnected((const BNNSLayerParametersFullyConnected *)v214, (const BNNSFilterParameters *)(v214 + 752));
              v219 = *v600;
              *(_QWORD *)(*v600 + v194 + 784) = v218;
              if (!v218)
              {
                v481 = *(NSObject ***)(v590 + 8);
                if (v481)
                  v482 = *v481;
                else
                  v482 = 0;
                v500 = -10875;
                if (os_log_type_enabled(v482, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__p = 136315906;
                  *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 278;
                  *(_WORD *)&__p[18] = 1024;
                  *(_DWORD *)&__p[20] = -10875;
                  *(_WORD *)&__p[24] = 1024;
                  *(_DWORD *)&__p[26] = (_DWORD)v595;
                  v502 = "%25s:%-5d EXCEPTION (%d) [mDNNLayer[layerIdx].mFilter == nullptr is false]: \"NeuralNetBNNS: La"
                         "yer (%u), filter not created.\"";
                  v503 = v482;
                  v511 = 30;
                  goto LABEL_1062;
                }
                goto LABEL_1063;
              }
              v193 = v600;
              if (v196 == 1)
              {
                v220 = v219 + v194;
                *(_QWORD *)(v220 + 8) = v198;
                *(_QWORD *)(v220 + 360) = v199;
              }
              v221 = v219 + v194;
              *(float32x2_t *)(v221 + 164) = v215;
              *(float32x2_t *)(v221 + 340) = v216;
              *(_DWORD *)(v221 + 704) = v217;
              if (__src)
              {
                v669 = __src;
                operator delete(__src);
              }
              v186 = v590;
              if (v666)
              {
                v667 = v666;
                operator delete(v666);
              }
              if (v664)
              {
                v665 = v664;
                operator delete(v664);
              }
              if (v662)
              {
                v663 = v662;
                operator delete(v662);
              }
              if (v660)
              {
                v661 = v660;
                operator delete(v660);
              }
              if (v658)
              {
                v659 = v658;
                operator delete(v658);
              }
              if (v656)
              {
                v657 = v656;
                operator delete(v656);
              }
              v195 = (char *)v595 + 1;
              v194 += 968;
              if ((unint64_t)v595 + 1 >= *(unsigned int *)(v590 + 44))
                goto LABEL_492;
            }
            v473 = *(NSObject ***)(v590 + 8);
            if (v473)
              v474 = *v473;
            else
              v474 = 0;
            v500 = -66743;
            if (os_log_type_enabled(v474, OS_LOG_TYPE_ERROR))
            {
              v510 = (uint64_t)(*(_QWORD *)(v208 + 968 * (_QWORD)v595 + 896)
                             - *(_QWORD *)(v208 + 968 * (_QWORD)v595 + 888)) >> 2;
              *(_DWORD *)__p = 136316418;
              *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 230;
              *(_WORD *)&__p[18] = 1024;
              *(_DWORD *)&__p[20] = -66743;
              *(_WORD *)&__p[24] = 1024;
              *(_DWORD *)&__p[26] = (_DWORD)v595;
              *(_WORD *)&__p[30] = 2048;
              *(_QWORD *)&__p[32] = v510;
              *(_WORD *)v636 = 2048;
              *(_QWORD *)&v636[2] = v202;
              v502 = "%25s:%-5d EXCEPTION (%d) [layer.mBiasVector.size() != weightsSizeOutput is false]: \"NeuralNetBNNS:"
                     " Layer (%u), bias size (%lu) is not matching the weight output vector size (%lu).\"";
              v503 = v474;
LABEL_1043:
              v511 = 50;
LABEL_1062:
              _os_log_impl(&dword_1B5ED0000, v503, OS_LOG_TYPE_ERROR, v502, __p, v511);
            }
LABEL_1063:
            v515 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v515 = &off_1E69EE218;
            v515[2] = v500;
          }
LABEL_492:
          *(_DWORD *)(v186 + 40) = 0;
          *(_QWORD *)&buf.st_dev = v672;
          std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          v222 = *v4;
          *v4 = v186;
          if (v222)
            (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
          if (v633.__r_.__value_.__r.__words[0])
            MEMORY[0x1BCC95CEC](v633.__r_.__value_.__r.__words[0], 0x60C4044C4A2DFLL);
        }
        goto LABEL_681;
      }
      memset(&v634, 0, sizeof(v634));
      std::vector<FullyConnectedLayerBNNS<float>>::resize((uint64_t)&v634, LODWORD(v631.__r_.__value_.__l.__data_));
      v633.__r_.__value_.__r.__words[2] = (std::string::size_type)*v599;
      v223 = v633.__r_.__value_.__r.__words[2];
      v224 = (_QWORD *)operator new();
      *v224 = v223;
      v633.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
      LODWORD(v633.__r_.__value_.__r.__words[1]) = 16;
      NeuralNetLoader<FullyConnectedLayerBNNS<short>>::loadLayers((uint64_t)&v633, theDict, (uint64_t *)&v634);
      v225 = operator new();
      memset(v672, 0, 24);
      v226 = *(_OWORD *)&v634.__r_.__value_.__l.__data_;
      *(_QWORD *)&buf.st_dev = v672;
      LOBYTE(buf.st_ino) = 0;
      v581 = v225;
      if (v634.__r_.__value_.__l.__size_ != v634.__r_.__value_.__r.__words[0])
      {
        v227 = 0x1B810ECF56BE69C9
             * ((uint64_t)(v634.__r_.__value_.__l.__size_ - v634.__r_.__value_.__r.__words[0]) >> 3);
        if (v227 > 0x43B3D5AF9A723FLL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v227);
        v229 = 0;
        *(_QWORD *)v672 = v228;
        *(_QWORD *)&v672[8] = v228;
        *(_QWORD *)&v672[16] = &v228[968 * v230];
        do
        {
          FullyConnectedLayerBNNS<short>::FullyConnectedLayerBNNS((uint64_t)&v228[v229], v226 + v229);
          v229 += 968;
        }
        while ((_QWORD)v226 + v229 != *((_QWORD *)&v226 + 1));
        *(_QWORD *)&v672[8] = &v228[v229];
      }
      NeuralNetImpl::NeuralNetImpl(v225, *v599);
      *(_QWORD *)v225 = &off_1E69D6C88;
      v231 = 0x1B810ECF56BE69C9 * ((uint64_t)(*(_QWORD *)&v672[8] - *(_QWORD *)v672) >> 3);
      *(_DWORD *)(v225 + 44) = v231;
      *(_QWORD *)(v225 + 48) = 0;
      v232 = (uint64_t *)(v225 + 48);
      *(_QWORD *)(v225 + 56) = 0;
      *(_QWORD *)(v225 + 64) = 0;
      std::vector<FullyConnectedLayerBNNS<float>>::resize(v225 + 48, v231);
      if (!*(_DWORD *)(v225 + 44))
      {
LABEL_559:
        *(_DWORD *)(v225 + 40) = 16;
        *(_QWORD *)&buf.st_dev = v672;
        std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        v4 = v586;
        v271 = *v586;
        *v586 = v225;
        if (v271)
          (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
        if (v633.__r_.__value_.__r.__words[0])
          MEMORY[0x1BCC95CEC](v633.__r_.__value_.__r.__words[0], 0x60C4044C4A2DFLL);
LABEL_681:
        *(_QWORD *)&buf.st_dev = &v634;
        std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        goto LABEL_981;
      }
      v233 = 0;
      v588 = 0;
      v584 = (uint64_t *)(v225 + 48);
      while (1)
      {
        FullyConnectedLayerBNNS<short>::FullyConnectedLayerBNNS((uint64_t)&buf, *(_QWORD *)v672 + v233);
        v234 = *v232 + v233;
        v596 = v671;
        *(_DWORD *)(v234 + 964) = v671;
        v235 = v646;
        if (v671 == 1)
          v236 = v646;
        else
          v236 = 0;
        v237 = 4 * v646;
        if (v671 != 1)
          v237 = v646;
        v601 = v237;
        LODWORD(v632.__r_.__value_.__l.__data_) = 0;
        v591 = buf.st_ino;
        std::vector<float>::resize(v234 + 792, buf.st_ino, &v632);
        v238 = v236 + v591;
        v239 = (char **)(*v232 + v233 + 912);
        LOWORD(v632.__r_.__value_.__l.__data_) = 0;
        std::vector<short>::resize(v239, v236 + v591, &v632);
        v240 = *v232 + v233 + 816;
        LODWORD(v632.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::resize(v240, v235, &v632);
        if (v596 == 1)
        {
          v241 = *v232 + v233 + 840;
          LODWORD(v632.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::resize(v241, v601, &v632);
          v242 = *v232 + v233 + 864;
          LODWORD(v632.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::resize(v242, v235, &v632);
        }
        v243 = *v232;
        v244 = *v232 + v233;
        *(_DWORD *)(v244 + 4) = 0x10000;
        *(_QWORD *)(v244 + 8) = v591;
        *(_QWORD *)(v244 + 72) = 1;
        *(_DWORD *)(v244 + 144) = v641;
        *(_QWORD *)(v244 + 164) = v642;
        *(_DWORD *)(v244 + 356) = 0x10000;
        *(_QWORD *)(v244 + 360) = v235;
        *(_QWORD *)(v244 + 424) = 1;
        *(_DWORD *)(v244 + 496) = v647;
        *(_DWORD *)(v244 + 516) = v648;
        *(_DWORD *)(v244 + 520) = v649;
        v245 = v238 * v601;
        v246 = v669;
        v247 = (char *)__src;
        v248 = v669 - (_BYTE *)__src;
        if (v238 * v601 != (v669 - (_BYTE *)__src) >> 1)
        {
          v461 = *(NSObject ***)(v225 + 8);
          if (v461)
            v462 = *v461;
          else
            v462 = 0;
          v492 = -66743;
          if (!os_log_type_enabled(v462, OS_LOG_TYPE_ERROR))
            goto LABEL_1053;
          v493 = (uint64_t)(*(_QWORD *)(v243 + 968 * v588 + 944) - *(_QWORD *)(v243 + 968 * v588 + 936)) >> 1;
          *(_DWORD *)__p = 136316418;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 213;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -66743;
          *(_WORD *)&__p[24] = 1024;
          *(_DWORD *)&__p[26] = v588;
          *(_WORD *)&__p[30] = 2048;
          *(_QWORD *)&__p[32] = v493;
          *(_WORD *)v636 = 2048;
          *(_QWORD *)&v636[2] = v238 * v601;
          v494 = "%25s:%-5d EXCEPTION (%d) [layer.mWeightsQuantized.size() != weightsNumberOfCoefficients is false]: \"Ne"
                 "uralNetBNNS: Layer (%u), number of weights (%lu) is not matching the required number of weights (%lu).\"";
          v495 = v462;
LABEL_1039:
          v509 = 50;
          goto LABEL_1052;
        }
        v249 = (char **)(v244 + 936);
        if ((void **)(v244 + 936) == &__src)
        {
          v232 = v584;
          goto LABEL_536;
        }
        v250 = v243 + v233;
        v251 = *(_QWORD *)(v243 + v233 + 952);
        v252 = *v249;
        if (v245 > (uint64_t)(v251 - (_QWORD)*v249) >> 1)
          break;
        v255 = (void **)(v250 + 944);
        v258 = *(_BYTE **)(v250 + 944);
        v259 = (v258 - v252) >> 1;
        if (v259 >= v245)
        {
          if (v669 != __src)
            memmove(v252, __src, v669 - (_BYTE *)__src);
          v232 = v584;
          goto LABEL_535;
        }
        if (v258 != v252)
        {
          memmove(v252, __src, v258 - v252);
          v252 = (char *)*v255;
        }
        v232 = v584;
        v257 = &v247[2 * v259];
        v248 = v246 - v257;
        if (v246 != v257)
        {
          v256 = v252;
LABEL_531:
          memmove(v256, v257, v248);
        }
LABEL_535:
        *v255 = &v252[v248];
        v243 = *v232;
        v225 = v581;
LABEL_536:
        v260 = v243 + v233;
        *(_DWORD *)(v260 + 180) = 0x20000;
        *(_QWORD *)(v260 + 184) = v238;
        *(_QWORD *)(v260 + 192) = v601;
        *(_QWORD *)(v260 + 248) = 1;
        *(_QWORD *)(v260 + 256) = v238;
        *(_DWORD *)(v260 + 320) = v643;
        *(_DWORD *)(v260 + 340) = v644;
        *(_DWORD *)(v260 + 344) = v645;
        *(_QWORD *)(v260 + 312) = *(_QWORD *)(v243 + v233 + 936);
        if (v601 != (v665 - (_BYTE *)v664) >> 2)
        {
          v471 = *(NSObject ***)(v225 + 8);
          if (v471)
            v472 = *v471;
          else
            v472 = 0;
          v492 = -66743;
          if (!os_log_type_enabled(v472, OS_LOG_TYPE_ERROR))
            goto LABEL_1053;
          v508 = (uint64_t)(*(_QWORD *)(v243 + 968 * v588 + 896) - *(_QWORD *)(v243 + 968 * v588 + 888)) >> 2;
          *(_DWORD *)__p = 136316418;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 230;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -66743;
          *(_WORD *)&__p[24] = 1024;
          *(_DWORD *)&__p[26] = v588;
          *(_WORD *)&__p[30] = 2048;
          *(_QWORD *)&__p[32] = v508;
          *(_WORD *)v636 = 2048;
          *(_QWORD *)&v636[2] = v601;
          v494 = "%25s:%-5d EXCEPTION (%d) [layer.mBiasVector.size() != weightsSizeOutput is false]: \"NeuralNetBNNS: Lay"
                 "er (%u), bias size (%lu) is not matching the weight output vector size (%lu).\"";
          v495 = v472;
          goto LABEL_1039;
        }
        if ((void **)(v260 + 888) != &v664)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v260 + 888), (char *)v664, (uint64_t)v665, v601);
          v243 = *v232;
        }
        v261 = v243 + v233;
        *(_DWORD *)(v261 + 532) = 0x10000;
        v262 = *(_QWORD *)(v243 + v233 + 888);
        *(_QWORD *)(v261 + 536) = (*(_QWORD *)(v243 + v233 + 896) - v262) >> 2;
        *(_QWORD *)(v261 + 600) = 1;
        *(_DWORD *)(v261 + 672) = v650;
        *(_DWORD *)(v261 + 692) = v651;
        *(_DWORD *)(v261 + 696) = v652;
        *(_QWORD *)(v261 + 664) = v262;
        *(_DWORD *)(v261 + 704) = v653;
        *(_DWORD *)(v261 + 960) = v670;
        *(_DWORD *)(v261 + 708) = v654;
        *(_DWORD *)(v261 + 712) = v655;
        *(_OWORD *)(v261 + 752) = 0u;
        *(_OWORD *)(v261 + 768) = 0u;
        v263 = *v232 + v233;
        *(_DWORD *)(v263 + 752) = 1;
        *(_QWORD *)(v263 + 760) = 1;
        v264 = *(float32x2_t *)(v263 + 164);
        v265 = *(float32x2_t *)(v263 + 340);
        v266 = *(_DWORD *)(v263 + 704);
        *(_QWORD *)(v263 + 164) = 1065353216;
        *(_QWORD *)(v263 + 340) = vmul_f32(v264, v265).u32[0];
        *(_DWORD *)(v263 + 704) = 0;
        if (v596 == 1)
        {
          *(_QWORD *)(v263 + 8) = v238;
          *(_QWORD *)(v263 + 360) = v601;
        }
        v267 = BNNSFilterCreateLayerFullyConnected((const BNNSLayerParametersFullyConnected *)v263, (const BNNSFilterParameters *)(v263 + 752));
        v268 = *v232;
        *(_QWORD *)(*v232 + v233 + 784) = v267;
        if (!v267)
        {
          v477 = *(NSObject ***)(v225 + 8);
          if (v477)
            v478 = *v477;
          else
            v478 = 0;
          v492 = -10875;
          if (os_log_type_enabled(v478, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 278;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = -10875;
            *(_WORD *)&__p[24] = 1024;
            *(_DWORD *)&__p[26] = v588;
            v494 = "%25s:%-5d EXCEPTION (%d) [mDNNLayer[layerIdx].mFilter == nullptr is false]: \"NeuralNetBNNS: Layer (%"
                   "u), filter not created.\"";
            v495 = v478;
            v509 = 30;
LABEL_1052:
            _os_log_impl(&dword_1B5ED0000, v495, OS_LOG_TYPE_ERROR, v494, __p, v509);
          }
LABEL_1053:
          v513 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v513 = &off_1E69EE218;
          v513[2] = v492;
        }
        if (v596 == 1)
        {
          v269 = v268 + v233;
          *(_QWORD *)(v269 + 8) = v591;
          *(_QWORD *)(v269 + 360) = v235;
        }
        v270 = v268 + v233;
        *(float32x2_t *)(v270 + 164) = v264;
        *(float32x2_t *)(v270 + 340) = v265;
        *(_DWORD *)(v270 + 704) = v266;
        if (__src)
        {
          v669 = __src;
          operator delete(__src);
        }
        if (v666)
        {
          v667 = v666;
          operator delete(v666);
        }
        if (v664)
        {
          v665 = v664;
          operator delete(v664);
        }
        if (v662)
        {
          v663 = v662;
          operator delete(v662);
        }
        if (v660)
        {
          v661 = v660;
          operator delete(v660);
        }
        if (v658)
        {
          v659 = v658;
          operator delete(v658);
        }
        if (v656)
        {
          v657 = v656;
          operator delete(v656);
        }
        v233 += 968;
        if (++v588 >= (unint64_t)*(unsigned int *)(v225 + 44))
          goto LABEL_559;
      }
      if (v252)
      {
        *(_QWORD *)(v243 + v233 + 944) = v252;
        operator delete(v252);
        v251 = 0;
        *v249 = 0;
        v249[1] = 0;
        v249[2] = 0;
      }
      if ((v245 & 0x8000000000000000) != 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if (v251 <= v245)
        v253 = v238 * v601;
      else
        v253 = v251;
      if (v251 >= 0x7FFFFFFFFFFFFFFELL)
        v254 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v254 = v253;
      v232 = v584;
      std::vector<short>::__vallocate[abi:ne180100](v249, v254);
      v255 = (void **)(v243 + 968 * v588 + 944);
      v252 = *(char **)(v243 + v233 + 944);
      if (v246 == v247)
        goto LABEL_535;
      v256 = *(void **)(v243 + v233 + 944);
      v257 = v247;
      goto LABEL_531;
    case 1:
      v37 = *v599;
      if (*v599)
      {
        v38 = *v37;
        if (!*v37)
          goto LABEL_116;
      }
      else
      {
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 181;
        _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing Espresso NeuralNet implementation.", (uint8_t *)&buf, 0x12u);
      }
LABEL_116:
      NeuralNet::getModelInformationFromPlist((uint64_t)&buf, (uint64_t)v4, theDict);
      v46 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CacheImplementation"));
      v47 = v46;
      if (!v46)
        goto LABEL_727;
      CFRetain(v46);
      *(_QWORD *)__p = v47;
      v48 = applesauce::CF::convert_to<BOOL,0>(v47);
      CFRelease(v47);
      if (!v48)
        goto LABEL_727;
      v49 = *v599;
      if (*v599)
      {
        v50 = *v49;
        if (!*v49)
          goto LABEL_685;
      }
      else
      {
        v50 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNet.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 186;
        _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_INFO, "%25s:%-5d Implementation cache enabled.", __p, 0x12u);
      }
LABEL_685:
      if ((buf.st_gid & 0x80000000) == 0)
        p_buf = (const UInt8 *)&buf;
      else
        p_buf = *(const UInt8 **)&buf.st_dev;
      if ((buf.st_gid & 0x80000000) == 0)
        st_gid_high = HIBYTE(buf.st_gid);
      else
        st_gid_high = buf.st_ino;
      v363 = CFStringCreateWithBytes(0, p_buf, st_gid_high, 0x8000100u, 0);
      if (!v363)
      {
        v568 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v568, "Could not construct");
      }
      v364 = *v583;
      *v583 = v363;
      if (!v364 || (CFRelease(v364), (v363 = (CFStringRef)*v583) != 0))
        CFRetain(v363);
      v604 = v363;
      +[NeuralNetCache sharedCache](NeuralNetCache, "sharedCache");
      v365 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v365, "objectForKey:", v363);
      v366 = (void *)objc_claimAutoreleasedReturnValue();

      if (v366)
      {
        +[NeuralNetCache sharedCache](NeuralNetCache, "sharedCache");
        v367 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v367, "removeObjectForKey:", v604);

        objc_msgSend(v366, "impl");
      }
      else
      {
        *(_QWORD *)__p = 0;
      }

      v375 = *(_QWORD *)__p;
      *(_QWORD *)__p = 0;
      v376 = *v4;
      *v4 = v375;
      if (v376)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
        v377 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        if (v377)
          (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
      }
      if (v604)
        CFRelease(v604);
LABEL_727:
      if (*v4)
      {
        v378 = *v599;
        if (*v599)
        {
          v379 = *v378;
          if (!*v378)
            goto LABEL_746;
        }
        else
        {
          v379 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v379, OS_LOG_TYPE_INFO))
        {
          v385 = &buf;
          if ((buf.st_gid & 0x80000000) != 0)
            v385 = *(stat **)&buf.st_dev;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "NeuralNet.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 192;
          *(_WORD *)&__p[18] = 2080;
          *(_QWORD *)&__p[20] = v385;
          _os_log_impl(&dword_1B5ED0000, v379, OS_LOG_TYPE_INFO, "%25s:%-5d Loaded implementation from cache for model at %s.", __p, 0x1Cu);
        }
        goto LABEL_746;
      }
      *(_DWORD *)v672 = buf.st_gen;
      std::make_unique[abi:ne180100]<NeuralNetEspresso,std::string &,std::string &,std::string &,std::string &,std::string &,StreamingMode,__CFDictionary const* const&,CALog::Scope const*&>((uint64_t *)__p, (uint64_t)&buf, (uint64_t)&buf.st_rdev, (uint64_t)&buf.st_mtimespec, (uint64_t)&buf.st_ctimespec.tv_nsec, (uint64_t)&buf.st_size, (int *)v672, &v622, v599);
      v380 = *(_QWORD *)__p;
      v381 = *v4;
      *v4 = *(_QWORD *)__p;
      if (v381)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
        v380 = *v4;
      }
      v382 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v380 + 24))(v380);
      *(_DWORD *)v672 = 0;
      std::vector<float>::vector(__p, v382, v672);
      v383 = *v599;
      if (*v599)
      {
        v384 = *v383;
        if (!*v383)
          goto LABEL_744;
      }
      else
      {
        v384 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v384, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v672 = 136315394;
        *(_QWORD *)&v672[4] = "NeuralNet.cpp";
        *(_WORD *)&v672[12] = 1024;
        *(_DWORD *)&v672[14] = 202;
        _os_log_impl(&dword_1B5ED0000, v384, OS_LOG_TYPE_DEBUG, "%25s:%-5d Run processing once to prewarm the filters.", v672, 0x12u);
      }
      goto LABEL_744;
    case 2:
      v33 = *v599;
      if (*v599)
      {
        v34 = *v33;
        if (!*v33)
          goto LABEL_100;
      }
      else
      {
        v34 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 210;
        _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing EspressoV2 NeuralNet implementation.", (uint8_t *)&buf, 0x12u);
      }
LABEL_100:
      NeuralNet::getModelInformationFromPlist((uint64_t)&buf, (uint64_t)v4, theDict);
      st_gen = buf.st_gen;
      v42 = operator new();
      if (SHIBYTE(buf.st_gid) < 0)
      {
        std::string::__init_copy_ctor_external(&v632, *(const std::string::value_type **)&buf.st_dev, buf.st_ino);
      }
      else
      {
        *(_OWORD *)&v632.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.st_dev;
        v632.__r_.__value_.__r.__words[2] = *(_QWORD *)&buf.st_uid;
      }
      if (SHIBYTE(buf.st_atimespec.tv_nsec) < 0)
        std::string::__init_copy_ctor_external(&v631, *(const std::string::value_type **)&buf.st_rdev, buf.st_atimespec.tv_sec);
      else
        v631 = *(std::string *)&buf.st_rdev;
      if (SHIBYTE(buf.st_ctimespec.tv_sec) < 0)
      {
        std::string::__init_copy_ctor_external(&valuePtr, (const std::string::value_type *)buf.st_mtimespec.tv_sec, buf.st_mtimespec.tv_nsec);
      }
      else
      {
        *(timespec *)&valuePtr.__r_.__value_.__l.__data_ = buf.st_mtimespec;
        valuePtr.__r_.__value_.__r.__words[2] = buf.st_ctimespec.tv_sec;
      }
      if (SHIBYTE(buf.st_birthtimespec.tv_nsec) < 0)
        std::string::__init_copy_ctor_external(&v629, (const std::string::value_type *)buf.st_ctimespec.tv_nsec, buf.st_birthtimespec.tv_sec);
      else
        v629 = *(std::string *)&buf.st_ctimespec.tv_nsec;
      if (SHIBYTE(buf.st_flags) < 0)
        std::string::__init_copy_ctor_external(&v628, (const std::string::value_type *)buf.st_size, buf.st_blocks);
      else
        v628 = *(std::string *)&buf.st_size;
      NeuralNetImpl::NeuralNetImpl(v42, *v599);
      *(_QWORD *)v42 = &off_1E69D6E08;
      v51 = (_OWORD *)(v42 + 40);
      if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v42 + 40), v632.__r_.__value_.__l.__data_, v632.__r_.__value_.__l.__size_);
      }
      else
      {
        *v51 = *(_OWORD *)&v632.__r_.__value_.__l.__data_;
        *(_QWORD *)(v42 + 56) = *((_QWORD *)&v632.__r_.__value_.__l + 2);
      }
      if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v42 + 64), v631.__r_.__value_.__l.__data_, v631.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v42 + 64) = v631;
      if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v42 + 88), v629.__r_.__value_.__l.__data_, v629.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v42 + 88) = v629;
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v42 + 112), valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v42 + 112) = valuePtr;
      *(_DWORD *)(v42 + 136) = st_gen;
      *(_BYTE *)(v42 + 144) = 0;
      *(_BYTE *)(v42 + 312) = 0;
      *(_OWORD *)(v42 + 328) = 0u;
      *(_OWORD *)(v42 + 344) = 0u;
      *(_OWORD *)(v42 + 360) = 0u;
      *(_OWORD *)(v42 + 376) = 0u;
      *(_OWORD *)(v42 + 392) = 0u;
      *(_OWORD *)(v42 + 408) = 0u;
      v56 = *(NSObject ***)(v42 + 8);
      if (v56)
      {
        v57 = *v56;
        if (!*v56)
          goto LABEL_196;
      }
      else
      {
        v57 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1022;
        _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Construct NeuralNetEspressoV2.", __p, 0x12u);
      }
LABEL_196:
      v587 = (unsigned __int8 *)(v42 + 112);
      std::string::basic_string[abi:ne180100]<0>(__p, "My Inference");
      v60 = (char *)(v42 + 40);
      if (*(char *)(v42 + 63) < 0)
        v60 = *(char **)v51;
      std::string::basic_string[abi:ne180100]<0>(v672, v60);
      std::string::basic_string[abi:ne180100]<0>(&v634, "main");
      E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
      v61 = v633.__r_.__value_.__r.__words[0];
      if (v633.__r_.__value_.__r.__words[0])
      {
        v62 = (_QWORD *)operator new();
        v63 = v633.__r_.__value_.__r.__words[0];
        *v62 = &off_1E69D6FA8;
        v62[1] = 0;
        v62[2] = 0;
        v62[3] = v63;
      }
      else
      {
        v62 = 0;
      }
      v633.__r_.__value_.__r.__words[0] = 0;
      v80 = *(std::__shared_weak_count **)(v42 + 336);
      *(_QWORD *)(v42 + 328) = v61;
      *(_QWORD *)(v42 + 336) = v62;
      if (v80)
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(p_shared_owners);
        while (__stlxr(v82 - 1, p_shared_owners));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = v633.__r_.__value_.__r.__words[0];
      v633.__r_.__value_.__r.__words[0] = 0;
      if (v83)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v83 + 8))(v83);
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v634.__r_.__value_.__l.__data_);
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)(v42 + 328));
      for (i = InputPorts + 2; ; NeuralNetEspressoV2::AllocateAndBindMemoryToPort((NeuralNetEspressoV2 *)i[5], v84))
      {
        i = (_QWORD *)*i;
        if (!i)
          break;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(InputPorts, (unsigned __int8 *)(v42 + 64)))
      {
        v541 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v542 = std::string::append((std::string *)v672, " not available.", 0xFuLL);
        v543 = *(_OWORD *)&v542->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v542->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v543;
        v542->__r_.__value_.__l.__size_ = 0;
        v542->__r_.__value_.__r.__words[2] = 0;
        v542->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v541, (const std::string *)__p);
      }
      v87 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(InputPorts, (unsigned __int8 *)(v42 + 64));
      if (!v87)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v88 = v87;
      v89 = (E5RT::IOPort *)*((_QWORD *)v87 + 5);
      v90 = (std::__shared_weak_count *)*((_QWORD *)v88 + 6);
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      E5RT::IOPort::GetMemoryObject(v89);
      v93 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(E5RT::MemoryObject **)__p);
      E5RT::BufferObject::GetDataSpan(v93);
      v95 = v94;
      v96 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v97 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      *(_DWORD *)(v42 + 320) = v95 >> 2;
      OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(v42 + 328));
      for (j = OutputPorts + 2; ; NeuralNetEspressoV2::AllocateAndBindMemoryToPort((NeuralNetEspressoV2 *)j[5], v99))
      {
        j = (_QWORD *)*j;
        if (!j)
          break;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(OutputPorts, v587))
      {
        v544 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v545 = std::string::append((std::string *)v672, " not available.", 0xFuLL);
        v546 = *(_OWORD *)&v545->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v545->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v546;
        v545->__r_.__value_.__l.__size_ = 0;
        v545->__r_.__value_.__r.__words[2] = 0;
        v545->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v544, (const std::string *)__p);
      }
      v102 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(OutputPorts, v587);
      if (!v102)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v103 = v102;
      v104 = (E5RT::IOPort *)*((_QWORD *)v102 + 5);
      v105 = (std::__shared_weak_count *)*((_QWORD *)v103 + 6);
      if (v105)
      {
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      E5RT::IOPort::GetMemoryObject(v104);
      v108 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(E5RT::MemoryObject **)__p);
      DataSpan = (E5RT::ExecutionStream *)E5RT::BufferObject::GetDataSpan(v108);
      v111 = v110;
      v112 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v113 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      *(_DWORD *)(v42 + 324) = v111 >> 2;
      if (v105)
      {
        v115 = (unint64_t *)&v105->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      if (v90)
      {
        v117 = (unint64_t *)&v90->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      E5RT::ExecutionStream::CreateExecutionStream(DataSpan);
      v119 = *(_QWORD *)__p;
      *(_QWORD *)__p = 0;
      v120 = *(_QWORD *)(v42 + 344);
      *(_QWORD *)(v42 + 344) = v119;
      if (v120)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
        v121 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        if (v121)
          (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
      }
      v122 = *(_QWORD *)(v42 + 336);
      v627.__r_.__value_.__r.__words[0] = *(_QWORD *)(v42 + 328);
      v627.__r_.__value_.__l.__size_ = v122;
      if (v122)
      {
        v123 = (unint64_t *)(v122 + 8);
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      E5RT::ExecutionStream::EncodeOperation();
      size = (std::__shared_weak_count *)v627.__r_.__value_.__l.__size_;
      if (v627.__r_.__value_.__l.__size_)
      {
        v126 = (unint64_t *)(v627.__r_.__value_.__l.__size_ + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v128 = *(_DWORD *)(v42 + 136);
      if (v128 != 1)
      {
        if (v128)
        {
          v555 = *(NSObject ***)(v42 + 8);
          if (v555)
            v556 = *v555;
          else
            v556 = 0;
          if (os_log_type_enabled(v556, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1117;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = -66743;
            *(_WORD *)&__p[24] = 1024;
            *(_DWORD *)&__p[26] = v128;
            _os_log_impl(&dword_1B5ED0000, v556, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown streaming mode (%d).\"", __p, 0x1Eu);
          }
          v572 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v572 = &off_1E69EE218;
          v572[2] = -66743;
        }
        v129 = *(NSObject ***)(v42 + 8);
        if (v129)
        {
          v130 = *v129;
          if (!*v129)
            goto LABEL_432;
        }
        else
        {
          v130 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1067;
          _os_log_impl(&dword_1B5ED0000, v130, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Streaming mode None: no initialization required.", __p, 0x12u);
        }
LABEL_426:
        v179 = *(NSObject ***)(v42 + 8);
        if (v179)
        {
          v180 = *v179;
          if (!*v179)
          {
LABEL_432:
            if (SHIBYTE(v628.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v628.__r_.__value_.__l.__data_);
            if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v629.__r_.__value_.__l.__data_);
            if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
              operator delete(valuePtr.__r_.__value_.__l.__data_);
            if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v631.__r_.__value_.__l.__data_);
            if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v632.__r_.__value_.__l.__data_);
            v181 = *v586;
            *v586 = v42;
            v4 = v586;
            if (v181)
              (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
LABEL_746:
            if (SHIBYTE(buf.st_flags) < 0)
              operator delete((void *)buf.st_size);
            if (SHIBYTE(buf.st_birthtimespec.tv_nsec) < 0)
              operator delete((void *)buf.st_ctimespec.tv_nsec);
            if (SHIBYTE(buf.st_ctimespec.tv_sec) < 0)
              operator delete((void *)buf.st_mtimespec.tv_sec);
            if (SHIBYTE(buf.st_atimespec.tv_nsec) < 0)
              operator delete(*(void **)&buf.st_rdev);
            if (SHIBYTE(buf.st_gid) < 0)
            {
              v386 = *(void **)&buf.st_dev;
LABEL_980:
              operator delete(v386);
              goto LABEL_981;
            }
            goto LABEL_981;
          }
        }
        else
        {
          v180 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1120;
          _os_log_impl(&dword_1B5ED0000, v180, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NeuralNetEspressoV2 constructed.", __p, 0x12u);
        }
        goto LABEL_432;
      }
      v131 = *(NSObject ***)(v42 + 8);
      if (v131)
      {
        v132 = *v131;
        if (!*v131)
          goto LABEL_345;
      }
      else
      {
        v132 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1071;
        _os_log_impl(&dword_1B5ED0000, v132, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Streaming mode CopyOutStateToInState: bind input and output states.", __p, 0x12u);
      }
LABEL_345:
      v147 = CFDictionaryGetValue(theDict, CFSTR("InputOutputStates"));
      v148 = (std::string::size_type)v147;
      if (!v147)
      {
        v557 = 0;
        v626.__r_.__value_.__r.__words[0] = 0;
        v558 = *(NSObject ***)(v42 + 8);
        if (v558)
          v557 = *v558;
        if (os_log_type_enabled(v557, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1075;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -66741;
          _os_log_impl(&dword_1B5ED0000, v557, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [ioStates_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputOutputStates.\"", __p, 0x18u);
        }
        v559 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v559 = &off_1E69EE218;
        v559[2] = -66741;
      }
      CFRetain(v147);
      v626.__r_.__value_.__r.__words[0] = v148;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v626.__r_.__value_.__l.__data_, (applesauce::CF::DictionaryRef *)&v625);
      v149 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v625.__r_.__value_.__l.__data_, CFSTR("NumStates"));
      v150 = v149;
      if (!v149)
      {
        v560 = *(NSObject ***)(v42 + 8);
        if (v560)
          v561 = *v560;
        else
          v561 = 0;
        if (os_log_type_enabled(v561, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1080;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -66741;
          _os_log_impl(&dword_1B5ED0000, v561, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [numStates_ref.get_cf() == nullptr is false]: \"Failed to retrieve NumStates from InputOutputStates.\"", __p, 0x18u);
        }
        v573 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v573 = &off_1E69EE218;
        v573[2] = -66741;
      }
      CFRetain(v149);
      v594 = v150;
      v151 = applesauce::CF::convert_to<unsigned int,0>(v150);
      v152 = *(NSObject ***)(v42 + 8);
      if (v152)
      {
        v153 = *v152;
        if (!*v152)
          goto LABEL_362;
      }
      else
      {
        v153 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1082;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v151;
        _os_log_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved number of states (%d).", __p, 0x18u);
        v152 = *(NSObject ***)(v42 + 8);
      }
      if (v152)
      {
        v154 = *v152;
        if (!v154)
        {
LABEL_362:
          v156 = *(_QWORD *)(v42 + 376);
          for (k = *(_QWORD *)(v42 + 384);
                k != v156;
                std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(k))
          {
            k -= 48;
          }
          *(_QWORD *)(v42 + 384) = v156;
          v157 = v594;
          if (!v151)
          {
LABEL_422:
            CFRelease(v157);
            if (v625.__r_.__value_.__r.__words[0])
              CFRelease(v625.__r_.__value_.__l.__data_);
            if (v626.__r_.__value_.__r.__words[0])
              CFRelease(v626.__r_.__value_.__l.__data_);
            goto LABEL_426;
          }
          v158 = 0;
          while (1)
          {
            std::to_string((std::string *)__p, v158);
            v159 = std::string::insert((std::string *)__p, 0, "InputOutputState_", 0x11uLL);
            v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
            *(_QWORD *)&v672[16] = *((_QWORD *)&v159->__r_.__value_.__l + 2);
            *(_OWORD *)v672 = v160;
            v159->__r_.__value_.__l.__size_ = 0;
            v159->__r_.__value_.__r.__words[2] = 0;
            v159->__r_.__value_.__r.__words[0] = 0;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (v672[23] >= 0)
              v161 = v672;
            else
              v161 = *(const UInt8 **)v672;
            if (v672[23] >= 0)
              v162 = v672[23];
            else
              v162 = *(_QWORD *)&v672[8];
            v163 = CFStringCreateWithBytes(0, v161, v162, 0x8000100u, 0);
            if (!v163)
            {
              v526 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v526, "Could not construct");
            }
            v164 = CFDictionaryGetValue((CFDictionaryRef)v625.__r_.__value_.__l.__data_, v163);
            v165 = v164;
            if (!v164)
            {
              v527 = 0;
              cf = 0;
              v528 = *(NSObject ***)(v42 + 8);
              if (v528)
                v527 = *v528;
              if (os_log_type_enabled(v527, OS_LOG_TYPE_ERROR))
              {
                v529 = v672;
                if (v672[23] < 0)
                  v529 = *(_BYTE **)v672;
                *(_DWORD *)__p = 136315906;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1095;
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = -66741;
                *(_WORD *)&__p[24] = 2080;
                *(_QWORD *)&__p[26] = v529;
                _os_log_impl(&dword_1B5ED0000, v527, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [state_ref.get_cf() == nullptr is false]: \"Missing dictionary (%s).\"", __p, 0x22u);
              }
              v530 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v530 = &off_1E69EE218;
              v530[2] = -66741;
            }
            CFRetain(v164);
            cf = v165;
            applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&cf, (applesauce::CF::DictionaryRef *)&theDicta);
            if (*(_DWORD *)(v42 + 16))
            {
              v166 = *(NSObject ***)(v42 + 8);
              if (v166)
              {
                v167 = *v166;
                if (!*v166)
                  goto LABEL_387;
              }
              else
              {
                v167 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
              {
                if (v672[23] >= 0)
                  v168 = v672;
                else
                  v168 = *(_BYTE **)v672;
                *(_DWORD *)__p = 136315650;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1098;
                *(_WORD *)&__p[18] = 2080;
                *(_QWORD *)&__p[20] = v168;
                _os_log_impl(&dword_1B5ED0000, v167, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary (%s).", __p, 0x1Cu);
              }
            }
LABEL_387:
            v169 = (const __CFString *)CFDictionaryGetValue(theDicta, CFSTR("InputName"));
            v170 = v169;
            if (!v169)
            {
              v531 = *(NSObject ***)(v42 + 8);
              if (v531)
                v532 = *v531;
              else
                v532 = 0;
              if (os_log_type_enabled(v532, OS_LOG_TYPE_ERROR))
              {
                v535 = v672;
                if (v672[23] < 0)
                  v535 = *(_BYTE **)v672;
                *(_DWORD *)__p = 136315906;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1101;
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = -66741;
                *(_WORD *)&__p[24] = 2080;
                *(_QWORD *)&__p[26] = v535;
                _os_log_impl(&dword_1B5ED0000, v532, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputName from (%s).\"", __p, 0x22u);
              }
              v536 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v536 = &off_1E69EE218;
              v536[2] = -66741;
            }
            CFRetain(v169);
            applesauce::CF::convert_to<std::string,0>(v170, (uint64_t)&v634);
            if (*(_DWORD *)(v42 + 16))
            {
              v171 = *(NSObject ***)(v42 + 8);
              if (v171)
              {
                v172 = *v171;
                if (!*v171)
                  goto LABEL_397;
              }
              else
              {
                v172 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG))
              {
                v173 = &v634;
                if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v173 = (std::string *)v634.__r_.__value_.__r.__words[0];
                *(_DWORD *)__p = 136315650;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1104;
                *(_WORD *)&__p[18] = 2080;
                *(_QWORD *)&__p[20] = v173;
                _os_log_impl(&dword_1B5ED0000, v172, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input state name (%s).", __p, 0x1Cu);
              }
            }
LABEL_397:
            v174 = (const __CFString *)CFDictionaryGetValue(theDicta, CFSTR("OutputName"));
            v175 = v174;
            if (!v174)
            {
              v533 = *(NSObject ***)(v42 + 8);
              if (v533)
                v534 = *v533;
              else
                v534 = 0;
              if (os_log_type_enabled(v534, OS_LOG_TYPE_ERROR))
              {
                v537 = v672;
                if (v672[23] < 0)
                  v537 = *(_BYTE **)v672;
                *(_DWORD *)__p = 136315906;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1107;
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = -66741;
                *(_WORD *)&__p[24] = 2080;
                *(_QWORD *)&__p[26] = v537;
                _os_log_impl(&dword_1B5ED0000, v534, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve OutputName from (%s).\"", __p, 0x22u);
              }
              v538 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v538 = &off_1E69EE218;
              v538[2] = -66741;
            }
            CFRetain(v174);
            applesauce::CF::convert_to<std::string,0>(v175, (uint64_t)&v633);
            if (!*(_DWORD *)(v42 + 16))
              goto LABEL_407;
            v176 = *(NSObject ***)(v42 + 8);
            if (!v176)
            {
              v177 = MEMORY[0x1E0C81028];
LABEL_403:
              if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
              {
                v178 = &v633;
                if ((v633.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v178 = (std::string *)v633.__r_.__value_.__r.__words[0];
                *(_DWORD *)__p = 136315650;
                *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1110;
                *(_WORD *)&__p[18] = 2080;
                *(_QWORD *)&__p[20] = v178;
                _os_log_impl(&dword_1B5ED0000, v177, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output state name (%s).", __p, 0x1Cu);
              }
              goto LABEL_407;
            }
            v177 = *v176;
            if (*v176)
              goto LABEL_403;
LABEL_407:
            std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)__p, (__int128 *)&v634, (__int128 *)&v633);
            v157 = v594;
            std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(v42 + 376), (__int128 *)__p);
            if ((v636[7] & 0x80000000) != 0)
              operator delete(*(void **)&__p[24]);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v633.__r_.__value_.__l.__data_);
            CFRelease(v175);
            if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v634.__r_.__value_.__l.__data_);
            CFRelease(v170);
            if (theDicta)
              CFRelease(theDicta);
            if (cf)
              CFRelease(cf);
            CFRelease(v163);
            if ((v672[23] & 0x80000000) != 0)
              operator delete(*(void **)v672);
            if (v151 == ++v158)
              goto LABEL_422;
          }
        }
      }
      else
      {
        v154 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1084;
        _os_log_impl(&dword_1B5ED0000, v154, OS_LOG_TYPE_INFO, "%25s:%-5d Read input and output state names.", __p, 0x12u);
      }
      goto LABEL_362;
    case 3:
      v35 = *v599;
      if (*v599)
      {
        v36 = *v35;
        if (!*v35)
          goto LABEL_105;
      }
      else
      {
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 222;
        _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing MIL2BNNS NeuralNet implementation.", (uint8_t *)&buf, 0x12u);
      }
LABEL_105:
      NeuralNet::getModelInformationFromPlist((uint64_t)__p, (uint64_t)v4, theDict);
      v43 = v639;
      v44 = operator new();
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v629, __p);
      if ((v636[7] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v628, *(const std::string::value_type **)&__p[24], *(std::string::size_type *)&__p[32]);
      }
      else
      {
        *(_OWORD *)&v628.__r_.__value_.__l.__data_ = *(_OWORD *)&__p[24];
        v628.__r_.__value_.__r.__words[2] = *(_QWORD *)v636;
      }
      if ((v636[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v627, *(const std::string::value_type **)&v636[8], *(std::string::size_type *)&v636[16]);
      else
        v627 = *(std::string *)&v636[8];
      if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v626, v637.__r_.__value_.__l.__data_, v637.__r_.__value_.__l.__size_);
      else
        v626 = v637;
      if (SHIBYTE(v638.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v625, v638.__r_.__value_.__l.__data_, v638.__r_.__value_.__l.__size_);
      else
        v625 = v638;
      NeuralNetImpl::NeuralNetImpl(v44, *v599);
      *(_QWORD *)v44 = &off_1E69D6E68;
      if (SHIBYTE(v628.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v44 + 40), v628.__r_.__value_.__l.__data_, v628.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v44 + 40) = v628;
      if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v44 + 64), v626.__r_.__value_.__l.__data_, v626.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v44 + 64) = v626;
      v55 = (std::string *)(v44 + 88);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v55, v627.__r_.__value_.__l.__data_, v627.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v627.__r_.__value_.__l.__data_;
        *(_QWORD *)(v44 + 104) = *((_QWORD *)&v627.__r_.__value_.__l + 2);
      }
      *(_QWORD *)(v44 + 120) = 0;
      *(_DWORD *)(v44 + 112) = v43;
      *(_QWORD *)(v44 + 128) = 0;
      *(_QWORD *)(v44 + 136) = 0;
      *(_OWORD *)(v44 + 160) = 0u;
      *(_OWORD *)(v44 + 280) = 0u;
      *(_OWORD *)(v44 + 176) = 0u;
      *(_OWORD *)(v44 + 192) = 0u;
      *(_OWORD *)(v44 + 208) = 0u;
      *(_BYTE *)(v44 + 224) = 0;
      *(_OWORD *)(v44 + 232) = 0u;
      *(_OWORD *)(v44 + 248) = 0u;
      *(_OWORD *)(v44 + 264) = 0u;
      *(_OWORD *)(v44 + 296) = 0u;
      caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v44 + 328));
      v58 = *(NSObject ***)(v44 + 8);
      if (v58)
      {
        v59 = *v58;
        if (!*v58)
          goto LABEL_214;
      }
      else
      {
        v59 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1268;
        _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Construct MIL2BNNS.", (uint8_t *)&buf, 0x12u);
      }
LABEL_214:
      memset(&v633, 0, sizeof(v633));
      std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)&v629, (uint64_t)&v632);
      v72 = *(NSObject ***)(v44 + 8);
      if (v72)
      {
        v73 = *v72;
        if (!*v72)
          goto LABEL_222;
      }
      else
      {
        v73 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        v74 = &v632;
        if ((v632.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v74 = (std::string *)v632.__r_.__value_.__r.__words[0];
        buf.st_dev = 136315650;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1273;
        HIWORD(buf.st_uid) = 2080;
        *(_QWORD *)&buf.st_gid = v74;
        _os_log_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS extension is '%s'", (uint8_t *)&buf, 0x1Cu);
      }
LABEL_222:
      std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)&buf, ".mil");
      v676.__data_ = (const std::string_view::value_type *)&buf;
      v75 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v632, v676);
      v76 = v75;
      if ((SHIBYTE(buf.st_gid) & 0x80000000) == 0)
      {
        if (v75)
          goto LABEL_224;
LABEL_228:
        std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)&buf, ".ir");
        v677.__data_ = (const std::string_view::value_type *)&buf;
        v78 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v632, v677);
        if (SHIBYTE(buf.st_gid) < 0)
          operator delete(*(void **)&buf.st_dev);
        if (!v78)
        {
          v553 = *(NSObject ***)(v44 + 8);
          if (v553)
            v554 = *v553;
          else
            v554 = 0;
          if (os_log_type_enabled(v554, OS_LOG_TYPE_ERROR))
          {
            v570 = &v629;
            if ((v629.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v570 = (std::string *)v629.__r_.__value_.__r.__words[0];
            buf.st_dev = 136315906;
            *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
            WORD2(buf.st_ino) = 1024;
            *(_DWORD *)((char *)&buf.st_ino + 6) = 1288;
            HIWORD(buf.st_uid) = 1024;
            buf.st_gid = -66743;
            LOWORD(buf.st_rdev) = 2080;
            *(_QWORD *)((char *)&buf.st_rdev + 2) = v570;
            _os_log_impl(&dword_1B5ED0000, v554, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown Model File name(%s): Only .mil or .ir file extension is accepted\"", (uint8_t *)&buf, 0x22u);
          }
          v571 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v571 = &off_1E69EE218;
          v571[2] = -66743;
        }
        v79 = 0;
        *(_BYTE *)(v44 + 224) = 1;
        goto LABEL_790;
      }
      operator delete(*(void **)&buf.st_dev);
      if (!v76)
        goto LABEL_228;
LABEL_224:
      *(_BYTE *)(v44 + 224) = 0;
      v77 = getenv("TMPDIR");
      if (!v77)
        goto LABEL_765;
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
      {
        *v633.__r_.__value_.__l.__data_ = 0;
        v633.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v633.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v633.__r_.__value_.__s + 23) = 0;
      }
      v368 = v77 - 1;
      while (*++v368)
        ;
      std::string::append[abi:ne180100]<char const*,0>(&v633, v77, v368);
      std::__fs::filesystem::path::path[abi:ne180100]<char [6],void>((std::string *)v672, "Cache");
      std::__fs::filesystem::__absolute((std::__fs::filesystem::path *)&v631, (const std::__fs::filesystem::path *)&v629, 0);
      std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(&valuePtr, "/");
      std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&v634, (const std::__fs::filesystem::path *)&v631, (const std::__fs::filesystem::path *)&valuePtr);
      std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v634, (uint64_t)v672, (std::__fs::filesystem::path *)&buf);
      std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v633, (std::__fs::filesystem::path *)&buf);
      if (SHIBYTE(buf.st_gid) < 0)
        operator delete(*(void **)&buf.st_dev);
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v634.__r_.__value_.__l.__data_);
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v631.__r_.__value_.__l.__data_);
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)&buf, ".ir");
      std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v633, (const std::__fs::filesystem::path *)&buf);
      if (SHIBYTE(buf.st_gid) < 0)
        operator delete(*(void **)&buf.st_dev);
      std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v633, 0);
      v370 = v672[0];
      if (v672[0])
        v371 = v672[0] == 255;
      else
        v371 = 1;
      v372 = !v371;
      v373 = *(NSObject ***)(v44 + 8);
      if (v373)
      {
        v374 = *v373;
        if (!*v373)
          goto LABEL_763;
      }
      else
      {
        v374 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v374, OS_LOG_TYPE_DEFAULT))
      {
        v387 = &v633;
        if ((v633.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v387 = (std::string *)v633.__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1282;
        v388 = "exists";
        buf.st_dev = 136315906;
        if (!v372)
          v388 = "doesn't exist";
        HIWORD(buf.st_uid) = 2080;
        *(_QWORD *)&buf.st_gid = v387;
        *((_WORD *)&buf.st_rdev + 2) = 2080;
        *(_QWORD *)((char *)&buf.st_rdev + 6) = v388;
        _os_log_impl(&dword_1B5ED0000, v374, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS cache file '%s' %s", (uint8_t *)&buf, 0x26u);
      }
LABEL_763:
      *(_BYTE *)(v44 + 224) = v372;
      if (v370 != 255 && v370)
      {
        v79 = 1;
        goto LABEL_790;
      }
LABEL_765:
      MIL2BNNS::getCachedIRLocation((std::string *)&buf, (const __CFDictionary *)v44, theDict);
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v633.__r_.__value_.__l.__data_);
      v633.__r_.__value_.__r.__words[2] = *(_QWORD *)&buf.st_uid;
      *(_OWORD *)&v633.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.st_dev;
      v389 = HIBYTE(*(_QWORD *)&buf.st_uid);
      if ((buf.st_gid & 0x80000000) != 0)
        v389 = buf.st_ino;
      if (v389)
      {
        std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v633, 0);
        if (v672[0])
          v390 = v672[0] == 255;
        else
          v390 = 1;
        v79 = !v390;
      }
      else
      {
        v79 = 0;
      }
      *(_BYTE *)(v44 + 224) = v79;
      v391 = *(NSObject ***)(v44 + 8);
      if (v391)
      {
        v392 = *v391;
        if (!*v391)
        {
          v393 = v79;
          goto LABEL_787;
        }
      }
      else
      {
        v392 = MEMORY[0x1E0C81028];
      }
      v394 = os_log_type_enabled(v392, OS_LOG_TYPE_DEFAULT);
      v393 = v79;
      if (v394)
      {
        v395 = &v633;
        if ((v633.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v395 = (std::string *)v633.__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1297;
        v396 = "exists";
        buf.st_dev = 136315906;
        if (!v79)
          v396 = "doesn't exist";
        HIWORD(buf.st_uid) = 2080;
        *(_QWORD *)&buf.st_gid = v395;
        *((_WORD *)&buf.st_rdev + 2) = 2080;
        *(_QWORD *)((char *)&buf.st_rdev + 6) = v396;
        _os_log_impl(&dword_1B5ED0000, v392, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS secondary cache file '%s' %s", (uint8_t *)&buf, 0x26u);
        v393 = *(unsigned __int8 *)(v44 + 224);
      }
LABEL_787:
      if (!v393)
        goto LABEL_828;
LABEL_790:
      v397 = *(NSObject ***)(v44 + 8);
      if (v397)
      {
        v398 = *v397;
        if (!*v397)
          goto LABEL_796;
      }
      else
      {
        v398 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1301;
        _os_log_impl(&dword_1B5ED0000, v398, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Use '.ir' format", (uint8_t *)&buf, 0x12u);
      }
LABEL_796:
      if (v79)
        v399 = &v633;
      else
        v399 = &v629;
      v634.__r_.__value_.__r.__words[0] = v44 + 328;
      v634.__r_.__value_.__s.__data_[8] = 1;
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v44 + 328));
      if (v79)
        v400 = &v633;
      else
        v400 = &v629;
      if ((v400->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v401 = (const char *)v399;
      else
        v401 = (const char *)v399->__r_.__value_.__r.__words[0];
      v402 = open(v401, 0);
      v403 = v402;
      if (v402 < 0)
      {
        v548 = *(NSObject ***)(v44 + 8);
        if (v548)
          v549 = *v548;
        else
          v549 = 0;
        if (os_log_type_enabled(v549, OS_LOG_TYPE_ERROR))
        {
          if ((v400->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v562 = v399;
          else
            v562 = (std::string *)v399->__r_.__value_.__r.__words[0];
          buf.st_dev = 136315906;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1308;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = -10871;
          LOWORD(buf.st_rdev) = 2080;
          *(_QWORD *)((char *)&buf.st_rdev + 2) = v562;
          _os_log_impl(&dword_1B5ED0000, v549, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"failed to open BNNS IR file (%s)\"", (uint8_t *)&buf, 0x22u);
        }
        v563 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v563 = &off_1E69EE218;
        v563[2] = -10871;
      }
      fstat(v402, &buf);
      v631.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v631.__r_.__value_.__r.__words[1]) = buf.st_size;
      fcntl(v403, 44, &v631);
      st_size = buf.st_size;
      *(_QWORD *)(v44 + 152) = buf.st_size;
      v405 = mmap(0, st_size, 1, 2, v403, 0);
      *(_QWORD *)(v44 + 144) = v405;
      if (v405 == (void *)-1)
      {
        v550 = *(NSObject ***)(v44 + 8);
        if (v550)
          v551 = *v550;
        else
          v551 = 0;
        if (os_log_type_enabled(v551, OS_LOG_TYPE_ERROR))
        {
          if ((v629.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v564 = &v629;
          else
            v564 = (std::string *)v629.__r_.__value_.__r.__words[0];
          v565 = __error();
          v566 = strerror(*v565);
          *(_DWORD *)v672 = 136316162;
          *(_QWORD *)&v672[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&v672[12] = 1024;
          *(_DWORD *)&v672[14] = 1323;
          *(_WORD *)&v672[18] = 1024;
          *(_DWORD *)&v672[20] = -10875;
          *(_WORD *)&v672[24] = 2080;
          *(_QWORD *)&v672[26] = v564;
          v673 = 2080;
          v674 = v566;
          _os_log_impl(&dword_1B5ED0000, v551, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"mmap of bnns IR file (%s) failed with error (%s)\"", v672, 0x2Cu);
        }
        v567 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v567 = &off_1E69EE218;
        v567[2] = -10875;
      }
      if (!MIL2BNNS::loadContext(v44, (uint64_t)v405, *(_QWORD *)(v44 + 152)))
      {
        std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)v672, ".ir");
        v678.__data_ = v672;
        v408 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v632, v678);
        if ((v672[23] & 0x80000000) != 0)
          operator delete(*(void **)v672);
        v409 = *(NSObject ***)(v44 + 8);
        if (v408)
        {
          if (v409)
            v523 = *v409;
          else
            v523 = 0;
          if (os_log_type_enabled(v523, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v672 = 136315650;
            *(_QWORD *)&v672[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&v672[12] = 1024;
            *(_DWORD *)&v672[14] = 1334;
            *(_WORD *)&v672[18] = 1024;
            *(_DWORD *)&v672[20] = -10875;
            _os_log_impl(&dword_1B5ED0000, v523, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetExt == \".ir\" is false]: \"No MIL fallback option available\"", v672, 0x18u);
          }
          v525 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v525 = &off_1E69EE218;
          v525[2] = -10875;
        }
        if (v409)
        {
          v410 = *v409;
          if (!*v409)
          {
LABEL_826:
            *(_BYTE *)(v44 + 224) = 0;
            goto LABEL_827;
          }
        }
        else
        {
          v410 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v672 = 136315394;
          *(_QWORD *)&v672[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&v672[12] = 1024;
          *(_DWORD *)&v672[14] = 1335;
          _os_log_impl(&dword_1B5ED0000, v410, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to create context from precompiled IR -- fallback to MIL compilation", v672, 0x12u);
        }
        goto LABEL_826;
      }
      v406 = *(NSObject ***)(v44 + 8);
      if (v406)
      {
        v407 = *v406;
        if (!*v406)
          goto LABEL_827;
      }
      else
      {
        v407 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v407, OS_LOG_TYPE_DEFAULT))
      {
        if ((v400->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v411 = v399;
        else
          v411 = (std::string *)v399->__r_.__value_.__r.__words[0];
        *(_DWORD *)v672 = 136315650;
        *(_QWORD *)&v672[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&v672[12] = 1024;
        *(_DWORD *)&v672[14] = 1328;
        *(_WORD *)&v672[18] = 2080;
        *(_QWORD *)&v672[20] = v411;
        _os_log_impl(&dword_1B5ED0000, v407, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully loaded \"%s\"", v672, 0x1Cu);
      }
LABEL_827:
      close(v403);
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v634);
      if (*(_BYTE *)(v44 + 224))
        goto LABEL_940;
LABEL_828:
      v412 = *(NSObject ***)(v44 + 8);
      if (v412)
      {
        v413 = *v412;
        if (!*v412)
          goto LABEL_834;
      }
      else
      {
        v413 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v413, OS_LOG_TYPE_DEFAULT))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1341;
        _os_log_impl(&dword_1B5ED0000, v413, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Use '.mil' format", (uint8_t *)&buf, 0x12u);
      }
LABEL_834:
      BNNSGraphCompileOptionsMakeDefault();
      BNNSGraphCompileOptionsSetTargetSingleThread();
      BNNSGraphCompileOptionsSetOptimizationPreference();
      BNNSGraphCompileOptionsSetValidateMILFile();
      v414 = getenv("TMPDIR");
      if (v414)
        v415 = v414;
      else
        v415 = "";
      std::string::basic_string[abi:ne180100]<0>(v672, v415);
      v416 = v672[23];
      if (v672[23] < 0)
        v416 = *(_QWORD *)&v672[8];
      if (!v416)
      {
        v430 = *(NSObject ***)(v44 + 8);
        if (v430)
        {
          v431 = *v430;
          if (!*v430)
          {
LABEL_883:
            memset(&v631, 0, sizeof(v631));
            goto LABEL_884;
          }
        }
        else
        {
          v431 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v431, OS_LOG_TYPE_ERROR))
        {
          buf.st_dev = 136315394;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1469;
          _os_log_impl(&dword_1B5ED0000, v431, OS_LOG_TYPE_ERROR, "%25s:%-5d Empty temp path", (uint8_t *)&buf, 0x12u);
        }
        goto LABEL_883;
      }
      v417 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v418 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      v419 = CFUUIDCreateString(v417, v418);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, v419);
      v420 = v672;
      if (v672[23] >= 0)
      {
        v421 = v672[23];
      }
      else
      {
        v421 = *(_QWORD *)&v672[8];
        v420 = *(_BYTE **)v672;
      }
      if (v420[v421 - 1] != 47)
      {
        v422 = &buf;
        std::string::basic_string[abi:ne180100]((uint64_t)&buf, v421 + 1);
        if ((buf.st_gid & 0x80000000) != 0)
          v422 = *(stat **)&buf.st_dev;
        if (v421)
        {
          if (v672[23] >= 0)
            v423 = v672;
          else
            v423 = *(_BYTE **)v672;
          memmove(v422, v423, v421);
        }
        *(_WORD *)((char *)&v422->st_dev + v421) = 47;
        if ((v672[23] & 0x80000000) != 0)
          operator delete(*(void **)v672);
        *(_OWORD *)v672 = *(_OWORD *)&buf.st_dev;
        *(_QWORD *)&v672[16] = *(_QWORD *)&buf.st_uid;
      }
      if (!valuePtr.__r_.__value_.__r.__words[0])
      {
        v569 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v569, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)valuePtr.__r_.__value_.__l.__data_, (uint64_t)&v634);
      v424 = std::string::append(&v634, ".ir", 3uLL);
      v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf.st_uid = *((_QWORD *)&v424->__r_.__value_.__l + 2);
      *(_OWORD *)&buf.st_dev = v425;
      v424->__r_.__value_.__l.__size_ = 0;
      v424->__r_.__value_.__r.__words[2] = 0;
      v424->__r_.__value_.__r.__words[0] = 0;
      if ((buf.st_gid & 0x80000000) == 0)
        v426 = (const std::string::value_type *)&buf;
      else
        v426 = *(const std::string::value_type **)&buf.st_dev;
      if ((buf.st_gid & 0x80000000) == 0)
        v427 = HIBYTE(buf.st_gid);
      else
        v427 = buf.st_ino;
      std::string::append((std::string *)v672, v426, v427);
      if (SHIBYTE(buf.st_gid) < 0)
        operator delete(*(void **)&buf.st_dev);
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v634.__r_.__value_.__l.__data_);
      v428 = *(NSObject ***)(v44 + 8);
      if (!v428)
      {
        v429 = MEMORY[0x1E0C81028];
LABEL_872:
        if (os_log_type_enabled(v429, OS_LOG_TYPE_DEFAULT))
        {
          v432 = v672;
          if (v672[23] < 0)
            v432 = *(_BYTE **)v672;
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1479;
          HIWORD(buf.st_uid) = 2080;
          *(_QWORD *)&buf.st_gid = v432;
          _os_log_impl(&dword_1B5ED0000, v429, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Generated random string for temp file: %s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_876;
      }
      v429 = *v428;
      if (*v428)
        goto LABEL_872;
LABEL_876:
      v631 = *(std::string *)v672;
      memset(v672, 0, 24);
      if (valuePtr.__r_.__value_.__r.__words[0])
        CFRelease(valuePtr.__r_.__value_.__l.__data_);
      if (v418)
        CFRelease(v418);
LABEL_884:
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      MIL2BNNS::getCachedIRLocation((std::string *)v672, (const __CFDictionary *)v44, theDict);
      v433 = v672[23];
      if (v672[23] < 0)
        v433 = *(_QWORD *)&v672[8];
      if (!v433)
        goto LABEL_895;
      v434 = HIBYTE(v631.__r_.__value_.__r.__words[2]);
      if ((v631.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v434 = v631.__r_.__value_.__l.__size_;
      if (!v434)
      {
LABEL_895:
        v437 = 0;
        goto LABEL_902;
      }
      BNNSGraphCompileOptionsSetOutputPath();
      v435 = *(NSObject ***)(v44 + 8);
      if (!v435)
      {
        v436 = MEMORY[0x1E0C81028];
LABEL_897:
        if (os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT))
        {
          v438 = &v631;
          if ((v631.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v438 = (std::string *)v631.__r_.__value_.__r.__words[0];
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1368;
          HIWORD(buf.st_uid) = 2080;
          *(_QWORD *)&buf.st_gid = v438;
          _os_log_impl(&dword_1B5ED0000, v436, OS_LOG_TYPE_DEFAULT, "%25s:%-5d creating random compiled IR file: %s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_901;
      }
      v436 = *v435;
      if (*v435)
        goto LABEL_897;
LABEL_901:
      v437 = 1;
LABEL_902:
      *(_QWORD *)(v44 + 144) = BNNSGraphCompileFromFile_v2();
      *(_QWORD *)(v44 + 152) = v439;
      v440 = *(_QWORD *)(v44 + 144);
      v441 = v437 ^ 1;
      if (v440)
        v441 = 1;
      if ((v441 & 1) == 0)
      {
        v442 = *(NSObject ***)(v44 + 8);
        if (v442)
        {
          v443 = *v442;
          if (!*v442)
          {
LABEL_911:
            BNNSGraphCompileOptionsSetOutputPath();
            v440 = BNNSGraphCompileFromFile_v2();
            v437 = 0;
            *(_QWORD *)(v44 + 144) = v440;
            *(_QWORD *)(v44 + 152) = v444;
            goto LABEL_912;
          }
        }
        else
        {
          v443 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v443, OS_LOG_TYPE_DEFAULT))
        {
          buf.st_dev = 136315394;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1383;
          _os_log_impl(&dword_1B5ED0000, v443, OS_LOG_TYPE_DEFAULT, "%25s:%-5d doSecondaryCacheIRFile fallback: compile using default output path", (uint8_t *)&buf, 0x12u);
        }
        goto LABEL_911;
      }
LABEL_912:
      if (!v440)
      {
        v577 = *(NSObject ***)(v44 + 8);
        if (v577)
          v578 = *v577;
        else
          v578 = 0;
        if (os_log_type_enabled(v578, OS_LOG_TYPE_ERROR))
        {
          v579 = &v629;
          if ((v629.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v579 = (std::string *)v629.__r_.__value_.__r.__words[0];
          buf.st_dev = 136315906;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1396;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = -66743;
          LOWORD(buf.st_rdev) = 2080;
          *(_QWORD *)((char *)&buf.st_rdev + 2) = v579;
          _os_log_impl(&dword_1B5ED0000, v578, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [mGraph.data == nullptr is false]: \"unable to compile program %s\"", (uint8_t *)&buf, 0x22u);
        }
        v580 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v580 = &off_1E69EE218;
        v580[2] = -66743;
      }
      BNNSGraphCompileOptionsDestroy();
      v445 = *(NSObject ***)(v44 + 8);
      if (v445)
      {
        v446 = *v445;
        if (!*v445)
          goto LABEL_921;
      }
      else
      {
        v446 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v446, OS_LOG_TYPE_DEFAULT))
      {
        v447 = &v629;
        if ((v629.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v447 = (std::string *)v629.__r_.__value_.__r.__words[0];
        buf.st_dev = 136315650;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1400;
        HIWORD(buf.st_uid) = 2080;
        *(_QWORD *)&buf.st_gid = v447;
        _os_log_impl(&dword_1B5ED0000, v446, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully loaded \"%s\"", (uint8_t *)&buf, 0x1Cu);
      }
LABEL_921:
      if (v437)
      {
        valuePtr.__r_.__value_.__r.__words[0] = v44 + 328;
        valuePtr.__r_.__value_.__s.__data_[8] = 1;
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v44 + 328));
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&buf, (char *)&v631);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v634, v672);
        std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&buf, (const std::__fs::filesystem::path *)&v634, 0);
        if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v634.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.st_gid) < 0)
          operator delete(*(void **)&buf.st_dev);
        *(_BYTE *)(v44 + 224) = 1;
        v448 = *(NSObject ***)(v44 + 8);
        if (v448)
        {
          v449 = *v448;
          if (!*v448)
          {
LABEL_934:
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&valuePtr);
            goto LABEL_935;
          }
        }
        else
        {
          v449 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v449, OS_LOG_TYPE_DEFAULT))
        {
          v450 = v672;
          if (v672[23] < 0)
            v450 = *(_BYTE **)v672;
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1406;
          HIWORD(buf.st_uid) = 2080;
          *(_QWORD *)&buf.st_gid = v450;
          _os_log_impl(&dword_1B5ED0000, v449, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully cached compiled IR file using secondary method: %s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_934;
      }
LABEL_935:
      if (!MIL2BNNS::loadContext(v44, *(_QWORD *)(v44 + 144), *(_QWORD *)(v44 + 152)))
      {
        v521 = *(NSObject ***)(v44 + 8);
        if (v521)
          v522 = *v521;
        else
          v522 = 0;
        if (os_log_type_enabled(v522, OS_LOG_TYPE_ERROR))
        {
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 1411;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = -10867;
          _os_log_impl(&dword_1B5ED0000, v522, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [!validContext is false]: \"Unable to load BNNS Context\"", (uint8_t *)&buf, 0x18u);
        }
        v524 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v524 = &off_1E69EE218;
        v524[2] = -10867;
      }
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      if (SHIBYTE(v631.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v631.__r_.__value_.__l.__data_);
LABEL_940:
      MIL2BNNS::loadModel((MIL2BNNS *)v44, theDict);
      v451 = *(NSObject ***)(v44 + 8);
      if (v451)
      {
        v452 = *v451;
        if (!*v451)
          goto LABEL_946;
      }
      else
      {
        v452 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v452, OS_LOG_TYPE_DEFAULT))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNetImpl.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 1416;
        _os_log_impl(&dword_1B5ED0000, v452, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS constructed.", (uint8_t *)&buf, 0x12u);
      }
LABEL_946:
      if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v632.__r_.__value_.__l.__data_);
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v633.__r_.__value_.__l.__data_);
      if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v625.__r_.__value_.__l.__data_);
      if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v626.__r_.__value_.__l.__data_);
      if (SHIBYTE(v627.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v627.__r_.__value_.__l.__data_);
      if (SHIBYTE(v628.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v628.__r_.__value_.__l.__data_);
      if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v629.__r_.__value_.__l.__data_);
      v453 = *v586;
      *v586 = v44;
      if (v453)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v453 + 8))(v453);
        v44 = *v586;
      }
      v454 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
      *(_DWORD *)v672 = 0;
      v4 = v586;
      std::vector<float>::vector(&buf, v454, v672);
      v455 = *v599;
      if (*v599)
      {
        v456 = *v455;
        if (!*v455)
          goto LABEL_968;
      }
      else
      {
        v456 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v456, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v672 = 136315394;
        *(_QWORD *)&v672[4] = "NeuralNet.cpp";
        *(_WORD *)&v672[12] = 1024;
        *(_DWORD *)&v672[14] = 232;
        _os_log_impl(&dword_1B5ED0000, v456, OS_LOG_TYPE_DEBUG, "%25s:%-5d Run processing once to prewarm the filters.", v672, 0x12u);
      }
LABEL_968:
      (*(void (**)(uint64_t, stat *))(*(_QWORD *)*v586 + 72))(*v586, &buf);
      if (*(_QWORD *)&buf.st_dev)
      {
        buf.st_ino = *(_QWORD *)&buf.st_dev;
        operator delete(*(void **)&buf.st_dev);
      }
      if (SHIBYTE(v638.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v638.__r_.__value_.__l.__data_);
      if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v637.__r_.__value_.__l.__data_);
      if ((v636[31] & 0x80000000) != 0)
        operator delete(*(void **)&v636[8]);
      if ((v636[7] & 0x80000000) != 0)
        operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) != 0)
      {
        v386 = *(void **)__p;
        goto LABEL_980;
      }
LABEL_981:
      if (!*v4)
      {
        if (*v599)
          v458 = **v599;
        else
          v458 = 0;
        v483 = -10875;
        if (os_log_type_enabled(v458, OS_LOG_TYPE_ERROR))
        {
          buf.st_dev = 136315650;
          *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 260;
          HIWORD(buf.st_uid) = 1024;
          buf.st_gid = -10875;
          v484 = "%25s:%-5d EXCEPTION (%d) [pNeuralNetImpl == nullptr is false]: \"NeuralNet implementation not initialized.\"";
          v485 = v458;
          v486 = 24;
LABEL_1014:
          _os_log_impl(&dword_1B5ED0000, v485, OS_LOG_TYPE_ERROR, v484, (uint8_t *)&buf, v486);
        }
LABEL_1015:
        v487 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v487 = &off_1E69EE218;
        v487[2] = v483;
      }
      if (v620)
        CFRelease(v620);
      return v4;
    case 4:
      v31 = *v599;
      if (*v599)
      {
        v32 = *v31;
        if (!*v31)
          goto LABEL_95;
      }
      else
      {
        v32 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 246;
        _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing MIL2BNNS_PREPROCESSED NeuralNet implementation.", (uint8_t *)&buf, 0x12u);
      }
LABEL_95:
      NeuralNet::getModelInformationFromPlist((uint64_t)&buf, (uint64_t)v4, theDict);
      v39 = buf.st_gen;
      v40 = operator new();
      if (SHIBYTE(buf.st_atimespec.tv_nsec) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v672, *(const std::string::value_type **)&buf.st_rdev, buf.st_atimespec.tv_sec);
      }
      else
      {
        *(_OWORD *)v672 = *(_OWORD *)&buf.st_rdev;
        *(_QWORD *)&v672[16] = buf.st_atimespec.tv_nsec;
      }
      if (SHIBYTE(buf.st_ctimespec.tv_sec) < 0)
      {
        std::string::__init_copy_ctor_external(&v634, (const std::string::value_type *)buf.st_mtimespec.tv_sec, buf.st_mtimespec.tv_nsec);
      }
      else
      {
        *(timespec *)&v634.__r_.__value_.__l.__data_ = buf.st_mtimespec;
        v634.__r_.__value_.__r.__words[2] = buf.st_ctimespec.tv_sec;
      }
      if (SHIBYTE(buf.st_birthtimespec.tv_nsec) < 0)
        std::string::__init_copy_ctor_external(&v633, (const std::string::value_type *)buf.st_ctimespec.tv_nsec, buf.st_birthtimespec.tv_sec);
      else
        v633 = *(std::string *)&buf.st_ctimespec.tv_nsec;
      if (SHIBYTE(buf.st_flags) < 0)
        std::string::__init_copy_ctor_external(&v632, (const std::string::value_type *)buf.st_size, buf.st_blocks);
      else
        v632 = *(std::string *)&buf.st_size;
      NeuralNetImpl::NeuralNetImpl(v40, *v599);
      *(_QWORD *)v40 = &off_1E69D6E68;
      if ((v672[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v40 + 40), *(const std::string::value_type **)v672, *(std::string::size_type *)&v672[8]);
      }
      else
      {
        *(_OWORD *)(v40 + 40) = *(_OWORD *)v672;
        *(_QWORD *)(v40 + 56) = *(_QWORD *)&v672[16];
      }
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v40 + 64), v633.__r_.__value_.__l.__data_, v633.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v40 + 64) = v633;
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v40 + 88), v634.__r_.__value_.__l.__data_, v634.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v40 + 88) = v634;
      *(_QWORD *)(v40 + 120) = 0;
      *(_DWORD *)(v40 + 112) = v39;
      *(_QWORD *)(v40 + 128) = 0;
      *(_QWORD *)(v40 + 136) = 0;
      *(_OWORD *)(v40 + 160) = 0u;
      v52 = (const void **)(v40 + 160);
      *(_OWORD *)(v40 + 280) = 0u;
      *(_OWORD *)(v40 + 176) = 0u;
      *(_OWORD *)(v40 + 192) = 0u;
      *(_OWORD *)(v40 + 208) = 0u;
      *(_BYTE *)(v40 + 224) = 0;
      *(_OWORD *)(v40 + 232) = 0u;
      *(_OWORD *)(v40 + 248) = 0u;
      *(_OWORD *)(v40 + 264) = 0u;
      *(_OWORD *)(v40 + 296) = 0u;
      caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v40 + 328));
      v53 = *(NSObject ***)(v40 + 8);
      if (v53)
      {
        v54 = *v53;
        if (!*v53)
          goto LABEL_203;
      }
      else
      {
        v54 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1503;
        _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Construct MIL2BNNS.", __p, 0x12u);
      }
LABEL_203:
      if (!CFDictionaryContainsKey(theDict, CFSTR("bnnsdict")))
      {
        v539 = *(NSObject ***)(v40 + 8);
        if (v539)
          v540 = *v539;
        else
          v540 = 0;
        if (os_log_type_enabled(v540, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1512;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -66743;
          _os_log_impl(&dword_1B5ED0000, v540, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"bnnsdict not found in top level dictionary.\"", __p, 0x18u);
        }
        v552 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v552 = &off_1E69EE218;
        v552[2] = -66743;
      }
      v64 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("bnnsdict"));
      v65 = CFDictionaryGetValue(v64, CFSTR("bnnsir"));
      v66 = v65;
      if (v65)
        CFRetain(v65);
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)__p, v66);
      v67 = *v52;
      v68 = *(const __CFData **)__p;
      *v52 = *(const void **)__p;
      *(_QWORD *)__p = v67;
      if (v67)
      {
        CFRelease(v67);
        v68 = (const __CFData *)*v52;
      }
      *(_QWORD *)(v40 + 152) = CFDataGetLength(v68);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v40 + 160));
      *(_QWORD *)(v40 + 144) = BytePtr;
      v70 = *(NSObject ***)(v40 + 8);
      if (v70)
      {
        v71 = *v70;
        if (!*v70)
          goto LABEL_304;
      }
      else
      {
        v71 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1510;
        _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bnnsdict found in top level dictionary, data loaded.", __p, 0x12u);
        BytePtr = *(const UInt8 **)(v40 + 144);
      }
LABEL_304:
      if (!MIL2BNNS::loadContext(v40, (uint64_t)BytePtr, *(_QWORD *)(v40 + 152)))
      {
        v517 = *(NSObject ***)(v40 + 8);
        if (v517)
          v518 = *v517;
        else
          v518 = 0;
        if (os_log_type_enabled(v518, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1517;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = -10867;
          _os_log_impl(&dword_1B5ED0000, v518, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [!validContext is false]: \"Unable to load BNNS Context\"", __p, 0x18u);
        }
        v520 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v520 = &off_1E69EE218;
        v520[2] = -10867;
      }
      MIL2BNNS::loadModel((MIL2BNNS *)v40, theDict);
      v133 = *(NSObject ***)(v40 + 8);
      if (v133)
      {
        v134 = *v133;
        if (!*v133)
          goto LABEL_311;
      }
      else
      {
        v134 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1521;
        _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS constructed.", __p, 0x12u);
      }
LABEL_311:
      if (SHIBYTE(v632.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v632.__r_.__value_.__l.__data_);
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v633.__r_.__value_.__l.__data_);
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v634.__r_.__value_.__l.__data_);
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      v135 = *v586;
      *v586 = v40;
      if (v135)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
        v40 = *v586;
      }
      v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
      *(_DWORD *)v672 = 0;
      v4 = v586;
      std::vector<float>::vector(__p, v136, v672);
      v137 = *v599;
      if (*v599)
      {
        v138 = *v137;
        if (!*v137)
          goto LABEL_744;
      }
      else
      {
        v138 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v672 = 136315394;
        *(_QWORD *)&v672[4] = "NeuralNet.cpp";
        *(_WORD *)&v672[12] = 1024;
        *(_DWORD *)&v672[14] = 254;
        _os_log_impl(&dword_1B5ED0000, v138, OS_LOG_TYPE_DEBUG, "%25s:%-5d Run processing once to prewarm the filters.", v672, 0x12u);
      }
LABEL_744:
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)*v4 + 72))(*v4, __p);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      goto LABEL_746;
    default:
      if (*v599)
        v547 = **v599;
      else
        v547 = 0;
      v483 = -66743;
      if (!os_log_type_enabled(v547, OS_LOG_TYPE_ERROR))
        goto LABEL_1015;
      buf.st_dev = 136315906;
      *(_QWORD *)&buf.st_mode = "NeuralNet.cpp";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 240;
      HIWORD(buf.st_uid) = 1024;
      buf.st_gid = -66743;
      LOWORD(buf.st_rdev) = 1024;
      *(dev_t *)((char *)&buf.st_rdev + 2) = v28;
      v484 = "%25s:%-5d EXCEPTION (%d): \"Unknown value for mType (%u).\"";
      v485 = v547;
      v486 = 30;
      goto LABEL_1014;
  }
}

void sub_1B6211E08(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6211E10(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6211E18(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6211E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;

  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v45 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v45 + 3));
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v45, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v48 = *a15;
  *a15 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  _Unwind_Resume(a1);
}

void sub_1B6211E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;

  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v45 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v45 + 3));
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v45, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v48 = *a15;
  *a15 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  _Unwind_Resume(a1);
}

void sub_1B6211E38()
{
  JUMPOUT(0x1B6213400);
}

void sub_1B6211E44()
{
  JUMPOUT(0x1B6213210);
}

void sub_1B6211E4C()
{
  JUMPOUT(0x1B621330CLL);
}

void sub_1B6211E58()
{
  JUMPOUT(0x1B6213118);
}

void sub_1B6211E60()
{
  JUMPOUT(0x1B6213430);
}

void sub_1B6211E94()
{
  JUMPOUT(0x1B6213244);
}

void sub_1B6211E9C()
{
  JUMPOUT(0x1B621333CLL);
}

void sub_1B6211EA4()
{
  JUMPOUT(0x1B621314CLL);
}

void sub_1B6211EAC()
{
  JUMPOUT(0x1B6213448);
}

void sub_1B6211EE0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a71;
  void *a72;
  char a73;
  int v73;
  void *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  NSObject **v83;
  NSObject *v84;
  uint64_t v85;
  _DWORD *exception;
  void *v87;
  void *v88;
  uint64_t v89;

  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (*(char *)(v77 - 169) < 0)
  {
    operator delete(*(void **)(v77 - 192));
    if ((v73 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v73)
  {
LABEL_8:
    if (v76)
    {
      p_shared_owners = (unint64_t *)&v76->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (a2 == 4)
    {
      v82 = __cxa_begin_catch(a1);
      v83 = *(NSObject ***)(v75 + 8);
      if (v83)
        v84 = *v83;
      else
        v84 = 0;
      if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
      {
        v85 = (*(uint64_t (**)(void *))(*(_QWORD *)v82 + 16))(v82);
        LODWORD(STACK[0x280]) = 136315906;
        STACK[0x284] = (unint64_t)"NeuralNetImpl.cpp";
        LOWORD(STACK[0x28C]) = 1024;
        LODWORD(STACK[0x28E]) = 1055;
        LOWORD(STACK[0x292]) = 1024;
        LODWORD(STACK[0x294]) = -66743;
        LOWORD(STACK[0x298]) = 2080;
        STACK[0x29A] = v85;
        _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)&STACK[0x280], 0x22u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69EE218;
      exception[2] = -66743;
    }
    v87 = *(void **)(v75 + 400);
    if (v87)
    {
      *(_QWORD *)(v75 + 408) = v87;
      operator delete(v87);
    }
    STACK[0x280] = a22;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
    v88 = *(void **)(v75 + 352);
    if (v88)
    {
      *(_QWORD *)(v75 + 360) = v88;
      operator delete(v88);
    }
    v89 = *(_QWORD *)(v75 + 344);
    *(_QWORD *)(v75 + 344) = 0;
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a14);
    if (*(char *)(v75 + 135) < 0)
      operator delete(*a16);
    if (*(char *)(v75 + 111) < 0)
      operator delete(*a10);
    if (*(char *)(v75 + 87) < 0)
      operator delete(*a11);
    if (*(char *)(v75 + 63) < 0)
      operator delete(*a12);
    *(_QWORD *)v75 = off_1E69D6BC8;
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v75 + 24);
    if (a66 < 0)
      operator delete(a61);
    if (a71 < 0)
      operator delete(a68);
    if (a73 < 0)
      operator delete(a72);
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
    if (SLOBYTE(STACK[0x237]) < 0)
      operator delete((void *)STACK[0x220]);
    MEMORY[0x1BCC95CEC](v75, 0x10F3C40D56EFA3DLL);
    JUMPOUT(0x1B6212D44);
  }
  __cxa_free_exception(v74);
  goto LABEL_8;
}

void sub_1B6211F18()
{
  void *v0;
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  __cxa_free_exception(v0);
  JUMPOUT(0x1B6212AF4);
}

void sub_1B6211F34(void *a1, int a2)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v8;
  NSObject **v9;
  NSObject *v10;
  uint64_t v11;
  _DWORD *exception;

  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (*(char *)(v5 - 169) < 0)
  {
    operator delete(*(void **)(v5 - 192));
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if (a2 == 4)
      {
        v8 = __cxa_begin_catch(a1);
        v9 = *(NSObject ***)(v4 + 8);
        if (v9)
          v10 = *v9;
        else
          v10 = 0;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 16))(v8);
          LODWORD(STACK[0x280]) = 136315906;
          STACK[0x284] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x28C]) = 1024;
          LODWORD(STACK[0x28E]) = 1055;
          LOWORD(STACK[0x292]) = 1024;
          LODWORD(STACK[0x294]) = -66743;
          LOWORD(STACK[0x298]) = 2080;
          STACK[0x29A] = v11;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)&STACK[0x280], 0x22u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69EE218;
        exception[2] = -66743;
      }
      JUMPOUT(0x1B6212C28);
    }
  }
  else if (!v2)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v3);
  goto LABEL_8;
}

void sub_1B6211F6C()
{
  void *v0;
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  __cxa_free_exception(v0);
  JUMPOUT(0x1B6212B34);
}

void sub_1B6211F88()
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  JUMPOUT(0x1B62121ACLL);
}

void sub_1B6211FB8()
{
  JUMPOUT(0x1B6212490);
}

void sub_1B6212070()
{
  void *v0;

  JUMPOUT(0x1B6212170);
}

void sub_1B621207C()
{
  JUMPOUT(0x1B6212170);
}

void sub_1B621208C()
{
  void *v0;

  v0 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v0;
    operator delete(v0);
  }
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  JUMPOUT(0x1B6213458);
}

void sub_1B62120B0()
{
  JUMPOUT(0x1B6212E6CLL);
}

void sub_1B62120B8()
{
  JUMPOUT(0x1B6212C8CLL);
}

void sub_1B62120C0()
{
  JUMPOUT(0x1B6212E80);
}

void sub_1B62120C8()
{
  JUMPOUT(0x1B6212CA0);
}

void sub_1B62120D0()
{
  JUMPOUT(0x1B6212E90);
}

void sub_1B62120D8()
{
  JUMPOUT(0x1B6212CB4);
}

void sub_1B62120E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  uint64_t v44;
  void **v45;
  void **v46;
  uint64_t v47;
  uint64_t v49;

  if (*(char *)(v44 + 87) < 0)
    operator delete(*v46);
  if (*(char *)(v44 + 63) < 0)
    operator delete(*v45);
  *(_QWORD *)v44 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v44 + 24);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (*(char *)(v47 - 169) < 0)
    operator delete(*(void **)(v47 - 192));
  MEMORY[0x1BCC95CEC](v44, 0x10F3C40BE73F9A6);
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v49 = *a15;
  *a15 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  _Unwind_Resume(a1);
}

void sub_1B62120E8()
{
  JUMPOUT(0x1B6212CC8);
}

void sub_1B62120F0()
{
  JUMPOUT(0x1B6212FE0);
}

void sub_1B62120F8()
{
  JUMPOUT(0x1B6212FF0);
}

void sub_1B6212100()
{
  JUMPOUT(0x1B6212EB4);
}

void sub_1B6212108()
{
  JUMPOUT(0x1B6212EC4);
}

void sub_1B6212110()
{
  JUMPOUT(0x1B6212CECLL);
}

void sub_1B6212118()
{
  JUMPOUT(0x1B6212ED4);
}

void sub_1B6212120()
{
  JUMPOUT(0x1B6212CFCLL);
}

void sub_1B6212128()
{
  JUMPOUT(0x1B6213014);
}

void sub_1B6212130()
{
  JUMPOUT(0x1B6212EE4);
}

void sub_1B6212138()
{
  JUMPOUT(0x1B6212D0CLL);
}

void sub_1B6212140()
{
  JUMPOUT(0x1B6213024);
}

void sub_1B6212148()
{
  JUMPOUT(0x1B6212D1CLL);
}

void sub_1B6212150()
{
  JUMPOUT(0x1B6213034);
}

void sub_1B6212158()
{
  JUMPOUT(0x1B6212D2CLL);
}

void sub_1B6212160()
{
  JUMPOUT(0x1B6213044);
}

void sub_1B621217C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34)
{
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a34);
  applesauce::CF::StringRef::~StringRef((const void **)(v34 - 192));
  JUMPOUT(0x1B6212D4CLL);
}

void sub_1B62121BC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62121C4(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  NSObject **v5;
  NSObject *v6;
  void *v7;
  NSObject **v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a2)
  {
    if (a2 == 3)
    {
      v4 = __cxa_begin_catch(a1);
      v5 = *(NSObject ***)(v2 + 8);
      if (v5)
      {
        v6 = *v5;
        if (!*v5)
          goto LABEL_24;
      }
      else
      {
        v6 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v15 = v4[2];
        v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        LODWORD(STACK[0x300]) = 136315906;
        STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
        LOWORD(STACK[0x30C]) = 1024;
        LODWORD(STACK[0x30E]) = 1374;
        LOWORD(STACK[0x312]) = 1024;
        LODWORD(STACK[0x314]) = v15;
        LOWORD(STACK[0x318]) = 2080;
        STACK[0x31A] = v12;
        _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with CAException %d: %s.", (uint8_t *)&STACK[0x300], 0x22u);
      }
    }
    else
    {
      v7 = __cxa_begin_catch(a1);
      v8 = *(NSObject ***)(v2 + 8);
      if (a2 == 2)
      {
        v9 = v7;
        if (v8)
        {
          v10 = *v8;
          if (!*v8)
            goto LABEL_24;
        }
        else
        {
          v10 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 3) + 16))(*((_QWORD *)v9 + 3));
          v16 = *((_DWORD *)v9 + 4);
          v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
          LODWORD(STACK[0x300]) = 136316162;
          STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x30C]) = 1024;
          LODWORD(STACK[0x30E]) = 1376;
          LOWORD(STACK[0x312]) = 2080;
          STACK[0x314] = v14;
          LOWORD(STACK[0x31C]) = 1024;
          LODWORD(STACK[0x31E]) = v16;
          LOWORD(STACK[0x322]) = 2080;
          STACK[0x324] = v13;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with %s error %d: %s.", (uint8_t *)&STACK[0x300], 0x2Cu);
        }
      }
      else
      {
        if (v8)
        {
          v11 = *v8;
          if (!*v8)
            goto LABEL_24;
        }
        else
        {
          v11 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(STACK[0x300]) = 136315394;
          STACK[0x304] = (unint64_t)"NeuralNetImpl.cpp";
          LOWORD(STACK[0x30C]) = 1024;
          LODWORD(STACK[0x30E]) = 1378;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BNNSGraphCompileFromFile failed with unknown exception.", (uint8_t *)&STACK[0x300], 0x12u);
        }
      }
    }
LABEL_24:
    __cxa_end_catch();
    JUMPOUT(0x1B620FD04);
  }
  sub_1B6212F24();
}

void sub_1B62123FC()
{
  JUMPOUT(0x1B6212D94);
}

void sub_1B6212408(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212410(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212418(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212424(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B621242C()
{
  JUMPOUT(0x1B6212A70);
}

void sub_1B6212438()
{
  JUMPOUT(0x1B6212A7CLL);
}

void sub_1B6212454()
{
  JUMPOUT(0x1B621245CLL);
}

void sub_1B6212468()
{
  JUMPOUT(0x1B6212470);
}

void sub_1B62124A0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62124B0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62124B8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62124C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a73;
  void *a74;
  char a75;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;

  v77 = STACK[0x240];
  STACK[0x240] = 0;
  if (v77)
    (*(void (**)(unint64_t))(*(_QWORD *)v77 + 8))(v77);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (*(char *)(v76 - 169) < 0)
    operator delete(*(void **)(v76 - 192));
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  v78 = *(void **)(v75 + 400);
  if (v78)
  {
    *(_QWORD *)(v75 + 408) = v78;
    operator delete(v78);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  v79 = *(void **)(v75 + 352);
  if (v79)
  {
    *(_QWORD *)(v75 + 360) = v79;
    operator delete(v79);
  }
  v80 = *(_QWORD *)(v75 + 344);
  *(_QWORD *)(v75 + 344) = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a14);
  if (*(char *)(v75 + 135) < 0)
    operator delete(*a16);
  if (*(char *)(v75 + 111) < 0)
    operator delete(*a10);
  if (*(char *)(v75 + 87) < 0)
    operator delete(*a11);
  if (*(char *)(v75 + 63) < 0)
    operator delete(*a12);
  *(_QWORD *)v75 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v75 + 24);
  if (a66 < 0)
    operator delete(a61);
  if (a73 < 0)
    operator delete(a68);
  if (a75 < 0)
    operator delete(a74);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  MEMORY[0x1BCC95CEC](v75, 0x10F3C40D56EFA3DLL);
  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6212654()
{
  JUMPOUT(0x1B6212DC4);
}

void sub_1B621265C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a73;
  void *a74;
  char a75;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;

  v76 = *(void **)(v75 + 400);
  if (v76)
  {
    *(_QWORD *)(v75 + 408) = v76;
    operator delete(v76);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  v77 = *(void **)(v75 + 352);
  if (v77)
  {
    *(_QWORD *)(v75 + 360) = v77;
    operator delete(v77);
  }
  v78 = *(_QWORD *)(v75 + 344);
  *(_QWORD *)(v75 + 344) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a14);
  if (*(char *)(v75 + 135) < 0)
    operator delete(*a16);
  if (*(char *)(v75 + 111) < 0)
    operator delete(*a10);
  if (*(char *)(v75 + 87) < 0)
    operator delete(*a11);
  if (*(char *)(v75 + 63) < 0)
    operator delete(*a12);
  *(_QWORD *)v75 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v75 + 24);
  if (a66 < 0)
    operator delete(a61);
  if (a73 < 0)
    operator delete(a68);
  if (a75 < 0)
    operator delete(a74);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  MEMORY[0x1BCC95CEC](v75, 0x10F3C40D56EFA3DLL);
  JUMPOUT(0x1B6212D44);
}

void sub_1B6212664()
{
  JUMPOUT(0x1B6212EA4);
}

void sub_1B621266C()
{
  JUMPOUT(0x1B6212CDCLL);
}

void sub_1B6212674()
{
  JUMPOUT(0x1B6213004);
}

void sub_1B621267C()
{
  JUMPOUT(0x1B6212EF4);
}

void sub_1B6212690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  uint64_t v45;

  ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v45 = *a15;
  *a15 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  _Unwind_Resume(a1);
}

void sub_1B62126A4()
{
  JUMPOUT(0x1B6212D4CLL);
}

void sub_1B62126B4()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x1B6212818);
}

void sub_1B62126C8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62126DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,const void *a42)
{
  uint64_t v42;

  if (a41 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a42);
  applesauce::CF::StringRef::~StringRef((const void **)(v42 - 192));
  JUMPOUT(0x1B6212D4CLL);
}

void sub_1B6212704()
{
  JUMPOUT(0x1B6212DA4);
}

void sub_1B621270C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212714(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B621271C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212724()
{
  unint64_t *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v1 = (std::__shared_weak_count *)STACK[0x288];
  if (STACK[0x288])
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    v4 = v0 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(unint64_t *))(*v0 + 16))(v0);
      JUMPOUT(0x1B62127D4);
    }
  }
  JUMPOUT(0x1B6212AF4);
}

void sub_1B6212798()
{
  std::__shared_weak_count *v0;
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = STACK[0x288];
  if (STACK[0x288])
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v1 + 16))(v1);
      JUMPOUT(0x1B62127D4);
    }
  }
  if (v0)
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x1B6212B34);
}

void sub_1B62127EC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B62127F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a45 < 0)
    operator delete(__p);
  JUMPOUT(0x1B6212814);
}

void sub_1B6212828(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  unint64_t v17;
  uint64_t v18;

  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  *a17 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a17 + 3);
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  MEMORY[0x1BCC95CEC](a17, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B621283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;

  STACK[0x280] = v44;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v45 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v45 + 3));
  STACK[0x280] = v46 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v45, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v48 = *a15;
  *a15 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  _Unwind_Resume(a1);
}

void sub_1B6212848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  unint64_t v17;
  uint64_t v18;

  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  *a17 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a17 + 3);
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  MEMORY[0x1BCC95CEC](a17, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6212854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;

  STACK[0x280] = a22;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v22 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 3));
  STACK[0x280] = v23 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v22, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6212860()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B6212A58);
}

void sub_1B6212934()
{
  JUMPOUT(0x1B6213460);
}

void sub_1B621293C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212944(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B621294C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212954()
{
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  JUMPOUT(0x1B6212A08);
}

void sub_1B621297C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212984(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,uint64_t a50,uint64_t a51,uint64_t a52,CFTypeRef a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a73;
  void *a74;
  char a75;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;

  CFRelease(cf);
  if (a49)
    CFRelease(a49);
  if (a53)
    CFRelease(a53);
  v76 = *(void **)(v75 + 400);
  if (v76)
  {
    *(_QWORD *)(v75 + 408) = v76;
    operator delete(v76);
  }
  STACK[0x280] = a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  v77 = *(void **)(v75 + 352);
  if (v77)
  {
    *(_QWORD *)(v75 + 360) = v77;
    operator delete(v77);
  }
  v78 = *(_QWORD *)(v75 + 344);
  *(_QWORD *)(v75 + 344) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a14);
  if (*(char *)(v75 + 135) < 0)
    operator delete(*a16);
  if (*(char *)(v75 + 111) < 0)
    operator delete(*a10);
  if (*(char *)(v75 + 87) < 0)
    operator delete(*a11);
  if (*(char *)(v75 + 63) < 0)
    operator delete(*a12);
  *(_QWORD *)v75 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v75 + 24);
  if (a66 < 0)
    operator delete(a61);
  if (a73 < 0)
    operator delete(a68);
  if (a75 < 0)
    operator delete(a74);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  MEMORY[0x1BCC95CEC](v75, 0x10F3C40D56EFA3DLL);
  JUMPOUT(0x1B6212D44);
}

void sub_1B6212A8C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212A94(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212A9C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212AA4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212AAC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212AB4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212ABC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v19 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v21;
    operator delete(v21);
  }
  v22 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v23;
    operator delete(v23);
  }
  v24 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v25;
    operator delete(v25);
  }
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *a17 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a17 + 3));
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](a17, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6212ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v19 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v21;
    operator delete(v21);
  }
  v22 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v23;
    operator delete(v23);
  }
  v24 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v25;
    operator delete(v25);
  }
  STACK[0x280] = v17;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *a17 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a17 + 3));
  STACK[0x280] = v18 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](a17, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6212C18(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212C20()
{
  __cxa_end_catch();
  JUMPOUT(0x1B6212C28);
}

void sub_1B6212D54(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212D5C()
{
  int v0;

  close(v0);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x1B6212DA4);
}

void sub_1B6212D74(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_1B6212F24();
}

void sub_1B6212D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, uint64_t a14, uint64_t *a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *a70;
  char a72;
  void *a73;
  char a74;
  uint64_t v74;
  void **v75;
  void **v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;

  if (*(char *)(v77 - 169) < 0)
    operator delete(*(void **)(v77 - 192));
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  STACK[0x300] = a20;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v79 = *(_QWORD *)(v74 + 248);
  *(_QWORD *)(v74 + 248) = 0;
  if (v79)
    MEMORY[0x1BCC95CC8](v79, 0x1000C8077774924);
  v80 = *(_QWORD *)(v74 + 240);
  *(_QWORD *)(v74 + 240) = 0;
  if (v80)
    MEMORY[0x1BCC95CC8](v80, 0x1000C8077774924);
  v81 = 0;
  while (1)
  {
    v82 = *(void **)(v74 + v81 + 192);
    if (v82)
    {
      *(_QWORD *)(v74 + v81 + 200) = v82;
      operator delete(v82);
    }
    v81 -= 24;
    if (v81 == -48)
    {
      if (*a22)
        CFRelease(*a22);
      v83 = *v76;
      if (*v76)
      {
        *(_QWORD *)(v74 + 128) = v83;
        operator delete(v83);
      }
      if (*(char *)(v74 + 111) < 0)
        operator delete(*a16);
      if (*(char *)(v74 + 87) < 0)
        operator delete(*a17);
      if (*(char *)(v74 + 63) < 0)
        operator delete(*v75);
      *(_QWORD *)v74 = off_1E69D6BC8;
      std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v74 + 24);
      if (a54 < 0)
        operator delete(a49);
      if (a61 < 0)
        operator delete(a56);
      if (a68 < 0)
        operator delete(a63);
      if (a72 < 0)
        operator delete(a70);
      if (a74 < 0)
        operator delete(a73);
      MEMORY[0x1BCC95CEC](v74, 0x10F3C40BE73F9A6);
      ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x280]);
      applesauce::CF::TypeRef::~TypeRef(&a44);
      applesauce::CF::StringRef::~StringRef(a13);
      v84 = *a15;
      *a15 = 0;
      if (v84)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1B6212F20(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  return sub_1B6212F24();
}

void sub_1B6212F24()
{
  JUMPOUT(0x1B6213480);
}

void sub_1B6212F30()
{
  uint64_t v0;
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  CFTypeRef *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  STACK[0x280] = v6;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  v8 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 248) = 0;
  if (v8)
    MEMORY[0x1BCC95CC8](v8, 0x1000C8077774924);
  v9 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 240) = 0;
  if (v9)
    MEMORY[0x1BCC95CC8](v9, 0x1000C8077774924);
  v10 = 0;
  while (1)
  {
    v11 = *(void **)(v0 + v10 + 192);
    if (v11)
    {
      *(_QWORD *)(v0 + v10 + 200) = v11;
      operator delete(v11);
    }
    v10 -= 24;
    if (v10 == -48)
    {
      if (*v5)
        CFRelease(*v5);
      v12 = *v4;
      if (*v4)
      {
        *(_QWORD *)(v0 + 128) = v12;
        operator delete(v12);
      }
      if (*(char *)(v0 + 111) < 0)
        operator delete(*v3);
      if (*(char *)(v0 + 87) < 0)
        operator delete(*v2);
      if (*(char *)(v0 + 63) < 0)
        operator delete(*v1);
      *(_QWORD *)v0 = off_1E69D6BC8;
      std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v0 + 24);
      if (SLOBYTE(STACK[0x237]) < 0)
        operator delete((void *)STACK[0x220]);
      if (SLOBYTE(STACK[0x257]) < 0)
        operator delete((void *)STACK[0x240]);
      if (SLOBYTE(STACK[0x277]) < 0)
        operator delete((void *)STACK[0x260]);
      if (*(char *)(v7 - 169) < 0)
        operator delete(*(void **)(v7 - 192));
      MEMORY[0x1BCC95CEC](v0, 0x10F3C40BE73F9A6);
      ModelPlistInfo::~ModelPlistInfo((void **)&STACK[0x300]);
      JUMPOUT(0x1B6213458);
    }
  }
}

void sub_1B6213078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, applesauce::CF::StringRef *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t *v44;
  uint64_t v46;

  applesauce::CF::TypeRef::~TypeRef((applesauce::CF::TypeRef *)&a44);
  applesauce::CF::StringRef::~StringRef(a13);
  v46 = *v44;
  *v44 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  _Unwind_Resume(a1);
}

void sub_1B6213080()
{
  JUMPOUT(0x1B6213088);
}

void sub_1B6213178()
{
  JUMPOUT(0x1B6213180);
}

void sub_1B6213270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v16 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v16;
    operator delete(v16);
  }
  v17 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v17;
    operator delete(v17);
  }
  v18 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v18;
    operator delete(v18);
  }
  v19 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v21;
    operator delete(v21);
  }
  v22 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v22;
    operator delete(v22);
  }
  STACK[0x280] = a14;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v14 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 3));
  STACK[0x280] = v15 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v14, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void sub_1B6213368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v24 = (void *)STACK[0x6A8];
  if (STACK[0x6A8])
  {
    STACK[0x6B0] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)STACK[0x690];
  if (STACK[0x690])
  {
    STACK[0x698] = (unint64_t)v25;
    operator delete(v25);
  }
  v26 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v26;
    operator delete(v26);
  }
  v27 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v27;
    operator delete(v27);
  }
  v28 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v28;
    operator delete(v28);
  }
  v29 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v29;
    operator delete(v29);
  }
  v30 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v30;
    operator delete(v30);
  }
  STACK[0x280] = a22;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  *v22 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 3));
  STACK[0x280] = v23 - 192;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  MEMORY[0x1BCC95CEC](v22, 0x10E1C401318458CLL);
  if (STACK[0x240])
    MEMORY[0x1BCC95CEC](STACK[0x240], 0x60C4044C4A2DFLL);
  STACK[0x280] = (unint64_t)&STACK[0x260];
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  JUMPOUT(0x1B6213458);
}

void applesauce::CF::StringRef::to_description(applesauce::CF::StringRef *this, const void *a2)
{
  const __CFString *v3;

  v3 = CFCopyDescription(a2);
  applesauce::CF::details::CFString_get_value<true>(v3, (uint64_t)this);
  if (v3)
    CFRelease(v3);
}

void sub_1B62134C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<FullyConnectedLayerBNNS<float>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = 0x1B810ECF56BE69C9 * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0x1B810ECF56BE69C9 * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 968 * ((968 * v6 - 968) / 0x3C8) + 968);
      *(_QWORD *)(a1 + 8) = &v4[121 * ((968 * v6 - 968) / 0x3C8) + 121];
      return;
    }
    if (a2 > 0x43B3D5AF9A723FLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = 0x1B810ECF56BE69C9 * ((v7 - (uint64_t)v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x21D9EAD7CD391FLL)
      v10 = 0x43B3D5AF9A723FLL;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(v10);
    v12 = &v11[968 * v5];
    v14 = &v11[968 * v13];
    bzero(v12, 968 * ((968 * v6 - 968) / 0x3C8) + 968);
    v15 = &v12[968 * ((968 * v6 - 968) / 0x3C8) + 968];
    v17 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(a1 + 8);
    if (v16 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v16)
        return;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18 * 8];
        v20 = &v16[v18];
        memcpy(&v12[v18 * 8 - 968], &v16[v18 - 121], 0x318uLL);
        *((_QWORD *)v19 - 21) = 0;
        *((_QWORD *)v19 - 20) = 0;
        *((_QWORD *)v19 - 22) = 0;
        *((_OWORD *)v19 - 11) = *(_OWORD *)&v16[v18 - 22];
        *((_QWORD *)v19 - 20) = v16[v18 - 20];
        *(v20 - 22) = 0;
        *(v20 - 21) = 0;
        *(v20 - 20) = 0;
        *((_QWORD *)v19 - 18) = 0;
        *((_QWORD *)v19 - 17) = 0;
        *((_QWORD *)v19 - 19) = 0;
        *(_OWORD *)(v19 - 152) = *(_OWORD *)&v16[v18 - 19];
        *((_QWORD *)v19 - 17) = v16[v18 - 17];
        *(v20 - 19) = 0;
        *(v20 - 18) = 0;
        *(v20 - 17) = 0;
        *((_QWORD *)v19 - 15) = 0;
        *((_QWORD *)v19 - 14) = 0;
        *((_QWORD *)v19 - 16) = 0;
        *((_OWORD *)v19 - 8) = *(_OWORD *)&v16[v18 - 16];
        *((_QWORD *)v19 - 14) = v16[v18 - 14];
        *(v20 - 16) = 0;
        *(v20 - 15) = 0;
        *(v20 - 14) = 0;
        *((_QWORD *)v19 - 12) = 0;
        *((_QWORD *)v19 - 11) = 0;
        *((_QWORD *)v19 - 13) = 0;
        *(_OWORD *)(v19 - 104) = *(_OWORD *)&v16[v18 - 13];
        *((_QWORD *)v19 - 11) = v16[v18 - 11];
        *(v20 - 13) = 0;
        *(v20 - 12) = 0;
        *(v20 - 11) = 0;
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 10) = 0;
        *((_OWORD *)v19 - 5) = *(_OWORD *)&v16[v18 - 10];
        *((_QWORD *)v19 - 8) = v16[v18 - 8];
        *(v20 - 10) = 0;
        *(v20 - 9) = 0;
        *(v20 - 8) = 0;
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *(_OWORD *)(v19 - 56) = *(_OWORD *)&v16[v18 - 7];
        *((_QWORD *)v19 - 5) = v16[v18 - 5];
        *(v20 - 7) = 0;
        *(v20 - 6) = 0;
        *(v20 - 5) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 4];
        *((_QWORD *)v19 - 2) = v16[v18 - 2];
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        *((_QWORD *)v19 - 1) = v16[v18 - 1];
        v18 -= 121;
      }
      while (&v16[v18] != v17);
      v21 = &v12[v18 * 8];
      v22 = *(_QWORD **)a1;
      v16 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (v16 != v22)
      {
        do
        {
          v16 -= 121;
          FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v16);
        }
        while (v16 != v22);
        v16 = v22;
      }
      if (!v16)
        return;
    }
    operator delete(v16);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v3[121 * a2];
    while (v4 != v23)
    {
      v4 -= 121;
      FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v4);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

void std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(v4 - 121);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void NeuralNet::getModelInformationFromPlist(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v7;
  BOOL v8;
  NSObject **v9;
  NSObject *v10;
  NSObject **v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  uint64_t v29;
  NSObject **v30;
  NSObject *v31;
  void *v32;
  const __CFString *v33;
  const __CFString *v34;
  void **v35;
  NSObject **v36;
  NSObject *v37;
  uint64_t v38;
  const __CFString *v39;
  const __CFString *v40;
  NSObject **v41;
  NSObject *v42;
  void **v43;
  NSObject **v44;
  NSObject *v45;
  uint64_t v46;
  const __CFString *v47;
  const __CFString *v48;
  void **v49;
  NSObject **v50;
  NSObject *v51;
  uint64_t v52;
  const __CFString *v53;
  const __CFString *v54;
  NSObject **v55;
  NSObject *v56;
  void **v57;
  NSObject **v58;
  NSObject *v59;
  unsigned int *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  NSObject **v64;
  NSObject *v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  NSObject **v69;
  NSObject *v70;
  _DWORD *v71;
  NSObject *v72;
  NSObject **v73;
  _DWORD *v74;
  NSObject *v75;
  NSObject **v76;
  _DWORD *v77;
  NSObject *v78;
  NSObject **v79;
  _DWORD *exception;
  NSObject *v81;
  NSObject **v82;
  _DWORD *v83;
  NSObject *v84;
  NSObject **v85;
  _DWORD *v86;
  void *v87[2];
  unsigned __int8 v88;
  std::string v89;
  const __CFString *v90;
  const __CFString *v91;
  void *__p[2];
  char v93;
  CFTypeRef cf;
  CFTypeRef v95;
  uint64_t *v96;
  _BYTE buf[30];
  __int16 v98;
  int v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v96 = *(uint64_t **)(a2 + 16);
  Value = CFDictionaryGetValue(theDict, CFSTR("NeuralNetImplementationType"));
  v7 = Value;
  if (!Value)
  {
    v95 = 0;
LABEL_12:
    v11 = *(NSObject ***)(a2 + 16);
    if (v11)
    {
      v12 = *v11;
      if (!*v11)
        goto LABEL_52;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      goto LABEL_52;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 348;
    v13 = "%25s:%-5d Model path not required for MIL2BNNS_PREPROCESSED";
    v14 = v12;
    v15 = 18;
LABEL_51:
    _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, v13, buf, v15);
    goto LABEL_52;
  }
  CFRetain(Value);
  v95 = v7;
  applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v95, (applesauce::CF::StringRef *)&cf);
  std::string::basic_string[abi:ne180100]<0>(__p, "MIL2BNNS_PREPROCESSED");
  v8 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
  if (v93 < 0)
    operator delete(__p[0]);
  if (cf)
    CFRelease(cf);
  if (v8)
    goto LABEL_12;
  if (CFDictionaryContainsKey(theDict, CFSTR("ModelNetPathBase")))
  {
    v9 = *(NSObject ***)(a2 + 16);
    if (v9)
    {
      v10 = *v9;
      if (!*v9)
      {
LABEL_25:
        v18 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("ModelNetPathBase"));
        v19 = v18;
        if (!v18)
        {
          v78 = 0;
          v91 = 0;
          v79 = *(NSObject ***)(a2 + 16);
          if (v79)
            v78 = *v79;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "NeuralNet.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 337;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = -66741;
            _os_log_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPathBase_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPathBase.\"", buf, 0x18u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69EE218;
          exception[2] = -66741;
        }
        CFRetain(v18);
        v91 = v19;
        v20 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("ModelNetPath"));
        v21 = v20;
        if (!v20)
        {
          v81 = 0;
          v90 = 0;
          v82 = *(NSObject ***)(a2 + 16);
          if (v82)
            v81 = *v82;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "NeuralNet.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 339;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = -66741;
            _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPathRelative_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPath.\"", buf, 0x18u);
          }
          v83 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v83 = &off_1E69EE218;
          v83[2] = -66741;
        }
        CFRetain(v20);
        v90 = v21;
        applesauce::CF::convert_to<std::string,0>(v19, (uint64_t)&v89);
        v22 = std::string::append(&v89, "/", 1uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        applesauce::CF::convert_to<std::string,0>(v21, (uint64_t)v87);
        if ((v88 & 0x80u) == 0)
          v24 = v87;
        else
          v24 = (void **)v87[0];
        if ((v88 & 0x80u) == 0)
          v25 = v88;
        else
          v25 = (std::string::size_type)v87[1];
        v26 = std::string::append((std::string *)buf, (const std::string::value_type *)v24, v25);
        v27 = v26->__r_.__value_.__r.__words[0];
        v100[0] = v26->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
        v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v29 = v100[0];
        *(_QWORD *)a1 = v27;
        *(_QWORD *)(a1 + 8) = v29;
        *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v100 + 7);
        *(_BYTE *)(a1 + 23) = v28;
        if ((char)v88 < 0)
          operator delete(v87[0]);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        CFRelease(v21);
        CFRelease(v19);
        goto LABEL_42;
      }
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d ModelNetPathBase is provided - retriving base path and relative path of the model.", buf, 0x12u);
    }
    goto LABEL_25;
  }
  v16 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("ModelNetPath"));
  v17 = v16;
  if (!v16)
  {
    v84 = 0;
    v89.__r_.__value_.__r.__words[0] = 0;
    v85 = *(NSObject ***)(a2 + 16);
    if (v85)
      v84 = *v85;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 343;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66741;
      _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelNetPath_ref.get_cf() == nullptr is false]: \"Failed to retrieve ModelNetPath.\"", buf, 0x18u);
    }
    v86 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v86 = &off_1E69EE218;
    v86[2] = -66741;
  }
  CFRetain(v16);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  applesauce::CF::convert_to<std::string,0>(v17, (uint64_t)buf);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&buf[16];
  CFRelease(v17);
LABEL_42:
  v30 = *(NSObject ***)(a2 + 16);
  if (!v30)
  {
    v31 = MEMORY[0x1E0C81028];
    goto LABEL_46;
  }
  v31 = *v30;
  if (*v30)
  {
LABEL_46:
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      goto LABEL_52;
    if (*(char *)(a1 + 23) >= 0)
      v32 = (void *)a1;
    else
      v32 = *(void **)a1;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 346;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v32;
    v13 = "%25s:%-5d Successfully retrieved model path (%s).";
    v14 = v31;
    v15 = 28;
    goto LABEL_51;
  }
LABEL_52:
  v33 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("InputName"));
  v34 = v33;
  if (!v33)
  {
    v72 = 0;
    v89.__r_.__value_.__r.__words[0] = 0;
    v73 = *(NSObject ***)(a2 + 16);
    if (v73)
      v72 = *v73;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 353;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66741;
      _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputName.\"", buf, 0x18u);
    }
    v74 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v74 = &off_1E69EE218;
    v74[2] = -66741;
  }
  CFRetain(v33);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  applesauce::CF::convert_to<std::string,0>(v34, (uint64_t)buf);
  v35 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&buf[16];
  v36 = *(NSObject ***)(a2 + 16);
  if (v36)
  {
    v37 = *v36;
    if (!*v36)
      goto LABEL_64;
  }
  else
  {
    v37 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 47) >= 0)
      v38 = a1 + 24;
    else
      v38 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 355;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v38;
    _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input name (%s).", buf, 0x1Cu);
  }
LABEL_64:
  v39 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("EmbeddingName"));
  v40 = v39;
  if (v39)
  {
    CFRetain(v39);
    v87[0] = (void *)v40;
    applesauce::CF::convert_to<std::string,0>(v40, (uint64_t)buf);
    goto LABEL_73;
  }
  v87[0] = 0;
  v41 = *(NSObject ***)(a2 + 16);
  if (!v41)
  {
    v42 = MEMORY[0x1E0C81028];
LABEL_70:
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 362;
      _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Embedding name not found, using empty.\n", buf, 0x12u);
    }
    goto LABEL_72;
  }
  v42 = *v41;
  if (*v41)
    goto LABEL_70;
LABEL_72:
  std::string::basic_string[abi:ne180100]<0>(buf, "");
LABEL_73:
  v43 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v43);
  *(_OWORD *)v43 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)&buf[16];
  v44 = *(NSObject ***)(a2 + 16);
  if (v44)
  {
    v45 = *v44;
    if (!*v44)
      goto LABEL_84;
  }
  else
  {
    v45 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 95) >= 0)
      v46 = a1 + 72;
    else
      v46 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 366;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v46;
    _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Embedding name set to (%s).", buf, 0x1Cu);
  }
LABEL_84:
  v47 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("OutputName"));
  v48 = v47;
  if (!v47)
  {
    v75 = 0;
    v100[0] = 0;
    v76 = *(NSObject ***)(a2 + 16);
    if (v76)
      v75 = *v76;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 370;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66741;
      _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve OutputName.\"", buf, 0x18u);
    }
    v77 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v77 = &off_1E69EE218;
    v77[2] = -66741;
  }
  CFRetain(v47);
  v100[0] = v48;
  applesauce::CF::convert_to<std::string,0>(v48, (uint64_t)buf);
  v49 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v49);
  *(_OWORD *)v49 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)&buf[16];
  v50 = *(NSObject ***)(a2 + 16);
  if (v50)
  {
    v51 = *v50;
    if (!*v50)
      goto LABEL_96;
  }
  else
  {
    v51 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 71) >= 0)
      v52 = a1 + 48;
    else
      v52 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v52;
    _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output name (%s).", buf, 0x1Cu);
  }
LABEL_96:
  v53 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("ComputeEngineName"));
  v54 = v53;
  if (v53)
  {
    CFRetain(v53);
    v91 = v54;
    applesauce::CF::convert_to<std::string,0>(v54, (uint64_t)buf);
    goto LABEL_105;
  }
  v91 = 0;
  v55 = *(NSObject ***)(a2 + 16);
  if (!v55)
  {
    v56 = MEMORY[0x1E0C81028];
LABEL_102:
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 379;
      _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d ComputeEngineName not found, using default.\n", buf, 0x12u);
    }
    goto LABEL_104;
  }
  v56 = *v55;
  if (*v55)
    goto LABEL_102;
LABEL_104:
  std::string::basic_string[abi:ne180100]<0>(buf, "CPU");
LABEL_105:
  v57 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v57);
  *(_OWORD *)v57 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)&buf[16];
  v58 = *(NSObject ***)(a2 + 16);
  if (v58)
  {
    v59 = *v58;
    if (!*v58)
    {
      *(_DWORD *)(a1 + 120) = 0;
      v60 = (unsigned int *)(a1 + 120);
      goto LABEL_122;
    }
  }
  else
  {
    v59 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 119) >= 0)
      v61 = a1 + 96;
    else
      v61 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 382;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v61;
    _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Compute engine name set to (%s).", buf, 0x1Cu);
    v58 = *(NSObject ***)(a2 + 16);
  }
  *(_DWORD *)(a1 + 120) = 0;
  v60 = (unsigned int *)(a1 + 120);
  if (v58)
  {
    v62 = *v58;
    if (!*v58)
      goto LABEL_122;
  }
  else
  {
    v62 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 387;
    _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading StreamingMode.", buf, 0x12u);
  }
LABEL_122:
  v63 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(&v96, theDict, CFSTR("StreamingMode"), v60);
  v64 = *(NSObject ***)(a2 + 16);
  if (!v63)
    goto LABEL_130;
  if (!v64)
  {
    v65 = MEMORY[0x1E0C81028];
LABEL_127:
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 391;
      _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d StreamingMode not found, using default.", buf, 0x12u);
      v64 = *(NSObject ***)(a2 + 16);
    }
    goto LABEL_129;
  }
  v65 = *v64;
  if (*v64)
    goto LABEL_127;
LABEL_129:
  *v60 = 0;
LABEL_130:
  if (v64)
  {
    v66 = *v64;
    if (!*v64)
      goto LABEL_136;
  }
  else
  {
    v66 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    v67 = *v60;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNet.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 394;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v67;
    _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d StreamingMode set to (%d).", buf, 0x18u);
  }
LABEL_136:
  v68 = *v60;
  if (v68 >= 3)
  {
    v69 = *(NSObject ***)(a2 + 16);
    if (v69)
      v70 = *v69;
    else
      v70 = 0;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 397;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66743;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v68;
      v98 = 1024;
      v99 = 3;
      _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [modelPlistInfo.streamingMode_int >= static_cast<UInt32>(StreamingMode::NumModes) is false]: \"StreamingMode (%u) is out of range, a value smaller than (%d) is expected.\"", buf, 0x24u);
    }
    v71 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v71 = &off_1E69EE218;
    v71[2] = -66743;
  }
  if (v54)
    CFRelease(v54);
  CFRelease(v48);
  if (v40)
    CFRelease(v40);
  CFRelease(v34);
  if (v95)
    CFRelease(v95);
}

void sub_1B621478C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<NeuralNetEspresso,std::string &,std::string &,std::string &,std::string &,std::string &,StreamingMode,__CFDictionary const* const&,CALog::Scope const*&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, const __CFDictionary **a8, caulk::deferred_logger ***a9)
{
  uint64_t v17;
  int v18;
  const __CFDictionary *v19;
  std::string *v20;
  std::string *v21;
  NSObject **v22;
  NSObject *v23;
  char **v24;
  NSObject **v25;
  NSObject *v26;
  std::string *v27;
  uint64_t context;
  _QWORD *v29;
  __int128 v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t plan;
  _QWORD *v39;
  __int128 v40;
  std::__shared_weak_count *data;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  int v89;
  NSObject **v90;
  uint64_t *v91;
  NSObject *v92;
  NSObject **v93;
  NSObject *v94;
  NSObject *Value;
  NSObject *v96;
  const __CFNumber *v97;
  const __CFNumber *v98;
  int v99;
  NSObject **v100;
  NSObject *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t i;
  std::string *v106;
  __int128 v107;
  void **v108;
  CFIndex v109;
  CFStringRef v110;
  const void *v111;
  std::string::size_type v112;
  NSObject **v113;
  NSObject *v114;
  void **v115;
  const __CFString *v116;
  const __CFString *v117;
  NSObject **v118;
  NSObject *v119;
  void **v120;
  const __CFString *v121;
  const __CFString *v122;
  NSObject **v123;
  NSObject *v124;
  std::string *v125;
  NSObject **v126;
  NSObject *v127;
  __int128 *v128;
  __int128 *v129;
  unint64_t v130;
  __int128 v131;
  NSObject **v132;
  NSObject *v133;
  std::string *v134;
  NSObject **v135;
  NSObject *v136;
  std::string *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  char *v140;
  unint64_t v141;
  char *v142;
  _BYTE *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  __int128 *v148;
  char *v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  NSObject **v153;
  NSObject *v154;
  NSObject **v155;
  NSObject *v156;
  NSObject **v157;
  NSObject *v158;
  std::string *v159;
  std::string *v160;
  _DWORD *v161;
  std::runtime_error *v162;
  NSObject *v163;
  NSObject **v164;
  void **v165;
  _DWORD *v166;
  NSObject *v167;
  NSObject **v168;
  void **v169;
  _DWORD *v170;
  NSObject *v171;
  NSObject **v172;
  void **v173;
  _DWORD *v174;
  void *exception;
  void *v176;
  void *v177;
  void *v178;
  NSObject **v179;
  NSObject *v180;
  NSObject **v181;
  _DWORD *v182;
  NSObject **v183;
  NSObject *v184;
  _DWORD *v185;
  _DWORD *v186;
  const __CFNumber *v187;
  uint64_t *v188;
  _OWORD *v189;
  _QWORD *v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  void *v196[2];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  std::string v205;
  void *v206[2];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  std::string v215;
  std::string v216;
  std::string v217;
  CFTypeRef cf;
  CFTypeRef v219;
  CFDictionaryRef v220;
  CFDictionaryRef theDict;
  CFTypeRef v222;
  std::string v223;
  std::string buf[14];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v17 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v195, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v195 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v194 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v193 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v192 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v191 = *(std::string *)a6;
  v18 = *a7;
  v19 = *a8;
  NeuralNetImpl::NeuralNetImpl(v17, *a9);
  *(_QWORD *)v17 = &off_1E69D6DA8;
  *(_DWORD *)(v17 + 40) = 65568;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v17 + 48), v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v17 + 48) = v195;
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v17 + 72), v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v17 + 72) = v194;
  v20 = (std::string *)(v17 + 96);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v192.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 112) = *((_QWORD *)&v192.__r_.__value_.__l + 2);
  }
  v21 = (std::string *)(v17 + 120);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v21, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 136) = *((_QWORD *)&v193.__r_.__value_.__l + 2);
  }
  *(_BYTE *)(v17 + 152) = 0;
  *(_DWORD *)(v17 + 144) = v18;
  *(_BYTE *)(v17 + 168) = 0;
  *(_BYTE *)(v17 + 176) = 0;
  *(_BYTE *)(v17 + 208) = 0;
  *(_BYTE *)(v17 + 216) = 0;
  *(_BYTE *)(v17 + 248) = 0;
  *(_BYTE *)(v17 + 256) = 0;
  *(_BYTE *)(v17 + 424) = 0;
  *(_BYTE *)(v17 + 432) = 0;
  *(_BYTE *)(v17 + 600) = 0;
  *(_BYTE *)(v17 + 608) = 0;
  *(_BYTE *)(v17 + 776) = 0;
  v188 = a1;
  *(_OWORD *)(v17 + 784) = 0u;
  *(_OWORD *)(v17 + 800) = 0u;
  *(_OWORD *)(v17 + 816) = 0u;
  *(_OWORD *)(v17 + 832) = 0u;
  *(_OWORD *)(v17 + 848) = 0u;
  *(_OWORD *)(v17 + 864) = 0u;
  v189 = (_OWORD *)(v17 + 152);
  v22 = *(NSObject ***)(v17 + 8);
  if (v22)
  {
    v23 = *v22;
    if (!*v22)
      goto LABEL_34;
  }
  else
  {
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 670;
    _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Construct NeuralNetEspresso.", (uint8_t *)buf, 0x12u);
  }
LABEL_34:
  v24 = (char **)(v17 + 856);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
  else
    v223 = v191;
  v190 = (_QWORD *)v17;
  if (std::string::compare(&v223, "CPU")
    && std::string::compare(&v223, "METAL")
    && std::string::compare(&v223, "MPS")
    && std::string::compare(&v223, "ANE")
    && std::string::compare(&v223, "ANE_RUNTIME_DIRECT")
    && std::string::compare(&v223, "CPU_ALT")
    && std::string::compare(&v223, "CU")
    && std::string::compare(&v223, "CPU_V8")
    && std::string::compare(&v223, "REMOTE")
    && std::string::compare(&v223, "HX")
    && std::string::compare(&v223, "HX_SIM")
    && std::string::compare(&v223, "METAL_TEXARRAY")
    && std::string::compare(&v223, "METAL_V9")
    && std::string::compare(&v223, "METAL_MPS_BUFFERS")
    && std::string::compare(&v223, "ANE_COMPILER")
    && std::string::compare(&v223, "ANE_SIM")
    && std::string::compare(&v223, "QUANT_SIM")
    && std::string::compare(&v223, "ANE_SIM_FANTASY")
    && std::string::compare(&v223, "IR")
    && std::string::compare(&v223, "LKC"))
  {
    v25 = *(NSObject ***)(v17 + 8);
    if (v25)
    {
      v26 = *v25;
      if (!*v25)
        goto LABEL_84;
    }
    else
    {
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = &v223;
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)v223.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 867;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v27;
      _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Compute engine name (%s) not understood. Defaulting to CPU.", (uint8_t *)buf, 0x1Cu);
    }
  }
LABEL_84:
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
  context = espresso_create_context();
  if (!context)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](exception, 0xFFFFFFFFLL, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  v29 = (_QWORD *)operator new();
  *v29 = &off_1E69D6EC8;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = context;
  *(_QWORD *)&v30 = context;
  *((_QWORD *)&v30 + 1) = v29;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v30;
  if (*(_BYTE *)(v17 + 168))
  {
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v189, (__int128 *)buf);
    size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
    if (buf[0].__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (!*(_BYTE *)(v17 + 168))
      std::__throw_bad_optional_access[abi:ne180100]();
    v30 = *v189;
  }
  else
  {
    *(_OWORD *)(v17 + 152) = v30;
    *(_BYTE *)(v17 + 168) = 1;
  }
  *(_OWORD *)v206 = v30;
  if (*((_QWORD *)&v30 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    buf[0].__r_.__value_.__r.__words[0] = v30;
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v206[1];
    if (v206[1])
    {
      v36 = (unint64_t *)((char *)v206[1] + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
  }
  else
  {
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = (unint64_t)v30;
  }
  buf[1].__r_.__value_.__r.__words[0] = 0;
  buf[0].__r_.__value_.__r.__words[2] = 0;
  plan = espresso_create_plan();
  if (!plan)
  {
    v176 = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](v176, 0xFFFFFFFFLL, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  v39 = (_QWORD *)operator new();
  *v39 = &off_1E69D6F00;
  v39[1] = 0;
  v39[2] = 0;
  v39[3] = plan;
  *(_QWORD *)&v40 = plan;
  *((_QWORD *)&v40 + 1) = v39;
  data = (std::__shared_weak_count *)buf[1].__r_.__value_.__l.__data_;
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v40;
  if (data)
  {
    p_shared_owners = (unint64_t *)&data->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
      std::__shared_weak_count::__release_weak(data);
    }
  }
  v44 = (std::__shared_weak_count *)v206[1];
  if (v206[1])
  {
    v45 = (unint64_t *)((char *)v206[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (*(_BYTE *)(v17 + 208))
  {
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v17 + 176, (__int128 *)buf);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v17 + 192, (__int128 *)&buf[0].__r_.__value_.__r.__words[2]);
    v47 = (std::__shared_weak_count *)buf[1].__r_.__value_.__l.__data_;
    if (buf[1].__r_.__value_.__r.__words[0])
    {
      v48 = (unint64_t *)(buf[1].__r_.__value_.__r.__words[0] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  else
  {
    v50 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
    v51 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)(v17 + 176) = v50;
    *(_OWORD *)(v17 + 192) = v51;
    buf[0].__r_.__value_.__r.__words[2] = 0;
    buf[1].__r_.__value_.__r.__words[0] = 0;
    *(_BYTE *)(v17 + 208) = 1;
  }
  v52 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (!*(_BYTE *)(v17 + 208))
    std::__throw_bad_optional_access[abi:ne180100]();
  v55 = *(void **)(v17 + 192);
  v56 = *(unint64_t **)(v17 + 200);
  v206[0] = v55;
  v206[1] = v56;
  if (v56)
  {
    v57 = v56 + 1;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
    buf[1].__r_.__value_.__l.__data_ = (std::string::pointer)v206[1];
    if (v206[1])
    {
      v59 = (unint64_t *)((char *)v206[1] + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
  }
  else
  {
    buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
    buf[1].__r_.__value_.__r.__words[0] = 0;
  }
  v61 = espresso_plan_add_network();
  if ((_DWORD)v61)
  {
    v177 = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](v177, v61, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  v62 = (std::__shared_weak_count *)v206[1];
  if (v206[1])
  {
    v63 = (unint64_t *)((char *)v206[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = *(unsigned __int8 *)(v17 + 248);
  *(_OWORD *)(v17 + 216) = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  if (v65)
  {
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v17 + 232, (__int128 *)&buf[0].__r_.__value_.__r.__words[2]);
    v66 = (std::__shared_weak_count *)buf[1].__r_.__value_.__l.__data_;
    if (buf[1].__r_.__value_.__r.__words[0])
    {
      v67 = (unint64_t *)(buf[1].__r_.__value_.__r.__words[0] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  else
  {
    *(_OWORD *)(v17 + 232) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
    buf[0].__r_.__value_.__r.__words[2] = 0;
    buf[1].__r_.__value_.__r.__words[0] = 0;
    *(_BYTE *)(v17 + 248) = 1;
  }
  if (!*(_BYTE *)(v17 + 208))
    std::__throw_bad_optional_access[abi:ne180100]();
  v69 = espresso_plan_build();
  if ((_DWORD)v69)
  {
    v178 = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](v178, v69, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  if (!*(_BYTE *)(v17 + 248))
    std::__throw_bad_optional_access[abi:ne180100]();
  memset(buf, 0, 168);
  audiodsp::espresso::v1::network::bind_buffer();
  v70 = *(unsigned __int8 *)(v17 + 424);
  v71 = *(_OWORD *)&buf[6].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 384) = *(_OWORD *)&buf[5].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 400) = v71;
  *(_QWORD *)(v17 + 416) = *((_QWORD *)&buf[6].__r_.__value_.__l + 2);
  v72 = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 320) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 336) = v72;
  v73 = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 352) = *(_OWORD *)&buf[4].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 368) = v73;
  v74 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 256) = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 272) = v74;
  v75 = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 288) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 304) = v75;
  if (!v70)
    *(_BYTE *)(v17 + 424) = 1;
  if (*(char *)(v17 + 119) < 0)
  {
    if (!*(_QWORD *)(v17 + 104))
      goto LABEL_161;
  }
  else if (!*(_BYTE *)(v17 + 119))
  {
    goto LABEL_161;
  }
  if (!*(_BYTE *)(v17 + 248))
    std::__throw_bad_optional_access[abi:ne180100]();
  memset(buf, 0, 168);
  audiodsp::espresso::v1::network::bind_buffer();
  v76 = *(unsigned __int8 *)(v17 + 600);
  v77 = *(_OWORD *)&buf[6].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 560) = *(_OWORD *)&buf[5].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 576) = v77;
  *(_QWORD *)(v17 + 592) = *((_QWORD *)&buf[6].__r_.__value_.__l + 2);
  v78 = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 496) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 512) = v78;
  v79 = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 528) = *(_OWORD *)&buf[4].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 544) = v79;
  v80 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 432) = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 448) = v80;
  v81 = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 464) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 480) = v81;
  if (!v76)
    *(_BYTE *)(v17 + 600) = 1;
LABEL_161:
  if (!*(_BYTE *)(v17 + 248))
    std::__throw_bad_optional_access[abi:ne180100]();
  memset(buf, 0, 168);
  audiodsp::espresso::v1::network::bind_buffer();
  v82 = *(unsigned __int8 *)(v17 + 776);
  v83 = *(_OWORD *)&buf[6].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 736) = *(_OWORD *)&buf[5].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 752) = v83;
  *(_QWORD *)(v17 + 768) = *((_QWORD *)&buf[6].__r_.__value_.__l + 2);
  v84 = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 672) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 688) = v84;
  v85 = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 704) = *(_OWORD *)&buf[4].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 720) = v85;
  v86 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v17 + 608) = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 624) = v86;
  v87 = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
  *(_OWORD *)(v17 + 640) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(v17 + 656) = v87;
  if (!v82)
    *(_BYTE *)(v17 + 776) = 1;
  v88 = *(_QWORD *)(v17 + 696)
      * *(_QWORD *)(v17 + 688)
      * *(_QWORD *)(v17 + 704)
      * *(_QWORD *)(v17 + 712)
      * *(_QWORD *)(v17 + 720);
  LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
  std::vector<float>::assign((char **)(v17 + 784), v88, buf);
  v89 = *(_DWORD *)(v17 + 144);
  if (v89 == 1)
  {
    v93 = *(NSObject ***)(v17 + 8);
    if (v93)
    {
      v94 = *v93;
      if (!*v93)
        goto LABEL_178;
    }
    else
    {
      v94 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 701;
      _os_log_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Streaming mode CopyOutStateToInState: bind input and output states.", (uint8_t *)buf, 0x12u);
    }
LABEL_178:
    Value = CFDictionaryGetValue(v19, CFSTR("InputOutputStates"));
    v96 = Value;
    if (!Value)
    {
      v222 = 0;
      v181 = *(NSObject ***)(v17 + 8);
      if (v181)
        v96 = *v181;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 705;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66741;
        _os_log_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [ioStates_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputOutputStates.\"", (uint8_t *)buf, 0x18u);
      }
      v182 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v182 = &off_1E69EE218;
      v182[2] = -66741;
    }
    CFRetain(Value);
    v222 = v96;
    applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v222, (applesauce::CF::DictionaryRef *)&theDict);
    v97 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NumStates"));
    if (!v97)
    {
      v183 = *(NSObject ***)(v17 + 8);
      if (v183)
        v184 = *v183;
      else
        v184 = 0;
      if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 710;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66741;
        _os_log_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [numStates_ref.get_cf() == nullptr is false]: \"Failed to retrieve NumStates from InputOutputStates.\"", (uint8_t *)buf, 0x18u);
      }
      v186 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v186 = &off_1E69EE218;
      v186[2] = -66741;
    }
    v98 = v97;
    CFRetain(v97);
    v187 = v98;
    v99 = applesauce::CF::convert_to<unsigned int,0>(v98);
    v100 = *(NSObject ***)(v17 + 8);
    if (v100)
    {
      v101 = *v100;
      if (!*v100)
        goto LABEL_192;
    }
    else
    {
      v101 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 712;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v99;
      _os_log_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved number of states (%d).", (uint8_t *)buf, 0x18u);
      v100 = *(NSObject ***)(v17 + 8);
    }
    if (v100)
    {
      v102 = *v100;
      if (!*v100)
        goto LABEL_192;
    }
    else
    {
      v102 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 714;
      _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_INFO, "%25s:%-5d Read input and output state names.", (uint8_t *)buf, 0x12u);
    }
LABEL_192:
    v103 = *(_QWORD *)(v17 + 816);
    v104 = *(_QWORD *)(v17 + 808);
    while (v103 != v104)
    {
      v103 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v103);
    }
    *(_QWORD *)(v17 + 816) = v104;
    if (v99)
    {
      for (i = 0; v99 != i; ++i)
      {
        std::to_string(buf, i);
        v106 = std::string::insert(buf, 0, "InputOutputState_", 0x11uLL);
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        *(_QWORD *)&v207 = *((_QWORD *)&v106->__r_.__value_.__l + 2);
        *(_OWORD *)v206 = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        if ((SBYTE7(v207) & 0x80u) == 0)
          v108 = v206;
        else
          v108 = (void **)v206[0];
        if ((SBYTE7(v207) & 0x80u) == 0)
          v109 = BYTE7(v207);
        else
          v109 = (CFIndex)v206[1];
        v110 = CFStringCreateWithBytes(0, (const UInt8 *)v108, v109, 0x8000100u, 0);
        if (!v110)
        {
          v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v162, "Could not construct");
        }
        v111 = CFDictionaryGetValue(theDict, v110);
        v112 = (std::string::size_type)v111;
        if (!v111)
        {
          v163 = 0;
          v216.__r_.__value_.__r.__words[0] = 0;
          v164 = *(NSObject ***)(v17 + 8);
          if (v164)
            v163 = *v164;
          if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
          {
            v165 = v206;
            if (SBYTE7(v207) < 0)
              v165 = (void **)v206[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 725;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66741;
            LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v165;
            _os_log_impl(&dword_1B5ED0000, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [state_ref.get_cf() == nullptr is false]: \"Missing dictionary (%s).\"", (uint8_t *)buf, 0x22u);
          }
          v166 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v166 = &off_1E69EE218;
          v166[2] = -66741;
        }
        CFRetain(v111);
        v216.__r_.__value_.__r.__words[0] = v112;
        applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v216.__r_.__value_.__l.__data_, (applesauce::CF::DictionaryRef *)&v220);
        if (*(_DWORD *)(v17 + 16))
        {
          v113 = *(NSObject ***)(v17 + 8);
          if (v113)
          {
            v114 = *v113;
            if (!*v113)
              goto LABEL_217;
          }
          else
          {
            v114 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
          {
            if ((SBYTE7(v207) & 0x80u) == 0)
              v115 = v206;
            else
              v115 = (void **)v206[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 728;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v115;
            _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary (%s).", (uint8_t *)buf, 0x1Cu);
          }
        }
LABEL_217:
        v116 = (const __CFString *)CFDictionaryGetValue(v220, CFSTR("InputName"));
        v117 = v116;
        if (!v116)
        {
          v167 = 0;
          v219 = 0;
          v168 = *(NSObject ***)(v17 + 8);
          if (v168)
            v167 = *v168;
          if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
          {
            v169 = v206;
            if (SBYTE7(v207) < 0)
              v169 = (void **)v206[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 731;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66741;
            LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v169;
            _os_log_impl(&dword_1B5ED0000, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve InputName from (%s).\"", (uint8_t *)buf, 0x22u);
          }
          v170 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v170 = &off_1E69EE218;
          v170[2] = -66741;
        }
        CFRetain(v116);
        v219 = v117;
        applesauce::CF::convert_to<std::string,0>(v117, (uint64_t)v196);
        if (*(_DWORD *)(v17 + 16))
        {
          v118 = *(NSObject ***)(v17 + 8);
          if (v118)
          {
            v119 = *v118;
            if (!*v118)
              goto LABEL_227;
          }
          else
          {
            v119 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
          {
            v120 = v196;
            if (SBYTE7(v197) < 0)
              v120 = (void **)v196[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 734;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v120;
            _os_log_impl(&dword_1B5ED0000, v119, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input state name (%s).", (uint8_t *)buf, 0x1Cu);
          }
        }
LABEL_227:
        v121 = (const __CFString *)CFDictionaryGetValue(v220, CFSTR("OutputName"));
        v122 = v121;
        if (!v121)
        {
          v171 = 0;
          cf = 0;
          v172 = *(NSObject ***)(v17 + 8);
          if (v172)
            v171 = *v172;
          if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
          {
            v173 = v206;
            if (SBYTE7(v207) < 0)
              v173 = (void **)v206[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 737;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66741;
            LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v173;
            _os_log_impl(&dword_1B5ED0000, v171, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputName_ref.get_cf() == nullptr is false]: \"Failed to retrieve OutputName from (%s).\"", (uint8_t *)buf, 0x22u);
          }
          v174 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v174 = &off_1E69EE218;
          v174[2] = -66741;
        }
        CFRetain(v121);
        cf = v122;
        applesauce::CF::convert_to<std::string,0>(v122, (uint64_t)&v217);
        if (!*(_DWORD *)(v17 + 16))
          goto LABEL_237;
        v123 = *(NSObject ***)(v17 + 8);
        if (!v123)
        {
          v124 = MEMORY[0x1E0C81028];
LABEL_233:
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
          {
            v125 = &v217;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v125 = (std::string *)v217.__r_.__value_.__r.__words[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 740;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v125;
            _os_log_impl(&dword_1B5ED0000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output state name (%s).", (uint8_t *)buf, 0x1Cu);
          }
          goto LABEL_237;
        }
        v124 = *v123;
        if (*v123)
          goto LABEL_233;
LABEL_237:
        std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(buf, (__int128 *)v196, (__int128 *)&v217);
        v24 = (char **)(v17 + 856);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(v17 + 808), (__int128 *)buf);
        if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
        if (cf)
          CFRelease(cf);
        if (SBYTE7(v197) < 0)
          operator delete(v196[0]);
        if (v219)
          CFRelease(v219);
        if (v220)
          CFRelease(v220);
        if (v216.__r_.__value_.__r.__words[0])
          CFRelease(v216.__r_.__value_.__l.__data_);
        CFRelease(v110);
        if (SBYTE7(v207) < 0)
          operator delete(v206[0]);
      }
    }
    v126 = *(NSObject ***)(v17 + 8);
    if (v126)
    {
      v127 = *v126;
      if (!*v126)
        goto LABEL_262;
    }
    else
    {
      v127 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 745;
      _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_INFO, "%25s:%-5d Bind buffers for input and output states.", (uint8_t *)buf, 0x12u);
    }
LABEL_262:
    v128 = *(__int128 **)(v17 + 808);
    v129 = *(__int128 **)(v17 + 816);
    if (v128 != v129)
    {
      v130 = 0;
      while (1)
      {
        if (*((char *)v128 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)v128, *((_QWORD *)v128 + 1));
        }
        else
        {
          v131 = *v128;
          v217.__r_.__value_.__r.__words[2] = *((_QWORD *)v128 + 2);
          *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v131;
        }
        if (*((char *)v128 + 47) < 0)
          std::string::__init_copy_ctor_external(&v216, *((const std::string::value_type **)v128 + 3), *((_QWORD *)v128 + 4));
        else
          v216 = *(std::string *)((_BYTE *)v128 + 1);
        if (*(_DWORD *)(v17 + 16))
        {
          v132 = *(NSObject ***)(v17 + 8);
          if (v132)
          {
            v133 = *v132;
            if (!*v132)
              goto LABEL_279;
          }
          else
          {
            v133 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
          {
            v134 = &v217;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v134 = (std::string *)v217.__r_.__value_.__r.__words[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 754;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v134;
            _os_log_impl(&dword_1B5ED0000, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d Binding buffer for input state %s", (uint8_t *)buf, 0x1Cu);
          }
        }
LABEL_279:
        v214 = 0u;
        memset(&v215, 0, sizeof(v215));
        v212 = 0u;
        v213 = 0u;
        v210 = 0u;
        v211 = 0u;
        v208 = 0u;
        v209 = 0u;
        *(_OWORD *)v206 = 0u;
        v207 = 0u;
        if (!*(_BYTE *)(v17 + 248))
          std::__throw_bad_optional_access[abi:ne180100]();
        audiodsp::espresso::v1::network::bind_buffer();
        if (!*(_DWORD *)(v17 + 16))
          goto LABEL_289;
        v135 = *(NSObject ***)(v17 + 8);
        if (!v135)
        {
          v136 = MEMORY[0x1E0C81028];
LABEL_285:
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
          {
            v137 = &v216;
            if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v137 = (std::string *)v216.__r_.__value_.__r.__words[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 757;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v137;
            _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d Binding buffer for output state %s", (uint8_t *)buf, 0x1Cu);
          }
          goto LABEL_289;
        }
        v136 = *v135;
        if (*v135)
          goto LABEL_285;
LABEL_289:
        v204 = 0u;
        memset(&v205, 0, sizeof(v205));
        v202 = 0u;
        v203 = 0u;
        v200 = 0u;
        v201 = 0u;
        v198 = 0u;
        v199 = 0u;
        *(_OWORD *)v196 = 0u;
        v197 = 0u;
        if (!*(_BYTE *)(v17 + 248))
          std::__throw_bad_optional_access[abi:ne180100]();
        audiodsp::espresso::v1::network::bind_buffer();
        v138 = *((_QWORD *)&v211 + 1) * v211 * v212 * *((_QWORD *)&v212 + 1) * v213;
        v139 = *((_QWORD *)&v201 + 1) * v201 * v202 * *((_QWORD *)&v202 + 1) * v203;
        if (v138 != v139)
        {
          v157 = *(NSObject ***)(v17 + 8);
          if (v157)
            v158 = *v157;
          else
            v158 = 0;
          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
          {
            v159 = &v217;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v159 = (std::string *)v217.__r_.__value_.__r.__words[0];
            v160 = &v216;
            if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v160 = (std::string *)v216.__r_.__value_.__r.__words[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316674;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 761;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66743;
            LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v159;
            WORD1(buf[1].__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 4) = v138;
            WORD2(buf[1].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[2] + 6) = (std::string::size_type)v160;
            HIWORD(buf[2].__r_.__value_.__r.__words[0]) = 2048;
            buf[2].__r_.__value_.__l.__size_ = v139;
            _os_log_impl(&dword_1B5ED0000, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inState.size() != outState.size() is false]: \"Input state %s size (%zu) not matching the output state size %s (%zu).\"", (uint8_t *)buf, 0x40u);
          }
          v161 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v161 = &off_1E69EE218;
          v161[2] = -66743;
        }
        if (v130 <= v138)
          v130 = *((_QWORD *)&v211 + 1) * v211 * v212 * *((_QWORD *)&v212 + 1) * v213;
        *(_OWORD *)&buf[5].__r_.__value_.__r.__words[1] = v214;
        buf[6] = v215;
        *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2] = v210;
        *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1] = v211;
        *(_OWORD *)&buf[4].__r_.__value_.__l.__data_ = v212;
        *(_OWORD *)&buf[4].__r_.__value_.__r.__words[2] = v213;
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)v206;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v207;
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v208;
        *(_OWORD *)&buf[2].__r_.__value_.__l.__data_ = v209;
        *(_OWORD *)&buf[12].__r_.__value_.__r.__words[1] = v204;
        buf[13] = v205;
        *(_OWORD *)&buf[9].__r_.__value_.__r.__words[2] = v200;
        *(_OWORD *)&buf[10].__r_.__value_.__r.__words[1] = v201;
        *(_OWORD *)&buf[11].__r_.__value_.__l.__data_ = v202;
        *(_OWORD *)&buf[11].__r_.__value_.__r.__words[2] = v203;
        *(_OWORD *)&buf[7].__r_.__value_.__l.__data_ = *(_OWORD *)v196;
        *(_OWORD *)&buf[7].__r_.__value_.__r.__words[2] = v197;
        *(_OWORD *)&buf[8].__r_.__value_.__r.__words[1] = v198;
        *(_OWORD *)&buf[9].__r_.__value_.__l.__data_ = v199;
        v140 = *(char **)(v17 + 840);
        v141 = *(_QWORD *)(v17 + 848);
        if ((unint64_t)v140 >= v141)
        {
          v143 = *(_BYTE **)(v17 + 832);
          v144 = 0xCF3CF3CF3CF3CF3DLL * ((v140 - v143) >> 4) + 1;
          if (v144 > 0xC30C30C30C30C3)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v145 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v141 - (_QWORD)v143) >> 4);
          if (2 * v145 > v144)
            v144 = 2 * v145;
          if (v145 >= 0x61861861861861)
            v146 = 0xC30C30C30C30C3;
          else
            v146 = v144;
          if (v146)
          {
            if (v146 > 0xC30C30C30C30C3)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v147 = (char *)operator new(336 * v146);
          }
          else
          {
            v147 = 0;
          }
          v148 = v129;
          v149 = &v147[16 * ((v140 - v143) >> 4)];
          memcpy(v149, buf, 0x150uLL);
          v150 = v149;
          if (v140 == v143)
          {
            v151 = v190;
          }
          else
          {
            do
            {
              v150 -= 336;
              v140 -= 336;
              memcpy(v150, v140, 0x150uLL);
            }
            while (v140 != v143);
            v151 = v190;
            v140 = (char *)v190[104];
          }
          v152 = &v147[336 * v146];
          v151[104] = v150;
          v142 = v149 + 336;
          v151[105] = v149 + 336;
          v151[106] = v152;
          if (v140)
            operator delete(v140);
          v24 = (char **)(v189 + 44);
          v129 = v148;
          v17 = (uint64_t)v190;
        }
        else
        {
          memcpy(*(void **)(v17 + 840), buf, 0x150uLL);
          v142 = v140 + 336;
        }
        *(_QWORD *)(v17 + 840) = v142;
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v216.__r_.__value_.__l.__data_);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
        v128 += 3;
        if (v128 == v129)
          goto LABEL_319;
      }
    }
    v130 = 0;
LABEL_319:
    v153 = *(NSObject ***)(v17 + 8);
    if (v153)
    {
      v154 = *v153;
      if (!*v153)
      {
LABEL_325:
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        std::vector<float>::assign(v24, v130, buf);
        CFRelease(v187);
        v91 = v188;
        if (theDict)
          CFRelease(theDict);
        if (v222)
          CFRelease(v222);
        goto LABEL_329;
      }
    }
    else
    {
      v154 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 770;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v130;
      _os_log_impl(&dword_1B5ED0000, v154, OS_LOG_TYPE_INFO, "%25s:%-5d Max state size %u", (uint8_t *)buf, 0x18u);
    }
    goto LABEL_325;
  }
  if (v89)
  {
    v179 = *(NSObject ***)(v17 + 8);
    if (v179)
      v180 = *v179;
    else
      v180 = 0;
    if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 780;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = -66743;
      LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
      *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v89;
      _os_log_impl(&dword_1B5ED0000, v180, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown streaming mode (%d).\"", (uint8_t *)buf, 0x1Eu);
    }
    v185 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v185 = &off_1E69EE218;
    v185[2] = -66743;
  }
  v90 = *(NSObject ***)(v17 + 8);
  v91 = v188;
  if (v90)
  {
    v92 = *v90;
    if (!*v90)
      goto LABEL_335;
  }
  else
  {
    v92 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 697;
    _os_log_impl(&dword_1B5ED0000, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Streaming mode None: no initialization required.", (uint8_t *)buf, 0x12u);
  }
LABEL_329:
  v155 = *(NSObject ***)(v17 + 8);
  if (v155)
  {
    v156 = *v155;
    if (!*v155)
      goto LABEL_335;
  }
  else
  {
    v156 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"NeuralNetImpl.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 783;
    _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NeuralNetEspresso constructed.", (uint8_t *)buf, 0x12u);
  }
LABEL_335:
  *v91 = v17;
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
}

void sub_1B621696C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  void **v59;

  if (*(char *)(v58 + 119) < 0)
    operator delete(*v59);
  if (*(char *)(v58 + 95) < 0)
    operator delete(*a16);
  if (*(char *)(v58 + 71) < 0)
    operator delete(*a17);
  *(_QWORD *)v58 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v58 + 24);
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  if (a58 < 0)
    operator delete(a53);
  MEMORY[0x1BCC95CEC](v58, 0x10F3C4046D81F07);
  JUMPOUT(0x1B6216E10);
}

void sub_1B6216978()
{
  JUMPOUT(0x1B6216D60);
}

void sub_1B6216980()
{
  JUMPOUT(0x1B6216D70);
}

void sub_1B6216988()
{
  JUMPOUT(0x1B6216D80);
}

void sub_1B6216990()
{
  JUMPOUT(0x1B6216DA4);
}

void sub_1B6216998()
{
  JUMPOUT(0x1B6216DB4);
}

void sub_1B62169A0()
{
  JUMPOUT(0x1B6216DC4);
}

void sub_1B62169A8()
{
  JUMPOUT(0x1B6216DD4);
}

void sub_1B62169B0()
{
  JUMPOUT(0x1B6216DE4);
}

void sub_1B62169C0()
{
  JUMPOUT(0x1B6216CB4);
}

void sub_1B62169D0()
{
  JUMPOUT(0x1B6216CBCLL);
}

void sub_1B62169E0()
{
  JUMPOUT(0x1B6216CC8);
}

void sub_1B62169F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  __cxa_free_exception(v24);
  JUMPOUT(0x1B6216CD4);
}

void sub_1B6216A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  void *v68;

  __cxa_free_exception(v68);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v67);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  JUMPOUT(0x1B6216AE8);
}

void sub_1B6216A18()
{
  uint64_t v0;
  void *v1;

  __cxa_free_exception(v1);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v0);
  JUMPOUT(0x1B6216AD0);
}

void sub_1B6216A28()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B6216AE4);
}

void sub_1B6216A38()
{
  JUMPOUT(0x1B6216CD4);
}

void sub_1B6216A48(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1}::operator()();
    __cxa_rethrow();
  }
  JUMPOUT(0x1B6216E10);
}

void sub_1B6216A68()
{
  uint64_t v0;

  __cxa_end_catch();
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v0);
  JUMPOUT(0x1B6216AD0);
}

void sub_1B6216A78(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    espresso_context_destroy();
    __cxa_rethrow();
  }
  JUMPOUT(0x1B6216E10);
}

void sub_1B6216A98()
{
  __cxa_end_catch();
  JUMPOUT(0x1B6216AE4);
}

void sub_1B6216AA8()
{
  JUMPOUT(0x1B6216D94);
}

void sub_1B6216B08()
{
  JUMPOUT(0x1B6216CD4);
}

void sub_1B6216B14()
{
  JUMPOUT(0x1B6216CA4);
}

void sub_1B6216B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, CFTypeRef cf, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  void **v59;
  void *v60;
  void *v61;
  void *v62;

  CFRelease(cf);
  if (STACK[0x2D0])
    CFRelease((CFTypeRef)STACK[0x2D0]);
  if (STACK[0x2D8])
    CFRelease((CFTypeRef)STACK[0x2D8]);
  v60 = *v59;
  if (*v59)
  {
    *(_QWORD *)(v58 + 864) = v60;
    operator delete(v60);
  }
  v61 = *(void **)(v58 + 832);
  if (v61)
  {
    *(_QWORD *)(v58 + 840) = v61;
    operator delete(v61);
  }
  STACK[0x300] = a23;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v62 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v58 + 792) = v62;
    operator delete(v62);
  }
  if (*(_BYTE *)(v58 + 248))
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v58 + 232);
  std::__optional_destruct_base<audiodsp::espresso::v1::plan,false>::~__optional_destruct_base[abi:ne180100](a13);
  if (*(_BYTE *)(v58 + 168))
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a18);
  if (*(char *)(v58 + 143) < 0)
    operator delete(*a10);
  if (*(char *)(v58 + 119) < 0)
    operator delete(*a11);
  if (*(char *)(v58 + 95) < 0)
    operator delete(*a16);
  if (*(char *)(v58 + 71) < 0)
    operator delete(*a17);
  *(_QWORD *)v58 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v58 + 24);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  if (a58 < 0)
    operator delete(a53);
  MEMORY[0x1BCC95CEC](v58, 0x10F3C4046D81F07);
  JUMPOUT(0x1B6216E10);
}

void sub_1B6216E08(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ModelPlistInfo::~ModelPlistInfo(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *FullyConnectedLayerBNNS<signed char>::~FullyConnectedLayerBNNS(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[117];
  if (v2)
  {
    a1[118] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[114];
  if (v3)
  {
    a1[115] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[111];
  if (v4)
  {
    a1[112] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[108];
  if (v5)
  {
    a1[109] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[105];
  if (v6)
  {
    a1[106] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[102];
  if (v7)
  {
    a1[103] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[99];
  if (v8)
  {
    a1[100] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t FullyConnectedLayerBNNS<signed char>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x318uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 792), *(const void **)(a2 + 792), *(_QWORD *)(a2 + 800), (uint64_t)(*(_QWORD *)(a2 + 800) - *(_QWORD *)(a2 + 792)) >> 2);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 816), *(const void **)(a2 + 816), *(_QWORD *)(a2 + 824), (uint64_t)(*(_QWORD *)(a2 + 824) - *(_QWORD *)(a2 + 816)) >> 2);
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 840), *(const void **)(a2 + 840), *(_QWORD *)(a2 + 848), (uint64_t)(*(_QWORD *)(a2 + 848) - *(_QWORD *)(a2 + 840)) >> 2);
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 864), *(const void **)(a2 + 864), *(_QWORD *)(a2 + 872), (uint64_t)(*(_QWORD *)(a2 + 872) - *(_QWORD *)(a2 + 864)) >> 2);
  *(_QWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 888), *(const void **)(a2 + 888), *(_QWORD *)(a2 + 896), (uint64_t)(*(_QWORD *)(a2 + 896) - *(_QWORD *)(a2 + 888)) >> 2);
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((_QWORD *)(a1 + 912), *(const void **)(a2 + 912), *(_QWORD *)(a2 + 920), *(_QWORD *)(a2 + 920) - *(_QWORD *)(a2 + 912));
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((_QWORD *)(a1 + 936), *(const void **)(a2 + 936), *(_QWORD *)(a2 + 944), *(_QWORD *)(a2 + 944) - *(_QWORD *)(a2 + 936));
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  return a1;
}

void sub_1B6217078(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<signed char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6217168(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FullyConnectedLayerBNNS<signed char>>>(unint64_t a1)
{
  if (a1 >= 0x43B3D5AF9A7240)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(968 * a1);
}

uint64_t FullyConnectedLayerBNNS<short>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x318uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 792), *(const void **)(a2 + 792), *(_QWORD *)(a2 + 800), (uint64_t)(*(_QWORD *)(a2 + 800) - *(_QWORD *)(a2 + 792)) >> 2);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 816), *(const void **)(a2 + 816), *(_QWORD *)(a2 + 824), (uint64_t)(*(_QWORD *)(a2 + 824) - *(_QWORD *)(a2 + 816)) >> 2);
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 840), *(const void **)(a2 + 840), *(_QWORD *)(a2 + 848), (uint64_t)(*(_QWORD *)(a2 + 848) - *(_QWORD *)(a2 + 840)) >> 2);
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 864), *(const void **)(a2 + 864), *(_QWORD *)(a2 + 872), (uint64_t)(*(_QWORD *)(a2 + 872) - *(_QWORD *)(a2 + 864)) >> 2);
  *(_QWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 888), *(const void **)(a2 + 888), *(_QWORD *)(a2 + 896), (uint64_t)(*(_QWORD *)(a2 + 896) - *(_QWORD *)(a2 + 888)) >> 2);
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((_QWORD *)(a1 + 912), *(const void **)(a2 + 912), *(_QWORD *)(a2 + 920), (uint64_t)(*(_QWORD *)(a2 + 920) - *(_QWORD *)(a2 + 912)) >> 1);
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((_QWORD *)(a1 + 936), *(const void **)(a2 + 936), *(_QWORD *)(a2 + 944), (uint64_t)(*(_QWORD *)(a2 + 944) - *(_QWORD *)(a2 + 936)) >> 1);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  return a1;
}

void sub_1B6217368(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6217458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

uint64_t FullyConnectedLayerBNNS<int>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x318uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 792), *(const void **)(a2 + 792), *(_QWORD *)(a2 + 800), (uint64_t)(*(_QWORD *)(a2 + 800) - *(_QWORD *)(a2 + 792)) >> 2);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 816), *(const void **)(a2 + 816), *(_QWORD *)(a2 + 824), (uint64_t)(*(_QWORD *)(a2 + 824) - *(_QWORD *)(a2 + 816)) >> 2);
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 840), *(const void **)(a2 + 840), *(_QWORD *)(a2 + 848), (uint64_t)(*(_QWORD *)(a2 + 848) - *(_QWORD *)(a2 + 840)) >> 2);
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 864), *(const void **)(a2 + 864), *(_QWORD *)(a2 + 872), (uint64_t)(*(_QWORD *)(a2 + 872) - *(_QWORD *)(a2 + 864)) >> 2);
  *(_QWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 888), *(const void **)(a2 + 888), *(_QWORD *)(a2 + 896), (uint64_t)(*(_QWORD *)(a2 + 896) - *(_QWORD *)(a2 + 888)) >> 2);
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 912), *(const void **)(a2 + 912), *(_QWORD *)(a2 + 920), (uint64_t)(*(_QWORD *)(a2 + 920) - *(_QWORD *)(a2 + 912)) >> 2);
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 936), *(const void **)(a2 + 936), *(_QWORD *)(a2 + 944), (uint64_t)(*(_QWORD *)(a2 + 944) - *(_QWORD *)(a2 + 936)) >> 2);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  return a1;
}

void sub_1B621763C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B621772C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t FullyConnectedLayerBNNS<float>::FullyConnectedLayerBNNS(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x318uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 792), *(const void **)(a2 + 792), *(_QWORD *)(a2 + 800), (uint64_t)(*(_QWORD *)(a2 + 800) - *(_QWORD *)(a2 + 792)) >> 2);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 816), *(const void **)(a2 + 816), *(_QWORD *)(a2 + 824), (uint64_t)(*(_QWORD *)(a2 + 824) - *(_QWORD *)(a2 + 816)) >> 2);
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 840), *(const void **)(a2 + 840), *(_QWORD *)(a2 + 848), (uint64_t)(*(_QWORD *)(a2 + 848) - *(_QWORD *)(a2 + 840)) >> 2);
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 864), *(const void **)(a2 + 864), *(_QWORD *)(a2 + 872), (uint64_t)(*(_QWORD *)(a2 + 872) - *(_QWORD *)(a2 + 864)) >> 2);
  *(_QWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 888), *(const void **)(a2 + 888), *(_QWORD *)(a2 + 896), (uint64_t)(*(_QWORD *)(a2 + 896) - *(_QWORD *)(a2 + 888)) >> 2);
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 912), *(const void **)(a2 + 912), *(_QWORD *)(a2 + 920), (uint64_t)(*(_QWORD *)(a2 + 920) - *(_QWORD *)(a2 + 912)) >> 2);
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 936), *(const void **)(a2 + 936), *(_QWORD *)(a2 + 944), (uint64_t)(*(_QWORD *)(a2 + 944) - *(_QWORD *)(a2 + 936)) >> 2);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  return a1;
}

void sub_1B6217918(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v9 = *v7;
  if (*v7)
  {
    v1[115] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v1[112] = v10;
    operator delete(v10);
  }
  v11 = *v5;
  if (*v5)
  {
    v1[109] = v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v1[106] = v12;
    operator delete(v12);
  }
  v13 = *v3;
  if (*v3)
  {
    v1[103] = v13;
    operator delete(v13);
  }
  v14 = *v2;
  if (*v2)
  {
    v1[100] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void NeuralNet::~NeuralNet(NeuralNet *this)
{
  const void *v2;
  uint64_t v3;
  NeuralNetCache *v4;
  uint64_t v5;
  void *v6;
  NSObject **v7;
  NSObject *v8;
  const __CFString *v9;
  void **v10;
  const void *v11;
  uint64_t v12;
  std::runtime_error *exception;
  void *__p[2];
  char v15;
  _BYTE buf[12];
  __int16 v17;
  int v18;
  __int16 v19;
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_17;
  CFRetain(*((CFTypeRef *)this + 3));
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *(_QWORD *)buf = v3;
  v4 = -[NeuralNetCache initWithImpl:]([NeuralNetCache alloc], "initWithImpl:", buf);
  v5 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  +[NeuralNetCache sharedCache](NeuralNetCache, "sharedCache");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKey:", v4, v2);

  CFRelease(v2);
  v7 = (NSObject **)*((_QWORD *)this + 2);
  if (!v7)
  {
    v8 = MEMORY[0x1E0C81028];
LABEL_8:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (const __CFString *)*((_QWORD *)this + 3);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(v9, (uint64_t)__p);
      if (v15 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNet.cpp";
      v17 = 1024;
      v18 = 269;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Saved implementation to cache for model %s.", buf, 0x1Cu);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  v8 = *v7;
  if (*v7)
    goto LABEL_8;
LABEL_15:
  v11 = (const void *)*((_QWORD *)this + 3);
  if (v11)
    CFRelease(v11);
LABEL_17:
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void sub_1B6217B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (a2)
  {
    __cxa_free_exception(v13);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AUMicSelectorV2::~AUMicSelectorV2(AUMicSelectorV2 *this)
{
  AUMicSelectorV2::~AUMicSelectorV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  char *v3;
  OpaqueAudioComponentInstance *v4;
  OpaqueAudioComponentInstance *v5;
  OpaqueAudioComponentInstance *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = 0;
  *(_QWORD *)this = &off_1E69CB738;
  do
  {
    v3 = (char *)this + v2;
    v4 = *(OpaqueAudioComponentInstance **)((char *)this + v2 + 536);
    if (v4)
    {
      AudioComponentInstanceDispose(v4);
      *((_QWORD *)v3 + 67) = 0;
    }
    v5 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 94);
    if (v5)
    {
      AudioComponentInstanceDispose(v5);
      *((_QWORD *)v3 + 94) = 0;
    }
    v2 += 8;
  }
  while (v2 != 24);
  v6 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 121);
  if (v6)
  {
    AudioComponentInstanceDispose(v6);
    *((_QWORD *)this + 121) = 0;
  }
  (*(void (**)(AUMicSelectorV2 *))(*(_QWORD *)this + 64))(this);
  v7 = *((_QWORD *)this + 158);
  if (v7)
    MEMORY[0x1BCC95CC8](v7, 0x1000C8052888210);
  *((_QWORD *)this + 158) = 0;
  for (i = 1240; i != 1168; i -= 24)
  {
    v9 = *(_QWORD *)((char *)this + i);
    if (v9)
      MEMORY[0x1BCC95CC8](v9, 0x1000C8052888210);
    *(_QWORD *)((char *)this + i) = 0;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 144);
  if (v10)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v10);
    *((_QWORD *)this + 144) = 0;
  }
  *((_QWORD *)this + 145) = 0;
  *((_DWORD *)this + 286) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 136);
  if (v11)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v11);
    *((_QWORD *)this + 136) = 0;
  }
  *((_QWORD *)this + 137) = 0;
  *((_DWORD *)this + 270) = 0;
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMicSelectorV2::Initialize(AUMicSelectorV2 *this)
{
  ausdk::AUScope *v2;
  double v3;
  uint64_t result;
  uint64_t Element;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  float v11;
  unsigned int v12;
  uint64_t i;
  uint64_t v14;
  __int128 v15;
  int v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  unsigned int outData;
  UInt32 ioDataSize;
  int v29;
  __int128 inData;
  __int128 v31;
  uint64_t v32;

  v2 = (AUMicSelectorV2 *)((char *)this + 80);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 80), 0) + 80);
  if (v3 != *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80))
    return 4294956428;
  Element = ausdk::AUScope::SafeGetElement(v2, 0);
  v6 = *(_QWORD *)(Element + 112);
  v7 = *(_OWORD *)(Element + 96);
  *((_OWORD *)this + 65) = *(_OWORD *)(Element + 80);
  *((_OWORD *)this + 66) = v7;
  *((_QWORD *)this + 134) = v6;
  ausdk::AUBufferList::Allocate((AUMicSelectorV2 *)((char *)this + 1080), (const AudioStreamBasicDescription *)this + 26, *((_DWORD *)this + 84));
  v8 = ausdk::AUScope::SafeGetElement(v2, 0);
  v9 = *(_QWORD *)(v8 + 112);
  v10 = *(_OWORD *)(v8 + 80);
  *((_OWORD *)this + 70) = *(_OWORD *)(v8 + 96);
  *((_OWORD *)this + 69) = v10;
  *((_QWORD *)this + 142) = v9;
  *((_DWORD *)this + 283) = 2;
  ausdk::AUBufferList::Allocate((AUMicSelectorV2 *)((char *)this + 1144), (const AudioStreamBasicDescription *)((char *)this + 1104), *((_DWORD *)this + 84));
  v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
      * 10.0
      / (float)*((unsigned int *)this + 84);
  v12 = vcvtps_u32_f32(v11);
  for (i = 1192; i != 1264; i += 24)
    AUMicSelectorV2::NoiseFloorDetectorV2::Initialize((AUMicSelectorV2 *)((char *)this + i), v12);
  AUMicSelectorV2::NoiseFloorDetectorV2::Initialize((AUMicSelectorV2 *)((char *)this + 1264), v12);
  AUMicSelectorV2::CalculateTimeConstants(this);
  AUMicSelectorV2::SetNoiseFloorDetectorLength(this);
  AUMicSelectorV2::ClearState(this);
  v14 = 0;
  v15 = *((_OWORD *)this + 70);
  inData = *((_OWORD *)this + 69);
  v31 = v15;
  v32 = *((_QWORD *)this + 142);
  HIDWORD(v31) = 1;
  v16 = *((_DWORD *)this + 84);
  ioDataSize = 4;
  v29 = v16;
  v17 = (char *)this + 560;
  outData = 0;
  while (1)
  {
    v18 = &v17[v14];
    result = AudioUnitSetProperty(*(AudioUnit *)&v17[v14 - 24], 8u, 1u, 0, &inData, 0x28u);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetProperty(*((AudioUnit *)v18 - 3), 8u, 2u, 0, &inData, 0x28u);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetProperty(*((AudioUnit *)v18 - 3), 0xEu, 0, 0, &v29, 4u);
    if ((_DWORD)result)
      break;
    result = AudioUnitGetProperty(*((AudioUnit *)v18 - 3), 0x899u, 0, 0, &outData, &ioDataSize);
    if ((_DWORD)result)
      break;
    v19 = outData;
    if (outData >= 4)
      v19 = 4;
    outData = v19;
    result = AudioUnitSetProperty(*((AudioUnit *)v18 - 3), 0x898u, 0, 0, &outData, 4u);
    if ((_DWORD)result)
      break;
    result = SetDoNotAllocateInternalBuffers(*((OpaqueAudioComponentInstance **)v18 - 3));
    if ((_DWORD)result)
      break;
    result = AudioUnitInitialize(*((AudioUnit *)v18 - 3));
    if ((_DWORD)result)
      break;
    v20 = &v17[8 * v14];
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x3E8u, 0, 0, 0.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x7D0u, 0, 0, 2.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0xBB8u, 0, 0, 2000.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x3E9u, 0, 0, 0.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x7D1u, 0, 0, 2.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0xBB9u, 0, 0, 2000.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x3EAu, 0, 0, 0.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x7D2u, 0, 0, 1.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0xBBAu, 0, 0, 3800.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x3EBu, 0, 0, 0.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0x7D3u, 0, 0, 1.0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitSetParameter(*((AudioUnit *)v18 - 3), 0xBBBu, 0, 0, 3800.0, 0);
    if ((_DWORD)result)
      break;
    v14 += 8;
    if (v14 == 24)
    {
      v21 = 0;
      v22 = (char *)this + 776;
      while (1)
      {
        v23 = &v22[v21];
        result = AudioUnitSetProperty(*(AudioUnit *)&v22[v21 - 24], 8u, 1u, 0, &inData, 0x28u);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetProperty(*((AudioUnit *)v23 - 3), 8u, 2u, 0, &inData, 0x28u);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetProperty(*((AudioUnit *)v23 - 3), 0xEu, 0, 0, &v29, 4u);
        if ((_DWORD)result)
          break;
        result = AudioUnitGetProperty(*((AudioUnit *)v23 - 3), 0x899u, 0, 0, &outData, &ioDataSize);
        if ((_DWORD)result)
          break;
        v24 = outData;
        if (outData >= 4)
          v24 = 4;
        outData = v24;
        result = AudioUnitSetProperty(*((AudioUnit *)v23 - 3), 0x898u, 0, 0, &outData, 4u);
        if ((_DWORD)result)
          break;
        result = SetDoNotAllocateInternalBuffers(*((OpaqueAudioComponentInstance **)v23 - 3));
        if ((_DWORD)result)
          break;
        result = AudioUnitInitialize(*((AudioUnit *)v23 - 3));
        if ((_DWORD)result)
          break;
        v25 = &v22[8 * v21];
        *((_OWORD *)v25 + 2) = 0u;
        *((_OWORD *)v25 + 3) = 0u;
        *(_OWORD *)v25 = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x3E8u, 0, 0, 0.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x7D0u, 0, 0, 2.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0xBB8u, 0, 0, 50.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x3E9u, 0, 0, 0.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x7D1u, 0, 0, 2.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0xBB9u, 0, 0, 50.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x3EAu, 0, 0, 0.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x7D2u, 0, 0, 1.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0xBBAu, 0, 0, 120.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x3EBu, 0, 0, 0.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0x7D3u, 0, 0, 1.0, 0);
        if ((_DWORD)result)
          break;
        result = AudioUnitSetParameter(*((AudioUnit *)v23 - 3), 0xBBBu, 0, 0, 120.0, 0);
        if ((_DWORD)result)
          break;
        v21 += 8;
        if (v21 == 24)
        {
          result = AudioUnitSetProperty(*((AudioUnit *)this + 121), 8u, 1u, 0, (char *)this + 1104, 0x28u);
          if (!(_DWORD)result)
          {
            result = AudioUnitSetProperty(*((AudioUnit *)this + 121), 8u, 2u, 0, (char *)this + 1104, 0x28u);
            if (!(_DWORD)result)
            {
              result = AudioUnitSetProperty(*((AudioUnit *)this + 121), 0xEu, 0, 0, &v29, 4u);
              if (!(_DWORD)result)
              {
                result = AudioUnitGetProperty(*((AudioUnit *)this + 121), 0x899u, 0, 0, &outData, &ioDataSize);
                if (!(_DWORD)result)
                {
                  v26 = outData;
                  if (outData >= 4)
                    v26 = 4;
                  outData = v26;
                  result = AudioUnitSetProperty(*((AudioUnit *)this + 121), 0x898u, 0, 0, &outData, 4u);
                  if (!(_DWORD)result)
                  {
                    result = SetDoNotAllocateInternalBuffers(*((OpaqueAudioComponentInstance **)this + 121));
                    if (!(_DWORD)result)
                    {
                      result = AudioUnitInitialize(*((AudioUnit *)this + 121));
                      if (!(_DWORD)result)
                      {
                        *((_OWORD *)this + 63) = 0u;
                        *((_OWORD *)this + 64) = 0u;
                        *((_OWORD *)this + 61) = 0u;
                        *((_OWORD *)this + 62) = 0u;
                        result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x3E8u, 0, 0, 0.0, 0);
                        if (!(_DWORD)result)
                        {
                          result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x7D0u, 0, 0, 2.0, 0);
                          if (!(_DWORD)result)
                          {
                            result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0xBB8u, 0, 0, 50.0, 0);
                            if (!(_DWORD)result)
                            {
                              result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x3E9u, 0, 0, 0.0, 0);
                              if (!(_DWORD)result)
                              {
                                result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x7D1u, 0, 0, 2.0, 0);
                                if (!(_DWORD)result)
                                {
                                  result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0xBB9u, 0, 0, 50.0, 0);
                                  if (!(_DWORD)result)
                                  {
                                    result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x3EAu, 0, 0, 0.0, 0);
                                    if (!(_DWORD)result)
                                    {
                                      result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x7D2u, 0, 0, 1.0, 0);
                                      if (!(_DWORD)result)
                                      {
                                        result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0xBBAu, 0, 0, 120.0, 0);
                                        if (!(_DWORD)result)
                                        {
                                          result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x3EBu, 0, 0, 0.0, 0);
                                          if (!(_DWORD)result)
                                          {
                                            result = AudioUnitSetParameter(*((AudioUnit *)this + 121), 0x7D3u, 0, 0, 1.0, 0);
                                            if (!(_DWORD)result)
                                              return AudioUnitSetParameter(*((AudioUnit *)this + 121), 0xBBBu, 0, 0, 120.0, 0);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return result;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t AUMicSelectorV2::Cleanup(AUMicSelectorV2 *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 136);
  if (v2)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v2);
    *((_QWORD *)this + 136) = 0;
  }
  *((_QWORD *)this + 137) = 0;
  *((_DWORD *)this + 270) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 144);
  if (v3)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v3);
    *((_QWORD *)this + 144) = 0;
  }
  v4 = 0;
  *((_QWORD *)this + 145) = 0;
  *((_DWORD *)this + 286) = 0;
  while (1)
  {
    result = AudioUnitUninitialize(*(AudioUnit *)((char *)this + v4 + 536));
    if ((_DWORD)result)
      break;
    result = AudioUnitUninitialize(*(AudioUnit *)((char *)this + v4 + 752));
    if ((_DWORD)result)
      break;
    v4 += 8;
    if (v4 == 24)
      return AudioUnitUninitialize(*((AudioUnit *)this + 121));
  }
  return result;
}

uint64_t AUMicSelectorV2::Reset(AudioUnit *this)
{
  uint64_t v2;
  uint64_t result;

  AUMicSelectorV2::ClearState((AUMicSelectorV2 *)this);
  v2 = 0;
  while (1)
  {
    result = AudioUnitReset(this[v2 + 67], 0, 0);
    if ((_DWORD)result)
      break;
    result = AudioUnitReset(this[v2 + 94], 0, 0);
    if ((_DWORD)result)
      break;
    if (++v2 == 3)
      return AudioUnitReset(this[121], 0, 0);
  }
  return result;
}

uint64_t AUMicSelectorV2::GetPropertyInfo(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  v7 = 1;
  result = 4294956417;
  if (a2 > 3699)
  {
    if (a2 != 1869968493)
    {
      if (a2 == 846031203)
      {
LABEL_10:
        result = 0;
        *a6 = v7;
        *a5 = 4;
        return result;
      }
      if (a2 != 3700)
        return result;
    }
    v7 = 0;
    goto LABEL_10;
  }
  if (a2 == 21 || a2 == 1111)
    goto LABEL_10;
  return result;
}

uint64_t AUMicSelectorV2::GetProperty(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v7;
  ausdk::AUElement *v8;
  unsigned int Parameter;
  ausdk::AUElement **v10;

  if (!a3)
  {
    v5 = 4294956417;
    if (a2 <= 3699)
    {
      if (a2 == 21)
      {
        Parameter = (*(uint64_t (**)(AUMicSelectorV2 *))(*(_QWORD *)this + 576))(this);
      }
      else
      {
        if (a2 != 1111)
          return v5;
        Parameter = *((_DWORD *)this + 353);
      }
    }
    else
    {
      switch(a2)
      {
        case 3700:
          Parameter = *((unsigned __int8 *)this + 376);
          break;
        case 846031203:
          Parameter = *((unsigned __int8 *)this + 1416);
          break;
        case 1869968493:
          v7 = *((_QWORD *)this + 9);
          if (v7)
          {
            v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
          }
          else
          {
            v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v10)
              v8 = 0;
            else
              v8 = *v10;
          }
          Parameter = ausdk::AUElement::GetParameter(v8, 0x1Cu);
          break;
        default:
          return v5;
      }
    }
    v5 = 0;
    *a5 = Parameter;
    return v5;
  }
  return 4294956417;
}

uint64_t AUMicSelectorV2::SetProperty(AUMicSelectorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 846031203:
      result = 0;
      *((_BYTE *)this + 1416) = *a5 != 0;
      break;
    case 1111:
      result = 0;
      *((_DWORD *)this + 353) = *a5;
      break;
    case 21:
      if (a6 >= 4)
      {
        v8 = *a5;
        v9 = *a5 != 0;
        if (v9 != (*(unsigned int (**)(AUMicSelectorV2 *))(*(_QWORD *)this + 576))(this))
          (*(void (**)(AUMicSelectorV2 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
        return 0;
      }
      else
      {
        return 4294956445;
      }
    default:
      return 4294956417;
  }
  return result;
}

uint64_t AUMicSelectorV2::SetParameter(AUMicSelectorV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3)
    return 4294956418;
  if (a2 - 1 >= 3)
  {
    if (a2 == 18)
      AUMicSelectorV2::SetNoiseFloorDetectorLength(this);
  }
  else
  {
    AUMicSelectorV2::CalculateTimeConstants(this);
  }
  return 0;
}

uint64_t AUMicSelectorV2::CanScheduleParameters(AUMicSelectorV2 *this)
{
  return 0;
}

uint64_t AUMicSelectorV2::ProcessMultipleBufferLists(AUMicSelectorV2 *this, unsigned int *a2, uint64_t a3, uint64_t a4, const AudioBufferList **a5, uint64_t a6, AudioBufferList **a7)
{
  unsigned int v8;
  AUMicSelectorV2 *v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float Parameter;
  uint64_t v15;
  ausdk::AUElement *v16;
  void *mData;
  void *v18;
  unsigned int v19;
  const AudioBufferList *v20;
  const float *v21;
  const float *v22;
  const float *v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  ausdk::AUElement **v27;
  ausdk::AUElement **v28;
  float v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  float v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  float v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  float v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  float v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  float v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  float v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  float v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  float v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  float v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  float v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  float v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  float v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  float v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  float v113;
  uint64_t v114;
  AudioUnitRenderActionFlags *v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  float v119;
  float v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  float v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  double v132;
  size_t v133;
  uint64_t BufferList;
  OpaqueAudioComponentInstance *v135;
  char *v136;
  float v137;
  float v138;
  float v139;
  float v140;
  int v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float v154;
  float v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float v161;
  int v162;
  int v163;
  _BOOL4 v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  float v169;
  float v170;
  ausdk::AUElement *v171;
  int v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  unint64_t v180;
  float v181;
  float v182;
  float *v183;
  float v184;
  float v185;
  float v186;
  float32x2_t v187;
  float32x2_t v188;
  int v189;
  BOOL v190;
  int v191;
  float v192;
  float v193;
  float v194;
  int v195;
  float v196;
  ausdk::AUElement **v197;
  BOOL v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  int v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  uint64_t v215;
  float v216;
  uint64_t v217;
  float v218;
  ausdk::AUElement *v219;
  int v220;
  float v221;
  ausdk::AUElement **v222;
  float v223;
  int v224;
  int v225;
  float v226;
  float v227;
  int v228;
  float v230;
  float v231;
  int v232;
  int v233;
  float v234;
  float v235;
  float v236;
  float v237;
  int v238;
  float v239;
  float v240;
  uint64_t v241;
  ausdk::AUElement *v242;
  ausdk::AUElement **v243;
  unsigned int v244;
  unsigned int v245;
  float v246;
  float v247;
  float v248;
  uint64_t v249;
  ausdk::AUElement *v250;
  ausdk::AUElement **v251;
  uint64_t v252;
  ausdk::AUElement *v253;
  ausdk::AUElement **v254;
  uint64_t v255;
  ausdk::AUElement *v256;
  ausdk::AUElement **v257;
  float v258;
  uint64_t v259;
  ausdk::AUElement *v260;
  ausdk::AUElement **v261;
  float v262;
  uint64_t v263;
  ausdk::AUElement *v264;
  ausdk::AUElement **v265;
  float v266;
  uint64_t v267;
  ausdk::AUElement *v268;
  ausdk::AUElement **v269;
  uint64_t v270;
  ausdk::AUElement *v271;
  ausdk::AUElement **v272;
  uint64_t v273;
  ausdk::AUElement *v274;
  ausdk::AUElement **v275;
  uint64_t v276;
  ausdk::AUElement *v277;
  ausdk::AUElement **v278;
  uint64_t v279;
  ausdk::AUElement *v280;
  ausdk::AUElement **v281;
  uint64_t v282;
  ausdk::AUElement *v283;
  ausdk::AUElement **v284;
  uint64_t v285;
  ausdk::AUElement *v286;
  ausdk::AUElement **v287;
  uint64_t v288;
  ausdk::AUElement *v289;
  ausdk::AUElement **v290;
  uint64_t v291;
  ausdk::AUElement *v292;
  ausdk::AUElement **v293;
  uint64_t v294;
  ausdk::AUElement *v295;
  ausdk::AUElement **v296;
  uint64_t v297;
  ausdk::AUElement *v298;
  ausdk::AUElement **v299;
  uint64_t v300;
  ausdk::AUElement *v301;
  ausdk::AUElement **v302;
  uint64_t v303;
  ausdk::AUElement *v304;
  ausdk::AUElement **v305;
  uint64_t v306;
  ausdk::AUElement *v307;
  ausdk::AUElement **v308;
  BOOL v310;
  BOOL v311;
  _BOOL4 v312;
  _BOOL4 v313;
  float v314;
  float v315;
  BOOL v316;
  float v317;
  uint64_t v318;
  ausdk::AUElement *v319;
  int v320;
  _BOOL4 v322;
  _BOOL4 v323;
  ausdk::AUElement **v324;
  uint64_t v325;
  ausdk::AUElement *v326;
  ausdk::AUElement **v327;
  float v328;
  uint64_t v329;
  ausdk::AUElement *v330;
  ausdk::AUElement *v331;
  ausdk::AUElement **v332;
  ausdk::AUElement **v333;
  uint64_t v334;
  ausdk::AUElement *v335;
  ausdk::AUElement **v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  uint64_t v353;
  float v354;
  float v355;
  float v356;
  float v357;
  const void *v358;
  const void *v359;
  float v360;
  float v361;
  float v362;
  int v363;
  float v364;
  float v365;
  float v366;
  const AudioStreamBasicDescription *v367;
  float v368;
  ausdk::AUBufferList *v369;
  float v370;
  AudioUnitRenderActionFlags *v371;
  size_t v372;
  float v373;
  unsigned int v374;
  float v375;
  AudioUnit *v376;
  float v377;
  char __src;
  void *__srca;
  float __srcb;
  vDSP_Length __N;
  float __Na;
  AUMicSelectorV2 *v383;
  unsigned __int8 v384;
  unsigned __int8 v385;
  float __C;
  float v387;
  float v388;
  float v389;
  float32x2_t v390;
  float v391;
  _QWORD v392[2];
  void *v393;
  uint64_t v394;

  v8 = a3;
  v10 = this;
  v394 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(_QWORD *)v11 + 32))(v11, 0, a3, a4, a5, a6, a7);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  Parameter = ausdk::AUElement::GetParameter(v12, 0x1Bu);
  if ((*(unsigned int (**)(AUMicSelectorV2 *))(*(_QWORD *)v10 + 576))(v10))
  {
    v15 = *((_QWORD *)v10 + 9);
    if (Parameter == 2.0)
    {
      if (v15)
      {
        v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
      }
      else
      {
        v28 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
        if (*((ausdk::AUElement ***)v10 + 7) == v28)
          v16 = 0;
        else
          v16 = *v28;
      }
      v196 = 0.0;
    }
    else
    {
      if (v15)
      {
        v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
      }
      else
      {
        v27 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
        if (*((ausdk::AUElement ***)v10 + 7) == v27)
          v16 = 0;
        else
          v16 = *v27;
      }
      v196 = 2.0;
    }
    ausdk::AUElement::SetParameter(v16, 0x1Cu, v196, 0);
    return 0;
  }
  mData = (*a5)->mBuffers[0].mData;
  v18 = a5[1]->mBuffers[0].mData;
  v392[1] = mData;
  v393 = 0;
  v392[0] = v18;
  if (*((_BYTE *)v10 + 1416) || (v20 = a5[2]) == 0)
  {
    __src = 0;
    v19 = 2;
  }
  else
  {
    v393 = v20->mBuffers[0].mData;
    v19 = 3;
    __src = 1;
  }
  v21 = (const float *)a5[3]->mBuffers[0].mData;
  v22 = (const float *)a5[4]->mBuffers[0].mData;
  v23 = (const float *)a5[5]->mBuffers[0].mData;
  v24 = *((_QWORD *)v10 + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  v29 = ausdk::AUElement::GetParameter(v25, 4u);
  v30 = *((_QWORD *)v10 + 9);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  v33 = ausdk::AUElement::GetParameter(v31, 5u);
  v34 = *((_QWORD *)v10 + 9);
  v350 = v33;
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  v37 = ausdk::AUElement::GetParameter(v35, 6u);
  v38 = *((_QWORD *)v10 + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  v41 = ausdk::AUElement::GetParameter(v39, 8u);
  v42 = *((_QWORD *)v10 + 9);
  v348 = v41;
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  v45 = ausdk::AUElement::GetParameter(v43, 9u);
  v46 = *((_QWORD *)v10 + 9);
  v349 = v45;
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  v352 = ausdk::AUElement::GetParameter(v47, 0xAu);
  v49 = *((_QWORD *)v10 + 9);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  v52 = ausdk::AUElement::GetParameter(v50, 0xCu);
  v53 = *((_QWORD *)v10 + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  v56 = ausdk::AUElement::GetParameter(v54, 0xDu);
  v57 = *((_QWORD *)v10 + 9);
  v339 = v56;
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  v346 = ausdk::AUElement::GetParameter(v58, 0xFu);
  v60 = *((_QWORD *)v10 + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  v342 = ausdk::AUElement::GetParameter(v61, 0x3Eu);
  v63 = *((_QWORD *)v10 + 9);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  v66 = ausdk::AUElement::GetParameter(v64, 0xEu);
  v67 = *((_QWORD *)v10 + 9);
  v340 = v66;
  v344 = v52;
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  v70 = ausdk::AUElement::GetParameter(v68, 0x10u);
  v71 = *((_QWORD *)v10 + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  v357 = ausdk::AUElement::GetParameter(v72, 0x13u);
  v74 = *((_QWORD *)v10 + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  v77 = ausdk::AUElement::GetParameter(v75, 0x14u);
  v78 = *((_QWORD *)v10 + 9);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  v81 = ausdk::AUElement::GetParameter(v79, 0x15u);
  v82 = *((_QWORD *)v10 + 9);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  v85 = ausdk::AUElement::GetParameter(v83, 0x16u);
  v86 = *((_QWORD *)v10 + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  v89 = ausdk::AUElement::GetParameter(v87, 0x17u);
  v90 = *((_QWORD *)v10 + 9);
  v360 = v89;
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  v355 = ausdk::AUElement::GetParameter(v91, 0x18u);
  v93 = *((_QWORD *)v10 + 9);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  v354 = ausdk::AUElement::GetParameter(v94, 0x11u);
  v96 = *((_QWORD *)v10 + 9);
  v356 = v77;
  if (v96)
  {
    v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
  }
  else
  {
    v98 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v98)
      v97 = 0;
    else
      v97 = *v98;
  }
  v99 = ausdk::AUElement::GetParameter(v97, 0x2Cu);
  v100 = *((_QWORD *)v10 + 9);
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
  }
  else
  {
    v102 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  v103 = ausdk::AUElement::GetParameter(v101, 0x2Du);
  v104 = *((_QWORD *)v10 + 9);
  v341 = v103;
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  v337 = ausdk::AUElement::GetParameter(v105, 0x2Eu);
  v107 = *((_QWORD *)v10 + 9);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  v366 = ausdk::AUElement::GetParameter(v108, 0x2Fu);
  v110 = *((_QWORD *)v10 + 9);
  v343 = v29;
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  v113 = ausdk::AUElement::GetParameter(v111, 0x38u);
  v114 = *((_QWORD *)v10 + 9);
  v361 = v85;
  v362 = Parameter;
  v364 = v81;
  v365 = v70;
  v358 = mData;
  v359 = v18;
  if (v114)
  {
    v115 = a2;
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 32))(v114, 0);
  }
  else
  {
    v117 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    v115 = a2;
    if (*((ausdk::AUElement ***)v10 + 7) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  v345 = ausdk::AUElement::GetParameter(v116, 0);
  v118 = 0;
  __C = 0.0;
  v374 = v8;
  v119 = (float)v8;
  v120 = -v99;
  __N = v8;
  do
  {
    vDSP_svesq((const float *)v392[v118], 1, &__C, v8);
    *((float *)v10 + v118 + 322) = (float)((float)(1.0 - *((float *)v10 + 292))
                                         * (float)((float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0) - v99))
                                 + (float)(*((float *)v10 + 292) * *((float *)v10 + v118 + 322));
    ++v118;
  }
  while (v19 != v118);
  if ((__src & 1) != 0)
  {
    if (*((float *)v10 + 324) >= v366)
    {
      v363 = 1;
    }
    else
    {
      v363 = 0;
      *((_DWORD *)v10 + 342) = 0;
      v19 = 2;
    }
  }
  else
  {
    v363 = 0;
  }
  vDSP_svesq(v21, 1, &__C, v8);
  *((float *)v10 + 331) = (float)((float)(1.0 - *((float *)v10 + 292))
                                * (float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0))
                        + (float)(*((float *)v10 + 292) * *((float *)v10 + 331));
  vDSP_svesq(v23, 1, &__C, v8);
  *((float *)v10 + 332) = (float)((float)(1.0 - *((float *)v10 + 292))
                                * (float)((float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0) - v99))
                        + (float)(*((float *)v10 + 292) * *((float *)v10 + 332));
  vDSP_svesq(v22, 1, &__C, v8);
  *((float *)v10 + 333) = (float)((float)(1.0 - *((float *)v10 + 292))
                                * (float)((float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0) - v99))
                        + (float)(*((float *)v10 + 292) * *((float *)v10 + 333));
  v121 = *((_QWORD *)v10 + 9);
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  v124 = ausdk::AUElement::GetParameter(v122, 0x40u);
  v125 = *((_QWORD *)v10 + 9);
  v347 = v37;
  v338 = v113;
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  v128 = ausdk::AUElement::GetParameter(v126, 0x41u);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = (double)v374;
  v367 = (const AudioStreamBasicDescription *)((char *)v10 + 1040);
  v369 = (AUMicSelectorV2 *)((char *)v10 + 1080);
  v371 = v115;
  v372 = 4 * __N;
  v353 = v19;
  v383 = v10;
  v133 = 4 * __N;
  do
  {
    ausdk::AUBufferList::PrepareBuffer(v369, v367, v374);
    BufferList = ausdk::AUBufferList::GetBufferList(v369);
    __srca = (void *)v392[v129];
    memcpy(*(void **)(BufferList + 16), __srca, v133);
    v376 = (AudioUnit *)((char *)v10 + v129 * 8);
    v135 = *(OpaqueAudioComponentInstance **)((char *)v10 + v129 * 8 + 536);
    v136 = (char *)v383 + v130;
    AudioUnitProcess(v135, v115, (const AudioTimeStamp *)((char *)v383 + v130 + 560), v374, (AudioBufferList *)BufferList);
    *(double *)((char *)v383 + v130 + 560) = *(double *)((char *)v383 + v130 + 560) + v132;
    vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, __N);
    v137 = v120 + (float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0);
    if (v137 < v124)
      v137 = v124;
    v390.f32[v131 / 4] = v137;
    *(float *)((char *)v383 + v131 + 1300) = (float)((float)(1.0 - *((float *)v383 + 292)) * v137)
                                           + (float)(*((float *)v383 + 292) * *(float *)((char *)v383 + v131 + 1300));
    memcpy(*(void **)(BufferList + 16), __srca, v133);
    AudioUnitProcess(v376[94], v115, (const AudioTimeStamp *)(v136 + 776), v374, (AudioBufferList *)BufferList);
    *((double *)v136 + 97) = *((double *)v136 + 97) + v132;
    v10 = v383;
    vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, __N);
    v138 = v120 + (float)(log10f((float)(__C / v119) + 1.0e-12) * 10.0);
    if (v138 < v128)
      v138 = v128;
    *(float *)((char *)v383 + v131 + 1312) = (float)((float)(1.0 - *((float *)v383 + 292)) * v138)
                                           + (float)(*((float *)v383 + 292) * *(float *)((char *)v383 + v131 + 1312));
    v131 += 4;
    v130 += 64;
    ++v129;
  }
  while (4 * v19 != v131);
  v139 = *((float *)v383 + 325);
  v140 = *((float *)v383 + 326);
  v141 = v363;
  if ((v363 & 1) != 0)
  {
    v142 = *((float *)v383 + 327);
    v370 = v139 - v142;
    v368 = v140 - v142;
    v143 = *((float *)v383 + 328);
    v144 = *((float *)v383 + 329);
    v145 = v143 - v144;
    v146 = *((float *)v383 + 330);
    v147 = v143 - v146;
    v148 = v144 - v146;
  }
  else
  {
    v145 = *((float *)v383 + 328) - *((float *)v383 + 329);
    v368 = 0.0;
    v370 = 0.0;
    v147 = 0.0;
    v148 = 0.0;
  }
  v149 = v361;
  v150 = v139 - v140;
  ausdk::AUBufferList::PrepareBuffer((AUMicSelectorV2 *)((char *)v383 + 1144), (const AudioStreamBasicDescription *)((char *)v383 + 1104), v374);
  v151 = ausdk::AUBufferList::GetBufferList((AUMicSelectorV2 *)((char *)v383 + 1144));
  memcpy(*(void **)(v151 + 16), v358, v372);
  memcpy(*(void **)(v151 + 32), v359, v372);
  v152 = AudioUnitProcess(*((AudioUnit *)v383 + 121), v371, (const AudioTimeStamp *)((char *)v383 + 976), v374, (AudioBufferList *)v151);
  *((double *)v383 + 122) = *((double *)v383 + 122) + v132;
  vDSP_svesq(*(const float **)(v151 + 32), 1, &__C, __N);
  *((float *)v383 + 336) = (float)((float)(1.0 - *((float *)v383 + 293)) * __C)
                         + (float)(*((float *)v383 + 293) * *((float *)v383 + 336));
  vDSP_svesq(*(const float **)(v151 + 16), 1, &__C, __N);
  *((float *)v383 + 337) = (float)((float)(1.0 - *((float *)v383 + 293)) * __C)
                         + (float)(*((float *)v383 + 293) * *((float *)v383 + 337));
  vDSP_dotpr(*(const float **)(v151 + 16), 1, *(const float **)(v151 + 32), 1, &__C, __N);
  v153 = 0;
  v154 = (float)((float)(1.0 - *((float *)v383 + 293)) * __C) + (float)(*((float *)v383 + 293) * *((float *)v383 + 338));
  *((float *)v383 + 338) = v154;
  v155 = (float)(*((float *)v383 + 336) * *((float *)v383 + 337)) + 1.0e-10;
  v156 = (_DWORD *)((char *)v383 + 1204);
  do
  {
    v157 = *(v156 - 1);
    *(_DWORD *)(*(_QWORD *)(v156 - 3) + 4 * v157) = *(_DWORD *)((char *)v383 + v153 + 1288);
    *(v156 - 1) = (v157 + 1) % *v156;
    v153 += 4;
    v156 += 6;
  }
  while (v153 != 12);
  v158 = 0;
  v159 = *((unsigned int *)v383 + 318);
  *(_DWORD *)(*((_QWORD *)v383 + 158) + 4 * v159) = *((_DWORD *)v383 + 331);
  *((_DWORD *)v383 + 318) = (v159 + 1) % *((_DWORD *)v383 + 319);
  v160 = -72;
  do
  {
    *(&v384 + v158) = *((float *)v383 + v158 + 322) > (float)(v357
                                                            + AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum((const float **)((char *)v383 + v160 + 1264)));
    ++v158;
    v160 += 24;
  }
  while (v158 != 3);
  __Na = v154 / sqrtf(v155);
  v161 = v356 + AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum((const float **)v383 + 158);
  v162 = v384;
  v163 = v385;
  v164 = (v384 | v385) != 0;
  v165 = *((float *)v383 + 322);
  v166 = *((float *)v383 + 323);
  __srcb = v150;
  v375 = v145;
  v377 = *((float *)v383 + 331);
  if (v165 < v366 || v166 < v366)
  {
    v167 = v165 - v166;
    v172 = 32;
    v173 = 0.0;
    v174 = -100.0;
    v175 = -100.0;
    v176 = 0.0;
    v177 = 0.0;
    v178 = 0.0;
    v373 = 0.0;
LABEL_190:
    v169 = v362;
    v170 = v364;
    goto LABEL_261;
  }
  if (*((float *)v383 + 331) > v161)
  {
    v167 = 0.0;
    if (v384 | v385)
    {
      v168 = *((_QWORD *)v383 + 9);
      v169 = v362;
      v170 = v364;
      if (v168)
      {
        v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, 0);
      }
      else
      {
        v197 = (ausdk::AUElement **)*((_QWORD *)v383 + 6);
        if (*((ausdk::AUElement ***)v383 + 7) == v197)
          v171 = 0;
        else
          v171 = *v197;
      }
      if (ausdk::AUElement::GetParameter(v171, 0x3Fu) <= 0.1)
      {
        v192 = v161;
        v172 = 0;
        v174 = -100.0;
        v193 = 0.0;
        v175 = -100.0;
      }
      else
      {
        v172 = 0;
        v206 = *((float *)v383 + 332);
        v207 = *((float *)v383 + 333);
        v208 = v206 - v207;
        v209 = *((float *)v383 + 331);
        v210 = v206 - v209;
        v211 = v207 - v209;
        if (v210 <= v211)
          v174 = v211;
        else
          v174 = v210;
        if (v210 <= v211)
          v175 = v210;
        else
          v175 = v211;
        if (vabds_f32(v208, v365) <= v344 || (v212 = v208 - v365, (float)(__srcb * v212) <= 0.0))
        {
          v192 = v161;
          v193 = 0.0;
        }
        else
        {
          v192 = v161;
          if (v174 <= v346)
          {
            v193 = v339;
            if (v175 >= v342)
            {
              v172 = 0;
              v212 = 0.0;
            }
            else
            {
              v212 = -v212;
              v172 = 8;
            }
          }
          else
          {
            v172 = 8;
            v193 = v339;
          }
          if (v212 >= (float)-v193)
          {
            if (v212 <= v193)
              v193 = v212;
          }
          else
          {
            v193 = -v193;
          }
        }
      }
    }
    else
    {
      v192 = v161;
      v172 = 0;
      v174 = -100.0;
      v193 = 0.0;
      v175 = -100.0;
      v169 = v362;
      v170 = v364;
    }
    v213 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)v383 + 128), 0) + 80);
    *((_DWORD *)v383 + 334) = (int)(float)((float)((float)(v213 * 0.2) / (float)*((unsigned int *)v383 + 84)) + 0.5);
    v176 = 0.0;
    v177 = 0.0;
    v178 = 0.0;
    v373 = 0.0;
    v173 = v193;
    v161 = v192;
    goto LABEL_261;
  }
  v179 = 0.0;
  if (v363)
  {
    v180 = 0;
    v181 = *((float *)v383 + 294);
    v182 = 1.0 - v181;
    do
    {
      v183 = (float *)((char *)v383 + v180);
      v184 = v390.f32[v180 / 4];
      v185 = (float)(v182 * v184) + (float)(v181 * *(float *)((char *)v383 + v180 + 1376));
      v183[344] = v185;
      v186 = (float)((float)(v184 - v185) * (float)(v182 * (float)(v184 - v185)))
           + (float)(v181 * *(float *)((char *)v383 + v180 + 1388));
      v183[347] = v186;
      *(float *)((char *)&v387 + v180) = sqrtf(v186);
      v180 += 4;
    }
    while (4 * v353 != v180);
    v187 = vmla_n_f32(vmul_n_f32(vmul_n_f32(vsub_f32(v390, *(float32x2_t *)((char *)v383 + 1376)), v182), v391 - *((float *)v383 + 346)), *(float32x2_t *)((char *)v383 + 1400), v181);
    *((float32x2_t *)v383 + 175) = v187;
    v188 = vadd_f32(v187, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
    v179 = log10f(vdiv_f32(v188, (float32x2_t)vdup_lane_s32((int32x2_t)v188, 1)).f32[0]) * 10.0;
  }
  v189 = *((_DWORD *)v383 + 334);
  v190 = __OFSUB__(v189, 1);
  v191 = v189 - 1;
  v373 = v179;
  if (v191 < 0 == v190)
  {
    v172 = 0;
    *((_DWORD *)v383 + 334) = v191;
    v167 = 0.0;
LABEL_188:
    v174 = -100.0;
    v173 = 0.0;
    v175 = -100.0;
    v176 = 0.0;
LABEL_189:
    v177 = 0.0;
    v178 = 0.0;
    goto LABEL_190;
  }
  if (v164)
  {
    v194 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)v383 + 128), 0) + 80);
    v195 = (int)(float)((float)((float)(v194 * 0.2) / (float)*((unsigned int *)v383 + 84)) + 0.5);
    *((_DWORD *)v383 + 335) = v195;
  }
  else
  {
    v195 = *((_DWORD *)v383 + 335);
    if (v195 >= 1)
      *((_DWORD *)v383 + 335) = --v195;
  }
  v176 = v349;
  v177 = v350;
  if (fabsf(v145) > v348)
  {
    v198 = v145 >= 0.0 && v345 == 1.0;
    v167 = 0.0;
    if (v198)
      v199 = 0.0;
    else
      v199 = v145;
    if (v199 <= v349)
    {
      v176 = v199;
      if (v199 < (float)-v349)
        v176 = -v349;
    }
    if (v363)
    {
      if (v145 < 0.0 && v148 < v352 || (v172 = 0, v174 = -100.0, v145 > 0.0) && v147 < v352)
      {
        v172 = 0;
        goto LABEL_188;
      }
    }
    else
    {
      v172 = 1;
      v174 = -100.0;
    }
    v173 = 0.0;
    v175 = -100.0;
    goto LABEL_189;
  }
  if (!v363)
  {
    v172 = 0;
    v204 = fabsf(v150);
    v167 = 0.0;
    v174 = -100.0;
    v169 = v362;
    v170 = v364;
    if (v204 <= v343 || __Na >= v354)
      goto LABEL_254;
    if ((*((_BYTE *)v383 + 1368) & 8) != 0)
    {
LABEL_253:
      v172 = 0;
      v174 = -100.0;
LABEL_254:
      v173 = 0.0;
      v175 = -100.0;
      v176 = 0.0;
      v177 = 0.0;
LABEL_553:
      v178 = 0.0;
      goto LABEL_261;
    }
    if (v345 == 1.0)
    {
      if (*((_DWORD *)v383 + 341) && v375 >= 0.0)
        goto LABEL_253;
    }
    else
    {
      v205 = *((_DWORD *)v383 + 341);
      if (*((_DWORD *)v383 + 353) == 6)
      {
        if (v205 && v375 <= -2.0)
          goto LABEL_253;
        if (v204 <= v350)
          v177 = -v204;
        else
          v177 = -v350;
        goto LABEL_550;
      }
      if (v205 && v375 >= 2.0)
        goto LABEL_253;
    }
    if (v204 <= v350)
    {
      v172 = 128;
      goto LABEL_555;
    }
LABEL_550:
    v172 = 128;
    goto LABEL_551;
  }
  v169 = v362;
  v170 = v364;
  if (!v164)
  {
    v167 = 0.0;
    if (v195 > 0)
      goto LABEL_253;
    if (fabsf(__srcb) <= v343)
    {
      v320 = *((_DWORD *)v383 + 353);
      if (v320 != 6 || v370 <= v343 || __srcb <= v347)
      {
        v322 = v368 > v343 && v320 == 5;
        v323 = __srcb < (float)-v347;
        if (v322 && v323)
          v177 = v368;
        else
          v177 = 0.0;
        if (v322 && v323)
          v172 = 16;
        else
          v172 = 0;
        goto LABEL_551;
      }
      v177 = -v370;
      goto LABEL_532;
    }
    if (__srcb >= 0.0 || v368 <= v347)
    {
      v172 = 0;
      v174 = -100.0;
      if (__srcb <= 0.0 || v370 <= v347)
        goto LABEL_254;
    }
    v204 = -__srcb;
    if (v350 < (float)-__srcb)
    {
LABEL_532:
      v172 = 16;
      goto LABEL_551;
    }
    if (__srcb > v350)
    {
      v177 = -v350;
      goto LABEL_532;
    }
    v172 = 16;
LABEL_555:
    v174 = -100.0;
    v173 = 0.0;
    v175 = -100.0;
    v176 = 0.0;
    v177 = v204;
    goto LABEL_553;
  }
  v200 = fabsf(v150);
  if (v200 <= v343)
  {
    v172 = 0;
    v203 = 0.0;
    v202 = v347;
  }
  else
  {
    v201 = -v343;
    v202 = v347;
    if (v150 >= 0.0 || v370 >= v201)
    {
      v172 = 2;
      if (v150 <= 0.0 || (v311 = v368 < v201, v203 = v150, !v311))
      {
        v312 = v150 > 0.0;
        v313 = v150 < 0.0;
        if (v368 <= v347)
          v313 = 0;
        if (v370 <= v347)
          v312 = 0;
        v203 = -v150;
        if (v313 || v312)
        {
          v172 = 2;
        }
        else
        {
          v203 = 0.0;
          v172 = 0;
        }
      }
    }
    else
    {
      v172 = 2;
      v203 = v150;
    }
  }
  if (v203 <= v350)
  {
    v177 = v203;
    if (v203 < (float)-v350)
      v177 = -v350;
  }
  v167 = 0.0;
  if (v200 >= v202)
    goto LABEL_551;
  v314 = *((float *)v383 + 325);
  if (v314 <= v341)
    goto LABEL_551;
  v315 = *((float *)v383 + 326);
  v174 = -100.0;
  if (v315 <= v341 || v314 >= v337 || v315 >= v337)
    goto LABEL_552;
  v316 = v388 <= 2.4 && v387 <= 2.4;
  v174 = -100.0;
  if (v316 || v389 <= 2.4)
    goto LABEL_552;
  if (*((float *)v383 + 350) <= 0.1 || *((float *)v383 + 351) <= 0.1 || vabds_f32(v387, v388) >= 5.0)
  {
LABEL_551:
    v174 = -100.0;
LABEL_552:
    v173 = 0.0;
    v175 = -100.0;
    v176 = 0.0;
    goto LABEL_553;
  }
  v351 = v177;
  if (vabds_f32(v387, v389) < 5.0
    && vabds_f32(v388, v389) < 5.0
    && ((v317 = fabsf(v179), (v318 = *((_QWORD *)v383 + 9)) == 0)
      ? ((v324 = (ausdk::AUElement **)*((_QWORD *)v383 + 6), *((ausdk::AUElement ***)v383 + 7) == v324)
       ? (v319 = 0)
       : (v319 = *v324))
      : (v319 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v318 + 32))(v318, 0)),
        v317 >= ausdk::AUElement::GetParameter(v319, 0x36u)))
  {
    v325 = *((_QWORD *)v383 + 9);
    if (v325)
    {
      v326 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v325 + 32))(v325, 0);
    }
    else
    {
      v327 = (ausdk::AUElement **)*((_QWORD *)v383 + 6);
      if (*((ausdk::AUElement ***)v383 + 7) == v327)
        v326 = 0;
      else
        v326 = *v327;
    }
    v328 = ausdk::AUElement::GetParameter(v326, 0x37u);
    v329 = *((_QWORD *)v383 + 9);
    if (v179 <= v328)
    {
      if (v329)
      {
        v331 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v329 + 32))(v329, 0);
      }
      else
      {
        v333 = (ausdk::AUElement **)*((_QWORD *)v383 + 6);
        if (*((ausdk::AUElement ***)v383 + 7) == v333)
          v331 = 0;
        else
          v331 = *v333;
      }
      v311 = v179 < (float)-ausdk::AUElement::GetParameter(v331, 0x37u);
      v178 = v179;
      if (v311)
      {
        v334 = *((_QWORD *)v383 + 9);
        if (v334)
        {
          v335 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)v334 + 32))(v334, 0, v179);
        }
        else
        {
          v336 = (ausdk::AUElement **)*((_QWORD *)v383 + 6);
          if (*((ausdk::AUElement ***)v383 + 7) == v336)
            v335 = 0;
          else
            v335 = *v336;
        }
        v178 = -ausdk::AUElement::GetParameter(v335, 0x37u);
      }
    }
    else
    {
      if (v329)
      {
        v330 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v329 + 32))(v329, 0);
      }
      else
      {
        v332 = (ausdk::AUElement **)*((_QWORD *)v383 + 6);
        if (*((ausdk::AUElement ***)v383 + 7) == v332)
          v330 = 0;
        else
          v330 = *v332;
      }
      v178 = ausdk::AUElement::GetParameter(v330, 0x37u);
    }
    v172 |= 4u;
    v174 = -100.0;
    v173 = 0.0;
    v175 = -100.0;
    v176 = 0.0;
  }
  else
  {
    v174 = -100.0;
    v173 = 0.0;
    v175 = -100.0;
    v176 = 0.0;
    v178 = 0.0;
  }
  v10 = v383;
  v170 = v364;
  v177 = v351;
  v141 = v363;
LABEL_261:
  v214 = (float)(v167 * 0.5) + v177 * 1.5 - v176 + (float)(v178 * 3.0) - v173;
  v215 = 1180;
  if (v214 == 0.0)
    v215 = 1184;
  *((float *)v10 + 339) = (float)((float)(1.0 - *(float *)((char *)v10 + v215)) * v214)
                        + (float)(*(float *)((char *)v10 + v215) * *((float *)v10 + 339));
  if (v169 == 2.0)
  {
    v220 = *((_DWORD *)v10 + 353);
    v221 = v360;
    if (v220 == 6)
    {
      v170 = v170 + v170;
    }
    else if (v220 == 5)
    {
      v149 = v361 + v361;
    }
  }
  else
  {
    v216 = v161;
    v217 = *((_QWORD *)v10 + 9);
    if (v217)
    {
      v218 = v173;
      v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 32))(v217, 0);
    }
    else
    {
      v218 = v173;
      v222 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
      if (*((ausdk::AUElement ***)v10 + 7) == v222)
        v219 = 0;
      else
        v219 = *v222;
    }
    v223 = ausdk::AUElement::GetParameter(v219, 0x1Bu);
    v220 = *((_DWORD *)v10 + 353);
    if (v223 == 0.0)
    {
      if (v220 != 6)
        v149 = v361 + v361;
    }
    else if (v220 != 5)
    {
      v170 = v170 + v170;
    }
    v221 = v360;
    v173 = v218;
    v161 = v216;
  }
  v224 = *((_DWORD *)v10 + 341);
  if (!v224)
  {
    if ((v220 - 5) >= 2)
    {
      v170 = v170 * 1.4;
      v149 = v149 * 1.4;
    }
    v226 = *((float *)v10 + 339);
    goto LABEL_295;
  }
  v225 = *((_DWORD *)v10 + 343);
  if (v220 == v225)
  {
    v221 = v221 * 0.7;
    goto LABEL_283;
  }
  if (v224 == 1 && v220 == 5 && v225 == 6)
  {
    v226 = *((float *)v10 + 339);
    if (v226 >= 0.0)
    {
LABEL_294:
      v224 = 0;
      *((_QWORD *)v10 + 170) = 0;
      *((_DWORD *)v10 + 342) = 0;
      goto LABEL_295;
    }
LABEL_293:
    *((_DWORD *)v10 + 339) = 0;
    v226 = 0.0;
    goto LABEL_294;
  }
  if (v224 == 2 && v220 == 6 && v225 == 5)
  {
    v226 = *((float *)v10 + 339);
    if (v226 <= 0.0)
      goto LABEL_294;
    goto LABEL_293;
  }
  v221 = v221 + v221;
  v149 = v149 * 1.4;
  v170 = v170 * 1.4;
  v354 = *(float *)"fff?";
LABEL_283:
  v226 = *((float *)v10 + 339);
  if (v224 == 1)
  {
    if (v226 <= v170)
    {
      v227 = -v149;
      goto LABEL_309;
    }
    goto LABEL_299;
  }
LABEL_295:
  v227 = -v149;
  if (v226 < (float)-v149)
  {
    v228 = 1;
    goto LABEL_300;
  }
  if (v224 != 2)
  {
    if (v226 > v170)
    {
LABEL_299:
      v228 = 2;
LABEL_300:
      *((_DWORD *)v10 + 341) = v228;
      *((float *)v10 + 340) = v355;
      *((_DWORD *)v10 + 343) = v220;
      if (v172)
        *((_DWORD *)v10 + 342) = v172;
      else
        *((_DWORD *)v10 + 342) = 64;
      goto LABEL_358;
    }
    if (!v224)
      goto LABEL_358;
  }
LABEL_309:
  if (v226 < v227 || v226 > v170)
    *((_DWORD *)v10 + 342) |= v172;
  v230 = fabsf(v214);
  if (v230 > v221)
  {
    v231 = (float)(v230 * (float)(1.0 - *((float *)v10 + 295))) + (float)(*((float *)v10 + 295) * *((float *)v10 + 340));
    *((float *)v10 + 340) = v231;
    if (v231 > v355)
      *((float *)v10 + 340) = v355;
    goto LABEL_358;
  }
  if (__Na <= v354)
    goto LABEL_358;
  v232 = *((_DWORD *)v10 + 342);
  if ((v232 & 0x20) == 0 || *((float *)v10 + 322) <= v366 || *((float *)v10 + 323) <= v366)
  {
    if (v377 > v161 && (v232 & 8) != 0 && fabsf(v173) < v340 && v174 < v346 && v175 > v342)
    {
      *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
      v233 = -9;
      goto LABEL_353;
    }
    v234 = v221;
    if (v164)
    {
      v235 = fabsf(__srcb);
      v236 = fabsf(v375);
      v237 = v347;
      if ((v232 & 0x57) != 0 && v235 < v347 && v236 < v352 && fabsf(v373) < v338)
      {
        *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
        v233 = -72;
LABEL_352:
        v221 = v234;
        goto LABEL_353;
      }
    }
    else
    {
      v235 = fabsf(__srcb);
      v236 = fabsf(v375);
      v237 = v347;
    }
    v238 = v141 ^ 1;
    if (v377 > v161)
      v238 = 1;
    if ((v238 | v164) == 1
      || v235 >= v237
      || v236 >= v352
      || v370 >= v237
      || v368 >= v237
      || (v239 = *((float *)v10 + 325), v239 >= v341)
      && (v240 = *((float *)v10 + 326), v240 >= v341)
      && (v239 <= v337 || v240 <= v337))
    {
      if ((v232 & 0x80) != 0)
      {
        v233 = -1;
        if (v345 == 1.0)
          v310 = v220 == 5;
        else
          v310 = v220 == 6;
        v221 = v234;
        if (!v310 && v235 < v237 && v236 < v352)
        {
          *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
          v233 = -129;
        }
        goto LABEL_353;
      }
      v233 = -1;
    }
    else if (*((int *)v10 + 335) >= 1)
    {
      v233 = -1;
    }
    else
    {
      v233 = -17;
    }
    goto LABEL_352;
  }
  *((float *)v10 + 340) = *((float *)v10 + 295) * *((float *)v10 + 340);
  v233 = -33;
LABEL_353:
  if (*((float *)v10 + 340) < v221 && v226 > (float)(v149 * -0.75) && v226 < (float)(v170 * 0.75))
  {
    *((_DWORD *)v10 + 342) = v233 & v232;
    if ((v233 & v232) == 0)
      *((_QWORD *)v10 + 170) = 0;
  }
LABEL_358:
  v241 = *((_QWORD *)v10 + 9);
  if (v241)
  {
    v242 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v241 + 32))(v241, 0);
  }
  else
  {
    v243 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v243)
      v242 = 0;
    else
      v242 = *v243;
  }
  v244 = ausdk::AUElement::GetParameter(v242, 0);
  if (v244 > 1)
  {
    v246 = __srcb;
    if (v244 == 2)
      goto LABEL_375;
    if (v244 != 3)
    {
      if (v169 != 2.0)
      {
LABEL_373:
        v245 = 2;
        goto LABEL_374;
      }
LABEL_375:
      v245 = 0;
      *((_DWORD *)v10 + 352) = 0;
      goto LABEL_376;
    }
    v245 = 1;
  }
  else
  {
    v245 = *((_DWORD *)v10 + 341);
    v246 = __srcb;
    if (v245 != 1)
    {
      if (!v245)
      {
        if (v169 == 2.0)
        {
          v245 = *((_DWORD *)v10 + 352);
          v247 = v373;
          v248 = v375;
          if (v245 != 1)
          {
            v245 = 0;
            *((_DWORD *)v10 + 352) = 0;
          }
          goto LABEL_377;
        }
        goto LABEL_373;
      }
      goto LABEL_375;
    }
  }
LABEL_374:
  *((_DWORD *)v10 + 352) = v245;
LABEL_376:
  v247 = v373;
  v248 = v375;
LABEL_377:
  v249 = *((_QWORD *)v10 + 9);
  if (v249)
  {
    v250 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v249 + 32))(v249, 0);
    v245 = *((_DWORD *)v10 + 352);
  }
  else
  {
    v251 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v251)
      v250 = 0;
    else
      v250 = *v251;
  }
  ausdk::AUElement::SetParameter(v250, 0x1Cu, (float)v245, 0);
  v252 = *((_QWORD *)v10 + 9);
  if (v252)
  {
    v253 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v252 + 32))(v252, 0);
  }
  else
  {
    v254 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v254)
      v253 = 0;
    else
      v253 = *v254;
  }
  ausdk::AUElement::SetParameter(v253, 0x1Du, (float)*((unsigned int *)v10 + 341), 0);
  v255 = *((_QWORD *)v10 + 9);
  if (v255)
  {
    v256 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 0);
  }
  else
  {
    v257 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v257)
      v256 = 0;
    else
      v256 = *v257;
  }
  v258 = 0.0;
  if (v162)
    v258 = 1.0;
  ausdk::AUElement::SetParameter(v256, 0x1Eu, v258, 0);
  v259 = *((_QWORD *)v10 + 9);
  if (v259)
  {
    v260 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v259 + 32))(v259, 0);
  }
  else
  {
    v261 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v261)
      v260 = 0;
    else
      v260 = *v261;
  }
  v262 = 0.0;
  if (v163)
    v262 = 1.0;
  ausdk::AUElement::SetParameter(v260, 0x1Fu, v262, 0);
  v263 = *((_QWORD *)v10 + 9);
  if (v263)
  {
    v264 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v263 + 32))(v263, 0);
  }
  else
  {
    v265 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v265)
      v264 = 0;
    else
      v264 = *v265;
  }
  v266 = 0.0;
  if (v377 > v161)
    v266 = 1.0;
  ausdk::AUElement::SetParameter(v264, 0x20u, v266, 0);
  v267 = *((_QWORD *)v10 + 9);
  if (v267)
  {
    v268 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v267 + 32))(v267, 0);
  }
  else
  {
    v269 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v269)
      v268 = 0;
    else
      v268 = *v269;
  }
  ausdk::AUElement::SetParameter(v268, 0x22u, v248, 0);
  v270 = *((_QWORD *)v10 + 9);
  if (v270)
  {
    v271 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v270 + 32))(v270, 0);
  }
  else
  {
    v272 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v272)
      v271 = 0;
    else
      v271 = *v272;
  }
  ausdk::AUElement::SetParameter(v271, 0x23u, v246, 0);
  v273 = *((_QWORD *)v10 + 9);
  if (v273)
  {
    v274 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v273 + 32))(v273, 0);
  }
  else
  {
    v275 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v275)
      v274 = 0;
    else
      v274 = *v275;
  }
  ausdk::AUElement::SetParameter(v274, 0x24u, (float)(*((float *)v10 + 332) - *((float *)v10 + 333)) - v365, 0);
  v276 = *((_QWORD *)v10 + 9);
  if (v276)
  {
    v277 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v276 + 32))(v276, 0);
  }
  else
  {
    v278 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v278)
      v277 = 0;
    else
      v277 = *v278;
  }
  ausdk::AUElement::SetParameter(v277, 0x25u, fmaxf(*((float *)v10 + 332), *((float *)v10 + 333)) - *((float *)v10 + 331), 0);
  v279 = *((_QWORD *)v10 + 9);
  if (v279)
  {
    v280 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v279 + 32))(v279, 0);
  }
  else
  {
    v281 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v281)
      v280 = 0;
    else
      v280 = *v281;
  }
  ausdk::AUElement::SetParameter(v280, 0x26u, __Na, 0);
  v282 = *((_QWORD *)v10 + 9);
  if (v282)
  {
    v283 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v282 + 32))(v282, 0);
  }
  else
  {
    v284 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v284)
      v283 = 0;
    else
      v283 = *v284;
  }
  ausdk::AUElement::SetParameter(v283, 0x27u, *((float *)v10 + 339), 0);
  v285 = *((_QWORD *)v10 + 9);
  if (v285)
  {
    v286 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v285 + 32))(v285, 0);
  }
  else
  {
    v287 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v287)
      v286 = 0;
    else
      v286 = *v287;
  }
  ausdk::AUElement::SetParameter(v286, 0x28u, *((float *)v10 + 340), 0);
  v288 = *((_QWORD *)v10 + 9);
  if (v288)
  {
    v289 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v288 + 32))(v288, 0);
  }
  else
  {
    v290 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v290)
      v289 = 0;
    else
      v289 = *v290;
  }
  ausdk::AUElement::SetParameter(v289, 0x29u, *((float *)v10 + 322), 0);
  v291 = *((_QWORD *)v10 + 9);
  if (v291)
  {
    v292 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v291 + 32))(v291, 0);
  }
  else
  {
    v293 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v293)
      v292 = 0;
    else
      v292 = *v293;
  }
  ausdk::AUElement::SetParameter(v292, 0x2Au, *((float *)v10 + 323), 0);
  v294 = *((_QWORD *)v10 + 9);
  if (v294)
  {
    v295 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v294 + 32))(v294, 0);
  }
  else
  {
    v296 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v296)
      v295 = 0;
    else
      v295 = *v296;
  }
  ausdk::AUElement::SetParameter(v295, 0x2Bu, *((float *)v10 + 327), 0);
  v297 = *((_QWORD *)v10 + 9);
  if (v297)
  {
    v298 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v297 + 32))(v297, 0);
  }
  else
  {
    v299 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v299)
      v298 = 0;
    else
      v298 = *v299;
  }
  ausdk::AUElement::SetParameter(v298, 0x30u, *((float *)v10 + 325), 0);
  v300 = *((_QWORD *)v10 + 9);
  if (v300)
  {
    v301 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v300 + 32))(v300, 0);
  }
  else
  {
    v302 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v302)
      v301 = 0;
    else
      v301 = *v302;
  }
  ausdk::AUElement::SetParameter(v301, 0x31u, *((float *)v10 + 326), 0);
  v303 = *((_QWORD *)v10 + 9);
  if (v303)
  {
    v304 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v303 + 32))(v303, 0);
  }
  else
  {
    v305 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v305)
      v304 = 0;
    else
      v304 = *v305;
  }
  ausdk::AUElement::SetParameter(v304, 0x39u, v247, 0);
  v306 = *((_QWORD *)v10 + 9);
  if (v306)
  {
    v307 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v306 + 32))(v306, 0);
  }
  else
  {
    v308 = (ausdk::AUElement **)*((_QWORD *)v10 + 6);
    if (*((ausdk::AUElement ***)v10 + 7) == v308)
      v307 = 0;
    else
      v307 = *v308;
  }
  ausdk::AUElement::SetParameter(v307, 0x3Au, (float)*((unsigned int *)v10 + 353), 0);
  return v152;
}

uint64_t AUMicSelectorV2::Render(AUMicSelectorV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v7;
  ausdk::AUInputElement *Element;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  AudioBufferList *BufferList;
  unsigned int v14;

  v14 = 0;
  v7 = (AUMicSelectorV2 *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 80), 0);
  v9 = ausdk::AUInputElement::PullInput(Element, &v14, a3, 0, a4);
  if (!(_DWORD)v9)
  {
    v10 = ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0);
    v11 = ausdk::AUScope::SafeGetElement(v7, 0);
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(v10 + 144), BufferList);
  }
  return v9;
}

uint64_t AUMicSelectorV2::GetParameterInfo(AUMicSelectorV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterUnit v6;
  AudioUnitParameterOptions v7;
  unint64_t v8;
  AudioUnitParameterValue v9;
  UInt32 v10;
  UInt32 v11;
  AudioUnitParameterOptions flags;
  int v13;
  AudioUnitParameterOptions v14;
  int v15;
  AudioUnitParameterOptions v16;
  int v17;
  const __CFString *v18;
  const __CFString *v19;
  AudioUnitParameterOptions v20;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  int v24;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Auto/Manual");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Auto/Manual"), buffer->name, 52, 0x8000100u);
      v8 = 0x4080000000000000;
      v7 = buffer->flags | 0x80000000;
      goto LABEL_39;
    case 1:
      buffer->cfNameString = CFSTR("Signal time constant sec");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Signal time constant sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v7 = buffer->flags | 0x81100000;
      v8 = 0x400000003C23D70ALL;
      v9 = 0.25;
      goto LABEL_29;
    case 2:
      buffer->cfNameString = CFSTR("Active time constant sec");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Active time constant sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v7 = buffer->flags | 0x81100000;
      v8 = 0x412000003DCCCCCDLL;
      goto LABEL_70;
    case 3:
      buffer->cfNameString = CFSTR("Inactive time constant sec");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Inactive time constant sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v7 = buffer->flags | 0x81100000;
      v8 = 0x412000003DCCCCCDLL;
      v9 = 2.0;
      goto LABEL_29;
    case 4:
      buffer->cfNameString = CFSTR("HF min level diff thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF min level diff thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41F0000000000000;
      v9 = 6.0;
      goto LABEL_68;
    case 5:
      buffer->cfNameString = CFSTR("HF level diff ceiling");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF level diff ceiling"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41F0000000000000;
      v9 = 15.0;
      goto LABEL_68;
    case 6:
      buffer->cfNameString = CFSTR("HF normal level diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF normal level diff"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41A0000000000000;
      goto LABEL_24;
    case 7:
      buffer->cfNameString = CFSTR("Deprecated");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Deprecated"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x84100000;
      v8 = 0x41700000C1700000;
      goto LABEL_80;
    case 8:
      buffer->cfNameString = CFSTR("LF min level diff thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LF min level diff thd"), buffer->name, 52, 0x8000100u);
      v10 = 4;
      goto LABEL_20;
    case 9:
      buffer->cfNameString = CFSTR("LF level diff ceiling");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LF level diff ceiling"), buffer->name, 52, 0x8000100u);
      v11 = 4;
      goto LABEL_22;
    case 10:
      buffer->cfNameString = CFSTR("LF normal level diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LF normal level diff"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41A0000000000000;
      v9 = 5.0;
      goto LABEL_68;
    case 11:
      buffer->cfNameString = CFSTR("Deprecated");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Deprecated"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 4;
      flags = buffer->flags;
      v13 = -2079326208;
      goto LABEL_54;
    case 12:
      buffer->cfNameString = CFSTR("Echo min level diff thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo min level diff thd"), buffer->name, 52, 0x8000100u);
      v10 = 5;
LABEL_20:
      buffer->clumpID = v10;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41F0000000000000;
      v9 = 7.0;
      goto LABEL_68;
    case 13:
      buffer->cfNameString = CFSTR("Echo level diff ceiling");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo level diff ceiling"), buffer->name, 52, 0x8000100u);
      v11 = 5;
LABEL_22:
      buffer->clumpID = v11;
      v14 = buffer->flags;
      v15 = -2146435072;
      goto LABEL_32;
    case 14:
      buffer->cfNameString = CFSTR("Echo normal level diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo normal level diff"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x4120000000000000;
LABEL_24:
      v9 = 4.0;
      goto LABEL_68;
    case 15:
      buffer->cfNameString = CFSTR("Echo high gain thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo high gain thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41200000C1F00000;
      v9 = -10.0;
      goto LABEL_68;
    case 16:
      buffer->cfNameString = CFSTR("Echo hardware bias");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo hardware bias"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v16 = buffer->flags;
      v17 = -2146435072;
      goto LABEL_51;
    case 17:
      buffer->cfNameString = CFSTR("Normal X-corr coeff lim");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Normal X-corr coeff lim"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x3F800000BF800000;
      v9 = 0.95;
      goto LABEL_84;
    case 18:
      buffer->cfNameString = CFSTR("Noise floor det length sec");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Noise floor det length sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x412000003DCCCCCDLL;
      v9 = 8.0;
LABEL_29:
      v6 = kAudioUnitParameterUnit_Seconds;
      goto LABEL_84;
    case 19:
      buffer->cfNameString = CFSTR("Noise floor thd mic");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Noise floor thd mic"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41F0000000000000;
      v9 = 8.0;
      goto LABEL_68;
    case 20:
      buffer->cfNameString = CFSTR("Noise floor thd echo");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Noise floor thd echo"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v14 = buffer->flags;
      v15 = -2129657856;
LABEL_32:
      v7 = v14 | v15;
      v8 = 0x41F0000000000000;
      v9 = 20.0;
      goto LABEL_68;
    case 21:
      buffer->cfNameString = CFSTR("Switch to front thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Switch to front thd"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x4120000000000000;
      v9 = 3.0;
      goto LABEL_84;
    case 22:
      v18 = CFSTR("Switch to back thd");
      goto LABEL_36;
    case 23:
      v18 = CFSTR("Return to normal thd");
LABEL_36:
      buffer->cfNameString = v18;
      buffer->flags = 1207959552;
      CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x4120000000000000;
      goto LABEL_73;
    case 24:
      buffer->cfNameString = CFSTR("Return to normal ceiling");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Return to normal ceiling"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 7;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x41F0000000000000;
      v9 = 15.0;
      goto LABEL_84;
    case 25:
    case 26:
      buffer->cfNameString = CFSTR("Deprecated");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Deprecated"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 8;
      v7 = buffer->flags | 0x84100000;
      v8 = 0x3F80000000000000;
      v9 = 0.5;
      goto LABEL_84;
    case 27:
      buffer->cfNameString = CFSTR("Beam direction (set by VP)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Beam direction (set by VP)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      v8 = 0x4000000000000000;
LABEL_39:
      v9 = 0.0;
      v6 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_84;
    case 28:
      buffer->cfNameString = CFSTR("Output Mode (to Beam)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Output Mode (to Beam)"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 10;
      v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      v8 = 0x4000000000000000;
      v9 = 2.0;
      goto LABEL_84;
    case 29:
      buffer->cfNameString = CFSTR("Occlusion state");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Occlusion state"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x4000000000000000;
      goto LABEL_80;
    case 30:
      v19 = CFSTR("Front VAD");
      goto LABEL_45;
    case 31:
      v19 = CFSTR("Back VAD");
      goto LABEL_45;
    case 32:
      v19 = CFSTR("Echo VAD");
LABEL_45:
      buffer->cfNameString = v19;
      buffer->flags = 1207959552;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v20 = buffer->flags & 0x7FFFFFFF;
      v21 = 1074823168;
      goto LABEL_79;
    case 33:
      buffer->cfNameString = CFSTR("Front/back ratio");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Front/back ratio"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      v16 = buffer->flags & 0x7FFFFFFF;
      v17 = 1141932032;
      goto LABEL_51;
    case 34:
      v22 = CFSTR("LF front/back ratio");
      goto LABEL_50;
    case 35:
      v22 = CFSTR("HF front/back ratio");
      goto LABEL_50;
    case 36:
      v22 = CFSTR("Echo front/back ratio");
LABEL_50:
      buffer->cfNameString = v22;
      buffer->flags = 1207959552;
      CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      v16 = buffer->flags & 0x7FFFFFFF;
      v17 = 1074823168;
LABEL_51:
      v7 = v16 | v17;
      v8 = 0x41A00000C1A00000;
      goto LABEL_67;
    case 37:
      buffer->cfNameString = CFSTR("Max echo gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Max echo gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x41200000C1F00000;
      goto LABEL_67;
    case 38:
      buffer->cfNameString = CFSTR("X-corr");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("X-corr"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      flags = buffer->flags & 0x7FFFFFFF;
      v13 = 1074823168;
LABEL_54:
      v7 = flags | v13;
      v8 = 0x3F800000BF800000;
      goto LABEL_80;
    case 39:
      buffer->cfNameString = CFSTR("Occlusion bias detector");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Occlusion bias detector"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x41A00000C1A00000;
      goto LABEL_80;
    case 40:
      buffer->cfNameString = CFSTR("Return to normal detector");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Return to normal detector"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x41A0000000000000;
      goto LABEL_80;
    case 41:
      v23 = CFSTR("Front input level");
      goto LABEL_66;
    case 42:
      v23 = CFSTR("Back input level");
      goto LABEL_66;
    case 43:
      v23 = CFSTR("HF bottom input level");
      goto LABEL_66;
    case 44:
      buffer->cfNameString = CFSTR("VP pre gain (set by VP)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("VP pre gain (set by VP)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      v8 = 0x42480000C2480000;
      goto LABEL_67;
    case 45:
      buffer->cfNameString = CFSTR("HF max el. noise level (3-mic)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF max el. noise level (3-mic)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC2200000C2C80000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1029308416;
      goto LABEL_83;
    case 46:
      buffer->cfNameString = CFSTR("HF level where el. noise masked (3-mic)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF level where el. noise masked (3-mic)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC2200000C2C80000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1031667712;
      goto LABEL_83;
    case 47:
      buffer->cfNameString = CFSTR("Dead mic thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Dead mic thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC2700000C2F00000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1028390912;
      goto LABEL_83;
    case 48:
      v23 = CFSTR("HF front input level");
      goto LABEL_66;
    case 49:
      v23 = CFSTR("HF back input level");
LABEL_66:
      buffer->cfNameString = v23;
      buffer->flags = 1207959552;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 3267887104;
LABEL_67:
      v9 = 0.0;
LABEL_68:
      v6 = kAudioUnitParameterUnit_Decibels;
      goto LABEL_84;
    case 50:
    case 51:
    case 52:
      buffer->cfNameString = CFSTR("Deprecated");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Deprecated"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 10;
      v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      v8 = 0x4396000000000000;
      goto LABEL_80;
    case 53:
      buffer->cfNameString = CFSTR("HF level cov time constant");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF level cov time constant"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x4000000000000000;
LABEL_70:
      v6 = kAudioUnitParameterUnit_Seconds;
      v9 = 0.6;
      goto LABEL_84;
    case 54:
      buffer->cfNameString = CFSTR("HF min level cov f/b diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF min level cov f/b diff"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x40A0000000000000;
      v9 = 1.25;
      goto LABEL_84;
    case 55:
      buffer->cfNameString = CFSTR("HF level cov f/b diff ceiling");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF level cov f/b diff ceiling"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x40A0000000000000;
LABEL_73:
      v9 = 4.0;
      goto LABEL_84;
    case 56:
      buffer->cfNameString = CFSTR("HF normal level cov f/b diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF normal level cov f/b diff"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0x40A0000000000000;
      v9 = 1.0;
      goto LABEL_84;
    case 57:
      buffer->cfNameString = CFSTR("HF level cov f/b diff");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF level cov f/b diff"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x40A00000C0A00000;
      goto LABEL_80;
    case 58:
      buffer->cfNameString = CFSTR("Device orientation");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Device orientation"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v7 = buffer->flags & 0x3FEF7FFF | 0x40108000;
      v8 = 0x40C0000000000000;
      goto LABEL_80;
    case 59:
    case 60:
    case 61:
      buffer->cfNameString = CFSTR("Deprecated");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Deprecated"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 10;
      v7 = buffer->flags & 0x3BEF7FFF | 0x44108000;
      v8 = 0x43C8000000000000;
      v9 = 0.0;
      v6 = kAudioUnitParameterUnit_Milliseconds;
      goto LABEL_84;
    case 62:
      buffer->cfNameString = CFSTR("Echo low gain thd");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo low gain thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC1200000C2480000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1039400960;
      goto LABEL_83;
    case 63:
      buffer->cfNameString = CFSTR("Echo canceler converged");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Echo canceler converged"), buffer->name, 52, 0x8000100u);
      v6 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = 9;
      v20 = buffer->flags & 0x7FFFFFFF;
      v21 = 1141932032;
LABEL_79:
      v7 = v20 | v21;
      v8 = 0x3F80000000000000;
LABEL_80:
      v9 = 0.0;
      goto LABEL_84;
    case 64:
      buffer->cfNameString = CFSTR("HF self noise floor");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("HF self noise floor"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC2700000C2F00000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1024458752;
      goto LABEL_83;
    case 65:
      buffer->cfNameString = CFSTR("LF min level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LF min level"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      v7 = buffer->flags | 0x80100000;
      v8 = 0xC2200000C30C0000;
      v6 = kAudioUnitParameterUnit_Decibels;
      v24 = -1022623744;
LABEL_83:
      v9 = *(float *)&v24;
LABEL_84:
      result = 0;
      buffer->flags = v7;
      buffer->unit = v6;
      *(_QWORD *)&buffer->minValue = v8;
      buffer->defaultValue = v9;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUMicSelectorV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    AUMicSelectorV2::CalculateTimeConstants((AUMicSelectorV2 *)this);
    AUMicSelectorV2::SetNoiseFloorDetectorLength((AUMicSelectorV2 *)this);
  }
  return v3;
}

uint64_t AUMicSelectorV2::GetParameterValueStrings(AUMicSelectorV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  _OWORD v7[2];
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (!a4)
      return 0;
    if (!a3)
    {
      v7[0] = xmmword_1E69CB988;
      v7[1] = *(_OWORD *)off_1E69CB998;
      v8 = CFSTR("BeamMics");
      v6 = CFArrayCreate(0, (const void **)v7, 5, 0);
      result = 0;
      *a4 = v6;
      return result;
    }
  }
  return 4294956417;
}

double AUMicSelectorV2::GetLatency(AUMicSelectorV2 *this)
{
  return 0.0;
}

double AUMicSelectorV2::GetTailTime(AUMicSelectorV2 *this)
{
  return 0.0;
}

uint64_t AUMicSelectorV2::SupportsTail(AUMicSelectorV2 *this)
{
  return 1;
}

BOOL AUMicSelectorV2::StreamFormatWritable(AUMicSelectorV2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMicSelectorV2::SupportedNumChannels(AUMicSelectorV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMicSelectorV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUMicSelectorV2::ValidFormat(AUMicSelectorV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUMicSelectorV2::ShouldBypassEffect(AUMicSelectorV2 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUMicSelectorV2::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

void AUMicSelectorV2::CalculateTimeConstants(AUMicSelectorV2 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  double Parameter;
  float v6;
  float v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  double v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  double v16;
  float v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  double v21;
  float v22;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 1u);
  v6 = -1.0
     / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
      * Parameter
      / (float)*((unsigned int *)this + 84));
  v7 = expf(v6);
  *((float *)this + 292) = v7;
  *((float *)this + 293) = v7;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  v11 = ausdk::AUElement::GetParameter(v9, 2u);
  v12 = -1.0
      / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
       * v11
       / (float)*((unsigned int *)this + 84));
  *((float *)this + 295) = expf(v12);
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  v16 = ausdk::AUElement::GetParameter(v14, 3u);
  v17 = -1.0
      / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
       * v16
       / (float)*((unsigned int *)this + 84));
  *((float *)this + 296) = expf(v17);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  v21 = ausdk::AUElement::GetParameter(v19, 0x35u);
  v22 = -1.0
      / (*(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
       * v21
       / (float)*((unsigned int *)this + 84));
  *((float *)this + 294) = expf(v22);
}

void AUMicSelectorV2::SetNoiseFloorDetectorLength(AUMicSelectorV2 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  float v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0x12u);
  if (Parameter > 10.0)
    Parameter = 10.0;
  v6 = 0;
  v7 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicSelectorV2 *)((char *)this + 128), 0) + 80)
     * Parameter
     / (float)*((unsigned int *)this + 84);
  v8 = vcvtps_u32_f32(v7);
  do
  {
    AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength((AUMicSelectorV2 *)((char *)this + v6 + 1192), v8);
    v6 += 24;
  }
  while (v6 != 72);
  AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength((AUMicSelectorV2 *)((char *)this + 1264), v8);
}

void AUMicSelectorV2::NoiseFloorDetectorV2::SetDetectorLength(AUMicSelectorV2::NoiseFloorDetectorV2 *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = *((unsigned int *)this + 3);
  if (*((_DWORD *)this + 4) >= a2)
    v5 = v3;
  else
    v5 = *((_DWORD *)this + 4);
  if (v5 <= v4)
  {
    if (*((_DWORD *)this + 2) > v5)
      *((_DWORD *)this + 2) = 0;
  }
  else
  {
    vDSP_vfill(*(const float **)this, (float *)(*(_QWORD *)this + 4 * v4), 1, v5 - v4);
  }
  *((_DWORD *)this + 3) = v5;
}

float AUMicSelectorV2::NoiseFloorDetectorV2::FindMinimum(const float **this)
{
  vDSP_Length v1;
  float result;
  float __C;

  v1 = *((unsigned int *)this + 3);
  result = 0.0;
  if ((_DWORD)v1)
  {
    if (*((_DWORD *)this + 4))
    {
      __C = 0.0;
      vDSP_minv(*this, 1, &__C, v1);
      return __C;
    }
  }
  return result;
}

double AUMicSelectorV2::ClearState(AUMicSelectorV2 *this)
{
  uint64_t v2;
  _DWORD *v3;
  double result;
  float v10;
  float __A;

  v2 = 0;
  v3 = (_DWORD *)((char *)this + 1288);
  do
  {
    *v3 = -1032847360;
    v3[3] = -1032847360;
    v3[6] = -1032847360;
    v3[22] = -1032847360;
    v3[25] = 0;
    __A = -60.0;
    vDSP_vfill(&__A, *(float **)((char *)this + v2 + 1192), 1, *(unsigned int *)((char *)this + v2 + 1204));
    *(_DWORD *)((char *)this + v2 + 1200) = 0;
    v2 += 24;
    ++v3;
  }
  while (v2 != 72);
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 175) = _D0;
  *((_DWORD *)this + 331) = -1032847360;
  *((int32x2_t *)this + 166) = vdup_n_s32(0xC2700000);
  v10 = -60.0;
  vDSP_vfill(&v10, *((float **)this + 158), 1, *((unsigned int *)this + 319));
  *((_DWORD *)this + 318) = 0;
  *((_DWORD *)this + 334) = 0;
  result = 0.0;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_DWORD *)this + 352) = 2;
  return result;
}

void AUMicSelectorV2::NoiseFloorDetectorV2::Initialize(AUMicSelectorV2::NoiseFloorDetectorV2 *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  float *v5;
  float __A;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  *((_DWORD *)this + 3) = v3;
  *((_DWORD *)this + 4) = v3;
  v4 = *(_QWORD *)this;
  if (v4)
    MEMORY[0x1BCC95CC8](v4, 0x1000C8052888210);
  v5 = (float *)operator new[]();
  *(_QWORD *)this = v5;
  __A = -60.0;
  vDSP_vfill(&__A, v5, 1, *((unsigned int *)this + 3));
  *((_DWORD *)this + 2) = 0;
}

uint64_t SetDoNotAllocateInternalBuffers(OpaqueAudioComponentInstance *a1)
{
  unsigned int i;
  uint64_t Property;
  unsigned int j;
  int inData;
  UInt32 ioDataSize;
  unsigned int outData;

  ioDataSize = 4;
  outData = 0;
  if (!AudioUnitGetProperty(a1, 0xBu, 1u, 0, &outData, &ioDataSize) && outData)
  {
    for (i = 0; i < outData; ++i)
    {
      inData = 0;
      AudioUnitSetProperty(a1, 0x33u, 1u, 0, &inData, 4u);
    }
  }
  outData = 0;
  Property = AudioUnitGetProperty(a1, 0xBu, 2u, 0, &outData, &ioDataSize);
  if (!(_DWORD)Property && outData)
  {
    for (j = 0; j < outData; ++j)
    {
      inData = 0;
      AudioUnitSetProperty(a1, 0x33u, 2u, 0, &inData, 4u);
    }
  }
  return Property;
}

void ScottyLite::STFT_state_t::~STFT_state_t(ScottyLite::STFT_state_t *this)
{
  void *v2;
  uint64_t i;
  void *v4;
  uint64_t j;
  void *v6;
  uint64_t k;
  void *v8;
  uint64_t m;
  void *v10;
  uint64_t n;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  for (i = 0; i != -72; i -= 24)
  {
    v4 = *(void **)((char *)this + i + 384);
    if (v4)
    {
      *(_QWORD *)((char *)this + i + 392) = v4;
      operator delete(v4);
    }
  }
  for (j = 0; j != -72; j -= 24)
  {
    v6 = *(void **)((char *)this + j + 312);
    if (v6)
    {
      *(_QWORD *)((char *)this + j + 320) = v6;
      operator delete(v6);
    }
  }
  for (k = 0; k != -144; k -= 24)
  {
    v8 = *(void **)((char *)this + k + 240);
    if (v8)
    {
      *(_QWORD *)((char *)this + k + 248) = v8;
      operator delete(v8);
    }
  }
  for (m = 0; m != -72; m -= 24)
  {
    v10 = *(void **)((char *)this + m + 96);
    if (v10)
    {
      *(_QWORD *)((char *)this + m + 104) = v10;
      operator delete(v10);
    }
  }
  for (n = 0; n != -48; n -= 24)
  {
    v12 = *(void **)((char *)this + n + 24);
    if (v12)
    {
      *(_QWORD *)((char *)this + n + 32) = v12;
      operator delete(v12);
    }
  }
}

void ScottyLite::UnInitialize(ScottyLite *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  _QWORD *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 760);
    if (*((char *)this + 783) < 0)
      v3 = (_QWORD *)*v3;
    v7 = 136315394;
    v8 = v3;
    v9 = 2080;
    v10 = "UnInitialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Uninitializing ScottyLite", (uint8_t *)&v7, 0x16u);
  }
  *((_BYTE *)this + 756) = 0;
  v4 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v4)
    MultiRadixFFT_Dispose(v4);
  std::vector<float>::resize((uint64_t)this + 440, 0);
  std::vector<float>::resize((uint64_t)this + 24, 0);
  std::vector<float>::resize((uint64_t)this + 616, 0);
  std::vector<float>::resize((uint64_t)this + 48, 0);
  std::vector<float>::resize((uint64_t)this + 640, 0);
  v5 = -72;
  do
  {
    std::vector<float>::resize((uint64_t)this + v5 + 144, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 360, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 432, 0);
    std::vector<float>::resize((uint64_t)this + v5 + 736, 0);
    v5 += 24;
  }
  while (v5);
  for (i = 144; i != 288; i += 24)
    std::vector<float>::resize((uint64_t)this + i, 0);
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  std::vector<float>::resize((uint64_t)this, 0);
}

double EndpointVADObservationFeatures::GetFeatureDimensions(EndpointVADObservationFeatures *this)
{
  std::vector<unsigned int> *v1;
  uint64_t v2;
  unint64_t v3;
  double result;

  if (!EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions)
  {
    v1 = (std::vector<unsigned int> *)operator new();
    v1->__end_ = 0;
    v1->__end_cap_.__value_ = 0;
    v1->__begin_ = 0;
    EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions = (uint64_t)v1;
    std::vector<unsigned int>::resize(v1, 3uLL);
    v2 = *(_QWORD *)EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions;
    v3 = *(_QWORD *)(EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions + 8)
       - *(_QWORD *)EndpointVADObservationFeatures::GetFeatureDimensions(void)::featureDimensions;
    if (!v3 || (*(_DWORD *)v2 = 2, v3 <= 8))
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    *(_QWORD *)&result = 0x200000002;
    *(_QWORD *)(v2 + 4) = 0x200000002;
  }
  return result;
}

uint64_t AUSM::Properties::getPropertyInfo(AUSM::Properties *this, unsigned int a2, unsigned int *a3, BOOL *a4)
{
  char v5;
  uint64_t result;
  char *v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 == 5000)
  {
    *a3 = 8;
    v5 = 1;
LABEL_3:
    result = 0;
    *a4 = v5;
    return result;
  }
  v8 = (char *)*((_QWORD *)this + 6);
  if (v8)
  {
    v9 = (char *)this + 48;
    do
    {
      v10 = *((_DWORD *)v8 + 8);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (char **)v8;
      else
        v12 = (char **)(v8 + 8);
      if (v11)
        v9 = v8;
      v8 = *v12;
    }
    while (*v12);
    if (v9 != (char *)this + 48 && *((_DWORD *)v9 + 8) <= a2)
    {
      *a3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 5) + 16))(*((_QWORD *)v9 + 5));
      v13 = *((_QWORD *)v9 + 5);
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 8))(*((_QWORD *)this + 8));
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 72))(v13, v14);
      goto LABEL_3;
    }
  }
  return 4294956417;
}

uint64_t AUSM::Properties::getProperty(AUSM::Properties *this, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2 == 5000)
  {
    (*(void (**)(_BYTE *__return_ptr, AUSM::Properties *))(*(_QWORD *)this + 32))(v23, this);
    result = 0;
    *a3 = *(_QWORD *)v23;
  }
  else
  {
    v6 = (char *)*((_QWORD *)this + 6);
    if (!v6)
      return 4294956417;
    v7 = (char *)this + 48;
    do
    {
      v8 = *((_DWORD *)v6 + 8);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (char **)v6;
      else
        v10 = (char **)(v6 + 8);
      if (v9)
        v7 = v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 48 && *((_DWORD *)v7 + 8) <= a2)
    {
      if (a3)
      {
        if ((*(unsigned int (**)(_QWORD, _QWORD *))(**((_QWORD **)v7 + 5) + 24))(*((_QWORD *)v7 + 5), a3) == 8)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v11 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v18 = (_QWORD *)((char *)this + 8);
            if (*((char *)this + 31) < 0)
              v18 = (_QWORD *)*v18;
            v20 = *((_DWORD *)this + 8);
            v19 = *((_DWORD *)this + 9);
            v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 5) + 80))(*((_QWORD *)v7 + 5));
            if (*(char *)(v21 + 23) >= 0)
              v22 = v21;
            else
              v22 = *(_QWORD *)v21;
            *(_DWORD *)v23 = 136315906;
            *(_QWORD *)&v23[4] = v18;
            v24 = 1024;
            v25 = v20;
            v26 = 1024;
            v27 = v19;
            v28 = 2080;
            v29 = v22;
            _os_log_error_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "[%s|getProperty] (scope=%u, element=%u): %s internal error: getter not implemented", v23, 0x22u);
          }
          return 4294956446;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v12 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v13 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v13 = (_QWORD *)*v13;
          v15 = *((_DWORD *)this + 8);
          v14 = *((_DWORD *)this + 9);
          v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 5) + 80))(*((_QWORD *)v7 + 5));
          if (*(char *)(v16 + 23) >= 0)
            v17 = v16;
          else
            v17 = *(_QWORD *)v16;
          *(_DWORD *)v23 = 136315906;
          *(_QWORD *)&v23[4] = v13;
          v24 = 1024;
          v25 = v15;
          v26 = 1024;
          v27 = v14;
          v28 = 2080;
          v29 = v17;
          _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "[%s|getProperty] (scope=%u, element=%u): %s called with nullptr for output data", v23, 0x22u);
        }
        return 4294956445;
      }
    }
    else
    {
      return 4294956417;
    }
  }
  return result;
}

void sub_1B621CC54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AUSM::Properties::setProperty(AUSM::Properties *this, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v9;
  CFTypeID v10;
  char *v11;
  char *v13;
  unsigned int v14;
  BOOL v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  _QWORD *v30;
  int v31;
  int v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  NSObject *v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  NSObject *v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  _QWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  void *__p[2];
  char v88;
  _BYTE buf[12];
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  _BYTE v95[10];
  _DWORD v96[7];

  *(_QWORD *)&v96[5] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 != 5000)
  {
    v11 = (char *)*((_QWORD *)this + 6);
    if (!v11)
      return 4294956417;
    v13 = (char *)this + 48;
    do
    {
      v14 = *((_DWORD *)v11 + 8);
      v15 = v14 >= a2;
      if (v14 >= a2)
        v16 = (char **)v11;
      else
        v16 = (char **)(v11 + 8);
      if (v15)
        v13 = v11;
      v11 = *v16;
    }
    while (*v16);
    if (v13 == (char *)this + 48 || *((_DWORD *)v13 + 8) > a2)
      return 4294956417;
    v19 = *((_QWORD *)v13 + 5);
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 8))(*((_QWORD *)this + 8));
    switch((*(unsigned int (**)(uint64_t, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, a3, a4, v20))
    {
      case 0u:
      case 2u:
        if ((a5 & 1) != 0)
          return 0;
        v21 = *(_DWORD *)(*((_QWORD *)v13 + 5) + 12);
        if (v21 == 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v65 = getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            return 0;
          v81 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v81 = (_QWORD *)*v81;
          v83 = *((_DWORD *)this + 8);
          v82 = *((_DWORD *)this + 9);
          v84 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v84 + 23) >= 0)
            v85 = v84;
          else
            v85 = *(_QWORD *)v84;
          (*(void (**)(void **__return_ptr))(**((_QWORD **)v13 + 5) + 96))(__p);
          if (v88 >= 0)
            v86 = __p;
          else
            v86 = (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v81;
          v90 = 1024;
          v91 = v83;
          v92 = 1024;
          v93 = v82;
          v94 = 2080;
          *(_QWORD *)v95 = v85;
          *(_WORD *)&v95[8] = 2080;
          *(_QWORD *)v96 = v86;
          _os_log_debug_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "[%s|setProperty] (scope=%u, element=%u): %s = %s (not changed)", buf, 0x2Cu);
        }
        else
        {
          if (v21)
            return 0;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v22 = getAUSMV2Log(void)::gLog;
          v17 = 0;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            return v17;
          v23 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v23 = (_QWORD *)*v23;
          v25 = *((_DWORD *)this + 8);
          v24 = *((_DWORD *)this + 9);
          v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v26 + 23) >= 0)
            v27 = v26;
          else
            v27 = *(_QWORD *)v26;
          (*(void (**)(void **__return_ptr))(**((_QWORD **)v13 + 5) + 96))(__p);
          if (v88 >= 0)
            v28 = __p;
          else
            v28 = (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v23;
          v90 = 1024;
          v91 = v25;
          v92 = 1024;
          v93 = v24;
          v94 = 2080;
          *(_QWORD *)v95 = v27;
          *(_WORD *)&v95[8] = 2080;
          *(_QWORD *)v96 = v28;
          _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s = %s (not changed)", buf, 0x2Cu);
        }
        if (v88 < 0)
          operator delete(__p[0]);
        return 0;
      case 1u:
        if (*(_DWORD *)(*((_QWORD *)v13 + 5) + 12) <= 2u)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v36 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            v37 = (_QWORD *)((char *)this + 8);
            if (*((char *)this + 31) < 0)
              v37 = (_QWORD *)*v37;
            v39 = *((_DWORD *)this + 8);
            v38 = *((_DWORD *)this + 9);
            v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
            if (*(char *)(v40 + 23) >= 0)
              v41 = v40;
            else
              v41 = *(_QWORD *)v40;
            (*(void (**)(void **__return_ptr))(**((_QWORD **)v13 + 5) + 96))(__p);
            if (v88 >= 0)
              v42 = __p;
            else
              v42 = (void **)__p[0];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v37;
            v90 = 1024;
            v91 = v39;
            v92 = 1024;
            v93 = v38;
            v94 = 2080;
            *(_QWORD *)v95 = v41;
            *(_WORD *)&v95[8] = 2080;
            *(_QWORD *)v96 = v42;
            _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s = %s", buf, 0x2Cu);
            if (v88 < 0)
              operator delete(__p[0]);
          }
        }
        return (***((uint64_t (****)(_QWORD, uint64_t))this + 8))(*((_QWORD *)this + 8), a2);
      case 3u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v44 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v44 = (_QWORD *)*v44;
          v46 = *((_DWORD *)this + 8);
          v45 = *((_DWORD *)this + 9);
          v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v47 + 23) >= 0)
            v48 = v47;
          else
            v48 = *(_QWORD *)v47;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v44;
          v90 = 1024;
          v91 = v46;
          v92 = 1024;
          v93 = v45;
          v94 = 2080;
          *(_QWORD *)v95 = v48;
          _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEFAULT, "[%s|setProperty] (scope=%u, element=%u): %s value out of range", buf, 0x22u);
        }
        return 4294956445;
      case 4u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v49 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294956445;
        v50 = (_QWORD *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v50 = (_QWORD *)*v50;
        v52 = *((_DWORD *)this + 8);
        v51 = *((_DWORD *)this + 9);
        v53 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
        if (*(char *)(v53 + 23) >= 0)
          v54 = v53;
        else
          v54 = *(_QWORD *)v53;
        v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 16))(*((_QWORD *)v13 + 5));
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v50;
        v90 = 1024;
        v91 = v52;
        v92 = 1024;
        v93 = v51;
        v94 = 2080;
        *(_QWORD *)v95 = v54;
        *(_WORD *)&v95[8] = 1024;
        v96[0] = a4;
        LOWORD(v96[1]) = 1024;
        *(_DWORD *)((char *)&v96[1] + 2) = v55;
        v33 = "[%s|setProperty] (scope=%u, element=%u): %s: invalid size %u, expected %u";
        v34 = v49;
        v35 = 46;
        goto LABEL_47;
      case 5u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v56 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v66 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v66 = (_QWORD *)*v66;
          v68 = *((_DWORD *)this + 8);
          v67 = *((_DWORD *)this + 9);
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v69 + 23) >= 0)
            v70 = v69;
          else
            v70 = *(_QWORD *)v69;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v66;
          v90 = 1024;
          v91 = v68;
          v92 = 1024;
          v93 = v67;
          v94 = 2080;
          *(_QWORD *)v95 = v70;
          _os_log_error_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s not writable", buf, 0x22u);
        }
        return 4294956431;
      case 6u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v57 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v71 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v71 = (_QWORD *)*v71;
          v73 = *((_DWORD *)this + 8);
          v72 = *((_DWORD *)this + 9);
          v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v74 + 23) >= 0)
            v75 = v74;
          else
            v75 = *(_QWORD *)v74;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v71;
          v90 = 1024;
          v91 = v73;
          v92 = 1024;
          v93 = v72;
          v94 = 2080;
          *(_QWORD *)v95 = v75;
          _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s not writable after the AU is initialized", buf, 0x22u);
        }
        return 4294956447;
      case 7u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v58 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294956445;
        v59 = (_QWORD *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v59 = (_QWORD *)*v59;
        v61 = *((_DWORD *)this + 8);
        v60 = *((_DWORD *)this + 9);
        v62 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
        if (*(char *)(v62 + 23) >= 0)
          v63 = v62;
        else
          v63 = *(_QWORD *)v62;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v59;
        v90 = 1024;
        v91 = v61;
        v92 = 1024;
        v93 = v60;
        v94 = 2080;
        *(_QWORD *)v95 = v63;
        v33 = "[%s|setProperty] (scope=%u, element=%u): %s: file not found";
        v34 = v58;
        v35 = 34;
        goto LABEL_47;
      case 8u:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v64 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v76 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v76 = (_QWORD *)*v76;
          v78 = *((_DWORD *)this + 8);
          v77 = *((_DWORD *)this + 9);
          v79 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 5) + 80))(*((_QWORD *)v13 + 5));
          if (*(char *)(v79 + 23) >= 0)
            v80 = v79;
          else
            v80 = *(_QWORD *)v79;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v76;
          v90 = 1024;
          v91 = v78;
          v92 = 1024;
          v93 = v77;
          v94 = 2080;
          *(_QWORD *)v95 = v80;
          _os_log_error_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_ERROR, "[%s|setProperty] (scope=%u, element=%u): %s internal error: setter not implemented", buf, 0x22u);
        }
        return 4294956446;
      default:
        return 0;
    }
  }
  if ((_DWORD)a4 == 8)
  {
    v9 = *a3;
    if (*a3 && (CFRetain(*a3), v10 = CFGetTypeID(v9), v10 != CFDictionaryGetTypeID()))
    {
      *(_QWORD *)buf = 0;
      CFRelease(v9);
    }
    else
    {
      *(_QWORD *)buf = v9;
    }
    v17 = (*(uint64_t (**)(AUSM::Properties *, _BYTE *, uint64_t))(*(_QWORD *)this + 40))(this, buf, a5);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v18 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v30 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v30 = (_QWORD *)*v30;
      v31 = *((_DWORD *)this + 8);
      v32 = *((_DWORD *)this + 9);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v30;
      v90 = 1024;
      v91 = v31;
      v92 = 1024;
      v93 = v32;
      v94 = 1024;
      *(_DWORD *)v95 = a4;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = 8;
      v33 = "[%s|setProperty] (scope=%u, element=%u): spatial mixer property dictionary: invalid size %u, expected %u";
      v34 = v18;
      v35 = 36;
LABEL_47:
      _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);
    }
    return 4294956445;
  }
  return v17;
}

void sub_1B621D704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void AUSM::Properties::createPropertyDictionaryForSaveState(AUSM::Properties *this@<X0>, __CFDictionary **a2@<X8>)
{
  __CFDictionary *Mutable;
  AUSM::Properties *v5;
  char v6;
  _BYTE *v7;
  std::string *v8;
  CFIndex size;
  CFStringRef v10;
  AUSM::Properties *v11;
  AUSM::Properties *v12;
  BOOL v13;
  CFNumberRef v14;
  CFTypeID v15;
  std::runtime_error *exception;
  std::string v17;
  CFStringRef v18;
  void *value;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = (AUSM::Properties *)*((_QWORD *)this + 5);
  if (v5 != (AUSM::Properties *)((char *)this + 48))
  {
    v6 = 0;
    do
    {
      v7 = (_BYTE *)*((_QWORD *)v5 + 5);
      if (v7[16])
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 88))(&value);
        if (value)
        {
          std::to_string(&v17, *((_DWORD *)v5 + 8));
          if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v8 = &v17;
          else
            v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
          if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
          else
            size = v17.__r_.__value_.__l.__size_;
          v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, size, 0x8000100u, 0);
          v18 = v10;
          if (!v10)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
          CFDictionaryAddValue(Mutable, v10, value);
          CFRelease(v10);
          if (value)
            CFRelease(value);
          v6 = 1;
        }
      }
      v11 = (AUSM::Properties *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(AUSM::Properties **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (AUSM::Properties *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != (AUSM::Properties *)((char *)this + 48));
    if (((*((_DWORD *)this + 8) == 1) & v6) != 0)
    {
      v14 = CFNumberCreate(0, kCFNumberIntType, (char *)this + 36);
      CFDictionaryAddValue(Mutable, CFSTR("ElementNumber"), v14);
      CFRelease(v14);
    }
  }
  if (Mutable && (v15 = CFGetTypeID(Mutable), v15 != CFDictionaryGetTypeID()))
  {
    *a2 = 0;
    CFRelease(Mutable);
  }
  else
  {
    *a2 = Mutable;
  }
}

void sub_1B621D970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  if (a15 < 0)
    operator delete(__p);
  applesauce::CF::TypeRef::~TypeRef(&a18);
  _Unwind_Resume(a1);
}

void AUSM::Properties::createFullPropertyDictionary(AUSM::Properties *this@<X0>, __CFDictionary **a2@<X8>)
{
  __CFDictionary *Mutable;
  char *v5;
  char *v6;
  std::string *v7;
  CFIndex size;
  CFStringRef v9;
  void *v10;
  char *v11;
  char *v12;
  BOOL v13;
  CFTypeID v14;
  std::runtime_error *exception;
  std::string v16;
  uint64_t v17;
  void *value;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = (char *)*((_QWORD *)this + 5);
  v6 = (char *)this + 48;
  if (v5 != (char *)this + 48)
  {
    do
    {
      (*(void (**)(void **__return_ptr))(**((_QWORD **)v5 + 5) + 88))(&value);
      if (value)
      {
        std::to_string(&v16, *((_DWORD *)v5 + 8));
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v16;
        else
          v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
        else
          size = v16.__r_.__value_.__l.__size_;
        v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, size, 0x8000100u, 0);
        if (!v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        v10 = value;
        v17 = 0;
        value = 0;
        CFDictionaryAddValue(Mutable, v9, v10);
        if (value)
          CFRelease(value);
      }
      v11 = (char *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != v6);
  }
  if (Mutable && (v14 = CFGetTypeID(Mutable), v14 != CFDictionaryGetTypeID()))
  {
    *a2 = 0;
    CFRelease(Mutable);
  }
  else
  {
    *a2 = Mutable;
  }
}

void sub_1B621DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  if (a15 < 0)
    operator delete(__p);
  applesauce::CF::TypeRef::~TypeRef(&a18);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Properties::setPropertyDictionary(AUSM::Properties *this, CFDictionaryRef *a2, uint64_t a3)
{
  NSObject *v6;
  CFIndex Count;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t IntValue;
  const void *Value;
  CFTypeID v13;
  const void *v14;
  const void *v15;
  CFNumberType Type;
  uint64_t v17;
  const __CFString *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  CFNumberRef v24;
  NSObject *v25;
  const void *v26;
  const void *v27;
  const UInt8 *BytePtr;
  CFIndex Length;
  NSObject *v30;
  const void *v31;
  const void *v32;
  char *v33;
  int v34;
  int v35;
  NSObject *v36;
  char *v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  int v42;
  _QWORD *v44;
  int v45;
  int v46;
  std::runtime_error *v47;
  std::runtime_error *exception;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  char **v60;
  CFNumberRef number;
  void **keys;
  void **v63;
  _BYTE __p[12];
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v44 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v44 = (_QWORD *)*v44;
    v45 = *((_DWORD *)this + 8);
    v46 = *((_DWORD *)this + 9);
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v44;
    v65 = 1024;
    v66 = v45;
    v67 = 1024;
    v68 = v46;
    _os_log_debug_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "[%s|setPropertyDictionary] (scope=%u, element=%u): ", __p, 0x18u);
  }
  Count = CFDictionaryGetCount(*a2);
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(*a2, (const void **)keys, 0);
  v8 = keys;
  v9 = v63;
  if (keys != v63)
  {
    v10 = 0;
    v60 = (char **)((char *)this + 8);
    while (1)
    {
      IntValue = CFStringGetIntValue((CFStringRef)*v8);
      if (!(_DWORD)IntValue)
      {
        if (CFStringCompare((CFStringRef)*v8, CFSTR("ElementNumber"), 0) == kCFCompareEqualTo)
          goto LABEL_47;
        if (CFStringCompare((CFStringRef)*v8, CFSTR("LFELowPassFrequency"), 0))
          IntValue = 0;
        else
          IntValue = 3108;
      }
      Value = CFDictionaryGetValue(*a2, *v8);
      v13 = CFGetTypeID(Value);
      if (v13 == CFNumberGetTypeID())
      {
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        v14 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v14)
        {
          v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not find item");
        }
        v15 = v14;
        CFRetain(v14);
        applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&number, v15);
        Type = CFNumberGetType(number);
        if ((unint64_t)Type > kCFNumberFloatType)
          goto LABEL_55;
        if (((1 << Type) & 0x218) != 0)
        {
          *(_DWORD *)__p = 0;
          if (!number)
          {
            v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v51, "Could not construct");
          }
          *(_DWORD *)__p = applesauce::CF::convert_to<unsigned int,0>(number);
          v17 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 16))(this, IntValue, __p, 4, a3);
LABEL_37:
          v21 = v17;
        }
        else
        {
          if (((1 << Type) & 0x1060) != 0)
          {
            *(_DWORD *)__p = 0;
            if (!number)
            {
              v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v52, "Could not construct");
            }
            *(_DWORD *)__p = applesauce::CF::convert_to<float,0>(number);
            v17 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, __p, 4, a3);
            goto LABEL_37;
          }
LABEL_55:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v30 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v37 = (char *)this + 8;
            if (*((char *)this + 31) < 0)
              v37 = *v60;
            v38 = *((_DWORD *)this + 8);
            v39 = *((_DWORD *)this + 9);
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = v37;
            v65 = 1024;
            v66 = v38;
            v67 = 1024;
            v68 = v39;
            v69 = 1024;
            v70 = IntValue;
            _os_log_error_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): unsupported number type for dictionary entry %u", __p, 0x1Eu);
          }
          v21 = 4294956445;
        }
        v24 = number;
        if (!number)
          goto LABEL_40;
        goto LABEL_39;
      }
      if (v13 == CFStringGetTypeID())
      {
        if (!*a2)
        {
          v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
        }
        v18 = (const __CFString *)applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v18)
        {
          v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not find item");
        }
        applesauce::CF::convert_to<std::string,0>(v18, (uint64_t)__p);
        if (v68 >= 0)
          v19 = __p;
        else
          v19 = *(_BYTE **)__p;
        if (v68 >= 0)
          v20 = HIBYTE(v68);
        else
          v20 = *(unsigned int *)&__p[8];
        v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, v19, v20, a3);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)__p);
        goto LABEL_40;
      }
      if (v13 == CFURLGetTypeID())
      {
        if (!*a2)
        {
          v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
        }
        v22 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
        if (!v22)
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not find item");
        }
        v23 = v22;
        CFRetain(v22);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)__p, v23);
        v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, *(_QWORD *)__p, 8, a3);
        v24 = *(CFNumberRef *)__p;
        if (*(_QWORD *)__p)
          goto LABEL_39;
      }
      else
      {
        if (v13 == CFDataGetTypeID())
        {
          if (!*a2)
          {
            v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v56, "Could not construct");
          }
          v26 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
          if (!v26)
          {
            v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not find item");
          }
          v27 = v26;
          CFRetain(v26);
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)__p, v27);
          if (*(_QWORD *)__p)
          {
            BytePtr = CFDataGetBytePtr(*(CFDataRef *)__p);
            if (*(_QWORD *)__p)
            {
              Length = CFDataGetLength(*(CFDataRef *)__p);
              goto LABEL_69;
            }
          }
          else
          {
            BytePtr = 0;
          }
          Length = 0;
LABEL_69:
          v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, const UInt8 *, CFIndex, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, BytePtr, Length, a3);
          v24 = *(CFNumberRef *)__p;
          if (*(_QWORD *)__p)
            goto LABEL_39;
          goto LABEL_40;
        }
        if (v13 != CFBooleanGetTypeID())
        {
          if (v13 != CFDictionaryGetTypeID())
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v36 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              v40 = (char *)this + 8;
              if (*((char *)this + 31) < 0)
                v40 = *v60;
              v41 = *((_DWORD *)this + 8);
              v42 = *((_DWORD *)this + 9);
              *(_DWORD *)__p = 136315906;
              *(_QWORD *)&__p[4] = v40;
              v65 = 1024;
              v66 = v41;
              v67 = 1024;
              v68 = v42;
              v69 = 1024;
              v70 = IntValue;
              _os_log_error_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): unsupported data type for dictionary entry %u", __p, 0x1Eu);
            }
            v21 = 4294956445;
            goto LABEL_46;
          }
          if (!*a2)
          {
            v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
          }
          v31 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, *v8);
          if (!v31)
          {
            v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not find item");
          }
          v32 = v31;
          CFRetain(v31);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)__p, v32);
          number = *(CFNumberRef *)__p;
          v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, CFNumberRef *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, &number, 8, a3);
          v24 = *(CFNumberRef *)__p;
          if (!*(_QWORD *)__p)
            goto LABEL_40;
LABEL_39:
          CFRelease(v24);
          goto LABEL_40;
        }
        *(_DWORD *)__p = 0;
        if (!*a2)
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
        }
        *(_DWORD *)__p = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>(*a2, *v8);
        v21 = (*(uint64_t (**)(AUSM::Properties *, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, IntValue, __p, 4, a3);
      }
LABEL_40:
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == -10879)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v25 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v33 = (char *)this + 8;
            if (*((char *)this + 31) < 0)
              v33 = *v60;
            v34 = *((_DWORD *)this + 8);
            v35 = *((_DWORD *)this + 9);
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = v33;
            v65 = 1024;
            v66 = v34;
            v67 = 1024;
            v68 = v35;
            v69 = 1024;
            v70 = IntValue;
            _os_log_error_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "[%s|setPropertyDictionary] (scope=%u, element=%u): invalid property ID %u", __p, 0x1Eu);
          }
          v21 = 4294956417;
        }
LABEL_46:
        v10 = v21;
      }
LABEL_47:
      if (++v8 == v9)
      {
        v8 = keys;
        if (keys)
          goto LABEL_85;
        return v10;
      }
    }
  }
  v10 = 0;
  if (keys)
  {
LABEL_85:
    v63 = v8;
    operator delete(v8);
  }
  return v10;
}

void sub_1B621E588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<__CFString const*>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1B621E760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<BOOL,0>(v2);
}

void sub_1B621E7C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryGetValue(theDict, a2);
  }
  return result;
}

uint64_t AUSM::Properties::setMaxValue(AUSM::Properties *this, uint64_t a2, const void *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  v5 = *((_QWORD *)this + 6);
  result = (uint64_t)this + 48;
  v4 = v5;
  if (v5)
  {
    v7 = result;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 >= 0xA;
      if (v8 >= 0xA)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != result && *(_DWORD *)(v7 + 32) <= 0xAu)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, const void *))(**(_QWORD **)(v7 + 40) + 56))(*(_QWORD *)(v7 + 40), a2, a3);
      if ((_DWORD)result)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 40) + 48))(*(_QWORD *)(v7 + 40), a2);
    }
  }
  return result;
}

void EndpointVAD2::~EndpointVAD2(EndpointVAD2 *this)
{
  EndpointVAD2::~EndpointVAD2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void **v19;

  *(_QWORD *)this = &off_1E69CB9C0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
  v2 = (const void *)*((_QWORD *)this + 18);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 18) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 19);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 20) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 21);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 21) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 22);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 22) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 45);
  if (v7)
  {
    *((_QWORD *)this + 46) = v7;
    operator delete(v7);
  }
  v19 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v8 = (void *)*((_QWORD *)this + 39);
  if (v8)
  {
    *((_QWORD *)this + 40) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v9)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v9);
  v10 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v12)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v12);
  v13 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v13)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v13);
  v14 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v14)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v14);
  v15 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v15)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v15);
  v16 = (void *)*((_QWORD *)this + 26);
  if (v16)
  {
    *((_QWORD *)this + 27) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 23);
  if (v17)
  {
    *((_QWORD *)this + 24) = v17;
    operator delete(v17);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v18)
    std::default_delete<EndpointDecisionLayerVAD2>::operator()[abi:ne180100](v18);
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)this + 12, 0);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

void std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<std::vector<float>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<EndpointDecisionLayerVAD2>::operator()[abi:ne180100](_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  v2 = (uint64_t *)a1[25];
  a1[25] = 0;
  if (v2)
    std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v2);
  v3 = (uint64_t *)a1[24];
  a1[24] = 0;
  if (v3)
    std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v3);
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t *std::unique_ptr<MixViterbiProd>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 400);
    if (v3)
      MEMORY[0x1BCC95CEC](v3, 0x1000C40504FFAC1);
    v4 = *(_QWORD *)(v2 + 392);
    if (v4)
      MEMORY[0x1BCC95CEC](v4, 0x1000C40504FFAC1);
    v5 = *(void **)(v2 + 384);
    if (v5)
      free(v5);
    v6 = *(void **)(v2 + 368);
    if (v6)
      free(v6);
    v7 = *(void **)(v2 + 360);
    if (v7)
      free(v7);
    v8 = *(void **)(v2 + 344);
    if (v8)
      free(v8);
    v9 = *(void **)(v2 + 336);
    if (v9)
      free(v9);
    v10 = *(void **)(v2 + 328);
    if (v10)
      free(v10);
    v11 = *(void **)(v2 + 320);
    if (v11)
      free(v11);
    v12 = *(void **)(v2 + 312);
    if (v12)
      free(v12);
    v13 = *(void **)(v2 + 304);
    if (v13)
      free(v13);
    v14 = *(void **)(v2 + 296);
    if (v14)
      free(v14);
    v15 = *(void **)(v2 + 288);
    if (v15)
      free(v15);
    v16 = *(void **)(v2 + 280);
    if (v16)
      free(v16);
    v17 = *(void **)(v2 + 272);
    if (v17)
      free(v17);
    v18 = *(void **)(v2 + 264);
    if (v18)
      free(v18);
    v19 = *(void **)(v2 + 256);
    if (v19)
      free(v19);
    v20 = *(void **)(v2 + 248);
    if (v20)
      free(v20);
    v21 = *(void **)(v2 + 240);
    if (v21)
      free(v21);
    v22 = *(_QWORD **)(v2 + 208);
    if (v22)
    {
      if (*v22)
        MEMORY[0x1BCC95CC8](*v22, 0x1000C8052888210);
      MEMORY[0x1BCC95CEC](v22, 0x1080C40FC6463CFLL);
    }
    v23 = *(_QWORD **)(v2 + 200);
    if (v23)
    {
      if (*v23)
        MEMORY[0x1BCC95CC8](*v23, 0x1000C8052888210);
      MEMORY[0x1BCC95CEC](v23, 0x1080C40FC6463CFLL);
    }
    v24 = *(_QWORD **)(v2 + 184);
    if (v24)
    {
      if (*v24)
        MEMORY[0x1BCC95CC8](*v24, 0x1000C8052888210);
      MEMORY[0x1BCC95CEC](v24, 0x1010C40FDD9F14CLL);
    }
    v25 = *(_QWORD **)(v2 + 192);
    if (v25)
    {
      if (*v25)
        MEMORY[0x1BCC95CC8](*v25, 0x1000C80451B5BE8);
      MEMORY[0x1BCC95CEC](v25, 0x1020C40EDED9539);
    }
    v26 = *(_QWORD **)(v2 + 176);
    if (v26)
    {
      if (*v26)
        MEMORY[0x1BCC95CC8](*v26, 0x1000C8052888210);
      MEMORY[0x1BCC95CEC](v26, 0x1010C40FDD9F14CLL);
    }
    v27 = *(_QWORD *)(v2 + 112);
    if (v27)
      MEMORY[0x1BCC95CEC](v27, 0x1000C4052888210);
    v28 = *(_QWORD *)(v2 + 104);
    if (v28)
      MEMORY[0x1BCC95CEC](v28, 0x1000C4052888210);
    v29 = *(_QWORD *)(v2 + 96);
    if (v29)
      MEMORY[0x1BCC95CEC](v29, 0x1000C4052888210);
    v30 = *(void **)(v2 + 48);
    if (v30)
    {
      *(_QWORD *)(v2 + 56) = v30;
      operator delete(v30);
    }
    v31 = *(void **)(v2 + 24);
    if (v31)
    {
      *(_QWORD *)(v2 + 32) = v31;
      operator delete(v31);
    }
    v32 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v32;
      operator delete(v32);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__shared_ptr_emplace<FeaturesDSPWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E2D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeaturesDSPWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E2D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t *std::__shared_ptr_emplace<FeaturesDSPWrapper>::__on_zero_shared(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100](a1 + 17, 0);
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = (uint64_t)v3;
    operator delete(v3);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](a1 + 3, 0);
}

uint64_t *std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      MEMORY[0x1BCC95CC8](v3, 0x1000C8077774924);
    v4 = *(_QWORD *)(v2 + 48);
    if (v4)
      MEMORY[0x1BCC95CC8](v4, 0x1000C8077774924);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((_BYTE *)(v2 + 48));
    v3 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t FeaturesDSPWrapper::RebufferingProcessAdaptor(FeaturesDSPWrapper *this, void *a2, _QWORD *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  FeaturesDSPWrapper *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  double v28;
  double v29;
  int v30;
  int v31;
  signed int v32;
  signed int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  NSObject *v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  double *v70;
  double v71;
  NSObject *v73;
  NSObject *v74;
  int v75;
  const char *v76;
  NSObject *v77;
  uint32_t v78;
  uint64_t v79;
  FeaturesDSPWrapper *v80;
  uint64_t v81;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  uint64_t v88;

  v5 = this;
  v88 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD, _QWORD, void *, char *, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *a3, a2, (char *)this + 144, *a4, *((_QWORD *)this + 2));
  v6 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  v8 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v8 != *(_DWORD *)(v7 + 12))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v73 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_76;
    }
    else
    {
      v73 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      v75 = *(_DWORD *)(v7 + 12);
      *(_DWORD *)buf = 136315650;
      v83 = "FeatureTimeSeries.h";
      v84 = 1024;
      v85 = 398;
      v86 = 1024;
      v87 = v75;
      v76 = "%25s:%-5d Incorrect number of incoming samples for %d-dimensional EnsembleTimeSeriesBuffer";
      v77 = v73;
      v78 = 24;
LABEL_75:
      _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_ERROR, v76, buf, v78);
    }
LABEL_76:
    abort();
  }
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 24);
    v11 = (*(_QWORD *)(v6 + 32) - v10) >> 2;
    do
    {
      if (v11 == v9
        || (v12 = *(_QWORD *)(v7 + 24),
            v13 = *(int *)(v12 + 12),
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v13) = *(_DWORD *)(v10 + 4 * v9),
            *(_DWORD *)(v12 + 12) = ((int)v13 + 1) % *(_DWORD *)(v12 + 8),
            v14 = *(_QWORD *)(v6 + 56),
            v9 >= (*(_QWORD *)(v6 + 64) - v14) >> 4))
      {
LABEL_59:
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
      }
      v15 = *(_QWORD *)(v7 + 32);
      v16 = *(int *)(v15 + 12);
      *(_OWORD *)(*(_QWORD *)v15 + 16 * v16) = *(_OWORD *)(v14 + 16 * v9);
      *(_DWORD *)(v15 + 12) = ((int)v16 + 1) % *(_DWORD *)(v15 + 8);
      ++v9;
    }
    while (v8 != v9);
  }
  ++*(_DWORD *)(v7 + 40);
  v17 = *((_QWORD *)v5 + 7);
  v18 = *((_QWORD *)v5 + 8) - v17;
  if (((unint64_t)v18 >> 2) != ((*((_QWORD *)v5 + 12) - *((_QWORD *)v5 + 11)) >> 2))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v74 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_76;
    }
    else
    {
      v74 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v83 = "FeatureTimeSeries.h";
      v84 = 1024;
      v85 = 490;
      v76 = "%25s:%-5d The number of input and output indices must match.";
      v77 = v74;
      v78 = 18;
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  v19 = *((_QWORD *)v5 + 4);
  if ((v18 & 0x3FFFFFFFCLL) == 0)
    goto LABEL_47;
  v20 = 0;
  v21 = *((float *)v5 + 41);
  v79 = v6;
  v80 = v5;
  do
  {
    if (v20 >= v18 >> 2)
LABEL_60:
      __assert_rtn("operator[]", "FeatureTimeSeries.h", 98, "index < mArray.size()");
    v22 = *(unsigned int *)(v17 + 4 * v20);
    v81 = *(_QWORD *)(v6 + 24);
    if (v22 >= (*(_QWORD *)(v6 + 32) - v81) >> 2)
      goto LABEL_59;
    v23 = *(_QWORD *)(v6 + 56);
    if (v22 >= (*(_QWORD *)(v6 + 64) - v23) >> 4)
      goto LABEL_59;
    v24 = *((_QWORD *)v5 + 11);
    if (v20 >= (*((_QWORD *)v5 + 12) - v24) >> 2)
      goto LABEL_60;
    v25 = (_QWORD *)(v23 + 16 * v22);
    v27 = *(double *)v25;
    v26 = v25 + 1;
    v28 = round(v27);
    v29 = *(double *)(v19 + 80);
    v30 = vcvtpd_s64_f64(v29 * (v28 + -0.5) / v21);
    v31 = v30 & ~(v30 >> 31);
    v32 = vcvtmd_s64_f64(v29 * (v28 + 0.5) / v21);
    if (v31 <= v32)
      v33 = v32;
    else
      v33 = v31;
    do
    {
      if (v28 != round(v21 * (double)v31 / *(double *)(v19 + 80)))
        continue;
      v34 = *(unsigned int *)(v24 + 4 * v20);
      v35 = *(_QWORD *)(v19 + 56);
      if (v34 >= (*(_QWORD *)(v19 + 64) - v35) >> 2)
        goto LABEL_58;
      v36 = *(_DWORD *)(v35 + 4 * v34);
      v37 = v31 - v36;
      if (v31 >= v36)
      {
        if (v31 <= v36)
          goto LABEL_42;
        if (EndpointVAD2LogScope(void)::once != -1)
          dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
        if (EndpointVAD2LogScope(void)::scope)
        {
          v39 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
          if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          {
LABEL_37:
            if (v31 != v36)
            {
              v40 = 0;
              v41 = *(_QWORD *)(v19 + 24);
              v42 = *(_QWORD *)(v19 + 32);
              do
              {
                v43 = *(_QWORD *)(v41 + 8 * *(unsigned int *)(v24 + 4 * v20));
                v44 = *(int *)(v43 + 12);
                *(_DWORD *)(*(_QWORD *)v43 + 4 * v44) = 0;
                *(_DWORD *)(v43 + 12) = ((int)v44 + 1) % *(_DWORD *)(v43 + 8);
                v45 = *(_QWORD *)(v42 + 8 * *(unsigned int *)(v24 + 4 * v20));
                v46 = *(int *)(v45 + 12);
                *(double *)(*(_QWORD *)v45 + 8 * v46) = (double)(v36 + v40);
                *(_DWORD *)(v45 + 12) = ((int)v46 + 1) % *(_DWORD *)(v45 + 8);
                ++v40;
              }
              while (v40 < v37);
            }
            v47 = *(unsigned int *)(v24 + 4 * v20);
            v48 = *(_QWORD *)(v19 + 56);
            if (v47 >= (*(_QWORD *)(v19 + 64) - v48) >> 2)
              goto LABEL_58;
            *(_DWORD *)(v48 + 4 * v47) += v37;
            goto LABEL_42;
          }
        }
        else
        {
          v39 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v83 = "FeatureTimeSeries.h";
          v84 = 1024;
          v85 = 629;
          _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Gap detected in the input time series. Filling in zeros.", buf, 0x12u);
        }
        goto LABEL_37;
      }
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (!EndpointVAD2LogScope(void)::scope)
      {
        v38 = MEMORY[0x1E0C81028];
LABEL_32:
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v83 = "FeatureTimeSeries.h";
          v84 = 1024;
          v85 = 621;
          _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Input sample numbers cannot go backward in time!", buf, 0x12u);
        }
        goto LABEL_42;
      }
      v38 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_32;
LABEL_42:
      v49 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * *(unsigned int *)(v24 + 4 * v20));
      v50 = *(int *)(v49 + 12);
      *(_DWORD *)(*(_QWORD *)v49 + 4 * v50) = *(_DWORD *)(v81 + 4 * v22);
      *(_DWORD *)(v49 + 12) = ((int)v50 + 1) % *(_DWORD *)(v49 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8 * *(unsigned int *)(v24 + 4 * v20));
      v52 = *(int *)(v51 + 12);
      *(_QWORD *)(*(_QWORD *)v51 + 8 * v52) = *v26;
      *(_DWORD *)(v51 + 12) = ((int)v52 + 1) % *(_DWORD *)(v51 + 8);
      v53 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * *(unsigned int *)(v24 + 4 * v20));
      v54 = *(int *)(v53 + 12);
      *(double *)(*(_QWORD *)v53 + 8 * v54) = (double)v31;
      *(_DWORD *)(v53 + 12) = ((int)v54 + 1) % *(_DWORD *)(v53 + 8);
      v55 = *(unsigned int *)(v24 + 4 * v20);
      v56 = *(_QWORD *)(v19 + 56);
      if (v55 >= (*(_QWORD *)(v19 + 64) - v56) >> 2)
        goto LABEL_58;
      ++*(_DWORD *)(v56 + 4 * v55);
    }
    while (v31++ != v33);
    ++v20;
    v6 = v79;
    v5 = v80;
    v17 = *((_QWORD *)v80 + 7);
    v18 = *((_QWORD *)v80 + 8) - v17;
  }
  while (v20 < ((unint64_t)v18 >> 2));
LABEL_47:
  v59 = *(char **)(v19 + 56);
  v58 = *(char **)(v19 + 64);
  v60 = v58 - v59;
  if (v58 == v59)
    goto LABEL_58;
  v61 = *(_DWORD *)v59;
  *(_DWORD *)(v19 + 88) = *(_DWORD *)v59;
  v62 = *(unsigned int *)(v19 + 12);
  if (v62 >= 2)
  {
    v63 = v60 >> 2;
    if (v63 <= 1)
      v64 = 1;
    else
      v64 = v63;
    v65 = v62 - 1;
    v66 = (unsigned int *)(v59 + 4);
    v67 = v64 - 1;
    while (v67)
    {
      v69 = *v66++;
      v68 = v69;
      if (v69 < v61)
        v61 = v68;
      *(_DWORD *)(v19 + 88) = v61;
      --v67;
      if (!--v65)
        goto LABEL_57;
    }
LABEL_58:
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
  }
LABEL_57:
  v70 = *(double **)v5;
  v71 = *(double *)(*(_QWORD *)v5 + 32) + *((double *)v5 + 19);
  *((double *)v5 + 19) = v71;
  *((double *)v5 + 18) = v71 * *v70;
  return 0;
}

void FixedArray<unsigned int>::Allocate(uint64_t a1, std::vector<unsigned int>::size_type __n)
{
  NSObject *v3;
  std::vector<unsigned int>::size_type v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (__n != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
    {
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v3 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          goto LABEL_12;
      }
      else
      {
        v3 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v5 = 136315394;
        v6 = "FeatureTimeSeries.h";
        v7 = 1024;
        v8 = 63;
        _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d The FixedArray object cannot be re-allocated to a different length.", (uint8_t *)&v5, 0x12u);
      }
LABEL_12:
      abort();
    }
  }
  else
  {
    v4 = __n;
    std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a1 + 8), __n);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 8), v4);
    *(_BYTE *)a1 = 1;
  }
}

uint64_t EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4;
  char **v5;
  unint64_t v6;

  v4 = TimeSeriesEvent<float>::TimeSeriesEvent(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E69E2D58;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = (char **)(v4 + 56);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v6 = *(unsigned int *)(v4 + 8);
  std::vector<DataTimeStamp>::reserve((void **)(v4 + 56), v6);
  std::vector<std::span<float,18446744073709551615ul>>::resize(v5, v6);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1B621F904(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  *v1 = &off_1E69E2D78;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<VectorTimeSeriesSynchronizer<float>,std::allocator<VectorTimeSeriesSynchronizer<float>>,unsigned int &,unsigned int &,float &,void>(_QWORD *a1, int a2, int a3, float a4)
{
  char *v8;
  std::vector<unsigned int>::size_type v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  std::vector<unsigned int>::size_type v19;
  _BYTE *v20;
  _BYTE *v21;

  v8 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_1E69E2D98;
  *((_QWORD *)v8 + 3) = &off_1E69E2DD0;
  *((_DWORD *)v8 + 8) = a2;
  *((_DWORD *)v8 + 9) = a3;
  *((_DWORD *)v8 + 10) = a3 * a2;
  v8[72] = 0;
  *((_QWORD *)v8 + 10) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *((double *)v8 + 13) = a4;
  *((_DWORD *)v8 + 28) = 0;
  *((_QWORD *)v8 + 6) = operator new[]();
  *((_QWORD *)v8 + 7) = operator new[]();
  *((_QWORD *)v8 + 8) = operator new[]();
  if (*((_DWORD *)v8 + 9))
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)operator new();
      v11 = *((unsigned int *)v8 + 8);
      v12 = (void *)operator new[]();
      bzero(v12, 4 * v11);
      *v10 = v12;
      v10[1] = v11;
      bzero(v12, 4 * (int)v11);
      *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v9) = v10;
      v13 = (_QWORD *)operator new();
      v14 = *((unsigned int *)v8 + 8);
      v15 = (void *)operator new[]();
      bzero(v15, 8 * v14);
      *v13 = v15;
      v13[1] = v14;
      bzero(v15, 8 * (int)v14);
      *(_QWORD *)(*((_QWORD *)v8 + 7) + 8 * v9) = v13;
      v16 = (_QWORD *)operator new();
      v17 = *((unsigned int *)v8 + 8);
      v18 = (void *)operator new[]();
      bzero(v18, 8 * v17);
      *v16 = v18;
      v16[1] = v17;
      bzero(v18, 8 * (int)v17);
      *(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v9++) = v16;
      v19 = *((unsigned int *)v8 + 9);
    }
    while (v9 < v19);
  }
  else
  {
    v19 = 0;
  }
  FixedArray<unsigned int>::Allocate((uint64_t)(v8 + 72), v19);
  v20 = (_BYTE *)*((_QWORD *)v8 + 10);
  v21 = (_BYTE *)*((_QWORD *)v8 + 11);
  if (v20 != v21)
    bzero(v20, ((v21 - v20 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_1B621FBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  std::__shared_weak_count *v10;
  void *v12;
  void *v13;

  v12 = *a10;
  if (*a10)
  {
    v10[3].__shared_weak_owners_ = (uint64_t)v12;
    operator delete(v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(uint64_t a1, int a2, _DWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 8) = a2;
  v4 = *a3 * a2;
  *(_DWORD *)(a1 + 12) = *a3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = &off_1E69E2DF8;
  v5 = (_QWORD *)operator new();
  v6 = *(unsigned int *)(a1 + 16);
  v7 = (void *)operator new[]();
  bzero(v7, 4 * v6);
  *v5 = v7;
  v5[1] = v6;
  bzero(v7, 4 * (int)v6);
  *(_QWORD *)(a1 + 24) = v5;
  v8 = operator new();
  MRRingBuffer<DataTimeStamp>::MRRingBuffer(v8, *(_DWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_1B621FD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1020C40EDED9539);
  _Unwind_Resume(a1);
}

uint64_t TimeSeriesEvent<float>::TimeSeriesEvent(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E69E2D78;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  v6 = a2;
  std::vector<float>::reserve((void **)(a1 + 24), a2);
  std::vector<float>::resize(v5, v6);
  *(_BYTE *)(a1 + 16) = 1;
  v7 = *(_DWORD **)(a1 + 24);
  v8 = *(_DWORD **)(a1 + 32);
  while (v7 != v8)
    *v7++ = *a3;
  return a1;
}

void sub_1B621FDD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TimeSeriesEvent<unsigned int>::TimeSeriesEvent(uint64_t a1, std::vector<unsigned int>::size_type a2, _DWORD *a3)
{
  _DWORD *v5;
  _DWORD *v6;

  *(_QWORD *)a1 = &off_1E69E2E60;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  FixedArray<unsigned int>::Allocate(a1 + 16, a2);
  v5 = *(_DWORD **)(a1 + 24);
  v6 = *(_DWORD **)(a1 + 32);
  while (v5 != v6)
    *v5++ = *a3;
  return a1;
}

void sub_1B621FE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned int>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<DataTimeStamp>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *VectorTimeSeriesEvent<unsigned int>::~VectorTimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2E60;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void VectorTimeSeriesEvent<unsigned int>::~VectorTimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2E60;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *TimeSeriesEvent<unsigned int>::~TimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2E60;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void TimeSeriesEvent<unsigned int>::~TimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2E60;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *VectorTimeSeriesEvent<float>::~VectorTimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2D78;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void VectorTimeSeriesEvent<float>::~VectorTimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2D78;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *TimeSeriesEvent<float>::~TimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2D78;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void TimeSeriesEvent<float>::~TimeSeriesEvent(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E69E2D78;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void EndpointVAD2::FloatVectorToUIntVector(uint64_t *a1, std::vector<unsigned int> *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<unsigned int>::pointer begin;

  std::vector<unsigned int>::resize(this, (a1[1] - *a1) >> 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  if (v5 != *a1)
  {
    v7 = 0;
    v8 = v6 >> 2;
    begin = this->__begin_;
    do
    {
      begin[v7] = (float)(unint64_t)(*(float *)(v4 + 4 * v7) + 0.5);
      ++v7;
    }
    while (v8 > v7);
  }
}

void EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(_QWORD *a1)
{
  EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(a1);
  JUMPOUT(0x1BCC95CECLL);
}

float EnsembleTimeSeriesBuffer<float>::GetDataValue(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;

  v3 = *(uint64_t **)(a1 + 24);
  v4 = *a3 + *(_DWORD *)(a1 + 12) * *a2;
  v5 = *v3;
  if (v4 < 0)
    v6 = *((_DWORD *)v3 + 2) + ~((*((_DWORD *)v3 + 2) - v4 + ~*((_DWORD *)v3 + 3)) % *((_DWORD *)v3 + 2));
  else
    v6 = (*((_DWORD *)v3 + 3) + v4) % *((_DWORD *)v3 + 2);
  return *(float *)(v5 + 4 * v6);
}

_QWORD *EnsembleTimeSeriesBuffer<float>::~EnsembleTimeSeriesBuffer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E69E2DF8;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
      MEMORY[0x1BCC95CC8](*v2, 0x1000C8052888210);
    MEMORY[0x1BCC95CEC](v2, 0x1080C40FC6463CFLL);
    a1[3] = 0;
  }
  v3 = (_QWORD *)a1[4];
  if (v3)
  {
    if (*v3)
      MEMORY[0x1BCC95CC8](*v3, 0x1000C80451B5BE8);
    MEMORY[0x1BCC95CEC](v3, 0x1020C40EDED9539);
    a1[4] = 0;
  }
  return a1;
}

void VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(uint64_t a1)
{
  VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(a1);
  JUMPOUT(0x1BCC95CECLL);
}

float VectorTimeSeriesSynchronizer<float>::GetDataValue(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8 * *a3);
  v8 = *v7;
  v9 = *a2 - SynchronizationDelay;
  if (v9 < 0)
    v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  else
    v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  return *(float *)(v8 + 4 * v10);
}

uint64_t VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 64) - v2) >> 2))
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
  v3 = *(_DWORD *)(v2 + 4 * a2);
  v4 = *(_DWORD *)(a1 + 88);
  result = (v3 - v4);
  if (v3 - v4 < 0)
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v6 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_12;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "FeatureTimeSeries.h";
      v9 = 1024;
      v10 = 570;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d mNominalVectorNumber should be the minimum of the time-series counters!", (uint8_t *)&v7, 0x12u);
    }
LABEL_12:
    abort();
  }
  return result;
}

uint64_t VectorTimeSeriesSynchronizer<float>::~VectorTimeSeriesSynchronizer(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E69E2DD0;
  if (*(_DWORD *)(a1 + 12))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v2);
      if (v3)
      {
        if (*v3)
          MEMORY[0x1BCC95CC8](*v3, 0x1000C8052888210);
        MEMORY[0x1BCC95CEC](v3, 0x1080C40FC6463CFLL);
      }
      v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v2);
      if (v4)
      {
        if (*v4)
          MEMORY[0x1BCC95CC8](*v4, 0x1000C8000313F17);
        MEMORY[0x1BCC95CEC](v4, 0x1080C40FC6463CFLL);
      }
      v5 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v2);
      if (v5)
      {
        if (*v5)
          MEMORY[0x1BCC95CC8](*v5, 0x1000C8000313F17);
        MEMORY[0x1BCC95CEC](v5, 0x1080C40FC6463CFLL);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 12));
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    MEMORY[0x1BCC95CC8](v6, 0x20C8093837F09);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    MEMORY[0x1BCC95CC8](v7, 0x20C8093837F09);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    MEMORY[0x1BCC95CC8](v8, 0x20C8093837F09);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    operator delete(v9);
  }
  return a1;
}

void std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E2D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E2D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<VectorTimeSeriesSynchronizer<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(_QWORD *a1)
{
  EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(a1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *EnsembleTimeSeriesEvent<float>::~EnsembleTimeSeriesEvent(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E69E2D58;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E69E2D78;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

CFDictionaryRef EndpointVAD2::SetProperties(CFDictionaryRef theDict, CFTypeRef *a2, const __CFDictionary **a3)
{
  CFDictionaryRef result;

  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
  *a2 = result;
  return result;
}

uint64_t EndpointVAD2::UpdateAndDispatchDecisions(uint64_t result, _QWORD **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, _BYTE *a7)
{
  _BYTE *v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  double v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  int64_t v52;
  void *v53;
  double v54;
  double v55;
  double *v56;
  double *v57;
  unsigned int v58;
  double v59;
  double v60;
  unsigned int v61;
  double v62;
  BOOL v63;
  double *v64;
  unsigned int v65;
  double *v66;
  unsigned int v67;
  unint64_t v69;
  double *v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  unint64_t v83;
  __int128 v84;
  double *v85;
  int64_t v86;
  uint64_t v87;
  __int128 *v88;
  char v89;
  double v90;
  char v91;
  __int128 v92;
  int v93;
  int v94;
  float *v95;
  float v96;
  int v97;
  double *v98;
  double v99;
  float v100;
  float v101;
  float v102;
  double *v103;
  int v104;
  double v105;
  double v106;
  float v107;
  float v108;
  float v109;
  float *v110;
  float v111;
  int v112;
  float64x2_t v113;
  double *v114;
  int v115;
  NSObject *v116;
  float64x2_t v117;
  _BOOL4 v118;
  double *v119;
  int v120;
  int v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  signed int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  float64x2_t v144;
  double v145;
  double v146;
  char *v147;
  NSObject *v148;
  NSObject *v149;
  void **v150;
  uint64_t v153;
  float *v155;
  uint64_t v156;
  float *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  uint64_t v166;
  void *__p[2];
  char v168;
  _QWORD buf[6];

  v160 = result;
  buf[4] = *MEMORY[0x1E0C80C00];
  v161 = *a2;
  if (*a2 != a2[1])
  {
    v7 = a7;
    v8 = a6;
    v10 = a4;
    v162 = *a3;
    v153 = a5 + 144;
    v159 = (float *)(a5 + 88);
    v155 = (float *)(a5 + 92);
    v156 = a5 + 168;
    while (1)
    {
      if (!*v7)
      {
        v11 = *a3;
        v12 = a3[1];
        if (*a3 == v12)
        {
          v14 = 0.0;
        }
        else
        {
          v13 = 0;
          v14 = 0.0;
          do
          {
            if (v13)
            {
              if (*(double *)(v11 + v13 + 8) < v14)
                v14 = *(double *)(v11 + v13 + 8);
            }
            else
            {
              v14 = *(double *)(v11 + 8);
            }
            v13 += 16;
          }
          while (v11 + v13 != v12);
        }
        v15 = *(double *)(a5 + 128) * v14;
        *(_DWORD *)(a5 + 144) = 0;
        *(double *)(a5 + 152) = v15;
        *(double *)(a5 + 160) = v14;
        *(_OWORD *)v156 = *(_OWORD *)v153;
        *(_QWORD *)(v156 + 16) = *(_QWORD *)(v153 + 16);
        *v7 = 1;
      }
      v166 = 0;
      v165 = 0uLL;
      v164 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      if (v8 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        if (SHIBYTE(buf[2]) < 0)
          operator delete((void *)buf[0]);
        v16 = 1;
      }
      else
      {
        if (v8)
        {
          if (v168 < 0)
          {
            __p[1] = (void *)16;
            v147 = (char *)__p[0];
          }
          else
          {
            v168 = 16;
            v147 = (char *)__p;
          }
          strcpy(v147, "Invalid VAD mode");
          if (EndpointVAD2LogScope(void)::once != -1)
            dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
          if (EndpointVAD2LogScope(void)::scope)
          {
            v149 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
            if (*(_QWORD *)EndpointVAD2LogScope(void)::scope)
              goto LABEL_210;
          }
          else
          {
            v149 = MEMORY[0x1E0C81028];
LABEL_210:
            if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
            {
              v150 = __p;
              if (v168 < 0)
                v150 = (void **)__p[0];
              LODWORD(buf[0]) = 136315650;
              *(_QWORD *)((char *)buf + 4) = "VAD2StateLabels.cpp";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 116;
              WORD1(buf[2]) = 2080;
              *(_QWORD *)((char *)&buf[2] + 4) = v150;
              _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal error: %s", (uint8_t *)buf, 0x1Cu);
            }
          }
          abort();
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        if (SHIBYTE(buf[2]) < 0)
          operator delete((void *)buf[0]);
        v16 = 0;
      }
      if (v168 < 0)
        operator delete(__p[0]);
      if (v16 >= (uint64_t)(v161[1] - *v161) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v17 = *(_DWORD *)(*v161 + 4 * v16);
      ++*(_DWORD *)(a5 + 220);
      LODWORD(buf[0]) = v17;
      *(_OWORD *)&buf[1] = *(_OWORD *)v162;
      *(_QWORD *)(a5 + 104) = *(_QWORD *)(a5 + 96);
      v19 = *(char **)(a5 + 16);
      v18 = *(char **)(a5 + 24);
      v20 = v18 - v19;
      if (v18 == v19)
      {
        v22 = *(char **)(a5 + 24);
      }
      else
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
        v22 = *(char **)(a5 + 16);
        do
        {
          v23 = v21 >> 1;
          v24 = &v22[24 * (v21 >> 1)];
          v25 = *((double *)v24 + 2);
          v26 = v24 + 24;
          v21 += ~(v21 >> 1);
          if (*(double *)&buf[2] > v25)
            v21 = v23;
          else
            v22 = v26;
        }
        while (v21);
      }
      v27 = *(_QWORD *)(a5 + 32);
      if ((unint64_t)v18 >= v27)
      {
        v31 = 1 - 0x5555555555555555 * (v20 >> 3);
        if (v31 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v27 - (_QWORD)v19) >> 3) > v31)
          v31 = 0x5555555555555556 * ((uint64_t)(v27 - (_QWORD)v19) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v19) >> 3) >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v31;
        if (v32)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v32);
        }
        else
        {
          v34 = 0;
          v33 = 0;
        }
        v38 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v19) >> 3);
        v39 = &v34[8 * ((v22 - v19) >> 3)];
        v40 = &v34[24 * v33];
        if (v38 == v33)
        {
          if (v22 - v19 < 1)
          {
            if (v22 == v19)
              v42 = 1;
            else
              v42 = 0x5555555555555556 * ((v22 - v19) >> 3);
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v42);
            v39 = &v43[24 * (v42 >> 2)];
            v40 = &v43[24 * v44];
            if (v34)
              operator delete(v34);
          }
          else
          {
            if (v38 >= -1)
              v41 = v38 + 1;
            else
              v41 = v38 + 2;
            v39 -= 24 * (v41 >> 1);
          }
        }
        v45 = *(_OWORD *)buf;
        *((_QWORD *)v39 + 2) = buf[2];
        *(_OWORD *)v39 = v45;
        v46 = *(char **)(a5 + 16);
        v47 = v39;
        if (v46 != v22)
        {
          v48 = v22;
          v49 = v39;
          do
          {
            v50 = *(_OWORD *)(v48 - 24);
            v47 = v49 - 24;
            *((_QWORD *)v49 - 1) = *((_QWORD *)v48 - 1);
            *(_OWORD *)(v49 - 24) = v50;
            v48 -= 24;
            v49 -= 24;
          }
          while (v48 != v46);
        }
        v51 = *(char **)(a5 + 24);
        v52 = v51 - v22;
        if (v51 != v22)
          memmove(v39 + 24, v22, v51 - v22);
        v53 = *(void **)(a5 + 16);
        *(_QWORD *)(a5 + 16) = v47;
        *(_QWORD *)(a5 + 24) = &v39[v52 + 24];
        *(_QWORD *)(a5 + 32) = v40;
        v10 = a4;
        if (v53)
          operator delete(v53);
      }
      else if (v22 == v18)
      {
        v37 = *(_OWORD *)buf;
        *((_QWORD *)v18 + 2) = buf[2];
        *(_OWORD *)v18 = v37;
        *(_QWORD *)(a5 + 24) = v18 + 24;
      }
      else
      {
        v28 = v18 - 24;
        v29 = *(_QWORD *)(a5 + 24);
        while (v28 < v18)
        {
          v30 = *(_OWORD *)v28;
          *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v29 = v30;
          v29 += 24;
          v28 += 24;
        }
        *(_QWORD *)(a5 + 24) = v29;
        if (v18 != v22 + 24)
          memmove(v22 + 24, v22, v18 - (v22 + 24));
        v35 = buf;
        if (v22 <= (char *)buf)
          v35 = &buf[3 * (*(_QWORD *)(a5 + 24) > (unint64_t)buf)];
        v36 = *(_OWORD *)v35;
        *((_QWORD *)v22 + 2) = v35[2];
        *(_OWORD *)v22 = v36;
      }
      v54 = *(double *)&buf[2];
      v55 = *(double *)(a5 + 40);
      if (*(double *)&buf[2] > v55)
      {
        *(_QWORD *)(a5 + 40) = buf[2];
        v55 = v54;
      }
      v56 = *(double **)(a5 + 16);
      v57 = *(double **)(a5 + 24);
      v58 = -1431655765 * ((unint64_t)((char *)v57 - (char *)v56) >> 3);
      v59 = *(double *)a5;
      v60 = v55 - *(double *)a5;
      v61 = *(_DWORD *)(a5 + 8);
      v62 = *(v57 - 1);
      v63 = v61 < v58 || v62 < v60;
      v64 = *(double **)(a5 + 24);
      if (v63)
      {
        v65 = v58 - 1;
        v64 = *(double **)(a5 + 24);
        while (1)
        {
          v66 = v64;
          v64 -= 3;
          if (v64 == v56)
            break;
          v67 = v65 - 1;
          if (v65-- <= v61)
          {
            v65 = v67;
            if (*(v66 - 4) >= v60)
              goto LABEL_84;
          }
        }
        v64 = *(double **)(a5 + 16);
      }
LABEL_84:
      v69 = *(_QWORD *)(a5 + 96);
      if (v57 != v64)
      {
        *(_QWORD *)(a5 + 104) = v69;
        v70 = v64;
        do
        {
          v71 = *(_QWORD *)(a5 + 112);
          if (v69 >= v71)
          {
            v73 = *(_QWORD *)(a5 + 96);
            v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v73) >> 3);
            v75 = v74 + 1;
            if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v73) >> 3);
            if (2 * v76 > v75)
              v75 = 2 * v76;
            if (v76 >= 0x555555555555555)
              v77 = 0xAAAAAAAAAAAAAAALL;
            else
              v77 = v75;
            if (v77)
              v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v77);
            else
              v78 = 0;
            v79 = v77 + 24 * v74;
            v80 = *(_OWORD *)v70;
            *(double *)(v79 + 16) = v70[2];
            *(_OWORD *)v79 = v80;
            v82 = *(char **)(a5 + 96);
            v81 = *(char **)(a5 + 104);
            v83 = v79;
            if (v81 != v82)
            {
              do
              {
                v84 = *(_OWORD *)(v81 - 24);
                *(_QWORD *)(v83 - 8) = *((_QWORD *)v81 - 1);
                *(_OWORD *)(v83 - 24) = v84;
                v83 -= 24;
                v81 -= 24;
              }
              while (v81 != v82);
              v81 = *(char **)(a5 + 96);
            }
            v69 = v79 + 24;
            *(_QWORD *)(a5 + 96) = v83;
            *(_QWORD *)(a5 + 104) = v79 + 24;
            *(_QWORD *)(a5 + 112) = v77 + 24 * v78;
            if (v81)
              operator delete(v81);
          }
          else
          {
            v72 = *(_OWORD *)v70;
            *(double *)(v69 + 16) = v70[2];
            *(_OWORD *)v69 = v72;
            v69 += 24;
          }
          *(_QWORD *)(a5 + 104) = v69;
          v70 += 3;
        }
        while (v70 != v57);
        v85 = *(double **)(a5 + 24);
        v86 = (char *)v85 - (char *)v57;
        if (v85 != v57)
          memmove(v64, v57, (char *)v85 - (char *)v57);
        v57 = (double *)((char *)v64 + v86);
        *(_QWORD *)(a5 + 24) = (char *)v64 + v86;
        v62 = *(double *)((char *)v64 + v86 - 8);
        v55 = *(double *)(a5 + 40);
        v59 = *(double *)a5;
        v69 = *(_QWORD *)(a5 + 96);
      }
      *(double *)(a5 + 48) = v62;
      v87 = *(_QWORD *)(a5 + 104);
      if (v69 != v87)
      {
        v88 = 0;
        v89 = 1;
        v90 = 0.0;
        do
        {
          v91 = v89 | (*(double *)(v69 + 16) > v90);
          v89 = 0;
          if ((v91 & 1) != 0)
          {
            v88 = (__int128 *)v69;
            v90 = *(double *)(v69 + 16);
          }
          v69 += 24;
        }
        while (v69 != v87);
        if (v88)
        {
          *(_BYTE *)(a5 + 136) = 0;
          v92 = *v88;
          *(_QWORD *)(v156 + 16) = *((_QWORD *)v88 + 2);
          *(_OWORD *)v156 = v92;
        }
      }
      if (v55 - *(double *)(a5 + 160) > v59)
        *(_BYTE *)(a5 + 136) = 0;
      v93 = *(_DWORD *)(a5 + 120);
      if (!v93)
        break;
      if (v93 == 1)
      {
        v94 = 0;
        v95 = v159;
LABEL_119:
        v96 = *v95;
        goto LABEL_121;
      }
      v94 = 0;
      v96 = 0.0;
LABEL_121:
      v97 = *(_DWORD *)(a5 + 168);
      v98 = *(double **)(a5 + 16);
      if (v57 == v98)
      {
        v108 = 0.0;
        v109 = 0.0;
      }
      else
      {
        v99 = v55 - v59;
        if (*(_BYTE *)(a5 + 136))
          v99 = *(double *)(a5 + 184);
        v100 = *(v57 - 1) - v99;
        v101 = v100 + 0.0;
        if (v97 == v94)
          v102 = v100 + 0.0;
        else
          v102 = 0.0;
        v103 = v57 - 4;
        while (1)
        {
          v104 = *((_DWORD *)v103 + 2);
          if (v103 + 1 == v98)
            break;
          v105 = v103[3];
          v106 = *v103;
          v103 -= 3;
          v100 = v106 - v105;
          v101 = v100 + v101;
          if (v104 == v94)
            v107 = v100;
          else
            v107 = -0.0;
          v102 = v102 + v107;
        }
        v108 = v100 + v101;
        if (v104 != v94)
          v100 = -0.0;
        v109 = v102 + v100;
      }
      v110 = v159;
      if (v94)
        v110 = v155;
      v111 = v59 * *v110;
      v112 = (float)(v109 / v108) >= v96;
      if (v109 <= v111)
        v112 = 0;
      if (!v93)
      {
        if (!v112)
          goto LABEL_158;
        v113 = 0uLL;
        if (v97 == 1)
        {
          v113.f64[1] = *(float64_t *)(a5 + 184);
        }
        else if (v57 != v98)
        {
          v119 = v57;
          while (1)
          {
            v120 = *((_DWORD *)v119 - 6);
            v119 -= 3;
            if (v120 == 1)
              break;
            v57 = v119;
            if (v119 == v98)
              goto LABEL_172;
          }
          v113.f64[0] = 0.0;
          v113.f64[1] = *(v57 - 1);
        }
LABEL_172:
        v126 = *(double *)(a5 + 128);
        v127 = vmuld_lane_f64(v126, v113, 1);
        v124 = *(double *)(a5 + 72);
        v125.f64[0] = v126 * v124;
        v113.f64[0] = v127;
        v112 = 1;
        v121 = 1;
        goto LABEL_173;
      }
      if (v93 == 1)
      {
        if ((v112 & 1) == 0)
          goto LABEL_157;
        v113 = 0uLL;
        if (v97)
        {
          if (v57 != v98)
          {
            v114 = v57;
            while (1)
            {
              v115 = *((_DWORD *)v114 - 6);
              v114 -= 3;
              if (!v115)
                break;
              v57 = v114;
              if (v114 == v98)
                goto LABEL_170;
            }
            v113.f64[0] = 0.0;
            v113.f64[1] = *(v57 - 1);
          }
        }
        else
        {
          v113.f64[1] = *(float64_t *)(a5 + 184);
        }
LABEL_170:
        v121 = 0;
        v122 = *(double *)(a5 + 128);
        v123 = vmuld_lane_f64(v122, v113, 1);
        v124 = *(double *)(a5 + 80);
        v125.f64[0] = v122 * v124;
        v113.f64[0] = v123;
        v112 = 2;
LABEL_173:
        v129 = *(_QWORD *)(a5 + 192);
        v128 = *(_QWORD *)(a5 + 200);
        v130 = *(_DWORD *)(v129 + 8);
        if (v130 != *(_DWORD *)(v128 + 8))
        {
          if (EndpointVAD2LogScope(void)::once != -1)
            dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
          if (EndpointVAD2LogScope(void)::scope)
          {
            v148 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
            if (*(_QWORD *)EndpointVAD2LogScope(void)::scope)
              goto LABEL_216;
          }
          else
          {
            v148 = MEMORY[0x1E0C81028];
LABEL_216:
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0]) = 136315394;
              *(_QWORD *)((char *)buf + 4) = "EndpointDecisionLayer.cpp";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 261;
              _os_log_impl(&dword_1B5ED0000, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d Internal decision history buffers must have the same size", (uint8_t *)buf, 0x12u);
            }
          }
          abort();
        }
        v125.f64[1] = v124;
        v117 = vaddq_f64(v113, v125);
        v131 = *(int *)(v129 + 12);
        *(_DWORD *)(*(_QWORD *)v129 + 4 * v131) = v112;
        *(_DWORD *)(v129 + 12) = ((int)v131 + 1) % v130;
        v132 = *(int *)(v128 + 12);
        *(float64x2_t *)(*(_QWORD *)v128 + 16 * v132) = v117;
        *(_DWORD *)(v128 + 12) = ((int)v132 + 1) % v130;
        v133 = *(_DWORD *)(a5 + 208);
        if (v133 + 1 < v130)
          v130 = v133 + 1;
        *(_DWORD *)(a5 + 208) = v130;
        *(_DWORD *)(a5 + 120) = v121;
        goto LABEL_177;
      }
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v116 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        {
LABEL_157:
          v112 = 0;
LABEL_158:
          v117 = 0uLL;
          goto LABEL_177;
        }
      }
      else
      {
        v116 = MEMORY[0x1E0C81028];
      }
      v118 = os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
      v117 = 0uLL;
      if (v118)
      {
        LODWORD(buf[0]) = 136315394;
        *(_QWORD *)((char *)buf + 4) = "EndpointDecisionLayer.cpp";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 197;
        _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid state value!", (uint8_t *)buf, 0x12u);
        v117 = 0uLL;
      }
      v112 = 0;
LABEL_177:
      LODWORD(v166) = 0;
      HIDWORD(v166) = v112;
      v165 = v117;
      v134 = *(_DWORD *)(a5 + 212);
      if (v134 == 1)
      {
        v135 = *(uint64_t **)(a5 + 192);
        v136 = *(_QWORD *)(a5 + 200);
        v137 = *v135;
        v138 = *((_DWORD *)v135 + 2);
        v139 = v138 - *((_DWORD *)v135 + 3);
        v140 = *(_DWORD *)(v137 + 4 * (v138 + ~(v139 % v138)));
        v141 = *(_DWORD *)(a5 + 208);
        v163 = *(float64x2_t *)(*(_QWORD *)v136
                              + 16
                              * (*(_DWORD *)(v136 + 8)
                               + ~((*(_DWORD *)(v136 + 8) - *(_DWORD *)(v136 + 12)) % *(_DWORD *)(v136 + 8))));
        if (v141 >= 2)
        {
          v142 = v139 + 1;
          v143 = -1;
          do
          {
            v144.f64[0] = MRRingBuffer<DataTimeStamp>::GetSample(v136, --v143);
            if (v145 > v163.f64[1])
            {
              v140 = *(_DWORD *)(v137 + 4 * (v138 + ~(v142 % v138)));
              v144.f64[1] = v145;
              v163 = v144;
            }
            ++v142;
          }
          while (-v141 != v143);
        }
        v7 = a7;
        v8 = a6;
        v10 = a4;
        if (!v141)
          goto LABEL_191;
        if (v140 != 2)
          goto LABEL_191;
        v146 = *(double *)(v162 + 8);
        if (v146 - *(double *)(a5 + 160) < *(double *)(a5 + 56) || v146 - v163.f64[1] < *(double *)(a5 + 64))
          goto LABEL_191;
        *(_DWORD *)(a5 + 212) = 2;
        LODWORD(v166) = 4;
        v117 = v163;
      }
      else
      {
        if (v134 || v112 != 1)
          goto LABEL_191;
        *(_DWORD *)(a5 + 212) = 1;
        LODWORD(v166) = 3;
      }
      v164 = v117;
LABEL_191:
      EndpointVAD2::DispatchObservers(v160, (_DWORD *)&v166 + 1, (uint64_t)&v165, v10);
      result = EndpointVAD2::DispatchObservers(v160, &v166, (uint64_t)&v164, v10);
      v161 += 3;
      v162 += 16;
      if (v161 == a2[1])
        return result;
    }
    v94 = 1;
    v95 = v155;
    goto LABEL_119;
  }
  return result;
}

void sub_1B622159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (v35)
    operator delete(v35);
  _Unwind_Resume(exception_object);
}

uint64_t EndpointVAD2::DispatchObservers(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;

  if ((*a2 - 1) <= 3)
  {
    v4 = result;
    v5 = *(uint64_t **)(result + 360);
    if (v5 != *(uint64_t **)(result + 368))
    {
      do
      {
        v9 = *v5++;
        result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 16))(v9, a2, a3, a4, 0, 0);
      }
      while (v5 != *(uint64_t **)(v4 + 368));
    }
  }
  return result;
}

void FeaturesDSPWrapper::ProcessAudio(FeaturesDSPWrapper *this, const AudioBufferList *a2, double a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  void *mData;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  unsigned int v15;
  int v16;
  _BYTE buf[12];
  __int16 v18;
  int v19;
  AudioBufferList *v20[2];

  v4 = a4;
  v20[1] = *(AudioBufferList **)MEMORY[0x1E0C80C00];
  *((double *)this + 17) = a3;
  v7 = *(double *)this;
  v6 = *((_QWORD *)this + 1);
  v8 = **(double **)this * a3;
  *((double *)this + 16) = v8;
  v9 = *(_DWORD *)(v6 + 12);
  if (!v9)
  {
    *((double *)this + 18) = v8;
    *((double *)this + 19) = a3;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 14) + 48);
  v16 = a4;
  mData = a2->mBuffers[0].mData;
  v12 = *(void **)(v10 + 16);
  if (*(_BYTE *)(*(_QWORD *)&v7 + 120))
  {
    v15 = a4;
    memcpy(v12, mData, 4 * a4);
  }
  else
  {
    v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)&v7 + 40) + 144))(*(_QWORD *)(*(_QWORD *)&v7 + 40), a4);
    (*(void (**)(_QWORD, void *, _QWORD, void *, _QWORD, int *, unsigned int *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)&v7 + 40) + 32))(*(_QWORD *)(*(_QWORD *)&v7 + 40), mData, 0, v12, 0, &v16, &v15, 1, 1);
    v4 = v15;
  }
  *(_QWORD *)buf = v10;
  v20[0] = (AudioBufferList *)v10;
  if (*(_BYTE *)(*(_QWORD *)&v7 + 121))
  {
    LODWORD(v13) = v16;
    if (*(_DWORD *)(*(_QWORD *)&v7 + 20) != (*(double *)(*(_QWORD *)&v7 + 8)
                                                            * (double)v13
                                                            / **(double **)&v7))
      __assert_rtn("ResampleAndRebufferAudio", "FeatureAudioAdaptor.cpp", 93, "ConvertToResampledBlockSize(inputNumSamples) == mOutputBlockSize");
    (*(void (**)(_QWORD, uint64_t, _BYTE *, AudioBufferList **))(*(_QWORD *)&v7 + 136))(*(_QWORD *)(*(_QWORD *)&v7 + 128), v4, buf, v20);
  }
  else
  {
    BlockProcessor::Process((BlockProcessor *)(*(_QWORD *)&v7 + 48), v4, (const AudioBufferList **)buf, v20);
  }
  if (v4 <= *((_DWORD *)this + 30))
  {
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 48) + 12) = 4 * v4;
  }
  else
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v14 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_20;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FeaturesDSPWrapper.h";
      v18 = 1024;
      v19 = 143;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of processed samples exceeds allocated buffer size.", buf, 0x12u);
    }
  }
LABEL_20:
  *((_DWORD *)this + 40) = *(_DWORD *)(*((_QWORD *)this + 1) + 12) - v9;
}

void VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double SampleTime;
  double OriginalTimeSeconds;
  unsigned int v8;
  unsigned int v9;
  double v10;
  NSObject *v11;
  unsigned int v12;
  double v13;
  int v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 0;
  SampleTime = VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, (unsigned int *)buf);
  *(_DWORD *)buf = 0;
  OriginalTimeSeconds = VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(a1, a2, (unsigned int *)buf);
  v17 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    v9 = SampleTime;
    v10 = (double)SampleTime;
    do
    {
      if (v8 && VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, &v17) != v10)
      {
        if (EndpointVAD2LogScope(void)::once != -1)
          dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
        if (!EndpointVAD2LogScope(void)::scope)
        {
          v11 = MEMORY[0x1E0C81028];
LABEL_11:
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = v17;
            v13 = VectorTimeSeriesSynchronizer<float>::GetSampleTime(a1, a2, &v17);
            *(_DWORD *)buf = 136316162;
            v19 = "FeatureTimeSeries.h";
            v20 = 1024;
            v21 = 521;
            v22 = 1024;
            v23 = v12;
            v24 = 1024;
            v25 = v9;
            v26 = 1024;
            v27 = v13;
            _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronization failure! One time series has outpaced the others: timeSeriesNo %i, synchSampleTime %u, GetSampleTime(eventNo, timeSeriesNo) = %u", buf, 0x24u);
          }
          goto LABEL_13;
        }
        v11 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          goto LABEL_11;
      }
LABEL_13:
      (*(void (**)(uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)a1 + 16))(a1, a2, &v17);
      v15 = *(_QWORD *)(a3 + 24);
      if (v17 >= (unint64_t)((*(_QWORD *)(a3 + 32) - v15) >> 2))
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      *(_DWORD *)(v15 + 4 * v17) = v14;
      v16 = VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(a1, a2, &v17);
      if (OriginalTimeSeconds >= v16)
        OriginalTimeSeconds = v16;
      v8 = v17 + 1;
      v17 = v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(double *)(a3 + 56) = OriginalTimeSeconds;
  *(double *)(a3 + 48) = OriginalTimeSeconds * *(double *)(a1 + 80);
}

double VectorTimeSeriesSynchronizer<float>::GetSampleTime(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8 * *a3);
  v8 = *v7;
  v9 = *a2 - SynchronizationDelay;
  if (v9 < 0)
    v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  else
    v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  return *(double *)(v8 + 8 * v10);
}

double VectorTimeSeriesSynchronizer<float>::GetOriginalTimeSeconds(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int SynchronizationDelay;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  SynchronizationDelay = VectorTimeSeriesSynchronizer<float>::GetSynchronizationDelay(a1, *a3);
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 8 * *a3);
  v8 = *v7;
  v9 = *a2 - SynchronizationDelay;
  if (v9 < 0)
    v10 = *((_DWORD *)v7 + 2) + ~((*((_DWORD *)v7 + 2) - v9 + ~*((_DWORD *)v7 + 3)) % *((_DWORD *)v7 + 2));
  else
    v10 = (*((_DWORD *)v7 + 3) + v9) % *((_DWORD *)v7 + 2);
  return *(double *)(v8 + 8 * v10);
}

void EndpointVAD2::DoneProcessingAudio(EndpointVAD2 *this, double a2)
{
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  NSObject *v13;
  std::string *v14;
  std::string v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE __p[28];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  if (*((_DWORD *)this + 7) != 1)
  {
    std::string::__assign_external(&v15, "DoneProcessingAudio() should not be called with real time operation mode or on the real time thread.", 0x64uLL);
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v13 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_24;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "EndpointVAD2.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 434;
      *(_WORD *)&__p[18] = 2080;
      *(_QWORD *)&__p[20] = v14;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", __p, 0x1Cu);
    }
LABEL_24:
    abort();
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 12) + 236);
  std::vector<std::vector<unsigned int>>::resize(&v19, v4);
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)&v16, v4);
  v5 = *((_QWORD *)this + 12);
  memset(__p, 0, 24);
  MixViterbiProd::decodeRaw(v5, v4, (std::vector<unsigned int> *)__p);
  v6 = *(int **)__p;
  v7 = *(int **)&__p[8];
  if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
  {
    v8 = *(uint64_t **)(v5 + 184);
    v9 = *v8;
    v10 = *((_DWORD *)v8 + 3);
    do
    {
      v11 = *v6++;
      *(_DWORD *)(v9 + 4 * v10) = v11;
      v10 = (*((_DWORD *)v8 + 3) + 1) % *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 3) = v10;
    }
    while (v6 != v7);
  }
  MixViterbiProd::convertRawStateSequenceToProd(v5, __p, &v19);
  MixViterbiProd::retrieveTimeStamps(v5, 1 - v4, 0, (char **)&v16);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  v12 = v16;
  if (v20 != v19 && v17 != v16)
  {
    *(double *)__p = *((double *)this + 2) * a2;
    *(double *)&__p[8] = a2;
    EndpointVAD2::UpdateAndDispatchDecisions((uint64_t)this, &v19, (uint64_t *)&v16, (uint64_t)__p, *((_QWORD *)this + 13), *((_DWORD *)this + 6), (_BYTE *)this + 304);
  }
  if (v12)
    operator delete(v12);
  *(_QWORD *)__p = &v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1B6221EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  a22 = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void EndpointVAD2::GetInterleavedFeaturesFromQueue(float **a1, int a2, int a3, uint64_t a4)
{
  int v8;
  float *v9;
  int v10;
  int v11;
  int v12;

  std::vector<float>::resize((uint64_t)a1, (a3 * a2));
  if (a3)
  {
    v8 = 0;
    v9 = *a1;
    do
    {
      if (a2)
      {
        v10 = 0;
        do
        {
          v11 = v10;
          v12 = v8 - a3;
          *v9++ = (*(float (**)(uint64_t, int *, int *))(*(_QWORD *)a4 + 16))(a4, &v12, &v11);
          ++v10;
        }
        while (a2 != v10);
      }
      ++v8;
    }
    while (v8 != a3);
  }
}

void HRTFXTCSpatializer::~HRTFXTCSpatializer(HRTFXTCSpatializer *this)
{
  HRTFXTCSpatializer::~HRTFXTCSpatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = &off_1E69CB9E0;
  v2 = (void *)*((_QWORD *)this + 62);
  if (v2)
  {
    *((_QWORD *)this + 63) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v3);
  v4 = (void *)*((_QWORD *)this + 58);
  if (v4)
  {
    *((_QWORD *)this + 59) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 53);
  if (v5)
  {
    *((_QWORD *)this + 54) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 49);
  if (v6)
  {
    *((_QWORD *)this + 50) = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v7)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v7);
  v9 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v8 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  Spatializer::~Spatializer(this);
}

uint64_t HRTFXTCSpatializer::initialize(HRTFXTCSpatializer *this, float a2, unsigned int a3, uint64_t a4)
{
  char *v8;
  IR::DelayLine **v9;
  IR::DelayLine **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  std::string::size_type v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  IR::DelayLine **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  IR::DelayLine *v32;
  _QWORD *v33;
  const __CFDictionary *v34;
  NSObject *v35;
  const void *Value;
  const void *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  CFIndex size;
  CFStringRef v42;
  const void *v43;
  const void *v44;
  CFTypeRef v45;
  void *v46;
  void *v47;
  unsigned int v48;
  const __CFDictionary *v49;
  unsigned int v50;
  int v51;
  IR::FixedIntegerDelay *v52;
  NSObject *v53;
  std::string *v54;
  NSObject *v55;
  std::string *v56;
  int v57;
  NSObject *v58;
  const __CFDictionary *v59;
  CFTypeRef v60;
  unsigned int v61;
  const __CFDictionary *v62;
  const void *v63;
  uint64_t v64;
  _UNKNOWN **v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  BypassableIRProcessor *v69;
  int v70;
  unsigned int v71;
  int v72;
  std::string *p_p;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  int v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  CFTypeRef v82;
  std::string __p;
  char *v84;
  char *v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef cf;
  CFTypeRef v90[2];
  CFDictionaryRef theDict;
  CFTypeRef v92;
  std::string v93;
  std::string v94;
  const __CFDictionary *v95;
  const __CFDictionary *v96;
  _BYTE buf[12];
  __int16 v98;
  int v99;
  char v100;
  uint8_t v101[4];
  std::string *v102;
  __int16 v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v8 = (char *)this + 360;
  v9 = (IR::DelayLine **)*((_QWORD *)this + 45);
  v10 = (IR::DelayLine **)*((_QWORD *)this + 46);
  if (v10 != v9)
  {
    do
      std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v10, 0);
    while (v10 != v9);
    v10 = *(IR::DelayLine ***)v8;
  }
  *((_QWORD *)this + 46) = v9;
  v11 = v9 - v10;
  if (a3 <= v11)
  {
    if (a3 < v11)
    {
      v27 = &v10[a3];
      while (v9 != v27)
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v9, 0);
      *((_QWORD *)this + 46) = v27;
    }
  }
  else
  {
    v12 = a3 - v11;
    v13 = *((_QWORD *)this + 47);
    if (v12 <= (v13 - (uint64_t)v9) >> 3)
    {
      bzero(v9, 8 * v12);
      *((_QWORD *)this + 46) = &v9[v12];
    }
    else
    {
      v85 = (char *)this + 376;
      v14 = v13 - (_QWORD)v10;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)a3)
        v15 = a3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v16);
      v19 = (_QWORD *)*((_QWORD *)this + 45);
      v18 = (_QWORD *)*((_QWORD *)this + 46);
      v20 = &v17[8 * v11];
      v22 = &v17[8 * v21];
      v84 = v22;
      bzero(v20, 8 * v12);
      v23 = (std::string::size_type)&v20[8 * v12];
      __p.__r_.__value_.__r.__words[2] = v23;
      if (v18 != v19)
      {
        do
        {
          v24 = *--v18;
          *v18 = 0;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v18 != v19);
        v23 = __p.__r_.__value_.__r.__words[2];
        v22 = v84;
      }
      v25 = *(_OWORD *)v8;
      *((_QWORD *)this + 45) = v20;
      *((_QWORD *)this + 46) = v23;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v25;
      v26 = (char *)*((_QWORD *)this + 47);
      *((_QWORD *)this + 47) = v22;
      v84 = v26;
      __p.__r_.__value_.__r.__words[0] = v25;
      std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer((uint64_t)&__p);
    }
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::assign((char **)this + 49, a3, &__p);
  v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 44) + 16))(*((_QWORD *)this + 44), a4, 128, 0, *((unsigned __int8 *)this + 456), 0, 0, a2);
  if ((_DWORD)v28)
  {
    v29 = *((_QWORD *)this + 61);
    *((_QWORD *)this + 61) = 0;
    if (v29)
      std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v29);
    return v28;
  }
  (*(void (**)(const __CFDictionary **__return_ptr))(**((_QWORD **)this + 44) + 104))(&v96);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44)))
  {
    if (a3)
    {
      v30 = 0;
      do
      {
        v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44));
        v32 = (IR::DelayLine *)operator new();
        IR::DelayLine::DelayLine((uint64_t)v32, v31, 5, 1uLL, 0, a4);
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)(*(_QWORD *)v8 + v30), v32);
        v30 += 8;
      }
      while (8 * a3 != v30);
    }
    v33 = (_QWORD *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = 0;
    if (v33)
      goto LABEL_29;
  }
  else
  {
    v48 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 44) + 56))(*((_QWORD *)this + 44)) >> 2;
    if (v96)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("XTCModelingDelay");
      v49 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const*>((const __CFDictionary ***)&__p, (const void **)&v94.__r_.__value_.__l.__data_);
      v50 = vcvtas_u32_f32(*(float *)&v49 * a2);
      if (*(float *)&v49 <= 0.0)
        v50 = v48;
      if (((unint64_t)v49 & 0xFF00000000) != 0)
        v48 = v50;
    }
    v51 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 120))(*((_QWORD *)this + 44));
    v52 = (IR::FixedIntegerDelay *)operator new();
    IR::FixedIntegerDelay::FixedIntegerDelay(v52, v51 + v48, 0);
    v33 = (_QWORD *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = v52;
    if (v33)
LABEL_29:
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v33);
  }
  std::vector<float>::resize((uint64_t)this + 424, a4);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &__p);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &__p);
  *((_WORD *)this + 8) = 257;
  v34 = v96;
  if (v96)
    CFRetain(v96);
  v95 = v34;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CounteractRotationShader");
  *((_BYTE *)this + 448) = IR::IRData::getBooleanFromDictionary();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v95)
    CFRelease(v95);
  if (v96 && applesauce::CF::details::has_key<__CFString const*>(v96, CFSTR("BypassMatrix")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v35 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v93, "HRTFXTCSpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v93, &v94);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v94, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_debug_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix found in IR file", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
    }
    Value = CFDictionaryGetValue(v96, CFSTR("BypassMatrix"));
    v37 = Value;
    if (Value)
      CFRetain(Value);
    v92 = v37;
    applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v92, (applesauce::CF::DictionaryRef *)&theDict);
    if (!theDict)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v53 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v93, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v93, &v94);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v94, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &__p;
        else
          v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v54;
        _os_log_debug_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix was not loaded; invalid dictionary",
          buf,
          0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
      }
      goto LABEL_105;
    }
    std::to_string(&v94, *((_DWORD *)this + 30));
    v38 = std::string::insert(&v94, 0, "ID", 2uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &__p;
    else
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v42 = CFStringCreateWithBytes(0, (const UInt8 *)v40, size, 0x8000100u, 0);
    v90[1] = v42;
    if (!v42)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    v43 = CFDictionaryGetValue(theDict, v42);
    v44 = v43;
    if (v43)
      CFRetain(v43);
    v90[0] = v44;
    applesauce::CF::TypeRef::operator applesauce::CF::ArrayRef(v90, (applesauce::CF::ArrayRef *)&cf);
    v45 = cf;
    if (cf)
    {
      CFRetain(cf);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v94, v45);
      if (!v94.__r_.__value_.__r.__words[0])
      {
        v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v81, "Could not construct");
      }
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&__p, (const __CFArray *)v94.__r_.__value_.__l.__data_);
      if (v94.__r_.__value_.__r.__words[0])
        CFRelease(v94.__r_.__value_.__l.__data_);
      if ((_BYTE)v84)
      {
        v46 = (void *)*((_QWORD *)this + 58);
        if (v46)
        {
          *((_QWORD *)this + 59) = v46;
          operator delete(v46);
          *((_QWORD *)this + 58) = 0;
          *((_QWORD *)this + 59) = 0;
          *((_QWORD *)this + 60) = 0;
        }
        *(std::string *)((char *)this + 464) = __p;
        memset(&__p, 0, sizeof(__p));
        LODWORD(v94.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::resize((uint64_t)this + 464, a3, &v94);
        v47 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_100;
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v58 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          goto LABEL_100;
        v77 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v77, &v93);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v93, &v94);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v94;
        else
          v78 = (std::string *)v94.__r_.__value_.__r.__words[0];
        v79 = *((_DWORD *)this + 30);
        *(_DWORD *)v101 = 136315394;
        v102 = v78;
        v103 = 1024;
        v104 = v79;
        _os_log_debug_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix gain vector was not found for input channel label = %u", v101, 0x12u);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((v100 & 0x80000000) == 0)
          goto LABEL_100;
        v47 = *(void **)buf;
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v55 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        goto LABEL_100;
      std::string::basic_string[abi:ne180100]<0>(&v93, "HRTFXTCSpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v93, &v94);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v94, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &__p;
      else
        v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v57 = *((_DWORD *)this + 30);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v56;
      v98 = 1024;
      v99 = v57;
      _os_log_debug_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_DEBUG, "%s: Custom Bypass Matrix was not found for input channel label = %u", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_100;
      v47 = (void *)v93.__r_.__value_.__r.__words[0];
    }
    operator delete(v47);
LABEL_100:
    if (cf)
      CFRelease(cf);
    if (v90[0])
      CFRelease(v90[0]);
    CFRelease(v42);
LABEL_105:
    if (theDict)
      CFRelease(theDict);
    if (v92)
      CFRelease(v92);
  }
  v59 = (const __CFDictionary *)*((_QWORD *)this + 5);
  if (v59)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(&v92, v59, (const void *)kOptionalFeatureSupport, &__p);
    if (__p.__r_.__value_.__r.__words[0])
      CFRelease(__p.__r_.__value_.__l.__data_);
    v60 = v92;
    if (!v92)
      goto LABEL_139;
    v61 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>((const __CFDictionary *)v92, (const void *)kOptionalFeatureSourceExtent);
    if (v61 <= 0x100)
      LOBYTE(v61) = 0;
    if ((_BYTE)v61)
    {
      std::vector<float>::resize((uint64_t)this + 496, a4);
      IR::getPresetDataAttributes();
      v62 = (const __CFDictionary *)*((_QWORD *)this + 4);
      if (v62)
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&v94, v62, (const void *)kXTCSourceExtentIRCustomURLParamName);
        if (v94.__r_.__value_.__s.__data_[8])
        {
          v63 = (const void *)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = v94.__r_.__value_.__r.__words[0];
          if (v94.__r_.__value_.__r.__words[0])
            CFRetain(v94.__r_.__value_.__l.__data_);
          if (v63)
            CFRelease(v63);
        }
        std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v94);
      }
      v64 = operator new();
      BypassableIRProcessor::BypassableIRProcessor((BypassableIRProcessor *)v64, (const IR::IRDataAttributes *)&__p, a3);
      v65 = &off_1E69CD550;
      *(_QWORD *)v64 = &off_1E69CD550;
      *(_DWORD *)(v64 + 224) = 1;
      *(_QWORD *)(v64 + 228) = 0x100000000;
      *(_BYTE *)(v64 + 236) = 0;
      *(_QWORD *)(v64 + 240) = 0x3F80000000000000;
      v66 = *((_QWORD *)this + 61);
      *((_QWORD *)this + 61) = v64;
      if (v66)
      {
        std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v66);
        v64 = *((_QWORD *)this + 61);
        v65 = *(_UNKNOWN ***)v64;
      }
      v82 = 0;
      v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))*v65)(v64, a4, 512, 512, &v82, 0, 0, a2);
      if (v82)
        CFRelease(v82);
      if ((_DWORD)v28)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v67 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v75 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "HRTFXTCSpatializer");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v75, &v93);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v93, &v94);
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v94;
          else
            v76 = (std::string *)v94.__r_.__value_.__r.__words[0];
          *(_DWORD *)v101 = 136315394;
          v102 = v76;
          v103 = 1024;
          v104 = v28;
          _os_log_error_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_ERROR, "%s: error %d while initializing source extent processor", v101, 0x12u);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          if (v100 < 0)
            operator delete(*(void **)buf);
        }
      }
      if (v88)
        CFRelease(v88);
      if (v87)
        CFRelease(v87);
      if (v86)
        CFRelease(v86);
      if (__p.__r_.__value_.__r.__words[0])
        CFRelease(__p.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_139:
      v28 = 0;
    }
  }
  else
  {
    v60 = 0;
    v28 = 0;
    v92 = 0;
  }
  v68 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 128))(*((_QWORD *)this + 44));
  v69 = (BypassableIRProcessor *)*((_QWORD *)this + 61);
  if (v69)
    LODWORD(v69) = BypassableIRProcessor::getTailLength(v69);
  *((_DWORD *)this + 5) = (_DWORD)v69 + v68;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44)))
  {
    v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44));
    v71 = *(_DWORD *)(**(_QWORD **)v8 + 4) - 1;
    if (v71 > 6)
      v72 = 0;
    else
      v72 = dword_1B665D988[v71];
    *((_DWORD *)this + 5) += v72 + v70;
  }
  if (v60)
    CFRelease(v60);
  if (v96)
    CFRelease(v96);
  return v28;
}

void sub_1B6222D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33,const void *a34,const void *a35,const void *a36,const void *a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a43 < 0)
    operator delete(__p);
  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));
  applesauce::CF::ArrayRef::~ArrayRef(&a33);
  applesauce::CF::TypeRef::~TypeRef(&a34);
  applesauce::CF::StringRef::~StringRef(&a35);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a36);
  applesauce::CF::TypeRef::~TypeRef(&a37);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v43 - 184));
  _Unwind_Resume(a1);
}

void HRTFXTCSpatializer::reset(HRTFXTCSpatializer *this)
{
  uint64_t v2;
  IR::DelayLine **v3;
  IR::DelayLine **v4;
  IR::FixedIntegerDelay *v5;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 44) + 32))(*((_QWORD *)this + 44));
  v2 = *((_QWORD *)this + 61);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v3 = (IR::DelayLine **)*((_QWORD *)this + 45);
  v4 = (IR::DelayLine **)*((_QWORD *)this + 46);
  while (v3 != v4)
  {
    if (*v3)
      IR::DelayLine::reset(*v3);
    ++v3;
  }
  v5 = (IR::FixedIntegerDelay *)*((_QWORD *)this + 48);
  if (v5)
    IR::FixedIntegerDelay::reset(v5);
  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  *((_DWORD *)this + 113) = -1;
}

uint64_t HRTFXTCSpatializer::processAccumulating(HRTFXTCSpatializer *this, float *a2, float *const *a3, int a4, float *const *a5, int a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v12;
  unsigned __int8 v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  uint64_t (***v16)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float);
  float v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  __n128 v21;
  float v22;
  float v23;
  _QWORD *v24;
  _BYTE *v25;
  _BOOL8 v26;
  NSObject *v28;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  float v35;
  BOOL v36;
  _BOOL8 v37;
  uint64_t v38;
  __n128 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  BOOL v59;
  float v60;
  float v61;
  uint64_t v62;
  _BOOL4 v63;
  float *v64;
  float v65;
  IR::FixedIntegerDelay *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  float *v77;
  float v78;
  uint64_t v79;
  float v80;
  IR::DelayLine *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string *p_B;
  std::runtime_error *exception;
  uint64_t v94;
  CFTypeRef cf;
  std::string v99;
  std::string __Step;
  std::string __B;
  uint8_t buf[4];
  std::string *v103;
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (a6 == a4)
  {
    if (*((_BYTE *)this + 16))
    {
      LODWORD(v12) = a6;
      if (*((_QWORD *)this + 61))
      {
        v13 = atomic_load((unsigned __int8 *)this + 322);
        if ((v13 & 1) != 0)
        {
          v14 = (const __CFDictionary *)*((_QWORD *)this + 4);
          if (v14)
          {
            if (applesauce::CF::details::has_key<__CFString const*&>(v14, (const void *)kXTCSourceExtentIRCustomURLParamName))
            {
              v15 = (const __CFDictionary *)*((_QWORD *)this + 4);
              if (!v15)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                applesauce::CF::construct_error(exception);
              }
              v16 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))*((_QWORD *)this + 61);
              v17 = *((float *)this + 2);
              v18 = *((unsigned int *)this + 3);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__B, v15, (const void *)kXTCSourceExtentIRCustomURLParamName);
              cf = (CFTypeRef)__B.__r_.__value_.__r.__words[0];
              __B.__r_.__value_.__r.__words[0] = 0;
              v19 = (**v16)(v16, v18, 512, 512, &cf, 0, 0, v17);
              if (cf)
                CFRelease(cf);
              std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__B);
              if (!v19)
                *((_BYTE *)this + 320) = 1;
              atomic_store(0, (unsigned __int8 *)this + 322);
            }
          }
        }
      }
      v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 72))(*((_QWORD *)this + 44));
      if (v20 >= v12)
        v12 = v12;
      else
        v12 = v20;
      v21.n128_u32[0] = *((_DWORD *)this + 12);
      v22 = *((float *)this + 13);
      v23 = *((float *)this + 14);
      if (*((_BYTE *)this + 320) || *((_BYTE *)this + 17))
      {
        *((_BYTE *)this + 320) = 0;
        (*(void (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)this + 44) + 144))(*((_QWORD *)this + 44), 0, v21);
        v24 = (_QWORD *)((char *)this + 352);
        (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 44) + 144))(*((_QWORD *)this + 44), 1, v22);
        (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v24 + 144))(*v24, 2, v23);
        (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v24 + 144))(*v24, 5, (float)*((unsigned int *)this + 29));
        (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v24 + 144))(*v24, 7, (float)*((unsigned int *)this + 30));
        v25 = (_BYTE *)*((_QWORD *)this + 61);
        if (v25 && v25[208])
        {
          v26 = fabsf(*((float *)this + 15)) >= 0.00000011921 || fabsf(*((float *)this + 16)) >= 0.00000011921;
          (*(void (**)(_BYTE *, _BOOL8))(*(_QWORD *)v25 + 56))(v25, v26);
          v32 = *((_QWORD *)this + 61);
          if (*(_BYTE *)(v32 + 208) && *(_BYTE *)(v32 + 209))
          {
            v33 = *((_QWORD *)this + 44);
            v34.n128_f32[0] = hypotf(*((float *)this + 15), *((float *)this + 16));
            v35 = 1.0;
            if (v34.n128_f32[0] <= 1.0)
              v35 = v34.n128_f32[0];
            v36 = v34.n128_f32[0] < 0.0;
            v34.n128_u32[0] = 0;
            if (!v36)
              v34.n128_f32[0] = v35;
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v33 + 160))(v33, v34);
          }
          else
          {
            (*(void (**)(_QWORD, float))(**((_QWORD **)this + 44) + 160))(*((_QWORD *)this + 44), 0.0);
          }
          v37 = fabsf(*((float *)this + 49)) >= 0.00000011921 || fabsf(*((float *)this + 50)) >= 0.00000011921;
          SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 61), *((float *)this + 15), *((float *)this + 16));
          (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 61) + 40))(*((_QWORD *)this + 61), *((unsigned __int8 *)this + 17), v37);
        }
        else
        {
          (*(void (**)(_QWORD, float))(**((_QWORD **)this + 44) + 160))(*((_QWORD *)this + 44), 0.0);
          v31 = *((_QWORD *)this + 61);
          if (v31)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 56))(v31, 0);
        }
        v21.n128_u64[0] = *(_QWORD *)((char *)this + 60);
        *(_QWORD *)((char *)this + 196) = v21.n128_u64[0];
      }
      v38 = (*(uint64_t (**)(HRTFXTCSpatializer *, __n128))(*(_QWORD *)this + 320))(this, v21);
      v39.n128_u32[0] = *((_DWORD *)this + 14);
      v40 = *(float *)(v38 + 4);
      v41 = *(float *)(v38 + 8);
      v42 = 1.0;
      if (v41 <= v39.n128_f32[0])
        v43 = 0.0;
      else
        v43 = 1.0;
      v44 = (float)(v39.n128_f32[0] - v40) / (float)(v41 - v40);
      v45 = 1.0 - v44;
      if (v44 > 1.0)
        v45 = 0.0;
      if (v44 >= 0.0)
        v39.n128_f32[0] = v45;
      else
        v39.n128_f32[0] = 1.0;
      if (v40 < v41)
        v46 = v39.n128_f32[0];
      else
        v46 = v43;
      v47 = (float *)(*(uint64_t (**)(HRTFXTCSpatializer *, __n128))(*(_QWORD *)this + 320))(this, v39);
      v48 = *((float *)this + 14);
      v49 = *v47;
      v50 = v47[1];
      if (*v47 >= v50)
      {
        if (v49 <= v48)
          v42 = 0.0;
      }
      else
      {
        v51 = (float)(v48 - v49) / (float)(v50 - v49);
        v52 = 1.0 - v51;
        if (v51 > 1.0)
          v52 = 0.0;
        if (v51 >= 0.0)
          v42 = v52;
      }
      v53 = (float *)(*(uint64_t (**)(HRTFXTCSpatializer *))(*(_QWORD *)this + 320))(this);
      v54 = *((float *)this + 14);
      v55 = *v53;
      v56 = v53[2];
      if (v56 <= *v53)
      {
        v59 = v55 <= v54;
        v58 = 0.0;
        if (v59)
          v58 = 1.0;
      }
      else
      {
        v57 = (float)(v54 - v55) / (float)(v56 - v55);
        v58 = 1.0;
        if (v57 <= 1.0)
          v58 = v57;
        if (v57 < 0.0)
          v58 = 0.0;
      }
      v60 = (float)(v58 + (float)((float)(1.0 - v58) * v53[3])) * a8;
      if (*((_BYTE *)this + 132))
        v61 = v60;
      else
        v61 = 0.0;
      if (v42 >= 1.0 && *((float *)this + 104) >= 1.0 && *((_DWORD *)this + 113) >= *((_DWORD *)this + 5))
      {
        v63 = 0;
        v94 = 0;
      }
      else
      {
        v62 = *((_QWORD *)this + 61);
        if (v62 && *(_BYTE *)(v62 + 208))
        {
          if (*(_DWORD *)(v62 + 212))
            v63 = 1;
          else
            v63 = *(unsigned __int8 *)(v62 + 209) != 0;
        }
        else
        {
          v63 = 0;
        }
        v64 = (float *)*((_QWORD *)this + 44);
        v65 = 3000.0;
        if (*((_DWORD *)this + 81))
          v65 = -1.0;
        v64[100] = v65;
        LODWORD(v94) = (*(uint64_t (**)(float *, float *, float *const *, uint64_t, vDSP_Length, _QWORD, float))(*(_QWORD *)v64 + 40))(v64, a2, a5, v12, a7, 0, (float)(1.0 - v46) * v61);
        HIDWORD(v94) = 1;
      }
      v66 = (IR::FixedIntegerDelay *)*((_QWORD *)this + 48);
      if (v66)
      {
        IR::FixedIntegerDelay::process(v66, a2, *((float **)this + 53), a7);
        a2 = (float *)*((_QWORD *)this + 53);
      }
      if ((_DWORD)v12)
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = v46 * v61;
        v71 = 4 * v12;
        do
        {
          v72 = a5[v68];
          if (v63)
          {
            v73 = *((_QWORD *)this + 61);
            __B.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 62);
            (*(void (**)(uint64_t, float *, std::string *, uint64_t, uint64_t, vDSP_Length, _QWORD, float))(*(_QWORD *)v73 + 8))(v73, v72, &__B, v67, 1, a7, *((unsigned int *)this + 81), 1.0);
            (*(void (**)(_QWORD, float *, _QWORD, uint64_t, _QWORD, vDSP_Length))(**((_QWORD **)this + 61)
                                                                                          + 24))(*((_QWORD *)this + 61), v72, *((_QWORD *)this + 62), v67, 0, a7);
            v72 = (float *)*((_QWORD *)this + 62);
          }
          if (v46 <= 0.0 && *((float *)this + 104) <= 0.0)
          {
            *(_DWORD *)(*((_QWORD *)this + 49) + v69) = 0;
          }
          else
          {
            v74 = *((_QWORD *)this + 58);
            if (*((_QWORD *)this + 59) == v74)
              v75 = (float)((float)(1.0 - v42) * 0.70711) + (float)(v42 * *(float *)(*((_QWORD *)this + 17) + v69));
            else
              v75 = v42 * *(float *)(v74 + v69);
            v76 = v70 * v75;
            *(float *)&__B.__r_.__value_.__l.__data_ = v76;
            if (*((_BYTE *)this + 17) || (v77 = (float *)(*((_QWORD *)this + 49) + v69), v76 == *v77))
            {
              if (HIDWORD(v94))
                vDSP_vsma(a2, 1, (const float *)&__B, v72, 1, v72, 1, a7);
              else
                vDSP_vsmul(a2, 1, (const float *)&__B, v72, 1, a7);
            }
            else if ((_DWORD)a7)
            {
              LODWORD(__Step.__r_.__value_.__l.__data_) = 0;
              *(float *)&__Step.__r_.__value_.__l.__data_ = (float)(v76 - *v77) / (float)a7;
              if (HIDWORD(v94))
                vDSP_vrampmuladd(a2, 1, v77, (const float *)&__Step, v72, 1, a7);
              else
                vDSP_vrampmul(a2, 1, v77, (const float *)&__Step, v72, 1, a7);
            }
            *(_DWORD *)(*((_QWORD *)this + 49) + v69) = __B.__r_.__value_.__l.__data_;
          }
          if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44)))
          {
            v78 = (1.0 - v42)
                * (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 44) + 112))(*((_QWORD *)this + 44), v67);
            v79 = *(_QWORD *)(*((_QWORD *)this + 45) + v68 * 8);
            if (*((_DWORD *)this + 81))
              v80 = 1.0;
            else
              v80 = -0.00033333;
            *(float *)(v79 + 96) = expf(v80);
            IR::DelayLine::setDelay(v79, v78);
            v81 = *(IR::DelayLine **)(*((_QWORD *)this + 45) + v68 * 8);
            __B.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
            IR::DelayLine::process(v81, v72, (float **)&__B, a7);
          }
          vDSP_vadd(v72, 1, a3[v68], 1, a3[v68], 1, a7);
          v69 += 4;
          ++v68;
          v67 = (v67 + 1);
        }
        while (v71 != v69);
      }
      if (v63)
        (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 61) + 48))(*((_QWORD *)this + 61), a7);
      *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
      if (v46 >= 1.0 && *((float *)this + 104) >= 1.0)
      {
        v82 = *((_DWORD *)this + 113);
        v83 = *((_DWORD *)this + 5);
        if (v82 < v83)
        {
          v84 = __CFADD__(v82, (_DWORD)a7);
          v85 = v82 + a7;
          if (v84)
            v85 = -1;
          *((_DWORD *)this + 113) = v85;
          if (v85 >= v83)
          {
            v86 = *((_QWORD *)this + 61);
            if (v86)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
          }
        }
      }
      else
      {
        *((_DWORD *)this + 113) = 0;
      }
      *((float *)this + 104) = v46;
      *((_BYTE *)this + 17) = 0;
      return v94;
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v30 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v99, "HRTFXTCSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v99, &__Step);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &__Step, &__B);
        if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_B = &__B;
        else
          p_B = (std::string *)__B.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v103 = p_B;
        _os_log_debug_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
        if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__B.__r_.__value_.__l.__data_);
        if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__Step.__r_.__value_.__l.__data_);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      return 4294956429;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v28 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v99, "HRTFXTCSpatializer");
      v87 = std::string::append(&v99, "::", 2uLL);
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      __Step.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      v89 = std::string::append(&__Step, "processAccumulating", 0x13uLL);
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      __B.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      v91 = &__B;
      if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v91 = (std::string *)__B.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v103 = v91;
      v104 = 1024;
      v105 = a4;
      _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__B.__r_.__value_.__l.__data_);
      if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__Step.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    return 4294956445;
  }
}

void sub_1B6223BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  void *v29;

  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

float SpatializerWithInHeadRendering::getDryMix(SpatializerWithInHeadRendering *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float result;
  BOOL v9;

  v2 = (*(uint64_t (**)(SpatializerWithInHeadRendering *))(*(_QWORD *)this + 320))(this);
  v3 = *((float *)this + 14);
  v5 = *(float *)(v2 + 4);
  v4 = *(float *)(v2 + 8);
  if (v5 >= v4)
  {
    v9 = v4 <= v3;
    result = 0.0;
    if (!v9)
      return 1.0;
  }
  else
  {
    v6 = (float)(v3 - v5) / (float)(v4 - v5);
    v7 = 1.0 - v6;
    if (v6 > 1.0)
      v7 = 0.0;
    if (v6 >= 0.0)
      return v7;
    else
      return 1.0;
  }
  return result;
}

uint64_t HRTFXTCSpatializer::getLatencyFrames(HRTFXTCSpatializer *this)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  v2 = (unsigned int *)*((_QWORD *)this + 48);
  if (v2)
  {
    result = *v2;
  }
  else
  {
    result = *((_QWORD *)this + 44);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 45);
  if (*((uint64_t **)this + 46) != v4)
  {
    v5 = *v4;
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 4) - 1;
      if (v6 > 6)
        v7 = 0;
      else
        v7 = dword_1B665D988[v6];
      return (v7 + result);
    }
  }
  return result;
}

uint64_t SpatializerWithInHeadRendering::getInHeadParams(SpatializerWithInHeadRendering *this)
{
  return (uint64_t)this + 332;
}

BOOL applesauce::CF::details::has_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  _BOOL8 result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryContainsKey(theDict, a2) != 0;
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFURLGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

IR::DelayLine *std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](IR::DelayLine **a1, IR::DelayLine *a2)
{
  IR::DelayLine *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::DelayLine::~DelayLine(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](uint64_t a1)
{
  IR::IRDataAttributes *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E69E1688;
  v2 = (IR::IRDataAttributes *)(a1 + 8);
  v4 = (void **)(a1 + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 160);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v4);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  return MEMORY[0x1BCC95CEC](a1, 0x10E1C404CC6A523);
}

uint64_t BypassableIRProcessor::getTailLength(BypassableIRProcessor *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 208))
    return 0;
  result = **((_QWORD **)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  IR::DelayLine **v2;
  IR::DelayLine **v4;
  void *v5;

  v1 = *a1;
  v2 = (IR::DelayLine **)**a1;
  if (v2)
  {
    v4 = (IR::DelayLine **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<DSPComplex>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B6224198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MCLP_ORNLMS_BLAS::ProcessBufferList(MCLP_ORNLMS_BLAS *this, const AudioBufferList *a2, AudioBufferList *a3, char a4)
{
  unint64_t v8;
  unint64_t v9;
  void **p_mData;
  float v11;
  const float *v12;
  float v13;
  unint64_t v15;
  void **v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  void **v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  unsigned int j;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  vDSP_Length v42;
  unsigned int v43;
  float *v44;
  unsigned int v45;
  unsigned int i;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  float v51;
  const float *v52;
  float v53;
  unsigned int v54;
  float v55;
  vDSP_Length v56;
  float *v57;
  int v58;
  vDSP_Length v59;
  float *v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *mData;
  unsigned int v69;
  DSPSplitComplex __C;
  DSPSplitComplex v71;
  DSPSplitComplex __A;

  LODWORD(v8) = *((_DWORD *)this + 7);
  if ((_DWORD)v8)
  {
    v9 = 0;
    p_mData = &a2->mBuffers[0].mData;
    v11 = 0.0;
    do
    {
      v12 = (const float *)*p_mData;
      p_mData += 2;
      v11 = cblas_sdsdot(2 * *((_DWORD *)this + 8) - 2, v11, v12, 1, v12, 1);
      ++v9;
      v8 = *((unsigned int *)this + 7);
    }
    while (v9 < v8);
  }
  else
  {
    v11 = 0.0;
  }
  v13 = *((float *)this + 4);
  *((_BYTE *)this + 336) = 0;
  if (v11 <= v13 || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((_DWORD)v8)
    {
      v15 = 0;
      v16 = &a2->mBuffers[0].mData;
      v17 = &a3->mBuffers[0].mData;
      do
      {
        v19 = *v17;
        v17 += 2;
        v18 = v19;
        v20 = *v16;
        v16 += 2;
        memcpy(v18, v20, 4 * (2 * *((_DWORD *)this + 8) - 2));
        ++v15;
      }
      while (v15 < *((unsigned int *)this + 7));
    }
    return;
  }
  LODWORD(v21) = *((_DWORD *)this + 8);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = &a2->mBuffers[0].mData;
    while (1)
    {
      memcpy((void *)(*((_QWORD *)this + 15)+ 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 21) + *((_DWORD *)this + 7) * v22)), (const void *)(*((_QWORD *)this + 12)+ 8* (*((_DWORD *)this + 12) * v22 + (*((_DWORD *)this + 9) - 1) * *((_DWORD *)this + 7))), 8 * *((unsigned int *)this + 7));
      v24 = *((_DWORD *)this + 9);
      if (v24 >= 2)
        memmove((void *)(*((_QWORD *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22 + *((_DWORD *)this + 7))), (const void *)(*((_QWORD *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22)), 8 * *((_DWORD *)this + 7) * (v24 - 1));
      v25 = *((unsigned int *)this + 7);
      if ((_DWORD)v25)
        break;
      v29 = *((_DWORD *)this + 12);
      v30 = *((_QWORD *)this + 12);
LABEL_28:
      cblas_csscal(v25, *((const float *)this + 19), (void *)(v30 + 8 * (v29 * v22)), 1);
      memcpy((void *)(*((_QWORD *)this + 33) + 8 * (*((_DWORD *)this + 7) * v22)), (const void *)(*((_QWORD *)this + 12) + 8 * (*((_DWORD *)this + 12) * v22)), 8 * *((unsigned int *)this + 7));
      ++v22;
      v21 = *((unsigned int *)this + 8);
      if (v22 >= v21)
        goto LABEL_29;
    }
    v26 = 0;
    v27 = v23;
    while (v22)
    {
      v28 = *((unsigned int *)this + 8);
      v29 = *((_DWORD *)this + 12);
      v30 = *((_QWORD *)this + 12);
      if (v22 == (_DWORD)v28 - 1)
        goto LABEL_24;
      v31 = (char *)*v27 + 4 * v22;
      v32 = v31[v28 - 1];
      v33 = (_DWORD *)(v30 + 8 * (v26 + v22 * v29));
      *v33 = *v31;
LABEL_25:
      v33[1] = v32;
      ++v26;
      v27 += 2;
      if (v25 == v26)
        goto LABEL_28;
    }
    v29 = *((_DWORD *)this + 12);
    v30 = *((_QWORD *)this + 12);
LABEL_24:
    v33 = (_DWORD *)(v30 + 8 * (v26 + v22 * v29));
    *v33 = *((_DWORD *)*v27 + v22);
    v32 = 0;
    goto LABEL_25;
  }
LABEL_29:
  v34 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 22) = v34;
  if ((a4 & 1) == 0)
  {
    v42 = *((unsigned int *)this + 13);
    v43 = v42 * v34;
    v44 = (float *)(*((_QWORD *)this + 15) + 8 * (v42 * v34) + 4);
    __A.realp = (float *)(*((_QWORD *)this + 15) + 8 * v43);
    __A.imagp = v44;
    vDSP_zvmags(&__A, 2, (float *)(*((_QWORD *)this + 18) + 4 * v43), 1, v42);
    v45 = *((_DWORD *)this + 10);
    if (v45)
    {
      for (i = 0; i < v45; ++i)
      {
        v47 = *((_DWORD *)this + 21);
        v48 = v47 - i;
        if ((int)(v47 - i) < 0)
          v48 = v47 + v45 + (int)i / (int)v45 * v45 - i;
        if (*((_DWORD *)this + 8))
        {
          v49 = 0;
          v50 = v48 % (int)v45;
          do
          {
            cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((_QWORD *)this + 21) + 8 * (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v49)), *((_DWORD *)this + 7), (const void *)(*((_QWORD *)this + 15) + 8 * (*((_DWORD *)this + 7) * v49 + *((_DWORD *)this + 13) * v50)), 1, (char *)this + 68, (void *)(*((_QWORD *)this + 33) + 8 * *((_DWORD *)this + 7) * v49), 1);
            v51 = *((float *)this + 16);
            v52 = (const float *)(*((_QWORD *)this + 33) + 8 * *((_DWORD *)this + 7) * v49);
            v53 = cblas_sdot(*((_DWORD *)this + 11), v52, 1, v52, 1);
            v54 = *((_DWORD *)this + 7);
            v55 = v51 / fmaxf(v53 / (float)v54, *((float *)this + 4));
            catlas_saxpby(v54, v55, (const float *)(*((_QWORD *)this + 18) + 4 * (v54 * v49 + *((_DWORD *)this + 13) * v50)), 1, *((const float *)this + 5), (float *)(*((_QWORD *)this + 24) + 4 * (v54 * v49 + *((_DWORD *)this + 13) * i)), 1);
            v56 = *((unsigned int *)this + 7);
            v57 = (float *)(*((_QWORD *)this + 24) + 4 * (*((_DWORD *)this + 13) * i + (_DWORD)v56 * v49));
            vDSP_vthr(v57, 1, (const float *)this + 4, v57, 1, v56);
            v58 = *((_DWORD *)this + 13);
            v59 = *((unsigned int *)this + 7);
            v71.realp = (float *)(*((_QWORD *)this + 15) + 8 * (v59 * v49 + v58 * v50));
            v71.imagp = v71.realp + 1;
            v60 = (float *)(*((_QWORD *)this + 39) + 4);
            __C.realp = (float *)*((_QWORD *)this + 39);
            __C.imagp = v60;
            vDSP_zrvdiv(&v71, 2, (const float *)(*((_QWORD *)this + 24) + 4 * ((_DWORD)v59 * v49 + v58 * i)), 1, &__C, 2, v59);
            cblas_csscal(*((_DWORD *)this + 7), -v55, *((void **)this + 39), 1);
            cblas_cgerc(CblasRowMajor, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((_QWORD *)this + 33) + 8 * *((_DWORD *)this + 7) * v49), 1, *((const void **)this + 39), 1, (void *)(*((_QWORD *)this + 21) + 8 * (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v49)), *((_DWORD *)this + 7));
            v61 = cblas_sdsdot(*((_DWORD *)this + 11), *((const float *)this + 17), *((const float **)this + 39), 1, (const float *)(*((_QWORD *)this + 15)+ 8 * (*((_DWORD *)this + 13) * v50 + *((_DWORD *)this + 7) * v49)), 1);
            cblas_csscal(*((_DWORD *)this + 7), v61, (void *)(*((_QWORD *)this + 33) + 8 * *((_DWORD *)this + 7) * v49++), 1);
          }
          while (v49 < *((_DWORD *)this + 8));
          v45 = *((_DWORD *)this + 10);
        }
      }
    }
    v41 = (*((_DWORD *)this + 21) + 1) % v45;
    goto LABEL_52;
  }
  v35 = *((_DWORD *)this + 10);
  if (!v35)
    goto LABEL_41;
  for (j = 0; j < v35; ++j)
  {
    v37 = *((_DWORD *)this + 21);
    v38 = v37 - j;
    if ((int)(v37 - j) < 0)
    {
      v38 = v37 + v35 + (int)j / (int)v35 * v35 - j;
      if (!(_DWORD)v21)
        continue;
    }
    else if (!(_DWORD)v21)
    {
      continue;
    }
    v39 = 0;
    v40 = v38 % (int)v35;
    do
    {
      cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((_QWORD *)this + 21) + 8 * (*((_DWORD *)this + 15) * j + *((_DWORD *)this + 14) * v39)), *((_DWORD *)this + 7), (const void *)(*((_QWORD *)this + 15) + 8 * (*((_DWORD *)this + 7) * v39 + *((_DWORD *)this + 13) * v40)), 1, (char *)this + 68, (void *)(*((_QWORD *)this + 33) + 8 * *((_DWORD *)this + 7) * v39), 1);
      ++v39;
      LODWORD(v21) = *((_DWORD *)this + 8);
    }
    while (v39 < v21);
    v35 = *((_DWORD *)this + 10);
  }
  v34 = *((_DWORD *)this + 21);
LABEL_41:
  v41 = (v34 + 1) % v35;
LABEL_52:
  *((_DWORD *)this + 21) = v41;
  *((_BYTE *)this + 336) = 1;
  cblas_csscal(*((_DWORD *)this + 13), *((const float *)this + 20), *((void **)this + 33), 1);
  v62 = *((unsigned int *)this + 7);
  if ((_DWORD)v62)
  {
    v63 = 0;
    v64 = *((unsigned int *)this + 8);
    v65 = 4 * v64;
    do
    {
      if ((_DWORD)v64)
      {
        v66 = 0;
        v67 = *((_QWORD *)this + 33);
        mData = (char *)a3->mBuffers[v63].mData;
        v69 = v63;
        do
        {
          *(_DWORD *)&mData[v66] = *(_DWORD *)(v67 + 8 * v69);
          if (v66 && 4 * (v64 - 1) != v66)
            *(_DWORD *)&mData[v65 - 4 + v66] = *(_DWORD *)(v67 + 8 * v69 + 4);
          v66 += 4;
          v69 += v62;
        }
        while (v65 != v66);
      }
      ++v63;
    }
    while (v63 != v62);
  }
}

void MCLP_ORNLMS_BLAS::ProcessEchoBufferList(MCLP_ORNLMS_BLAS *this, const AudioBufferList *a2, AudioBufferList *a3)
{
  unint64_t v5;
  unint64_t v6;
  void **p_mData;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int i;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *mData;
  unsigned int v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  void *v36;
  void *v37;

  if (*((_BYTE *)this + 336))
  {
    LODWORD(v5) = *((_DWORD *)this + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      p_mData = &a2->mBuffers[0].mData;
      while (1)
      {
        memcpy((void *)(*((_QWORD *)this + 30)+ 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 22) + *((_DWORD *)this + 7) * v6)), (const void *)(*((_QWORD *)this + 27)+ 8* (*((_DWORD *)this + 12) * v6 + (*((_DWORD *)this + 9) - 1)* *((_DWORD *)this + 7))), 8 * *((unsigned int *)this + 7));
        v8 = *((_DWORD *)this + 9);
        if (v8 >= 2)
          memmove((void *)(*((_QWORD *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6 + *((_DWORD *)this + 7))), (const void *)(*((_QWORD *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6)), 8 * *((_DWORD *)this + 7) * (v8 - 1));
        v9 = *((unsigned int *)this + 7);
        if ((_DWORD)v9)
          break;
        v13 = *((_DWORD *)this + 12);
        v14 = *((_QWORD *)this + 27);
LABEL_16:
        cblas_csscal(v9, *((const float *)this + 19), (void *)(v14 + 8 * (v13 * v6)), 1);
        memcpy((void *)(*((_QWORD *)this + 36) + 8 * (*((_DWORD *)this + 7) * v6)), (const void *)(*((_QWORD *)this + 27) + 8 * (*((_DWORD *)this + 12) * v6)), 8 * *((unsigned int *)this + 7));
        ++v6;
        v5 = *((unsigned int *)this + 8);
        if (v6 >= v5)
          goto LABEL_17;
      }
      v10 = 0;
      v11 = p_mData;
      while (v6)
      {
        v12 = *((unsigned int *)this + 8);
        v13 = *((_DWORD *)this + 12);
        v14 = *((_QWORD *)this + 27);
        if (v6 == (_DWORD)v12 - 1)
          goto LABEL_12;
        v15 = (char *)*v11 + 4 * v6;
        v16 = v15[v12 - 1];
        v17 = (_DWORD *)(v14 + 8 * (v10 + v6 * v13));
        *v17 = *v15;
LABEL_13:
        v17[1] = v16;
        ++v10;
        v11 += 2;
        if (v9 == v10)
          goto LABEL_16;
      }
      v13 = *((_DWORD *)this + 12);
      v14 = *((_QWORD *)this + 27);
LABEL_12:
      v17 = (_DWORD *)(v14 + 8 * (v10 + v6 * v13));
      *v17 = *((_DWORD *)*v11 + v6);
      v16 = 0;
      goto LABEL_13;
    }
LABEL_17:
    v18 = *((_DWORD *)this + 10);
    if (v18)
    {
      for (i = 0; i < v18; ++i)
      {
        v20 = *((_DWORD *)this + 22);
        v21 = v20 - i;
        if ((int)(v20 - i) < 0)
        {
          v21 = v20 + v18 + (int)i / (int)v18 * v18 - i;
          if ((_DWORD)v5)
          {
LABEL_23:
            v22 = 0;
            v23 = v21 % (int)v18;
            do
            {
              cblas_cgemv(CblasRowMajor, CblasNoTrans, *((_DWORD *)this + 7), *((_DWORD *)this + 7), (char *)this + 68, (const void *)(*((_QWORD *)this + 21) + 8* (*((_DWORD *)this + 15) * i + *((_DWORD *)this + 14) * v22)), *((_DWORD *)this + 7), (const void *)(*((_QWORD *)this + 30)+ 8 * (*((_DWORD *)this + 7) * v22 + *((_DWORD *)this + 13) * v23)), 1, (char *)this + 68, (void *)(*((_QWORD *)this + 36) + 8 * *((_DWORD *)this + 7) * v22), 1);
              ++v22;
              LODWORD(v5) = *((_DWORD *)this + 8);
            }
            while (v22 < v5);
            v18 = *((_DWORD *)this + 10);
          }
        }
        else if ((_DWORD)v5)
        {
          goto LABEL_23;
        }
      }
    }
    cblas_csscal(*((_DWORD *)this + 13), *((const float *)this + 20), *((void **)this + 36), 1);
    v24 = *((unsigned int *)this + 7);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = *((unsigned int *)this + 8);
      v27 = 4 * v26;
      do
      {
        if ((_DWORD)v26)
        {
          v28 = 0;
          v29 = *((_QWORD *)this + 36);
          mData = (char *)a3->mBuffers[v25].mData;
          v31 = v25;
          do
          {
            *(_DWORD *)&mData[v28] = *(_DWORD *)(v29 + 8 * v31);
            if (v28)
            {
              if (4 * (v26 - 1) != v28)
                *(_DWORD *)&mData[v27 - 4 + v28] = *(_DWORD *)(v29 + 8 * v31 + 4);
            }
            v28 += 4;
            v31 += v24;
          }
          while (v27 != v28);
        }
        ++v25;
      }
      while (v25 != v24);
    }
  }
  else if (*((_DWORD *)this + 7))
  {
    v32 = 0;
    v33 = &a2->mBuffers[0].mData;
    v34 = &a3->mBuffers[0].mData;
    do
    {
      v36 = *v34;
      v34 += 2;
      v35 = v36;
      v37 = *v33;
      v33 += 2;
      memcpy(v35, v37, 4 * (2 * *((_DWORD *)this + 8) - 2));
      ++v32;
    }
    while (v32 < *((unsigned int *)this + 7));
  }
}

double std::operator*[abi:ne180100]<double>(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

uint64_t AUSM::Messenger::Messenger(AUSM::Messenger *this)
{
  AUSM::Messenger::instance(void)::msgr = 0;
  qword_1EF1358E8 = 0;
  return caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)&unk_1EF1358F0);
}

void sub_1B6224D80(_Unwind_Exception *exception_object)
{
  if (*((_QWORD *)&AUSM::Messenger::instance(void)::msgr + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&AUSM::Messenger::instance(void)::msgr + 1));
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::ParametricProcessor(ParametricProcessor *this, const ParametricProcessor::pars *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t FilterbandCenterFrequencies;
  char *v23;
  CLiteMatrix *v24;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  float v29;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  char *v40;
  _OWORD *v41;
  void *v42;
  HOA *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  CLiteMatrix *v57;
  float v58;
  void *v59;
  void *v60;
  unint64_t v61;
  int v62;
  int v63;
  float *v64;
  unint64_t v65;
  int v66;
  int *v67;
  int v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  const void *v82;
  IR::IRData *v83;
  int v84;
  uint64_t v85;
  vDSP_Length v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  IR::IRData *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  float v97;
  float v98;
  _DWORD *v99;
  double v100;
  _QWORD *v101;
  uint64_t v102;
  char v103;
  char v104;
  float v105;
  float v106;
  IR::DelayLine *v107;
  IR::DelayLine *v108;
  unint64_t v109;
  char v110;
  char v111;
  unint64_t v112;
  int v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  NSObject *v120;
  CLiteMatrix *v121;
  void *v122;
  CLiteMatrix *v123;
  _QWORD *v124;
  void *v125;
  unint64_t v126;
  float v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  float *v134;
  float v135;
  float *v136;
  float v137;
  float *v138;
  float v139;
  float *v140;
  unint64_t v141;
  unint64_t v142;
  NSObject *v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  const void *v147;
  IR::IRData *v148;
  int NumFiltersPerSpatialPoint;
  int FilterLength;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  char v164;
  int v165;
  char v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  unint64_t v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  NSObject *v174;
  _QWORD *v175;
  void *v176;
  NSObject *v177;
  _DWORD *v178;
  _BYTE *v179;
  _DWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unsigned int v183;
  unint64_t v184;
  unsigned int v185;
  unsigned int *v187;
  unint64_t v188;
  _DWORD *v189;
  unsigned int *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  int v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  CLiteMatrix *v208;
  float v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  unint64_t v218;
  char v219;
  char v220;
  float v221;
  float v222;
  float *v223;
  float v224;
  float v225;
  float *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  unint64_t v231;
  float v232;
  float *v233;
  float v234;
  float *v235;
  float v236;
  float *v237;
  float v238;
  float *v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  int *v245;
  int v246;
  _DWORD *v247;
  int v248;
  int *v249;
  int v250;
  _DWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  char v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t j;
  float v261;
  float *v262;
  float v263;
  unint64_t v264;
  NSObject *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  CLiteMatrix *v276;
  unint64_t v277;
  char *v278;
  uint64_t v279;
  char *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  int v289;
  unint64_t v290;
  int v291;
  unint64_t v292;
  CLiteMatrix *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  char v298;
  char v299;
  int v300;
  int *v301;
  int v302;
  _DWORD *v303;
  unint64_t v304;
  unint64_t v305;
  char v306;
  char v307;
  unint64_t v308;
  int v309;
  int *v310;
  int v311;
  _DWORD *v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  void *v318;
  _QWORD *v319;
  CLiteMatrix *v320;
  uint64_t v321;
  char *v322;
  void *v323;
  void *v324;
  _QWORD *v325;
  void *v326;
  _OWORD *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  _QWORD *v332;
  void *v333;
  _QWORD *v334;
  _OWORD *v335;
  void *v336;
  void *v337;
  _OWORD *v338;
  void *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  NSObject *v350;
  void *v351;
  void *v352;
  _QWORD *v353;
  _OWORD *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  _OWORD *v359;
  void *v360;
  void *v361;
  void *v362;
  unint64_t v363;
  void *v364;
  _OWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t k;
  void *v369;
  void *v370;
  void *v371;
  _OWORD *v372;
  void *v373;
  _OWORD *v374;
  void *v375;
  void *v376;
  void *v377;
  _OWORD *v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  _QWORD *v383;
  void *v384;
  void *v385;
  _QWORD *v386;
  void *v387;
  void *v388;
  _OWORD *v389;
  _QWORD *v390;
  void *v391;
  void *v392;
  void *v393;
  _QWORD *v394;
  void *v395;
  void *v396;
  void *v397;
  _QWORD *v398;
  void *v399;
  void *v400;
  _QWORD *v401;
  void *v402;
  void *v403;
  void *v404;
  void *v405;
  _QWORD *v406;
  void *v407;
  void *v408;
  _QWORD *v409;
  void *v410;
  void *v411;
  _QWORD *v412;
  void *v413;
  void *v414;
  void *v415;
  void *v416;
  _QWORD *v417;
  void *v418;
  void *v419;
  _QWORD *v420;
  unint64_t v421;
  void *v422;
  void *v423;
  _QWORD *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  _QWORD *v431;
  void *v432;
  void *v433;
  void *v434;
  int64_t v435;
  int64_t v436;
  float *v437;
  float v438;
  float v439;
  void *v440;
  void *v441;
  _QWORD *v442;
  void *v443;
  void *v444;
  void *v445;
  void *v446;
  _QWORD *v447;
  void *v448;
  void *v449;
  _QWORD *v450;
  void *v451;
  void *v452;
  _QWORD *v453;
  void *v454;
  void *v455;
  void *v456;
  void *v457;
  void *v458;
  void *v459;
  void *v460;
  _QWORD *v461;
  void *v462;
  void *v463;
  _QWORD *v464;
  void *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  void *v470;
  _QWORD *v471;
  void *v472;
  void *v473;
  _QWORD *v474;
  NSObject *v475;
  double v476;
  double v477;
  double v478;
  unint64_t v479;
  CLiteMatrix *v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  char v485;
  char v486;
  int v487;
  int *v488;
  int v489;
  _DWORD *v490;
  unint64_t v491;
  unint64_t v492;
  char v493;
  char v494;
  unint64_t v495;
  int v496;
  int *v497;
  int v498;
  _DWORD *v499;
  unint64_t v500;
  unint64_t v501;
  char v502;
  char v503;
  float v504;
  float *v505;
  double v506;
  float *v507;
  float v508;
  float v509;
  float *v510;
  float v511;
  float v512;
  float v513;
  float *v514;
  double v515;
  float *v516;
  float v517;
  float v518;
  float *v519;
  float *v520;
  float v521;
  float v522;
  float v523;
  CLiteMatrix *v524;
  unint64_t v525;
  unint64_t v526;
  char v527;
  char v528;
  unint64_t v529;
  int v530;
  int *v531;
  int v532;
  _DWORD *v533;
  std::__shared_weak_count *v534;
  uint64_t *v535;
  uint64_t *v536;
  uint64_t *v537;
  uint64_t *v538;
  void **v539;
  void **v540;
  char *v541;
  _OWORD *v542;
  _OWORD *v543;
  char *v544;
  void **v545;
  void **v546;
  void **v547;
  _QWORD *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  char *v554;
  _QWORD *v555;
  char *v556;
  uint64_t *v557;
  uint64_t *v558;
  VBAP **v559;
  uint64_t *v560;
  _QWORD *v561;
  char *v562;
  char *v563;
  uint64_t *v564;
  void **v565;
  _QWORD *v566;
  char *v567;
  _QWORD *v568;
  std::__shared_weak_count *v569;
  uint64_t v570;
  uint64_t *v571;
  CLiteMatrix *v572;
  CLiteMatrix *v573;
  unint64_t v574;
  char *v575;
  unint64_t v576;
  uint64_t v577;
  CLiteMatrix *v578;
  IR::IRData *v579;
  IR::IRData *v580;
  IR::IRData *v581;
  ausdk::AUChannelLayout *v582;
  ausdk::AUChannelLayout *v583;
  ausdk::AUChannelLayout *v584;
  CLiteMatrix *v585;
  ausdk::AUChannelLayout *v586;
  _QWORD *v587;
  char v588;
  IR::IRData *v589[2];
  uint64_t *v590;
  char v591[8];
  int v592;
  _BYTE v593[16];
  void *v594;
  void *v595;
  __int128 v596;
  uint64_t v597;
  _BYTE v598[16];
  void *v599;
  void *v600;
  void **v601[2];
  void *v602;
  void *v603;
  __int128 v604;
  void *v605;
  void *v606;
  void *v607[2];
  void *v608;
  void *v609;
  void *v610[2];
  uint64_t v611;
  void **v612;
  CFTypeRef cf[2];
  void *v614;
  void *v615;
  CFTypeRef v616[2];
  void *v617;
  void *v618;
  void *v619[2];
  void *v620;
  void *v621;
  IR::IRData *v622[2];
  void *v623;
  void *v624;
  AudioChannelLayout v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  void *v643[4];
  void *v644[2];
  char *v645;
  void *__p[2];
  void *v647;
  void *v648;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v649;
  float *v650[2];
  void *v651;
  void *v652;
  uint64_t v653;

  MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v5 = v4;
  v653 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)v4 = 0;
  *(_QWORD *)(v4 + 4) = 0xBF800000467A0000;
  *(_DWORD *)(v4 + 12) = 1195081728;
  *(_QWORD *)(v4 + 16) = 0x8000000800;
  *(_WORD *)(v4 + 24) = 257;
  *(_OWORD *)(v4 + 32) = xmmword_1B66A08D0;
  *(_BYTE *)(v4 + 48) = 1;
  *(_OWORD *)(v4 + 52) = xmmword_1B66A08E0;
  *(_QWORD *)(v4 + 68) = 3;
  *(_DWORD *)(v4 + 76) = 3;
  *(_OWORD *)(v4 + 80) = xmmword_1B66A08F0;
  *(_OWORD *)(v4 + 96) = xmmword_1B66A0900;
  *(_DWORD *)(v4 + 112) = 30;
  *(_QWORD *)(v4 + 116) = 0x3E4CCCCD3F800000;
  *(_DWORD *)(v4 + 124) = 1056964608;
  *(_QWORD *)(v4 + 128) = 0x100000001;
  *(_DWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 160) = xmmword_1B66A0910;
  v6 = (_OWORD *)(v4 + 160);
  *(_QWORD *)(v4 + 176) = 0xA00000003;
  *(_DWORD *)(v4 + 184) = 2;
  *(_BYTE *)(v4 + 188) = 1;
  *(_DWORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 196) = xmmword_1B66A0920;
  *(_BYTE *)(v4 + 212) = 0;
  *(_QWORD *)(v4 + 216) = 0x100000000;
  v582 = (ausdk::AUChannelLayout *)(v4 + 224);
  std::vector<AudioChannelLayout>::vector((_QWORD *)(v4 + 224), 1uLL);
  v7 = *(_QWORD *)(v5 + 224);
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_DWORD *)(v5 + 388) = 0;
  *(_DWORD *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_BYTE *)(v5 + 384) = 0;
  bzero((void *)(v5 + 400), 0xEF0uLL);
  v579 = (IR::IRData *)(v5 + 4248);
  bzero((void *)(v5 + 4248), 0x10F8uLL);
  if (getParametricProcessorLog(void)::onceToken != -1)
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
  v8 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v649.__x_[0] = 136315138;
    *(_QWORD *)&v649.__x_[1] = "ParametricProcessor";
    _os_log_debug_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "Entering %s", (uint8_t *)&v649, 0xCu);
  }
  *(_OWORD *)v5 = *(_OWORD *)v3;
  v9 = *(_OWORD *)(v3 + 16);
  v10 = *(_OWORD *)(v3 + 32);
  v11 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v5 + 64) = v11;
  *(_OWORD *)(v5 + 16) = v9;
  *(_OWORD *)(v5 + 32) = v10;
  v12 = *(_OWORD *)(v3 + 80);
  v13 = *(_OWORD *)(v3 + 96);
  v14 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v5 + 124) = *(_OWORD *)(v3 + 124);
  *(_OWORD *)(v5 + 96) = v13;
  *(_OWORD *)(v5 + 112) = v14;
  *(_OWORD *)(v5 + 80) = v12;
  v15 = *(const void **)(v5 + 144);
  v16 = *(const void **)(v3 + 144);
  *(_QWORD *)(v5 + 144) = v16;
  if (v16)
    CFRetain(v16);
  if (v15)
    CFRelease(v15);
  v17 = *(const void **)(v5 + 152);
  v18 = *(const void **)(v3 + 152);
  *(_QWORD *)(v5 + 152) = v18;
  if (v18)
    CFRetain(v18);
  if (v17)
    CFRelease(v17);
  v559 = (VBAP **)(v5 + 440);
  v565 = (void **)(v5 + 4720);
  v540 = (void **)(v5 + 4992);
  v547 = (void **)(v5 + 5200);
  v546 = (void **)(v5 + 5248);
  v539 = (void **)(v5 + 5280);
  v545 = (void **)(v5 + 6928);
  v19 = *(_OWORD *)(v3 + 160);
  v20 = *(_OWORD *)(v3 + 176);
  v21 = *(_OWORD *)(v3 + 208);
  v6[2] = *(_OWORD *)(v3 + 192);
  v6[3] = v21;
  *v6 = v19;
  v6[1] = v20;
  v538 = (uint64_t *)v6 + 807;
  v537 = (uint64_t *)v6 + 813;
  v548 = (_QWORD *)v6 + 505;
  v549 = (char *)v6 + 6408;
  v536 = (uint64_t *)v6 + 829;
  v564 = (uint64_t *)v6 + 835;
  v535 = (uint64_t *)v6 + 843;
  v562 = (char *)v6 + 7288;
  v560 = (uint64_t *)v6 + 917;
  v556 = (char *)v6 + 7896;
  v557 = (uint64_t *)v6 + 1015;
  v544 = (char *)v6 + 4664;
  v541 = (char *)v6 + 4856;
  v552 = (char *)v6 + 5064;
  v553 = (char *)v6 + 4808;
  v558 = (uint64_t *)v6 + 1021;
  v550 = (char *)v6 + 4936;
  v551 = (char *)v6 + 8376;
  ausdk::AUChannelLayout::CopyStorage(v582, (const ausdk::AUChannelLayout *)(v3 + 224));
  MatrixDecompositions::setMandN((MatrixDecompositions *)(v5 + 2488), *(_DWORD *)(v5 + 36), *(_DWORD *)(v5 + 36));
  v563 = (char *)v6 + 4264;
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v591, *(_DWORD *)(v5 + 36), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 20), *(_DWORD *)(v5 + 16) / *(_DWORD *)(v5 + 20), *(_BYTE *)(v5 + 24), *(unsigned __int8 *)(v5 + 25));
  FilterbandCenterFrequencies = afSTFTWrapper::getFilterbandCenterFrequencies((afSTFTWrapper *)v591, *(float *)(v5 + 12));
  if (v5 + 3088 != FilterbandCenterFrequencies)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 3088), *(char **)FilterbandCenterFrequencies, *(_QWORD *)(FilterbandCenterFrequencies + 8), (uint64_t)(*(_QWORD *)(FilterbandCenterFrequencies + 8) - *(_QWORD *)FilterbandCenterFrequencies) >> 2);
  *(_DWORD *)(v5 + 28) = v592;
  std::vector<float>::vector(&v625, *(int *)(v5 + 40));
  std::vector<float>::vector(__p, (uint64_t)(*(_QWORD *)(v5 + 3096) - *(_QWORD *)(v5 + 3088)) >> 2);
  std::vector<std::vector<float>>::vector(v622, *(int *)(v5 + 40));
  v561 = (_QWORD *)v6 + 947;
  v554 = (char *)v6 + 6968;
  v566 = (_QWORD *)v6 + 767;
  v567 = (char *)v6 + 5816;
  v568 = (_QWORD *)v6 + 689;
  v575 = (char *)v6 + 5192;
  v23 = (char *)v6 + 4344;
  v24 = (CLiteMatrix *)(v5 + 4448);
  v543 = (_OWORD *)(v5 + 5040);
  v542 = (_OWORD *)(v5 + 5080);
  v590 = (uint64_t *)v6 + 461;
  v571 = (uint64_t *)v6 + 401;
  v555 = (_QWORD *)v6 + 363;
  v25 = 5489;
  v649.__x_[0] = 5489;
  for (i = 1; i != 624; ++i)
  {
    v25 = i + 1812433253 * (v25 ^ (v25 >> 30));
    v649.__x_[i] = v25;
  }
  v649.__i_ = 0;
  LODWORD(v27) = *(_DWORD *)(v5 + 40);
  if ((int)v27 >= 1)
  {
    v28 = 0;
    do
    {
      v29 = (float)(int)v28 / (float)(int)v27;
      *(float *)(*(_QWORD *)&v625.mChannelLayoutTag + 4 * v28) = v29;
      v30 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v649);
      v31 = *(float **)(v5 + 3088);
      v32 = *(_QWORD *)(v5 + 3096) - (_QWORD)v31;
      if (v32)
      {
        v33 = v32 >> 2;
        v34 = (float)*(unsigned int *)(v5 + 168);
        v35 = (float)*(unsigned int *)(v5 + 160);
        v36 = (float)*(unsigned int *)(v5 + 172) * 1000.0;
        v37 = (float *)__p[0];
        if (v33 <= 1)
          v33 = 1;
        do
        {
          v38 = *v31++;
          v39 = v36 / (float)(v38 + 0.00000011921);
          if (v39 >= v35)
            v39 = v35;
          if (v39 <= v34)
            v39 = v34;
          *v37++ = roundf((float)(v29 + (float)((float)((float)v30 * 2.3283e-10) + 0.0)) * v39);
          --v33;
        }
        while (v33);
      }
      v40 = (char *)v622[0] + 24 * v28;
      if (v40 != (char *)__p)
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v40, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      ++v28;
      v27 = *(int *)(v5 + 40);
    }
    while (v28 < v27);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v625.mChannelLayoutTag)
  {
    *(_QWORD *)&v625.mNumberChannelDescriptions = *(_QWORD *)&v625.mChannelLayoutTag;
    operator delete(*(void **)&v625.mChannelLayoutTag);
  }
  std::vector<std::vector<float>>::__vdeallocate((uint64_t *)(v5 + 5312));
  *(_OWORD *)(v5 + 5312) = *(_OWORD *)v622;
  *(_QWORD *)(v5 + 5328) = v623;
  v623 = 0;
  v622[1] = 0;
  v622[0] = 0;
  *(_QWORD *)v649.__x_ = v622;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v649);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32) + *(int *)(v5 + 32) * (uint64_t)*(int *)(v5 + 184));
  *(_OWORD *)(v5 + 5336) = *(_OWORD *)v649.__x_;
  v41 = v575;
  v42 = *(void **)v575;
  if (*(_QWORD *)v575)
  {
    *(_QWORD *)(v5 + 5360) = v42;
    operator delete(v42);
    v41 = v575;
    *(_QWORD *)v575 = 0;
    *((_QWORD *)v575 + 1) = 0;
    *((_QWORD *)v575 + 2) = 0;
  }
  *v41 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5368) = *(_QWORD *)&v649.__x_[8];
  v43 = (HOA *)operator new();
  HOA::HOA((uint64_t)v43, *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 216));
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)(v5 + 424), v43);
  std::vector<float>::vector(&v649, *(int *)(v5 + 60));
  v44 = *(void **)v563;
  if (*(_QWORD *)v563)
  {
    *(_QWORD *)(v5 + 4432) = v44;
    operator delete(v44);
    *(_QWORD *)v563 = 0;
    *((_QWORD *)v563 + 1) = 0;
    *((_QWORD *)v563 + 2) = 0;
  }
  *(_OWORD *)v563 = *(_OWORD *)v649.__x_;
  *(_QWORD *)(v5 + 4440) = *(_QWORD *)&v649.__x_[4];
  LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 1, *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 4488) = *(_OWORD *)v649.__x_;
  v45 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v5 + 4512) = v45;
    operator delete(v45);
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = 0;
  }
  *(_OWORD *)v23 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 4520) = *(_QWORD *)&v649.__x_[8];
  LiteMatrix<float>::LiteMatrix((uint64_t)&v649, *(int *)(v5 + 60), 1);
  *(_OWORD *)(v5 + 4528) = *(_OWORD *)v649.__x_;
  v46 = *(void **)(v5 + 4544);
  if (v46)
  {
    *(_QWORD *)(v5 + 4552) = v46;
    operator delete(v46);
    *(_QWORD *)(v5 + 4544) = 0;
    *(_QWORD *)(v5 + 4552) = 0;
    *(_QWORD *)(v5 + 4560) = 0;
  }
  *(_OWORD *)(v5 + 4544) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 4560) = *(_QWORD *)&v649.__x_[8];
  LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 1, 1);
  *(_OWORD *)(v5 + 4568) = *(_OWORD *)v649.__x_;
  v49 = (void *)*((_QWORD *)v23 + 10);
  v48 = v23 + 80;
  v47 = v49;
  if (v49)
  {
    *(_QWORD *)(v5 + 4592) = v47;
    operator delete(v47);
    *v48 = 0;
    v48[1] = 0;
    v48[2] = 0;
  }
  *(_OWORD *)v48 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 4600) = *(_QWORD *)&v649.__x_[8];
  v50 = *(_DWORD *)(v5 + 128);
  if (v50 <= 5 && ((1 << v50) & 0x29) != 0)
  {
    v51 = (_QWORD *)(v5 + 3112);
    v52 = (_QWORD *)(v5 + 3136);
    v53 = (unint64_t *)(v5 + 3208);
    ParametricProcessor::InitializeGridsAndAmbisonicEncoder(v5, (_OWORD **)(v5 + 3112), (float **)(v5 + 3136), (HOA *)*(unsigned int *)(v5 + 100), (float **)(v5 + 3160), (_QWORD *)(v5 + 3440), (unint64_t *)(v5 + 3208));
    v54 = *(_QWORD *)(v5 + 3208);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
    std::vector<CLiteMatrix>::vector(&v625, v54, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 3344));
    *(_OWORD *)(v5 + 3344) = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 3360) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    if (*v53)
    {
      v55 = 0;
      v56 = 0;
      do
      {
        LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 3, 3);
        RotationUtilities::yawPitchRoll2RotationMatrixFOA((RotationUtilities *)(*(_QWORD *)(v5 + 3344) + v55), v57, *(float *)(*v51 + 4 * v56) * 0.017453, *(float *)(*v52 + 4 * v56) * -0.017453, v58);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        ++v56;
        v55 += 40;
      }
      while (v56 < *v53);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, (unint64_t)((double)(*(_DWORD *)(v5 + 52) + 1) * (double)(*(_DWORD *)(v5 + 52) + 1)), 1);
    *(_OWORD *)v24 = *(_OWORD *)v649.__x_;
    v59 = *(void **)(v5 + 4464);
    if (v59)
    {
      *(_QWORD *)(v5 + 4472) = v59;
      operator delete(v59);
      *(_QWORD *)(v5 + 4464) = 0;
      *(_QWORD *)(v5 + 4472) = 0;
      *(_QWORD *)(v5 + 4480) = 0;
    }
    *(_OWORD *)(v5 + 4464) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 4480) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(_QWORD *)(v5 + 3208), *(int *)(v5 + 60));
    *(_OWORD *)(v5 + 3600) = *(_OWORD *)v649.__x_;
    v60 = *(void **)(v5 + 3616);
    if (v60)
    {
      *(_QWORD *)(v5 + 3624) = v60;
      operator delete(v60);
      *(_QWORD *)(v5 + 3616) = 0;
      *(_QWORD *)(v5 + 3624) = 0;
      *(_QWORD *)(v5 + 3632) = 0;
    }
    *(_OWORD *)(v5 + 3616) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 3632) = *(_QWORD *)&v649.__x_[8];
    if (*(_QWORD *)(v5 + 3208))
    {
      v61 = 0;
      do
      {
        v62 = *(_DWORD *)(*v51 + 4 * v61);
        v63 = *(_DWORD *)(*v52 + 4 * v61);
        v64 = (float *)operator new(8uLL);
        *(_DWORD *)v64 = v62;
        *((_DWORD *)v64 + 1) = v63;
        ParametricProcessor::calculateSHBeamCoefficients(v5, v64, v24);
        if (*(_DWORD *)(v5 + 60))
        {
          v65 = 0;
          do
          {
            v66 = *(_DWORD *)CLiteMatrix::Get(v24, v65, 0);
            *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v5 + 3600), v61, v65) = v66;
            CLiteMatrix::Get(v24, v65, 0);
            v68 = *v67;
            CLiteMatrix::Get((CLiteMatrix *)(v5 + 3600), v61, v65);
            *v69 = v68;
            ++v65;
          }
          while (v65 < *(int *)(v5 + 60));
        }
        operator delete(v64);
        ++v61;
      }
      while (v61 < *v53);
    }
  }
  v70 = *(_DWORD *)(v5 + 132);
  if (v70 == 3)
  {
    v587 = (_QWORD *)(v5 + 3392);
    std::vector<float>::resize(v5 + 3392, *(int *)(v5 + 40));
    v175 = (_QWORD *)(v5 + 3416);
    std::vector<float>::resize(v5 + 3416, *(int *)(v5 + 40));
    std::vector<float>::resize(v5 + 4136, *(int *)(v5 + 40));
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), 1);
    *(_OWORD *)(v5 + 4184) = *(_OWORD *)v649.__x_;
    v176 = *(void **)(v5 + 4200);
    if (v176)
    {
      *(_QWORD *)(v5 + 4208) = v176;
      operator delete(v176);
      *v548 = 0;
      v548[1] = 0;
      v548[2] = 0;
    }
    *(_OWORD *)v548 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 4216) = *(_QWORD *)&v649.__x_[8];
    ParametricProcessor::InitializeGrids(v5, (_OWORD **)(v5 + 3720), (float **)(v5 + 3744), (HOA *)*(unsigned int *)(v5 + 108), (float **)(v5 + 3768), (unint64_t *)(v5 + 3816));
    std::vector<float>::resize(v5 + 4696, *(_QWORD *)(v5 + 3816));
    ParametricProcessor::calculateRotationMatrices(v5, (uint64_t *)(v5 + 3720), (_QWORD *)(v5 + 3744));
    if (*(_DWORD *)(v5 + 128) == 4)
    {
      *(_DWORD *)(v5 + 124) = 1065353216;
      *(_DWORD *)(v5 + 84) = 1036831949;
    }
    if (getParametricProcessorLog(void)::onceToken != -1)
      dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
    v177 = getParametricProcessorLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v649.__x_[0]) = 0;
      _os_log_debug_impl(&dword_1B5ED0000, v177, OS_LOG_TYPE_DEBUG, "[Calculating AMBI2LS filters]", (uint8_t *)&v649, 2u);
    }
    GetChannelLayoutChannelLabels(&v625, *(int **)v582);
    GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)&v649, *(float **)v582);
    v178 = *(_DWORD **)v649.__x_;
    v179 = *(_BYTE **)&v649.__x_[2];
    memset(&v649, 0, 48);
    v180 = *(_DWORD **)&v649.__x_[6];
    if (*(_QWORD *)&v649.__x_[12])
    {
      *(_QWORD *)&v649.__x_[14] = *(_QWORD *)&v649.__x_[12];
      operator delete(*(void **)&v649.__x_[12]);
      if (*(_QWORD *)&v649.__x_[6])
      {
        *(_QWORD *)&v649.__x_[8] = *(_QWORD *)&v649.__x_[6];
        operator delete(*(void **)&v649.__x_[6]);
      }
    }
    if (*(_QWORD *)v649.__x_)
    {
      *(_QWORD *)&v649.__x_[2] = *(_QWORD *)v649.__x_;
      operator delete(*(void **)v649.__x_);
    }
    if (v179 == (_BYTE *)v178)
    {
      v182 = 0;
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = (v179 - (_BYTE *)v178) >> 2;
      do
      {
        v185 = *(_DWORD *)(*(_QWORD *)&v625.mChannelLayoutTag + 4 * v181);
        if (v185 > 0x3E || ((0x4000002000000010uLL >> v185) & 1) == 0)
        {
          *(_DWORD *)(*v587 + 4 * v182) = v178[v181];
          *(_DWORD *)(*v175 + 4 * v182++) = v180[v181];
        }
        else
        {
          v187 = *(unsigned int **)(v5 + 4256);
          v188 = *(_QWORD *)(v5 + 4264);
          if ((unint64_t)v187 >= v188)
          {
            v190 = *(unsigned int **)v579;
            v191 = ((uint64_t)v187 - *(_QWORD *)v579) >> 2;
            v192 = v191 + 1;
            if ((unint64_t)(v191 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v193 = v188 - (_QWORD)v190;
            if (v193 >> 1 > v192)
              v192 = v193 >> 1;
            if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
              v194 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v194 = v192;
            if (v194)
            {
              v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 + 4264, v194);
              v187 = *(unsigned int **)(v5 + 4256);
              v190 = *(unsigned int **)(v5 + 4248);
            }
            else
            {
              v195 = 0;
            }
            v196 = &v195[4 * v191];
            *(_DWORD *)v196 = v183;
            v189 = v196 + 4;
            while (v187 != v190)
            {
              v197 = *--v187;
              *((_DWORD *)v196 - 1) = v197;
              v196 -= 4;
            }
            *(_QWORD *)(v5 + 4248) = v196;
            *(_QWORD *)(v5 + 4256) = v189;
            *(_QWORD *)(v5 + 4264) = &v195[4 * v194];
            if (v190)
              operator delete(v190);
          }
          else
          {
            *v187 = v183;
            v189 = v187 + 1;
          }
          *(_QWORD *)(v5 + 4256) = v189;
        }
        v181 = ++v183;
      }
      while (v184 > v183);
    }
    std::vector<float>::resize((uint64_t)v587, v182);
    std::vector<float>::resize(v5 + 3416, v182);
    if (v180)
      operator delete(v180);
    if (v178)
      operator delete(v178);
    if (*(_QWORD *)&v625.mChannelLayoutTag)
    {
      *(_QWORD *)&v625.mNumberChannelDescriptions = *(_QWORD *)&v625.mChannelLayoutTag;
      operator delete(*(void **)&v625.mChannelLayoutTag);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 60));
    std::vector<CLiteMatrix>::vector(&v625, 1uLL, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate(v590 + 12);
    *((_OWORD *)v590 + 6) = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 3960) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v625, *(int *)(v5 + 36), *(int *)(v5 + 40));
    HOA::HOA((uint64_t)&v649, *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 216));
    HOA::createDecoder(v649.__x_, (uint64_t)v587, v5 + 3416, 1);
    v622[1] = 0;
    v622[0] = 0;
    v623 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v622, *(const void **)&v649.__x_[14], *(uint64_t *)&v649.__x_[16], (uint64_t)(*(_QWORD *)&v649.__x_[16] - *(_QWORD *)&v649.__x_[14]) >> 2);
    v198 = *(_DWORD *)(v5 + 36);
    if (v198)
    {
      v199 = 0;
      v200 = 0;
      LODWORD(v201) = *(_DWORD *)(v5 + 40);
      do
      {
        if ((_DWORD)v201)
        {
          v202 = 0;
          do
          {
            v203 = *((_DWORD *)v622[0] + v200 + v202);
            *(_DWORD *)CLiteMatrix::Get(*(CLiteMatrix **)(v5 + 3944), v202++, v199) = v203;
            v201 = *(int *)(v5 + 40);
          }
          while (v202 < v201);
          v200 += v202;
          v198 = *(_DWORD *)(v5 + 36);
        }
        ++v199;
      }
      while (v199 < v198);
    }
    std::make_unique[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &>((uint64_t *)__p, (uint64_t)v587, v5 + 3416);
    std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)(v5 + 448), (VBAP *)__p[0]);
    v204 = *(int *)(v5 + 28);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)__p, *(int *)(v5 + 40) + ((uint64_t)(*(_QWORD *)(v5 + 4256) - *(_QWORD *)(v5 + 4248)) >> 2), *(int *)(v5 + 32));
    std::vector<CLiteMatrix>::vector(v619, v204, (uint64_t)__p);
    std::vector<CLiteMatrix>::__vdeallocate(v560);
    *(_OWORD *)v560 = *(_OWORD *)v619;
    *(_QWORD *)(v5 + 7512) = v620;
    v620 = 0;
    v619[1] = 0;
    v619[0] = 0;
    v650[0] = (float *)v619;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)v650);
    if (v647)
    {
      v648 = v647;
      operator delete(v647);
    }
    if (v622[0])
    {
      v622[1] = v622[0];
      operator delete(v622[0]);
    }
    HOA::~HOA((HOA *)&v649);
    if (*(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags)
    {
      *(_QWORD *)&v625.mChannelDescriptions[0].mCoordinates[1] = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
      operator delete(*(void **)&v625.mChannelDescriptions[0].mChannelFlags);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, (uint64_t)(*(_QWORD *)(v5 + 3400) - *(_QWORD *)(v5 + 3392)) >> 2, *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 6280) = *(_OWORD *)v649.__x_;
    v205 = *(void **)(v5 + 6296);
    if (v205)
    {
      *(_QWORD *)(v5 + 6304) = v205;
      operator delete(v205);
      *v566 = 0;
      v566[1] = 0;
      v566[2] = 0;
    }
    *(_OWORD *)v566 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 6312) = *(_QWORD *)&v649.__x_[8];
    v206 = *(_QWORD *)(v5 + 3400);
    v207 = *(_QWORD *)(v5 + 3392);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
    std::vector<CLiteMatrix>::vector(&v625, (v206 - v207) >> 2, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate(v571);
    *(_OWORD *)v571 = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 3384) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v72 = v567;
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    v210 = *(_QWORD *)(v5 + 3392);
    v71 = v5 + 4720;
    if (*(_QWORD *)(v5 + 3400) != v210)
    {
      v211 = 0;
      v212 = 0;
      do
      {
        RotationUtilities::yawPitchRoll2RotationMatrixFOA((RotationUtilities *)(*v571 + v211), v208, *(float *)(v210 + 4 * v212) * 0.017453, *(float *)(*v175 + 4 * v212) * -0.017453, v209);
        ++v212;
        v210 = *(_QWORD *)(v5 + 3392);
        v211 += 40;
      }
      while (v212 < (*(_QWORD *)(v5 + 3400) - v210) >> 2);
    }
  }
  else
  {
    if (v70 == 2)
    {
      v142 = *(int *)(v5 + 28);
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
      std::vector<CLiteMatrix>::vector(&v625, v142, (uint64_t)&v649);
      std::vector<CLiteMatrix>::__vdeallocate(v560);
      *(_OWORD *)v560 = *(_OWORD *)&v625.mChannelLayoutTag;
      *(_QWORD *)(v5 + 7512) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
      memset(&v625, 0, 24);
      __p[0] = &v625;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (*(_QWORD *)&v649.__x_[4])
      {
        *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
        operator delete(*(void **)&v649.__x_[4]);
      }
      if (getParametricProcessorLog(void)::onceToken != -1)
        dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
      v143 = getParametricProcessorLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v649.__x_[0]) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v143, OS_LOG_TYPE_DEBUG, "[Loading XTCIRs]", (uint8_t *)&v649, 2u);
      }
      ParametricProcessor::InitializeGrids(v5, (_OWORD **)(v5 + 3640), (float **)(v5 + 3664), (HOA *)*(unsigned int *)(v5 + 96), (float **)(v5 + 3688), (unint64_t *)(v5 + 3712));
      std::vector<float>::resize(v5 + 4112, (uint64_t)(*(_QWORD *)(v5 + 3648) - *(_QWORD *)(v5 + 3640)) >> 2);
      std::make_unique[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &>((uint64_t *)&v649, v5 + 3640, v5 + 3664);
      std::unique_ptr<VBAP>::reset[abi:ne180100](v559, *(VBAP **)v649.__x_);
      v586 = *(ausdk::AUChannelLayout **)(v5 + 3648);
      v584 = *(ausdk::AUChannelLayout **)(v5 + 3640);
      LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 2, *(int *)(v5 + 16));
      v144 = (v586 - v584) >> 2;
      std::vector<LiteMatrix<float>>::vector(&v625, v144, (uint64_t)&v649);
      v145 = v5 + 3920;
      std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 3920));
      *(_OWORD *)(v5 + 3920) = *(_OWORD *)&v625.mChannelLayoutTag;
      *(_QWORD *)(v5 + 3936) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
      memset(&v625, 0, 24);
      __p[0] = &v625;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (*(_QWORD *)&v649.__x_[4])
      {
        *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
        operator delete(*(void **)&v649.__x_[4]);
      }
      IR::getPresetDataAttributes();
      v146 = *(void **)(v5 + 152);
      if (v146)
      {
        v147 = *(const void **)v649.__x_;
        *(_QWORD *)v649.__x_ = *(_QWORD *)(v5 + 152);
        v146 = (void *)CFRetain(v146);
        if (v147)
          CFRelease(v147);
      }
      v649.__x_[2] = *(_DWORD *)(v5 + 12);
      IR::IRDataLoader::instance((IR::IRDataLoader *)v146);
      std::string::basic_string[abi:ne180100]<0>(&v625, "ParametricProcessor|");
      v616[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      v647 = 0;
      IR::IRDataLoader::load();
      v581 = v622[0];
      v148 = v622[1];
      v622[1] = 0;
      v622[0] = 0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v616[0])
        CFRelease(v616[0]);
      if (SHIBYTE(v625.mChannelDescriptions[0].mCoordinates[0]) < 0)
        operator delete(*(void **)&v625.mChannelLayoutTag);
      NumFiltersPerSpatialPoint = IR::IRData::getNumFiltersPerSpatialPoint(v581);
      IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v625);
      FilterLength = IR::IRData::getFilterLength(v581);
      if (*(_QWORD *)(*(_QWORD *)v145 + 8) < (unint64_t)FilterLength)
        __assert_rtn("LoadXTCIRs", "ParametricProcessor.cpp", 438, "mInputData.XTCIRs[0].NumCols()>=filterLength");
      v534 = (std::__shared_weak_count *)v148;
      v574 = NumFiltersPerSpatialPoint;
      std::vector<float>::vector(__p, NumFiltersPerSpatialPoint);
      if (v586 != v584)
      {
        v151 = 0;
        if ((unint64_t)FilterLength <= 1)
          v152 = 1;
        else
          v152 = FilterLength;
        v153 = (v586 - v584) >> 2;
        if (v144 <= 1)
          v153 = 1;
        v570 = v153;
        do
        {
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          v154 = IR::IRData::getFilterLength(v581);
          std::vector<float>::vector(v619, v154);
          std::vector<std::vector<float>>::vector(v622, v574, (uint64_t)v619);
          if (v619[0])
          {
            v619[1] = v619[0];
            operator delete(v619[0]);
          }
          IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
          v155 = 0;
          v156 = 1;
          do
          {
            v157 = v156;
            if (FilterLength)
            {
              v158 = 0;
              do
              {
                v159 = *(_DWORD *)(*((_QWORD *)v622[0] + 3 * v155) + 4 * v158);
                *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)(*(_QWORD *)v145 + 40 * v151), v155, v158++) = v159;
              }
              while (v152 != v158);
            }
            v156 = 0;
            v155 = 1;
          }
          while ((v157 & 1) != 0);
          v619[0] = v622;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v619);
          ++v151;
        }
        while (v151 != v570);
      }
      ParametricProcessor::convertHRIRtoHRTF(v622, v5, (unint64_t **)(v5 + 3920));
      std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 3872));
      *(_OWORD *)(v5 + 3872) = *(_OWORD *)v622;
      *(_QWORD *)(v5 + 3888) = v623;
      v623 = 0;
      v622[1] = 0;
      v622[0] = 0;
      v619[0] = v622;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)v619);
      v160 = *(int *)(v5 + 28);
      LODWORD(cf[0]) = 0;
      std::vector<float>::vector(v619, v144, cf);
      std::vector<std::vector<float>>::vector(v622, 2 * v160, (uint64_t)v619);
      std::vector<std::vector<float>>::__vdeallocate(v590 + 6);
      *((_OWORD *)v590 + 3) = *(_OWORD *)v622;
      *(_QWORD *)(v5 + 3912) = v623;
      v623 = 0;
      v622[1] = 0;
      v622[0] = 0;
      v650[0] = (float *)v622;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v650);
      if (v619[0])
      {
        v619[1] = v619[0];
        operator delete(v619[0]);
      }
      v161 = 0;
      if (v144 <= 1)
        v162 = 1;
      else
        v162 = (v586 - v584) >> 2;
      v163 = *(_DWORD *)(v5 + 28);
      v164 = 1;
      v165 = v163;
      do
      {
        v166 = v164;
        if (v165)
        {
          v167 = 0;
          do
          {
            if (v586 == v584)
            {
              v171 = v163;
            }
            else
            {
              v168 = 0;
              v169 = 0;
              do
              {
                v170 = (_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + v168), v161, v167);
                v163 = *(_DWORD *)(v5 + 28);
                v171 = v163;
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 3896) + 24 * (v167 + v161 * v163)) + 4 * v169++) = *v170;
                v168 += 40;
              }
              while (v162 != v169);
            }
            ++v167;
            v165 = v163;
          }
          while (v167 < v171);
        }
        v164 = 0;
        v161 = 1;
      }
      while ((v166 & 1) != 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*(_QWORD *)&v649.__x_[32])
        CFRelease(*(CFTypeRef *)&v649.__x_[32]);
      if (*(_QWORD *)&v649.__x_[22])
        CFRelease(*(CFTypeRef *)&v649.__x_[22]);
      if (*(_QWORD *)&v649.__x_[16])
        CFRelease(*(CFTypeRef *)&v649.__x_[16]);
      if (*(_QWORD *)v649.__x_)
        CFRelease(*(CFTypeRef *)v649.__x_);
      if (v534)
      {
        p_shared_owners = (unint64_t *)&v534->__shared_owners_;
        do
          v173 = __ldaxr(p_shared_owners);
        while (__stlxr(v173 - 1, p_shared_owners));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
          std::__shared_weak_count::__release_weak(v534);
        }
      }
      std::vector<float>::resize(v5 + 4112, (uint64_t)(*(_QWORD *)(v5 + 3648) - *(_QWORD *)(v5 + 3640)) >> 2);
      std::make_unique[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &>((uint64_t *)&v649, v5 + 3640, v5 + 3664);
      std::unique_ptr<VBAP>::reset[abi:ne180100](v559, *(VBAP **)v649.__x_);
      ParametricProcessor::calculateVBAPGainTable((ParametricProcessor *)v5, (HOA *)*(unsigned int *)(v5 + 108));
      ParametricProcessor::calculateRotationMatrices(v5, (uint64_t *)(v5 + 3720), (_QWORD *)(v5 + 3744));
      if (getParametricProcessorLog(void)::onceToken != -1)
        dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
      v174 = getParametricProcessorLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v649.__x_[0]) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v174, OS_LOG_TYPE_DEBUG, "[Calculating AMBI2BIS filters]", (uint8_t *)&v649, 2u);
      }
    }
    else
    {
      v71 = v5 + 4720;
      v72 = v567;
      if (v70 != 1)
        goto LABEL_412;
      if (getParametricProcessorLog(void)::onceToken != -1)
        dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
      v73 = getParametricProcessorLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v649.__x_[0]) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEBUG, "[Loading HRTFs]", (uint8_t *)&v649, 2u);
      }
      v74 = *(int *)(v5 + 28);
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
      std::vector<CLiteMatrix>::vector(&v625, v74, (uint64_t)&v649);
      std::vector<CLiteMatrix>::__vdeallocate(v560);
      *(_OWORD *)v560 = *(_OWORD *)&v625.mChannelLayoutTag;
      *(_QWORD *)(v5 + 7512) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
      memset(&v625, 0, 24);
      __p[0] = &v625;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (*(_QWORD *)&v649.__x_[4])
      {
        *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
        operator delete(*(void **)&v649.__x_[4]);
      }
      v580 = (IR::IRData *)(v5 + 3640);
      v583 = (ausdk::AUChannelLayout *)(v5 + 3664);
      ParametricProcessor::InitializeGrids(v5, (_OWORD **)(v5 + 3640), (float **)(v5 + 3664), (HOA *)*(unsigned int *)(v5 + 96), (float **)(v5 + 3688), (unint64_t *)(v5 + 3712));
      v75 = *(_QWORD *)(v5 + 3648);
      v76 = *(_QWORD *)(v5 + 3640);
      v77 = (v75 - v76) >> 2;
      v625.mChannelLayoutTag = 0;
      std::vector<float>::vector(&v649, v77, &v625);
      v78 = *(void **)(v5 + 3968);
      if (v78)
      {
        *(_QWORD *)(v5 + 3976) = v78;
        operator delete(v78);
        *(_QWORD *)(v5 + 3968) = 0;
        *(_QWORD *)(v5 + 3976) = 0;
        *(_QWORD *)(v5 + 3984) = 0;
      }
      *(_OWORD *)(v5 + 3968) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 3984) = *(_QWORD *)&v649.__x_[4];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, (v75 - v76) >> 2, *(int *)(v5 + 28));
      v578 = (CLiteMatrix *)(v5 + 3992);
      *(_OWORD *)(v5 + 3992) = *(_OWORD *)v649.__x_;
      v79 = v590 + 20;
      v80 = *(void **)(v5 + 4008);
      if (v80)
      {
        *(_QWORD *)(v5 + 4016) = v80;
        operator delete(v80);
        *v79 = 0;
        v590[21] = 0;
        v590[22] = 0;
      }
      *(_OWORD *)v79 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 4024) = *(_QWORD *)&v649.__x_[8];
      IR::getPresetDataAttributes();
      v649.__x_[12] = *(_DWORD *)(v5 + 136);
      v81 = *(void **)(v5 + 144);
      if (v81)
      {
        v82 = *(const void **)v649.__x_;
        *(_QWORD *)v649.__x_ = *(_QWORD *)(v5 + 144);
        v81 = (void *)CFRetain(v81);
        if (v82)
          CFRelease(v82);
      }
      v649.__x_[2] = *(_DWORD *)(v5 + 12);
      IR::IRDataLoader::instance((IR::IRDataLoader *)v81);
      std::string::basic_string[abi:ne180100]<0>(&v625, "ParametricProcessor|");
      cf[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      v647 = 0;
      IR::IRDataLoader::load();
      v83 = v622[0];
      v569 = (std::__shared_weak_count *)v622[1];
      v622[1] = 0;
      v622[0] = 0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (cf[0])
        CFRelease(cf[0]);
      if (SHIBYTE(v625.mChannelDescriptions[0].mCoordinates[0]) < 0)
        operator delete(*(void **)&v625.mChannelLayoutTag);
      v84 = IR::IRData::getNumFiltersPerSpatialPoint(v83);
      v85 = IR::IRData::getFilterLength(v83);
      v86 = v85;
      v87 = *(int *)(v5 + 16);
      if ((int)v85 < (int)v87)
      {
        v88 = (float)(int)v85;
        v89 = (float)(int)v87;
        v90 = (float)(int)v87;
        if ((_DWORD)v87)
          v90 = v88 - (float)(v89 * floorf(v88 / v89));
        v87 = (unint64_t)(float)((float)(v89 - v90) + v88);
      }
      LiteMatrix<float>::LiteMatrix((uint64_t)&v625, 2, v87);
      std::vector<LiteMatrix<float>>::vector(__p, (v75 - v76) >> 2, (uint64_t)&v625);
      std::vector<CLiteMatrix>::__vdeallocate(v590);
      *(_OWORD *)v590 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 3864) = v647;
      v647 = 0;
      __p[1] = 0;
      __p[0] = 0;
      v622[0] = (IR::IRData *)__p;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)v622);
      if (*(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags)
      {
        *(_QWORD *)&v625.mChannelDescriptions[0].mCoordinates[1] = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        operator delete(*(void **)&v625.mChannelDescriptions[0].mChannelFlags);
      }
      v91 = v83;
      if (*(_QWORD *)(*v590 + 8) < (unint64_t)(int)v86)
        __assert_rtn("LoadHRIRs", "ParametricProcessor.cpp", 396, "mInputData.HRIRs[0].NumCols()>=filterLength");
      IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v625);
      v576 = v84;
      std::vector<float>::vector(__p, v84);
      if (v75 != v76)
      {
        v92 = 0;
        if ((unint64_t)(int)v86 <= 1)
          v93 = 1;
        else
          v93 = (int)v86;
        if (v77 <= 1)
          v94 = 1;
        else
          v94 = v77;
        v572 = (CLiteMatrix *)v94;
        do
        {
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          v95 = IR::IRData::getFilterLength(v91);
          std::vector<float>::vector(v619, v95);
          std::vector<std::vector<float>>::vector(v622, v576, (uint64_t)v619);
          if (v619[0])
          {
            v619[1] = v619[0];
            operator delete(v619[0]);
          }
          IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
          *(float *)(*(_QWORD *)(v5 + 3968) + 4 * v92) = (float)(*((float *)__p[0] + 1) - *(float *)__p[0])
                                                       / *(float *)&v649.__x_[2];
          if (*(_DWORD *)(v5 + 28))
          {
            v96 = 0;
            do
            {
              v97 = *(float *)(*(_QWORD *)(v5 + 3088) + 4 * v96);
              v98 = *(float *)(*(_QWORD *)(v5 + 3968) + 4 * v92);
              v99 = (_DWORD *)CLiteMatrix::Get(v578, v92, v96);
              v100 = v97 * 6.28318531 * v98 + 3.14159265;
              *(float *)&v100 = v100 + floor(v100 / 6.28318531) * -6.28318531 + -3.14159265;
              *v99 = LODWORD(v100);
              ++v96;
            }
            while (v96 < *(int *)(v5 + 28));
          }
          v619[1] = 0;
          v619[0] = 0;
          v620 = 0;
          v650[0] = (float *)v619;
          LOBYTE(v650[1]) = 0;
          v101 = operator new(0x10uLL);
          v102 = 0;
          v620 = v101 + 2;
          *v101 = 0;
          v101[1] = 0;
          v103 = 1;
          v619[0] = v101;
          v619[1] = v101 + 2;
          do
          {
            v104 = v103;
            IR::IRData::getMaxDelay(v83);
            v106 = v105;
            v107 = (IR::DelayLine *)operator new();
            IR::DelayLine::DelayLine((uint64_t)v107, v106, 5, 1uLL, 0, v86);
            std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)v619[0] + v102, v107);
            IR::DelayLine::setDelay(*((_QWORD *)v619[0] + v102), *((float *)__p[0] + v102));
            v108 = (IR::DelayLine *)*((_QWORD *)v619[0] + v102);
            v650[0] = *((float **)v622[0] + 3 * v102);
            IR::DelayLine::process(v108, v650[0], v650, v86);
            v103 = 0;
            v102 = 1;
          }
          while ((v104 & 1) != 0);
          v109 = 0;
          v110 = 1;
          do
          {
            v111 = v110;
            if ((_DWORD)v86)
            {
              v112 = 0;
              do
              {
                v113 = *(_DWORD *)(*((_QWORD *)v622[0] + 3 * v109) + 4 * v112);
                *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)(*v590 + 40 * v92), v109, v112++) = v113;
              }
              while (v93 != v112);
            }
            v110 = 0;
            v109 = 1;
          }
          while ((v111 & 1) != 0);
          v650[0] = (float *)v619;
          std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100]((void ***)v650);
          v619[0] = v622;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v619);
          ++v92;
          v91 = v83;
        }
        while ((CLiteMatrix *)v92 != v572);
      }
      ParametricProcessor::convertHRIRtoHRTF(v622, v5, (unint64_t **)v590);
      v114 = (_QWORD *)(v5 + 3872);
      std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 3872));
      *(_OWORD *)(v5 + 3872) = *(_OWORD *)v622;
      *(_QWORD *)(v5 + 3888) = v623;
      v623 = 0;
      v622[1] = 0;
      v622[0] = 0;
      v619[0] = v622;
      std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)v619);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*(_QWORD *)&v649.__x_[32])
        CFRelease(*(CFTypeRef *)&v649.__x_[32]);
      if (*(_QWORD *)&v649.__x_[22])
        CFRelease(*(CFTypeRef *)&v649.__x_[22]);
      if (*(_QWORD *)&v649.__x_[16])
        CFRelease(*(CFTypeRef *)&v649.__x_[16]);
      if (*(_QWORD *)v649.__x_)
        CFRelease(*(CFTypeRef *)v649.__x_);
      if (v569)
      {
        v115 = (unint64_t *)&v569->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
          std::__shared_weak_count::__release_weak(v569);
        }
      }
      std::vector<float>::resize(v5 + 4112, (uint64_t)(*(_QWORD *)(v5 + 3648) - *(_QWORD *)(v5 + 3640)) >> 2);
      std::make_unique[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &>((uint64_t *)&v649, (uint64_t)v580, (uint64_t)v583);
      std::unique_ptr<VBAP>::reset[abi:ne180100](v559, *(VBAP **)v649.__x_);
      ParametricProcessor::calculateVBAPGainTable((ParametricProcessor *)v5, (HOA *)*(unsigned int *)(v5 + 108));
      ParametricProcessor::calculateRotationMatrices(v5, (uint64_t *)(v5 + 3720), (_QWORD *)(v5 + 3744));
      v117 = *(_QWORD *)(v5 + 3880);
      v118 = *(_QWORD *)(v5 + 3872);
      v119 = (v117 - v118) / 40;
      v577 = v117;
      if (*(_BYTE *)v5)
      {
        if (getParametricProcessorLog(void)::onceToken != -1)
          dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
        v120 = getParametricProcessorLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v649.__x_[0]) = 0;
          _os_log_debug_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEBUG, "[Post-processing HRTFs]", (uint8_t *)&v649, 2u);
        }
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, (v117 - v118) / 40, *(int *)(v5 + 28));
        v585 = (CLiteMatrix *)(v5 + 4032);
        *(_OWORD *)(v5 + 4032) = *(_OWORD *)v649.__x_;
        v122 = *(void **)(v5 + 4048);
        if (v122)
        {
          *(_QWORD *)(v5 + 4056) = v122;
          operator delete(v122);
          *(_QWORD *)(v5 + 4048) = 0;
          *(_QWORD *)(v5 + 4056) = 0;
          *(_QWORD *)(v5 + 4064) = 0;
        }
        *(_OWORD *)(v5 + 4048) = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 4064) = *(_QWORD *)&v649.__x_[8];
        ParametricProcessor::calculatePhaseTerm((unint64_t *)v578, v585, v121, 1.0);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, (v117 - v118) / 40, *(int *)(v5 + 28));
        v573 = (CLiteMatrix *)(v5 + 4072);
        *(_OWORD *)(v5 + 4072) = *(_OWORD *)v649.__x_;
        v124 = v590 + 30;
        v125 = *(void **)(v5 + 4088);
        if (v125)
        {
          *(_QWORD *)(v5 + 4096) = v125;
          operator delete(v125);
          *v124 = 0;
          v590[31] = 0;
          v590[32] = 0;
        }
        *(_OWORD *)v124 = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 4104) = *(_QWORD *)&v649.__x_[8];
        ParametricProcessor::calculatePhaseTerm((unint64_t *)v578, v573, v123, -1.0);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 28), 2);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v625, *(int *)(v5 + 28), 2);
        if (*(_DWORD *)(v5 + 28))
        {
          v126 = 0;
          v127 = (float)v119;
          if (v119 <= 1)
            v128 = 1;
          else
            v128 = (v117 - v118) / 40;
          do
          {
            v129 = 0;
            v130 = 1;
            do
            {
              v131 = v130;
              if (v117 != v118)
              {
                v132 = 0;
                v133 = v128;
                do
                {
                  v134 = (float *)CLiteMatrix::Get((CLiteMatrix *)(*v114 + v132), v129, v126);
                  v135 = *v134 * *v134;
                  CLiteMatrix::Get((CLiteMatrix *)(*v114 + v132), v129, v126);
                  v137 = *v136;
                  v138 = (float *)CLiteMatrix::Get((CLiteMatrix *)&v625, v126, v129);
                  *v138 = (float)(v135 + (float)(v137 * v137)) + *v138;
                  v132 += 40;
                  --v133;
                }
                while (v133);
              }
              v139 = *(float *)CLiteMatrix::Get((CLiteMatrix *)&v625, v126, v129);
              v140 = (float *)CLiteMatrix::Get((CLiteMatrix *)&v649, v126, v129);
              v130 = 0;
              *v140 = sqrtf(v139 / v127);
              v129 = 1;
            }
            while ((v131 & 1) != 0);
            ++v126;
            v141 = *(int *)(v5 + 28);
          }
          while (v126 < v141);
          v119 = (v117 - v118) / 40;
        }
        else
        {
          v141 = 0;
        }
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)__p, 2, v141);
        std::vector<CLiteMatrix>::vector(v616, v119, (uint64_t)__p);
        if (v647)
        {
          v648 = v647;
          operator delete(v647);
        }
        LODWORD(v213) = *(_DWORD *)(v5 + 28);
        if (v117 != v118)
        {
          v214 = 0;
          if (v119 <= 1)
            v215 = 1;
          else
            v215 = v119;
          v216 = *(_DWORD *)(v5 + 28);
          do
          {
            if (v216)
            {
              v217 = 0;
              do
              {
                v218 = 0;
                v219 = 1;
                do
                {
                  v220 = v219;
                  v221 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v114 + 40 * v214), v218, v217);
                  v222 = *(float *)CLiteMatrix::Get((CLiteMatrix *)&v649, v217, v218);
                  *(float *)CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v214), v218, v217) = v221 / (float)(v222 + 0.00000011921);
                  CLiteMatrix::Get((CLiteMatrix *)(*v114 + 40 * v214), v218, v217);
                  v224 = *v223;
                  v225 = *(float *)CLiteMatrix::Get((CLiteMatrix *)&v649, v217, v218);
                  CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v214), v218, v217);
                  v219 = 0;
                  *v226 = v224 / (float)(v225 + 0.00000011921);
                  v218 = 1;
                }
                while ((v220 & 1) != 0);
                ++v217;
                v213 = *(int *)(v5 + 28);
              }
              while (v217 < v213);
              v216 = *(_DWORD *)(v5 + 28);
              v117 = v577;
            }
            ++v214;
          }
          while (v214 != v215);
        }
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)__p, v119, (int)v213);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)v622, v119, *(int *)(v5 + 28));
        LODWORD(v227) = *(_DWORD *)(v5 + 28);
        if (v117 != v118)
        {
          v228 = 0;
          if (v119 <= 1)
            v229 = 1;
          else
            v229 = v119;
          v230 = *(_DWORD *)(v5 + 28);
          do
          {
            if (v230)
            {
              v231 = 0;
              do
              {
                v232 = *(float *)CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v228), 0, v231);
                CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v228), 0, v231);
                v234 = *v233;
                v235 = (float *)CLiteMatrix::Get((CLiteMatrix *)__p, v228, v231);
                *v235 = hypotf(v232, v234);
                v236 = *(float *)CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v228), 1uLL, v231);
                CLiteMatrix::Get((CLiteMatrix *)((char *)v616[0] + 40 * v228), 1uLL, v231);
                v238 = *v237;
                v239 = (float *)CLiteMatrix::Get((CLiteMatrix *)v622, v228, v231);
                *v239 = hypotf(v236, v238);
                ++v231;
                v227 = *(int *)(v5 + 28);
              }
              while (v231 < v227);
              v230 = *(_DWORD *)(v5 + 28);
              v117 = v577;
            }
            ++v228;
          }
          while (v228 != v229);
        }
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)v619, v119, (int)v227);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)v650, v119, *(int *)(v5 + 28));
        CLiteMatrix::ElementwiseMultiply((CLiteMatrix *)__p, v585, (const CLiteMatrix *)v619, (CLiteMatrix *)1);
        CLiteMatrix::ElementwiseMultiply((CLiteMatrix *)v622, v573, (const CLiteMatrix *)v650, (CLiteMatrix *)1);
        if (v117 != v118)
        {
          v240 = 0;
          if (v119 <= 1)
            v241 = 1;
          else
            v241 = v119;
          LODWORD(v242) = *(_DWORD *)(v5 + 28);
          do
          {
            if ((_DWORD)v242)
            {
              v243 = 0;
              do
              {
                v244 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v619, v240, v243);
                *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v240), 0, v243) = v244;
                CLiteMatrix::Get((CLiteMatrix *)v619, v240, v243);
                v246 = *v245;
                CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v240), 0, v243);
                *v247 = v246;
                v248 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v650, v240, v243);
                *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v240), 1uLL, v243) = v248;
                CLiteMatrix::Get((CLiteMatrix *)v650, v240, v243);
                v250 = *v249;
                CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v240), 1uLL, v243);
                *v251 = v250;
                ++v243;
                v242 = *(int *)(v5 + 28);
              }
              while (v243 < v242);
            }
            ++v240;
          }
          while (v240 != v241);
        }
        if (v651)
        {
          v652 = v651;
          operator delete(v651);
        }
        if (v620)
        {
          v621 = v620;
          operator delete(v620);
        }
        if (v623)
        {
          v624 = v623;
          operator delete(v623);
        }
        if (v647)
        {
          v648 = v647;
          operator delete(v647);
        }
        __p[0] = v616;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags)
        {
          *(_QWORD *)&v625.mChannelDescriptions[0].mCoordinates[1] = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
          operator delete(*(void **)&v625.mChannelDescriptions[0].mChannelFlags);
        }
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
      }
      v252 = *(int *)(v5 + 28);
      LODWORD(v622[0]) = 0;
      std::vector<float>::vector(&v625, v119, v622);
      std::vector<std::vector<float>>::vector(&v649, 2 * v252, (uint64_t)&v625);
      std::vector<std::vector<float>>::__vdeallocate(v590 + 6);
      *((_OWORD *)v590 + 3) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 3912) = *(_QWORD *)&v649.__x_[4];
      memset(&v649, 0, 24);
      __p[0] = &v649;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (*(_QWORD *)&v625.mChannelLayoutTag)
      {
        *(_QWORD *)&v625.mNumberChannelDescriptions = *(_QWORD *)&v625.mChannelLayoutTag;
        operator delete(*(void **)&v625.mChannelLayoutTag);
      }
      v253 = 0;
      if (v119 <= 1)
        v254 = 1;
      else
        v254 = v119;
      v255 = *(_DWORD *)(v5 + 28);
      v256 = 1;
      v257 = v255;
      do
      {
        v588 = v256;
        if (v257)
        {
          v258 = 0;
          do
          {
            if (v577 == v118)
            {
              v264 = v255;
            }
            else
            {
              v259 = 0;
              for (j = 0; j != v254; ++j)
              {
                v261 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + v259), v253, v258);
                CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + v259), v253, v258);
                v263 = hypotf(v261, *v262);
                v255 = *(_DWORD *)(v5 + 28);
                v264 = v255;
                *(float *)(*(_QWORD *)(*(_QWORD *)(v5 + 3896) + 24 * (v258 + v253 * v255)) + 4 * j) = v263;
                v259 += 40;
              }
            }
            ++v258;
            v257 = v255;
          }
          while (v258 < v264);
        }
        v256 = 0;
        v253 = 1;
      }
      while ((v588 & 1) != 0);
      if (getParametricProcessorLog(void)::onceToken != -1)
        dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
      v72 = v567;
      v265 = getParametricProcessorLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v649.__x_[0]) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v265, OS_LOG_TYPE_DEBUG, "[Calculating AMBI2BIN filters]", (uint8_t *)&v649, 2u);
      }
      v266 = *(_DWORD *)(v5 + 192);
      if (v266)
      {
        v71 = v5 + 4720;
        if (v266 == 1)
        {
          v267 = *(_QWORD *)(v5 + 3880);
          v268 = *(_QWORD *)(v5 + 3872);
          v269 = 0xCCCCCCCCCCCCCCCDLL * ((v267 - v268) >> 3);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)__p, *(int *)(v5 + 60), v269);
          HOA::HOA((uint64_t)&v649, *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 216));
          HOA::createEncoder((uint64_t)&v649, (uint64_t)v580, (uint64_t)v583);
          std::vector<float>::vector(v610, v269 * *(int *)(v5 + 60));
          memset(&v625, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v625, *(const void **)&v649.__x_[8], *(uint64_t *)&v649.__x_[10], (uint64_t)(*(_QWORD *)&v649.__x_[10] - *(_QWORD *)&v649.__x_[8]) >> 2);
          if (v610[0])
          {
            v610[1] = v610[0];
            operator delete(v610[0]);
          }
          *(_OWORD *)v610 = *(_OWORD *)&v625.mChannelLayoutTag;
          v611 = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v622, v269, *(int *)(v5 + 60));
          if (v267 != v268)
          {
            v270 = 0;
            v271 = 0;
            if (v269 <= 1)
              v272 = 1;
            else
              v272 = 0xCCCCCCCCCCCCCCCDLL * ((v267 - v268) >> 3);
            LODWORD(v273) = *(_DWORD *)(v5 + 60);
            do
            {
              if ((_DWORD)v273)
              {
                v274 = 0;
                do
                {
                  v275 = *(_DWORD *)((char *)v610[0] + 4 * v274 + v270);
                  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v622, v271, v274++) = v275;
                  v273 = *(int *)(v5 + 60);
                }
                while (v274 < v273);
              }
              ++v271;
              v270 += 16;
            }
            while (v271 != v272);
          }
          CLiteMatrix::SetWithConjugateTranposeOfOther((CLiteMatrix *)__p, (const CLiteMatrix *)v622);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v619, *(int *)(v5 + 60), *(int *)(v5 + 60));
          CLiteMatrix::MatrixMultiply((vDSP_Length *)__p, (const CLiteMatrix *)v622, (const CLiteMatrix *)v619, v276);
          v645 = 0;
          *(_OWORD *)v644 = 0u;
          memset(v643, 0, sizeof(v643));
          v642 = 0u;
          v641 = 0u;
          v640 = 0u;
          v639 = 0u;
          v638 = 0u;
          v637 = 0u;
          v636 = 0u;
          v635 = 0u;
          v634 = 0u;
          v633 = 0u;
          v632 = 0u;
          v631 = 0u;
          v630 = 0u;
          v629 = 0u;
          v628 = 0u;
          v627 = 0u;
          v626 = 0u;
          v277 = *(int *)(v5 + 60);
          memset(&v625, 0, sizeof(v625));
          std::vector<__CLPK_complex>::vector(v650, (v277 * v277));
          if (*(_QWORD *)&v625.mChannelLayoutTag)
          {
            *(_QWORD *)&v625.mNumberChannelDescriptions = *(_QWORD *)&v625.mChannelLayoutTag;
            operator delete(*(void **)&v625.mChannelLayoutTag);
          }
          *(_OWORD *)&v625.mChannelLayoutTag = *(_OWORD *)v650;
          *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags = v651;
          std::vector<__CLPK_complex>::vector(v650, 2 * v277);
          if (v643[1])
          {
            v643[2] = v643[1];
            operator delete(v643[1]);
          }
          *(_OWORD *)&v643[1] = *(_OWORD *)v650;
          v643[3] = v651;
          if ((_DWORD)v277)
          {
            if ((v277 & 0x80000000) != 0)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v277);
            v280 = &v278[4 * v279];
            bzero(v278, 4 * v277);
            *(_QWORD *)&v281 = v278;
            *((_QWORD *)&v281 + 1) = &v278[4 * v277];
          }
          else
          {
            v280 = 0;
            v281 = 0uLL;
          }
          if (v644[0])
          {
            v644[1] = v644[0];
            *(_OWORD *)v589 = v281;
            operator delete(v644[0]);
            v281 = *(_OWORD *)v589;
          }
          *(_OWORD *)v644 = v281;
          v645 = v280;
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v650, v269, 2);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v616, 2, v269);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)cf, v269, 2);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v607, *(int *)(v5 + 60), 2);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v604, 2, *(int *)(v5 + 60));
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v601, *(int *)(v5 + 60), 2);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v598, *(int *)(v5 + 60), 2);
          v479 = *(int *)(v5 + 28);
          CLiteMatrix::CLiteMatrix((CLiteMatrix *)v593, *(int *)(v5 + 40), *(int *)(v5 + 60));
          std::vector<CLiteMatrix>::vector(&v596, v479, (uint64_t)v593);
          std::vector<CLiteMatrix>::__vdeallocate(v590 + 12);
          *((_OWORD *)v590 + 6) = v596;
          *(_QWORD *)(v5 + 3960) = v597;
          v597 = 0;
          v596 = 0uLL;
          v612 = (void **)&v596;
          std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v612);
          if (v594)
          {
            v595 = v594;
            operator delete(v594);
          }
          if (*(_DWORD *)(v5 + 28))
          {
            v481 = 0;
            if (v269 <= 1)
              v482 = 1;
            else
              v482 = 0xCCCCCCCCCCCCCCCDLL * ((v267 - v268) >> 3);
            do
            {
              if (v267 != v268)
              {
                v483 = 0;
                do
                {
                  v484 = 0;
                  v485 = 1;
                  do
                  {
                    v486 = v485;
                    v487 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*v114 + 40 * v483), v484, v481);
                    *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v650, v483, v484) = v487;
                    CLiteMatrix::Get((CLiteMatrix *)(*v114 + 40 * v483), v484, v481);
                    v489 = *v488;
                    CLiteMatrix::Get((CLiteMatrix *)v650, v483, v484);
                    v485 = 0;
                    *v490 = v489;
                    v484 = 1;
                  }
                  while ((v486 & 1) != 0);
                  ++v483;
                }
                while (v483 != v482);
              }
              if (*(float *)(*(_QWORD *)(v5 + 3088) + 4 * v481) >= *(float *)(v5 + 196))
              {
                CLiteMatrix::MatrixMultiply((vDSP_Length *)(v590[12] + 40 * v481 - 40), (const CLiteMatrix *)__p, (const CLiteMatrix *)v616, v480);
                if (v267 != v268)
                {
                  v500 = 0;
                  do
                  {
                    v501 = 0;
                    v502 = 1;
                    do
                    {
                      v503 = v502;
                      v504 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v650, v500, v501);
                      CLiteMatrix::Get((CLiteMatrix *)v650, v500, v501);
                      v506 = v504 * v504 + *v505 * *v505;
                      CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      v508 = *v507;
                      v509 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      v510 = (float *)CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      v511 = atan2f(v508, v509);
                      v512 = v506 * cosf(v511);
                      *v510 = v512;
                      v513 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v650, v500, v501);
                      CLiteMatrix::Get((CLiteMatrix *)v650, v500, v501);
                      v515 = v513 * v513 + *v514 * *v514;
                      CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      v517 = *v516;
                      v518 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      CLiteMatrix::Get((CLiteMatrix *)v616, v501, v500);
                      v520 = v519;
                      v521 = atan2f(v517, v518);
                      v522 = sinf(v521);
                      v502 = 0;
                      v523 = v515 * v522;
                      *v520 = v523;
                      v501 = 1;
                    }
                    while ((v503 & 1) != 0);
                    ++v500;
                  }
                  while (v500 != v482);
                }
                CLiteMatrix::SetWithConjugateTranposeOfOther((CLiteMatrix *)cf, (const CLiteMatrix *)v616);
                CLiteMatrix::MatrixMultiply((vDSP_Length *)__p, (const CLiteMatrix *)cf, (const CLiteMatrix *)v598, v524);
                MatrixDecompositions::LinearSolverPLU((MatrixDecompositions *)&v625, (__CLPK_integer *)v619, (CLiteMatrix *)v598, (float **)v607);
                v525 = 0;
                LODWORD(v526) = *(_DWORD *)(v5 + 60);
                v527 = 1;
                do
                {
                  v528 = v527;
                  if ((_DWORD)v526)
                  {
                    v529 = 0;
                    do
                    {
                      v530 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v607, v529, v525);
                      *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v481), v525, v529) = v530;
                      CLiteMatrix::Get((CLiteMatrix *)v607, v529, v525);
                      v532 = *v531;
                      CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v481), v525, v529);
                      *v533 = v532;
                      ++v529;
                      v526 = *(int *)(v5 + 60);
                    }
                    while (v529 < v526);
                  }
                  v527 = 0;
                  v525 = 1;
                }
                while ((v528 & 1) != 0);
              }
              else
              {
                CLiteMatrix::MatrixMultiply((vDSP_Length *)__p, (const CLiteMatrix *)v650, (const CLiteMatrix *)v601, v480);
                MatrixDecompositions::LinearSolverPLU((MatrixDecompositions *)&v625, (__CLPK_integer *)v619, (CLiteMatrix *)v601, (float **)v607);
                v491 = 0;
                LODWORD(v492) = *(_DWORD *)(v5 + 60);
                v493 = 1;
                do
                {
                  v494 = v493;
                  if ((_DWORD)v492)
                  {
                    v495 = 0;
                    do
                    {
                      v496 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v607, v495, v491);
                      *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v481), v491, v495) = v496;
                      CLiteMatrix::Get((CLiteMatrix *)v607, v495, v491);
                      v498 = *v497;
                      CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v481), v491, v495);
                      *v499 = v498;
                      ++v495;
                      v492 = *(int *)(v5 + 60);
                    }
                    while (v495 < v492);
                  }
                  v493 = 0;
                  v491 = 1;
                }
                while ((v494 & 1) != 0);
              }
              ++v481;
            }
            while (v481 < *(int *)(v5 + 28));
          }
          if (v599)
          {
            v600 = v599;
            operator delete(v599);
          }
          v71 = v5 + 4720;
          v72 = v567;
          if (v602)
          {
            v603 = v602;
            operator delete(v602);
          }
          if (v605)
          {
            v606 = v605;
            operator delete(v605);
          }
          if (v608)
          {
            v609 = v608;
            operator delete(v608);
          }
          if (v614)
          {
            v615 = v614;
            operator delete(v614);
          }
          if (v617)
          {
            v618 = v617;
            operator delete(v617);
          }
          if (v651)
          {
            v652 = v651;
            operator delete(v651);
          }
          MatrixDecompositions::~MatrixDecompositions((MatrixDecompositions *)&v625);
          if (v620)
          {
            v621 = v620;
            operator delete(v620);
          }
          if (v623)
          {
            v624 = v623;
            operator delete(v623);
          }
          if (v610[0])
          {
            v610[1] = v610[0];
            operator delete(v610[0]);
          }
          HOA::~HOA((HOA *)&v649);
          if (v647)
          {
            v648 = v647;
            operator delete(v647);
          }
        }
        goto LABEL_412;
      }
    }
    v282 = *(_QWORD *)(v5 + 3880);
    v283 = *(_QWORD *)(v5 + 3872);
    HOA::HOA((uint64_t)&v625, *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 216));
    HOA::createEncoder((uint64_t)&v625, v5 + 3640, v5 + 3664);
    v284 = (v282 - v283) / 40;
    std::vector<float>::vector(v607, v284 * *(int *)(v5 + 60));
    memset(&v649, 0, 24);
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v649, (const void *)v626, *((uint64_t *)&v626 + 1), (uint64_t)(*((_QWORD *)&v626 + 1) - v626) >> 2);
    if (v607[0])
    {
      v607[1] = v607[0];
      operator delete(v607[0]);
    }
    *(_OWORD *)v607 = *(_OWORD *)v649.__x_;
    v608 = *(void **)&v649.__x_[4];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)__p, (v282 - v283) / 40, *(int *)(v5 + 60));
    LODWORD(v285) = *(_DWORD *)(v5 + 60);
    if (v282 != v283)
    {
      v286 = 0;
      v287 = 0;
      if (v284 <= 1)
        v288 = 1;
      else
        v288 = (v282 - v283) / 40;
      v289 = *(_DWORD *)(v5 + 60);
      do
      {
        if (v289)
        {
          v290 = 0;
          do
          {
            v291 = *(_DWORD *)((char *)v607[0] + 4 * v290 + v286);
            *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)__p, v287, v290++) = v291;
            v285 = *(int *)(v5 + 60);
          }
          while (v290 < v285);
          v289 = *(_DWORD *)(v5 + 60);
        }
        ++v287;
        v286 += 16;
      }
      while (v287 != v288);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)v622, (int)v285, (v282 - v283) / 40);
    bzero(&v649, 0x220uLL);
    MoorePenrose::setMandN((MoorePenrose *)&v649, (v282 - v283) / 40, *(int *)(v5 + 60));
    MoorePenrose::pseudoInverse((MoorePenrose *)&v649, (CLiteMatrix *)v622, (const CLiteMatrix *)__p);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)v619, (v282 - v283) / 40, *(int *)(v5 + 60));
    CLiteMatrix::SetWithTranposeOfOther((CLiteMatrix *)v619, (const CLiteMatrix *)v622);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)v650, 2, (v282 - v283) / 40);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)v616, 2, *(int *)(v5 + 60));
    v292 = *(int *)(v5 + 28);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)cf, *(int *)(v5 + 40), *(int *)(v5 + 60));
    std::vector<CLiteMatrix>::vector(&v604, v292, (uint64_t)cf);
    std::vector<CLiteMatrix>::__vdeallocate(v590 + 12);
    *((_OWORD *)v590 + 6) = v604;
    *(_QWORD *)(v5 + 3960) = v605;
    v605 = 0;
    v604 = 0uLL;
    v601[0] = (void **)&v604;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](v601);
    if (v614)
    {
      v615 = v614;
      operator delete(v614);
    }
    if (*(_DWORD *)(v5 + 28))
    {
      v294 = 0;
      if (v284 <= 1)
        v295 = 1;
      else
        v295 = (v282 - v283) / 40;
      do
      {
        if (v282 != v283)
        {
          v296 = 0;
          do
          {
            v297 = 0;
            v298 = 1;
            do
            {
              v299 = v298;
              v300 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v296), v297, v294);
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v650, v297, v296) = v300;
              CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3872) + 40 * v296), v297, v294);
              v302 = *v301;
              CLiteMatrix::Get((CLiteMatrix *)v650, v297, v296);
              v298 = 0;
              *v303 = v302;
              v297 = 1;
            }
            while ((v299 & 1) != 0);
            ++v296;
          }
          while (v296 != v295);
        }
        CLiteMatrix::MatrixMultiply((vDSP_Length *)v650, (const CLiteMatrix *)v619, (const CLiteMatrix *)v616, v293);
        v304 = 0;
        LODWORD(v305) = *(_DWORD *)(v5 + 60);
        v306 = 1;
        do
        {
          v307 = v306;
          if ((_DWORD)v305)
          {
            v308 = 0;
            do
            {
              v309 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v616, v304, v308);
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v294), v304, v308) = v309;
              CLiteMatrix::Get((CLiteMatrix *)v616, v304, v308);
              v311 = *v310;
              CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v5 + 3944) + 40 * v294), v304, v308);
              *v312 = v311;
              ++v308;
              v305 = *(int *)(v5 + 60);
            }
            while (v308 < v305);
          }
          v306 = 0;
          v304 = 1;
        }
        while ((v307 & 1) != 0);
        ++v294;
      }
      while (v294 < *(int *)(v5 + 28));
    }
    if (v617)
    {
      v618 = v617;
      operator delete(v617);
    }
    v71 = v5 + 4720;
    v72 = v567;
    if (v651)
    {
      v652 = v651;
      operator delete(v651);
    }
    if (v620)
    {
      v621 = v620;
      operator delete(v620);
    }
    MoorePenrose::~MoorePenrose((MoorePenrose *)&v649);
    if (v623)
    {
      v624 = v623;
      operator delete(v623);
    }
    if (v647)
    {
      v648 = v647;
      operator delete(v647);
    }
    if (v607[0])
    {
      v607[1] = v607[0];
      operator delete(v607[0]);
    }
    HOA::~HOA((HOA *)&v625);
  }
LABEL_412:
  switch(*(_DWORD *)(v5 + 128))
  {
    case 0:
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(_QWORD *)(v5 + 3208), 3);
      *(_OWORD *)(v5 + 4808) = *(_OWORD *)v649.__x_;
      v369 = *(void **)v544;
      if (*(_QWORD *)v544)
      {
        *(_QWORD *)(v5 + 4832) = v369;
        operator delete(v369);
        *(_QWORD *)v544 = 0;
        *((_QWORD *)v544 + 1) = 0;
        *((_QWORD *)v544 + 2) = 0;
      }
      *(_OWORD *)v544 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 4840) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, 3uLL);
      v370 = *(void **)v71;
      if (*(_QWORD *)v71)
      {
        *(_QWORD *)(v5 + 4728) = v370;
        operator delete(v370);
        *(_QWORD *)v71 = 0;
        *(_QWORD *)(v71 + 8) = 0;
        *(_QWORD *)(v71 + 16) = 0;
      }
      *(_OWORD *)(v5 + 4720) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 4736) = *(_QWORD *)&v649.__x_[4];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
      *v543 = *(_OWORD *)v649.__x_;
      v371 = *(void **)(v5 + 5056);
      if (v371)
      {
        *(_QWORD *)(v5 + 5064) = v371;
        operator delete(v371);
        *(_QWORD *)(v5 + 5056) = 0;
        *(_QWORD *)(v5 + 5064) = 0;
        *(_QWORD *)(v5 + 5072) = 0;
      }
      *(_OWORD *)(v5 + 5056) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 5072) = *(_QWORD *)&v649.__x_[8];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60) - 1);
      *v542 = *(_OWORD *)v649.__x_;
      v372 = v550;
      v373 = *(void **)v550;
      if (*(_QWORD *)v550)
      {
        *(_QWORD *)(v5 + 5104) = v373;
        operator delete(v373);
        v372 = v550;
        *(_QWORD *)v550 = 0;
        *((_QWORD *)v550 + 1) = 0;
        *((_QWORD *)v550 + 2) = 0;
      }
      *v372 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 5112) = *(_QWORD *)&v649.__x_[8];
      goto LABEL_497;
    case 1:
    case 2:
      v313 = operator new();
      v314 = *(int *)(v5 + 32);
      v315 = *(_QWORD *)(v5 + 3712);
      *(_OWORD *)(v313 + 8) = 0u;
      *(_OWORD *)(v313 + 56) = 0u;
      *(_OWORD *)(v313 + 24) = 0u;
      *(_OWORD *)(v313 + 40) = 0u;
      *(_OWORD *)(v313 + 72) = 0u;
      *(_OWORD *)(v313 + 88) = 0u;
      *(_QWORD *)v313 = v314;
      std::vector<unsigned long>::resize(v313 + 8, v314);
      std::vector<float>::resize(v313 + 80, v314);
      std::vector<float>::resize(v313 + 32, 3 * v314);
      std::vector<float>::resize(v313 + 56, v315);
      v316 = *(_QWORD **)(v5 + 8560);
      *(_QWORD *)(v5 + 8560) = v313;
      if (v316)
        std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](v316);
      std::vector<float>::resize(v5 + 8568, 2 * *(int *)(v5 + 32));
      std::vector<float>::resize(v5 + 3312, *(int *)(v5 + 60) * (uint64_t)*(int *)(v5 + 32));
      std::vector<float>::resize(v5 + 4648, *(int *)(v5 + 60) * (uint64_t)*(int *)(v5 + 32));
      std::vector<float>::resize(v5 + 4672, *(int *)(v5 + 60) * (uint64_t)*(int *)(v5 + 32));
      std::vector<float>::resize(v5 + 4360, 3 * *(int *)(v5 + 32));
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 3, *(int *)(v5 + 32));
      *(_OWORD *)(v5 + 7800) = *(_OWORD *)v649.__x_;
      v317 = v561;
      v319 = v561 + 10;
      v318 = (void *)v561[10];
      v320 = (CLiteMatrix *)(v5 + 3008);
      v321 = v5 + 6320;
      v322 = v562;
      v72 = v567;
      if (v318)
      {
        *(_QWORD *)(v5 + 7824) = v318;
        operator delete(v318);
        *v319 = 0;
        v561[11] = 0;
        v561[12] = 0;
      }
      *(_OWORD *)v319 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 7832) = *(_QWORD *)&v649.__x_[8];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 3, *(int *)(v5 + 32));
      *(_OWORD *)(v5 + 7840) = *(_OWORD *)v649.__x_;
      v323 = *(void **)(v5 + 7856);
      if (v323)
      {
        *(_QWORD *)(v5 + 7864) = v323;
        operator delete(v323);
        *(_QWORD *)(v5 + 7856) = 0;
        *(_QWORD *)(v5 + 7864) = 0;
        *(_QWORD *)(v5 + 7872) = 0;
      }
      *(_OWORD *)(v5 + 7856) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 7872) = *(_QWORD *)&v649.__x_[8];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 3, *(int *)(v5 + 32));
      *(_OWORD *)(v5 + 7880) = *(_OWORD *)v649.__x_;
      v325 = v561 + 20;
      v324 = (void *)v561[20];
      if (v324)
      {
        *(_QWORD *)(v5 + 7904) = v324;
        operator delete(v324);
        *v325 = 0;
        v561[21] = 0;
        v561[22] = 0;
      }
      *(_OWORD *)v325 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 7912) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, 2 * *(int *)(v5 + 32));
      v326 = *v547;
      if (*v547)
      {
        *(_QWORD *)(v5 + 5208) = v326;
        operator delete(v326);
        *v547 = 0;
        *(_QWORD *)(v5 + 5208) = 0;
        *(_QWORD *)(v5 + 5216) = 0;
      }
      *(_OWORD *)(v5 + 5200) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 5216) = *(_QWORD *)&v649.__x_[4];
      std::vector<float>::vector(&v649, *(int *)(v5 + 32));
      v327 = v552;
      v328 = *(void **)v552;
      if (*(_QWORD *)v552)
      {
        *(_QWORD *)(v5 + 5232) = v328;
        operator delete(v328);
        v327 = v552;
        *(_QWORD *)v552 = 0;
        *((_QWORD *)v552 + 1) = 0;
        *((_QWORD *)v552 + 2) = 0;
      }
      *v327 = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 5240) = *(_QWORD *)&v649.__x_[4];
      std::vector<float>::vector(&v649, *(int *)(v5 + 32));
      v329 = *v546;
      if (*v546)
      {
        *(_QWORD *)(v5 + 5256) = v329;
        operator delete(v329);
        *v546 = 0;
        *(_QWORD *)(v5 + 5256) = 0;
        *(_QWORD *)(v5 + 5264) = 0;
      }
      *(_OWORD *)(v5 + 5248) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 5264) = *(_QWORD *)&v649.__x_[4];
      std::vector<float>::vector(&v649, *(int *)(v5 + 60));
      v330 = *v545;
      if (*v545)
      {
        *(_QWORD *)(v5 + 6936) = v330;
        operator delete(v330);
        *v545 = 0;
        *(_QWORD *)(v5 + 6936) = 0;
        *(_QWORD *)(v5 + 6944) = 0;
      }
      *(_OWORD *)(v5 + 6928) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 6944) = *(_QWORD *)&v649.__x_[4];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
      *(_OWORD *)(v5 + 6488) = *(_OWORD *)v649.__x_;
      v332 = v566 + 26;
      v331 = (void *)v566[26];
      if (v331)
      {
        *(_QWORD *)(v5 + 6512) = v331;
        operator delete(v331);
        *v332 = 0;
        v566[27] = 0;
        v566[28] = 0;
      }
      *(_OWORD *)v332 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 6520) = *(_QWORD *)&v649.__x_[8];
      LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 3, 3);
      *(_OWORD *)(v5 + 6952) = *(_OWORD *)v649.__x_;
      v334 = v564 + 16;
      v333 = (void *)v564[16];
      if (v333)
      {
        *(_QWORD *)(v5 + 6976) = v333;
        operator delete(v333);
        *v334 = 0;
        v564[17] = 0;
        v564[18] = 0;
      }
      *(_OWORD *)v334 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 6984) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, 2uLL);
      v335 = v551;
      v336 = *(void **)v551;
      if (*(_QWORD *)v551)
      {
        *(_QWORD *)(v5 + 8544) = v336;
        operator delete(v336);
        v335 = v551;
        *(_QWORD *)v551 = 0;
        *((_QWORD *)v551 + 1) = 0;
        *((_QWORD *)v551 + 2) = 0;
      }
      *v335 = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 8552) = *(_QWORD *)&v649.__x_[4];
      if (*(_DWORD *)(v5 + 128) == 1)
      {
        std::vector<float>::vector(&v649, *(int *)(v5 + 32));
        v337 = *v539;
        if (*v539)
        {
          *(_QWORD *)(v5 + 5288) = v337;
          operator delete(v337);
          *v539 = 0;
          *(_QWORD *)(v5 + 5288) = 0;
          *(_QWORD *)(v5 + 5296) = 0;
        }
        *(_OWORD *)(v5 + 5280) = *(_OWORD *)v649.__x_;
        *(_QWORD *)(v5 + 5296) = *(_QWORD *)&v649.__x_[4];
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 60));
        *(_OWORD *)(v5 + 6552) = *(_OWORD *)v649.__x_;
        v338 = v549;
        v339 = *(void **)v549;
        if (*(_QWORD *)v549)
        {
          *(_QWORD *)(v5 + 6576) = v339;
          operator delete(v339);
          v338 = v549;
          *(_QWORD *)v549 = 0;
          *((_QWORD *)v549 + 1) = 0;
          *((_QWORD *)v549 + 2) = 0;
        }
        *v338 = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 6584) = *(_QWORD *)&v649.__x_[8];
        v340 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
        std::vector<CLiteMatrix>::vector(&v625, v340, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 6464));
        *(_OWORD *)(v5 + 6464) = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6480) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v341 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v341, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 6592));
        *(_OWORD *)(v5 + 6592) = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6608) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v342 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v342, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate(v538);
        *(_OWORD *)v538 = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6632) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v343 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v343, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 6640));
        *(_OWORD *)(v5 + 6640) = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6656) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v344 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 60));
        std::vector<CLiteMatrix>::vector(&v625, v344, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate(v537);
        *(_OWORD *)v537 = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6680) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v345 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, 1);
        std::vector<CLiteMatrix>::vector(&v625, v345, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 6768));
        *(_OWORD *)(v5 + 6768) = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6784) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v346 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v346, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate(v536);
        *(_OWORD *)v536 = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6808) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v347 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), 1);
        std::vector<CLiteMatrix>::vector(&v625, v347, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 6816));
        *(_OWORD *)(v5 + 6816) = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6832) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v348 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v348, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate(v564);
        *(_OWORD *)v564 = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6856) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
        v349 = *(int *)(v5 + 32);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        std::vector<CLiteMatrix>::vector(&v625, v349, (uint64_t)&v649);
        std::vector<CLiteMatrix>::__vdeallocate(v535);
        *(_OWORD *)v535 = *(_OWORD *)&v625.mChannelLayoutTag;
        *(_QWORD *)(v5 + 6920) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
        memset(&v625, 0, 24);
        __p[0] = &v625;
        std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*(_QWORD *)&v649.__x_[4])
        {
          *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
          operator delete(*(void **)&v649.__x_[4]);
        }
      }
      else
      {
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        *(_OWORD *)(v5 + 6688) = *(_OWORD *)v649.__x_;
        v376 = *(void **)(v5 + 6704);
        if (v376)
        {
          *(_QWORD *)(v5 + 6712) = v376;
          operator delete(v376);
          *(_QWORD *)(v5 + 6704) = 0;
          *(_QWORD *)(v5 + 6712) = 0;
          *(_QWORD *)(v5 + 6720) = 0;
        }
        *(_OWORD *)(v5 + 6704) = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 6720) = *(_QWORD *)&v649.__x_[8];
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 60));
        *(_OWORD *)(v5 + 6728) = *(_OWORD *)v649.__x_;
        v378 = v549 + 176;
        v377 = (void *)*((_QWORD *)v549 + 22);
        if (v377)
        {
          *(_QWORD *)(v5 + 6752) = v377;
          operator delete(v377);
          v378 = v549 + 176;
          *((_QWORD *)v549 + 22) = 0;
          *((_QWORD *)v549 + 23) = 0;
          *((_QWORD *)v549 + 24) = 0;
        }
        *v378 = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 6760) = *(_QWORD *)&v649.__x_[8];
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
        *(_OWORD *)(v5 + 6864) = *(_OWORD *)v649.__x_;
        v379 = *(void **)(v5 + 6880);
        if (v379)
        {
          *(_QWORD *)(v5 + 6888) = v379;
          operator delete(v379);
          *(_QWORD *)(v5 + 6880) = 0;
          *(_QWORD *)(v5 + 6888) = 0;
          *(_QWORD *)(v5 + 6896) = 0;
        }
        *(_OWORD *)(v5 + 6880) = *(_OWORD *)&v649.__x_[4];
        *(_QWORD *)(v5 + 6896) = *(_QWORD *)&v649.__x_[8];
      }
      break;
    case 3:
LABEL_497:
      v320 = (CLiteMatrix *)(v5 + 3008);
      v321 = v5 + 6320;
      std::vector<float>::vector(&v649, *(_QWORD *)(v5 + 3208));
      v322 = v562;
      v374 = v553;
      v375 = *(void **)v553;
      v317 = v561;
      if (*(_QWORD *)v553)
      {
        *(_QWORD *)(v5 + 4976) = v375;
        operator delete(v375);
        v374 = v553;
        *(_QWORD *)v553 = 0;
        *((_QWORD *)v553 + 1) = 0;
        *((_QWORD *)v553 + 2) = 0;
      }
      *v374 = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 4984) = *(_QWORD *)&v649.__x_[4];
      break;
    case 5:
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 112), *(int *)(v5 + 60));
      *(_OWORD *)(v5 + 3520) = *(_OWORD *)v649.__x_;
      v351 = *(void **)(v5 + 3536);
      if (v351)
      {
        *(_QWORD *)(v5 + 3544) = v351;
        operator delete(v351);
        *(_QWORD *)(v5 + 3536) = 0;
        *(_QWORD *)(v5 + 3544) = 0;
        *(_QWORD *)(v5 + 3552) = 0;
      }
      *(_OWORD *)(v5 + 3536) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 3552) = *(_QWORD *)&v649.__x_[8];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 112), 3);
      *(_OWORD *)(v5 + 4888) = *(_OWORD *)v649.__x_;
      v353 = v544 + 80;
      v352 = (void *)*((_QWORD *)v544 + 10);
      if (v352)
      {
        *(_QWORD *)(v5 + 4912) = v352;
        operator delete(v352);
        *v353 = 0;
        *((_QWORD *)v544 + 11) = 0;
        *((_QWORD *)v544 + 12) = 0;
      }
      *(_OWORD *)v353 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 4920) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, *(int *)(v5 + 112));
      v354 = v541;
      v355 = *(void **)v541;
      if (*(_QWORD *)v541)
      {
        *(_QWORD *)(v5 + 5024) = v355;
        operator delete(v355);
        v354 = v541;
        *(_QWORD *)v541 = 0;
        *((_QWORD *)v541 + 1) = 0;
        *((_QWORD *)v541 + 2) = 0;
      }
      *v354 = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 5032) = *(_QWORD *)&v649.__x_[4];
      ParametricProcessor::InitializeGridsAndAmbisonicEncoder(v5, (_OWORD **)(v5 + 3216), (float **)(v5 + 3240), (HOA *)*(unsigned int *)(v5 + 104), (float **)(v5 + 3264), (_QWORD *)(v5 + 3480), (unint64_t *)(v5 + 3336));
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(_QWORD *)(v5 + 3336), 3);
      *(_OWORD *)(v5 + 4848) = *(_OWORD *)v649.__x_;
      v356 = *(void **)(v5 + 4864);
      v320 = (CLiteMatrix *)(v5 + 3008);
      v321 = v5 + 6320;
      v322 = v562;
      v72 = v567;
      if (v356)
      {
        *(_QWORD *)(v5 + 4872) = v356;
        operator delete(v356);
        *(_QWORD *)(v5 + 4864) = 0;
        *(_QWORD *)(v5 + 4872) = 0;
        *(_QWORD *)(v5 + 4880) = 0;
      }
      *(_OWORD *)(v5 + 4864) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 4880) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, 3uLL);
      v357 = *v565;
      v317 = v561;
      if (*v565)
      {
        *(_QWORD *)(v5 + 4728) = v357;
        operator delete(v357);
        *v565 = 0;
        *(_QWORD *)(v5 + 4728) = 0;
        *(_QWORD *)(v5 + 4736) = 0;
      }
      *(_OWORD *)(v5 + 4720) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 4736) = *(_QWORD *)&v649.__x_[4];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60));
      *v543 = *(_OWORD *)v649.__x_;
      v358 = *(void **)(v5 + 5056);
      if (v358)
      {
        *(_QWORD *)(v5 + 5064) = v358;
        operator delete(v358);
        *(_QWORD *)(v5 + 5056) = 0;
        *(_QWORD *)(v5 + 5064) = 0;
        *(_QWORD *)(v5 + 5072) = 0;
      }
      *(_OWORD *)(v5 + 5056) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 5072) = *(_QWORD *)&v649.__x_[8];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 60) - 1);
      *v542 = *(_OWORD *)v649.__x_;
      v359 = v550;
      v360 = *(void **)v550;
      if (*(_QWORD *)v550)
      {
        *(_QWORD *)(v5 + 5104) = v360;
        operator delete(v360);
        v359 = v550;
        *(_QWORD *)v550 = 0;
        *((_QWORD *)v550 + 1) = 0;
        *((_QWORD *)v550 + 2) = 0;
      }
      *v359 = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 5112) = *(_QWORD *)&v649.__x_[8];
      std::vector<float>::vector(&v649, *(_QWORD *)(v5 + 3336));
      v361 = *v540;
      if (*v540)
      {
        *(_QWORD *)(v5 + 5000) = v361;
        operator delete(v361);
        *v540 = 0;
        *(_QWORD *)(v5 + 5000) = 0;
        *(_QWORD *)(v5 + 5008) = 0;
      }
      *(_OWORD *)(v5 + 4992) = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 5008) = *(_QWORD *)&v649.__x_[4];
      LiteMatrix<float>::LiteMatrix((uint64_t)&v649, *(int *)(v5 + 112), 1);
      *(_OWORD *)(v5 + 4272) = *(_OWORD *)v649.__x_;
      v362 = *(void **)(v5 + 4288);
      if (v362)
      {
        *(_QWORD *)(v5 + 4296) = v362;
        operator delete(v362);
        *(_QWORD *)(v5 + 4288) = 0;
        *(_QWORD *)(v5 + 4296) = 0;
        *(_QWORD *)(v5 + 4304) = 0;
      }
      *(_OWORD *)(v5 + 4288) = *(_OWORD *)&v649.__x_[4];
      *(_QWORD *)(v5 + 4304) = *(_QWORD *)&v649.__x_[8];
      v363 = *(int *)(v5 + 112);
      *(_QWORD *)&v625.mChannelLayoutTag = 0;
      std::vector<unsigned long>::vector(&v649, v363, &v625);
      v365 = v548 + 14;
      v364 = (void *)v548[14];
      if (v364)
      {
        *(_QWORD *)(v5 + 4320) = v364;
        operator delete(v364);
        v365 = v548 + 14;
        v548[14] = 0;
        v548[15] = 0;
        v548[16] = 0;
      }
      v366 = *(_QWORD *)v649.__x_;
      *v365 = *(_OWORD *)v649.__x_;
      *(_QWORD *)(v5 + 4328) = *(_QWORD *)&v649.__x_[4];
      v367 = *(unsigned int *)(v5 + 112);
      if ((int)v367 >= 1)
      {
        for (k = 0; k != v367; ++k)
          *(_QWORD *)(v366 + 8 * k) = k;
      }
      break;
    default:
      v320 = (CLiteMatrix *)(v5 + 3008);
      v321 = v5 + 6320;
      v322 = v562;
      if (getParametricProcessorLog(void)::onceToken != -1)
        dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
      v317 = v561;
      v350 = getParametricProcessorLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v649.__x_[0]) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v350, OS_LOG_TYPE_DEBUG, "AnalysisType enumeration not handled", (uint8_t *)&v649, 2u);
      }
      break;
  }
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, 1);
  *(_OWORD *)(v5 + 4384) = *(_OWORD *)v649.__x_;
  v380 = *(void **)(v5 + 4400);
  if (v380)
  {
    *(_QWORD *)(v5 + 4408) = v380;
    operator delete(v380);
    *(_QWORD *)(v5 + 4400) = 0;
    *(_QWORD *)(v5 + 4408) = 0;
    *(_QWORD *)(v5 + 4416) = 0;
  }
  *(_OWORD *)(v5 + 4400) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 4416) = *(_QWORD *)&v649.__x_[8];
  LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5376) = *(_OWORD *)v649.__x_;
  v381 = *(void **)(v5 + 5392);
  if (v381)
  {
    *(_QWORD *)(v5 + 5400) = v381;
    operator delete(v381);
    *(_QWORD *)(v5 + 5392) = 0;
    *(_QWORD *)(v5 + 5400) = 0;
    *(_QWORD *)(v5 + 5408) = 0;
  }
  *(_OWORD *)(v5 + 5392) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5408) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5416) = *(_OWORD *)v649.__x_;
  v383 = v575 + 80;
  v382 = (void *)*((_QWORD *)v575 + 10);
  if (v382)
  {
    *(_QWORD *)(v5 + 5440) = v382;
    operator delete(v382);
    *v383 = 0;
    *((_QWORD *)v575 + 11) = 0;
    *((_QWORD *)v575 + 12) = 0;
  }
  *(_OWORD *)v383 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5448) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 5456) = *(_OWORD *)v649.__x_;
  v384 = *(void **)(v5 + 5472);
  if (v384)
  {
    *(_QWORD *)(v5 + 5480) = v384;
    operator delete(v384);
    *(_QWORD *)(v5 + 5472) = 0;
    *(_QWORD *)(v5 + 5480) = 0;
    *(_QWORD *)(v5 + 5488) = 0;
  }
  *(_OWORD *)(v5 + 5472) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5488) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 5496) = *(_OWORD *)v649.__x_;
  v386 = v575 + 160;
  v385 = (void *)*((_QWORD *)v575 + 20);
  if (v385)
  {
    *(_QWORD *)(v5 + 5520) = v385;
    operator delete(v385);
    *v386 = 0;
    *((_QWORD *)v575 + 21) = 0;
    *((_QWORD *)v575 + 22) = 0;
  }
  *(_OWORD *)v386 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5528) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5536) = *(_OWORD *)v649.__x_;
  v387 = *(void **)(v5 + 5552);
  if (v387)
  {
    *(_QWORD *)(v5 + 5560) = v387;
    operator delete(v387);
    *(_QWORD *)(v5 + 5552) = 0;
    *(_QWORD *)(v5 + 5560) = 0;
    *(_QWORD *)(v5 + 5568) = 0;
  }
  *(_OWORD *)(v5 + 5552) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5568) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5576) = *(_OWORD *)v649.__x_;
  v389 = v575 + 240;
  v388 = (void *)*((_QWORD *)v575 + 30);
  v390 = v568;
  if (v388)
  {
    *(_QWORD *)(v5 + 5600) = v388;
    operator delete(v388);
    v389 = v575 + 240;
    *((_QWORD *)v575 + 30) = 0;
    *((_QWORD *)v575 + 31) = 0;
    *((_QWORD *)v575 + 32) = 0;
  }
  *v389 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5608) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5616) = *(_OWORD *)v649.__x_;
  v391 = *(void **)(v5 + 5632);
  if (v391)
  {
    *(_QWORD *)(v5 + 5640) = v391;
    operator delete(v391);
    *(_QWORD *)(v5 + 5632) = 0;
    *(_QWORD *)(v5 + 5640) = 0;
    *(_QWORD *)(v5 + 5648) = 0;
    v390 = v568;
  }
  *(_OWORD *)(v5 + 5632) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5648) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5656) = *(_OWORD *)v649.__x_;
  v392 = (void *)*v390;
  if (*v390)
  {
    *(_QWORD *)(v5 + 5680) = v392;
    operator delete(v392);
    *v390 = 0;
    v390[1] = 0;
    v390[2] = 0;
  }
  *(_OWORD *)v390 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5688) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5720) = *(_OWORD *)v649.__x_;
  v395 = (void *)v390[8];
  v394 = v390 + 8;
  v393 = v395;
  if (v395)
  {
    *(_QWORD *)(v5 + 5744) = v393;
    operator delete(v393);
    *v394 = 0;
    v394[1] = 0;
    v394[2] = 0;
  }
  *(_OWORD *)v394 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5752) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
  *(_OWORD *)(v5 + 5760) = *(_OWORD *)v649.__x_;
  v396 = *(void **)(v5 + 5776);
  if (v396)
  {
    *(_QWORD *)(v5 + 5784) = v396;
    operator delete(v396);
    *(_QWORD *)(v5 + 5776) = 0;
    *(_QWORD *)(v5 + 5784) = 0;
    *(_QWORD *)(v5 + 5792) = 0;
  }
  *(_OWORD *)(v5 + 5776) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5792) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5800) = *(_OWORD *)v649.__x_;
  v398 = v568 + 18;
  v397 = (void *)v568[18];
  if (v397)
  {
    *(_QWORD *)(v5 + 5824) = v397;
    operator delete(v397);
    *v398 = 0;
    v568[19] = 0;
    v568[20] = 0;
  }
  *(_OWORD *)v398 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5832) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 5840) = *(_OWORD *)v649.__x_;
  v399 = *(void **)(v5 + 5856);
  if (v399)
  {
    *(_QWORD *)(v5 + 5864) = v399;
    operator delete(v399);
    *(_QWORD *)(v5 + 5856) = 0;
    *(_QWORD *)(v5 + 5864) = 0;
    *(_QWORD *)(v5 + 5872) = 0;
  }
  *(_OWORD *)(v5 + 5856) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5872) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5880) = *(_OWORD *)v649.__x_;
  v401 = v568 + 28;
  v400 = (void *)v568[28];
  if (v400)
  {
    *(_QWORD *)(v5 + 5904) = v400;
    operator delete(v400);
    *v401 = 0;
    v568[29] = 0;
    v568[30] = 0;
  }
  *(_OWORD *)v401 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5912) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5920) = *(_OWORD *)v649.__x_;
  v402 = *(void **)(v5 + 5936);
  if (v402)
  {
    *(_QWORD *)(v5 + 5944) = v402;
    operator delete(v402);
    *(_QWORD *)(v5 + 5936) = 0;
    *(_QWORD *)(v5 + 5944) = 0;
    *(_QWORD *)(v5 + 5952) = 0;
  }
  *(_OWORD *)(v5 + 5936) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5952) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 5960) = *(_OWORD *)v649.__x_;
  v403 = *(void **)v72;
  if (*(_QWORD *)v72)
  {
    *(_QWORD *)(v5 + 5984) = v403;
    operator delete(v403);
    *(_QWORD *)v72 = 0;
    *((_QWORD *)v72 + 1) = 0;
    *((_QWORD *)v72 + 2) = 0;
  }
  *(_OWORD *)v72 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 5992) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 6000) = *(_OWORD *)v649.__x_;
  v404 = *(void **)(v5 + 6016);
  if (v404)
  {
    *(_QWORD *)(v5 + 6024) = v404;
    operator delete(v404);
    *(_QWORD *)(v5 + 6016) = 0;
    *(_QWORD *)(v5 + 6024) = 0;
    *(_QWORD *)(v5 + 6032) = 0;
  }
  *(_OWORD *)(v5 + 6016) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6032) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
  *(_OWORD *)(v5 + 6040) = *(_OWORD *)v649.__x_;
  v406 = v72 + 80;
  v405 = (void *)*((_QWORD *)v72 + 10);
  if (v405)
  {
    *(_QWORD *)(v5 + 6064) = v405;
    operator delete(v405);
    *v406 = 0;
    *((_QWORD *)v72 + 11) = 0;
    *((_QWORD *)v72 + 12) = 0;
  }
  *(_OWORD *)v406 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6072) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 6080) = *(_OWORD *)v649.__x_;
  v407 = *(void **)(v5 + 6096);
  if (v407)
  {
    *(_QWORD *)(v5 + 6104) = v407;
    operator delete(v407);
    *(_QWORD *)(v5 + 6096) = 0;
    *(_QWORD *)(v5 + 6104) = 0;
    *(_QWORD *)(v5 + 6112) = 0;
  }
  *(_OWORD *)(v5 + 6096) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6112) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 6120) = *(_OWORD *)v649.__x_;
  v409 = v72 + 160;
  v408 = (void *)*((_QWORD *)v72 + 20);
  if (v408)
  {
    *(_QWORD *)(v5 + 6144) = v408;
    operator delete(v408);
    *v409 = 0;
    *((_QWORD *)v72 + 21) = 0;
    *((_QWORD *)v72 + 22) = 0;
  }
  *(_OWORD *)v409 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6152) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 6160) = *(_OWORD *)v649.__x_;
  v410 = *(void **)(v5 + 6176);
  if (v410)
  {
    *(_QWORD *)(v5 + 6184) = v410;
    operator delete(v410);
    *(_QWORD *)(v5 + 6176) = 0;
    *(_QWORD *)(v5 + 6184) = 0;
    *(_QWORD *)(v5 + 6192) = 0;
  }
  *(_OWORD *)(v5 + 6176) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6192) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 6200) = *(_OWORD *)v649.__x_;
  v413 = (void *)*((_QWORD *)v72 + 30);
  v412 = v72 + 240;
  v411 = v413;
  if (v413)
  {
    *(_QWORD *)(v5 + 6224) = v411;
    operator delete(v411);
    *v412 = 0;
    v412[1] = 0;
    v412[2] = 0;
  }
  *(_OWORD *)v412 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6232) = *(_QWORD *)&v649.__x_[8];
  LiteMatrix<float>::LiteMatrix((uint64_t)&v649, 1, *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 6240) = *(_OWORD *)v649.__x_;
  v414 = *(void **)(v5 + 6256);
  if (v414)
  {
    *(_QWORD *)(v5 + 6264) = v414;
    operator delete(v414);
    *(_QWORD *)(v5 + 6256) = 0;
    *(_QWORD *)(v5 + 6264) = 0;
    *(_QWORD *)(v5 + 6272) = 0;
  }
  *(_OWORD *)(v5 + 6256) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6272) = *(_QWORD *)&v649.__x_[8];
  std::vector<float>::vector(&v649, *(int *)(v5 + 32));
  v415 = *(void **)v321;
  if (*(_QWORD *)v321)
  {
    *(_QWORD *)(v5 + 6328) = v415;
    operator delete(v415);
    *(_QWORD *)v321 = 0;
    *(_QWORD *)(v321 + 8) = 0;
    *(_QWORD *)(v321 + 16) = 0;
  }
  *(_OWORD *)(v5 + 6320) = *(_OWORD *)v649.__x_;
  *(_QWORD *)(v5 + 6336) = *(_QWORD *)&v649.__x_[4];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 60));
  *(_OWORD *)(v5 + 6344) = *(_OWORD *)v649.__x_;
  v417 = v566 + 8;
  v416 = (void *)v566[8];
  if (v416)
  {
    *(_QWORD *)(v5 + 6368) = v416;
    operator delete(v416);
    *v417 = 0;
    v566[9] = 0;
    v566[10] = 0;
  }
  *(_OWORD *)v417 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6376) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 60), 1);
  *(_OWORD *)(v5 + 6384) = *(_OWORD *)v649.__x_;
  v418 = *(void **)(v5 + 6400);
  if (v418)
  {
    *(_QWORD *)(v5 + 6408) = v418;
    operator delete(v418);
    *(_QWORD *)(v5 + 6400) = 0;
    *(_QWORD *)(v5 + 6408) = 0;
    *(_QWORD *)(v5 + 6416) = 0;
  }
  *(_OWORD *)(v5 + 6400) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6416) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 2, 1);
  *(_OWORD *)(v5 + 6424) = *(_OWORD *)v649.__x_;
  v420 = v566 + 18;
  v419 = (void *)v566[18];
  if (v419)
  {
    *(_QWORD *)(v5 + 6448) = v419;
    operator delete(v419);
    *v420 = 0;
    v566[19] = 0;
    v566[20] = 0;
  }
  *(_OWORD *)v420 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 6456) = *(_QWORD *)&v649.__x_[8];
  v421 = *(int *)(v5 + 28);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 32));
  std::vector<CLiteMatrix>::vector(&v625, v421, (uint64_t)&v649);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 7472));
  *(_OWORD *)(v5 + 7472) = *(_OWORD *)&v625.mChannelLayoutTag;
  *(_QWORD *)(v5 + 7488) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
  memset(&v625, 0, 24);
  __p[0] = &v625;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*(_QWORD *)&v649.__x_[4])
  {
    *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
    operator delete(*(void **)&v649.__x_[4]);
  }
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 7520) = *(_OWORD *)v649.__x_;
  v422 = *(void **)(v5 + 7536);
  if (v422)
  {
    *(_QWORD *)(v5 + 7544) = v422;
    operator delete(v422);
    *(_QWORD *)(v5 + 7536) = 0;
    *(_QWORD *)(v5 + 7544) = 0;
    *(_QWORD *)(v5 + 7552) = 0;
  }
  *(_OWORD *)(v5 + 7536) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7552) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 7560) = *(_OWORD *)v649.__x_;
  v424 = v322 + 128;
  v423 = (void *)*((_QWORD *)v322 + 16);
  if (v423)
  {
    *(_QWORD *)(v5 + 7584) = v423;
    operator delete(v423);
    *v424 = 0;
    *((_QWORD *)v322 + 17) = 0;
    *((_QWORD *)v322 + 18) = 0;
  }
  *(_OWORD *)v424 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7592) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 36));
  *(_OWORD *)(v5 + 7600) = *(_OWORD *)v649.__x_;
  v425 = *(void **)(v5 + 7616);
  if (v425)
  {
    *(_QWORD *)(v5 + 7624) = v425;
    operator delete(v425);
    *(_QWORD *)(v5 + 7616) = 0;
    *(_QWORD *)(v5 + 7624) = 0;
    *(_QWORD *)(v5 + 7632) = 0;
  }
  *(_OWORD *)(v5 + 7616) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7632) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 7680) = *(_OWORD *)v649.__x_;
  v426 = *(void **)(v5 + 7696);
  if (v426)
  {
    *(_QWORD *)(v5 + 7704) = v426;
    operator delete(v426);
    *(_QWORD *)(v5 + 7696) = 0;
    *(_QWORD *)(v5 + 7704) = 0;
    *(_QWORD *)(v5 + 7712) = 0;
  }
  *(_OWORD *)(v5 + 7696) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7712) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
  *(_OWORD *)(v5 + 7720) = *(_OWORD *)v649.__x_;
  v427 = (void *)*v317;
  if (*v317)
  {
    *(_QWORD *)(v5 + 7744) = v427;
    operator delete(v427);
    *v317 = 0;
    v317[1] = 0;
    v317[2] = 0;
  }
  *(_OWORD *)v317 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7752) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
  *(_OWORD *)(v5 + 8496) = *(_OWORD *)v649.__x_;
  v428 = *(void **)(v5 + 8512);
  if (v428)
  {
    *(_QWORD *)(v5 + 8520) = v428;
    operator delete(v428);
    *(_QWORD *)(v5 + 8512) = 0;
    *(_QWORD *)(v5 + 8520) = 0;
    *(_QWORD *)(v5 + 8528) = 0;
  }
  *(_OWORD *)(v5 + 8512) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 8528) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 36));
  *(_OWORD *)(v5 + 7920) = *(_OWORD *)v649.__x_;
  v429 = *(void **)(v5 + 7936);
  if (v429)
  {
    *(_QWORD *)(v5 + 7944) = v429;
    operator delete(v429);
    *(_QWORD *)(v5 + 7936) = 0;
    *(_QWORD *)(v5 + 7944) = 0;
    *(_QWORD *)(v5 + 7952) = 0;
  }
  *(_OWORD *)(v5 + 7936) = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7952) = *(_QWORD *)&v649.__x_[8];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 36));
  *(_OWORD *)(v5 + 7960) = *(_OWORD *)v649.__x_;
  v432 = (void *)v317[30];
  v431 = v317 + 30;
  v430 = v432;
  if (v432)
  {
    *(_QWORD *)(v5 + 7984) = v430;
    operator delete(v430);
    *v431 = 0;
    v431[1] = 0;
    v431[2] = 0;
  }
  *(_OWORD *)v431 = *(_OWORD *)&v649.__x_[4];
  *(_QWORD *)(v5 + 7992) = *(_QWORD *)&v649.__x_[8];
  if (*(_BYTE *)(v5 + 188))
  {
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), 1);
    *(_OWORD *)v320 = *(_OWORD *)v649.__x_;
    v433 = *(void **)(v5 + 3024);
    if (v433)
    {
      *(_QWORD *)(v5 + 3032) = v433;
      operator delete(v433);
      *(_QWORD *)(v5 + 3024) = 0;
      *(_QWORD *)(v5 + 3032) = 0;
      *(_QWORD *)(v5 + 3040) = 0;
    }
    *(_OWORD *)(v5 + 3024) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 3040) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), 1);
    *(_OWORD *)(v5 + 3048) = *(_OWORD *)v649.__x_;
    v434 = *(void **)(v5 + 3064);
    if (v434)
    {
      *(_QWORD *)(v5 + 3072) = v434;
      operator delete(v434);
      *v555 = 0;
      v555[1] = 0;
      v555[2] = 0;
    }
    *(_OWORD *)v555 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 3080) = *(_QWORD *)&v649.__x_[8];
    LODWORD(v435) = *(_DWORD *)(v5 + 32);
    if ((int)v435 >= 1)
    {
      v436 = 0;
      do
      {
        v437 = (float *)CLiteMatrix::Get(v320, v436, 0);
        v438 = ((double)(int)v436 + 1.0) / (double)(int)v435;
        *v437 = v438;
        v439 = *(float *)CLiteMatrix::Get(v320, v436, 0);
        *(float *)CLiteMatrix::Get((CLiteMatrix *)(v5 + 3048), v436++, 0) = 1.0 - v439;
        v435 = *(int *)(v5 + 32);
      }
      while (v436 < v435);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 6992) = *(_OWORD *)v649.__x_;
    v440 = *(void **)(v5 + 7008);
    if (v440)
    {
      *(_QWORD *)(v5 + 7016) = v440;
      operator delete(v440);
      *(_QWORD *)(v5 + 7008) = 0;
      *(_QWORD *)(v5 + 7016) = 0;
      *(_QWORD *)(v5 + 7024) = 0;
    }
    *(_OWORD *)(v5 + 7008) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7024) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7032) = *(_OWORD *)v649.__x_;
    v442 = v564 + 26;
    v441 = (void *)v564[26];
    if (v441)
    {
      *(_QWORD *)(v5 + 7056) = v441;
      operator delete(v441);
      *v442 = 0;
      v564[27] = 0;
      v564[28] = 0;
    }
    *(_OWORD *)v442 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7064) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7072) = *(_OWORD *)v649.__x_;
    v443 = *(void **)(v5 + 7088);
    if (v443)
    {
      *(_QWORD *)(v5 + 7096) = v443;
      operator delete(v443);
      *(_QWORD *)(v5 + 7088) = 0;
      *(_QWORD *)(v5 + 7096) = 0;
      *(_QWORD *)(v5 + 7104) = 0;
    }
    *(_OWORD *)(v5 + 7088) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7104) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7112) = *(_OWORD *)v649.__x_;
    v444 = *(void **)v554;
    if (*(_QWORD *)v554)
    {
      *(_QWORD *)(v5 + 7136) = v444;
      operator delete(v444);
      *(_QWORD *)v554 = 0;
      *((_QWORD *)v554 + 1) = 0;
      *((_QWORD *)v554 + 2) = 0;
    }
    *(_OWORD *)v554 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7144) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 7152) = *(_OWORD *)v649.__x_;
    v445 = *(void **)(v5 + 7168);
    if (v445)
    {
      *(_QWORD *)(v5 + 7176) = v445;
      operator delete(v445);
      *(_QWORD *)(v5 + 7168) = 0;
      *(_QWORD *)(v5 + 7176) = 0;
      *(_QWORD *)(v5 + 7184) = 0;
    }
    *(_OWORD *)(v5 + 7168) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7184) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7192) = *(_OWORD *)v649.__x_;
    v447 = v554 + 80;
    v446 = (void *)*((_QWORD *)v554 + 10);
    if (v446)
    {
      *(_QWORD *)(v5 + 7216) = v446;
      operator delete(v446);
      *v447 = 0;
      *((_QWORD *)v554 + 11) = 0;
      *((_QWORD *)v554 + 12) = 0;
    }
    *(_OWORD *)v447 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7224) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7232) = *(_OWORD *)v649.__x_;
    v448 = *(void **)(v5 + 7248);
    if (v448)
    {
      *(_QWORD *)(v5 + 7256) = v448;
      operator delete(v448);
      *(_QWORD *)(v5 + 7248) = 0;
      *(_QWORD *)(v5 + 7256) = 0;
      *(_QWORD *)(v5 + 7264) = 0;
    }
    *(_OWORD *)(v5 + 7248) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7264) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7272) = *(_OWORD *)v649.__x_;
    v450 = v554 + 160;
    v449 = (void *)*((_QWORD *)v554 + 20);
    if (v449)
    {
      *(_QWORD *)(v5 + 7296) = v449;
      operator delete(v449);
      *v450 = 0;
      *((_QWORD *)v554 + 21) = 0;
      *((_QWORD *)v554 + 22) = 0;
    }
    *(_OWORD *)v450 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7304) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 32), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 7312) = *(_OWORD *)v649.__x_;
    v451 = *(void **)(v5 + 7328);
    if (v451)
    {
      *(_QWORD *)(v5 + 7336) = v451;
      operator delete(v451);
      *(_QWORD *)(v5 + 7328) = 0;
      *(_QWORD *)(v5 + 7336) = 0;
      *(_QWORD *)(v5 + 7344) = 0;
    }
    *(_OWORD *)(v5 + 7328) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7344) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, 1, *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 7352) = *(_OWORD *)v649.__x_;
    v453 = v554 + 240;
    v452 = (void *)*((_QWORD *)v554 + 30);
    if (v452)
    {
      *(_QWORD *)(v5 + 7376) = v452;
      operator delete(v452);
      *v453 = 0;
      *((_QWORD *)v554 + 31) = 0;
      *((_QWORD *)v554 + 32) = 0;
    }
    *(_OWORD *)v453 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7384) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 7392) = *(_OWORD *)v649.__x_;
    v454 = *(void **)(v5 + 7408);
    if (v454)
    {
      *(_QWORD *)(v5 + 7416) = v454;
      operator delete(v454);
      *(_QWORD *)(v5 + 7408) = 0;
      *(_QWORD *)(v5 + 7416) = 0;
      *(_QWORD *)(v5 + 7424) = 0;
    }
    *(_OWORD *)(v5 + 7408) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7424) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 7432) = *(_OWORD *)v649.__x_;
    v455 = *(void **)v322;
    if (*(_QWORD *)v322)
    {
      *(_QWORD *)(v5 + 7456) = v455;
      operator delete(v455);
      *(_QWORD *)v322 = 0;
      *((_QWORD *)v322 + 1) = 0;
      *((_QWORD *)v322 + 2) = 0;
    }
    *(_OWORD *)v322 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7464) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 32));
    *(_OWORD *)(v5 + 7760) = *(_OWORD *)v649.__x_;
    v456 = *(void **)(v5 + 7776);
    if (v456)
    {
      *(_QWORD *)(v5 + 7784) = v456;
      operator delete(v456);
      *(_QWORD *)(v5 + 7776) = 0;
      *(_QWORD *)(v5 + 7784) = 0;
      *(_QWORD *)(v5 + 7792) = 0;
    }
    *(_OWORD *)(v5 + 7776) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 7792) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 36));
    *(_OWORD *)(v5 + 8000) = *(_OWORD *)v649.__x_;
    v457 = *(void **)(v5 + 8016);
    if (v457)
    {
      *(_QWORD *)(v5 + 8024) = v457;
      operator delete(v457);
      *(_QWORD *)(v5 + 8016) = 0;
      *(_QWORD *)(v5 + 8024) = 0;
      *(_QWORD *)(v5 + 8032) = 0;
    }
    *(_OWORD *)(v5 + 8016) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8032) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 36), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8040) = *(_OWORD *)v649.__x_;
    v458 = *(void **)v556;
    if (*(_QWORD *)v556)
    {
      *(_QWORD *)(v5 + 8064) = v458;
      operator delete(v458);
      *(_QWORD *)v556 = 0;
      *((_QWORD *)v556 + 1) = 0;
      *((_QWORD *)v556 + 2) = 0;
    }
    *(_OWORD *)v556 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8072) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8080) = *(_OWORD *)v649.__x_;
    v459 = *(void **)(v5 + 8096);
    if (v459)
    {
      *(_QWORD *)(v5 + 8104) = v459;
      operator delete(v459);
      *(_QWORD *)(v5 + 8096) = 0;
      *(_QWORD *)(v5 + 8104) = 0;
      *(_QWORD *)(v5 + 8112) = 0;
    }
    *(_OWORD *)(v5 + 8096) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8112) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8120) = *(_OWORD *)v649.__x_;
    v461 = v556 + 80;
    v460 = (void *)*((_QWORD *)v556 + 10);
    if (v460)
    {
      *(_QWORD *)(v5 + 8144) = v460;
      operator delete(v460);
      *v461 = 0;
      *((_QWORD *)v556 + 11) = 0;
      *((_QWORD *)v556 + 12) = 0;
    }
    *(_OWORD *)v461 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8152) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::Eye((CLiteMatrix *)&v649, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8160) = *(_OWORD *)v649.__x_;
    v462 = *(void **)(v5 + 8176);
    if (v462)
    {
      *(_QWORD *)(v5 + 8184) = v462;
      operator delete(v462);
      *(_QWORD *)(v5 + 8176) = 0;
      *(_QWORD *)(v5 + 8184) = 0;
      *(_QWORD *)(v5 + 0x2000) = 0;
    }
    *(_OWORD *)(v5 + 8176) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 0x2000) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8200) = *(_OWORD *)v649.__x_;
    v464 = v556 + 160;
    v463 = (void *)*((_QWORD *)v556 + 20);
    if (v463)
    {
      *(_QWORD *)(v5 + 8224) = v463;
      operator delete(v463);
      *v464 = 0;
      *((_QWORD *)v556 + 21) = 0;
      *((_QWORD *)v556 + 22) = 0;
    }
    *(_OWORD *)v464 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8232) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8240) = *(_OWORD *)v649.__x_;
    v465 = *(void **)(v5 + 8256);
    if (v465)
    {
      *(_QWORD *)(v5 + 8264) = v465;
      operator delete(v465);
      *(_QWORD *)(v5 + 8256) = 0;
      *(_QWORD *)(v5 + 8264) = 0;
      *(_QWORD *)(v5 + 8272) = 0;
    }
    *(_OWORD *)(v5 + 8256) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8272) = *(_QWORD *)&v649.__x_[8];
    v466 = *(int *)(v5 + 28);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    std::vector<CLiteMatrix>::vector(&v625, v466, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate(v557);
    *(_OWORD *)v557 = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 8296) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    v467 = *(int *)(v5 + 28);
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    std::vector<CLiteMatrix>::vector(&v625, v467, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 8304));
    *(_OWORD *)(v5 + 8304) = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 8320) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    v468 = *(int *)(v5 + 28);
    CLiteMatrix::Eye((CLiteMatrix *)&v649, *(int *)(v5 + 40));
    std::vector<CLiteMatrix>::vector(&v625, v468, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate(v558);
    *(_OWORD *)v558 = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 8344) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    v469 = *(int *)(v5 + 28);
    CLiteMatrix::Eye((CLiteMatrix *)&v649, *(int *)(v5 + 40));
    std::vector<CLiteMatrix>::vector(&v625, v469, (uint64_t)&v649);
    std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(v5 + 8352));
    *(_OWORD *)(v5 + 8352) = *(_OWORD *)&v625.mChannelLayoutTag;
    *(_QWORD *)(v5 + 8368) = *(_QWORD *)&v625.mChannelDescriptions[0].mChannelFlags;
    memset(&v625, 0, 24);
    __p[0] = &v625;
    std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(_QWORD *)&v649.__x_[4])
    {
      *(_QWORD *)&v649.__x_[6] = *(_QWORD *)&v649.__x_[4];
      operator delete(*(void **)&v649.__x_[4]);
    }
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8376) = *(_OWORD *)v649.__x_;
    v471 = v558 + 8;
    v470 = (void *)v558[8];
    if (v470)
    {
      *(_QWORD *)(v5 + 8400) = v470;
      operator delete(v470);
      *v471 = 0;
      v558[9] = 0;
      v558[10] = 0;
    }
    *(_OWORD *)v471 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8408) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v649, *(int *)(v5 + 40), *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8416) = *(_OWORD *)v649.__x_;
    v472 = *(void **)(v5 + 8432);
    if (v472)
    {
      *(_QWORD *)(v5 + 8440) = v472;
      operator delete(v472);
      *(_QWORD *)(v5 + 8432) = 0;
      *(_QWORD *)(v5 + 8440) = 0;
      *(_QWORD *)(v5 + 8448) = 0;
    }
    *(_OWORD *)(v5 + 8432) = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8448) = *(_QWORD *)&v649.__x_[8];
    CLiteMatrix::Eye((CLiteMatrix *)&v649, *(int *)(v5 + 40));
    *(_OWORD *)(v5 + 8456) = *(_OWORD *)v649.__x_;
    v474 = v558 + 18;
    v473 = (void *)v558[18];
    if (v473)
    {
      *(_QWORD *)(v5 + 8480) = v473;
      operator delete(v473);
      *v474 = 0;
      v558[19] = 0;
      v558[20] = 0;
    }
    *(_OWORD *)v474 = *(_OWORD *)&v649.__x_[4];
    *(_QWORD *)(v5 + 8488) = *(_QWORD *)&v649.__x_[8];
  }
  if (getParametricProcessorLog(void)::onceToken != -1)
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
  v475 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v476 = *(float *)(v5 + 4);
    v477 = *(float *)(v5 + 8);
    v478 = *(float *)(v5 + 124);
    v649.__x_[0] = 134218496;
    *(double *)&v649.__x_[1] = v476;
    LOWORD(v649.__x_[3]) = 2048;
    *(double *)((char *)&v649.__x_[3] + 2) = v477;
    HIWORD(v649.__x_[5]) = 2048;
    *(double *)&v649.__x_[6] = v478;
    _os_log_debug_impl(&dword_1B5ED0000, v475, OS_LOG_TYPE_DEBUG, "[Parameters set to (%f, %f, %f)]", (uint8_t *)&v649, 0x20u);
  }
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)v591);
}

void sub_1B622A768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, MatrixDecompositions *a13, HOA **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29,unint64_t a30,void **a31,void **a32,VBAP **a33,void **a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,void **a54,void **a55)
{
  ParametricProcessor::pars *v55;
  uint64_t v56;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  unint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  unint64_t v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  covarianceBasedAdaptiveFilter *v172;
  RotationUtilities *v173;
  void *v174;
  void *v175;
  HOA **v176;
  uint64_t v177;
  unint64_t v178;
  void **v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  void *v183;
  void *v184;

  v58 = (void *)STACK[0x548];
  if (STACK[0x548])
  {
    STACK[0x550] = (unint64_t)v58;
    operator delete(v58);
  }
  v59 = (void *)STACK[0x590];
  if (STACK[0x590])
  {
    STACK[0x598] = (unint64_t)v59;
    operator delete(v59);
  }
  v60 = (void *)STACK[0x5B8];
  if (STACK[0x5B8])
  {
    STACK[0x5C0] = (unint64_t)v60;
    operator delete(v60);
  }
  v61 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v61;
    operator delete(v61);
  }
  v62 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v62;
    operator delete(v62);
  }
  v63 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v63;
    operator delete(v63);
  }
  v64 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v64;
    operator delete(v64);
  }
  v65 = *(void **)(v56 - 176);
  if (v65)
  {
    *(_QWORD *)(v56 - 168) = v65;
    operator delete(v65);
  }
  MatrixDecompositions::~MatrixDecompositions((MatrixDecompositions *)&STACK[0x700]);
  v66 = (void *)STACK[0x6B0];
  if (STACK[0x6B0])
  {
    STACK[0x6B8] = (unint64_t)v66;
    operator delete(v66);
  }
  v67 = (void *)STACK[0x6E0];
  if (STACK[0x6E0])
  {
    STACK[0x6E8] = (unint64_t)v67;
    operator delete(v67);
  }
  v68 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v68;
    operator delete(v68);
  }
  HOA::~HOA((HOA *)&STACK[0x8C0]);
  v69 = (void *)STACK[0x8A0];
  if (STACK[0x8A0])
  {
    STACK[0x8A8] = (unint64_t)v69;
    operator delete(v69);
  }
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&STACK[0x450]);
  v70 = (void **)STACK[0x3B0];
  v71 = *a49;
  if (*a49)
  {
    *((_QWORD *)v55 + 1072) = v71;
    operator delete(v71);
  }
  v72 = (_QWORD *)*((_QWORD *)v55 + 1070);
  *((_QWORD *)v55 + 1070) = 0;
  if (v72)
    std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](v72);
  v73 = *a53;
  if (*a53)
  {
    *((_QWORD *)v55 + 1068) = v73;
    operator delete(v73);
  }
  v74 = (void *)*((_QWORD *)v55 + 1064);
  if (v74)
  {
    *((_QWORD *)v55 + 1065) = v74;
    operator delete(v74);
  }
  v75 = (void *)*((_QWORD *)v55 + 1059);
  if (v75)
  {
    *((_QWORD *)v55 + 1060) = v75;
    operator delete(v75);
  }
  v76 = (void *)*((_QWORD *)v55 + 1054);
  if (v76)
  {
    *((_QWORD *)v55 + 1055) = v76;
    operator delete(v76);
  }
  v77 = (void *)*((_QWORD *)v55 + 1049);
  if (v77)
  {
    *((_QWORD *)v55 + 1050) = v77;
    operator delete(v77);
  }
  STACK[0x450] = STACK[0x248];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = STACK[0x260];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = STACK[0x250];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = STACK[0x258];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v78 = (void *)*((_QWORD *)v55 + 1032);
  if (v78)
  {
    *((_QWORD *)v55 + 1033) = v78;
    operator delete(v78);
  }
  v79 = (void *)*((_QWORD *)v55 + 1027);
  if (v79)
  {
    *((_QWORD *)v55 + 1028) = v79;
    operator delete(v79);
  }
  v80 = (void *)*((_QWORD *)v55 + 1022);
  if (v80)
  {
    *((_QWORD *)v55 + 1023) = v80;
    operator delete(v80);
  }
  v81 = (void *)*((_QWORD *)v55 + 1017);
  if (v81)
  {
    *((_QWORD *)v55 + 1018) = v81;
    operator delete(v81);
  }
  v82 = (void *)*((_QWORD *)v55 + 1012);
  if (v82)
  {
    *((_QWORD *)v55 + 1013) = v82;
    operator delete(v82);
  }
  v83 = (void *)*((_QWORD *)v55 + 1007);
  if (v83)
  {
    *((_QWORD *)v55 + 1008) = v83;
    operator delete(v83);
  }
  v84 = (void *)*((_QWORD *)v55 + 1002);
  if (v84)
  {
    *((_QWORD *)v55 + 1003) = v84;
    operator delete(v84);
  }
  v85 = (void *)*((_QWORD *)v55 + 997);
  if (v85)
  {
    *((_QWORD *)v55 + 998) = v85;
    operator delete(v85);
  }
  v86 = (void *)*((_QWORD *)v55 + 992);
  if (v86)
  {
    *((_QWORD *)v55 + 993) = v86;
    operator delete(v86);
  }
  v87 = (void *)*((_QWORD *)v55 + 987);
  if (v87)
  {
    *((_QWORD *)v55 + 988) = v87;
    operator delete(v87);
  }
  v88 = (void *)*((_QWORD *)v55 + 982);
  if (v88)
  {
    *((_QWORD *)v55 + 983) = v88;
    operator delete(v88);
  }
  v89 = (void *)*((_QWORD *)v55 + 977);
  if (v89)
  {
    *((_QWORD *)v55 + 978) = v89;
    operator delete(v89);
  }
  v90 = (void *)*((_QWORD *)v55 + 972);
  if (v90)
  {
    *((_QWORD *)v55 + 973) = v90;
    operator delete(v90);
  }
  v91 = (void *)*((_QWORD *)v55 + 967);
  if (v91)
  {
    *((_QWORD *)v55 + 968) = v91;
    operator delete(v91);
  }
  v92 = (void *)*((_QWORD *)v55 + 962);
  if (v92)
  {
    *((_QWORD *)v55 + 963) = v92;
    operator delete(v92);
  }
  v93 = (void *)*((_QWORD *)v55 + 957);
  if (v93)
  {
    *((_QWORD *)v55 + 958) = v93;
    operator delete(v93);
  }
  v94 = (void *)*((_QWORD *)v55 + 952);
  if (v94)
  {
    *((_QWORD *)v55 + 953) = v94;
    operator delete(v94);
  }
  v95 = (void *)*((_QWORD *)v55 + 947);
  if (v95)
  {
    *((_QWORD *)v55 + 948) = v95;
    operator delete(v95);
  }
  v96 = (void *)*((_QWORD *)v55 + 942);
  if (v96)
  {
    *((_QWORD *)v55 + 943) = v96;
    operator delete(v96);
  }
  STACK[0x450] = STACK[0x270];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = STACK[0x398];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v97 = (void *)*((_QWORD *)v55 + 931);
  if (v97)
  {
    *((_QWORD *)v55 + 932) = v97;
    operator delete(v97);
  }
  v98 = (void *)*((_QWORD *)v55 + 926);
  if (v98)
  {
    *((_QWORD *)v55 + 927) = v98;
    operator delete(v98);
  }
  v99 = (void *)*((_QWORD *)v55 + 921);
  if (v99)
  {
    *((_QWORD *)v55 + 922) = v99;
    operator delete(v99);
  }
  v100 = (void *)*((_QWORD *)v55 + 916);
  if (v100)
  {
    *((_QWORD *)v55 + 917) = v100;
    operator delete(v100);
  }
  v101 = (void *)*((_QWORD *)v55 + 911);
  if (v101)
  {
    *((_QWORD *)v55 + 912) = v101;
    operator delete(v101);
  }
  v102 = (void *)*((_QWORD *)v55 + 906);
  if (v102)
  {
    *((_QWORD *)v55 + 907) = v102;
    operator delete(v102);
  }
  v103 = (void *)*((_QWORD *)v55 + 901);
  if (v103)
  {
    *((_QWORD *)v55 + 902) = v103;
    operator delete(v103);
  }
  v104 = (void *)*((_QWORD *)v55 + 896);
  if (v104)
  {
    *((_QWORD *)v55 + 897) = v104;
    operator delete(v104);
  }
  v105 = (void *)*((_QWORD *)v55 + 891);
  if (v105)
  {
    *((_QWORD *)v55 + 892) = v105;
    operator delete(v105);
  }
  v106 = (void *)*((_QWORD *)v55 + 886);
  if (v106)
  {
    *((_QWORD *)v55 + 887) = v106;
    operator delete(v106);
  }
  v107 = (void *)*((_QWORD *)v55 + 881);
  if (v107)
  {
    *((_QWORD *)v55 + 882) = v107;
    operator delete(v107);
  }
  v108 = (void *)*((_QWORD *)v55 + 876);
  if (v108)
  {
    *((_QWORD *)v55 + 877) = v108;
    operator delete(v108);
  }
  v109 = (void *)*((_QWORD *)v55 + 871);
  if (v109)
  {
    *((_QWORD *)v55 + 872) = v109;
    operator delete(v109);
  }
  v110 = *a44;
  if (*a44)
  {
    *((_QWORD *)v55 + 867) = v110;
    operator delete(v110);
  }
  STACK[0x450] = a22;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v111 = (void *)*((_QWORD *)v55 + 860);
  if (v111)
  {
    *((_QWORD *)v55 + 861) = v111;
    operator delete(v111);
  }
  STACK[0x450] = STACK[0x3C8];
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a23;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a24;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a25;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v112 = (void *)*((_QWORD *)v55 + 843);
  if (v112)
  {
    *((_QWORD *)v55 + 844) = v112;
    operator delete(v112);
  }
  v113 = (void *)*((_QWORD *)v55 + 838);
  if (v113)
  {
    *((_QWORD *)v55 + 839) = v113;
    operator delete(v113);
  }
  v114 = STACK[0x3E8] + 6280;
  STACK[0x450] = a26;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a27;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a28;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = a29;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v115 = (void *)*((_QWORD *)v55 + 821);
  if (v115)
  {
    *((_QWORD *)v55 + 822) = v115;
    operator delete(v115);
  }
  STACK[0x450] = v114;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v116 = (void *)*((_QWORD *)v55 + 813);
  if (v116)
  {
    *((_QWORD *)v55 + 814) = v116;
    operator delete(v116);
  }
  STACK[0x450] = a30;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v117 = (void *)*((_QWORD *)v55 + 805);
  if (v117)
  {
    *((_QWORD *)v55 + 806) = v117;
    operator delete(v117);
  }
  v118 = (void *)*((_QWORD *)v55 + 800);
  if (v118)
  {
    *((_QWORD *)v55 + 801) = v118;
    operator delete(v118);
  }
  v119 = (void *)*((_QWORD *)v55 + 795);
  if (v119)
  {
    *((_QWORD *)v55 + 796) = v119;
    operator delete(v119);
  }
  v120 = *(void **)STACK[0x3A0];
  if (v120)
  {
    *((_QWORD *)v55 + 791) = v120;
    operator delete(v120);
  }
  v121 = (void *)*((_QWORD *)v55 + 787);
  if (v121)
  {
    *((_QWORD *)v55 + 788) = v121;
    operator delete(v121);
  }
  v122 = (void *)*((_QWORD *)v55 + 782);
  if (v122)
  {
    *((_QWORD *)v55 + 783) = v122;
    operator delete(v122);
  }
  v123 = (void *)*((_QWORD *)v55 + 777);
  if (v123)
  {
    *((_QWORD *)v55 + 778) = v123;
    operator delete(v123);
  }
  v124 = (void *)*((_QWORD *)v55 + 772);
  if (v124)
  {
    *((_QWORD *)v55 + 773) = v124;
    operator delete(v124);
  }
  v125 = (void *)*((_QWORD *)v55 + 767);
  if (v125)
  {
    *((_QWORD *)v55 + 768) = v125;
    operator delete(v125);
  }
  v126 = (void *)*((_QWORD *)v55 + 762);
  if (v126)
  {
    *((_QWORD *)v55 + 763) = v126;
    operator delete(v126);
  }
  v127 = (void *)*((_QWORD *)v55 + 757);
  if (v127)
  {
    *((_QWORD *)v55 + 758) = v127;
    operator delete(v127);
  }
  v128 = (void *)*((_QWORD *)v55 + 752);
  if (v128)
  {
    *((_QWORD *)v55 + 753) = v128;
    operator delete(v128);
  }
  v129 = (void *)*((_QWORD *)v55 + 747);
  if (v129)
  {
    *((_QWORD *)v55 + 748) = v129;
    operator delete(v129);
  }
  v130 = (void *)*((_QWORD *)v55 + 742);
  if (v130)
  {
    *((_QWORD *)v55 + 743) = v130;
    operator delete(v130);
  }
  v131 = (void *)*((_QWORD *)v55 + 737);
  if (v131)
  {
    *((_QWORD *)v55 + 738) = v131;
    operator delete(v131);
  }
  v132 = (void *)*((_QWORD *)v55 + 732);
  if (v132)
  {
    *((_QWORD *)v55 + 733) = v132;
    operator delete(v132);
  }
  v133 = (void *)*((_QWORD *)v55 + 727);
  if (v133)
  {
    *((_QWORD *)v55 + 728) = v133;
    operator delete(v133);
  }
  v134 = (void *)*((_QWORD *)v55 + 722);
  if (v134)
  {
    *((_QWORD *)v55 + 723) = v134;
    operator delete(v134);
  }
  v135 = STACK[0x3E8] + 5448;
  v136 = (void *)*((_QWORD *)v55 + 717);
  if (v136)
  {
    *((_QWORD *)v55 + 718) = v136;
    operator delete(v136);
  }
  STACK[0x450] = v135;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v137 = (void *)*((_QWORD *)v55 + 709);
  if (v137)
  {
    *((_QWORD *)v55 + 710) = v137;
    operator delete(v137);
  }
  v138 = (void *)*((_QWORD *)v55 + 704);
  if (v138)
  {
    *((_QWORD *)v55 + 705) = v138;
    operator delete(v138);
  }
  v139 = (void *)*((_QWORD *)v55 + 699);
  if (v139)
  {
    *((_QWORD *)v55 + 700) = v139;
    operator delete(v139);
  }
  v140 = (void *)*((_QWORD *)v55 + 694);
  if (v140)
  {
    *((_QWORD *)v55 + 695) = v140;
    operator delete(v140);
  }
  v141 = (void *)*((_QWORD *)v55 + 689);
  if (v141)
  {
    *((_QWORD *)v55 + 690) = v141;
    operator delete(v141);
  }
  v142 = (void *)*((_QWORD *)v55 + 684);
  if (v142)
  {
    *((_QWORD *)v55 + 685) = v142;
    operator delete(v142);
  }
  v143 = (void *)*((_QWORD *)v55 + 679);
  if (v143)
  {
    *((_QWORD *)v55 + 680) = v143;
    operator delete(v143);
  }
  v144 = (void *)*((_QWORD *)v55 + 674);
  if (v144)
  {
    *((_QWORD *)v55 + 675) = v144;
    operator delete(v144);
  }
  v145 = (void *)*((_QWORD *)v55 + 669);
  if (v145)
  {
    *((_QWORD *)v55 + 670) = v145;
    operator delete(v145);
  }
  STACK[0x450] = STACK[0x3C0];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v146 = *a31;
  if (*a31)
  {
    *((_QWORD *)v55 + 661) = v146;
    operator delete(v146);
  }
  v147 = *a45;
  if (*a45)
  {
    *((_QWORD *)v55 + 657) = v147;
    operator delete(v147);
  }
  v148 = *a54;
  if (*a54)
  {
    *((_QWORD *)v55 + 654) = v148;
    operator delete(v148);
  }
  v149 = *a46;
  if (*a46)
  {
    *((_QWORD *)v55 + 651) = v149;
    operator delete(v149);
  }
  v150 = (void *)*((_QWORD *)v55 + 647);
  if (v150)
  {
    *((_QWORD *)v55 + 648) = v150;
    operator delete(v150);
  }
  v151 = (void *)*((_QWORD *)v55 + 642);
  if (v151)
  {
    *((_QWORD *)v55 + 643) = v151;
    operator delete(v151);
  }
  v152 = (void *)*((_QWORD *)v55 + 637);
  if (v152)
  {
    *((_QWORD *)v55 + 638) = v152;
    operator delete(v152);
  }
  v153 = (void *)*((_QWORD *)v55 + 632);
  if (v153)
  {
    *((_QWORD *)v55 + 633) = v153;
    operator delete(v153);
  }
  v154 = *a35;
  if (*a35)
  {
    *((_QWORD *)v55 + 628) = v154;
    operator delete(v154);
  }
  v155 = *a32;
  if (*a32)
  {
    *((_QWORD *)v55 + 625) = v155;
    operator delete(v155);
  }
  v156 = *a55;
  if (*a55)
  {
    *((_QWORD *)v55 + 622) = v156;
    operator delete(v156);
  }
  v157 = (void *)*((_QWORD *)v55 + 618);
  if (v157)
  {
    *((_QWORD *)v55 + 619) = v157;
    operator delete(v157);
  }
  v158 = (void *)*((_QWORD *)v55 + 613);
  if (v158)
  {
    *((_QWORD *)v55 + 614) = v158;
    operator delete(v158);
  }
  v159 = (void *)*((_QWORD *)v55 + 608);
  if (v159)
  {
    *((_QWORD *)v55 + 609) = v159;
    operator delete(v159);
  }
  v160 = (void *)*((_QWORD *)v55 + 603);
  if (v160)
  {
    *((_QWORD *)v55 + 604) = v160;
    operator delete(v160);
  }
  v161 = (void *)*((_QWORD *)v55 + 598);
  if (v161)
  {
    *((_QWORD *)v55 + 599) = v161;
    operator delete(v161);
  }
  v162 = (void *)*((_QWORD *)v55 + 593);
  if (v162)
  {
    *((_QWORD *)v55 + 594) = v162;
    operator delete(v162);
  }
  v163 = *(void **)STACK[0x3D0];
  if (v163)
  {
    *((_QWORD *)v55 + 591) = v163;
    operator delete(v163);
  }
  v164 = *a34;
  if (*a34)
  {
    *((_QWORD *)v55 + 588) = v164;
    operator delete(v164);
  }
  v165 = *a47;
  if (*a47)
  {
    *((_QWORD *)v55 + 585) = v165;
    operator delete(v165);
  }
  v166 = *a48;
  if (*a48)
  {
    *((_QWORD *)v55 + 582) = v166;
    operator delete(v166);
  }
  v167 = (void *)*((_QWORD *)v55 + 578);
  if (v167)
  {
    *((_QWORD *)v55 + 579) = v167;
    operator delete(v167);
  }
  v168 = (void *)*((_QWORD *)v55 + 573);
  if (v168)
  {
    *((_QWORD *)v55 + 574) = v168;
    operator delete(v168);
  }
  v169 = (void *)*((_QWORD *)v55 + 568);
  if (v169)
  {
    *((_QWORD *)v55 + 569) = v169;
    operator delete(v169);
  }
  v170 = (void *)*((_QWORD *)v55 + 563);
  if (v170)
  {
    *((_QWORD *)v55 + 564) = v170;
    operator delete(v170);
  }
  v171 = (void *)*((_QWORD *)v55 + 558);
  if (v171)
  {
    *((_QWORD *)v55 + 559) = v171;
    operator delete(v171);
  }
  v172 = (covarianceBasedAdaptiveFilter *)(STACK[0x3E8] + 208);
  v173 = (RotationUtilities *)(STACK[0x3E8] + 2600);
  v174 = *v70;
  if (*v70)
  {
    *((_QWORD *)v55 + 554) = v174;
    operator delete(v174);
  }
  v175 = (void *)*((_QWORD *)v55 + 550);
  if (v175)
  {
    *((_QWORD *)v55 + 551) = v175;
    operator delete(v175);
  }
  v176 = (HOA **)(STACK[0x3E8] + 160);
  ParametricProcessor::parsData::~parsData((ParametricProcessor::parsData *)STACK[0x3A8]);
  RotationUtilities::~RotationUtilities(v173);
  MatrixDecompositions::~MatrixDecompositions(a13);
  covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter(v172);
  std::unique_ptr<VBAP>::reset[abi:ne180100](a33, 0);
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)STACK[0x268], 0);
  v177 = *((_QWORD *)v55 + 54);
  *((_QWORD *)v55 + 54) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = STACK[0x3E8] + 72;
  v179 = (void **)(STACK[0x3E8] + 112);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)STACK[0x3B8], 0);
  v180 = *((_QWORD *)v55 + 52);
  *((_QWORD *)v55 + 52) = 0;
  if (v180)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v180);
  v181 = STACK[0x3E8] + 24;
  std::unique_ptr<HOA>::reset[abi:ne180100](v176, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100](a14, 0);
  v182 = *v179;
  if (*v179)
  {
    *((_QWORD *)v55 + 46) = v182;
    operator delete(v182);
  }
  STACK[0x450] = v178;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v183 = (void *)*((_QWORD *)v55 + 37);
  if (v183)
  {
    *((_QWORD *)v55 + 38) = v183;
    operator delete(v183);
  }
  STACK[0x450] = v181;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  v184 = *(void **)STACK[0x3E8];
  if (v184)
  {
    *((_QWORD *)v55 + 32) = v184;
    operator delete(v184);
  }
  ParametricProcessor::pars::~pars(v55);
  _Unwind_Resume(a1);
}

HOA *std::unique_ptr<HOA>::reset[abi:ne180100](HOA **a1, HOA *a2)
{
  HOA *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HOA::~HOA(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void ParametricProcessor::InitializeGridsAndAmbisonicEncoder(uint64_t a1, _OWORD **a2, float **a3, HOA *a4, float **a5, _QWORD *a6, unint64_t *a7)
{
  NSObject *v14;
  float *v15;
  unsigned int TDesign;
  float *v17;
  float *v18;
  _OWORD **v19;
  uint64_t v20;
  float *v21;
  float *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  double v29;
  __double2 v30;
  __double2 v31;
  float v32;
  float v33;
  float sinval;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *__p[2];
  uint64_t v46;
  uint8_t buf[4];
  const char *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (getParametricProcessorLog(void)::onceToken != -1)
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
  v14 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v48 = "InitializeGridsAndAmbisonicEncoder";
    _os_log_debug_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "Initializing Grid and ambisonic encoder %s", buf, 0xCu);
  }
  HOA::HOA((uint64_t)buf, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 216));
  TDesign = HOA::getTDesign(a4, 0, 0, 0, v15);
  *a7 = TDesign;
  std::vector<float>::resize((uint64_t)a2, TDesign);
  std::vector<float>::resize((uint64_t)a3, *a7);
  HOA::getTDesign(a4, *a2, *a3, 0, v17);
  HOA::createEncoder((uint64_t)buf, (uint64_t)a2, (uint64_t)a3);
  std::vector<float>::resize((uint64_t)a5, 3 * *a7);
  v19 = a2;
  v18 = (float *)*a2;
  v20 = (char *)v19[1] - (char *)v18;
  if (v20)
  {
    v21 = *a3;
    v22 = *a5;
    v23 = *a7;
    v24 = v20 >> 2;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    do
    {
      v26 = *v18++;
      v27 = v26;
      v28 = *v21++;
      v29 = v27 * 0.0174532925;
      v30 = __sincos_stret(v28 * 0.0174532925);
      v31 = __sincos_stret(v29);
      v32 = v30.__cosval * v31.__cosval;
      v33 = v30.__cosval * v31.__sinval;
      sinval = v30.__sinval;
      *v22 = v32;
      v22[v23] = v33;
      v22[2 * v23] = sinval;
      ++v22;
      --v25;
    }
    while (v25);
  }
  else
  {
    v23 = *a7;
  }
  std::vector<float>::vector(__p, v23 * *(int *)(a1 + 60));
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v42, v49, v50, (v50 - (uint64_t)v49) >> 2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v42;
  v46 = v43;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v42, *a7, *(int *)(a1 + 60));
  *(_OWORD *)a6 = v42;
  v35 = (void *)a6[2];
  if (v35)
  {
    a6[3] = v35;
    operator delete(v35);
    a6[2] = 0;
    a6[3] = 0;
    a6[4] = 0;
  }
  *((_OWORD *)a6 + 1) = v43;
  a6[4] = v44;
  v36 = *a7;
  if (*a7)
  {
    v37 = 0;
    v38 = 0;
    LODWORD(v39) = *(_DWORD *)(a1 + 60);
    do
    {
      if ((_DWORD)v39)
      {
        v40 = 0;
        do
        {
          v41 = *(_DWORD *)((char *)__p[0] + 4 * v40 + v37);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)a6, v38, v40++) = v41;
          v39 = *(int *)(a1 + 60);
        }
        while (v40 < v39);
        v36 = *a7;
      }
      ++v38;
      v37 += 16;
    }
    while (v38 < v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  HOA::~HOA((HOA *)buf);
}

void sub_1B622BDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  HOA::~HOA((HOA *)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CLiteMatrix>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CLiteMatrix>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 40 * a2;
    v8 = 40 * a2;
    v9 = (_QWORD *)(v6 + 16);
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)a3;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
      v9 += 5;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B622BEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<CLiteMatrix>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<LiteMatrix<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<LiteMatrix<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void ParametricProcessor::calculateSHBeamCoefficients(uint64_t a1, const float *a2, CLiteMatrix *a3)
{
  unint64_t v5;
  int v6;

  HOA::createEncoder(*(HOA **)(a1 + 424), a2, a2 + 1, 1uLL, *(float **)(a1 + 4424), (uint64_t)(*(_QWORD *)(a1 + 4432) - *(_QWORD *)(a1 + 4424)) >> 2);
  vDSP_vsmul(*(const float **)(a1 + 4424), 1, &kBeamNormalizer, *(float **)(a1 + 4424), 1, (uint64_t)(*(_QWORD *)(a1 + 4432) - *(_QWORD *)(a1 + 4424)) >> 2);
  vDSP_dotpr(*(const float **)(a1 + 4424), 1, *(const float **)(a1 + 4424), 1, *(float **)(a1 + 4584), (uint64_t)(*(_QWORD *)(a1 + 4432) - *(_QWORD *)(a1 + 4424)) >> 2);
  vDSP_vsdiv(*(const float **)(a1 + 4424), 1, *(const float **)(a1 + 4584), *(float **)(a1 + 4504), 1, (uint64_t)(*(_QWORD *)(a1 + 4432) - *(_QWORD *)(a1 + 4424)) >> 2);
  if (*(_QWORD *)(a1 + 4432) != *(_QWORD *)(a1 + 4424))
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)(a1 + 4488), 0, v5);
      *(_DWORD *)CLiteMatrix::Get(a3, v5++, 0) = v6;
    }
    while (v5 < (uint64_t)(*(_QWORD *)(a1 + 4432) - *(_QWORD *)(a1 + 4424)) >> 2);
  }
}

void ParametricProcessor::InitializeGrids(uint64_t a1, _OWORD **a2, float **a3, HOA *a4, float **a5, unint64_t *a6)
{
  NSObject *v12;
  float *v13;
  unsigned int TDesign;
  float *v15;
  float *v16;
  _OWORD **v17;
  uint64_t v18;
  float *v19;
  float *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  double v27;
  __double2 v28;
  __double2 v29;
  float v30;
  float v31;
  float sinval;
  int v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (getParametricProcessorLog(void)::onceToken != -1)
    dispatch_once(&getParametricProcessorLog(void)::onceToken, &__block_literal_global_18967);
  v12 = getParametricProcessorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getParametricProcessorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v33 = 136315138;
    v34 = "InitializeGrids";
    _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "Initializing Grid %s", (uint8_t *)&v33, 0xCu);
  }
  HOA::HOA((uint64_t)&v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 216));
  TDesign = HOA::getTDesign(a4, 0, 0, 0, v13);
  *a6 = TDesign;
  std::vector<float>::resize((uint64_t)a2, TDesign);
  std::vector<float>::resize((uint64_t)a3, *a6);
  HOA::getTDesign(a4, *a2, *a3, 0, v15);
  std::vector<float>::resize((uint64_t)a5, 3 * *a6);
  v17 = a2;
  v16 = (float *)*a2;
  v18 = (char *)v17[1] - (char *)v16;
  if (v18)
  {
    v19 = *a3;
    v20 = *a5;
    v21 = *a6;
    v22 = v18 >> 2;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    do
    {
      v24 = *v16++;
      v25 = v24;
      v26 = *v19++;
      v27 = v25 * 0.0174532925;
      v28 = __sincos_stret(v26 * 0.0174532925);
      v29 = __sincos_stret(v27);
      v30 = v28.__cosval * v29.__cosval;
      v31 = v28.__cosval * v29.__sinval;
      sinval = v28.__sinval;
      *v20 = v30;
      v20[v21] = v31;
      v20[2 * v21] = sinval;
      ++v20;
      --v23;
    }
    while (v23);
  }
  HOA::~HOA((HOA *)&v33);
}

void sub_1B622C278(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::calculateVBAPGainTable(ParametricProcessor *this, HOA *a2)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  __int32 *v9;
  __int32 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *__p[3];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float32x2_t v24;
  __int32 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)((char *)this + 3816);
  ParametricProcessor::InitializeGrids((uint64_t)this, (_OWORD **)this + 465, (float **)this + 468, a2, (float **)this + 471, (unint64_t *)this + 477);
  std::vector<float>::resize((uint64_t)this + 4160, *((_QWORD *)this + 464) * *((_QWORD *)this + 477));
  v4 = *((_QWORD *)this + 55);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)(v4 + 224), *(_QWORD *)(v4 + 232), (uint64_t)(*(_QWORD *)(v4 + 232) - *(_QWORD *)(v4 + 224)) >> 2);
  v5 = *v3;
  if (*v3)
  {
    v6 = 0;
    v7 = (int *)__p[0];
    do
    {
      v8 = *((_QWORD *)this + 471);
      v9 = (__int32 *)(v8 + 4 * v6);
      v10 = *(_DWORD *)(v8 + 4 * (v5 + v6));
      v24.i32[0] = *v9;
      v24.i32[1] = v10;
      v25 = v9[2 * v5];
      LODWORD(v19) = 0;
      VBAP::triangleLookup(*((VBAP **)this + 55), &v24, (int *)&v19, (float *)&v21);
      v11 = 3 * v19;
      v12 = *((_QWORD *)this + 464) * v6;
      v13 = *((_QWORD *)this + 520);
      *(_DWORD *)(v13 + 4 * (v12 + v7[3 * (int)v19])) = v21;
      v14 = &v7[v11];
      *(_DWORD *)(v13 + 4 * (v12 + v14[1])) = DWORD1(v21);
      *(_DWORD *)(v13 + 4 * (v12 + v14[2])) = DWORD2(v21);
      ++v6;
      v5 = *((_QWORD *)this + 477);
    }
    while (v6 < v5);
  }
  std::vector<float>::vector(&v21, 3uLL);
  v15 = (void *)*((_QWORD *)this + 474);
  if (v15)
  {
    *((_QWORD *)this + 475) = v15;
    operator delete(v15);
    *((_QWORD *)this + 474) = 0;
    *((_QWORD *)this + 475) = 0;
    *((_QWORD *)this + 476) = 0;
  }
  *((_OWORD *)this + 237) = v21;
  *((_QWORD *)this + 476) = v22;
  v16 = *((_QWORD *)this + 477);
  v19 = 0;
  std::vector<unsigned long>::vector(&v21, v16, &v19);
  v17 = (void *)*((_QWORD *)this + 478);
  if (v17)
  {
    *((_QWORD *)this + 479) = v17;
    operator delete(v17);
    *((_QWORD *)this + 478) = 0;
    *((_QWORD *)this + 479) = 0;
    *((_QWORD *)this + 480) = 0;
  }
  *((_OWORD *)this + 239) = v21;
  *((_QWORD *)this + 480) = v22;
  LiteMatrix<float>::LiteMatrix((uint64_t)&v21, *((_QWORD *)this + 477), 1);
  *((_OWORD *)this + 267) = v21;
  v18 = (void *)*((_QWORD *)this + 536);
  if (v18)
  {
    *((_QWORD *)this + 537) = v18;
    operator delete(v18);
    *((_QWORD *)this + 536) = 0;
    *((_QWORD *)this + 537) = 0;
    *((_QWORD *)this + 538) = 0;
  }
  *((_OWORD *)this + 268) = v22;
  *((_QWORD *)this + 538) = v23;
  std::vector<float>::resize((uint64_t)this + 4696, *((_QWORD *)this + 477));
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1B622C4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::calculateRotationMatrices(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  CLiteMatrix *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  void *__p;
  void *v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) >> 2;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v14, *(int *)(a1 + 60), *(int *)(a1 + 60));
  std::vector<CLiteMatrix>::vector(&v17, v8, (uint64_t)v14);
  v9 = (_QWORD *)(a1 + 6528);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)(a1 + 6528));
  *(_OWORD *)(a1 + 6528) = v17;
  *(_QWORD *)(a1 + 6544) = v18;
  v18 = 0;
  v17 = 0uLL;
  v19 = (void **)&v17;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v6 != v7)
  {
    v12 = 0;
    v13 = 0;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      RotationUtilities::yawPitchRoll2RotationMatrixFOA((RotationUtilities *)(*v9 + v12), v10, *(float *)(*a2 + 4 * v13) * 0.017453, *(float *)(*a3 + 4 * v13) * -0.017453, v11);
      ++v13;
      v12 += 40;
    }
    while (v8 != v13);
  }
}

void sub_1B622C60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B622C6FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLiteMatrix::Eye(CLiteMatrix *this, uint64_t a2)
{
  unint64_t v4;

  CLiteMatrix::CLiteMatrix(this, a2, a2);
  if (a2)
  {
    v4 = 0;
    do
    {
      *(_DWORD *)CLiteMatrix::Get(this, v4, v4) = 1065353216;
      ++v4;
    }
    while (a2 != v4);
  }
}

void afSTFTWrapper::~afSTFTWrapper(afSTFTWrapper *this)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  FFTSetup *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;

  *(_QWORD *)this = &off_1E69E0898;
  v2 = (int *)*((_QWORD *)this + 10);
  if (v2[28])
  {
    v3 = (int *)*((_QWORD *)v2 + 13);
    if (*v3 >= 1)
    {
      v4 = 0;
      do
      {
        for (i = 0; i != 112; i += 16)
        {
          free(*(void **)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8 * v4) + i));
          free(*(void **)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8 * v4) + i + 8));
        }
        free(*(void **)(*((_QWORD *)v3 + 3) + 8 * v4++));
      }
      while (v4 < *v3);
    }
    free(*((void **)v3 + 3));
    free(v3);
  }
  if (*v2 >= 1)
  {
    v6 = 0;
    do
      free(*(void **)(*((_QWORD *)v2 + 7) + 8 * v6++));
    while (v6 < *v2);
  }
  if (v2[1] >= 1)
  {
    v7 = 0;
    do
      free(*(void **)(*((_QWORD *)v2 + 10) + 8 * v7++));
    while (v7 < v2[1]);
  }
  free(*((void **)v2 + 5));
  free(*((void **)v2 + 6));
  free(*((void **)v2 + 7));
  free(*((void **)v2 + 10));
  free(*((void **)v2 + 8));
  free(*((void **)v2 + 9));
  v8 = (FFTSetup *)*((_QWORD *)v2 + 12);
  vDSP_destroy_fftsetup(v8[3]);
  free(v8);
  free(v2);
  v9 = (void *)*((_QWORD *)this + 26);
  if (v9)
  {
    *((_QWORD *)this + 27) = v9;
    operator delete(v9);
  }
  v13 = (void **)((char *)this + 184);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v10 = (void *)*((_QWORD *)this + 17);
  if (v10)
  {
    *((_QWORD *)this + 18) = v10;
    operator delete(v10);
  }
  v13 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v11 = (void *)*((_QWORD *)this + 11);
  if (v11)
  {
    *((_QWORD *)this + 12) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 8) = v12;
    operator delete(v12);
  }
}

{
  afSTFTWrapper::~afSTFTWrapper(this);
  JUMPOUT(0x1BCC95CECLL);
}

void ParametricProcessor::parsData::~parsData(ParametricProcessor::parsData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void **v42;

  v2 = (void *)*((_QWORD *)this + 169);
  if (v2)
  {
    *((_QWORD *)this + 170) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 166);
  if (v3)
  {
    *((_QWORD *)this + 167) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 163);
  if (v4)
  {
    *((_QWORD *)this + 164) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 160);
  if (v5)
  {
    *((_QWORD *)this + 161) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 155);
  if (v6)
  {
    *((_QWORD *)this + 156) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 149);
  if (v7)
  {
    *((_QWORD *)this + 150) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 144);
  if (v8)
  {
    *((_QWORD *)this + 145) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 141);
  if (v9)
  {
    *((_QWORD *)this + 142) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 138);
  if (v10)
  {
    *((_QWORD *)this + 139) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 135);
  if (v11)
  {
    *((_QWORD *)this + 136) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 130);
  if (v12)
  {
    *((_QWORD *)this + 131) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 125);
  if (v13)
  {
    *((_QWORD *)this + 126) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 120);
  if (v14)
  {
    *((_QWORD *)this + 121) = v14;
    operator delete(v14);
  }
  v42 = (void **)((char *)this + 936);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v42 = (void **)((char *)this + 912);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v42 = (void **)((char *)this + 888);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v42);
  v42 = (void **)((char *)this + 864);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v42 = (void **)((char *)this + 840);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v15 = (void *)*((_QWORD *)this + 102);
  if (v15)
  {
    *((_QWORD *)this + 103) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 98);
  if (v16)
  {
    *((_QWORD *)this + 99) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 95);
  if (v17)
  {
    *((_QWORD *)this + 96) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 92);
  if (v18)
  {
    *((_QWORD *)this + 93) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 89);
  if (v19)
  {
    *((_QWORD *)this + 90) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 85);
  if (v20)
  {
    *((_QWORD *)this + 86) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 82);
  if (v21)
  {
    *((_QWORD *)this + 83) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 79);
  if (v22)
  {
    *((_QWORD *)this + 80) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 76);
  if (v23)
  {
    *((_QWORD *)this + 77) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 71);
  if (v24)
  {
    *((_QWORD *)this + 72) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 66);
  if (v25)
  {
    *((_QWORD *)this + 67) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 61);
  if (v26)
  {
    *((_QWORD *)this + 62) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 56);
  if (v27)
  {
    *((_QWORD *)this + 57) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 51);
  if (v28)
  {
    *((_QWORD *)this + 52) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 48);
  if (v29)
  {
    *((_QWORD *)this + 49) = v29;
    operator delete(v29);
  }
  v42 = (void **)((char *)this + 360);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v42 = (void **)((char *)this + 336);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v42);
  v30 = (void *)*((_QWORD *)this + 38);
  if (v30)
  {
    *((_QWORD *)this + 39) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 35);
  if (v31)
  {
    *((_QWORD *)this + 36) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 32);
  if (v32)
  {
    *((_QWORD *)this + 33) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 29);
  if (v33)
  {
    *((_QWORD *)this + 30) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 26);
  if (v34)
  {
    *((_QWORD *)this + 27) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 22);
  if (v35)
  {
    *((_QWORD *)this + 23) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 19);
  if (v36)
  {
    *((_QWORD *)this + 20) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 16);
  if (v37)
  {
    *((_QWORD *)this + 17) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 13);
  if (v38)
  {
    *((_QWORD *)this + 14) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 10);
  if (v39)
  {
    *((_QWORD *)this + 11) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 7);
  if (v40)
  {
    *((_QWORD *)this + 8) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 2);
  if (v41)
  {
    *((_QWORD *)this + 3) = v41;
    operator delete(v41);
  }
}

void RotationUtilities::~RotationUtilities(RotationUtilities *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

void MatrixDecompositions::~MatrixDecompositions(MatrixDecompositions *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 37) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 33);
  if (v5)
  {
    *((_QWORD *)this + 34) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 30);
  if (v6)
  {
    *((_QWORD *)this + 31) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 24);
  if (v8)
  {
    *((_QWORD *)this + 25) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 18);
  if (v10)
  {
    *((_QWORD *)this + 19) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 15);
  if (v11)
  {
    *((_QWORD *)this + 16) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 12);
  if (v12)
  {
    *((_QWORD *)this + 13) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 9);
  if (v13)
  {
    *((_QWORD *)this + 10) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 7) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 4) = v15;
    operator delete(v15);
  }
  v16 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v16;
    operator delete(v16);
  }
}

void covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter(covarianceBasedAdaptiveFilter *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  MatrixDecompositions::~MatrixDecompositions((covarianceBasedAdaptiveFilter *)((char *)this + 1672));
  v2 = (void *)*((_QWORD *)this + 206);
  if (v2)
  {
    *((_QWORD *)this + 207) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 203);
  if (v3)
  {
    *((_QWORD *)this + 204) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 200);
  if (v4)
  {
    *((_QWORD *)this + 201) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 197);
  if (v5)
  {
    *((_QWORD *)this + 198) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 192);
  if (v6)
  {
    *((_QWORD *)this + 193) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 187);
  if (v7)
  {
    *((_QWORD *)this + 188) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 182);
  if (v8)
  {
    *((_QWORD *)this + 183) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 177);
  if (v9)
  {
    *((_QWORD *)this + 178) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 172);
  if (v10)
  {
    *((_QWORD *)this + 173) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 167);
  if (v11)
  {
    *((_QWORD *)this + 168) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 162);
  if (v12)
  {
    *((_QWORD *)this + 163) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 157);
  if (v13)
  {
    *((_QWORD *)this + 158) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 152);
  if (v14)
  {
    *((_QWORD *)this + 153) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 147);
  if (v15)
  {
    *((_QWORD *)this + 148) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 142);
  if (v16)
  {
    *((_QWORD *)this + 143) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 137);
  if (v17)
  {
    *((_QWORD *)this + 138) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 132);
  if (v18)
  {
    *((_QWORD *)this + 133) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 127);
  if (v19)
  {
    *((_QWORD *)this + 128) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 122);
  if (v20)
  {
    *((_QWORD *)this + 123) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 117);
  if (v21)
  {
    *((_QWORD *)this + 118) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 112);
  if (v22)
  {
    *((_QWORD *)this + 113) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 107);
  if (v23)
  {
    *((_QWORD *)this + 108) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 102);
  if (v24)
  {
    *((_QWORD *)this + 103) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 97);
  if (v25)
  {
    *((_QWORD *)this + 98) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 92);
  if (v26)
  {
    *((_QWORD *)this + 93) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 89);
  if (v27)
  {
    *((_QWORD *)this + 90) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 86);
  if (v28)
  {
    *((_QWORD *)this + 87) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 81);
  if (v29)
  {
    *((_QWORD *)this + 82) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 78);
  if (v30)
  {
    *((_QWORD *)this + 79) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 73);
  if (v31)
  {
    *((_QWORD *)this + 74) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 70);
  if (v32)
  {
    *((_QWORD *)this + 71) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 65);
  if (v33)
  {
    *((_QWORD *)this + 66) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 60);
  if (v34)
  {
    *((_QWORD *)this + 61) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 55);
  if (v35)
  {
    *((_QWORD *)this + 56) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 50);
  if (v36)
  {
    *((_QWORD *)this + 51) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 45);
  if (v37)
  {
    *((_QWORD *)this + 46) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 40);
  if (v38)
  {
    *((_QWORD *)this + 41) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 35);
  if (v39)
  {
    *((_QWORD *)this + 36) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 30);
  if (v40)
  {
    *((_QWORD *)this + 31) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 25);
  if (v41)
  {
    *((_QWORD *)this + 26) = v41;
    operator delete(v41);
  }
  v42 = (void *)*((_QWORD *)this + 20);
  if (v42)
  {
    *((_QWORD *)this + 21) = v42;
    operator delete(v42);
  }
  v43 = (void *)*((_QWORD *)this + 15);
  if (v43)
  {
    *((_QWORD *)this + 16) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 10);
  if (v44)
  {
    *((_QWORD *)this + 11) = v44;
    operator delete(v44);
  }
  v45 = (void *)*((_QWORD *)this + 7);
  if (v45)
  {
    *((_QWORD *)this + 8) = v45;
    operator delete(v45);
  }
  v46 = (void *)*((_QWORD *)this + 2);
  if (v46)
  {
    *((_QWORD *)this + 3) = v46;
    operator delete(v46);
  }
}

void std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void ParametricProcessor::pars::~pars(ParametricProcessor::pars *this)
{
  void *v2;
  const void *v3;
  const void *v4;

  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (const void *)*((_QWORD *)this + 19);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 18);
  if (v4)
    CFRelease(v4);
}

void std::vector<LiteMatrix<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<LiteMatrix<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = 5 * a2;
    v6 = 40 * a2;
    v7 = (char *)operator new(40 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * v5];
    a1[2] = v8;
    v9 = v7 + 16;
    do
    {
      *((_OWORD *)v9 - 1) = *(_OWORD *)a3;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
      v9 += 5;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B622D2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ParametricProcessor::convertHRIRtoHRTF(_QWORD *a1, uint64_t a2, unint64_t **a3)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  char v16;
  char v17;
  unint64_t v18;
  float v19;
  _QWORD *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  double v45;
  float *v46;
  float v47;
  float *v48;
  float v49;
  float *v50;
  float v51;
  _DWORD *v52;
  double v53;
  float v54;
  float *v55;
  float v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float *v63;
  float v64;
  __float2 v65;
  float *v66;
  float v67;
  float *v68;
  float v69;
  float *v70;
  uint64_t v71;
  unint64_t **v72;
  unint64_t *v73;
  char v74;
  uint64_t v75;
  _BYTE v76[232];
  _DWORD v77[4];
  void *__p;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  _BYTE v84[16];
  void *v85;
  void *v86;
  _BYTE v87[16];
  float *v88;
  float *v89;
  void *v90[3];
  _QWORD v91[3];

  v91[1] = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v77, 2, *(int *)(a2 + 28));
  v8 = ((char *)v7 - (char *)v6) / 40;
  std::vector<CLiteMatrix>::vector(a1, v8, (uint64_t)v77);
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
  v9 = *(int *)(a2 + 28);
  v77[0] = 0;
  std::vector<float>::vector(v90, v9, v77);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v87, 1, 1);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)v84, 1, 1);
  LiteMatrix<float>::LiteMatrix((uint64_t)&v80, 1, (*a3)[1]);
  v10 = *(int *)(a2 + 20);
  v11 = v81 / v10;
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v77, 1u, 1u, v10, v81 / v10, *(_BYTE *)(a2 + 24), *(unsigned __int8 *)(a2 + 25));
  v12 = *(int *)(a2 + 20);
  v75 = a2;
  v13 = (*a3)[1] / v12;
  afSTFTWrapper::afSTFTWrapper((afSTFTWrapper *)v76, 2u, 1u, v12, v13, *(_BYTE *)(a2 + 24), *(unsigned __int8 *)(a2 + 25));
  v73 = v6;
  v14 = 0;
  v91[0] = 0;
  v15 = *a3;
  v16 = 1;
  do
  {
    v17 = v16;
    if (v15[1])
    {
      v18 = 0;
      v19 = 1.1755e-38;
      do
      {
        if (*(float *)LiteMatrix<float>::operator()(v15, v14, v18) > v19)
        {
          v19 = *(float *)LiteMatrix<float>::operator()(*a3, v14, v18);
          *((float *)v91 + v14) = (float)v18;
        }
        ++v18;
        v15 = *a3;
      }
      while (v18 < (*a3)[1]);
    }
    v16 = 0;
    v14 = 1;
  }
  while ((v17 & 1) != 0);
  *(_DWORD *)LiteMatrix<float>::operator()(&v80, 0, (int)(float)((float)(*(float *)v91 + *((float *)v91 + 1)) * 0.5) + 1) = 1065353216;
  v20 = (_QWORD *)afSTFTWrapper::fltbAnalysisMatrix((afSTFTWrapper *)v77, &v80);
  v21 = *(_DWORD *)(a2 + 28);
  v72 = a3;
  if (v21)
  {
    v22 = 0;
    v23 = v11 << 32;
    if ((unint64_t)(int)v11 <= 1)
      v24 = 1;
    else
      v24 = (int)v11;
    do
    {
      if (v23)
      {
        v25 = 0;
        do
        {
          v26 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v22), 0, v25);
          CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v22), 0, v25);
          v28 = v26 * v26 + *v27 * *v27 + *((float *)v90[0] + v22);
          *((float *)v90[0] + v22) = v28;
          ++v25;
        }
        while (v24 != v25);
        v21 = *(_DWORD *)(v75 + 28);
      }
      ++v22;
    }
    while (v22 < v21);
  }
  v29 = v75;
  if (v7 != v73)
  {
    v30 = 0;
    v31 = v13 << 32;
    if (v8 <= 1)
      v32 = 1;
    else
      v32 = v8;
    v71 = v32;
    if ((unint64_t)(int)v13 <= 1)
      v33 = 1;
    else
      v33 = (int)v13;
    do
    {
      v34 = (_QWORD *)afSTFTWrapper::fltbAnalysisMatrix((afSTFTWrapper *)v76, &(*v72)[5 * v30]);
      v35 = 0;
      LODWORD(v36) = *(_DWORD *)(v29 + 28);
      v37 = 1;
      do
      {
        v38 = v37;
        if ((_DWORD)v36)
        {
          v74 = v37;
          v39 = 0;
          do
          {
            vDSP_vclr(v88, 1, v89 - v88);
            if (v31)
            {
              v40 = 0;
              v41 = 0.0;
              do
              {
                v42 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                v41 = v42 * v42 + *v43 * *v43 + v41;
                v44 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                v45 = (float)(v44 * *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40));
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                v47 = *v46;
                CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40);
                v49 = *v48;
                v50 = (float *)CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
                v51 = v45 + v47 * v49 + *v50;
                *v50 = v51;
                CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                LODWORD(v45) = *v52;
                v53 = (float)(*(float *)&v45 * *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40));
                v54 = *(float *)CLiteMatrix::Get((CLiteMatrix *)(*v34 + 40 * v39), v35, v40);
                CLiteMatrix::Get((CLiteMatrix *)(*v20 + 40 * v39), 0, v40);
                v56 = *v55;
                CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
                v58 = v53 - v54 * v56 + *v57;
                *v57 = v58;
                ++v40;
              }
              while (v33 != v40);
            }
            else
            {
              v41 = 0.0;
            }
            v59 = sqrtf(v41 / *((float *)v90[0] + v39));
            CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
            v61 = *v60;
            v62 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v87, 0, 0);
            v63 = (float *)CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            v64 = atan2f(v61, v62);
            v65 = __sincosf_stret(v64);
            *v63 = v65.__cosval;
            CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            *v66 = v65.__sinval;
            v67 = *(float *)CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            *(float *)CLiteMatrix::Get((CLiteMatrix *)(*a1 + 40 * v30), v35, v39) = v59 * v67;
            CLiteMatrix::Get((CLiteMatrix *)v84, 0, 0);
            v69 = *v68;
            CLiteMatrix::Get((CLiteMatrix *)(*a1 + 40 * v30), v35, v39);
            *v70 = v59 * v69;
            ++v39;
            v29 = v75;
            v36 = *(int *)(v75 + 28);
          }
          while (v39 < v36);
          v38 = v74;
        }
        v37 = 0;
        v35 = 1;
      }
      while ((v38 & 1) != 0);
      ++v30;
    }
    while (v30 != v71);
  }
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)v76);
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)v77);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
}

void sub_1B622D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&a14);
  afSTFTWrapper::~afSTFTWrapper((afSTFTWrapper *)&a43);
  v45 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 224);
  if (v46)
  {
    *(_QWORD *)(v43 - 216) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v43 - 184);
  if (v47)
  {
    *(_QWORD *)(v43 - 176) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v43 - 160);
  if (v48)
  {
    *(_QWORD *)(v43 - 152) = v48;
    operator delete(v48);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

unint64_t *ParametricProcessor::calculatePhaseTerm(unint64_t *this, CLiteMatrix *a2, CLiteMatrix *a3, float a4)
{
  unint64_t v4;
  CLiteMatrix *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  float *v11;
  float v12;
  float *v13;
  float v14;
  float *v15;

  v4 = *this;
  if (*this)
  {
    v7 = (CLiteMatrix *)this;
    v8 = 0;
    v9 = this[1];
    do
    {
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = (float *)CLiteMatrix::Get(v7, v8, i);
          v12 = cosf(*v11 * 0.5);
          *(float *)CLiteMatrix::Get(a2, v8, i) = v12;
          v13 = (float *)CLiteMatrix::Get(v7, v8, i);
          v14 = sinf(*v13 * 0.5) * a4;
          this = (unint64_t *)CLiteMatrix::Get(a2, v8, i);
          *v15 = v14;
          v9 = *((_QWORD *)v7 + 1);
        }
        v4 = *(_QWORD *)v7;
      }
      ++v8;
    }
    while (v8 < v4);
  }
  return this;
}

char *std::vector<CLiteMatrix>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x666666666666667)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v3 = 5 * a2;
  result = (char *)operator new(40 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B622DBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float *ParametricProcessor::interpolateHRTFs(uint64_t a1, const float **a2, int a3)
{
  float v6;
  double v7;
  __float2 v8;
  CLiteMatrix *v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float *result;
  int v16;
  float v17;
  uint64_t __C;

  __C = 0;
  v17 = 0.0;
  vDSP_dotpr(*(const float **)(*(_QWORD *)(a1 + 3896) + 24 * a3), 1, *a2, 1, (float *)&__C, *(_QWORD *)(a1 + 3712));
  vDSP_dotpr(*(const float **)(*(_QWORD *)(a1 + 3896) + 24 * (*(_DWORD *)(a1 + 28) + a3)), 1, *a2, 1, &v17, *(_QWORD *)(a1 + 3712));
  if (*(float *)(*(_QWORD *)(a1 + 3088) + 4 * a3) >= *(float *)(a1 + 196))
  {
    vDSP_vclr(*(float **)(a1 + 6440), 1, (uint64_t)(*(_QWORD *)(a1 + 6448) - *(_QWORD *)(a1 + 6440)) >> 2);
    v16 = __C;
    *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0) = v16;
    v13 = v17;
    result = (float *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0);
  }
  else
  {
    vDSP_dotpr(*(const float **)(a1 + 3968), 1, *(const float **)(a1 + 4112), 1, (float *)&__C + 1, *(_QWORD *)(a1 + 3712));
    v6 = *(float *)&__C;
    v7 = *(float *)(*(_QWORD *)(a1 + 3088) + 4 * a3) * 6.28318531 * *((float *)&__C + 1) + 3.14159265;
    *(float *)&v7 = v7 + floor(v7 / 6.28318531) * -6.28318531 + -3.14159265;
    v8 = __sincosf_stret(*(float *)&v7 * 0.5);
    v9 = (CLiteMatrix *)(a1 + 6424);
    *(float *)CLiteMatrix::Get(v9, 0, 0) = v6 * v8.__cosval;
    v10 = *(float *)&__C * v8.__sinval;
    CLiteMatrix::Get(v9, 0, 0);
    *v11 = v10;
    v12 = v17 * v8.__cosval;
    *(float *)CLiteMatrix::Get(v9, 1uLL, 0) = v12;
    v13 = -(float)(v17 * v8.__sinval);
    CLiteMatrix::Get(v9, 1uLL, 0);
    result = v14;
  }
  *result = v13;
  return result;
}

unint64_t ParametricProcessor::InterpolateXTCIRs(uint64_t a1, int a2)
{
  int v4;
  _DWORD *v5;
  int v6;
  unint64_t result;
  _DWORD *v8;
  uint64_t __C;

  __C = 0;
  vDSP_dotpr(*(const float **)(*(_QWORD *)(a1 + 3896) + 24 * a2), 1, *(const float **)(a1 + 4112), 1, (float *)&__C + 1, *(_QWORD *)(a1 + 3712));
  vDSP_dotpr(*(const float **)(*(_QWORD *)(a1 + 3896) + 24 * (*(_DWORD *)(a1 + 28) + a2)), 1, *(const float **)(a1 + 4112), 1, (float *)&__C, *(_QWORD *)(a1 + 3712));
  v4 = HIDWORD(__C);
  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0) = v4;
  CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 0, 0);
  *v5 = 0;
  v6 = __C;
  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0) = v6;
  result = CLiteMatrix::Get((CLiteMatrix *)(a1 + 6424), 1uLL, 0);
  *v8 = 0;
  return result;
}

void ParametricProcessor::covarianceMatrixSmoothing(const float **this, const float **a2, CLiteMatrix *a3, float a4)
{
  float __B;
  float v8;

  __B = a4;
  vDSP_vsmul(this[2], 1, &__B, (float *)this[2], 1, this[3] - this[2]);
  v8 = 1.0 - a4;
  vDSP_vsmul(a2[2], 1, &v8, (float *)a2[2], 1, a2[3] - a2[2]);
  CLiteMatrix::operator+=((uint64_t)this, (uint64_t)a2);
  CLiteMatrix::SetWithOther((uint64_t)a2, (uint64_t *)this);
}

uint64_t ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex(uint64_t a1, CLiteMatrix *this, vDSP_Length *a3, vDSP_Length *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t *v7;
  CLiteMatrix *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  int v16;
  int *v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  const float *v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  char __jobvt;
  char __jobu;
  __CLPK_integer v33;
  __CLPK_integer v34;
  DSPSplitComplex __lda;
  __CLPK_integer __n;

  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 59, "Cx.NumRows()==Cx.NumCols()");
  v7 = (unint64_t *)(a1 + 5040);
  if (*(_QWORD *)(a1 + 5040) != v5)
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 62, "U.NumRows()==Cx.NumRows()");
  if (*(_QWORD *)(a1 + 5048) != v5)
    __assert_rtn("singularValueDecompositionOnlyU", "MatrixDecompositions.cpp", 63, "U.NumCols()==Cx.NumRows()");
  LODWORD(__lda.realp) = *(_QWORD *)this;
  __n = v5;
  CLiteMatrix::ToCLPKComplex(this, (_QWORD *)(a1 + 2488));
  v33 = 0;
  v34 = 3 * v5;
  __jobu = 83;
  __jobvt = 78;
  cgesvd_(&__jobu, &__jobvt, (__CLPK_integer *)&__lda, &__n, *(__CLPK_complex **)(a1 + 2488), (__CLPK_integer *)&__lda, *(__CLPK_real **)(a1 + 2512), *(__CLPK_complex **)(a1 + 2536), (__CLPK_integer *)&__lda, 0, &__n, *(__CLPK_complex **)(a1 + 2584), &v34, *(__CLPK_real **)(a1 + 2608), &v33);
  CLiteMatrix::FromCLPKComplex(v7, (_QWORD *)(a1 + 2536));
  v12 = *(_QWORD *)(a1 + 5080);
  if (v12)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 5088);
    do
    {
      if (v14)
      {
        for (i = 0; i < v14; ++i)
        {
          v16 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v7, v13, i + 1);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(a1 + 5080), v13, i) = v16;
          CLiteMatrix::Get((CLiteMatrix *)v7, v13, i + 1);
          v18 = *v17;
          CLiteMatrix::Get((CLiteMatrix *)(a1 + 5080), v13, i);
          *v19 = v18;
          v14 = *(_QWORD *)(a1 + 5088);
        }
        v12 = *(_QWORD *)(a1 + 5080);
      }
      ++v13;
    }
    while (v13 < v12);
  }
  __n = 1065353216;
  CLiteMatrix::MatrixMultiply(a3, (const CLiteMatrix *)(a1 + 5080), (const CLiteMatrix *)a4, v11);
  if (*a3)
  {
    v20 = 0;
    do
    {
      __lda.realp = 0;
      __lda.imagp = 0;
      __lda.realp = (float *)CLiteMatrix::Get((CLiteMatrix *)a4, v20, 0);
      __lda.imagp = v21;
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v20) = 0;
      vDSP_zvmags(&__lda, 1, *(float **)(a1 + 4720), 1, a4[1]);
      vDSP_sve(*(const float **)(a1 + 4720), 1, (float *)(*(_QWORD *)a5 + 4 * v20++), a4[1]);
    }
    while (*a3 > v20);
  }
  vDSP_svdiv((const float *)&__n, *(const float **)a5, 1, *(float **)a5, 1, *a4);
  v22 = *(float **)a5;
  v23 = *(float **)(a5 + 8);
  if (*(float **)a5 == v23)
  {
    v25 = *(const float **)a5;
  }
  else
  {
    v24 = v22 + 1;
    v25 = *(const float **)a5;
    if (v22 + 1 != v23)
    {
      v26 = *v22;
      v25 = *(const float **)a5;
      v27 = v22 + 1;
      do
      {
        v28 = *v27++;
        v29 = v28;
        if (v26 < v28)
        {
          v26 = v29;
          v25 = v24;
        }
        v24 = v27;
      }
      while (v27 != v23);
    }
  }
  return v25 - v22;
}

vDSP_Length *ParametricProcessor::calculateFrameEnergy(vDSP_Length *result, unint64_t *a2)
{
  vDSP_Stride v2;
  unint64_t v4;
  vDSP_Length v5;
  const float *v6;
  unint64_t v7;
  float v8;
  float v9;
  float __C;

  v2 = result[1];
  if (v2)
  {
    v4 = 0;
    v5 = *result;
    v6 = (const float *)result[2];
    v7 = (unint64_t)((uint64_t)(result[3] - (_QWORD)v6) >> 2) >> 1;
    do
    {
      __C = 0.0;
      vDSP_svesq(v6, v2, &__C, v5);
      v9 = 0.0;
      vDSP_svesq(&v6[v7], v2, &v9, v5);
      v8 = __C + v9;
      result = (vDSP_Length *)LiteMatrix<float>::operator()(a2, 0, v4);
      *(float *)result = v8;
      ++v4;
      ++v6;
    }
    while (v2 != v4);
  }
  return result;
}

void ParametricProcessor::estimateTargetCovarianceMatrix(ParametricProcessor *this, CLiteMatrix *a2, CLiteMatrix *a3, CLiteMatrix *a4, uint64_t a5)
{
  uint64_t v5;
  const CLiteMatrix *v6;
  unint64_t v11;
  CLiteMatrix *v12;
  CLiteMatrix *v13;
  unint64_t v14;
  int v15;
  int *v16;
  int v17;
  _DWORD *v18;
  int64_t v19;
  float v20;
  CLiteMatrix *v21;
  int v22;
  double v23;
  __double2 v24;
  __double2 v25;
  float v26;
  float v27;
  float v28;
  CLiteMatrix *v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  const void *v36;
  void *v37;
  void *v38;
  const void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t i;
  uint64_t v43;
  double v44;
  __double2 v45;
  __double2 v46;
  float v47;
  float v48;
  float v49;
  vDSP_Length NearestPoint;
  CLiteMatrix *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  const void *v55;
  void *v56;
  void *v57;
  const void *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  CLiteMatrix *v62;
  float v63;
  float *v64;
  float v65;
  float *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  __double2 v71;
  __double2 v72;
  float v73;
  float v74;
  float v75;
  CLiteMatrix *v76;
  int64_t v77;
  int v78;
  uint64_t v80;
  float *v81;
  float *j;
  char *v83;
  float *v84;
  float *v85;
  float *v86;
  float v87;
  float v88;
  uint64_t v89;
  CLiteMatrix *v90;
  CLiteMatrix *v91;
  CLiteMatrix *v92;
  int v93;
  double v94;
  __double2 v95;
  __double2 v96;
  float v97;
  float v98;
  float v99;
  vDSP_Length v100;
  CLiteMatrix *v101;
  unint64_t v102;
  CLiteMatrix *v103;
  unint64_t v104;
  int v105;
  int *v106;
  int v107;
  _DWORD *v108;
  unint64_t v109;
  float *v110;
  float *v111;
  float *v112;
  BOOL v113;
  float *v114;
  float v115;
  float *v116;
  float v117;
  float v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  int *v122;
  int v123;
  _DWORD *v124;
  const CLiteMatrix *v125;
  CLiteMatrix *v126;
  int64_t v127;
  float v128;
  int v129;
  double v130;
  __double2 v131;
  __double2 v132;
  float v133;
  float v134;
  float v135;
  CLiteMatrix *v136;
  int64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  int64_t v141;
  float v142;
  float v143;
  float *v144;
  float v145;
  float v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  uint64_t v151;
  float v152;
  float v153;
  vDSP_Length v154;
  const float *v155;
  const float *v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  CLiteMatrix *v163;
  CLiteMatrix *v164;
  unint64_t v165;
  int v166;
  int *v167;
  int v168;
  _DWORD *v169;
  int64_t v170;
  float v171;
  int v172;
  uint64_t v173;
  double v174;
  __double2 v175;
  __double2 v176;
  float v177;
  float v178;
  float v179;
  CLiteMatrix *v180;
  int64_t v181;
  int v182;
  uint64_t v183;
  double v184;
  __double2 v185;
  __double2 v186;
  float v187;
  float v188;
  float sinval;
  double v190;
  __double2 v191;
  __double2 v192;
  float v193;
  float v194;
  float v195;
  unint64_t v196;
  int v197;
  vDSP_Length *v198;
  const CLiteMatrix *v199;
  const CLiteMatrix *v200;
  uint64_t v201;
  unint64_t v202;
  float *v203;
  uint64_t v204;
  float *v205;
  float *v206;
  uint64_t v207;
  float *v208;
  float *v209;
  uint64_t v210;
  unint64_t v211;
  float *v212;
  uint64_t v213;
  float *v214;
  float *v215;
  uint64_t v216;
  float *v217;
  float *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  float *v224;
  float *v225;
  uint64_t v226;
  float *v227;
  float *v228;
  uint64_t v229;
  float *v230;
  float *v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  const void *v235;
  void *v236;
  void *v237;
  const void *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  void *v242;
  const void *v243;
  void *v244;
  void *v245;
  const void *v246;
  double v247;
  __double2 v248;
  __double2 v249;
  float v250;
  float v251;
  float v252;
  int64_t v253;
  int v254;
  uint64_t v255;
  double v256;
  __double2 v257;
  __double2 v258;
  float v259;
  float v260;
  float v261;
  vDSP_Length v262;
  void *v263;
  CLiteMatrix *v264;
  char *v265;
  uint64_t v266;
  double v267;
  __double2 v268;
  __double2 v269;
  float v270;
  float v271;
  float v272;
  double v273;
  __double2 v274;
  __double2 v275;
  float v276;
  float v277;
  float v278;
  unint64_t v279;
  int v280;
  uint64_t v281;
  double v282;
  __double2 v283;
  __double2 v284;
  float v285;
  float v286;
  float v287;
  double v288;
  __double2 v289;
  __double2 v290;
  float v291;
  float v292;
  float v293;
  unint64_t v294;
  int v295;
  int v296;
  vDSP_Length *v297;
  CLiteMatrix *v298;
  float *__C;
  float *v304;
  uint64_t v305;
  DSPSplitComplex v306;
  DSPSplitComplex v307;
  DSPSplitComplex __B;

  v5 = a5;
  v6 = a2;
  switch(*((_DWORD *)this + 32))
  {
    case 0:
      v11 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 430, (vDSP_Length *)this + 601, (uint64_t)this + 4968);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 418) + 40 * v11), a4, (ParametricProcessor *)((char *)this + 5416), v12);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((_DWORD *)this + 15))
      {
        v14 = 0;
        do
        {
          v15 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v11, v14);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v14) = v15;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v11, v14);
          v17 = *v16;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v14);
          *v18 = v17;
          ++v14;
        }
        while (v14 < *((int *)this + 15));
      }
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v13);
      if (*((int *)this + 8) >= 1)
      {
        v19 = 0;
        do
        {
          v20 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v19)
              / ((double)(*((_DWORD *)this + 14) + 1)
               * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((_QWORD *)this + 790) + 4 * v19++) = v20;
        }
        while (v19 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      v22 = *((_DWORD *)this + 33);
      v5 = a5;
      switch(v22)
      {
        case 1:
          v184 = *(float *)(*((_QWORD *)this + 389) + 4 * v11) * 0.0174532925;
          v185 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v11) * 0.0174532925);
          v186 = __sincos_stret(v184);
          v187 = v185.__cosval * v186.__cosval;
          *((float *)this + 1056) = v187;
          v188 = v185.__cosval * v186.__sinval;
          *((float *)this + 1057) = v188;
          sinval = v185.__sinval;
          *((float *)this + 1058) = sinval;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
          break;
        case 2:
          v190 = *(float *)(*((_QWORD *)this + 389) + 4 * v11) * 0.0174532925;
          v191 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v11) * 0.0174532925);
          v192 = __sincos_stret(v190);
          v193 = v191.__cosval * v192.__cosval;
          *((float *)this + 1056) = v193;
          v194 = v191.__cosval * v192.__sinval;
          *((float *)this + 1057) = v194;
          v195 = v191.__sinval;
          *((float *)this + 1058) = v195;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
          break;
        case 3:
          v23 = *(float *)(*((_QWORD *)this + 389) + 4 * v11) * 0.0174532925;
          v24 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v11) * 0.0174532925);
          v25 = __sincos_stret(v23);
          v26 = v24.__cosval * v25.__cosval;
          *((float *)this + 1056) = v26;
          v27 = v24.__cosval * v25.__sinval;
          *((float *)this + 1057) = v27;
          v28 = v24.__sinval;
          *((float *)this + 1058) = v28;
          VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
          if (*((int *)this + 10) >= 1)
          {
            v30 = 0;
            do
            {
              v31 = *(_DWORD *)(*((_QWORD *)this + 517) + 4 * v30);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v30++, 0) = v31;
            }
            while (v30 < *((int *)this + 10));
          }
          v32 = 4184;
LABEL_108:
          CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v32), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v29);
          goto LABEL_109;
        default:
LABEL_109:
          if (*((_DWORD *)this + 15))
          {
            v196 = 0;
            do
            {
              v197 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), v11, v196);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v196++, 0) = v197;
            }
            while (v196 < *((int *)this + 15));
          }
          v198 = (vDSP_Length *)((char *)this + 6384);
          v199 = (ParametricProcessor *)((char *)this + 5800);
          v200 = (ParametricProcessor *)((char *)this + 5656);
          goto LABEL_155;
      }
      v32 = 6424;
      goto LABEL_108;
    case 1:
      ActiveIntensityAnalysis::calculateCartesianActiveIntensity(*((_QWORD *)this + 1070), a4);
      ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(*((vDSP_Length **)this + 1070), (float **)this + 1071);
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 6552), a4);
      if (*((_DWORD *)this + 8))
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 824) + v33), 0, 0);
          v36 = (const void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6552), v34, 0);
          memcpy(v35, v36, 4 * *((int *)this + 15));
          CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 824) + v33), 0, 0);
          v38 = v37;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6552), v34, 0);
          memcpy(v38, v39, 4 * *((int *)this + 15));
          ++v34;
          v40 = *((int *)this + 8);
          v33 += 40;
        }
        while (v34 < v40);
        if ((_DWORD)v40)
        {
          v41 = 0;
          for (i = 0; i < v40; ++i)
          {
            v43 = *((_QWORD *)this + 1071);
            v44 = *(float *)(v43 + 4 * i) * 0.0174532925;
            v45 = __sincos_stret(*(float *)(v43 + 4 * (v40 + i)) * 0.0174532925);
            v46 = __sincos_stret(v44);
            v47 = v45.__cosval * v46.__cosval;
            *((float *)this + 1056) = v47;
            v48 = v45.__cosval * v46.__sinval;
            *((float *)this + 1057) = v48;
            v49 = v45.__sinval;
            *((float *)this + 1058) = v49;
            NearestPoint = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((_QWORD *)this + 472), (uint64_t)this + 4696, v47, v48, v49);
            *(float *)(*((_QWORD *)this + 660) + 4 * i) = (float)NearestPoint;
            CLiteMatrix::MatrixMultiplyViaDotProducts((CLiteMatrix *)(*((_QWORD *)this + 816) + 40 * (unint64_t)(float)NearestPoint), (CLiteMatrix *)(*((_QWORD *)this + 824) + v41), (CLiteMatrix *)(*((_QWORD *)this + 827) + v41), v51);
            v40 = *((int *)this + 8);
            v41 += 40;
          }
        }
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5456), (ParametricProcessor *)((char *)this + 5416));
      if (*((_DWORD *)this + 8))
      {
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5456), v53, 0);
          v55 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 827) + v52), 0, 0);
          memcpy(v54, v55, 4 * *((int *)this + 15));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5456), v53, 0);
          v57 = v56;
          CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 827) + v52), 0, 0);
          memcpy(v57, v58, 4 * *((int *)this + 15));
          ++v53;
          v52 += 40;
        }
        while (v53 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5416), (ParametricProcessor *)((char *)this + 5456));
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      vDSP_vsdiv(*((const float **)this + 782), 1, (const float *)this + 20, *((float **)this + 790), 1, *((int *)this + 8));
      HOA::createEncoder(*((HOA **)this + 53), *((const float **)this + 1071), (const float *)(*((_QWORD *)this + 1071) + 4 * *((int *)this + 8)), *((int *)this + 8), *((float **)this + 414), (uint64_t)(*((_QWORD *)this + 415) - *((_QWORD *)this + 414)) >> 2);
      vDSP_vsmul(*((const float **)this + 414), 1, &kBeamNormalizer, *((float **)this + 584), 1, (uint64_t)(*((_QWORD *)this + 415) - *((_QWORD *)this + 414)) >> 2);
      LODWORD(v59) = *((_DWORD *)this + 8);
      if ((_DWORD)v59)
      {
        v60 = 0;
        v61 = 0;
        do
        {
          vDSP_dotpr((const float *)(*((_QWORD *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, (const float *)(*((_QWORD *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, *((float **)this + 573), (uint64_t)(*((_QWORD *)this + 554) - *((_QWORD *)this + 553)) >> 2);
          vDSP_vsdiv((const float *)(*((_QWORD *)this + 584) + 4 * v61 * *((int *)this + 15)), 1, *((const float **)this + 573), *((float **)this + 563), 1, (uint64_t)(*((_QWORD *)this + 554) - *((_QWORD *)this + 553)) >> 2);
          memcpy(*((void **)this + 795), *((const void **)this + 563), 4 * *((_QWORD *)this + 562));
          CLiteMatrix::MatrixMultiplyViaDotProducts((ParametricProcessor *)((char *)this + 6344), (CLiteMatrix *)(*((_QWORD *)this + 824) + v60), (CLiteMatrix *)(*((_QWORD *)this + 846) + v60), v62);
          v63 = *(float *)(*((_QWORD *)this + 790) + 4 * v61);
          v64 = (float *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 846) + v60), 0, 0);
          *v64 = v63 * *v64;
          v65 = *(float *)(*((_QWORD *)this + 790) + 4 * v61);
          CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 846) + v60), 0, 0);
          *v66 = v65 * *v66;
          ++v61;
          v59 = *((int *)this + 8);
          v60 += 40;
        }
        while (v61 < v59);
      }
      v67 = *((_DWORD *)this + 33);
      switch(v67)
      {
        case 1:
          if (!(_DWORD)v59)
            goto LABEL_123;
          v201 = 0;
          v202 = 0;
          do
          {
            memcpy(*((void **)this + 514), (const void *)(*((_QWORD *)this + 520)+ 4* (unint64_t)(float)(*(float *)(*((_QWORD *)this + 660) + 4 * v202)* (float)*((unint64_t *)this + 464))), *((_QWORD *)this + 456) - *((_QWORD *)this + 455));
            ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, v5);
            v203 = (float *)(*((_QWORD *)this + 805)
                           + 4 * ((uint64_t)(*((_QWORD *)this + 806) - *((_QWORD *)this + 805)) >> 3));
            __B.realp = (float *)*((_QWORD *)this + 805);
            __B.imagp = v203;
            v307.realp = 0;
            v307.imagp = 0;
            v204 = *((_QWORD *)this + 846) + v201;
            v205 = *(float **)(v204 + 16);
            v206 = &v205[(uint64_t)(*(_QWORD *)(v204 + 24) - (_QWORD)v205) >> 3];
            v307.realp = v205;
            v307.imagp = v206;
            v306.realp = 0;
            v306.imagp = 0;
            v207 = *((_QWORD *)this + 852) + v201;
            v208 = *(float **)(v207 + 16);
            v209 = &v208[(uint64_t)(*(_QWORD *)(v207 + 24) - (_QWORD)v208) >> 3];
            v306.realp = v208;
            v306.imagp = v209;
            vDSP_zvzsml(&__B, 1, &v307, &v306, 1, 2uLL);
            ++v202;
            v59 = *((int *)this + 8);
            v201 += 40;
          }
          while (v202 < v59);
          break;
        case 2:
          if (!(_DWORD)v59)
            goto LABEL_123;
          v210 = 0;
          v211 = 0;
          do
          {
            memcpy(*((void **)this + 514), (const void *)(*((_QWORD *)this + 520)+ 4* (unint64_t)(float)(*(float *)(*((_QWORD *)this + 660) + 4 * v211)* (float)*((unint64_t *)this + 464))), *((_QWORD *)this + 456) - *((_QWORD *)this + 455));
            ParametricProcessor::InterpolateXTCIRs((uint64_t)this, v5);
            v212 = (float *)(*((_QWORD *)this + 805)
                           + 4 * ((uint64_t)(*((_QWORD *)this + 806) - *((_QWORD *)this + 805)) >> 3));
            __B.realp = (float *)*((_QWORD *)this + 805);
            __B.imagp = v212;
            v307.realp = 0;
            v307.imagp = 0;
            v213 = *((_QWORD *)this + 846) + v210;
            v214 = *(float **)(v213 + 16);
            v215 = &v214[(uint64_t)(*(_QWORD *)(v213 + 24) - (_QWORD)v214) >> 3];
            v307.realp = v214;
            v307.imagp = v215;
            v306.realp = 0;
            v306.imagp = 0;
            v216 = *((_QWORD *)this + 852) + v210;
            v217 = *(float **)(v216 + 16);
            v218 = &v217[(uint64_t)(*(_QWORD *)(v216 + 24) - (_QWORD)v217) >> 3];
            v306.realp = v217;
            v306.imagp = v218;
            vDSP_zvzsml(&__B, 1, &v307, &v306, 1, 2uLL);
            ++v211;
            v59 = *((int *)this + 8);
            v210 += 40;
          }
          while (v211 < v59);
          break;
        case 3:
          if (!(_DWORD)v59)
            goto LABEL_123;
          v68 = 0;
          v59 = (int)v59;
          do
          {
            v69 = *((_QWORD *)this + 1071);
            v70 = *(float *)(v69 + 4 * v68) * 0.0174532925;
            v71 = __sincos_stret(*(float *)(v69 + 4 * (v59 + v68)) * 0.0174532925);
            v72 = __sincos_stret(v70);
            v73 = v71.__cosval * v72.__cosval;
            *((float *)this + 1056) = v73;
            v74 = v71.__cosval * v72.__sinval;
            *((float *)this + 1057) = v74;
            v75 = v71.__sinval;
            *((float *)this + 1058) = v75;
            VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
            if (*((int *)this + 10) >= 1)
            {
              v77 = 0;
              do
              {
                v78 = *(_DWORD *)(*((_QWORD *)this + 517) + 4 * v77);
                *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v77++, 0) = v78;
              }
              while (v77 < *((int *)this + 10));
            }
            CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 523, (const CLiteMatrix *)(*((_QWORD *)this + 846) + 40 * v68), (const CLiteMatrix *)(*((_QWORD *)this + 852) + 40 * v68), v76);
            ++v68;
            v59 = *((int *)this + 8);
          }
          while (v68 < v59);
          LODWORD(v59) = *((_DWORD *)this + 8);
          break;
      }
      if ((_DWORD)v59)
      {
        v219 = 0;
        v220 = 0;
        v221 = 0;
        do
        {
          v222 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 855) + v219), 0, 0);
          memcpy(v222, (const void *)(*((_QWORD *)this + 414) + v220), 4 * *((int *)this + 15));
          __B.realp = 0;
          __B.imagp = 0;
          v223 = *((_QWORD *)this + 855) + v219;
          v224 = *(float **)(v223 + 16);
          v225 = &v224[(uint64_t)(*(_QWORD *)(v223 + 24) - (_QWORD)v224) >> 3];
          __B.realp = v224;
          __B.imagp = v225;
          v307.realp = 0;
          v307.imagp = 0;
          v226 = *((_QWORD *)this + 846) + v219;
          v227 = *(float **)(v226 + 16);
          v228 = &v227[(uint64_t)(*(_QWORD *)(v226 + 24) - (_QWORD)v227) >> 3];
          v307.realp = v227;
          v307.imagp = v228;
          v306.realp = 0;
          v306.imagp = 0;
          v229 = *((_QWORD *)this + 863) + v219;
          v230 = *(float **)(v229 + 16);
          v231 = &v230[(uint64_t)(*(_QWORD *)(v229 + 24) - (_QWORD)v230) >> 3];
          v306.realp = v230;
          v306.imagp = v231;
          vDSP_zvzsml(&__B, 1, &v307, &v306, 1, *((int *)this + 15));
          ++v221;
          v220 += 16;
          v219 += 40;
        }
        while (v221 < *((int *)this + 8));
      }
LABEL_123:
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5760), (ParametricProcessor *)((char *)this + 5720));
      if (*((_DWORD *)this + 8))
      {
        v232 = 0;
        v233 = 0;
        do
        {
          v234 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5760), v233, 0);
          v235 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 852) + v232), 0, 0);
          memcpy(v234, v235, 4 * *((int *)this + 10));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5760), v233, 0);
          v237 = v236;
          CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 852) + v232), 0, 0);
          memcpy(v237, v238, 4 * *((int *)this + 10));
          ++v233;
          v232 += 40;
        }
        while (v233 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5720), (ParametricProcessor *)((char *)this + 5760));
      v239 = (char *)this + 5800;
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5840), (ParametricProcessor *)((char *)this + 5800));
      if (*((_DWORD *)this + 8))
      {
        v240 = 0;
        v241 = 0;
        do
        {
          v242 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5840), v241, 0);
          v243 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 863) + v240), 0, 0);
          memcpy(v242, v243, 4 * *((int *)this + 15));
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5840), v241, 0);
          v245 = v244;
          CLiteMatrix::Get((CLiteMatrix *)(*((_QWORD *)this + 863) + v240), 0, 0);
          memcpy(v245, v246, 4 * *((int *)this + 15));
          ++v241;
          v240 += 40;
        }
        while (v241 < *((int *)this + 8));
      }
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 5800), (ParametricProcessor *)((char *)this + 5840));
      goto LABEL_138;
    case 2:
      ActiveIntensityAnalysis::calculateCartesianActiveIntensity(*((_QWORD *)this + 1070), a4);
      ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(*((vDSP_Length **)this + 1070), (float **)this + 650);
      v80 = *((_QWORD *)this + 651) - 4 * *((int *)this + 8);
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 5224, *((char **)this + 650), v80, (v80 - *((_QWORD *)this + 650)) >> 2);
      v81 = (float *)*((_QWORD *)this + 653);
      for (j = (float *)*((_QWORD *)this + 654); v81 != j; ++v81)
        *v81 = *v81 * 0.017453;
      v83 = (char *)(*((_QWORD *)this + 650) + 4 * *((int *)this + 8));
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 5248, v83, *((_QWORD *)this + 651), (uint64_t)(*((_QWORD *)this + 651) - (_QWORD)v83) >> 2);
      v84 = (float *)*((_QWORD *)this + 656);
      v85 = (float *)*((_QWORD *)this + 657);
      if (v84 != v85)
      {
        v86 = (float *)*((_QWORD *)this + 656);
        do
        {
          *v86 = *v86 * 0.017453;
          ++v86;
        }
        while (v86 != v85);
      }
      v87 = DirectionalStatistics::DirectionalMean(*((float **)this + 653), *((float **)this + 654));
      *((float *)this + 1318) = v87;
      v88 = DirectionalStatistics::DirectionalMean(v84, v85);
      *((float *)this + 1318) = v87 * 57.296;
      *((float *)this + 1319) = v88 * 57.296;
      v89 = *((_QWORD *)this + 1067);
      *(float *)v89 = v87 * 57.296;
      *(_DWORD *)(v89 + 4) = *((_DWORD *)this + 1319);
      ParametricProcessor::calculateSHBeamCoefficients((uint64_t)this, (const float *)v89, (ParametricProcessor *)((char *)this + 6688));
      CLiteMatrix::SetWithTranposeOfOther((ParametricProcessor *)((char *)this + 6728), (ParametricProcessor *)((char *)this + 6688));
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 841, a4, (ParametricProcessor *)((char *)this + 5656), v90);
      RotationUtilities::yawPitchRoll2RotationMatrixFOA((ParametricProcessor *)((char *)this + 6488), v91, *((float *)this + 1318) * 0.017453, *((float *)this + 1319) * -0.017453, -0.017453);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 811, a4, (ParametricProcessor *)((char *)this + 5416), v92);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      vDSP_vsdiv(*((const float **)this + 782), 1, (const float *)this + 20, *((float **)this + 790), 1, *((int *)this + 8));
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      v93 = *((_DWORD *)this + 33);
      if (v93 == 3)
      {
        v247 = *((float *)this + 1318) * 0.0174532925;
        v248 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
        v249 = __sincos_stret(v247);
        v250 = v248.__cosval * v249.__cosval;
        *((float *)this + 1056) = v250;
        v251 = v248.__cosval * v249.__sinval;
        *((float *)this + 1057) = v251;
        v252 = v248.__sinval;
        *((float *)this + 1058) = v252;
        VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
        v5 = a5;
        if (*((int *)this + 10) >= 1)
        {
          v253 = 0;
          do
          {
            v254 = *(_DWORD *)(*((_QWORD *)this + 517) + 4 * v253);
            *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v253++, 0) = v254;
          }
          while (v253 < *((int *)this + 10));
        }
        v255 = 4184;
      }
      else
      {
        v5 = a5;
        if (v93 == 2)
        {
          v256 = *((float *)this + 1318) * 0.0174532925;
          v257 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          v258 = __sincos_stret(v256);
          v259 = v257.__cosval * v258.__cosval;
          *((float *)this + 1056) = v259;
          v260 = v257.__cosval * v258.__sinval;
          *((float *)this + 1057) = v260;
          v261 = v257.__sinval;
          *((float *)this + 1058) = v261;
          v262 = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((_QWORD *)this + 472), (uint64_t)this + 4696, v259, v260, v261);
          memcpy(*((void **)this + 514), (const void *)(*((_QWORD *)this + 520) + 4 * *((_QWORD *)this + 464) * v262), *((_QWORD *)this + 456) - *((_QWORD *)this + 455));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
        }
        else
        {
          if (v93 != 1)
            goto LABEL_137;
          v94 = *((float *)this + 1318) * 0.0174532925;
          v95 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          v96 = __sincos_stret(v94);
          v97 = v95.__cosval * v96.__cosval;
          *((float *)this + 1056) = v97;
          v98 = v95.__cosval * v96.__sinval;
          *((float *)this + 1057) = v98;
          v99 = v95.__sinval;
          *((float *)this + 1058) = v99;
          v100 = ActiveIntensityAnalysis::findNearestPoint(*((const float **)this + 471), *((_QWORD *)this + 472), (uint64_t)this + 4696, v97, v98, v99);
          memcpy(*((void **)this + 514), (const void *)(*((_QWORD *)this + 520) + 4 * *((_QWORD *)this + 464) * v100), *((_QWORD *)this + 456) - *((_QWORD *)this + 455));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
        }
        v255 = 6424;
      }
      CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v255), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v101);
LABEL_137:
      HOA::createEncoder(*((HOA **)this + 53), (const float *)this + 1318, (const float *)this + 1319, 1uLL, *((float **)this + 866), (uint64_t)(*((_QWORD *)this + 867) - *((_QWORD *)this + 866)) >> 2);
      v263 = (void *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6864), 0, 0);
      memcpy(v263, *((const void **)this + 866), 4 * *((int *)this + 15));
      v239 = (char *)this + 5800;
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 858, (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5800), v264);
LABEL_138:
      CLiteMatrix::SetWithOther((uint64_t)this + 5880, (uint64_t *)a4);
      v265 = (char *)this + 5880;
      v266 = (uint64_t)v239;
      goto LABEL_156;
    case 3:
      if (*((_QWORD *)this + 401))
      {
        v102 = 0;
        do
        {
          CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 418) + 40 * v102), a4, (ParametricProcessor *)((char *)this + 5416), a4);
          if (*((_DWORD *)this + 15))
          {
            v104 = 0;
            do
            {
              v105 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v102, v104);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v104) = v105;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v102, v104);
              v107 = *v106;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v104);
              *v108 = v107;
              ++v104;
            }
            while (v104 < *((int *)this + 15));
          }
          CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v103);
          ParametricProcessor::calculateFrameEnergy((vDSP_Length *)this + 707, (unint64_t *)this + 672);
          if (*((_DWORD *)this + 8))
          {
            v109 = 0;
            do
              *(float *)(*((_QWORD *)this + 621) + 4 * v102) = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 672, 0, v109++)+ *(float *)(*((_QWORD *)this + 621) + 4 * v102);
            while (v109 < *((int *)this + 8));
          }
          ++v102;
        }
        while (v102 < *((_QWORD *)this + 401));
      }
      v110 = (float *)*((_QWORD *)this + 621);
      v111 = (float *)*((_QWORD *)this + 622);
      v112 = v110 + 1;
      v113 = v110 == v111 || v112 == v111;
      v114 = (float *)*((_QWORD *)this + 621);
      if (!v113)
      {
        v115 = *v110;
        v114 = (float *)*((_QWORD *)this + 621);
        v116 = v110 + 1;
        do
        {
          v117 = *v116++;
          v118 = v117;
          if (v115 < v117)
          {
            v115 = v118;
            v114 = v112;
          }
          v112 = v116;
        }
        while (v116 != v111);
      }
      v119 = v114 - v110;
      v5 = a5;
      if (*((_DWORD *)this + 15))
      {
        v120 = 0;
        do
        {
          v121 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v119, v120);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v120) = v121;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), v119, v120);
          v123 = *v122;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v120);
          *v124 = v123;
          ++v120;
        }
        while (v120 < *((int *)this + 15));
      }
      v125 = (ParametricProcessor *)((char *)this + 5656);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), a4);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 418) + 40 * v119), a4, (ParametricProcessor *)((char *)this + 5416), v126);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((int *)this + 8) >= 1)
      {
        v127 = 0;
        do
        {
          v128 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v127)
               / ((double)(*((_DWORD *)this + 14) + 1)
                * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((_QWORD *)this + 790) + 4 * v127++) = v128;
        }
        while (v127 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      v129 = *((_DWORD *)this + 33);
      v6 = a2;
      switch(v129)
      {
        case 1:
          v267 = *(float *)(*((_QWORD *)this + 389) + 4 * v119) * 0.0174532925;
          v268 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v119) * 0.0174532925);
          v269 = __sincos_stret(v267);
          v270 = v268.__cosval * v269.__cosval;
          *((float *)this + 1056) = v270;
          v271 = v268.__cosval * v269.__sinval;
          *((float *)this + 1057) = v271;
          v272 = v268.__sinval;
          *((float *)this + 1058) = v272;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, a5);
          break;
        case 2:
          v273 = *(float *)(*((_QWORD *)this + 389) + 4 * v119) * 0.0174532925;
          v274 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v119) * 0.0174532925);
          v275 = __sincos_stret(v273);
          v276 = v274.__cosval * v275.__cosval;
          *((float *)this + 1056) = v276;
          v277 = v274.__cosval * v275.__sinval;
          *((float *)this + 1057) = v277;
          v278 = v274.__sinval;
          *((float *)this + 1058) = v278;
          VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
          ParametricProcessor::InterpolateXTCIRs((uint64_t)this, a5);
          break;
        case 3:
          v130 = *((float *)this + 1318) * 0.0174532925;
          v131 = __sincos_stret(*((float *)this + 1319) * 0.0174532925);
          v132 = __sincos_stret(v130);
          v133 = v131.__cosval * v132.__cosval;
          *((float *)this + 1056) = v133;
          v134 = v131.__cosval * v132.__sinval;
          *((float *)this + 1057) = v134;
          v135 = v131.__sinval;
          *((float *)this + 1058) = v135;
          VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
          if (*((int *)this + 10) >= 1)
          {
            v137 = 0;
            do
            {
              v138 = *(_DWORD *)(*((_QWORD *)this + 517) + 4 * v137);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v137++, 0) = v138;
            }
            while (v137 < *((int *)this + 10));
          }
          v139 = 4184;
LABEL_142:
          CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v139), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v136);
LABEL_143:
          if (*((_DWORD *)this + 15))
          {
            v279 = 0;
            do
            {
              v280 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), v119, v279);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v279++, 0) = v280;
            }
            while (v279 < *((int *)this + 15));
          }
          goto LABEL_154;
        default:
          goto LABEL_143;
      }
      v139 = 6424;
      goto LABEL_142;
    case 4:
      if (*((_DWORD *)this + 10))
      {
        v140 = 0;
        do
        {
          CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 421) + 40 * v140), a4, (ParametricProcessor *)((char *)this + 5416), a4);
          ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
          ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
          if (*((int *)this + 8) >= 1)
          {
            v141 = 0;
            do
            {
              v142 = *(float *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 7680), v140, v141);
              v143 = v142
                   * (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v141)
                           / (float)*((int *)this + 15));
              *(float *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5720), v140, v141) = v143;
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 7680), v140, v141);
              v145 = *v144;
              v146 = v145
                   * (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v141)
                           / (float)*((int *)this + 15));
              CLiteMatrix::Get((ParametricProcessor *)((char *)this + 5720), v140, v141);
              *v147 = v146;
              ++v141;
            }
            while (v141 < *((int *)this + 8));
          }
          ++v140;
        }
        while (v140 < *((int *)this + 10));
      }
      vDSP_vclr(*((float **)this + 737), 1, (uint64_t)(*((_QWORD *)this + 738) - *((_QWORD *)this + 737)) >> 2);
      v5 = a5;
      v6 = a2;
      goto LABEL_157;
    case 5:
      v148 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 435, (vDSP_Length *)this + 606, (uint64_t)this + 4992);
      v149 = *((_QWORD *)this + 408);
      v150 = *(float *)(v149 + 4 * v148);
      v151 = *((_QWORD *)this + 417);
      v152 = *(float *)(v149 + 4 * (v151 + v148));
      v153 = *(float *)(v149 + 4 * (v148 + 2 * v151));
      v154 = *((int *)this + 28);
      v304 = 0;
      v305 = 0;
      __C = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__C, *((const void **)this + 536), *((_QWORD *)this + 537), (uint64_t)(*((_QWORD *)this + 537) - *((_QWORD *)this + 536)) >> 2);
      v155 = (const float *)*((_QWORD *)this + 395);
      *(float *)&__B.realp = v150 * -2.0;
      *(float *)&v307.realp = v152 * -2.0;
      *(float *)&v306.realp = v153 * -2.0;
      vDSP_vsmul(v155, 1, (const float *)&__B, __C, 1, v154);
      v156 = &v155[v154];
      vDSP_vsma(v156, 1, (const float *)&v307, __C, 1, __C, 1, v154);
      vDSP_vsma(&v156[v154], 1, (const float *)&v306, __C, 1, __C, 1, v154);
      vDSP_vsorti(__C, *((vDSP_Length **)this + 539), 0, v154, 1);
      if (__C)
      {
        v304 = __C;
        operator delete(__C);
      }
      v157 = *((_DWORD *)this + 28);
      if (v157)
      {
        v158 = 0;
        LODWORD(v159) = *((_DWORD *)this + 15);
        do
        {
          if ((_DWORD)v159)
          {
            v160 = 0;
            do
            {
              v161 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v158), v160);
              *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3520), v158, v160++) = v161;
              v159 = *((int *)this + 15);
            }
            while (v160 < v159);
            v157 = *((_DWORD *)this + 28);
          }
          ++v158;
        }
        while (v158 < v157);
      }
      v162 = ParametricProcessor::calculatePseudoSpectrumBasedDOAIndex((uint64_t)this, a3, (vDSP_Length *)this + 440, (vDSP_Length *)this + 611, (uint64_t)this + 5016);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 418) + 40 * *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162)), a4, (ParametricProcessor *)((char *)this + 5416), v163);
      ParametricProcessor::calculateFrameEnergy((vDSP_Length *)a4, (unint64_t *)this + 672);
      ParametricProcessor::calculateG((uint64_t)this, (vDSP_Length *)this + 677, (uint64_t)this + 5376, (uint64_t)this + 6240);
      if (*((_DWORD *)this + 15))
      {
        v165 = 0;
        do
        {
          v166 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162), v165);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v165) = v166;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3600), *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162), v165);
          v168 = *v167;
          CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6344), 0, v165);
          *v169 = v168;
          ++v165;
        }
        while (v165 < *((int *)this + 15));
      }
      v125 = (ParametricProcessor *)((char *)this + 5656);
      CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 793, a4, (ParametricProcessor *)((char *)this + 5656), v164);
      if (*((int *)this + 8) >= 1)
      {
        v170 = 0;
        do
        {
          v171 = *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 780, 0, v170)
               / ((double)(*((_DWORD *)this + 14) + 1)
                * (double)(*((_DWORD *)this + 14) + 1));
          *(float *)(*((_QWORD *)this + 790) + 4 * v170++) = v171;
        }
        while (v170 < *((int *)this + 8));
      }
      CLiteMatrix::ScaleCols((ParametricProcessor *)((char *)this + 5656), (const float **)this + 790);
      v172 = *((_DWORD *)this + 33);
      if (v172 == 1)
      {
        v281 = *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162);
        v282 = *(float *)(*((_QWORD *)this + 389) + 4 * v281) * 0.0174532925;
        v283 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v281) * 0.0174532925);
        v284 = __sincos_stret(v282);
        v285 = v283.__cosval * v284.__cosval;
        *((float *)this + 1056) = v285;
        v286 = v283.__cosval * v284.__sinval;
        *((float *)this + 1057) = v286;
        v287 = v283.__sinval;
        *((float *)this + 1058) = v287;
        VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
        ParametricProcessor::interpolateHRTFs((uint64_t)this, (const float **)this + 514, v5);
LABEL_149:
        v183 = 6424;
        goto LABEL_150;
      }
      if (v172 == 2)
      {
        v288 = *(float *)(*((_QWORD *)this + 389) + 4 * v162) * 0.0174532925;
        v289 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v162) * 0.0174532925);
        v290 = __sincos_stret(v288);
        v291 = v289.__cosval * v290.__cosval;
        *((float *)this + 1056) = v291;
        v292 = v289.__cosval * v290.__sinval;
        *((float *)this + 1057) = v292;
        v293 = v289.__sinval;
        *((float *)this + 1058) = v293;
        VBAP::calculateVBAPGains(*((VBAP **)this + 55), (float32x2_t *)this + 528, *((float **)this + 514));
        ParametricProcessor::InterpolateXTCIRs((uint64_t)this, v5);
        goto LABEL_149;
      }
      if (v172 != 3)
        goto LABEL_151;
      v173 = *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162);
      v174 = *(float *)(*((_QWORD *)this + 389) + 4 * v173) * 0.0174532925;
      v175 = __sincos_stret(*(float *)(*((_QWORD *)this + 392) + 4 * v173) * 0.0174532925);
      v176 = __sincos_stret(v174);
      v177 = v175.__cosval * v176.__cosval;
      *((float *)this + 1056) = v177;
      v178 = v175.__cosval * v176.__sinval;
      *((float *)this + 1057) = v178;
      v179 = v175.__sinval;
      *((float *)this + 1058) = v179;
      VBAP::calculateVBAPGains(*((VBAP **)this + 56), (float32x2_t *)this + 528, *((float **)this + 517));
      if (*((int *)this + 10) >= 1)
      {
        v181 = 0;
        do
        {
          v182 = *(_DWORD *)(*((_QWORD *)this + 517) + 4 * v181);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 4184), v181++, 0) = v182;
        }
        while (v181 < *((int *)this + 10));
      }
      v183 = 4184;
LABEL_150:
      CLiteMatrix::MatrixMultiply((vDSP_Length *)((char *)this + v183), (ParametricProcessor *)((char *)this + 5656), (ParametricProcessor *)((char *)this + 5720), v180);
LABEL_151:
      if (*((_DWORD *)this + 15))
      {
        v294 = 0;
        do
        {
          v295 = *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 3440), *(_QWORD *)(*((_QWORD *)this + 539) + 8 * v162), v294);
          *(_DWORD *)CLiteMatrix::Get((ParametricProcessor *)((char *)this + 6384), v294++, 0) = v295;
        }
        while (v294 < *((int *)this + 15));
      }
LABEL_154:
      v198 = (vDSP_Length *)((char *)this + 6384);
      v199 = (ParametricProcessor *)((char *)this + 5800);
      v200 = v125;
LABEL_155:
      CLiteMatrix::MatrixMultiply(v198, v200, v199, v21);
      CLiteMatrix::SetWithOther((uint64_t)this + 5880, (uint64_t *)a4);
      v265 = (char *)this + 5880;
      v266 = (uint64_t)v199;
LABEL_156:
      LiteMatrixBase<float>::operator-=((uint64_t)v265, v266);
      LODWORD(__B.realp) = -1082130432;
      vDSP_vsmul(*((const float **)this + 737), 1, (const float *)&__B, *((float **)this + 737), 1, (uint64_t)(*((_QWORD *)this + 738) - *((_QWORD *)this + 737)) >> 2);
LABEL_157:
      v296 = *((_DWORD *)this + 33);
      if (v296 == 3)
      {
        v297 = (vDSP_Length *)*((_QWORD *)this + 493);
      }
      else
      {
        if (v296 != 2 && v296 != 1)
          goto LABEL_163;
        v297 = (vDSP_Length *)(*((_QWORD *)this + 493) + 40 * v5);
      }
      CLiteMatrix::MatrixMultiply(v297, (ParametricProcessor *)((char *)this + 5880), (ParametricProcessor *)((char *)this + 5960), a4);
LABEL_163:
      LODWORD(__B.realp) = *((_DWORD *)this + 31);
      vDSP_vsmul(*((const float **)this + 717), 1, (const float *)&__B, *((float **)this + 717), 1, (uint64_t)(*((_QWORD *)this + 718) - *((_QWORD *)this + 717)) >> 2);
      *(float *)&__B.realp = 1.0 - *((float *)this + 31);
      vDSP_vsmul(*((const float **)this + 747), 1, (const float *)&__B, *((float **)this + 747), 1, (uint64_t)(*((_QWORD *)this + 748) - *((_QWORD *)this + 747)) >> 2);
      CLiteMatrix::SetWithOther((uint64_t)this + 6000, (uint64_t *)this + 715);
      CLiteMatrix::operator+=((uint64_t)this + 6000, (uint64_t)this + 5960);
      CLiteMatrix::SetWithConjugateTranposeOfOther((ParametricProcessor *)((char *)this + 6040), (ParametricProcessor *)((char *)this + 6000));
      if (*((_BYTE *)this + 188))
        CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 750, (ParametricProcessor *)((char *)this + 6040), v6, v298);
      return;
    default:
      goto LABEL_157;
  }
}

void sub_1B623027C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ParametricProcessor::calculateG(uint64_t a1, vDSP_Length *this, uint64_t a3, uint64_t a4)
{
  CLiteMatrix *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;

  v8 = (CLiteMatrix *)(a1 + 6120);
  v9 = *(void **)(a1 + 6136);
  v10 = (const void *)CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 64), 0);
  memcpy(v9, v10, 4 * this[1]);
  v11 = (void *)(*(_QWORD *)(a1 + 6136) + 4 * ((uint64_t)(*(_QWORD *)(a1 + 6144) - *(_QWORD *)(a1 + 6136)) >> 3));
  CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 64), 0);
  memcpy(v11, v12, 4 * this[1]);
  v13 = *(void **)(a1 + 6176);
  v14 = (const void *)CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 68), 0);
  memcpy(v13, v14, 4 * this[1]);
  v15 = (void *)(*(_QWORD *)(a1 + 6176) + 4 * ((uint64_t)(*(_QWORD *)(a1 + 6184) - *(_QWORD *)(a1 + 6176)) >> 3));
  CLiteMatrix::Get((CLiteMatrix *)this, *(int *)(a1 + 68), 0);
  memcpy(v15, v16, 4 * this[1]);
  CLiteMatrix::ElementwiseMultiply(v8, (const CLiteMatrix *)(a1 + 6160), (const CLiteMatrix *)(a1 + 6200), (CLiteMatrix *)0xFFFFFFFFLL);
  vDSP_vsmul(*(const float **)(a1 + 6216), 1, (const float *)(a1 + 92), *(float **)(a1 + 6216), 1, this[1]);
  vDSP_vclip(*(const float **)(a3 + 16), 1, (const float *)(a1 + 200), (const float *)(a1 + 204), *(float **)(a3 + 16), 1, this[1]);
  vDSP_vdiv(*(const float **)(a3 + 16), 1, *(const float **)(a1 + 6216), 1, *(float **)(a1 + 6216), 1, this[1]);
  vDSP_vclip(*(const float **)(a1 + 6216), 1, (const float *)(a1 + 84), (const float *)(a1 + 88), *(float **)(a4 + 16), 1, this[1]);
}

void std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<CLiteMatrix>::__vdeallocate(a1);
    if (a4 > 0x666666666666666)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<CLiteMatrix>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(a2, a3, v9);
  for (i = a1[1]; i != v14; i -= 40)
  {
    v16 = *(void **)(i - 24);
    if (v16)
    {
      *(_QWORD *)(i - 16) = v16;
      operator delete(v16);
    }
  }
  a1[1] = v14;
}

void sub_1B6230590(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B6230598(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLiteMatrix *,CLiteMatrix *,CLiteMatrix *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      if (v5 != a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a3 + 16), *(char **)(v5 + 16), *(_QWORD *)(v5 + 24), (uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 2);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLiteMatrix>,CLiteMatrix*,CLiteMatrix*,CLiteMatrix*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLiteMatrix>,CLiteMatrix*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B62306B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLiteMatrix>,CLiteMatrix*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLiteMatrix>,CLiteMatrix*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

void AUSpatialCapture::~AUSpatialCapture(AUSpatialCapture *this)
{
  AUSpatialCapture::~AUSpatialCapture(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69CBB80;
  if (*((char *)this + 975) < 0)
    operator delete(*((void **)this + 119));
  v6 = (void **)((char *)this + 928);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 114));
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  v2 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 744));
  std::mutex::~mutex((std::mutex *)((char *)this + 680));
  std::mutex::~mutex((std::mutex *)((char *)this + 616));
  v3 = (const void *)*((_QWORD *)this + 73);
  if (v3)
    CFRelease(v3);
  std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 72, 0);
  v4 = (void *)*((_QWORD *)this + 69);
  if (v4)
  {
    *((_QWORD *)this + 70) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 66);
  if (v5)
  {
    *((_QWORD *)this + 67) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpatialCapture::Initialize(AUSpatialCapture *this)
{
  id v1;
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  CFPropertyListRef v7;
  void *v8;
  CFTypeID v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  const void *v17;
  std::string *v18;
  id v19;
  char *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type size;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  std::string *v29;
  ausdk::AUScope *v30;
  ausdk::AUScope *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  size_t v39;
  const char *v40;
  ausdk::AUScope *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  int *v56;
  int *v57;
  int *v58;
  int v59;
  id v60;
  NSObject *v61;
  uint64_t Element;
  __int128 v63;
  int v64;
  id v65;
  id v66;
  NSObject *v67;
  int16x8_t v68;
  void **v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  id v73;
  id v74;
  NSObject *v75;
  int16x8_t v76;
  void **v77;
  int v78;
  _BYTE *v79;
  void **v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  size_t v90;
  void *locale;
  std::string *v92;
  std::string *v93;
  std::string::size_type v94;
  _QWORD *v95;
  const std::locale::facet *v96;
  NSObject *v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  NSObject *v103;
  const char **v104;
  const char **v105;
  _DWORD *v106;
  _DWORD *v107;
  _QWORD *v108;
  const char **v109;
  uint64_t v110;
  const char **v111;
  int v112;
  NSObject *v113;
  NSObject *v114;
  const char *v115;
  void *v116;
  void *v117;
  int v118;
  NSObject *v119;
  NSObject *v120;
  id v121;
  uint64_t AUBox;
  uint64_t v123;
  int v124;
  NSObject *v125;
  NSObject *v126;
  id v127;
  id v128;
  id v129;
  NSObject *v130;
  float v131;
  int v132;
  NSObject *v133;
  NSObject *v134;
  id v135;
  id v136;
  const char *v137;
  int v138;
  uint64_t GraphOutput;
  uint64_t v140;
  DSPGraph::Graph **v141;
  double v142;
  uint64_t v143;
  NSObject *v144;
  NSObject *v145;
  id v146;
  NSObject *v147;
  NSObject *v148;
  NSObject *v149;
  NSObject *v150;
  size_t v151;
  void **v152;
  char *v153;
  size_t v154;
  void **v155;
  char *v156;
  size_t v157;
  void **v158;
  char *v159;
  void **v160;
  uint64_t v161;
  _QWORD *v162;
  const std::locale::facet *v163;
  void *v164;
  void *v165;
  id v166;
  unsigned int *v167;
  unsigned int v168;
  id v169;
  NSObject *v170;
  _QWORD *ParameterMap;
  _QWORD *v172;
  _QWORD *v173;
  NSObject *v174;
  char v175;
  int v176;
  _DWORD *v177;
  char v178;
  char v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  BOOL v183;
  NSObject *v184;
  NSObject *v185;
  int v186;
  _QWORD *v187;
  _QWORD *v188;
  BOOL v189;
  NSObject *v190;
  id v191;
  id v192;
  NSObject *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t GraphInput;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  id v204;
  NSObject *v205;
  uint64_t result;
  const char *v207;
  _QWORD *v208;
  const char *v209;
  _QWORD *v210;
  const char *v211;
  _QWORD *v212;
  const char **v213;
  ausdk::AUScope *v214;
  id v215;
  id v216;
  unsigned int obj;
  ausdk::AUScope *obja;
  uint64_t v220;
  _DWORD **v221;
  uint64_t v222;
  _QWORD *v223;
  ausdk::AUScope *v224[2];
  std::string v225;
  _BYTE *v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD v230[2];
  uint64_t v231;
  _OWORD v232[2];
  uint64_t v233;
  int *v234;
  int *v235;
  uint64_t v236;
  std::string v237;
  std::locale v238[2];
  int v239;
  char v240;
  std::string v241;
  void *v242;
  void *v243;
  uint64_t v244;
  std::string v245;
  void *v246[2];
  __int128 v247;
  int v248;
  void *__s1[6];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *__p[2];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  uint8_t buf[32];
  id v259;
  int v260;
  _QWORD v261[22];

  v261[19] = *MEMORY[0x1E0C80C00];
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v1 = *(id *)SCLogScope(void)::scope;
    if (!v1)
      goto LABEL_10;
  }
  else
  {
    v1 = (id)MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  v3 = v1;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 263;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---", buf, 0x12u);
  }

LABEL_10:
  v4 = (void *)*((_QWORD *)this + 73);
  if (v4)
    goto LABEL_37;
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v5 = *(id *)SCLogScope(void)::scope;
    if (!v5)
      goto LABEL_20;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 174;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting plist! Loading plist from path given by a defaults write", buf, 0x12u);
  }

LABEL_20:
  v7 = CFPreferencesCopyAppValue(CFSTR("auspatialcaptureplistpath"), CFSTR("com.apple.coreaudio"));
  v8 = (void *)v7;
  if (!v7)
    goto LABEL_36;
  v9 = CFGetTypeID(v7);
  if (v9 != CFStringGetTypeID())
  {
    CFRelease(v8);
    v8 = 0;
    goto LABEL_36;
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (!SCLogScope(void)::scope)
  {
    v10 = (id)MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
    goto LABEL_29;
  }
  v10 = *(id *)SCLogScope(void)::scope;
  if (v10)
  {
LABEL_29:
    v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 177;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v13;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Plist path given as %s by defaults write value", buf, 0x1Cu);
    }

  }
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    v16 = v14;
    CFRetain(v16);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v16);

    v17 = (const void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = *(_QWORD *)buf;
    *(_QWORD *)buf = v17;
    if (v17)
      CFRelease(v17);
  }

LABEL_36:
  v4 = (void *)*((_QWORD *)this + 73);
  if (!v4)
  {
    obj = 0;
LABEL_503:
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v203 = *(id *)SCLogScope(void)::scope;
      if (!v203)
        return obj;
    }
    else
    {
      v203 = (id)MEMORY[0x1E0C81028];
      v204 = MEMORY[0x1E0C81028];
    }
    v205 = v203;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__s1[0]) = 136315650;
      *(void **)((char *)__s1 + 4) = "AUSpatialCapture.mm";
      WORD2(__s1[1]) = 1024;
      *(_DWORD *)((char *)&__s1[1] + 6) = 338;
      WORD1(__s1[2]) = 1024;
      HIDWORD(__s1[2]) = obj;
      _os_log_impl(&dword_1B5ED0000, v205, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Done initializing result = %i", (uint8_t *)__s1, 0x18u);
    }

    return obj;
  }
LABEL_37:
  objc_msgSend(v4, "objectForKey:", CFSTR("tuningName"));
  v215 = (id)objc_claimAutoreleasedReturnValue();
  v18 = (std::string *)((char *)this + 848);
  if (*((char *)this + 871) < 0)
  {
    std::string::__init_copy_ctor_external(&v237, *((const std::string::value_type **)this + 106), *((_QWORD *)this + 107));
  }
  else
  {
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v237.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 108);
  }
  if (v215)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v19 = *(id *)SCLogScope(void)::scope;
      if (!v19)
      {
LABEL_52:
        std::string::__assign_external(v18, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v215), "UTF8String"));
        goto LABEL_56;
      }
    }
    else
    {
      v19 = (id)MEMORY[0x1E0C81028];
      v21 = MEMORY[0x1E0C81028];
    }
    v22 = v19;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = objc_msgSend(objc_retainAutorelease(v215), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 279;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v23;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Tuning name '%s'", buf, 0x1Cu);
    }

    goto LABEL_52;
  }
  if (*((char *)this + 871) < 0)
  {
    *((_QWORD *)this + 107) = 18;
    v20 = (char *)*((_QWORD *)this + 106);
  }
  else
  {
    *((_BYTE *)this + 871) = 18;
    v20 = (char *)this + 848;
  }
  strcpy(v20, "<anoynmous tuning>");
LABEL_56:
  v24 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  else
    size = v237.__r_.__value_.__l.__size_;
  v26 = *((unsigned __int8 *)this + 871);
  v27 = (char)v26;
  if ((v26 & 0x80u) != 0)
    v26 = *((_QWORD *)this + 107);
  if (size == v26)
  {
    if (v27 >= 0)
      v28 = (unsigned __int8 *)this + 848;
    else
      v28 = (unsigned __int8 *)v18->__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v237.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v237.__r_.__value_.__l.__data_, v28, v237.__r_.__value_.__l.__size_))
        goto LABEL_73;
    }
    else
    {
      if (!*((_BYTE *)&v237.__r_.__value_.__s + 23))
        goto LABEL_73;
      v29 = &v237;
      while (v29->__r_.__value_.__s.__data_[0] == *v28)
      {
        v29 = (std::string *)((char *)v29 + 1);
        ++v28;
        if (!--v24)
          goto LABEL_73;
      }
    }
  }
  (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 2005, 0, 0);
LABEL_73:
  AUSpatialCapture::SetAudioChannelLayoutFromTuning(this, (const __CFDictionary *)v4);
  v216 = v4;
  objc_msgSend(v216, "objectForKeyedSubscript:", CFSTR("renderModes"));
  v30 = (ausdk::AUScope *)objc_claimAutoreleasedReturnValue();
  v214 = v30;
  if (v30)
  {
    v256 = 0u;
    v255 = 0u;
    v254 = 0u;
    *(_OWORD *)v224 = 0u;
    *(_OWORD *)__p = 0u;
    obja = v30;
    v31 = 0;
    v32 = -[ausdk::AUScope countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", __p, buf, 16);
    if (v32)
    {
      v220 = *(_QWORD *)v254;
      *(_OWORD *)v224 = 0u;
      do
      {
        v33 = 0;
        v222 = v32;
        do
        {
          if (*(_QWORD *)v254 != v220)
            objc_enumerationMutation(obja);
          v34 = 0;
          v35 = (void *)*((_QWORD *)__p[1] + v33);
          v36 = 1;
          do
          {
            v37 = v36;
            memset(__s1, 0, 24);
            if ((v36 & 1) != 0)
            {
              qmemcpy(__s1, "Linear", 6);
              v38 = 6;
              v39 = 6;
            }
            else
            {
              qmemcpy(__s1, "ZoomableLinear", 14);
              v39 = 14;
              v38 = 14;
            }
            HIBYTE(__s1[2]) = v38;
            v40 = (const char *)objc_msgSend(objc_retainAutorelease(v35), "UTF8String");
            if (strlen(v40) == v39 && !memcmp(__s1, v40, v39))
            {
              v41 = v224[0];
              if (v224[0] >= v224[1])
              {
                v43 = (v224[0] - v31) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v45 = v224[1] - v31;
                if ((v224[1] - v31) >> 1 > v44)
                  v44 = v45 >> 1;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                  v46 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                  v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v46);
                else
                  v47 = 0;
                v48 = (int *)(v46 + 4 * v43);
                *v48 = v34;
                v42 = v48 + 1;
                while (v41 != v31)
                {
                  v49 = *((_DWORD *)v41 - 1);
                  v41 = (ausdk::AUScope *)((char *)v41 - 4);
                  *--v48 = v49;
                }
                v224[1] = (ausdk::AUScope *)(v46 + 4 * v47);
                if (v31)
                  operator delete(v31);
                v31 = (ausdk::AUScope *)v48;
              }
              else
              {
                *(_DWORD *)v224[0] = v34;
                v42 = (_DWORD *)((char *)v224[0] + 4);
              }
              *((ausdk::AUScope **)&v50 + 1) = v224[1];
              *(_QWORD *)&v50 = v42;
              *(_OWORD *)v224 = v50;
              if (SHIBYTE(__s1[2]) < 0)
                operator delete(__s1[0]);
            }
            v36 = 0;
            v34 = 1;
          }
          while ((v37 & 1) != 0);
          ++v33;
        }
        while (v33 != v222);
        v32 = -[ausdk::AUScope countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", __p, buf, 16);
      }
      while (v32);
    }

  }
  else
  {
    v31 = (ausdk::AUScope *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(1uLL);
    *(_DWORD *)v31 = 0;
    *(_QWORD *)&v52 = (char *)v31 + 4;
    *((_QWORD *)&v52 + 1) = (char *)v31 + 4 * v51;
    *(_OWORD *)v224 = v52;
  }

  v53 = (void *)*((_QWORD *)this + 66);
  if (v53)
  {
    *((_QWORD *)this + 67) = v53;
    operator delete(v53);
    *((_QWORD *)this + 66) = 0;
    *((_QWORD *)this + 67) = 0;
    *((_QWORD *)this + 68) = 0;
  }
  *((_QWORD *)this + 66) = v31;
  *(_OWORD *)((char *)this + 536) = *(_OWORD *)v224;
  v221 = (_DWORD **)((char *)this + 528);
  v223 = (_QWORD *)((char *)this + 536);
  v235 = 0;
  v236 = 0;
  v234 = 0;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v234, v31, (uint64_t)v224[0], (v224[0] - v31) >> 2);
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
    {
      v54 = *(id *)SCLogScope(void)::scope;
      if (v54)
      {
        v55 = v54;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 254;
          _os_log_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d Supported render modes:", buf, 0x12u);
        }

      }
    }
  }
  v56 = v234;
  v57 = v235;
  if (v234 != v235)
  {
    v58 = v234;
    do
    {
      v59 = *v58;
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
        {
          v60 = *(id *)SCLogScope(void)::scope;
          if (v60)
          {
            v61 = v60;
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              __p[1] = 0;
              __p[0] = 0;
              *(_QWORD *)&v254 = 0;
              if (v59 == 1)
              {
                BYTE7(v254) = 14;
                qmemcpy(__p, "ZoomableLinear", 14);
              }
              else if (!v59)
              {
                BYTE7(v254) = 6;
                qmemcpy(__p, "Linear", 6);
              }
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 256;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = __p;
              _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
              if (SBYTE7(v254) < 0)
                operator delete(__p[0]);
            }

          }
        }
      }
      ++v58;
    }
    while (v58 != v57);
  }
  if (v56)
  {
    v235 = v56;
    operator delete(v56);
  }
  Element = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), 0);
  v63 = *(_OWORD *)(Element + 96);
  v232[0] = *(_OWORD *)(Element + 80);
  v232[1] = v63;
  v233 = *(_QWORD *)(Element + 112);
  v64 = DWORD2(v232[0]);
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v65 = *(id *)SCLogScope(void)::scope;
    if (!v65)
      goto LABEL_150;
  }
  else
  {
    v65 = (id)MEMORY[0x1E0C81028];
    v66 = MEMORY[0x1E0C81028];
  }
  v67 = v65;
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
  {
    CA::StreamDescription::AsString((CA::StreamDescription *)v232, (uint64_t)__p, v68);
    v69 = (SBYTE7(v254) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 294;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v69;
    _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Input format is %s", buf, 0x1Cu);
    if (SBYTE7(v254) < 0)
      operator delete(__p[0]);
  }

LABEL_150:
  v70 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
  v71 = *(_OWORD *)(v70 + 96);
  v230[0] = *(_OWORD *)(v70 + 80);
  v230[1] = v71;
  v231 = *(_QWORD *)(v70 + 112);
  v72 = DWORD2(v230[0]);
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v73 = *(id *)SCLogScope(void)::scope;
    if (!v73)
      goto LABEL_163;
  }
  else
  {
    v73 = (id)MEMORY[0x1E0C81028];
    v74 = MEMORY[0x1E0C81028];
  }
  v75 = v73;
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
  {
    CA::StreamDescription::AsString((CA::StreamDescription *)v230, (uint64_t)__p, v76);
    v77 = (SBYTE7(v254) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 299;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v77;
    _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d Output format is %s", buf, 0x1Cu);
    if (SBYTE7(v254) < 0)
      operator delete(__p[0]);
  }

LABEL_163:
  v78 = *((_DWORD *)this + 200);
  v227 = 0;
  v228 = 0;
  v226 = 0;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v226, *((const void **)this + 66), *((_QWORD *)this + 67), (uint64_t)(*((_QWORD *)this + 67) - *((_QWORD *)this + 66)) >> 2);
  if (*((char *)this + 847) < 0)
    std::string::__init_copy_ctor_external(&v225, *((const std::string::value_type **)this + 103), *((_QWORD *)this + 104));
  else
    v225 = *(std::string *)((char *)this + 824);
  v243 = 0;
  v244 = 0;
  v242 = 0;
  v79 = v226;
  std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(&v242, v226, (uint64_t)v227, (v227 - v226) >> 2);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
  else
    v241 = v225;
  GetSpatialCaptureDSPGraphSource(&v245, v216, v78, (int **)&v242, (uint64_t)&v241, v64 != 1718773105, v72 != 1718773105);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  MEMORY[0x1BCC95170](__s1);
  std::string::basic_string[abi:ne180100]<0>(v246, "scmicselect");
  *(_OWORD *)&v238[0].__locale_ = xmmword_1B66A1220;
  v239 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_44_e12__v16__0I8I12l;
  v259 = v216;
  v260 = v78;
  *((_QWORD *)&v254 + 1) = 0;
  __p[0] = &off_1E69D9E18;
  __p[1] = _Block_copy(buf);
  *((_QWORD *)&v254 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  v80 = (void **)*((_QWORD *)&v254 + 1);
  if (*((void ***)&v254 + 1) == __p)
  {
    v81 = 4;
    v80 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v254 + 1))
      goto LABEL_178;
    v81 = 5;
  }
  (*((void (**)(void))*v80 + v81))();
LABEL_178:
  if (SBYTE7(v247) < 0)
    operator delete(v246[0]);
  std::string::basic_string[abi:ne180100]<0>(v246, "chansel");
  *(_OWORD *)&v238[0].__locale_ = xmmword_1B66A1230;
  v239 = 0;
  __p[0] = &off_1E69D9E60;
  __p[1] = &__block_literal_global_217;
  *((_QWORD *)&v254 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  v82 = (void **)*((_QWORD *)&v254 + 1);
  if (*((void ***)&v254 + 1) == __p)
  {
    v83 = 4;
    v82 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v254 + 1))
      goto LABEL_185;
    v83 = 5;
  }
  (*((void (**)(void))*v82 + v83))();
LABEL_185:
  if (SBYTE7(v247) < 0)
    operator delete(v246[0]);
  std::string::basic_string[abi:ne180100]<0>(v246, "scmx");
  *(_OWORD *)&v238[0].__locale_ = xmmword_1B66A1240;
  v239 = 0;
  __p[0] = &off_1E69D9EA8;
  __p[1] = &__block_literal_global_220;
  *((_QWORD *)&v254 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  v84 = (void **)*((_QWORD *)&v254 + 1);
  if (*((void ***)&v254 + 1) == __p)
  {
    v85 = 4;
    v84 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v254 + 1))
      goto LABEL_192;
    v85 = 5;
  }
  (*((void (**)(void))*v84 + v85))();
LABEL_192:
  if (SBYTE7(v247) < 0)
    operator delete(v246[0]);
  std::string::basic_string[abi:ne180100]<0>(v246, "paramsw");
  *(_OWORD *)&v238[0].__locale_ = xmmword_1B66A1250;
  v239 = 0;
  __p[0] = &off_1E69D9EF0;
  __p[1] = &__block_literal_global_223;
  *((_QWORD *)&v254 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  v86 = (void **)*((_QWORD *)&v254 + 1);
  if (*((void ***)&v254 + 1) == __p)
  {
    v87 = 4;
    v86 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v254 + 1))
      goto LABEL_199;
    v87 = 5;
  }
  (*((void (**)(void))*v86 + v87))();
LABEL_199:
  if (SBYTE7(v247) < 0)
    operator delete(v246[0]);
  std::string::basic_string[abi:ne180100]<0>(v246, "paramtx");
  *(_OWORD *)&v238[0].__locale_ = xmmword_1B66A1260;
  v239 = 0;
  __p[0] = &off_1E69D9F38;
  __p[1] = &__block_literal_global_225;
  *((_QWORD *)&v254 + 1) = __p;
  DSPGraph::NewBoxRegistry::add();
  v88 = (void **)*((_QWORD *)&v254 + 1);
  if (*((void ***)&v254 + 1) == __p)
  {
    v89 = 4;
    v88 = __p;
    goto LABEL_205;
  }
  if (*((_QWORD *)&v254 + 1))
  {
    v89 = 5;
LABEL_205:
    (*((void (**)(void))*v88 + v89))();
  }
  if (SBYTE7(v247) < 0)
    operator delete(v246[0]);
  MEMORY[0x1BCC9514C](__p, __s1);
  *(_OWORD *)v246 = 0u;
  v247 = 0u;
  v248 = 1065353216;
  if (CACFPreferencesGetAppBooleanValue(CFSTR("debug_spatial_capture_graph"), CFSTR("com.apple.coreaudio"), 0))
  {
    if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v90 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
    else
      v90 = v225.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v238, v90 + 21);
    if (v240 >= 0)
      locale = v238;
    else
      locale = v238[0].__locale_;
    if (v90)
    {
      if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = &v225;
      else
        v92 = (std::string *)v225.__r_.__value_.__r.__words[0];
      memmove(locale, v92, v90);
    }
    strcpy((char *)locale + v90, "auspatialcapture.dspg");
    std::ofstream::basic_ofstream(buf);
    if (v240 < 0)
      operator delete(v238[0].__locale_);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &v245;
    else
      v93 = (std::string *)v245.__r_.__value_.__r.__words[0];
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    else
      v94 = v245.__r_.__value_.__l.__size_;
    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v93, v94);
    std::ios_base::getloc((const std::ios_base *)((char *)v95 + *(_QWORD *)(*v95 - 24)));
    v96 = std::locale::use_facet(v238, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
    std::locale::~locale(v238);
    std::ostream::put();
    std::ostream::flush();
    *(_QWORD *)buf = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x1BCC95788](&buf[8]);
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](v261);
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
    {
      v97 = *(id *)SCLogScope(void)::scope;
      if (v97)
      {
        v98 = v97;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "SpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 562;
          _os_log_impl(&dword_1B5ED0000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d Compiling graph", buf, 0x12u);
        }

      }
    }
  }
  memset(buf, 0, 24);
  DSPGraph::Interpreter::compileText();
  v238[0].__locale_ = (std::locale::__imp *)buf;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v238);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v246);
  MEMORY[0x1BCC95158](__p);
  __s1[0] = (void *)(MEMORY[0x1E0CFFC40] + 16);
  *(_QWORD *)buf = &v251;
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&v250);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&__s1[1]);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  v99 = v229;
  v229 = 0;
  v100 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = v99;
  if (v100)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    v101 = v229;
    v229 = 0;
    if (v101)
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  }
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  if (v79)
  {
    v227 = v79;
    operator delete(v79);
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
    {
      v102 = *(id *)SCLogScope(void)::scope;
      if (v102)
      {
        v103 = v102;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 394;
          _os_log_impl(&dword_1B5ED0000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up beamformers", buf, 0x12u);
        }

      }
    }
  }
  v104 = (const char **)operator new(0x10uLL);
  v105 = v104;
  *v104 = "linFullSignal";
  v104[1] = "SDLSPlistFD";
  v106 = *v221;
  v107 = (_DWORD *)*v223;
  if (*v221 != (_DWORD *)*v223)
  {
    while (*v106 != 1)
    {
      if (++v106 == v107)
      {
        v106 = (_DWORD *)*v223;
        break;
      }
    }
  }
  if (v106 == v107)
  {
    v111 = v104 + 2;
  }
  else
  {
    v108 = operator new(0x20uLL);
    v108[2] = "focused";
    v108[3] = "focusedBeams";
    *(_OWORD *)v108 = *(_OWORD *)v105;
    operator delete(v105);
    v109 = (const char **)operator new(0x40uLL);
    v110 = 0;
    v109[4] = "wide";
    v109[5] = "wideBeams";
    v111 = v109 + 6;
    do
    {
      *(_OWORD *)&v109[v110 + 2] = *(_OWORD *)&v108[v110 + 2];
      v110 -= 2;
    }
    while (v110 != -4);
    v105 = v109;
    operator delete(v108);
  }
  LOBYTE(v112) = 1;
  v213 = v105;
  do
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
      {
        v113 = *(id *)SCLogScope(void)::scope;
        if (v113)
        {
          v114 = v113;
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
          {
            v115 = *v105;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 409;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v115;
            _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up box %s", buf, 0x1Cu);
          }

        }
      }
    }
    GetSubDictionaryWithKey(*((const __CFDictionary **)this + 73), v105[1], 0);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    __p[0] = v116;
    objc_msgSend(v116, "objectForKeyedSubscript:", CFSTR("LimitWindBoostRefChannel"));
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = objc_msgSend(v117, "intValue");
    if (v118 < 0)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (!SCLogScope(void)::scope)
      {
        v120 = MEMORY[0x1E0C81028];
        v121 = MEMORY[0x1E0C81028];
LABEL_286:
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 415;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v118;
          _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bad ref mic for limit wind boost %i", buf, 0x18u);
        }
        v118 = 0;
LABEL_289:

        goto LABEL_290;
      }
      v120 = *(id *)SCLogScope(void)::scope;
      if (v120)
        goto LABEL_286;
      v118 = 0;
    }
    else
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
        {
          v119 = *(id *)SCLogScope(void)::scope;
          if (v119)
          {
            v120 = v119;
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 418;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v118;
              _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d Limit wind boost ref is channel %i", buf, 0x18u);
            }
            goto LABEL_289;
          }
        }
      }
    }
LABEL_290:
    AUBox = AUSpatialCapture::GetAUBox(this, (char *)*v105);
    if (__p[0])
    {
      v123 = AUBox;
      if (AUBox)
      {
        v124 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, void **))(*(_QWORD *)AUBox + 312))(AUBox, 4630, 0, 0, 8, __p);
        if (!v124)
          goto LABEL_311;
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        if (SCLogScope(void)::scope)
        {
          v125 = *(id *)SCLogScope(void)::scope;
          if (!v125)
            goto LABEL_311;
        }
        else
        {
          v125 = MEMORY[0x1E0C81028];
          v128 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 424;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v124;
          _os_log_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set beamformer coefficients, setPropertyError = %i", buf, 0x18u);
        }

LABEL_311:
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v123 + 80))(v123, 24, 0, 0, 0, (float)v118);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v123 + 80))(v123, 1, 0, 0, 0, 4.0);
        objc_msgSend(v116, "objectForKeyedSubscript:", CFSTR("latency"));
        v126 = objc_claimAutoreleasedReturnValue();
        v112 = v112 & (v124 == 0);
        if (v126)
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          if (SCLogScope(void)::scope)
          {
            if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
            {
              v129 = *(id *)SCLogScope(void)::scope;
              if (v129)
              {
                v130 = v129;
                if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
                {
                  -[NSObject floatValue](v126, "floatValue");
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 432;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v131;
                  _os_log_impl(&dword_1B5ED0000, v130, OS_LOG_TYPE_DEBUG, "%25s:%-5d Latency will be reported as %fs", buf, 0x1Cu);
                }

              }
            }
          }
          __s1[0] = v126;
          v132 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, void **))(*(_QWORD *)v123 + 312))(v123, 4633, 0, 0, 8, __s1);
          if (!v132)
            goto LABEL_335;
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          if (SCLogScope(void)::scope)
          {
            v133 = *(id *)SCLogScope(void)::scope;
            if (!v133)
            {
LABEL_335:
              if (v132)
                v112 = 0;
              goto LABEL_343;
            }
          }
          else
          {
            v133 = MEMORY[0x1E0C81028];
            v135 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 435;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v132;
            _os_log_impl(&dword_1B5ED0000, v133, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set reported latency, setPropertyError = %i", buf, 0x18u);
          }

          goto LABEL_335;
        }
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        if (SCLogScope(void)::scope)
        {
          v134 = *(id *)SCLogScope(void)::scope;
          if (!v134)
          {
LABEL_342:
            v126 = 0;
            goto LABEL_343;
          }
        }
        else
        {
          v134 = MEMORY[0x1E0C81028];
          v136 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
        {
          v137 = *v105;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 438;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v137;
          _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reported latency not supplied for box %s", buf, 0x1Cu);
        }

        goto LABEL_342;
      }
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v126 = *(id *)SCLogScope(void)::scope;
      if (!v126)
      {
        v112 = 0;
        goto LABEL_344;
      }
    }
    else
    {
      v126 = MEMORY[0x1E0C81028];
      v127 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 441;
      _os_log_impl(&dword_1B5ED0000, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to find beamformer box or coefficients dictionary!", buf, 0x12u);
    }
    v112 = 0;
LABEL_343:

LABEL_344:
    v105 += 2;
  }
  while (v105 != v111);
  operator delete(v213);
  if (v112)
    obj = 0;
  else
    obj = -103;
  v138 = *((_DWORD *)this + 84);
  GraphOutput = AUSpatialCapture::GetGraphOutput(this);
  v140 = *(_QWORD *)(GraphOutput + 64);
  if (*(_QWORD *)(GraphOutput + 72) == v140)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v210 = (_QWORD *)(GraphOutput + 32);
    if (*(char *)(GraphOutput + 55) < 0)
      v210 = (_QWORD *)*v210;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v209, v210, (uint64_t)(*(_QWORD *)(GraphOutput + 72) - *(_QWORD *)(GraphOutput + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
  else
  {
    v141 = (DSPGraph::Graph **)((char *)this + 808);
    v142 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 40))(v140) + 120);
    v143 = *((_QWORD *)this + 101);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (v143)
    {
      if (SCLogScope(void)::scope)
      {
        v144 = *(id *)SCLogScope(void)::scope;
        if (!v144)
          goto LABEL_362;
      }
      else
      {
        v144 = MEMORY[0x1E0C81028];
        v146 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 193;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v138;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v142;
        _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting graph slice timing: max slice duration %u, fs %u", buf, 0x1Eu);
      }

LABEL_362:
      DSPGraph::Graph::setSliceDuration();
      *((_BYTE *)*v141 + 765) = 1;
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
        {
          v147 = *(id *)SCLogScope(void)::scope;
          if (v147)
          {
            v148 = v147;
            if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 198;
              _os_log_impl(&dword_1B5ED0000, v148, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring graph", buf, 0x12u);
            }

          }
        }
      }
      DSPGraph::Graph::configure(*v141);
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
        {
          v149 = *(id *)SCLogScope(void)::scope;
          if (v149)
          {
            v150 = v149;
            if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 201;
              _os_log_impl(&dword_1B5ED0000, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initializing graph", buf, 0x12u);
            }

          }
        }
      }
      DSPGraph::Graph::initialize(*v141);
      if (CACFPreferencesGetAppBooleanValue(CFSTR("debug_spatial_capture_graph"), CFSTR("com.apple.coreaudio"), 0))
      {
        if (*((char *)this + 847) >= 0)
          v151 = *((unsigned __int8 *)this + 847);
        else
          v151 = *((_QWORD *)this + 104);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v151 + 35);
        if ((SBYTE7(v254) & 0x80u) == 0)
          v152 = __p;
        else
          v152 = (void **)__p[0];
        if (v151)
        {
          if (*((char *)this + 847) >= 0)
            v153 = (char *)this + 824;
          else
            v153 = (char *)*((_QWORD *)this + 103);
          memmove(v152, v153, v151);
        }
        strcpy((char *)v152 + v151, "auspatialcapture-graph-printout.txt");
        std::ofstream::basic_ofstream(buf);
        if (SBYTE7(v254) < 0)
          operator delete(__p[0]);
        (*(void (**)(DSPGraph::Graph *, uint8_t *, uint64_t, _QWORD))(*(_QWORD *)*v141 + 24))(*v141, buf, 6, 0);
        if (*((char *)this + 847) >= 0)
          v154 = *((unsigned __int8 *)this + 847);
        else
          v154 = *((_QWORD *)this + 104);
        std::string::basic_string[abi:ne180100]((uint64_t)__s1, v154 + 36);
        if (SHIBYTE(__s1[2]) >= 0)
          v155 = __s1;
        else
          v155 = (void **)__s1[0];
        if (v154)
        {
          if (*((char *)this + 847) >= 0)
            v156 = (char *)this + 824;
          else
            v156 = (char *)*((_QWORD *)this + 103);
          memmove(v155, v156, v154);
        }
        strcpy((char *)v155 + v154, "auspatialcapture-graph-decompile.txt");
        std::ofstream::basic_ofstream(__p);
        if (SHIBYTE(__s1[2]) < 0)
          operator delete(__s1[0]);
        if (*((char *)this + 847) >= 0)
          v157 = *((unsigned __int8 *)this + 847);
        else
          v157 = *((_QWORD *)this + 104);
        std::string::basic_string[abi:ne180100]((uint64_t)v246, v157 + 20);
        if ((SBYTE7(v247) & 0x80u) == 0)
          v158 = v246;
        else
          v158 = (void **)v246[0];
        if (v157)
        {
          if (*((char *)this + 847) >= 0)
            v159 = (char *)this + 824;
          else
            v159 = (char *)*((_QWORD *)this + 103);
          memmove(v158, v159, v157);
        }
        strcpy((char *)v158 + v157, "auspatialcapture.dot");
        std::ofstream::basic_ofstream(__s1);
        if (SBYTE7(v247) < 0)
          operator delete(v246[0]);
        DSPGraph::Graph::decompile();
        DSPGraph::Graph::writeDotFile(*v141, "AUSpatialCapture");
        if ((SBYTE7(v247) & 0x80u) == 0)
          v160 = v246;
        else
          v160 = (void **)v246[0];
        if ((SBYTE7(v247) & 0x80u) == 0)
          v161 = BYTE7(v247);
        else
          v161 = (uint64_t)v246[1];
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)v160, v161);
        std::ios_base::getloc((const std::ios_base *)((char *)v162 + *(_QWORD *)(*v162 - 24)));
        v163 = std::locale::use_facet((const std::locale *)&v245, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v163->__vftable[2].~facet_0)(v163, 10);
        std::locale::~locale((std::locale *)&v245);
        std::ostream::put();
        std::ostream::flush();
        if (SBYTE7(v247) < 0)
          operator delete(v246[0]);
        v164 = (void *)*MEMORY[0x1E0DE4F48];
        __s1[0] = v164;
        v165 = *(void **)(MEMORY[0x1E0DE4F48] + 24);
        *(void **)((char *)__s1 + *((_QWORD *)v164 - 3)) = v165;
        MEMORY[0x1BCC95788](&__s1[1]);
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](&v252);
        __p[0] = v164;
        *(void **)((char *)__p + *((_QWORD *)v164 - 3)) = v165;
        MEMORY[0x1BCC95788](&__p[1]);
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](&v257);
        *(_QWORD *)buf = v164;
        *(_QWORD *)&buf[*((_QWORD *)v164 - 3)] = v165;
        MEMORY[0x1BCC95788](&buf[8]);
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](v261);
      }
    }
    else
    {
      if (SCLogScope(void)::scope)
      {
        v145 = *(id *)SCLogScope(void)::scope;
        if (!v145)
          goto LABEL_431;
      }
      else
      {
        v145 = MEMORY[0x1E0C81028];
        v166 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 217;
        _os_log_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d Graph is null", buf, 0x12u);
      }

    }
LABEL_431:
    ZoomCurveValue::ApplyToGraph((uint64_t)this + 904, v141);
    v167 = (unsigned int *)((char *)this + 592);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 + 1, v167));
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
      {
        v169 = *(id *)SCLogScope(void)::scope;
        if (v169)
        {
          v170 = v169;
          if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 311;
            _os_log_impl(&dword_1B5ED0000, v170, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating parameters", buf, 0x12u);
          }

        }
      }
    }
    if (!*v141)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v190 = *(id *)SCLogScope(void)::scope;
        if (!v190)
          goto LABEL_484;
      }
      else
      {
        v190 = MEMORY[0x1E0C81028];
        v191 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1036;
        _os_log_impl(&dword_1B5ED0000, v190, OS_LOG_TYPE_ERROR, "%25s:%-5d !mGraph", buf, 0x12u);
      }

      goto LABEL_484;
    }
    ParameterMap = (_QWORD *)AUSpatialCapture::GetParameterMap(this);
    v172 = ParameterMap + 1;
    v173 = (_QWORD *)*ParameterMap;
    if ((_QWORD *)*ParameterMap != ParameterMap + 1)
    {
      v174 = MEMORY[0x1E0C81028];
      while (1)
      {
        v175 = 0;
        v176 = 0;
        v177 = (_DWORD *)*v223;
        v178 = 1;
        do
        {
          v179 = v178;
          v180 = *v221;
          if (*v221 != v177)
          {
            while (*v180 != v176)
            {
              if (++v180 == v177)
              {
                v180 = (_DWORD *)*v223;
                break;
              }
            }
          }
          if (v180 == v177)
          {
            v183 = 0;
          }
          else
          {
            v182 = (_DWORD *)v173[21];
            v181 = (_DWORD *)v173[22];
            if (v182 != v181)
            {
              while (*v182 != v176)
              {
                if (++v182 == v181)
                {
                  v182 = (_DWORD *)v173[22];
                  break;
                }
              }
            }
            v183 = v182 != v181;
          }
          v178 = 0;
          v175 |= v183;
          v176 = 1;
        }
        while ((v179 & 1) != 0);
        if ((v175 & 1) == 0 || (DSPGraph::Graph::hasParameter(*v141) & 1) != 0)
          goto LABEL_468;
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        if (!SCLogScope(void)::scope)
          break;
        v184 = *(id *)SCLogScope(void)::scope;
        if (v184)
          goto LABEL_465;
LABEL_468:
        v187 = (_QWORD *)v173[1];
        if (v187)
        {
          do
          {
            v188 = v187;
            v187 = (_QWORD *)*v187;
          }
          while (v187);
        }
        else
        {
          do
          {
            v188 = (_QWORD *)v173[2];
            v189 = *v188 == (_QWORD)v173;
            v173 = v188;
          }
          while (!v189);
        }
        v173 = v188;
        if (v188 == v172)
          goto LABEL_484;
      }
      v185 = v174;
      v184 = v174;
LABEL_465:
      if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      {
        v186 = *((_DWORD *)v173 + 8);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1032;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v186;
        _os_log_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_ERROR, "%25s:%-5d param %i not found in graph", buf, 0x18u);
      }

      goto LABEL_468;
    }
LABEL_484:
    AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(this);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
      {
        v192 = *(id *)SCLogScope(void)::scope;
        if (v192)
        {
          v193 = v192;
          if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 315;
            _os_log_impl(&dword_1B5ED0000, v193, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating stream formats", buf, 0x12u);
          }

        }
      }
    }
    v194 = 0;
    do
    {
      if (AUSpatialCapture::GetGraphInput(this, v194))
      {
        v195 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), v194);
        GraphInput = AUSpatialCapture::GetGraphInput(this, v194);
        v197 = *(_QWORD *)(GraphInput + 88);
        if (*(_QWORD *)(GraphInput + 96) == v197)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(__p, "out");
          v208 = (_QWORD *)(GraphInput + 32);
          if (*(char *)(GraphInput + 55) < 0)
            v208 = (_QWORD *)*v208;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v207, v208, (uint64_t)(*(_QWORD *)(GraphInput + 96) - *(_QWORD *)(GraphInput + 88)) >> 5, 0);
          result = DSPGraph::ThrowException();
          goto LABEL_523;
        }
        v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 40))(v197);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v195 + 56))(v195, *(_QWORD *)(v198 + 120));
        (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 8, 1, v194);
      }
      v194 = (v194 + 1);
    }
    while ((_DWORD)v194 != 3);
    if (!AUSpatialCapture::GetGraphOutput(this))
    {
LABEL_500:
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);

      goto LABEL_503;
    }
    v199 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
    v200 = AUSpatialCapture::GetGraphOutput(this);
    v201 = *(_QWORD *)(v200 + 64);
    if (*(_QWORD *)(v200 + 72) != v201)
    {
      v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 40))(v201);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v199 + 56))(v199, *(_QWORD *)(v202 + 120));
      (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 432))(this, 8, 2, 0);
      goto LABEL_500;
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    v212 = (_QWORD *)(v200 + 32);
    if (*(char *)(v200 + 55) < 0)
      v212 = (_QWORD *)*v212;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v211, v212, (uint64_t)(*(_QWORD *)(v200 + 72) - *(_QWORD *)(v200 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
  }
LABEL_523:
  __break(1u);
  return result;
}

void sub_1B6233288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::Cleanup(AUSpatialCapture *this)
{
  NSObject *v2;
  id v3;
  uint64_t result;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v2 = *(id *)SCLogScope(void)::scope;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315394;
    v6 = "AUSpatialCapture.mm";
    v7 = 1024;
    v8 = 451;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ----", (uint8_t *)&v5, 0x12u);
  }

LABEL_10:
  result = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t AUSpatialCapture::Reset(AUSpatialCapture *this)
{
  DSPGraph::Graph *v1;

  v1 = (DSPGraph::Graph *)*((_QWORD *)this + 101);
  if (v1 && *((_BYTE *)v1 + 762))
    DSPGraph::Graph::reset(v1);
  return 0;
}

uint64_t AUSpatialCapture::GetPropertyInfo(AUSpatialCapture *this, const char *a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  AUSpatialCapture *v9;
  BOOL v10;
  uint64_t AUBox;
  char v12;
  const char *v13;
  uint64_t Box;

  if (a3)
    return 4294956417;
  v9 = this;
  v10 = 1;
  LODWORD(this) = 8;
  v6 = 4294956417;
  if ((int)a2 <= 3699)
  {
    switch((int)a2)
    {
      case 2001:
        *a5 = 0;
        if (!AUSpatialCapture::GetAUBox(v9, "doaBeamit"))
          goto LABEL_23;
        AUBox = AUSpatialCapture::GetAUBox(v9, "doaBeamit");
        this = (AUSpatialCapture *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)AUBox + 296))(AUBox, 4632, 0, 0);
        v10 = 0;
        v6 = (uint64_t)this;
        goto LABEL_19;
      case 2002:
        *a5 = 0;
        if (!AUSpatialCapture::GetBox(v9, a2))
        {
LABEL_23:
          v10 = 0;
          goto LABEL_21;
        }
        Box = AUSpatialCapture::GetBox(v9, v13);
        this = (AUSpatialCapture *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)Box + 296))(Box, 2002, 0, 0);
        v6 = (uint64_t)this;
        v10 = 0;
LABEL_19:
        if (v12)
          goto LABEL_20;
        return v6;
      case 2003:
      case 2005:
      case 2006:
        goto LABEL_12;
      case 2004:
      case 2007:
      case 2008:
      case 2009:
        goto LABEL_20;
      default:
        return v6;
    }
  }
  if ((int)a2 <= 1819309427)
  {
    if ((_DWORD)a2 != 3700)
    {
      if ((_DWORD)a2 != 1818980210)
        return v6;
      v10 = 1;
    }
    LODWORD(this) = 4;
  }
  else if ((_DWORD)a2 == 1819309428)
  {
LABEL_12:
    v10 = 0;
    LODWORD(this) = 8;
  }
  else if ((_DWORD)a2 != 1953263724)
  {
    if ((_DWORD)a2 != 1970040690)
      return v6;
    LODWORD(this) = 1;
    v10 = 1;
  }
LABEL_20:
  *a5 = this;
LABEL_21:
  v6 = 0;
  *a6 = v10;
  return v6;
}

uint64_t AUSpatialCapture::GetProperty(AUSpatialCapture *this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  int v8;
  const char *v10;
  uint64_t AUBox;
  const __CFDictionary *v13;
  void *Copy;
  NSObject *v15;
  const char *v16;
  uint64_t Box;
  const __CFAllocator *v18;
  const char *v19;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  char v22;
  __int128 v23;
  std::string *p_p;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  NSObject *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  __CFDictionary *v41;
  _BYTE v42[8];
  _QWORD *v43;
  std::string v44;
  std::string v45;
  int v46;
  int v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  std::vector<std::string> v51;
  std::string __p;
  std::string v53;
  int v54;
  std::string v55;
  __int128 v56;
  int64_t v57;
  _BYTE v58[48];
  std::string v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
    return 4294956417;
  v8 = a2;
  v48 = 0;
  v47 = 0;
  (*(void (**)(AUSpatialCapture *, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)this + 80))(this, a2, a3, a4, &v47, &v48);
  v46 = v47;
  v5 = 4294956417;
  if (v8 <= 3699)
  {
    switch(v8)
    {
      case 2001:
        if (!AUSpatialCapture::GetAUBox(this, "doaBeamit"))
          return 4294956421;
        AUBox = AUSpatialCapture::GetAUBox(this, "doaBeamit");
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *, _QWORD *))(*(_QWORD *)AUBox + 304))(AUBox, 4632, 0, 0, &v46, a5);
      case 2002:
        if (!AUSpatialCapture::GetBox(this, v10))
          return 4294956421;
        Box = AUSpatialCapture::GetBox(this, v16);
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *, _QWORD *))(*(_QWORD *)Box + 304))(Box, 2002, 0, 0, &v46, a5);
      case 2003:
        v5 = 0;
        *a5 = this;
        return v5;
      case 2004:
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v19 = (char *)this + 824;
        if (*((char *)this + 847) < 0)
          v19 = *(const char **)v19;
        goto LABEL_33;
      case 2005:
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v19 = (char *)this + 848;
        if (*((char *)this + 871) < 0)
          v19 = *(const char **)v19;
        goto LABEL_33;
      case 2006:
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v19 = (char *)this + 872;
        if (*((char *)this + 895) < 0)
          v19 = *(const char **)v19;
LABEL_33:
        Copy = (void *)CFStringCreateWithCString(v18, v19, 0x8000100u);
        if (Copy)
          goto LABEL_34;
        return 4294956433;
      case 2007:
        ZoomCurveValue::ZoomCurveValue((ZoomCurveValue *)&v49);
        if (!*((_QWORD *)this + 101))
          goto LABEL_114;
        end = v51.__end_;
        begin = v51.__begin_;
        if (v51.__begin_ == v51.__end_)
          goto LABEL_114;
        v22 = 1;
        break;
      case 2008:
        v5 = 0;
        v32 = *((unsigned __int8 *)this + 896);
        goto LABEL_80;
      case 2009:
        v5 = 0;
        v32 = *((unsigned __int8 *)this + 897);
LABEL_80:
        if (v32)
          v33 = (_QWORD *)MEMORY[0x1E0C9AE50];
        else
          v33 = (_QWORD *)MEMORY[0x1E0C9AE40];
        *a5 = *v33;
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v58, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        v23 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        *(_QWORD *)&v58[16] = *((_QWORD *)&begin->__r_.__value_.__l + 2);
        *(_OWORD *)v58 = v23;
      }
      if ((v58[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
      else
        v55 = *(std::string *)v58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v57 = v26->__r_.__value_.__r.__words[2];
      v56 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (v57 >= 0)
        v28 = (char *)&v56;
      else
        v28 = (char *)v56;
      std::string::basic_string[abi:ne180100]<0>(&v55, v28);
      v29 = DSPGraph::Graph::box();
      v30 = v29;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v55.__r_.__value_.__l.__data_);
        if (v30)
        {
LABEL_58:
          memset(&v55, 0, sizeof(v55));
          v54 = 24;
          if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, int *, std::string *))(*(_QWORD *)v30 + 304))(v30, 0, 0, 0, &v54, &v55))
          {
            if ((v58[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
            else
              v53 = *(std::string *)v58;
            v31 = (std::string *)ZoomCurveValue::operator[]((uint64_t)&v49, (__int128 *)&v53);
            if (v31 != &v55)
              std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v31, (uint64_t *)v55.__r_.__value_.__l.__data_, (uint64_t *)v55.__r_.__value_.__l.__size_, (uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 3);
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (v55.__r_.__value_.__r.__words[0])
          {
            v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          goto LABEL_70;
        }
      }
      else if (v29)
      {
        goto LABEL_58;
      }
      v22 = 0;
LABEL_70:
      if (SHIBYTE(v57) < 0)
        operator delete((void *)v56);
      if ((v58[23] & 0x80000000) != 0)
        operator delete(*(void **)v58);
      if (++begin == end)
      {
        if ((v22 & 1) == 0)
        {
          ZoomCurveValue::ZoomCurveValue((ZoomCurveValue *)v58);
          std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)&v49 + 1));
          v49 = *(_OWORD *)v58;
          v50 = *(_QWORD *)&v58[16];
          if (*(_QWORD *)&v58[16])
          {
            *(_QWORD *)(*(_QWORD *)&v58[8] + 16) = (char *)&v49 + 8;
            *(_QWORD *)v58 = &v58[8];
            *(_OWORD *)&v58[8] = 0uLL;
          }
          else
          {
            *(_QWORD *)&v49 = (char *)&v49 + 8;
          }
          std::vector<std::__fs::filesystem::path>::__vdeallocate(&v51);
          v51 = *(std::vector<std::string> *)&v58[24];
          memset(&v58[24], 0, 24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v59;
          *((_BYTE *)&v59.__r_.__value_.__s + 23) = 0;
          v59.__r_.__value_.__s.__data_[0] = 0;
          *(_QWORD *)&v56 = &v58[24];
          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
          std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)&v58[8]);
        }
LABEL_114:
        if (v50)
        {
          if ((__int128 *)((char *)this + 904) != &v49)
          {
            std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>((uint64_t)this + 904, (__int128 *)v49, (__int128 *)((char *)&v49 + 8));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 928), v51.__begin_, (__int128 *)v51.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3));
          }
          std::string::operator=((std::string *)((char *)this + 952), &__p);
        }
        std::map<std::string,PiecewiseLinearTransform>::map[abi:ne180100]((uint64_t)v42, (_QWORD *)this + 113);
        memset(&v44, 0, sizeof(v44));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, *((__int128 **)this + 116), *((__int128 **)this + 117), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 117) - *((_QWORD *)this + 116)) >> 3));
        if (*((char *)this + 975) < 0)
          std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)this + 119), *((_QWORD *)this + 120));
        else
          v45 = *(std::string *)((char *)this + 952);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)v58 = &v51;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)&v49 + 1));
        v39 = (void *)objc_opt_new();
        v40 = v39;
        if (v39)
        {
          v41 = v39;
          ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)v42, v41);
          v5 = 0;
          *a5 = v41;
        }
        else
        {
          v5 = 4294956433;
        }

        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        *(_QWORD *)v58 = &v44;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v43);
        return v5;
      }
    }
  }
  if (v8 > 1819309427)
  {
    if (v8 != 1819309428)
    {
      if (v8 != 1970040690)
      {
        if (v8 == 1953263724)
        {
          v13 = (const __CFDictionary *)*((_QWORD *)this + 73);
          if (v13)
          {
            Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13);
LABEL_34:
            v5 = 0;
            *a5 = Copy;
          }
          else
          {
            return 4294956433;
          }
        }
        return v5;
      }
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v15 = *(id *)SCLogScope(void)::scope;
        if (!v15)
          return 0;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v58 = 136315394;
        *(_QWORD *)&v58[4] = "AUSpatialCapture.mm";
        *(_WORD *)&v58[12] = 1024;
        *(_DWORD *)&v58[14] = 850;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Write-only property UnlockOrientation was read?", v58, 0x12u);
      }
      goto LABEL_108;
    }
    v34 = atomic_load((unint64_t *)this + 102);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v35 = *(id *)SCLogScope(void)::scope;
      if (!v35)
      {
LABEL_104:
        v5 = 0;
        *a5 = v34;
        return v5;
      }
    }
    else
    {
      v35 = MEMORY[0x1E0C81028];
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v58 = 136315650;
      *(_QWORD *)&v58[4] = "AUSpatialCapture.mm";
      *(_WORD *)&v58[12] = 1024;
      *(_DWORD *)&v58[14] = 855;
      *(_WORD *)&v58[18] = 2048;
      *(_QWORD *)&v58[20] = v34;
      _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Last orientation / camera direction update mach absolute time was %llu", v58, 0x1Cu);
    }

    goto LABEL_104;
  }
  if (v8 == 3700)
  {
    v5 = 0;
    *(_DWORD *)a5 = *((unsigned __int8 *)this + 376);
    return v5;
  }
  if (v8 == 1818980210)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v15 = *(id *)SCLogScope(void)::scope;
      if (!v15)
        return 0;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v58 = 136315394;
      *(_QWORD *)&v58[4] = "AUSpatialCapture.mm";
      *(_WORD *)&v58[12] = 1024;
      *(_DWORD *)&v58[14] = 846;
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Write-only property LockOrientation was read?", v58, 0x12u);
    }
LABEL_108:

    return 0;
  }
  return v5;
}

void sub_1B62345C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  ZoomCurveValue::~ZoomCurveValue(&a22);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::SetProperty(AUSpatialCapture *this, int a2, int a3, unsigned int a4, CFTypeRef *a5, int a6)
{
  uint64_t v6;
  CFTypeRef v9;
  const __CFString **v10;
  std::string *p_str;
  size_t size;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  std::string::size_type v17;
  std::string *v18;
  unsigned int v19;
  id v20;
  CFDictionaryRef Copy;
  uint64_t v22;
  char *v23;
  CFTypeRef v24;
  const __CFString **v25;
  void **v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  id v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  float v41;
  std::chrono::system_clock::time_point v42;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v43;
  unsigned int v44;
  unsigned int v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  id v51;
  std::string *v52;
  void *v53;
  int v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  std::string *v58;
  char v59;
  std::string __str;
  CFTypeRef cf;
  _BYTE buf[28];
  __int16 v63;
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  v6 = 4294956417;
  if (a2 <= 3699)
  {
    switch(a2)
    {
      case 2004:
        if (!a5)
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v28 = objc_claimAutoreleasedReturnValue();
          v29 = v28;
          if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 928;
            _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFStringRef passed to SetProperty is null.", buf, 0x12u);
          }
          goto LABEL_83;
        }
        v9 = *a5;
        if (!*a5)
          return 4294956417;
        CFRetain(*a5);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        if (!cf)
          return 4294956417;
        v10 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
        applesauce::CF::convert_to<std::string,0>(*v10, (uint64_t)&__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v13 = (char *)p_str + size;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = (char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v14 = (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
        v15 = memchr(p_str, 0, size);
        if (v15)
          v16 = v15;
        else
          v16 = v13;
        std::string::erase(&__str, v16 - (_BYTE *)p_str, v14 - v16);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = __str.__r_.__value_.__l.__size_;
          if (!__str.__r_.__value_.__l.__size_)
            goto LABEL_148;
          v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
            goto LABEL_148;
          v18 = &__str;
        }
        if (v18->__r_.__value_.__s.__data_[v17 - 1] != 47)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&__str.__r_.__value_.__l.__data_, "/");
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = *(std::string *)buf;
        }
LABEL_148:
        v51 = objc_alloc_init(MEMORY[0x1E0CB3620]);
        v59 = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &__str;
        else
          v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend(v51, "fileExistsAtPath:isDirectory:", v53, &v59);

        if (v59)
          v55 = v54;
        else
          v55 = 0;
        if (v55 == 1)
        {
          std::string::operator=((std::string *)((char *)this + 824), &__str);
          v6 = 0;
        }
        else
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v56 = objc_claimAutoreleasedReturnValue();
          v57 = v56;
          if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v58 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 949;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v58;
            _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Directory does not exist %s", buf, 0x1Cu);
          }

          v6 = 4294956445;
        }

        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (cf)
          CFRelease(cf);
        break;
      case 2006:
        if (a5)
        {
          v24 = *a5;
          if (*a5)
          {
            CFRetain(*a5);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__str, v24);
            if (__str.__r_.__value_.__r.__words[0])
            {
              v25 = (const __CFString **)applesauce::CF::StringRef::operator->(&__str);
              applesauce::CF::convert_to<std::string,0>(*v25, (uint64_t)buf);
              v26 = (void **)((char *)this + 872);
              if (*((char *)this + 895) < 0)
                operator delete(*v26);
              *(_OWORD *)v26 = *(_OWORD *)buf;
              *((_QWORD *)this + 111) = *(_QWORD *)&buf[16];
              if (__str.__r_.__value_.__r.__words[0])
                CFRelease(__str.__r_.__value_.__l.__data_);
            }
          }
          return 4294956445;
        }
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
        v30 = objc_claimAutoreleasedReturnValue();
        v29 = v30;
        if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 959;
          _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFStringRef passed to SetProperty is null.", buf, 0x12u);
        }
        goto LABEL_83;
      case 2007:
        v6 = 4294956445;
        if (a6 != 8 || !*a5)
          return v6;
        ZoomCurveValue::LoadFromDictionary((ZoomCurveValue *)buf, (const __CFDictionary *)*a5);
        AUSpatialCapture::SetZoomCurve(this, (ZoomCurveValue *)buf);
        ZoomCurveValue::~ZoomCurveValue((void **)buf);
        return 0;
      case 2008:
        v6 = 0;
        *((_BYTE *)this + 896) = CFEqual(*a5, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
        return v6;
      case 2009:
        v6 = 0;
        *((_BYTE *)this + 897) = CFEqual(*a5, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
        return v6;
      default:
        return v6;
    }
    return v6;
  }
  if (a2 > 1953263723)
  {
    if (a2 != 1970040690)
    {
      if (a2 == 1953263724)
      {
        if (a5)
        {
          if (*a5)
          {
            Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)*a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, Copy);
            v22 = *((_QWORD *)this + 73);
            *((_QWORD *)this + 73) = *(_QWORD *)buf;
            *(_QWORD *)buf = v22;
            applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
            AUSpatialCapture::LoadZoomCurveFromDictionary(this, *((const __CFDictionary **)this + 73), "plist");
            if (*((char *)this + 895) < 0)
            {
              *((_QWORD *)this + 110) = 20;
              v23 = (char *)*((_QWORD *)this + 109);
            }
            else
            {
              v23 = (char *)this + 872;
              *((_BYTE *)this + 895) = 20;
            }
            v6 = 0;
            strcpy(v23, "<plist path not set>");
          }
        }
        else
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v35 = objc_claimAutoreleasedReturnValue();
          v29 = v35;
          if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 909;
            _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
          }
LABEL_83:

          return 4294956445;
        }
      }
      return v6;
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v27 = *(id *)SCLogScope(void)::scope;
      if (!v27)
        goto LABEL_89;
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1005;
      _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unlocking orientation", buf, 0x12u);
    }

LABEL_89:
    std::mutex::lock((std::mutex *)((char *)this + 616));
    if (*((_BYTE *)this + 612))
    {
LABEL_90:
      *((_BYTE *)this + 612) = 0;
      atomic_store(*((_DWORD *)this + 152), (unsigned int *)this + 150);
      std::mutex::unlock((std::mutex *)((char *)this + 616));
      return 0;
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v37 = *(NSObject **)SCLogScope(void)::scope;
      if (!*(_QWORD *)SCLogScope(void)::scope)
        goto LABEL_90;
    }
    else
    {
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SCOrientationManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unlock requested while already unlocked?!", buf, 0x12u);
    }
    goto LABEL_90;
  }
  if (a2 == 3700)
  {
    v6 = 0;
    *((_BYTE *)this + 376) = *(_DWORD *)a5 != 0;
    return v6;
  }
  if (a2 == 1818980210)
  {
    v19 = ClampOrientation(*(unsigned int *)a5);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v20 = *(id *)SCLogScope(void)::scope;
      if (!v20)
        goto LABEL_72;
    }
    else
    {
      v20 = (id)MEMORY[0x1E0C81028];
      v31 = MEMORY[0x1E0C81028];
    }
    v32 = v20;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = (&off_1E69CC158)[v19 - 1];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 991;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v33;
      v63 = 1024;
      v64 = v19;
      _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Locking orientation at %s (%i)", buf, 0x22u);
    }

LABEL_72:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 680;
    __str.__r_.__value_.__s.__data_[8] = 1;
    std::mutex::lock((std::mutex *)((char *)this + 680));
    std::mutex::lock((std::mutex *)((char *)this + 616));
    if (*((_BYTE *)this + 612))
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v34 = *(NSObject **)SCLogScope(void)::scope;
        if (!*(_QWORD *)SCLogScope(void)::scope)
          goto LABEL_100;
      }
      else
      {
        v34 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "SCOrientationManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 54;
        _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Lock requested while already locked?!", buf, 0x12u);
      }
    }
LABEL_100:
    *((_BYTE *)this + 612) = 1;
    atomic_store(v19, (unsigned int *)this + 150);
    std::mutex::unlock((std::mutex *)((char *)this + 616));
    v38 = atomic_load((unsigned int *)this + 151);
    v39 = atomic_load((unsigned int *)this + 150);
    if (v38 == v39)
    {
      v40 = 0;
      goto LABEL_115;
    }
    v41 = 0.0;
    while (1)
    {
      std::chrono::steady_clock::now();
      v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v42.__d_.__rep_)
      {
        v43.__d_.__rep_ = 0;
        goto LABEL_111;
      }
      if (v42.__d_.__rep_ < 1)
      {
        if ((unint64_t)v42.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v43.__d_.__rep_ = 0x8000000000000000;
          goto LABEL_111;
        }
      }
      else if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v43.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_111;
      }
      v43.__d_.__rep_ = 1000 * v42.__d_.__rep_;
LABEL_111:
      std::condition_variable::__do_timed_wait((std::condition_variable *)((char *)this + 744), (std::unique_lock<std::mutex> *)&__str, v43);
      std::chrono::steady_clock::now();
      v41 = v41 + 0.001;
      if (*((float *)this + 198) <= v41)
      {
        v40 = 2;
LABEL_115:
        if (__str.__r_.__value_.__s.__data_[8])
          std::mutex::unlock((std::mutex *)__str.__r_.__value_.__l.__data_);
        if (v40)
        {
          if (v40 != 1)
          {
            if (SCLogScope(void)::once != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
            v46 = objc_claimAutoreleasedReturnValue();
            v47 = v46;
            if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 995;
              _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d Orientation locked timed out! Is IO running?", buf, 0x12u);
            }

            return 4294900551;
          }
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v50 = objc_claimAutoreleasedReturnValue();
          v49 = v50;
          if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 998;
            _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Orientation locked after waiting for IO thread", buf, 0x12u);
          }
        }
        else
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          CALog::LogObjIfEnabled((id *)SCLogScope(void)::scope);
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = v48;
          if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1000;
            _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Orientation locked without waiting for IO thread", buf, 0x12u);
          }
        }

        return 0;
      }
      v44 = atomic_load((unsigned int *)this + 151);
      v45 = atomic_load((unsigned int *)this + 150);
      if (v44 == v45)
      {
        v40 = 1;
        goto LABEL_115;
      }
    }
  }
  return v6;
}

void sub_1B62353E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20)
{
  if (a16 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a17);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::GetParameter(AUSpatialCapture *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  const char *v12;
  float v14;
  unsigned int v15;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    if (a2 == 30)
    {
      v15 = atomic_load((unsigned int *)this + 151);
      *a5 = (float)v15;
    }
    else if (a2 == 1)
    {
      v14 = (float)*((unsigned int *)this + 152);
      *a5 = v14;
      AUSpatialCapture::LogParameterValue((AUSpatialCapture *)1, (uint64_t)"Get", v14, v12);
    }
  }
  return 0;
}

uint64_t AUSpatialCapture::SetParameter(AUSpatialCapture *this, AUSpatialCapture *a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  NSObject *v17;
  id v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956430;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  AUSpatialCapture::LogParameterValue(a2, (uint64_t)"Set", a4, v11);
  if ((int)a2 > 25)
  {
    if ((_DWORD)a2 == 26)
      return 0;
    result = 0;
    if ((_DWORD)a2 == 30)
      return result;
LABEL_15:
    v12 = (unsigned int *)((char *)this + 592);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    return 0;
  }
  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2 == 10)
    {
      result = AUSpatialCapture::GetAUBox(this, "spatialTimbreFilter");
      if (!result)
        return result;
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)result + 56))(result, a4 < 0.5);
      return 0;
    }
    goto LABEL_15;
  }
  v14 = a4;
  if (a4 - 1 <= 3)
  {
    std::mutex::lock((std::mutex *)((char *)this + 616));
    *((_DWORD *)this + 152) = v14;
    if (!*((_BYTE *)this + 612))
      atomic_store(v14, (unsigned int *)this + 150);
    std::mutex::unlock((std::mutex *)((char *)this + 616));
    v15 = (unsigned int *)((char *)this + 592);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    return 0;
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (!SCLogScope(void)::scope)
  {
    v17 = MEMORY[0x1E0C81028];
    v18 = MEMORY[0x1E0C81028];
    goto LABEL_30;
  }
  result = (uint64_t)*(id *)SCLogScope(void)::scope;
  v17 = result;
  if (result)
  {
LABEL_30:
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v19 = 136315650;
      v20 = "AUSpatialCapture.mm";
      v21 = 1024;
      v22 = 1205;
      v23 = 1024;
      v24 = a4;
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ignoring orientation update with unsupported value %u", (uint8_t *)&v19, 0x18u);
    }

    return 0;
  }
  return result;
}

uint64_t AUSpatialCapture::CanScheduleParameters(AUSpatialCapture *this)
{
  return 0;
}

uint64_t AUSpatialCapture::ProcessMultipleBufferLists(AUSpatialCapture *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  DSPGraph::Graph *v8;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _OWORD *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t GraphOutput;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  id v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t AUBox;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  unsigned int v50;
  NSObject *v51;
  __int128 v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t result;
  const char *v65;
  _QWORD *v66;
  _QWORD v67[2];
  __int128 v68;
  uint64_t v69[4];
  _BYTE buf[12];
  __int16 v71;
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v8 = (DSPGraph::Graph *)*((_QWORD *)this + 101);
  if (!v8)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v23 = *(id *)SCLogScope(void)::scope;
      if (!v23)
        return 0;
    }
    else
    {
      v23 = MEMORY[0x1E0C81028];
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v71 = 1024;
      v72 = 1369;
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Process called without a graph!", buf, 0x12u);
    }

    return 0;
  }
  if (DSPGraph::Graph::numInputs(v8) > a4
    || DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)) != a6)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v22 = *(id *)SCLogScope(void)::scope;
      if (!v22)
        return 4294956428;
    }
    else
    {
      v22 = MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v71 = 1024;
      v72 = 1319;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d wrong number of buffer lists!", buf, 0x12u);
    }

    return 4294956428;
  }
  v13 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 101));
  v67[1] = v67;
  MEMORY[0x1E0C80A78](v13);
  v16 = &v67[-2 * v15];
  if (v14)
    bzero(v16, 80 * ((80 * (unint64_t)v14 - 80) / 0x50) + 80);
  v17 = 0;
  v18 = (_OWORD *)((char *)this + 272);
  v19 = v16;
  while (v17 < DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 101)))
  {
    *(_DWORD *)v19 = a3;
    *((_DWORD *)v19 + 1) = 0;
    v20 = *((_OWORD *)this + 18);
    *(_OWORD *)(v19 + 1) = *v18;
    *(_OWORD *)(v19 + 3) = v20;
    v21 = *((_OWORD *)this + 20);
    *(_OWORD *)(v19 + 5) = *((_OWORD *)this + 19);
    *(_OWORD *)(v19 + 7) = v21;
    v19[9] = a5[v17++];
    v19 += 10;
  }
  v26 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101));
  MEMORY[0x1E0C80A78](v26);
  v29 = &v67[-2 * v28];
  if (v27)
    bzero(v29, 80 * ((80 * (unint64_t)v27 - 80) / 0x50) + 80);
  v30 = 0;
  v31 = v29;
  while (v30 < DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)))
  {
    *v31 = a3;
    v31[1] = 0;
    v32 = *((_OWORD *)this + 18);
    *(_OWORD *)(v31 + 2) = *v18;
    *(_OWORD *)(v31 + 6) = v32;
    v33 = *((_OWORD *)this + 20);
    *(_OWORD *)(v31 + 10) = *((_OWORD *)this + 19);
    *(_OWORD *)(v31 + 14) = v33;
    *((_QWORD *)v31 + 9) = a7[v30++];
    v31 += 20;
  }
  GraphOutput = AUSpatialCapture::GetGraphOutput(this);
  v35 = *(_QWORD *)(GraphOutput + 64);
  if (*(_QWORD *)(GraphOutput + 72) == v35)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v69, "in");
    v66 = (_QWORD *)(GraphOutput + 32);
    if (*(char *)(GraphOutput + 55) < 0)
      v66 = (_QWORD *)*v66;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v65, v66, (uint64_t)(*(_QWORD *)(GraphOutput + 72) - *(_QWORD *)(GraphOutput + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    __break(1u);
    return result;
  }
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  v36 = (unsigned int *)((char *)this + 592);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(0, v36));
  if (v37)
    v38 = AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(this);
  else
    v38 = 0;
  v40 = atomic_load((unsigned int *)this + 151);
  v41 = atomic_load((unsigned int *)this + 150);
  if (v40 == (_DWORD)v41 || (v42 = *((_QWORD *)this + 101)) == 0)
  {
    if (!v38)
      goto LABEL_55;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)v42 + 40))(*((_QWORD *)this + 101), 30, (float)v41);
    AUBox = AUSpatialCapture::GetAUBox(this, "doaBeamit");
    v44 = AUBox;
    if (AUBox)
    {
      v45 = *((_QWORD *)this + 69);
      if (v41 >= (*((_QWORD *)this + 70) - v45) >> 3
        || ((*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)AUBox + 80))(AUBox, 4, 0, 0, 0, (float)*(unsigned int *)(v45 + 8 * v41)), v46 = *((_QWORD *)this + 69), v41 >= (*((_QWORD *)this + 70) - v46) >> 3))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v44 + 80))(v44, 5, 0, 0, 0, (float)*(unsigned int *)(v46 + 8 * v41 + 4));
    }
    atomic_store(v41, (unsigned int *)this + 151);
    std::condition_variable::notify_one((std::condition_variable *)((char *)this + 744));
    v47 = *((_QWORD *)this + 9);
    if (v47)
    {
      v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
    }
    else
    {
      v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v49)
        v48 = 0;
      else
        v48 = *v49;
    }
    ausdk::AUElement::SetParameter(v48, 0x1Eu, (float)v41, 0);
  }
  atomic_store(*((_QWORD *)this + 35), (unint64_t *)this + 102);
LABEL_55:
  DSPGraph::Graph::preflight();
  v67[0] = v16;
  v50 = 0;
  v25 = 0;
  v51 = MEMORY[0x1E0C81028];
  *(_QWORD *)&v52 = 136315394;
  v68 = v52;
  while (v50 < DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 101)))
  {
    if (*v29 == a3)
      goto LABEL_68;
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (!SCLogScope(void)::scope)
    {
      v54 = v51;
      v53 = v51;
LABEL_64:
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v68;
        *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
        v71 = 1024;
        v72 = 1353;
        _os_log_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d preflight gave invalid number of frames to process!", buf, 0x12u);
      }

      goto LABEL_67;
    }
    v53 = *(id *)SCLogScope(void)::scope;
    if (v53)
      goto LABEL_64;
LABEL_67:
    v25 = 4294956422;
LABEL_68:
    ++v50;
  }
  if ((_DWORD)v25)
    return v25;
  DSPGraph::Graph::processMultiple();
  if (!*((_QWORD *)this + 101))
    return 0;
  v55 = 0;
  v56 = 0.0;
  while (2)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, off_1E69CBDC0[v55]);
    v57 = DSPGraph::Graph::box();
    v58 = v57;
    if (v73 < 0)
    {
      operator delete(*(void **)buf);
      if (!v58)
        goto LABEL_78;
    }
    else if (!v57)
    {
      goto LABEL_78;
    }
    v59 = (*(float (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v58 + 88))(v58, 28, 0, 0);
    if (v59 >= v56)
      v56 = v59;
LABEL_78:
    if (++v55 != 3)
      continue;
    break;
  }
  AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)this, 0x20u, v56);
  std::string::basic_string[abi:ne180100]<0>(buf, "wideVsSpatialMix");
  v60 = DSPGraph::Graph::box();
  if (v73 < 0)
    operator delete(*(void **)buf);
  if (v60)
  {
    v61 = (*(float (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v60 + 88))(v60, 0, 0, 0);
    AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)this, 0x2Fu, v61);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "focusedVsSpatialMix");
  v62 = DSPGraph::Graph::box();
  if (v73 < 0)
    operator delete(*(void **)buf);
  if (v62)
  {
    v63 = (*(float (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v62 + 88))(v62, 0, 0, 0);
    AUSpatialCapture::ApplyMeterParameterUpdate((uint64_t)this, 0x30u, v63);
  }
  return 0;
}

void sub_1B6235FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 161) < 0)
    operator delete(*(void **)(v1 - 184));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::Render(AUSpatialCapture *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t BufferList;

  v8 = (AUSpatialCapture *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUSpatialCapture *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSpatialCapture *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

BOOL AUSpatialCapture::BusCountWritable(AUSpatialCapture *this, int a2)
{
  return a2 == 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpatialCapture::SetBusCount(AUSpatialCapture *this, int a2, int a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  if (a2 != 1)
    return 4294956430;
  v4 = (char *)operator new(8uLL);
  if (a3 == 1)
  {
    v5 = 0;
  }
  else
  {
    if (a3 != 3)
    {
      v7 = v4 + 8;
      goto LABEL_9;
    }
    v5 = 1;
  }
  v7 = &v4[4 * v5];
LABEL_9:
  if (v7 - v4 == 8)
    v6 = 4294956428;
  else
    v6 = 0;
  operator delete(v4);
  return v6;
}

uint64_t AUSpatialCapture::GetParameterList(AUSpatialCapture *this, int a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *ParameterMap;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  *a4 = 0;
  if (!a2)
  {
    ParameterMap = (_QWORD *)AUSpatialCapture::GetParameterMap(this);
    *a4 = ParameterMap[2];
    if (a3)
    {
      v10 = (_QWORD *)*ParameterMap;
      v8 = ParameterMap + 1;
      v9 = v10;
      if (v10 != v8)
      {
        v11 = 0;
        do
        {
          a3[v11] = *((_DWORD *)v9 + 8);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v9[2];
              v14 = *v13 == (_QWORD)v9;
              v9 = v13;
            }
            while (!v14);
          }
          ++v11;
          v9 = v13;
        }
        while (v13 != v8);
      }
    }
  }
  return 0;
}

__n128 AUSpatialCapture::GetParameterInfo(AUSpatialCapture *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t **v6;
  __n128 result;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (!a2)
  {
    v6 = (uint64_t **)(AUSpatialCapture::GetParameterMap(this) + 8);
    if (*v6)
    {
      v8 = v6;
      v9 = *v6;
      do
      {
        v10 = *((_DWORD *)v9 + 8);
        v11 = v10 >= a3;
        if (v10 >= a3)
          v12 = v9;
        else
          v12 = v9 + 1;
        if (v11)
          v8 = (uint64_t **)v9;
        v9 = (uint64_t *)*v12;
      }
      while (*v12);
      if (v8 != v6 && *((_DWORD *)v8 + 8) <= a3)
      {
        v13 = std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v6, a3);
        v15 = *((_OWORD *)v13 + 1);
        v14 = *((_OWORD *)v13 + 2);
        *(_OWORD *)a4->name = *(_OWORD *)v13;
        *(_OWORD *)&a4->name[16] = v15;
        *(_OWORD *)&a4->name[32] = v14;
        v16 = *((_OWORD *)v13 + 4);
        result = *((__n128 *)v13 + 5);
        v17 = *((_OWORD *)v13 + 3);
        *(_QWORD *)&a4->flags = v13[12];
        *(_OWORD *)&a4->clumpID = v16;
        *(__n128 *)&a4->unit = result;
        *(_OWORD *)&a4->name[48] = v17;
      }
    }
  }
  return result;
}

uint64_t AUSpatialCapture::SaveState(AUSpatialCapture *this, ausdk **a2)
{
  __CFDictionary *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  id v9;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::SaveState(this, a2);
  v4 = *a2;
  if (!v4)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v6 = *(id *)SCLogScope(void)::scope;
      if (!v6)
        return 4294956445;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v15 = 1024;
      v16 = 565;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBase::SaveState didn't produce valid dictionary?", buf, 0x12u);
    }
    v7 = 4294956445;
    goto LABEL_33;
  }
  if (*((_BYTE *)this + 896))
    ZoomCurveValue::SaveToDictionary((AUSpatialCapture *)((char *)this + 904), v4);
  if (*((_BYTE *)this + 897))
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v5 = *(id *)SCLogScope(void)::scope;
      if (!v5)
      {
LABEL_20:
        v6 = v4;
        -[NSObject addEntriesFromDictionary:](v6, "addEntriesFromDictionary:", *((_QWORD *)this + 73));
        cf = 0;
        *(_QWORD *)buf = 0;
        v11 = 0;
        v12 = 0;
        (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)this + 88))(this, 2004, 0, 0, buf);
        (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)this + 88))(this, 2006, 0, 0, &cf);
        (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)this + 88))(this, 2008, 0, 0, &v12);
        (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)this + 88))(this, 2009, 0, 0, &v11);
        if (*(_QWORD *)buf)
        {
          -[NSObject setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", *(_QWORD *)buf, CFSTR("DebugDirectory"));
          CFRelease(*(CFTypeRef *)buf);
        }
        if (cf)
        {
          -[NSObject setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", cf, CFSTR("PlistPath"));
          CFRelease(cf);
        }
        if (v12)
        {
          -[NSObject setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v12, CFSTR("SaveZoomCurveInPreset"));
          CFRelease(v12);
        }
        if (v11)
        {
          -[NSObject setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v11, CFSTR("SavePlistAndPropertiesInPreset"));
          CFRelease(v11);
        }
        v7 = 0;
LABEL_33:

        return v7;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v15 = 1024;
      v16 = 525;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Saving plist and properties to AU preset", buf, 0x12u);
    }

    goto LABEL_20;
  }
  return 0;
}

void sub_1B62366DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::RestoreState(OpaqueAudioComponentInstance **this, void *cf)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unsigned int *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  void *v23;
  BOOL v24;
  void *v25;
  CFTypeRef cf1;
  void *v27;
  _BYTE buf[12];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 4294956445;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  v5 = ausdk::AUBase::RestoreState(this, cf);
  if (!(_DWORD)v5)
  {
    v9 = (unsigned int *)(this + 74);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v27 = cf;
    AUSpatialCapture::LoadZoomCurveFromDictionary((AUSpatialCapture *)this, (const __CFDictionary *)cf, "AU preset");
    v11 = cf;
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("DebugDirectory"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("DebugDirectory"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)buf = v13;
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))*this + 12))(this, 2004, 0, 0, buf, 8);
    }
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("SaveZoomCurveInPreset"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14 == 0;

    if (!v15)
    {
      *(_QWORD *)buf = 0;
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("SaveZoomCurveInPreset"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)buf = v16;
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))*this + 12))(this, 2008, 0, 0, buf, 8);
    }
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("SavePlistAndPropertiesInPreset"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17 == 0;

    if (v18)
      goto LABEL_35;
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("SavePlistAndPropertiesInPreset"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    cf1 = v19;
    (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, CFTypeRef *, uint64_t))*this + 12))(this, 2009, 0, 0, &cf1, 8);
    if (!CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
    {
LABEL_33:
      if (*((_BYTE *)this + 17))
      {
        (*((void (**)(OpaqueAudioComponentInstance **))*this + 8))(this);
        (*((void (**)(OpaqueAudioComponentInstance **))*this + 7))(this);
      }
LABEL_35:
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("PlistPath"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23 == 0;

      if (!v24)
      {
        objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("PlistPath"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        *(_QWORD *)buf = v25;
        (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))*this + 12))(this, 2006, 0, 0, buf, 8);
      }

      return 0;
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v20 = *(id *)SCLogScope(void)::scope;
      if (!v20)
      {
LABEL_32:
        (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, void **, uint64_t))*this + 12))(this, 1953263724, 0, 0, &v27, 8);
        goto LABEL_33;
      }
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
      v22 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v29 = 1024;
      v30 = 497;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Restoring plist from AU preset", buf, 0x12u);
    }

    goto LABEL_32;
  }
  v6 = v5;
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v7 = *(id *)SCLogScope(void)::scope;
    if (!v7)
      return v6;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    v29 = 1024;
    v30 = 510;
    v31 = 1024;
    v32 = v6;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %i while restoring state", buf, 0x18u);
  }

  return v6;
}

void sub_1B6236B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::GetParameterValueStrings(AUSpatialCapture *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;

  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  v7 = (uint64_t *)(AUSpatialCapture::GetParameterMap(this) + 8);
  result = *v7;
  if (*v7)
  {
    v8 = (uint64_t)v7;
    v9 = *v7;
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = v10 >= a3;
      if (v10 >= a3)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (v11)
        v8 = v9;
      v9 = *v12;
    }
    while (*v12);
    if ((uint64_t *)v8 != v7 && *(_DWORD *)(v8 + 32) <= a3)
    {
      v13 = std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)result, a3);
      if (v13[14] != v13[13])
      {
        v14 = v13;
        v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((v14[14] - v14[13]) >> 3));
        v16 = v14[13];
        for (i = v14[14]; v16 != i; v16 += 24)
        {
          v18 = v16;
          if (*(char *)(v16 + 23) < 0)
            v18 = *(_QWORD *)v16;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addObject:", v19);

        }
        result = 0;
        *a4 = (const __CFArray *)v15;
        return result;
      }
    }
    return 0;
  }
  return result;
}

void sub_1B6236C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AUSpatialCapture::GetLatency(AUSpatialCapture *this)
{
  DSPGraph::Box *GraphOutput;
  DSPGraph::Box *v2;
  unsigned int v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  id v14;
  const char *v15;
  _QWORD *v16;
  _QWORD v17[3];
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  GraphOutput = (DSPGraph::Box *)AUSpatialCapture::GetGraphOutput(this);
  if (!GraphOutput)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v8 = *(id *)SCLogScope(void)::scope;
      if (!v8)
        return;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "AUSpatialCapture.mm";
      v20 = 1024;
      v21 = 582;
      v10 = "%25s:%-5d The host requested latency before the real value is available!";
      v11 = v8;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 18;
      goto LABEL_19;
    }
LABEL_20:

    return;
  }
  v2 = GraphOutput;
  v3 = DSPGraph::Box::totalLatencyInSamples(GraphOutput);
  v4 = *((_QWORD *)v2 + 8);
  if (*((_QWORD *)v2 + 9) != v4)
  {
    v5 = (double)v3;
    v6 = (double)**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    v7 = v5 / v6;
    if (SCLogScope(void)::scope)
    {
      v8 = *(id *)SCLogScope(void)::scope;
      if (!v8)
        return;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v19 = "AUSpatialCapture.mm";
      v20 = 1024;
      v21 = 580;
      v22 = 2048;
      v23 = v7;
      v10 = "%25s:%-5d Latency is %f";
      v11 = v8;
      v12 = OS_LOG_TYPE_DEBUG;
      v13 = 28;
LABEL_19:
      _os_log_impl(&dword_1B5ED0000, v11, v12, v10, buf, v13);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v17, "in");
  v16 = (_QWORD *)((char *)v2 + 32);
  if (*((char *)v2 + 55) < 0)
    v16 = (_QWORD *)*v16;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v15, v16, (uint64_t)(*((_QWORD *)v2 + 9) - *((_QWORD *)v2 + 8)) >> 5, 0);
  DSPGraph::ThrowException();
  __break(1u);
}

void sub_1B6236F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::SupportsTail(AUSpatialCapture *this)
{
  return 0;
}

BOOL AUSpatialCapture::StreamFormatWritable(AUSpatialCapture *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpatialCapture::SupportedNumChannels(AUSpatialCapture *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpatialCapture::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUSpatialCapture::ValidFormat(AUSpatialCapture *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  AudioFormatID mFormatID;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t GraphInput;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t GraphOutput;
  uint64_t v18;
  const AudioStreamBasicDescription *v19;
  id v20;
  NSObject *v21;
  void **v22;
  id v23;
  id v24;
  NSObject *v25;
  int16x8_t v26;
  void **v27;
  const char *v28;
  _QWORD *v29;
  void *v30[2];
  int16x8_t v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  void **v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  mFormatID = a4->mFormatID;
  if (mFormatID == 1819304813)
    v9 = a4->mBitsPerChannel == 32;
  else
    v9 = mFormatID == 1718773105 && a4->mBitsPerChannel == 64;
  v10 = v9;
  v11 = *(_DWORD *)&v10 & ((a4->mFormatFlags & 0x20) >> 5);
  if (a2 == 2)
  {
    if (!AUSpatialCapture::GetGraphOutput(this))
      goto LABEL_39;
    GraphOutput = AUSpatialCapture::GetGraphOutput(this);
    v13 = *(_QWORD *)(GraphOutput + 64);
    if (*(_QWORD *)(GraphOutput + 72) == v13)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v30, "in");
      v29 = (_QWORD *)(GraphOutput + 32);
      if (*(char *)(GraphOutput + 55) < 0)
        v29 = (_QWORD *)*v29;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v28, v29, (uint64_t)(*(_QWORD *)(GraphOutput + 72) - *(_QWORD *)(GraphOutput + 64)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_56;
    }
    goto LABEL_18;
  }
  if (a2 != 1 || !AUSpatialCapture::GetGraphInput(this, a3))
    goto LABEL_39;
  GraphInput = AUSpatialCapture::GetGraphInput(this, a3);
  v13 = *(_QWORD *)(GraphInput + 88);
  if (*(_QWORD *)(GraphInput + 96) != v13)
  {
LABEL_18:
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v19 = *(const AudioStreamBasicDescription **)(v18 + 120);
    if (!v19)
      goto LABEL_39;
    if (v19->mSampleRate == a4->mSampleRate
      && v19->mFormatID == a4->mFormatID
      && v19->mBytesPerPacket == a4->mBytesPerPacket
      && v19->mFramesPerPacket == a4->mFramesPerPacket
      && v19->mChannelsPerFrame == a4->mChannelsPerFrame
      && v19->mBitsPerChannel == a4->mBitsPerChannel
      && (v11 & CA::Implementation::EquivalentFormatFlags(*(CA::Implementation **)(v18 + 120), a4, 0, 0) & 1) != 0)
    {
      v11 = 1;
      goto LABEL_39;
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v11 = (uint64_t)*(id *)SCLogScope(void)::scope;
      if (!v11)
        goto LABEL_39;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v20 = MEMORY[0x1E0C81028];
    }
    v21 = (id)v11;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v30, a4);
      v22 = (void **)v30[0];
      CAFormatter::CAFormatter((CAFormatter *)__p, v19);
      *(_DWORD *)buf = 136316418;
      v36 = "AUSpatialCapture.mm";
      v37 = 1024;
      v38 = 632;
      v39 = 1024;
      v40 = a2;
      v41 = 1024;
      v42 = a3;
      v43 = 2080;
      v44 = v22;
      v45 = 2080;
      v46 = __p[0];
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_INFO, "%25s:%-5d scope %u element %u: incoming (invalid) format %s. required fmt %s", buf, 0x32u);
      if (__p[0])
        free(__p[0]);
      if (v30[0])
        free(v30[0]);
    }

    v11 = 0;
LABEL_39:
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v23 = *(id *)SCLogScope(void)::scope;
      if (!v23)
        return v11;
    }
    else
    {
      v23 = (id)MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    v25 = v23;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(int16x8_t *)&a4->mBytesPerPacket;
      *(_OWORD *)v30 = *(_OWORD *)&a4->mSampleRate;
      v31 = v26;
      v32 = *(_QWORD *)&a4->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)v30, (uint64_t)__p, v26);
      v27 = v34 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316418;
      v36 = "AUSpatialCapture.mm";
      v37 = 1024;
      v38 = 634;
      v39 = 1024;
      v40 = a2;
      v41 = 1024;
      v42 = a3;
      v43 = 2080;
      v44 = v27;
      v45 = 1024;
      LODWORD(v46) = v11;
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format check for scope %i element %i: %s. Valid: %i", buf, 0x2Eu);
      if (v34 < 0)
        operator delete(__p[0]);
    }

    return v11;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v30, "out");
  v15 = (_QWORD *)(GraphInput + 32);
  if (*(char *)(GraphInput + 55) < 0)
    v15 = (_QWORD *)*v15;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*(_QWORD *)(GraphInput + 96) - *(_QWORD *)(GraphInput + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
LABEL_56:
  __break(1u);
  return result;
}

void sub_1B62374A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::GetAudioChannelLayout(AUSpatialCapture *this, int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  std::vector<char>::pointer begin;
  int v9;
  std::vector<char>::pointer v10;
  __int128 v11;
  uint64_t GraphInput;
  uint64_t v13;
  unsigned int v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t result;
  const char *v18;
  _QWORD *v19;
  std::vector<char> v20;
  std::vector<char> v21;
  std::vector<char>::value_type v22[24];
  std::vector<char> __x;

  if (a3)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *a5 = a2 == 2;
  LOBYTE(__x.__begin_) = 0;
  std::vector<char>::vector(&v21, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  begin = v21.__begin_;
  *(_QWORD *)v21.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (a2 != 1)
  {
    if (a2 != 2)
      ausdk::Throw((ausdk *)0xFFFFD58ELL);
    v9 = *((_DWORD *)this + 200);
    v22[0] = 0;
    std::vector<char>::vector(&__x, 0x20uLL, v22);
    v10 = __x.__begin_;
    *((_DWORD *)__x.__begin_ + 1) = 0;
    *((_DWORD *)v10 + 2) = 0;
    *(_DWORD *)v10 = v9;
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
      v10 = __x.__begin_;
    }
    v21.__begin_ = v10;
    v11 = *(_OWORD *)&__x.__end_;
    goto LABEL_14;
  }
  if (!AUSpatialCapture::GetGraphInput(this, 0))
  {
    v14 = -65532;
    goto LABEL_11;
  }
  GraphInput = AUSpatialCapture::GetGraphInput(this, 0);
  v13 = *(_QWORD *)(GraphInput + 88);
  if (*(_QWORD *)(GraphInput + 96) != v13)
  {
    v14 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) + 120) + 28) | 0xFFFF0000;
LABEL_11:
    LOBYTE(__x.__begin_) = 0;
    std::vector<char>::vector(&v20, 0x20uLL, (const std::vector<char>::value_type *)&__x);
    v10 = v20.__begin_;
    *((_DWORD *)v20.__begin_ + 1) = 0;
    *((_DWORD *)v10 + 2) = 0;
    *(_DWORD *)v10 = v14;
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
      v10 = v20.__begin_;
    }
    v21.__begin_ = v10;
    v11 = *(_OWORD *)&v20.__end_;
LABEL_14:
    *(_OWORD *)&v21.__end_ = v11;
    if (*(_DWORD *)v10 == 0x10000)
    {
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v10 + 1));
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.i32[0])
        goto LABEL_19;
    }
    else
    {
      if (!*(_DWORD *)v10)
      {
        if (!*((_DWORD *)v10 + 2))
          goto LABEL_23;
LABEL_19:
        v16 = v11 - (_QWORD)v10;
        if (a4)
        {
          if ((_DWORD)v16)
            memcpy(a4, v10, (v11 - (_DWORD)v10));
        }
        goto LABEL_24;
      }
      if ((unsigned __int16)*(_DWORD *)v10)
        goto LABEL_19;
    }
LABEL_23:
    v16 = 0;
LABEL_24:
    v21.__end_ = v10;
    operator delete(v10);
    return v16;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v22, "out");
  v19 = (_QWORD *)(GraphInput + 32);
  if (*(char *)(GraphInput + 55) < 0)
    v19 = (_QWORD *)*v19;
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*(_QWORD *)(GraphInput + 96) - *(_QWORD *)(GraphInput + 88)) >> 5, 0);
  result = DSPGraph::ThrowException();
  __break(1u);
  return result;
}

void sub_1B6237768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialCapture::SetAudioChannelLayout(AUSpatialCapture *this, int a2, int a3, const AudioChannelLayout *a4)
{
  uint64_t result;
  AudioChannelLayoutTag mChannelLayoutTag;
  unint64_t v8;
  std::vector<char>::pointer begin;
  void *v10;
  unint64_t v11;
  AudioChannelLayout v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  std::vector<char> v17;
  void **v18[3];
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;

  if (a2 != 2)
    return 4294956430;
  if (a3)
    return 4294956419;
  if (a4)
  {
    mChannelLayoutTag = a4->mChannelLayoutTag;
    if (ChannelLayoutTagIsSupportedHOA(a4->mChannelLayoutTag))
    {
      HOA::HOA((uint64_t)&v12, mChannelLayoutTag, 0);
      HOA::createSphericalGridDecoder(&v12.mChannelLayoutTag);
      *(Float32 *)&v8 = v12.mChannelDescriptions[0].mCoordinates[0];
      HOA::~HOA((HOA *)&v12);
    }
    else
    {
      LOBYTE(v12.mChannelLayoutTag) = 0;
      std::vector<char>::vector(&v17, 0x20uLL, (const std::vector<char>::value_type *)&v12);
      begin = v17.__begin_;
      *((_DWORD *)v17.__begin_ + 1) = 0;
      *((_DWORD *)begin + 2) = 0;
      *(_DWORD *)begin = mChannelLayoutTag;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      GetChannelLayoutSphericalCoordinates(&v12, (float *)begin);
      v18[0] = &v25;
      v18[1] = &v22;
      v18[2] = &v19;
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>(v18, (uint64_t)&v12);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      if (*(_QWORD *)&v12.mChannelDescriptions[0].mCoordinates[1])
      {
        v13 = *(_QWORD *)&v12.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v12.mChannelDescriptions[0].mCoordinates[1]);
      }
      if (*(_QWORD *)&v12.mChannelLayoutTag)
      {
        *(_QWORD *)&v12.mNumberChannelDescriptions = *(_QWORD *)&v12.mChannelLayoutTag;
        operator delete(*(void **)&v12.mChannelLayoutTag);
      }
      memset(&v12, 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v12, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
      *(_QWORD *)&v12.mChannelDescriptions[0].mCoordinates[1] = 0;
      v13 = 0;
      v14 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v12.mChannelDescriptions[0].mCoordinates[1], v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 2);
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v17.__begin_)
      {
        v17.__end_ = v17.__begin_;
        operator delete(v17.__begin_);
      }
      v10 = *(void **)&v12.mChannelLayoutTag;
      v11 = *(_QWORD *)&v12.mNumberChannelDescriptions - *(_QWORD *)&v12.mChannelLayoutTag;
      if (*(_QWORD *)&v12.mChannelDescriptions[0].mCoordinates[1])
      {
        v13 = *(_QWORD *)&v12.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v12.mChannelDescriptions[0].mCoordinates[1]);
        v10 = *(void **)&v12.mChannelLayoutTag;
      }
      v8 = v11 >> 2;
      if (v10)
      {
        *(_QWORD *)&v12.mNumberChannelDescriptions = v10;
        operator delete(v10);
      }
    }
    if ((v8 - 1) > 0x7F)
    {
      return 4294956428;
    }
    else
    {
      result = 0;
      *((_DWORD *)this + 200) = a4->mChannelLayoutTag;
    }
  }
  else
  {
    result = 0;
    *((_DWORD *)this + 200) = 0;
  }
  return result;
}

uint64_t AUSpatialCapture::GetGraphInput(AUSpatialCapture *this, unsigned int a2)
{
  DSPGraph::Graph *v3;

  v3 = (DSPGraph::Graph *)*((_QWORD *)this + 101);
  if (v3 && DSPGraph::Graph::numInputs(v3) > a2 && DSPGraph::Graph::in(*((DSPGraph::Graph **)this + 101)))
    return DSPGraph::Graph::in(*((DSPGraph::Graph **)this + 101));
  else
    return 0;
}

uint64_t AUSpatialCapture::GetGraphOutput(AUSpatialCapture *this)
{
  DSPGraph::Graph *v2;

  v2 = (DSPGraph::Graph *)*((_QWORD *)this + 101);
  if (v2 && DSPGraph::Graph::out(v2))
    return DSPGraph::Graph::out(*((DSPGraph::Graph **)this + 101));
  else
    return 0;
}

uint64_t AUSpatialCapture::GetParameterMap(AUSpatialCapture *this)
{
  uint64_t result;
  uint64_t *v3;
  _QWORD *v4;

  result = *((_QWORD *)this + 72);
  if (!result)
  {
    v3 = (uint64_t *)((char *)this + 576);
    v4 = (_QWORD *)operator new();
    v4[2] = 0;
    v4[1] = 0;
    *v4 = v4 + 1;
    std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100](v3, (uint64_t)v4);
    FillSpatialCaptureParameterMap((uint64_t **)*v3);
    return *v3;
  }
  return result;
}

uint64_t *std::map<unsigned int,SpatialCaptureParameterInfo>::at(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2)
        break;
      a1 = (uint64_t *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (uint64_t *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t *std::unique_ptr<std::map<unsigned int,SpatialCaptureParameterInfo>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SpatialCaptureParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SpatialCaptureParameterInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 112);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void AUSpatialCapture::LoadZoomCurveFromDictionary(AUSpatialCapture *this, const __CFDictionary *a2, const char *a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  _BYTE v9[8];
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  _BYTE buf[12];
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  ZoomCurveValue::LoadFromDictionary((ZoomCurveValue *)v9, a2);
  if (v11)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v5 = *(id *)SCLogScope(void)::scope;
      if (!v5)
      {
LABEL_16:
        AUSpatialCapture::SetZoomCurve(this, (ZoomCurveValue *)v9);
        (*(void (**)(AUSpatialCapture *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 2007, 0, 0);
        goto LABEL_21;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
      v16 = 1024;
      v17 = 642;
      v18 = 2080;
      v19 = a3;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Zoom curve loaded from %s", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v6 = *(id *)SCLogScope(void)::scope;
    if (!v6)
      goto LABEL_21;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    v16 = 1024;
    v17 = 646;
    v18 = 2080;
    v19 = a3;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s does not have zoom curve", buf, 0x1Cu);
  }

LABEL_21:
  if (v14 < 0)
    operator delete(__p);
  *(_QWORD *)buf = &v12;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v10);
}

void sub_1B6237EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZoomCurveValue::~ZoomCurveValue((void **)va);
  _Unwind_Resume(a1);
}

void AUSpatialCapture::SetZoomCurve(AUSpatialCapture *this, ZoomCurveValue *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = (char *)this + 904;
  if ((AUSpatialCapture *)((char *)this + 904) != a2)
  {
    std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>((uint64_t)this + 904, *(__int128 **)a2, (__int128 *)((char *)a2 + 8));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 928), *((std::string **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  }
  std::string::operator=((std::string *)((char *)this + 952), (const std::string *)a2 + 2);
  ZoomCurveValue::ApplyToGraph((uint64_t)v4, (_QWORD *)this + 101);
  v5 = (unsigned int *)((char *)this + 592);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
}

void ZoomCurveValue::~ZoomCurveValue(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[1]);
}

void std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,PiecewiseLinearTransform>,std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = (uint64_t *)a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          if (v8 != (uint64_t *)v9)
            std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v8 + 7, *((uint64_t **)v9 + 7), *((uint64_t **)v9 + 8), (uint64_t)(*((_QWORD *)v9 + 8) - *((_QWORD *)v9 + 7)) >> 3);
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(a1, &v18, v21 + 4);
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>((uint64_t)&v19, a1, a2 + 2);
      v14 = v19;
      v15 = (uint64_t **)std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(a1, &v18, v19 + 4);
      std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1B6238178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::__fs::filesystem::path>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1B6238328(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B62383DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0)
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

std::string *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1B623855C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&this[1], *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  return this;
}

void sub_1B623861C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B623868C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v25 = result;
      while (v6 != a3)
      {
        v26 = *v6++;
        *(_QWORD *)v25 = v26;
        v25 += 8;
      }
      v17 = (char *)(v25 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      while (v20 != a3)
      {
        v24 = *v20++;
        *(_QWORD *)v23 = v24;
        v23 += 8;
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t AUSpatialCapture::ApplyParametersToGraphAndGetDidCameraDirectionChange(AUSpatialCapture *this)
{
  _QWORD *ParameterMap;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  float Parameter;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  if (!*((_QWORD *)this + 101))
    return 0;
  ParameterMap = (_QWORD *)AUSpatialCapture::GetParameterMap(this);
  v3 = ParameterMap + 1;
  v4 = (_QWORD *)*ParameterMap;
  if ((_QWORD *)*ParameterMap == ParameterMap + 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (DSPGraph::Graph::hasParameter(*((DSPGraph::Graph **)this + 101)))
      {
        v6 = *((_DWORD *)v4 + 8);
        if (v6 != 30)
        {
          v7 = *((_QWORD *)this + 9);
          if (v7)
          {
            v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
            v6 = *((_DWORD *)v4 + 8);
          }
          else
          {
            v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v9)
              v8 = 0;
            else
              v8 = *v9;
          }
          Parameter = ausdk::AUElement::GetParameter(v8, v6);
          v11 = *((unsigned int *)v4 + 8);
          if (!(_DWORD)v11)
          {
            if (vabds_f32((*(float (**)(_QWORD))(**((_QWORD **)this + 101) + 48))(*((_QWORD *)this + 101)), Parameter) < 0.00000011921)v5 = 1;
            v11 = *((unsigned int *)v4 + 8);
          }
          (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 101) + 40))(*((_QWORD *)this + 101), v11, Parameter);
        }
      }
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v14 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != v3);
  }
  return v5 & 1;
}

id CALog::LogObjIfEnabled(id *a1)
{
  id v1;
  id v2;

  if (a1)
  {
    v1 = *a1;
  }
  else
  {
    v1 = (id)MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  return v1;
}

void AUSpatialCapture::ApplyMeterParameterUpdate(uint64_t a1, unsigned int a2, float a3)
{
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v9 = a1 + 48;
    v8 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(v9 + 8) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, a2, a3, 0);
}

uint64_t AUSpatialCapture::GetAUBox(AUSpatialCapture *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  if (!*((_QWORD *)this + 101))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = DSPGraph::Graph::box();
  v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (!v4)
      return 0;
  }
  else if (!v3)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = DSPGraph::Graph::box();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5);
  v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      return v7;
    return 0;
  }
  if (!v6)
    return 0;
  return v7;
}

void sub_1B6238A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AUSpatialCapture::LogParameterValue(AUSpatialCapture *this, uint64_t a2, float a3, const char *a4)
{
  int v6;
  unsigned int v7;
  const char *v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  id v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  const char *v17;
  id v18;
  uint32_t v19;
  id v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint64_t v33;

  v6 = (int)this;
  v33 = *MEMORY[0x1E0C80C00];
  if ((int)this > 29)
  {
    if ((_DWORD)this == 30)
      return;
    if ((_DWORD)this == 46)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v9 = *(id *)SCLogScope(void)::scope;
        if (!v9)
          return;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
        v12 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_49;
      v21 = 136316162;
      v22 = "AUSpatialCapture.mm";
      v23 = 1024;
      v24 = 1149;
      v25 = 2080;
      v26 = a2;
      v27 = 1024;
      v28 = 46;
      v29 = 2048;
      v30 = a3;
      v13 = "%25s:%-5d %s camera FOV (%u): %f";
      v14 = v9;
      v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_43;
    }
LABEL_21:
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v9 = *(id *)SCLogScope(void)::scope;
      if (!v9)
        return;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      goto LABEL_49;
    v21 = 136316162;
    v22 = "AUSpatialCapture.mm";
    v23 = 1024;
    v24 = 1153;
    v25 = 2080;
    v26 = a2;
    v27 = 1024;
    v28 = v6;
    v29 = 2048;
    v30 = a3;
    v13 = "%25s:%-5d %s param %u: val=%f";
    v14 = v9;
    v15 = OS_LOG_TYPE_DEBUG;
LABEL_43:
    v19 = 44;
LABEL_48:
    _os_log_impl(&dword_1B5ED0000, v14, v15, v13, (uint8_t *)&v21, v19);
    goto LABEL_49;
  }
  if (!(_DWORD)this)
  {
    v10 = a3;
    if (a3)
      v11 = "?";
    else
      v11 = "Front";
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v9 = *(id *)SCLogScope(void)::scope;
      if (!v9)
        return;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v22 = "AUSpatialCapture.mm";
      v17 = "Back";
      v21 = 136316418;
      v23 = 1024;
      if (v10 != 1)
        v17 = v11;
      v24 = 1132;
      v25 = 2080;
      v26 = a2;
      v27 = 1024;
      v28 = 0;
      v29 = 2080;
      v30 = *(double *)&v17;
      v31 = 2048;
      v32 = a3;
      v13 = "%25s:%-5d %s camera direction (%u): %s (%f)";
      v14 = v9;
      v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_47;
    }
LABEL_49:

    return;
  }
  if ((_DWORD)this != 1)
    goto LABEL_21;
  v7 = a3 - 1;
  if (v7 > 3)
    v8 = "?";
  else
    v8 = (&off_1E69CC158)[v7];
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (!SCLogScope(void)::scope)
  {
    v9 = MEMORY[0x1E0C81028];
    v20 = MEMORY[0x1E0C81028];
LABEL_45:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v21 = 136316418;
      v22 = "AUSpatialCapture.mm";
      v23 = 1024;
      v24 = 1140;
      v25 = 2080;
      v26 = a2;
      v27 = 1024;
      v28 = 1;
      v29 = 2080;
      v30 = *(double *)&v8;
      v31 = 2048;
      v32 = a3;
      v13 = "%25s:%-5d %s TargetUI orientation (%u): %s (%f)";
      v14 = v9;
      v15 = OS_LOG_TYPE_DEBUG;
LABEL_47:
      v19 = 54;
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  v9 = *(id *)SCLogScope(void)::scope;
  if (v9)
    goto LABEL_45;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a1, v9, v6);
  }
  v10 = (char *)a1 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t AUSpatialCapture::GetBox(AUSpatialCapture *this, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  if (!*((_QWORD *)this + 101))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "panner");
  v2 = DSPGraph::Graph::box();
  v3 = v2;
  if ((v7 & 0x80000000) == 0)
  {
    if (v2)
      goto LABEL_4;
    return 0;
  }
  operator delete(__p[0]);
  if (!v3)
    return 0;
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "panner");
  v4 = DSPGraph::Graph::box();
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1B6239034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,PiecewiseLinearTransform>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  void **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t **v10;
  void **v11;
  void **v12;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (void **)(a2 + 1);
  v5 = (void **)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD **)(a1 + 8);
      if (*(_QWORD **)a1 == v3)
      {
        v8 = v3;
        if (!v6)
          goto LABEL_14;
      }
      else
      {
        v7 = v3;
        if (v6)
        {
          do
          {
            v8 = v6;
            v6 = (_QWORD *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v7[2];
            v9 = *v8 == (_QWORD)v7;
            v7 = v8;
          }
          while (v9);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, v5 + 4) & 0x80) == 0)
        {
          v10 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v15, v5 + 4);
          goto LABEL_11;
        }
        if (!*v3)
        {
LABEL_14:
          v15 = v3;
          v10 = (uint64_t **)v3;
LABEL_15:
          std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__construct_node<std::pair<std::string const,PiecewiseLinearTransform> const&>((uint64_t)v14, a1, (__int128 *)v5 + 2);
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
          v14[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
          goto LABEL_16;
        }
      }
      v15 = v8;
      v10 = (uint64_t **)(v8 + 1);
LABEL_11:
      if (!*v10)
        goto LABEL_15;
LABEL_16:
      v11 = (void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (void **)v5[2];
          v9 = *v12 == v5;
          v5 = v12;
        }
        while (!v9);
      }
      v5 = v12;
    }
    while (v12 != v4);
  }
  return a1;
}

void sub_1B62391A4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B623921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialCapture::SetAudioChannelLayoutFromTuning(AUSpatialCapture *this, const __CFDictionary *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  char *v7;
  char *v8;
  id v9;
  uint64_t i;
  char *v11;
  char **v12;
  char **v13;
  char *v14;
  int v15;
  char *v16;
  void **v17;
  uint64_t v18;
  int *v19;
  uint64_t j;
  char **v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string *p_str;
  int64_t size;
  int v26;
  char *v27;
  int64_t v28;
  std::string *v29;
  int v30;
  std::string *v31;
  int64_t v32;
  std::string *v33;
  std::string *v34;
  int v35;
  std::string::size_type v36;
  int v37;
  int v38;
  char *v39;
  char **v40;
  BOOL v41;
  std::string::size_type v42;
  std::string *v43;
  int64_t v44;
  std::string *v45;
  int64_t v46;
  std::string *v47;
  int v48;
  std::string *v49;
  int64_t v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  int v57;
  id *v58;
  NSObject *v59;
  id v60;
  id *v61;
  id v62;
  id v63;
  NSObject *v64;
  std::string *v65;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  std::string __str;
  int v74;
  std::string v75;
  std::string v76;
  int v77;
  char **v78;
  char *v79[2];
  int v80;
  char v81[8];
  char *v82[2];
  _BYTE buf[12];
  __int16 v84;
  _BYTE v85[14];
  __int16 v86;
  _WORD v87[13];
  int v88;
  uint64_t v89;
  void *__p;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94[3];
  int v95;
  uint64_t v96[3];
  int v97;
  uint64_t v98[3];
  int v99;
  uint64_t v100[3];
  int v101;
  uint64_t v102[3];
  int v103;
  uint64_t v104[3];
  int v105;
  uint64_t v106[3];
  int v107;
  uint64_t v108[3];
  int v109;
  uint64_t v110[3];
  int v111;
  uint64_t v112[3];
  int v113;
  uint64_t v114[3];
  int v115;
  uint64_t v116[3];
  int v117;
  uint64_t v118[3];
  int v119;
  uint64_t v120[3];
  int v121;
  uint64_t v122[3];
  int v123;
  uint64_t v124[3];
  int v125;
  uint64_t v126[3];
  int v127;
  uint64_t v128[3];
  int v129;
  uint64_t v130[3];
  int v131;
  uint64_t v132[3];
  int v133;
  uint64_t v134[3];
  int v135;
  uint64_t v136[3];
  int v137;
  uint64_t v138[3];
  int v139;
  uint64_t v140[3];
  int v141;
  uint64_t v142[3];
  int v143;
  uint64_t v144[3];
  int v145;
  uint64_t v146[3];
  int v147;
  uint64_t v148[3];
  int v149;
  uint64_t v150[3];
  int v151;
  uint64_t v152[3];
  int v153;
  uint64_t v154[3];
  int v155;
  uint64_t v156[3];
  int v157;
  uint64_t v158[3];
  int v159;
  uint64_t v160[3];
  int v161;
  uint64_t v162[3];
  int v163;
  uint64_t v164[3];
  int v165;
  uint64_t v166[3];
  int v167;
  uint64_t v168[3];
  int v169;
  uint64_t v170[3];
  int v171;
  uint64_t v172[3];
  int v173;
  uint64_t v174[3];
  int v175;
  uint64_t v176[3];
  int v177;
  uint64_t v178[3];
  int v179;
  uint64_t v180[3];
  int v181;
  uint64_t v182[3];
  int v183;
  uint64_t v184[3];
  int v185;
  uint64_t v186[3];
  int v187;
  uint64_t v188[3];
  int v189;
  uint64_t v190[3];
  int v191;
  uint64_t v192[3];
  int v193;
  uint64_t v194[3];
  int v195;
  uint64_t v196[3];
  int v197;
  uint64_t v198[3];
  int v199;
  uint64_t v200[3];
  int v201;
  uint64_t v202[3];
  int v203;
  uint64_t v204[3];
  int v205;
  uint64_t v206[3];
  int v207;
  uint64_t v208[3];
  int v209;
  uint64_t v210[3];
  int v211;
  uint64_t v212[3];
  int v213;
  uint64_t v214[3];
  int v215;
  uint64_t v216[3];
  int v217;
  uint64_t v218[3];
  int v219;
  uint64_t v220[3];
  int v221;
  uint64_t v222[3];
  int v223;
  uint64_t v224[3];
  int v225;
  uint64_t v226[3];
  int v227;
  uint64_t v228[3];
  int v229;
  uint64_t v230[3];
  int v231;
  uint64_t v232[3];
  int v233;
  uint64_t v234[3];
  int v235;
  uint64_t v236[3];
  int v237;
  uint64_t v238[3];
  int v239;
  uint64_t v240[3];
  int v241;
  uint64_t v242[3];
  int v243;
  uint64_t v244[3];
  int v245;
  uint64_t v246[3];
  int v247;
  uint64_t v248[3];
  int v249;
  uint64_t v250[3];
  int v251;
  uint64_t v252[3];
  int v253;
  uint64_t v254[3];
  int v255;
  uint64_t v256[3];
  int v257;
  uint64_t v258[3];
  int v259;
  uint64_t v260[3];
  int v261;
  uint64_t v262[3];
  int v263;
  uint64_t v264[3];
  int v265;
  uint64_t v266[3];
  int v267;
  uint64_t v268[3];
  int v269;
  uint64_t v270[3];
  int v271;
  uint64_t v272[3];
  int v273;
  uint64_t v274[3];
  int v275;
  uint64_t v276[3];
  int v277;
  uint64_t v278[3];
  int v279;
  uint64_t v280[3];
  int v281;
  uint64_t v282[3];
  int v283;
  uint64_t v284[3];
  int v285;
  uint64_t v286[3];
  int v287;
  uint64_t v288[3];
  int v289;
  uint64_t v290[3];
  int v291;
  uint64_t v292[3];
  int v293;
  uint64_t v294[3];
  int v295;
  uint64_t v296[3];
  int v297;
  uint64_t v298[3];
  int v299;
  uint64_t v300[3];
  int v301;
  uint64_t v302[3];
  int v303;
  uint64_t v304[3];
  int v305;
  uint64_t v306[3];
  int v307;
  uint64_t v308[3];
  int v309;
  uint64_t v310[3];
  int v311;
  uint64_t v312[3];
  int v313;
  uint64_t v314[3];
  int v315;
  uint64_t v316[3];
  int v317;
  uint64_t v318[3];
  int v319;
  uint64_t v320[3];
  int v321;
  uint64_t v322[3];
  int v323;
  uint64_t v324[3];
  int v325;
  uint64_t v326[3];
  int v327;
  uint64_t v328[3];
  int v329;
  uint64_t v330[3];
  int v331;
  uint64_t v332[3];
  int v333;
  uint64_t v334[3];
  int v335;
  uint64_t v336[3];
  int v337;
  uint64_t v338[3];
  int v339;
  uint64_t v340[3];
  int v341;
  uint64_t v342[3];
  int v343;
  uint64_t v344[3];
  int v345;
  uint64_t v346[3];
  int v347;
  uint64_t v348[3];
  int v349;
  uint64_t v350[3];
  int v351;
  uint64_t v352[3];
  int v353;
  uint64_t v354[3];
  int v355;
  uint64_t v356[3];
  int v357;
  uint64_t v358[3];
  int v359;
  uint64_t v360[3];
  int v361;
  uint64_t v362[3];
  int v363;
  uint64_t v364[3];
  int v365;
  uint64_t v366[3];
  int v367;
  uint64_t v368[3];
  int v369;
  uint64_t v370[3];
  int v371;
  uint64_t v372[3];
  int v373;
  uint64_t v374[3];
  int v375;
  uint64_t v376[3];
  int v377;
  uint64_t v378[3];
  int v379;
  uint64_t v380[3];
  int v381;
  uint64_t v382[3];
  int v383;
  uint64_t v384[3];
  int v385;
  uint64_t v386[3];
  int v387;
  uint64_t v388[3];
  int v389;
  uint64_t v390[3];
  int v391;
  uint64_t v392[3];
  int v393;
  uint64_t v394[3];
  int v395;
  uint64_t v396[3];
  int v397;
  uint64_t v398[3];
  int v399;
  uint64_t v400[3];
  int v401;
  uint64_t v402[3];
  int v403;
  uint64_t v404[3];
  int v405;
  uint64_t v406[3];
  int v407;
  uint64_t v408[3];
  int v409;
  uint64_t v410[3];
  int v411;
  uint64_t v412[3];
  int v413;
  uint64_t v414[3];
  int v415;
  uint64_t v416[3];
  int v417;
  uint64_t v418[3];
  int v419;
  uint64_t v420[3];
  int v421;
  uint64_t v422[3];
  int v423;
  uint64_t v424[3];
  int v425;
  uint64_t v426[3];
  int v427;
  uint64_t v428[3];
  int v429;
  uint64_t v430[3];
  int v431;
  uint64_t v432[3];
  int v433;
  uint64_t v434[3];
  int v435;
  uint64_t v436[3];
  int v437;
  uint64_t v438[3];
  int v439;
  uint64_t v440[3];
  int v441;
  uint64_t v442[3];
  int v443;
  uint64_t v444[3];
  int v445;
  uint64_t v446[3];
  int v447;
  uint64_t v448[3];
  int v449;
  uint64_t v450[3];
  int v451;
  uint64_t v452[3];
  int v453;
  uint64_t v454[3];
  int v455;
  uint64_t v456[3];
  int v457;
  uint64_t v458[3];
  int v459;
  uint64_t v460[3];
  int v461;
  uint64_t v462[3];
  int v463;
  uint64_t v464[3];
  int v465;
  uint64_t v466[3];
  int v467;
  uint64_t v468[3];
  int v469;
  uint64_t v470[3];
  int v471;
  uint64_t v472[3];
  int v473;
  uint64_t v474[3];
  int v475;
  uint64_t v476[3];
  int v477;
  uint64_t v478[3];
  int v479;
  uint64_t v480[3];
  int v481;
  uint64_t v482[3];
  int v483;
  uint64_t v484[3];
  int v485;
  uint64_t v486[3];
  int v487;
  uint64_t v488[3];
  int v489;
  _QWORD v490[3];
  int v491;
  uint64_t v492;

  MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v492 = *MEMORY[0x1E0C80C00];
  v5 = v4;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("outputChannelLayout"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
  v8 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
  if (!v6)
    goto LABEL_108;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("outputChannelLayout"));
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v9, "UTF8String"));
  v67 = v9;
  std::string::basic_string[abi:ne180100]<0>(buf, "Mono");
  *(_DWORD *)&v85[10] = 6553601;
  v69 = v5;
  std::string::basic_string[abi:ne180100]<0>(&v87[1], "Stereo");
  v88 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(&v89, "StereoHeadphones");
  v91 = 6684674;
  std::string::basic_string[abi:ne180100]<0>(&v92, "MatrixStereo");
  v93 = 6750210;
  std::string::basic_string[abi:ne180100]<0>(v94, "MidSide");
  v95 = 6815746;
  std::string::basic_string[abi:ne180100]<0>(v96, "XY");
  v97 = 6881282;
  std::string::basic_string[abi:ne180100]<0>(v98, "Binaural");
  v99 = 6946818;
  std::string::basic_string[abi:ne180100]<0>(v100, "Ambisonic_B_Format");
  v101 = 7012356;
  std::string::basic_string[abi:ne180100]<0>(v102, "Quadraphonic");
  v103 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v104, "Pentagonal");
  v105 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v106, "Hexagonal");
  v107 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v108, "Octagonal");
  v109 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v110, "Cube");
  v111 = 7340040;
  std::string::basic_string[abi:ne180100]<0>(v112, "MPEG_1_0");
  v113 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v114, "MPEG_2_0");
  v115 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v116, "MPEG_3_0_A");
  v117 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v118, "MPEG_3_0_B");
  v119 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v120, "MPEG_4_0_A");
  v121 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v122, "MPEG_4_0_B");
  v123 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v124, "MPEG_5_0_A");
  v125 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v126, "MPEG_5_0_B");
  v127 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v128, "MPEG_5_0_C");
  v129 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v130, "MPEG_5_0_D");
  v131 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v132, "MPEG_5_1_A");
  v133 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v134, "MPEG_5_1_B");
  v135 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v136, "MPEG_5_1_C");
  v137 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v138, "MPEG_5_1_D");
  v139 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v140, "MPEG_6_1_A");
  v141 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v142, "MPEG_7_1_A");
  v68 = v3;
  v143 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v144, "MPEG_7_1_B");
  v145 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v146, "MPEG_7_1_C");
  v147 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v148, "Emagic_Default_7_1");
  v149 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v150, "SMPTE_DTV");
  v151 = 8519688;
  std::string::basic_string[abi:ne180100]<0>(v152, "ITU_1_0");
  v153 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v154, "ITU_2_0");
  v155 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v156, "ITU_2_1");
  v157 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v158, "ITU_2_2");
  v159 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v160, "ITU_3_0");
  v161 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v162, "ITU_3_1");
  v163 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v164, "ITU_3_2");
  v165 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v166, "ITU_3_2_1");
  v167 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v168, "ITU_3_4_1");
  v169 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v170, "DVD_0");
  v171 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v172, "DVD_1");
  v173 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v174, "DVD_2");
  v175 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v176, "DVD_3");
  v177 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v178, "DVD_4");
  v179 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v180, "DVD_5");
  v181 = 8781828;
  std::string::basic_string[abi:ne180100]<0>(v182, "DVD_6");
  v183 = 8847365;
  std::string::basic_string[abi:ne180100]<0>(v184, "DVD_7");
  v185 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v186, "DVD_8");
  v187 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v188, "DVD_9");
  v189 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v190, "DVD_10");
  v191 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v192, "DVD_11");
  v193 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v194, "DVD_12");
  v195 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v196, "DVD_13");
  v197 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v198, "DVD_14");
  v199 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v200, "DVD_15");
  v201 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v202, "DVD_16");
  v203 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v204, "DVD_17");
  v205 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v206, "DVD_18");
  v207 = 9043973;
  std::string::basic_string[abi:ne180100]<0>(v208, "DVD_19");
  v209 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v210, "DVD_20");
  v211 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v212, "AudioUnit_4");
  v213 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v214, "AudioUnit_5");
  v215 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v216, "AudioUnit_6");
  v217 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v218, "AudioUnit_8");
  v219 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v220, "AudioUnit_5_0");
  v221 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v222, "AudioUnit_6_0");
  v223 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v224, "AudioUnit_7_0");
  v225 = 9175047;
  std::string::basic_string[abi:ne180100]<0>(v226, "AudioUnit_7_0_Front");
  v227 = 9699335;
  std::string::basic_string[abi:ne180100]<0>(v228, "AudioUnit_5_1");
  v229 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v230, "AudioUnit_6_1");
  v231 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v232, "AudioUnit_7_1");
  v233 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v234, "AudioUnit_7_1_Front");
  v235 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v236, "AAC_3_0");
  v237 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v238, "AAC_Quadraphonic");
  v239 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v240, "AAC_4_0");
  v241 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v242, "AAC_5_0");
  v243 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v244, "AAC_5_1");
  v245 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v246, "AAC_6_0");
  v247 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v248, "AAC_6_1");
  v249 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v250, "AAC_7_0");
  v251 = 9371655;
  std::string::basic_string[abi:ne180100]<0>(v252, "AAC_7_1");
  v253 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v254, "AAC_7_1_B");
  v255 = 11993096;
  std::string::basic_string[abi:ne180100]<0>(v256, "AAC_7_1_C");
  v257 = 12058632;
  std::string::basic_string[abi:ne180100]<0>(v258, "AAC_Octagonal");
  v259 = 9437192;
  std::string::basic_string[abi:ne180100]<0>(v260, "TMH_10_2_std");
  v261 = 9502736;
  std::string::basic_string[abi:ne180100]<0>(v262, "TMH_10_2_full");
  v263 = 9568277;
  std::string::basic_string[abi:ne180100]<0>(v264, "AC3_1_0_1");
  v265 = 9764866;
  std::string::basic_string[abi:ne180100]<0>(v266, "AC3_3_0");
  v267 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v268, "AC3_3_1");
  v269 = 9895940;
  std::string::basic_string[abi:ne180100]<0>(v270, "AC3_3_0_1");
  v271 = 9961476;
  std::string::basic_string[abi:ne180100]<0>(v272, "AC3_2_1_1");
  v273 = 10027012;
  std::string::basic_string[abi:ne180100]<0>(v274, "AC3_3_1_1");
  v275 = 10092549;
  std::string::basic_string[abi:ne180100]<0>(v276, "EAC_6_0_A");
  v277 = 10158086;
  std::string::basic_string[abi:ne180100]<0>(v278, "EAC_7_0_A");
  v279 = 10223623;
  std::string::basic_string[abi:ne180100]<0>(v280, "EAC3_6_1_A");
  v281 = 10289159;
  std::string::basic_string[abi:ne180100]<0>(v282, "EAC3_6_1_B");
  v283 = 10354695;
  std::string::basic_string[abi:ne180100]<0>(v284, "EAC3_6_1_C");
  v285 = 10420231;
  std::string::basic_string[abi:ne180100]<0>(v286, "EAC3_7_1_A");
  v287 = 10485768;
  std::string::basic_string[abi:ne180100]<0>(v288, "EAC3_7_1_B");
  v289 = 10551304;
  std::string::basic_string[abi:ne180100]<0>(v290, "EAC3_7_1_C");
  v291 = 10616840;
  std::string::basic_string[abi:ne180100]<0>(v292, "EAC3_7_1_D");
  v293 = 10682376;
  std::string::basic_string[abi:ne180100]<0>(v294, "EAC3_7_1_E");
  v295 = 10747912;
  std::string::basic_string[abi:ne180100]<0>(v296, "EAC3_7_1_F");
  v297 = 10813448;
  std::string::basic_string[abi:ne180100]<0>(v298, "EAC3_7_1_G");
  v299 = 10878984;
  std::string::basic_string[abi:ne180100]<0>(v300, "EAC3_7_1_H");
  v301 = 10944520;
  std::string::basic_string[abi:ne180100]<0>(v302, "DTS_3_1");
  v303 = 11010052;
  std::string::basic_string[abi:ne180100]<0>(v304, "DTS_4_1");
  v305 = 11075589;
  std::string::basic_string[abi:ne180100]<0>(v306, "DTS_6_0_A");
  v307 = 11141126;
  std::string::basic_string[abi:ne180100]<0>(v308, "DTS_6_0_B");
  v309 = 11206662;
  std::string::basic_string[abi:ne180100]<0>(v310, "DTS_6_0_C");
  v311 = 11272198;
  std::string::basic_string[abi:ne180100]<0>(v312, "DTS_6_1_A");
  v313 = 11337735;
  std::string::basic_string[abi:ne180100]<0>(v314, "DTS_6_1_B");
  v315 = 11403271;
  std::string::basic_string[abi:ne180100]<0>(v316, "DTS_6_1_C");
  v317 = 11468807;
  std::string::basic_string[abi:ne180100]<0>(v318, "DTS_7_0");
  v319 = 11534343;
  std::string::basic_string[abi:ne180100]<0>(v320, "DTS_7_1");
  v321 = 11599880;
  std::string::basic_string[abi:ne180100]<0>(v322, "DTS_8_0_A");
  v323 = 11665416;
  std::string::basic_string[abi:ne180100]<0>(v324, "DTS_8_0_B");
  v325 = 11730952;
  std::string::basic_string[abi:ne180100]<0>(v326, "DTS_8_1_A");
  v327 = 11796489;
  std::string::basic_string[abi:ne180100]<0>(v328, "DTS_8_1_B");
  v329 = 11862025;
  std::string::basic_string[abi:ne180100]<0>(v330, "DTS_6_1_D");
  v331 = 11927559;
  std::string::basic_string[abi:ne180100]<0>(v332, "WAVE_2_1");
  v333 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v334, "WAVE_3_0");
  v335 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v336, "WAVE_4_0_A");
  v337 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v338, "WAVE_4_0_B");
  v339 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v340, "WAVE_5_0_A");
  v341 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v342, "WAVE_5_0_B");
  v343 = 12189701;
  std::string::basic_string[abi:ne180100]<0>(v344, "WAVE_5_1_A");
  v345 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v346, "WAVE_5_1_B");
  v347 = 12255238;
  std::string::basic_string[abi:ne180100]<0>(v348, "WAVE_6_1");
  v349 = 12320775;
  std::string::basic_string[abi:ne180100]<0>(v350, "WAVE_7_1");
  v351 = 12386312;
  std::string::basic_string[abi:ne180100]<0>(v352, "Atmos_5_1_2");
  v353 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v354, "Atmos_5_1_4");
  v355 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v356, "Atmos_7_1_2");
  v357 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v358, "Atmos_7_1_4");
  v359 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v360, "Atmos_9_1_6");
  v361 = 12648464;
  std::string::basic_string[abi:ne180100]<0>(v362, "Logic_Mono");
  v363 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v364, "Logic_Stereo");
  v365 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v366, "Logic_Quadraphonic");
  v367 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v368, "Logic_4_0_A");
  v369 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v370, "Logic_4_0_B");
  v371 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v372, "Logic_4_0_C");
  v373 = 12910596;
  std::string::basic_string[abi:ne180100]<0>(v374, "Logic_5_0_A");
  v375 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v376, "Logic_5_0_B");
  v377 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v378, "Logic_5_0_C");
  v379 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v380, "Logic_5_0_D");
  v381 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v382, "Logic_5_1_A");
  v383 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v384, "Logic_5_1_B");
  v385 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v386, "Logic_5_1_C");
  v387 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v388, "Logic_5_1_D");
  v389 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v390, "Logic_6_0_A");
  v391 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v392, "Logic_6_0_B");
  v393 = 12976134;
  std::string::basic_string[abi:ne180100]<0>(v394, "Logic_6_0_C");
  v395 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v396, "Logic_6_1_A");
  v397 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v398, "Logic_6_1_B");
  v399 = 13041671;
  std::string::basic_string[abi:ne180100]<0>(v400, "Logic_6_1_C");
  v401 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v402, "Logic_6_1_D");
  v403 = 13107207;
  std::string::basic_string[abi:ne180100]<0>(v404, "Logic_7_1_A");
  v405 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v406, "Logic_7_1_B");
  v407 = 13172744;
  std::string::basic_string[abi:ne180100]<0>(v408, "Logic_7_1_C");
  v409 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v410, "Logic_7_1_SDDS_A");
  v411 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v412, "Logic_7_1_SDDS_B");
  v413 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v414, "Logic_7_1_SDDS_C");
  v415 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v416, "Logic_Atmos_5_1_2");
  v417 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v418, "Logic_Atmos_5_1_4");
  v419 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v420, "Logic_Atmos_7_1_2");
  v7 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
  v421 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v422, "Logic_Atmos_7_1_4_A");
  v423 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v424, "Logic_Atmos_7_1_4_B");
  v8 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
  v425 = 13238284;
  std::string::basic_string[abi:ne180100]<0>(v426, "Logic_Atmos_7_1_6");
  v427 = 13303822;
  std::string::basic_string[abi:ne180100]<0>(v428, "CICP_1");
  v429 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v430, "CICP_2");
  v431 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v432, "CICP_3");
  v433 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v434, "CICP_4");
  v435 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v436, "CICP_5");
  v437 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v438, "CICP_6");
  v439 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v440, "CICP_7");
  v441 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v442, "CICP_9");
  v443 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v444, "CICP_10");
  v445 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v446, "CICP_11");
  v447 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v448, "CICP_12");
  v449 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v450, "CICP_13");
  v451 = 13369368;
  std::string::basic_string[abi:ne180100]<0>(v452, "CICP_14");
  v453 = 13434888;
  std::string::basic_string[abi:ne180100]<0>(v454, "CICP_15");
  v455 = 13500428;
  std::string::basic_string[abi:ne180100]<0>(v456, "CICP_16");
  v457 = 13565962;
  std::string::basic_string[abi:ne180100]<0>(v458, "CICP_17");
  v459 = 13631500;
  std::string::basic_string[abi:ne180100]<0>(v460, "CICP_18");
  v461 = 13697038;
  std::string::basic_string[abi:ne180100]<0>(v462, "CICP_19");
  v463 = 13762572;
  std::string::basic_string[abi:ne180100]<0>(v464, "CICP_20");
  v465 = 13828110;
  std::string::basic_string[abi:ne180100]<0>(v466, "Ogg_3_0");
  v467 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v468, "Ogg_4_0");
  v469 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v470, "Ogg_5_0");
  v471 = 13893637;
  std::string::basic_string[abi:ne180100]<0>(v472, "Ogg_5_1");
  v473 = 13959174;
  std::string::basic_string[abi:ne180100]<0>(v474, "Ogg_6_1");
  v475 = 14024711;
  std::string::basic_string[abi:ne180100]<0>(v476, "Ogg_7_1");
  v477 = 14090248;
  std::string::basic_string[abi:ne180100]<0>(v478, "MPEG_5_0_E");
  v479 = 14155781;
  std::string::basic_string[abi:ne180100]<0>(v480, "MPEG_5_1_E");
  v481 = 14221318;
  std::string::basic_string[abi:ne180100]<0>(v482, "MPEG_6_1_B");
  v483 = 14286855;
  std::string::basic_string[abi:ne180100]<0>(v484, "MPEG_7_1_D");
  v485 = 14352392;
  std::string::basic_string[abi:ne180100]<0>(v486, "BeginReserved");
  v487 = -268435456;
  std::string::basic_string[abi:ne180100]<0>(v488, "EndReserved");
  v489 = -65537;
  std::string::basic_string[abi:ne180100]<0>(v490, "Unknown");
  v491 = -65536;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)v81, (__int128 *)buf, 203);
  for (i = 0; i != -812; i -= 4)
  {
    if (SHIBYTE(v490[i + 2]) < 0)
      operator delete((void *)v490[i]);
  }
  v80 = -65536;
  v11 = v82[0];
  if (v82[0])
  {
    v12 = v82;
    do
    {
      v13 = v12;
      v14 = v11 + 32;
      v15 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v11 + 4, (void **)&__str.__r_.__value_.__l.__data_);
      if (v15 >= 0)
        v16 = v11;
      else
        v16 = v11 + 8;
      if (v15 >= 0)
        v12 = (char **)v11;
      else
        v12 = v13;
      v11 = *(char **)v16;
    }
    while (*(_QWORD *)v16);
    if (v12 != v82)
    {
      v17 = v15 >= 0 ? (void **)v14 : (void **)(v13 + 4);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, v17) & 0x80) == 0)
      {
        v18 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v81, buf, (void **)&__str.__r_.__value_.__l.__data_);
        if (!v18)
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        v19 = (int *)(v18 + 56);
        v3 = v68;
        goto LABEL_105;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "HOA_ACN_SN3D");
  *(_DWORD *)&v85[10] = 12451840;
  std::string::basic_string[abi:ne180100]<0>(&v87[1], "HOA_ACN_N3D");
  v88 = 12517376;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)&v78, (__int128 *)buf, 2);
  for (j = 0; j != -32; j -= 16)
  {
    if (SHIBYTE(v87[j + 12]) < 0)
      operator delete(*(void **)&v87[j + 1]);
  }
  v21 = v78;
  if (v78 == v79)
  {
    v72 = -65536;
  }
  else
  {
    v22 = *MEMORY[0x1E0DE4F58];
    v71 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v70 = MEMORY[0x1E0DE4FB8] + 16;
    v72 = -65536;
    do
    {
      v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      v26 = *((char *)v21 + 55);
      if (v26 >= 0)
        v27 = (char *)(v21 + 4);
      else
        v27 = v21[4];
      if (v26 >= 0)
        v28 = *((unsigned __int8 *)v21 + 55);
      else
        v28 = (int64_t)v21[5];
      if (v28)
      {
        if (size >= v28)
        {
          v29 = (std::string *)((char *)p_str + size);
          v30 = *v27;
          v31 = p_str;
          do
          {
            v32 = size - v28;
            if (v32 == -1)
              break;
            v33 = (std::string *)memchr(v31, v30, v32 + 1);
            if (!v33)
              break;
            v34 = v33;
            if (!memcmp(v33, v27, v28))
            {
              if (v34 == v29 || v34 != p_str)
                break;
              goto LABEL_50;
            }
            v31 = (std::string *)((char *)&v34->__r_.__value_.__l.__data_ + 1);
            size = (char *)v29 - ((char *)&v34->__r_.__value_.__l.__data_ + 1);
          }
          while (size >= v28);
        }
      }
      else
      {
LABEL_50:
        v35 = *((_DWORD *)v21 + 14);
        v80 = v35;
        if ((v23 & 0x80u) == 0)
          v36 = v23;
        else
          v36 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string(&v76, &__str, v28, v36, (std::allocator<char> *)buf);
        LODWORD(v75.__r_.__value_.__l.__data_) = 0;
        std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &v76);
        MEMORY[0x1BCC957B8](buf, &v75);
        v37 = *(_DWORD *)((char *)&v87[1] + *(_QWORD *)(*(_QWORD *)buf - 24));
        *(_QWORD *)buf = v22;
        *(_QWORD *)&buf[*(_QWORD *)(v22 - 24)] = v71;
        *(_QWORD *)&v85[2] = v70;
        if (SHIBYTE(v92) < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1BCC95BE4](&v93);
        v38 = ((LODWORD(v75.__r_.__value_.__l.__data_) + 1) * (LODWORD(v75.__r_.__value_.__l.__data_) + 1)) | v35;
        if ((v37 & 5) != 0)
          v38 = -65536;
        v72 = v38;
        v80 = v38;
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
      }
      v39 = v21[1];
      if (v39)
      {
        do
        {
          v40 = (char **)v39;
          v39 = *(char **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (char **)v21[2];
          v41 = *v40 == (char *)v21;
          v21 = v40;
        }
        while (!v41);
      }
      v21 = v40;
    }
    while (v40 != v79);
  }
  std::string::basic_string[abi:ne180100]<0>(&v76, "DiscreteInOrder");
  v77 = 9633792;
  v42 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &__str;
  else
    v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v44 = __str.__r_.__value_.__l.__size_;
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v76;
  else
    v45 = (std::string *)v76.__r_.__value_.__r.__words[0];
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  else
    v46 = v76.__r_.__value_.__l.__size_;
  v3 = v68;
  v8 = (char *)&xmmword_1EF135FF8 + 8;
  v7 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
  if (!v46)
    goto LABEL_90;
  if (v44 >= v46)
  {
    v47 = (std::string *)((char *)v43 + v44);
    v48 = v45->__r_.__value_.__s.__data_[0];
    v49 = v43;
    while (1)
    {
      v50 = v44 - v46;
      if (v50 == -1)
      {
LABEL_86:
        v3 = v68;
        v7 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
        goto LABEL_97;
      }
      v51 = (std::string *)memchr(v49, v48, v50 + 1);
      if (!v51)
      {
        v3 = v68;
        v7 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
        goto LABEL_97;
      }
      v52 = v51;
      if (!memcmp(v51, v45, v46))
        break;
      v49 = (std::string *)((char *)&v52->__r_.__value_.__l.__data_ + 1);
      v44 = (char *)v47 - ((char *)&v52->__r_.__value_.__l.__data_ + 1);
      if (v44 < v46)
        goto LABEL_86;
    }
    v7 = (char *)&xmmword_1EF135FF8 + 8;
    if (v52 == v47)
    {
      v3 = v68;
    }
    else
    {
      v3 = v68;
      if (v52 == v43)
      {
LABEL_90:
        v80 = 9633792;
        if ((v42 & 0x80u) == 0)
          v53 = v42;
        else
          v53 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string(&v75, &__str, v46, v53, (std::allocator<char> *)buf);
        v74 = 0;
        std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &v75);
        v54 = (_QWORD *)MEMORY[0x1E0DE4F58];
        MEMORY[0x1BCC957B8](buf, &v74);
        *(_QWORD *)buf = *v54;
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v54[3];
        *(_QWORD *)&v85[2] = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v92) < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1BCC95BE4](&v93);
        v72 = v74 | 0x930000;
        v80 = v74 | 0x930000;
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_97:
  v5 = v69;
  if (v72 == -65536)
  {
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)buf, &__str);
    v55 = (_QWORD *)MEMORY[0x1E0DE4F58];
    MEMORY[0x1BCC957B8](buf, &v80);
    v56 = *(_DWORD *)((_BYTE *)&v87[1] + *(_QWORD *)(*(_QWORD *)buf - 24)) & 5;
    *(_QWORD *)buf = *v55;
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v55[3];
    *(_QWORD *)&v85[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v92) < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1BCC95BE4](&v93);
    if (v56)
      v80 = -65536;
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v79[0]);
  v19 = &v80;
LABEL_105:
  v57 = *v19;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v82[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

  if (v57 == -65536)
  {
LABEL_108:
    if (*((_QWORD *)v7 + 358) != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    v58 = (id *)*((_QWORD *)v8 + 359);
    if (v58)
    {
      v59 = *v58;
      if (!v59)
      {
LABEL_117:
        v57 = 6946818;
        goto LABEL_118;
      }
    }
    else
    {
      v59 = MEMORY[0x1E0C81028];
      v60 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SpatialCapture.mm";
      v84 = 1024;
      *(_DWORD *)v85 = 575;
      _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Plist has unknown outputChannelLayout. Using Binaural by default", buf, 0x12u);
    }

    goto LABEL_117;
  }
LABEL_118:

  if (*((_QWORD *)v7 + 358) != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  v61 = (id *)*((_QWORD *)v8 + 359);
  if (v61)
  {
    v62 = *v61;
    if (!v62)
      goto LABEL_131;
  }
  else
  {
    v62 = (id)MEMORY[0x1E0C81028];
    v63 = MEMORY[0x1E0C81028];
  }
  v64 = v62;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
  {
    GetStringFromAudioChannelLayoutTag(&v76, v57);
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v76;
    else
      v65 = (std::string *)v76.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUSpatialCapture.mm";
    v84 = 1024;
    *(_DWORD *)v85 = 238;
    *(_WORD *)&v85[4] = 2080;
    *(_QWORD *)&v85[6] = v65;
    v86 = 1024;
    *(_DWORD *)v87 = v57;
    _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loaded output channel layout %s (%u) from tuning plist ", buf, 0x22u);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
  }

LABEL_131:
  *(_DWORD *)&buf[4] = 0;
  *(_DWORD *)&buf[8] = 0;
  *(_DWORD *)buf = v57;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v3 + 536))(v3, 2, 0, buf);
}

void sub_1B623B558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a44);
  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B623BA4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSpatialCapture::AddParameterToMap(uint64_t **a1, unsigned int a2, unsigned int a3, int a4, const __CFString *a5, uint64_t a6, int a7, char **a8, float a9, float a10, float a11)
{
  char *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  char **v35;
  char **v36;
  unsigned int v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  unint64_t v44;
  uint64_t *v45;
  void **v47[2];
  char v48;
  char buffer[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  bzero(buffer, 0x98uLL);
  *(_QWORD *)&v54 = __PAIR64__(LODWORD(a9), a3);
  *((_QWORD *)&v54 + 1) = __PAIR64__(LODWORD(a11), LODWORD(a10));
  LODWORD(v55) = a4;
  if (&v56 != (__int128 *)a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v56, *(std::string **)a6, *(__int128 **)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3));
  if ((char **)((char *)&v57 + 8) != a8)
  {
    v21 = *a8;
    v22 = a8[1];
    v23 = v22 - *a8;
    v24 = v23 >> 2;
    v25 = *((_QWORD *)&v58 + 1);
    v26 = (char *)*((_QWORD *)&v57 + 1);
    if (v23 >> 2 <= (unint64_t)((uint64_t)(*((_QWORD *)&v58 + 1) - *((_QWORD *)&v57 + 1)) >> 2))
    {
      v30 = (uint64_t)(v58 - *((_QWORD *)&v57 + 1)) >> 2;
      if (v30 < v24)
      {
        v31 = &v21[4 * v30];
        if ((_QWORD)v58 != *((_QWORD *)&v57 + 1))
        {
          memmove(*((void **)&v57 + 1), v21, v58 - *((_QWORD *)&v57 + 1));
          v26 = (char *)v58;
        }
        v23 = v22 - v31;
        if (v22 == v31)
          goto LABEL_23;
        v32 = v26;
        v33 = v31;
        goto LABEL_22;
      }
    }
    else
    {
      if (*((_QWORD *)&v57 + 1))
      {
        *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
        operator delete(*((void **)&v57 + 1));
        v25 = 0;
        *((_QWORD *)&v57 + 1) = 0;
        v58 = 0uLL;
      }
      if (v23 < 0)
        goto LABEL_37;
      v27 = v25 >> 1;
      if (v25 >> 1 <= v24)
        v27 = v23 >> 2;
      v28 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v27;
      if (v28 >> 62)
LABEL_37:
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28);
      *((_QWORD *)&v57 + 1) = v26;
      *(_QWORD *)&v58 = v26;
      *((_QWORD *)&v58 + 1) = &v26[4 * v29];
    }
    if (v22 == v21)
    {
LABEL_23:
      *(_QWORD *)&v58 = &v26[v23];
      goto LABEL_24;
    }
    v32 = v26;
    v33 = v21;
LABEL_22:
    memmove(v32, v33, v23);
    goto LABEL_23;
  }
LABEL_24:
  *((_QWORD *)&v53 + 1) = a5;
  LODWORD(v55) = v55 | 0x8000000;
  CFStringGetCString(a5, buffer, 52, 0x8000100u);
  LODWORD(v53) = a7;
  LODWORD(v55) = v55 | 0x100000;
  v34 = (char *)a1[1];
  v35 = (char **)(a1 + 1);
  v36 = (char **)(a1 + 1);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        v36 = (char **)v34;
        v37 = *((_DWORD *)v34 + 8);
        if (v37 <= a2)
          break;
        v34 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_31;
      }
      if (v37 >= a2)
        break;
      v34 = v36[1];
      if (!v34)
      {
        v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v38 = (char *)operator new(0xC0uLL);
    v39 = v51;
    *(_OWORD *)(v38 + 88) = v52;
    v40 = v54;
    *(_OWORD *)(v38 + 104) = v53;
    *(_OWORD *)(v38 + 120) = v40;
    v41 = v50;
    *(_OWORD *)(v38 + 40) = *(_OWORD *)buffer;
    *(_OWORD *)(v38 + 56) = v41;
    v47[0] = (void **)v38;
    v47[1] = (void **)(a1 + 1);
    *((_DWORD *)v38 + 8) = a2;
    v42 = (__int128 *)v56;
    *((_QWORD *)v38 + 17) = v55;
    *(_OWORD *)(v38 + 72) = v39;
    *((_QWORD *)v38 + 18) = 0;
    *((_QWORD *)v38 + 19) = 0;
    v43 = (__int128 *)*((_QWORD *)&v56 + 1);
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v56 + 1) - (_QWORD)v42) >> 3);
    *((_QWORD *)v38 + 20) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v38 + 6, v42, v43, v44);
    *((_QWORD *)v38 + 21) = 0;
    *((_QWORD *)v38 + 22) = 0;
    *((_QWORD *)v38 + 23) = 0;
    std::vector<SCRenderModes>::__init_with_size[abi:ne180100]<SCRenderModes*,SCRenderModes*>((_QWORD *)v38 + 21, *((const void **)&v57 + 1), v58, (uint64_t)(v58 - *((_QWORD *)&v57 + 1)) >> 2);
    v48 = 1;
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    *((_QWORD *)v38 + 2) = v36;
    *v35 = v38;
    v45 = (uint64_t *)**a1;
    if (v45)
    {
      *a1 = v45;
      v38 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v38);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v47[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v47);
  }
  if (*((_QWORD *)&v57 + 1))
  {
    *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
    operator delete(*((void **)&v57 + 1));
  }
  v47[0] = (void **)&v56;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](v47);
}

void sub_1B623BEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void **);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  SpatialCaptureParameterInfo::~SpatialCaptureParameterInfo((SpatialCaptureParameterInfo *)va2);
  _Unwind_Resume(a1);
}

void SpatialCaptureParameterInfo::~SpatialCaptureParameterInfo(SpatialCaptureParameterInfo *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 104);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SpatialCaptureParameterInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SpatialCaptureParameterInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t dft_v3::dftInit2(uint64_t a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8, int a9)
{
  _OWORD *v16;
  _OWORD *v17;
  int v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  uint64_t result;
  _DWORD *v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v34;
  int v35;
  int v36;
  const char *v37;
  std::bad_alloc *exception;
  std::bad_alloc *v39;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v16 = malloc_type_malloc(0x80uLL, 0x2C8E6D5CuLL);
  if (!v16)
  {
LABEL_44:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v39 = std::bad_alloc::bad_alloc(exception);
  }
  v17 = v16;
  v16[7] = 0u;
  *(_OWORD *)((char *)v16 + 100) = 0u;
  *(_OWORD *)((char *)v16 + 84) = 0u;
  *(_OWORD *)((char *)v16 + 68) = 0u;
  *(_OWORD *)((char *)v16 + 52) = 0u;
  *(_OWORD *)((char *)v16 + 36) = 0u;
  *(_OWORD *)((char *)v16 + 20) = 0u;
  *(_OWORD *)((char *)v16 + 4) = 0u;
  *(_QWORD *)a1 = v16;
  v18 = 2 * a3;
  v19 = a3 + 1;
  *(_DWORD *)v16 = 2 * a3;
  if (a8)
    v20 = a4 + 1;
  else
    v20 = a4;
  *((_DWORD *)v16 + 11) = a4;
  *((_DWORD *)v16 + 12) = v20;
  *((_DWORD *)v16 + 4) = a3;
  *((_DWORD *)v16 + 7) = a3;
  v21 = (float)a3;
  *((float *)v16 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v16 + 16) = a5;
  if (a6 && (v22 = (int)(float)((float)(int)a5 / 5000.0), *((_DWORD *)v16 + 17) = v22, v22 > 0))
  {
    if (v22 < 7)
      goto LABEL_11;
    v23 = 6;
  }
  else
  {
    v23 = 1;
  }
  *((_DWORD *)v16 + 17) = v23;
LABEL_11:
  v24 = 0.0;
  v25 = v21 / (float)a5;
  if (a5)
    v24 = v25 * 1000.0;
  else
    v25 = 0.0;
  *((float *)v16 + 5) = v25;
  *((float *)v16 + 6) = v24;
  *((_DWORD *)v16 + 9) = a3 >> 1;
  *((_DWORD *)v16 + 10) = v19;
  *((_DWORD *)v16 + 13) = a4 * a3;
  *((_DWORD *)v16 + 14) = v20 * v19;
  *((_DWORD *)v16 + 15) = v20 * a3;
  *((_DWORD *)v16 + 23) = 0;
  v26 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v21);
  *((_DWORD *)v17 + 19) = v18;
  *((_DWORD *)v17 + 20) = 1065353216;
  *((float *)v17 + 21) = 1.0 / (float)v18;
  *((float *)v17 + 22) = v26;
  *((_DWORD *)v17 + 24) = a7;
  *((_DWORD *)v17 + 25) = a8;
  *((_DWORD *)v17 + 18) = a4 * a3 + v18;
  result = MultiRadixRealFFT_Create(2 * a3, (MultiRadixRealFFT **)v17 + 1);
  if (a3 >= 2049)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v42 = "dft_v3.cpp";
      v43 = 1024;
      v44 = 193;
      v37 = "%25s:%-5d ASSERTION FAILURE [(!(fftSize > 1024 * 4)) != 0 is false]: ";
LABEL_42:
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, v37, buf, 0x12u);
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (a4 >= 65)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v42 = "dft_v3.cpp";
      v43 = 1024;
      v44 = 195;
      v37 = "%25s:%-5d ASSERTION FAILURE [(!(nDftBuffers > 64)) != 0 is false]: ";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (a5 <= 0x2EE0)
  {
    v28 = *(_DWORD **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 104) = v19;
LABEL_21:
    v28[27] = v19;
LABEL_22:
    v28[28] = v19;
    goto LABEL_23;
  }
  v29 = (float)v19 / (float)a5;
  v30 = (int)(float)(roundf(v29 * 8000.0) + 1.0);
  if (v19 < v30)
    v30 = a3 + 1;
  *(_DWORD *)(*(_QWORD *)a1 + 104) = v30;
  v28 = *(_DWORD **)a1;
  if (a5 <= 0x4E20)
    goto LABEL_21;
  v35 = (int)(float)((float)((float)v19 * roundf(v29 * 16000.0)) + 1.0);
  if (v19 < v35)
    v35 = a3 + 1;
  v28[27] = v35;
  v28 = *(_DWORD **)a1;
  if (a5 <= 0x5DC0)
    goto LABEL_22;
  v36 = (int)(float)(roundf(v29 * 24000.0) + 1.0);
  if (v19 < v36)
    v36 = a3 + 1;
  v28[28] = v36;
  v28 = *(_DWORD **)a1;
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 112);
LABEL_23:
  v28[29] = 1;
  v31 = v28[26];
  if (v31 < v19)
  {
    v32 = v28[27];
    if (v32 < v19 && v31 < v32)
      v34 = 3;
    else
      v34 = 2;
    v28[29] = v34;
  }
  v28[30] = a9;
  return result;
}

void dft_v3::dftRemove(void **a1)
{
  if (*a1)
  {
    MultiRadixFFT_Dispose(*((_QWORD *)*a1 + 1));
    if (*a1)
    {
      free(*a1);
      *a1 = 0;
    }
  }
}

signed int *dft_v3::GetIndexSequence(signed int *this, int *a2, int a3, signed int a4)
{
  unsigned int v4;
  signed int v5;
  uint64_t i;

  if (a4 <= 1)
    v4 = 1;
  else
    v4 = a4;
  v5 = (_DWORD)a2
     + a4
     + a4
     * (((((_DWORD)a2 - a3 + 1) & ~(((int)a2 - a3 + 1) >> 31))
       - ((_DWORD)a2
        - a3
        + 1)
       + (((int)a2 - a3 + 1) >> 31))
      / v4
      + (((_DWORD)a2 - a3 + 1) >> 31))
     - a3
     + 1;
  do
    v5 -= a4;
  while (v5 >= a4);
  *this = v5;
  if (a3 >= 2)
  {
    for (i = 1; i != a3; this[i++] = v5)
    {
      v5 += 1
          + a4
          + a4
          * ((~v5 + ((v5 + 1) >> 31) + ((v5 + 1) & ~((v5 + 1) >> 31))) / v4
           + ((v5 + 1) >> 31));
      do
        v5 -= a4;
      while (v5 >= a4);
    }
  }
  return this;
}

void dft_v3::dftGenericAnalysis2ndHalf(const DSPComplex *a1, float *__C, float *a3, uint64_t a4, int a5)
{
  int v9;
  vDSP_Length v10;
  uint64_t v11;
  float v12;
  MultiRadixRealFFT *v13;
  DSPSplitComplex v14;

  v9 = *(_DWORD *)(a4 + 36);
  v10 = v9;
  if (a5)
    v11 = *(unsigned int *)(a4 + 36);
  else
    v11 = 0;
  vDSP_vclr(__C, 1, 2 * v9);
  vDSP_vclr(a3, 1, 2 * v10);
  v14.realp = &__C[v11];
  v14.imagp = &a3[v11];
  vDSP_ctoz(a1, 2, &v14, 1, v10);
  v14.realp = __C;
  v14.imagp = a3;
  v13 = *(MultiRadixRealFFT **)(a4 + 8);
  if (v13)
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  vDSP_vsmul(__C, 1, (const float *)(a4 + 84), __C, 1, *(int *)(a4 + 16));
  vDSP_vsmul(a3, 1, (const float *)(a4 + 84), a3, 1, *(int *)(a4 + 16));
}

void dft_v3::dftGenericAnalysis2ndHalf_dsc(const void *a1, const void *a2, float *__C, float *a4, int *a5)
{
  int v10;
  vDSP_Length v11;
  float v12;
  MultiRadixRealFFT *v13;
  DSPSplitComplex v14;

  v10 = *a5 >> 2;
  v11 = (uint64_t)*a5 >> 2;
  vDSP_vclr(__C, 1, v11);
  vDSP_vclr(a4, 1, v11);
  memcpy(&__C[v10], a1, 4 * v10);
  memcpy(&a4[v10], a2, 4 * v10);
  v14.realp = __C;
  v14.imagp = a4;
  v13 = (MultiRadixRealFFT *)*((_QWORD *)a5 + 1);
  if (v13)
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  vDSP_vsmul(__C, 1, (const float *)a5 + 21, __C, 1, (uint64_t)*a5 >> 1);
  vDSP_vsmul(a4, 1, (const float *)a5 + 21, a4, 1, (uint64_t)*a5 >> 1);
}

void dft_v3::dftSynthesis(float *__C, float *a2, uint64_t a3)
{
  float v4;
  MultiRadixRealFFT *v6;
  float __B;
  DSPSplitComplex v8;

  v4 = *(float *)(a3 + 80);
  __B = v4;
  v8.realp = __C;
  v8.imagp = a2;
  if (v4 != 1.0)
  {
    vDSP_vsmul(__C, 1, &__B, __C, 1, *(int *)(a3 + 16));
    vDSP_vsmul(a2, 1, &__B, a2, 1, *(int *)(a3 + 16));
  }
  v6 = *(MultiRadixRealFFT **)(a3 + 8);
  if (v6)
    MultiRadixRealFFT::RealInPlaceTransform(v6, &v8, -1, v4);
}

void AUNFNSwitch::~AUNFNSwitch(AUNFNSwitch *this)
{
  AUNFNSwitch::~AUNFNSwitch(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  VPTimeFreqConverter *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_1E69CBDE8;
  v2 = (_QWORD *)*((_QWORD *)this + 69);
  if (v2)
  {
    v4 = v2[4];
    v3 = v2[5];
    if (v3 != v4)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = *(VPTimeFreqConverter **)(v4 + 8 * v5);
        if (v7)
        {
          VPTimeFreqConverter::~VPTimeFreqConverter(v7);
          MEMORY[0x1BCC95CEC]();
          *(_QWORD *)(v2[4] + 8 * v5) = 0;
          v4 = v2[4];
          v3 = v2[5];
        }
        v5 = v6++;
      }
      while (v5 < (v3 - v4) >> 3);
    }
    v8 = (void *)v2[25];
    if (v8)
    {
      v2[26] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[22];
    if (v9)
    {
      v2[23] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[4];
    if (v10)
    {
      v2[5] = v10;
      operator delete(v10);
    }
    MEMORY[0x1BCC95CEC](v2, 0x1080C40FD18A842);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUNFNSwitch::Initialize(AUNFNSwitch *this)
{
  unsigned int v2;
  ausdk::AUScope *v3;
  unsigned int v4;
  char i;
  char v6;
  uint64_t Element;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v2 = 0;
  v3 = (AUNFNSwitch *)((char *)this + 80);
  while (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, v2) + 108) == 2)
  {
    if (++v2 == 3)
    {
      v4 = 0;
      for (i = 1; ; i = 0)
      {
        v6 = i;
        Element = ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), v4);
        if (*(_DWORD *)(Element + 108) != 1)
          break;
        v4 = 1;
        if ((v6 & 1) == 0)
        {
          v8 = *((_QWORD *)this + 69);
          v9 = *((_DWORD *)this + 84);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(Element + 80);
          *(_DWORD *)(v8 + 16) = v9;
          v16 = 0;
          std::vector<void *>::assign(v8 + 32, 5uLL, &v16);
          v10 = *(_QWORD *)(v8 + 32);
          if (*(_QWORD *)(v8 + 40) != v10)
          {
            v11 = 0;
            v12 = 1;
            do
            {
              VPTimeFreqConverter_Create(0, *(_DWORD *)(v8 + 16), (VPTimeFreqConverter **)(v10 + 8 * v11));
              v11 = v12;
              v10 = *(_QWORD *)(v8 + 32);
              ++v12;
            }
            while (v11 < (*(_QWORD *)(v8 + 40) - v10) >> 3);
          }
          v13 = (2 * *(_DWORD *)(v8 + 16));
          LODWORD(v16) = 0;
          std::vector<float>::assign((char **)(v8 + 176), v13, &v16);
          v14 = *(unsigned int *)(v8 + 16);
          LODWORD(v16) = 0;
          std::vector<float>::assign((char **)(v8 + 200), v14, &v16);
          *(_BYTE *)v8 = 1;
          (*(void (**)(AUNFNSwitch *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          return 0;
        }
      }
      return 4294956421;
    }
  }
  return 4294956421;
}

uint64_t AUNFNSwitch::Reset(AUNFNSwitch *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  VPTimeFreqConverter *v6;

  v1 = *((_QWORD *)this + 69);
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 20) = 0;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(VPTimeFreqConverter **)(v3 + 8 * v4);
      if (v6)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v6);
        MEMORY[0x1BCC95CEC]();
        VPTimeFreqConverter_Create(0, *(_DWORD *)(v1 + 16), (VPTimeFreqConverter **)(*(_QWORD *)(v1 + 32) + 8 * v4));
        v3 = *(_QWORD *)(v1 + 32);
        v2 = *(_QWORD *)(v1 + 40);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  return 0;
}

uint64_t AUNFNSwitch::GetPropertyInfo(AUNFNSwitch *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNFNSwitch::GetProperty(AUNFNSwitch *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 544;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUNFNSwitch::SetProperty(AUNFNSwitch *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5)
        return 0;
      else
        return 4294956445;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_BYTE *)this + 544) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUNFNSwitch::SetParameter(AUNFNSwitch *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  v11 = 528;
  if (a2 - 20 < 0xA)
    v11 = 536;
  ++*(_DWORD *)((char *)this + v11);
  return result;
}

uint64_t AUNFNSwitch::CanScheduleParameters(AUNFNSwitch *this)
{
  return 0;
}

uint64_t AUNFNSwitch::ProcessMultipleBufferLists(AUNFNSwitch *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  float v72;
  float v73;
  BOOL v74;
  __n128 v75;
  float v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  float v83;
  float v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  float v91;
  float v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  int v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  const AudioBufferList *v138;
  const AudioBufferList *v139;
  uint64_t v140;
  AudioBufferList *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  float v170;
  uint64_t v171;
  ausdk::AUElement *v172;
  ausdk::AUElement **v173;
  uint64_t v174;
  ausdk::AUElement *v175;
  ausdk::AUElement **v176;
  uint64_t v177;
  ausdk::AUElement *v178;
  ausdk::AUElement **v179;
  uint64_t v180;
  ausdk::AUElement *v181;
  ausdk::AUElement **v182;
  uint64_t v183;
  ausdk::AUElement *v184;
  ausdk::AUElement **v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  ausdk::AUElement **v188;
  uint64_t v189;
  ausdk::AUElement *v190;
  ausdk::AUElement **v191;
  uint64_t v192;
  ausdk::AUElement *v193;
  ausdk::AUElement **v194;

  v11 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) == v11)
    goto LABEL_160;
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *((float *)this + 140) = ausdk::AUElement::GetParameter(v13, 0);
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  *((float *)this + 141) = ausdk::AUElement::GetParameter(v16, 1u);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  *((float *)this + 142) = ausdk::AUElement::GetParameter(v19, 2u);
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v22, 3u);
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v25, 4u);
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v28, 5u);
  v30 = *((_QWORD *)this + 9);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v31, 6u);
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v34, 7u);
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v37, 8u);
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v40, 9u);
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v43, 0xAu);
  v45 = *((_QWORD *)this + 9);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v46, 0xBu);
  v48 = *((_QWORD *)this + 9);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v49, 0xCu);
  v51 = *((_QWORD *)this + 9);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v52, 0xDu);
  v54 = *((_QWORD *)this + 9);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v55, 0xEu);
  v57 = *((_QWORD *)this + 9);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  *((float *)this + 155) = ausdk::AUElement::GetParameter(v58, 0xFu);
  v60 = *((_QWORD *)this + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  *((_BYTE *)this + 624) = ausdk::AUElement::GetParameter(v61, 0x10u) != 0.0;
  v63 = *((_QWORD *)this + 9);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  *((_DWORD *)this + 157) = ausdk::AUElement::GetParameter(v64, 0x11u);
  v66 = *((_QWORD *)this + 9);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  *((_DWORD *)this + 158) = ausdk::AUElement::GetParameter(v67, 0x12u);
  v69 = *((_QWORD *)this + 9);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  *((_DWORD *)this + 159) = ausdk::AUElement::GetParameter(v70, 0x13u);
  v75.n128_u64[0] = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 80), 0) + 80);
  v75.n128_f32[0] = v75.n128_f64[0];
  v72 = *((float *)this + 144);
  v73 = v75.n128_f32[0] * 0.5;
  v74 = v72 <= (float)(v75.n128_f32[0] * 0.5);
  v75.n128_f32[0] = v72;
  if (!v74)
  {
    *((float *)this + 144) = v73;
    v75.n128_f32[0] = v73;
  }
  v76 = *((float *)this + 145);
  if (v76 <= v73)
  {
    if (v75.n128_f32[0] <= v76)
    {
      if (v72 <= v73)
        goto LABEL_121;
      goto LABEL_110;
    }
  }
  else
  {
    *((float *)this + 145) = v73;
    v76 = v73;
    if (v75.n128_f32[0] <= v73)
      goto LABEL_110;
  }
  *((float *)this + 144) = v76;
  v75.n128_f32[0] = v76;
LABEL_110:
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v77 + 32))(v77, 0, v75);
    v75.n128_u32[0] = *((_DWORD *)this + 144);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 4u, v75.n128_f32[0], 0);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 5u, *((float *)this + 145), 0);
LABEL_121:
  v83 = *((float *)this + 146);
  v75.n128_f32[0] = v83;
  if (v83 > v73)
  {
    *((float *)this + 146) = v73;
    v75.n128_f32[0] = v73;
  }
  v84 = *((float *)this + 147);
  if (v84 <= v73)
  {
    if (v75.n128_f32[0] <= v84)
    {
      if (v83 <= v73)
        goto LABEL_140;
      goto LABEL_129;
    }
  }
  else
  {
    *((float *)this + 147) = v73;
    v84 = v73;
    if (v75.n128_f32[0] <= v73)
      goto LABEL_129;
  }
  *((float *)this + 146) = v84;
  v75.n128_f32[0] = v84;
LABEL_129:
  v85 = *((_QWORD *)this + 9);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v85 + 32))(v85, 0, v75);
    v75.n128_u32[0] = *((_DWORD *)this + 146);
  }
  else
  {
    v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 6u, v75.n128_f32[0], 0);
  v88 = *((_QWORD *)this + 9);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  ausdk::AUElement::SetParameter(v89, 7u, *((float *)this + 147), 0);
LABEL_140:
  v91 = *((float *)this + 148);
  v75.n128_f32[0] = v91;
  if (v91 > v73)
  {
    *((float *)this + 148) = v73;
    v75.n128_f32[0] = v73;
  }
  v92 = *((float *)this + 149);
  if (v92 > v73)
  {
    *((float *)this + 149) = v73;
    v92 = v73;
    if (v75.n128_f32[0] <= v73)
      goto LABEL_148;
    goto LABEL_146;
  }
  if (v75.n128_f32[0] > v92)
  {
LABEL_146:
    *((float *)this + 148) = v92;
    v75.n128_f32[0] = v92;
LABEL_148:
    v93 = *((_QWORD *)this + 9);
    if (v93)
    {
      v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v93 + 32))(v93, 0, v75);
      v75.n128_u32[0] = *((_DWORD *)this + 148);
    }
    else
    {
      v95 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v95)
        v94 = 0;
      else
        v94 = *v95;
    }
    ausdk::AUElement::SetParameter(v94, 8u, v75.n128_f32[0], 0);
    v96 = *((_QWORD *)this + 9);
    if (v96)
    {
      v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
    }
    else
    {
      v98 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v98)
        v97 = 0;
      else
        v97 = *v98;
    }
    ausdk::AUElement::SetParameter(v97, 9u, *((float *)this + 149), 0);
    goto LABEL_159;
  }
  if (v91 > v73)
    goto LABEL_148;
LABEL_159:
  *((_DWORD *)this + 133) = v11;
LABEL_160:
  v99 = *((_DWORD *)this + 134);
  if (*((_DWORD *)this + 135) != v99)
  {
    v100 = *((_QWORD *)this + 9);
    if (v100)
    {
      v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
    }
    else
    {
      v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v102)
        v101 = 0;
      else
        v101 = *v102;
    }
    *((float *)this + 160) = ausdk::AUElement::GetParameter(v101, 0x14u);
    v103 = *((_QWORD *)this + 9);
    if (v103)
    {
      v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
    }
    else
    {
      v105 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v105)
        v104 = 0;
      else
        v104 = *v105;
    }
    *((float *)this + 161) = ausdk::AUElement::GetParameter(v104, 0x15u);
    v106 = *((_QWORD *)this + 9);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v107, 0x16u);
    v109 = *((_QWORD *)this + 9);
    if (v109)
    {
      v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
    }
    else
    {
      v111 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v111)
        v110 = 0;
      else
        v110 = *v111;
    }
    *((float *)this + 163) = ausdk::AUElement::GetParameter(v110, 0x17u);
    v112 = *((_QWORD *)this + 9);
    if (v112)
    {
      v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
    }
    else
    {
      v114 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v114)
        v113 = 0;
      else
        v113 = *v114;
    }
    *((float *)this + 164) = ausdk::AUElement::GetParameter(v113, 0x18u);
    v115 = *((_QWORD *)this + 9);
    if (v115)
    {
      v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
    }
    else
    {
      v117 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v117)
        v116 = 0;
      else
        v116 = *v117;
    }
    *((float *)this + 165) = ausdk::AUElement::GetParameter(v116, 0x19u);
    v118 = *((_QWORD *)this + 9);
    if (v118)
    {
      v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
    }
    else
    {
      v120 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v120)
        v119 = 0;
      else
        v119 = *v120;
    }
    *((float *)this + 166) = ausdk::AUElement::GetParameter(v119, 0x1Au);
    v121 = *((_QWORD *)this + 9);
    if (v121)
    {
      v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
    }
    else
    {
      v123 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v123)
        v122 = 0;
      else
        v122 = *v123;
    }
    *((float *)this + 167) = ausdk::AUElement::GetParameter(v122, 0x1Bu);
    v124 = *((_QWORD *)this + 9);
    if (v124)
    {
      v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
    }
    else
    {
      v126 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v126)
        v125 = 0;
      else
        v125 = *v126;
    }
    *((float *)this + 168) = ausdk::AUElement::GetParameter(v125, 0x1Cu);
    v127 = *((_QWORD *)this + 9);
    if (v127)
    {
      v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
    }
    else
    {
      v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v129)
        v128 = 0;
      else
        v128 = *v129;
    }
    *((float *)this + 169) = ausdk::AUElement::GetParameter(v128, 0x1Du);
    *((_DWORD *)this + 135) = v99;
  }
  v130 = *((_QWORD *)this + 69);
  v131 = *((_OWORD *)this + 35);
  v132 = *((_OWORD *)this + 36);
  v133 = *((_OWORD *)this + 37);
  *(_OWORD *)(v130 + 104) = *((_OWORD *)this + 38);
  *(_OWORD *)(v130 + 88) = v133;
  *(_OWORD *)(v130 + 72) = v132;
  *(_OWORD *)(v130 + 56) = v131;
  v134 = *((_OWORD *)this + 39);
  v135 = *((_OWORD *)this + 40);
  v136 = *((_OWORD *)this + 41);
  *(_QWORD *)(v130 + 168) = *((_QWORD *)this + 84);
  *(_OWORD *)(v130 + 152) = v136;
  *(_OWORD *)(v130 + 136) = v135;
  *(_OWORD *)(v130 + 120) = v134;
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v137 = (uint64_t)*a5;
  if (!*a5)
    return 4294956420;
  if (*(_DWORD *)v137 != 2)
    return 4294956428;
  v138 = a5[1];
  if (!v138)
    return 4294956420;
  if (v138->mNumberBuffers != 2)
    return 4294956428;
  v139 = a5[2];
  if (!v139)
    return 4294956420;
  if (v139->mNumberBuffers != 2)
    return 4294956428;
  v140 = (uint64_t)*a7;
  if (*a7)
  {
    if (*(_DWORD *)v140 != 1)
      return 4294956428;
  }
  v141 = a7[1];
  if (v141)
  {
    if (v141->mNumberBuffers != 1)
      return 4294956428;
  }
  v142 = (__int128 *)((char *)this + 560);
  if (*((_BYTE *)this + 544))
  {
    if (v140)
    {
      memcpy(*(void **)(v140 + 16), *(const void **)&v138[1].mBuffers[0].mNumberChannels, *(&v138[1].mNumberBuffers + 1));
      v141 = a7[1];
    }
    if (v141)
      memcpy(v141->mBuffers[0].mData, *(const void **)&a5[2][1].mBuffers[0].mNumberChannels, *(&a5[2][1].mNumberBuffers + 1));
    *((_DWORD *)this + 159) = 1;
    *((_DWORD *)this + 164) = *((_DWORD *)this + 169);
    *((_OWORD *)this + 40) = *(_OWORD *)((char *)this + 660);
    v143 = *((_QWORD *)this + 69);
    v144 = *v142;
    v145 = *((_OWORD *)this + 36);
    v146 = *((_OWORD *)this + 38);
    *(_OWORD *)(v143 + 88) = *((_OWORD *)this + 37);
    *(_OWORD *)(v143 + 72) = v145;
    *(_OWORD *)(v143 + 56) = v144;
    *(_OWORD *)(v143 + 104) = v146;
    v148 = *((_OWORD *)this + 40);
    v147 = *((_OWORD *)this + 41);
    v149 = *((_QWORD *)this + 84);
    *(_OWORD *)(v143 + 120) = *((_OWORD *)this + 39);
    *(_OWORD *)(v143 + 136) = v148;
    *(_QWORD *)(v143 + 168) = v149;
    *(_OWORD *)(v143 + 152) = v147;
  }
  else
  {
    NFNSwitchKernel::ProcessBufferLists(*((NFNSwitchKernel **)this + 69), *(const float **)(v137 + 16), *(const float **)(v137 + 32), (const float *)v138->mBuffers[0].mData, *(const float **)&v138[1].mBuffers[0].mNumberChannels, (float *)v139->mBuffers[0].mData, *(float **)&v139[1].mBuffers[0].mNumberChannels, *(float **)(v140 + 16), (float *)v141->mBuffers[0].mData);
    v151 = *((_QWORD *)this + 69);
    v152 = *(_OWORD *)(v151 + 72);
    v153 = *(_OWORD *)(v151 + 104);
    v154 = *(_OWORD *)(v151 + 56);
    *((_OWORD *)this + 37) = *(_OWORD *)(v151 + 88);
    *((_OWORD *)this + 38) = v153;
    *v142 = v154;
    *((_OWORD *)this + 36) = v152;
    v155 = *(_OWORD *)(v151 + 136);
    v156 = *(_OWORD *)(v151 + 152);
    v157 = *(_OWORD *)(v151 + 120);
    *((_QWORD *)this + 84) = *(_QWORD *)(v151 + 168);
    *((_OWORD *)this + 40) = v155;
    *((_OWORD *)this + 41) = v156;
    *((_OWORD *)this + 39) = v157;
    v158 = *((_QWORD *)this + 9);
    if (v158)
    {
      v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
    }
    else
    {
      v160 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v160)
        v159 = 0;
      else
        v159 = *v160;
    }
    ausdk::AUElement::SetParameter(v159, 0xDu, *((float *)this + 153), 0);
    v161 = *((_QWORD *)this + 9);
    if (v161)
    {
      v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
    }
    else
    {
      v163 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v163)
        v162 = 0;
      else
        v162 = *v163;
    }
    ausdk::AUElement::SetParameter(v162, 0xEu, *((float *)this + 154), 0);
    v164 = *((_QWORD *)this + 9);
    if (v164)
    {
      v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
    }
    else
    {
      v166 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v166)
        v165 = 0;
      else
        v165 = *v166;
    }
    ausdk::AUElement::SetParameter(v165, 0xFu, *((float *)this + 155), 0);
    v167 = *((_QWORD *)this + 9);
    if (v167)
    {
      v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
    }
    else
    {
      v169 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v169)
        v168 = 0;
      else
        v168 = *v169;
    }
    v170 = 0.0;
    if (*((_BYTE *)this + 624))
      v170 = 1.0;
    ausdk::AUElement::SetParameter(v168, 0x10u, v170, 0);
    v171 = *((_QWORD *)this + 9);
    if (v171)
    {
      v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0);
    }
    else
    {
      v173 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v173)
        v172 = 0;
      else
        v172 = *v173;
    }
    ausdk::AUElement::SetParameter(v172, 0x11u, (float)*((unsigned int *)this + 157), 0);
    v174 = *((_QWORD *)this + 9);
    if (v174)
    {
      v175 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v174 + 32))(v174, 0);
    }
    else
    {
      v176 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v176)
        v175 = 0;
      else
        v175 = *v176;
    }
    ausdk::AUElement::SetParameter(v175, 0x12u, (float)*((unsigned int *)this + 158), 0);
  }
  v177 = *((_QWORD *)this + 9);
  if (v177)
  {
    v178 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v177 + 32))(v177, 0);
  }
  else
  {
    v179 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v179)
      v178 = 0;
    else
      v178 = *v179;
  }
  ausdk::AUElement::SetParameter(v178, 0x13u, (float)*((unsigned int *)this + 159), 0);
  v180 = *((_QWORD *)this + 9);
  if (v180)
  {
    v181 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v180 + 32))(v180, 0);
  }
  else
  {
    v182 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v182)
      v181 = 0;
    else
      v181 = *v182;
  }
  ausdk::AUElement::SetParameter(v181, 0x14u, *((float *)this + 160), 0);
  v183 = *((_QWORD *)this + 9);
  if (v183)
  {
    v184 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0);
  }
  else
  {
    v185 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v185)
      v184 = 0;
    else
      v184 = *v185;
  }
  ausdk::AUElement::SetParameter(v184, 0x15u, *((float *)this + 161), 0);
  v186 = *((_QWORD *)this + 9);
  if (v186)
  {
    v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 0);
  }
  else
  {
    v188 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v188)
      v187 = 0;
    else
      v187 = *v188;
  }
  ausdk::AUElement::SetParameter(v187, 0x16u, *((float *)this + 162), 0);
  v189 = *((_QWORD *)this + 9);
  if (v189)
  {
    v190 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v189 + 32))(v189, 0);
  }
  else
  {
    v191 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v191)
      v190 = 0;
    else
      v190 = *v191;
  }
  ausdk::AUElement::SetParameter(v190, 0x17u, *((float *)this + 163), 0);
  v192 = *((_QWORD *)this + 9);
  if (v192)
  {
    v193 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v192 + 32))(v192, 0);
  }
  else
  {
    v194 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v194)
      v193 = 0;
    else
      v193 = *v194;
  }
  ausdk::AUElement::SetParameter(v193, 0x18u, *((float *)this + 164), 0);
  return 0;
}

uint64_t AUNFNSwitch::Render(AUNFNSwitch *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v13;
  ausdk::AUIOElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v8 = 0;
  v9 = 0;
  v19[2] = *MEMORY[0x1E0C80C00];
  v10 = (AUNFNSwitch *)((char *)this + 80);
  do
  {
    if (ausdk::AUBase::HasInput(this, v8))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = 1;
    }
    v8 = (v8 + 1);
  }
  while ((_DWORD)v8 != 3);
  v13 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), 0);
  v19[0] = ausdk::AUIOElement::PrepareBuffer(v13, a4);
  v14 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNFNSwitch *)((char *)this + 128), 1u);
  v15 = ausdk::AUIOElement::PrepareBuffer(v14, a4);
  result = 0;
  v19[1] = v15;
  if ((v9 & 1) == 0)
  {
    v16 = 0;
    memset(v18, 0, sizeof(v18));
    do
    {
      v17 = ausdk::AUScope::SafeGetElement(v10, v16);
      v18[v16++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
    }
    while (v16 != 3);
    return (*(uint64_t (**)(AUNFNSwitch *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 3, v18, 2, v19);
  }
  return result;
}

uint64_t AUNFNSwitch::GetParameterList(AUNFNSwitch *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956430;
  }
  else
  {
    result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
      *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
      *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    }
    v4 = 20;
  }
  *a4 = v4;
  return result;
}

uint64_t AUNFNSwitch::GetParameterInfo(AUNFNSwitch *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  UInt32 v7;
  AudioUnitParameterUnit v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  AudioUnitParameterValue v11;
  int v12;
  AudioUnitParameterOptions flags;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956430;
  if (a3 > 0x1D)
    return 4294956418;
  v6 = off_1E69CC028[a3];
  v7 = dword_1B6647C08[a3];
  v8 = dword_1B6647C80[a3];
  v9 = flt_1B6647CF8[a3];
  v10 = flt_1B6647D70[a3];
  v11 = flt_1B6647DE8[a3];
  v12 = dword_1B6647E60[a3];
  buffer->cfNameString = v6;
  buffer->flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->clumpID = v7;
  flags = buffer->flags;
  buffer->unit = v8;
  buffer->maxValue = v11;
  buffer->defaultValue = v10;
  buffer->minValue = v9;
  buffer->flags = flags | v12;
  return result;
}

uint64_t AUNFNSwitch::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    ++*((_DWORD *)this + 132);
    ++*((_DWORD *)this + 134);
  }
  return result;
}

uint64_t AUNFNSwitch::GetParameterValueStrings(AUNFNSwitch *this, int a2, unsigned int a3, const __CFArray **a4)
{
  BOOL v4;

  if (a4)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return 4294956430;
}

double AUNFNSwitch::GetLatency(AUNFNSwitch *this)
{
  return 0.0;
}

double AUNFNSwitch::GetTailTime(AUNFNSwitch *this)
{
  return 0.05;
}

uint64_t AUNFNSwitch::SupportsTail(AUNFNSwitch *this)
{
  return 1;
}

BOOL AUNFNSwitch::StreamFormatWritable(AUNFNSwitch *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNFNSwitch::SupportedNumChannels(AUNFNSwitch *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNFNSwitch::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUNFNSwitch::ValidFormat(AUNFNSwitch *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;
  BOOL v6;

  if (a4->mBitsPerChannel == 32 && a4->mFormatID == 1819304813)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2)
  {
    v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1)
      return result;
    v6 = a4->mChannelsPerFrame == 2;
  }
  if (v6)
    return result;
  else
    return 0;
}

uint64_t VoiceProcessorV3::ProcessDownlinkAudio(VoiceProcessorV3 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, AudioTimeStamp *a7)
{
  VoiceProcessorV3 *v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  CADeprecated::CAMutex *v14;
  char v15;
  uint64_t v16;
  double v17;
  int v18;
  double v20;
  double mSampleTime;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  Float64 v25;
  UInt64 mHostTime;
  Float64 mRateScalar;
  AudioTimeStampFlags mFlags;
  int *v29;
  double v30;
  double v31;
  _QWORD *v32;
  NSObject *v33;
  int *v34;
  uint64_t (*v35)(void);
  int v36;
  unsigned int v37;
  int v38;
  AudioBufferList *v39;
  AudioBufferList *v40;
  uint64_t v41;
  AudioBufferList *v42;
  UInt32 mNumberBuffers;
  unint64_t v44;
  void **p_mData;
  unsigned int *v46;
  unint64_t v47;
  void **v48;
  AudioBufferList *v49;
  unint64_t v50;
  AudioBufferList *v51;
  void **v52;
  double v53;
  NSObject *v54;
  NSObject *v55;
  int *v56;
  NSObject *v57;
  NSObject *v58;
  int v59;
  int *v60;
  uint64_t v61;
  int v62;
  double v63;
  double v64;
  _QWORD *v65;
  NSObject *v66;
  int *v67;
  _QWORD *v68;
  NSObject *v69;
  UInt32 mDataByteSize;
  int v71;
  int v72;
  int *v73;
  uint64_t v74;
  UInt32 v75;
  int v76;
  _QWORD *v77;
  NSObject *v78;
  UInt32 v79;
  int v80;
  int *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  int *v86;
  _QWORD *v87;
  NSObject *v88;
  UInt32 v89;
  int v90;
  int v91;
  int *v92;
  uint64_t v93;
  UInt32 v94;
  int v95;
  NSObject *v96;
  NSObject *v97;
  int *v98;
  NSObject *v99;
  NSObject *v100;
  int v101;
  VoiceProcessor::SampleRateConverter **v102;
  unsigned int v103;
  unsigned int *v104;
  uint64_t v105;
  int v106;
  int *v107;
  unsigned int v108;
  const AudioBufferList *v109;
  uint64_t v110;
  _DWORD *v111;
  CA::AudioSampleRateConverter **v112;
  uint64_t v113;
  float v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  double v130;
  uint64_t v131;
  AudioBufferList *v132;
  size_t v133;
  uint64_t v134;
  void **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  OpaqueAudioComponentInstance *v139;
  OpaqueAudioComponentInstance *v140;
  uint64_t *v141;
  uint64_t v142;
  OpaqueAudioComponentInstance *v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  UInt32 *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  double v164;
  uint64_t v165;
  AudioBufferList *v166;
  size_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int *v171;
  size_t v172;
  uint64_t v173;
  AudioBufferList *v174;
  int v175;
  uint64_t v176;
  int *v177;
  size_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int *v182;
  size_t v183;
  uint64_t v184;
  _DWORD *v185;
  unint64_t v186;
  void **v187;
  unsigned int v188;
  uint64_t v189;
  UInt32 *v190;
  size_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int *v195;
  size_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  void **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  AudioBufferList **v218;
  void **v219;
  AudioBufferList *v220;
  int v221;
  uint64_t v222;
  AudioBufferList **v223;
  void **v224;
  AudioBufferList *v225;
  const AudioBufferList *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  UInt32 *v230;
  _QWORD *v231;
  uint64_t v232;
  VoiceProcessorV3 *v233;
  AudioBufferList *MonoABL;
  AudioBufferList *v235;
  AudioBufferList *v236;
  AudioBufferList *v237;
  AudioBufferList *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  Float64 *p_mRateScalar;
  AudioUnitParameterValue *v244;
  uint64_t v245;
  uint64_t v246;
  UInt64 v247;
  Float64 v248;
  UInt32 *p_mNumberBuffers;
  uint64_t v250;
  const void *v251;
  void *v252;
  float v253;
  uint64_t v254;
  const void *v255;
  void *v256;
  uint64_t *v257;
  _DWORD *audio_buffer_list;
  unsigned int *v259;
  unint64_t v260;
  void **v261;
  AudioBufferList *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  float v267;
  float v268;
  AudioBufferList *v269;
  uint64_t v270;
  const float *data;
  float *v272;
  uint64_t v273;
  uint64_t v274;
  float v275;
  float v276;
  int v277;
  double v278;
  float v279;
  float v280;
  float v281;
  unint64_t v282;
  float v283;
  UInt64 v284;
  AudioUnitParameterValue *v285;
  float *v286;
  int mSampleTime_low;
  uint64_t v288;
  unint64_t v289;
  unsigned int v290;
  unsigned int v291;
  size_t v292;
  unint64_t v293;
  int v294;
  int v295;
  unint64_t v296;
  unsigned int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  UInt32 v301;
  uint64_t v302;
  AudioBufferList *v303;
  size_t v304;
  unint64_t v305;
  unsigned int v306;
  __n128 v307;
  int v308;
  const float *v309;
  const float *v310;
  float *v311;
  uint64_t DynamicsDSPChannelCount;
  UInt32 v313;
  uint64_t v314;
  AudioBufferList *v315;
  OpaqueAudioComponentInstance *v316;
  uint64_t v317;
  AudioBufferList *v318;
  size_t v319;
  __int128 v320;
  __int128 v321;
  OpaqueAudioComponentInstance *v322;
  uint64_t v323;
  AudioBufferList *v324;
  size_t v325;
  __int128 v326;
  __int128 v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  OpaqueAudioComponentInstance *v331;
  __int128 v332;
  __int128 v333;
  OpaqueAudioComponentInstance *v334;
  __int128 v335;
  __int128 v336;
  float v337;
  float v338;
  float v339;
  float v340;
  BOOL v341;
  float v342;
  float v343;
  float v344;
  unint64_t v345;
  uint64_t v346;
  OpaqueAudioComponentInstance *v347;
  __int128 v348;
  __int128 v349;
  OpaqueAudioComponentInstance *v350;
  __int128 v351;
  __int128 v352;
  OpaqueAudioComponentInstance *v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  double v357;
  unsigned int v358;
  double v359;
  int *v360;
  int *v361;
  const AudioBufferList *v362;
  uint64_t v363;
  AudioBufferList *v364;
  unint64_t v365;
  void **v366;
  int v367;
  unsigned int v369;
  _DWORD *exception;
  _DWORD *v372;
  _DWORD *v373;
  _DWORD *v374;
  _DWORD *v376;
  _DWORD *v378;
  _DWORD *v380;
  _DWORD *v382;
  NSObject *v383;
  _DWORD *v384;
  vp::Audio_Buffer *v385;
  const CAStreamBasicDescription *v386;
  char *v387;
  void **v388;
  void **v389;
  void **v390;
  _QWORD *v391;
  uint64_t *v392;
  int v393;
  UInt32 *v394;
  uint64_t v395;
  AudioTimeStamp *v396;
  unsigned int v397;
  AudioBufferList *v398;
  unsigned int v399;
  char *v400;
  UInt32 *v401;
  int *v402;
  unsigned int *v403;
  _DWORD *v404;
  AudioUnitParameterValue *v405;
  VoiceProcessorV3 *v406;
  AudioBufferList *v407;
  AudioBufferList *v408;
  AudioBufferList *v409;
  AudioBufferList *v410;
  _QWORD v411[2];
  Float64 *v412;
  float v413;
  AudioUnitRenderActionFlags v414;
  AudioBufferList v415;
  AudioBufferList v416;
  _OWORD v417[4];
  AudioTimeStamp v418;
  AudioTimeStamp v419;
  AudioTimeStamp v420;
  AudioTimeStamp v421;
  AudioTimeStamp v422;
  AudioTimeStamp v423;
  unsigned int v424;
  unsigned int NumberOfSourceFrames;
  unsigned int v426;
  AudioTimeStamp v427;
  AudioBufferList *v428[2];
  AudioBufferList *v429;
  AudioUnitParameterValue *v430;
  AudioBufferList v431;
  AudioBufferList v432;
  AudioTimeStamp v433;
  AudioTimeStamp v434;
  AudioTimeStamp buf;
  uint64_t v436;

  v409 = a2;
  v9 = this;
  v436 = *MEMORY[0x1E0C80C00];
  v10 = (char *)this + 12488;
  v11 = (unsigned int *)((char *)this + 2484);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_DWORD *)this + 620);
  v410 = a5;
  if (v13)
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: tryer failed to acquire lock", a3, a4);
    v14 = (VoiceProcessorV3 *)((char *)v9 + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
LABEL_5:
    ++*((_DWORD *)v9 + 3114);
    CADeprecated::CAMutex::Unlock(v14);
    v15 = 0;
    v16 = 1937006964;
    v17 = 0.0;
    goto LABEL_609;
  }
  if (!*((_BYTE *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: not ok to process?!", a3, a4);
    v14 = (VoiceProcessorV3 *)((char *)v9 + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
    goto LABEL_5;
  }
  v18 = *((unsigned __int8 *)this + 15897);
  v408 = a4;
  if (v18)
  {
    if (*((_QWORD *)this + 1571))
    {
      v17 = (double)mach_absolute_time() * 0.0000000416666667;
      if (*((double *)v9 + 1986) == 0.0)
        *((double *)v9 + 1986) = v17;
    }
    else
    {
      v17 = 0.0;
    }
    if (v10[3409])
    {
      if (*v10)
      {
        v20 = *((double *)v9 + 1560);
        mSampleTime = a7->mSampleTime;
        if (v20 != a7->mSampleTime)
        {
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v9, v20, mSampleTime, 2);
          mSampleTime = *((double *)v9 + 1560);
          if (a7->mSampleTime < mSampleTime)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v22 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                v24 = *((_QWORD *)v9 + 1560);
                v25 = a7->mSampleTime;
                mHostTime = a7->mHostTime;
                mRateScalar = a7->mRateScalar;
                mFlags = a7->mFlags;
                LODWORD(buf.mSampleTime) = 136316674;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 73;
                WORD1(buf.mRateScalar) = 2048;
                *(_QWORD *)((char *)&buf.mRateScalar + 4) = v24;
                WORD2(buf.mWordClockTime) = 2048;
                *(Float64 *)((char *)&buf.mWordClockTime + 6) = v25;
                HIWORD(buf.mSMPTETime.mCounter) = 2048;
                *(_QWORD *)&buf.mSMPTETime.mType = mHostTime;
                buf.mSMPTETime.mHours = 2048;
                *(Float64 *)&buf.mSMPTETime.mMinutes = mRateScalar;
                HIWORD(buf.mFlags) = 1024;
                buf.mReserved = mFlags;
                _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
              }
            }
            v29 = (int *)*((_QWORD *)v9 + 1570);
            if (v29 && (v10[3409] || v10[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v29, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 73, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)v9 + 1560), a7->mSampleTime, a7->mHostTime, a7->mRateScalar, a7->mFlags);
            }
            VoiceProcessorV2::LogIOError((uint64_t)v9, 23.008, (float)*((unsigned int *)v9 + 3114), 0.0, 0.0, "sprk sample time jumped backwards");
          }
        }
      }
      else
      {
        *v10 = 1;
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v9, 0.0, a7->mSampleTime, 2);
        mSampleTime = *((double *)v9 + 215);
        v30 = a7->mSampleTime - mSampleTime;
        v31 = (float)((float)((float)(roundf(*((float *)v9 + 289) * (float)*((unsigned int *)v9 + 124))
                                    + (float)*((unsigned int *)v9 + 124))
                            + (float)*((unsigned int *)v9 + 293))
                    + (float)*((unsigned int *)v9 + 294));
        if (v30 != v31)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v32 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315906;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 63;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v31;
              WORD2(buf.mWordClockTime) = 2048;
              *(double *)((char *)&buf.mWordClockTime + 6) = v30;
              _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
            }
          }
          v34 = (int *)*((_QWORD *)v9 + 1570);
          if (v34 && (v10[3409] || v10[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v34, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 63, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v31, v30);
          }
          VoiceProcessorV2::LogIOError((uint64_t)v9, 23.009, (float)*((unsigned int *)v9 + 3114), 0.0, 0.0, "bad relative mic-ref TS");
        }
      }
      LODWORD(mSampleTime) = *((_DWORD *)v9 + 121);
      *((double *)v9 + 1560) = a7->mSampleTime + (double)*(unint64_t *)&mSampleTime;
    }
  }
  else
  {
    v17 = 0.0;
  }
  v35 = *(uint64_t (**)(void))(*((_QWORD *)v9 + 311) + 16);
  v387 = (char *)v9 + 2488;
  v36 = v35();
  CADeprecated::CAMutex::Lock((VoiceProcessorV3 *)((char *)v9 + 2576));
  ++*((_DWORD *)v9 + 3114);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV3 *)((char *)v9 + 2576));
  v393 = v36;
  v37 = *((_DWORD *)v9 + 121);
  v426 = v37;
  NumberOfSourceFrames = v37;
  v38 = v10[3409];
  if (!v10[3409])
  {
    v39 = v408;
    if (v410->mNumberBuffers == *((_DWORD *)v9 + 89))
    {
      v40 = a3;
      v386 = (VoiceProcessorV3 *)((char *)v9 + 328);
      if (!v10[3410])
        goto LABEL_86;
      goto LABEL_57;
    }
LABEL_606:
    if (v393)
      (*(void (**)(char *))(*(_QWORD *)v387 + 24))(v387);
    v16 = 0;
    v15 = 1;
LABEL_609:
    if (v10[3409] && *((_QWORD *)v9 + 1571))
    {
      v241 = mach_absolute_time();
      v195 = (int *)*((_QWORD *)v9 + 1571);
      p_mRateScalar = (Float64 *)&AudioDataAnalysisManagerLibraryLoader(void)::libSym;
      if (VPTimestampLogScope(void)::once != -1)
        goto LABEL_641;
      goto LABEL_612;
    }
    goto LABEL_621;
  }
  v10[385] = 1;
  v39 = v408;
  if (v410->mNumberBuffers != *((_DWORD *)v9 + 89))
    goto LABEL_606;
  v40 = a3;
  v386 = (VoiceProcessorV3 *)((char *)v9 + 328);
LABEL_57:
  if (!v409)
  {
    v41 = a6;
    v42 = (AudioBufferList *)*((_QWORD *)v9 + 199);
    mNumberBuffers = v42->mNumberBuffers;
    v409 = v42;
    if (mNumberBuffers)
    {
      v44 = 0;
      p_mData = &v42->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v44;
        p_mData += 2;
      }
      while (v44 < v42->mNumberBuffers);
      v38 = v10[3409];
      v39 = v408;
      v40 = a3;
    }
    a6 = v41;
  }
  if (v38 && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 1, a6, v409), v10[3409]) || v10[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x32u, a6, v409, a7);
  if (!v40)
  {
    v40 = (AudioBufferList *)*((_QWORD *)v9 + 200);
    if (v40->mNumberBuffers)
    {
      v46 = (unsigned int *)*((_QWORD *)v9 + 200);
      v47 = 0;
      v48 = (void **)(v46 + 4);
      do
      {
        bzero(*v48, *((unsigned int *)v48 - 1));
        ++v47;
        v48 += 2;
      }
      while (v47 < *v46);
      v39 = v408;
      v40 = (AudioBufferList *)v46;
    }
  }
  if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 10, a6, v40), v10[3409]) || v10[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x53u, a6, v40, a7);
  if (!v39)
  {
    v39 = (AudioBufferList *)*((_QWORD *)v9 + 201);
    if (v39->mNumberBuffers)
    {
      v49 = v40;
      v50 = 0;
      v51 = (AudioBufferList *)*((_QWORD *)v9 + 201);
      v52 = &v39->mBuffers[0].mData;
      do
      {
        bzero(*v52, *((unsigned int *)v52 - 1));
        ++v50;
        v52 += 2;
      }
      while (v50 < v51->mNumberBuffers);
      v39 = v51;
      v40 = v49;
    }
  }
  if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 11, a6, v39), v10[3409]) || v10[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x54u, a6, v39, a7);
  v37 = *((_DWORD *)v9 + 121);
LABEL_86:
  if (v37 != (_DWORD)a6)
  {
    if (v10[3331])
    {
      v63 = (double)(mach_absolute_time() - *((_QWORD *)v9 + 1980)) * 0.0000000416666667;
      v64 = *((double *)v9 + 1983);
      if (v63 > v64)
      {
        *((double *)v9 + 1983) = v64 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3114), (float)*((unsigned int *)v9 + 121), (float)a6, "processdownlinkaudio: <block size mismatch>");
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v65 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v66 = (*v65 ? *v65 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315650;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 164;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v63;
            _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
          }
        }
        v67 = (int *)*((_QWORD *)v9 + 1570);
        if (v67 && (v10[3409] || v10[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v67, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 164, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v63);
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v68 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v69 = (*v68 ? *v68 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            v395 = a6;
            v396 = a7;
            mDataByteSize = v410->mBuffers[0].mDataByteSize;
            v71 = *((_DWORD *)v9 + 121);
            CAFormatter::CAFormatter((CAFormatter *)&v423, v386);
            v72 = *((_DWORD *)v9 + 3114);
            LODWORD(buf.mSampleTime) = 136316674;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 168;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v395;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = mDataByteSize;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v71;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v423.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v72;
            _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(_QWORD *)&v423.mSampleTime)
              free(*(void **)&v423.mSampleTime);
            a6 = v395;
            a7 = v396;
          }
        }
        v73 = (int *)*((_QWORD *)v9 + 1570);
        if (v73)
        {
          if (v10[3409] || v10[3410])
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v74 = VPLogScope(void)::scope;
            v75 = v410->mBuffers[0].mDataByteSize;
            v76 = *((_DWORD *)v9 + 121);
            CAFormatter::CAFormatter((CAFormatter *)&buf, v386);
            CALegacyLog::log(v73, 1, v74, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 168, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", a6, v75, v76, *(const char **)&buf.mSampleTime, *((_DWORD *)v9 + 3114));
LABEL_201:
            if (*(_QWORD *)&buf.mSampleTime)
              free(*(void **)&buf.mSampleTime);
          }
        }
      }
    }
    else
    {
      v10[3331] = 1;
      *((_QWORD *)v9 + 1980) = mach_absolute_time();
      *((_QWORD *)v9 + 1983) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3114), (float)*((unsigned int *)v9 + 121), (float)a6, "processdl: <block size mismatch>");
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v84 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v85 = (*v84 ? *v84 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 144;
          _os_log_impl(&dword_1B5ED0000, v85, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
        }
      }
      v86 = (int *)*((_QWORD *)v9 + 1570);
      if (v86 && (v10[3409] || v10[3410]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v86, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 144, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v87 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v88 = (*v87 ? *v87 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          v395 = a6;
          v396 = a7;
          v89 = v410->mBuffers[0].mDataByteSize;
          v90 = *((_DWORD *)v9 + 121);
          CAFormatter::CAFormatter((CAFormatter *)&v423, v386);
          v91 = *((_DWORD *)v9 + 3114);
          LODWORD(buf.mSampleTime) = 136316674;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 148;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v395;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v89;
          HIWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mSubframes = v90;
          LOWORD(buf.mSMPTETime.mCounter) = 2080;
          *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v423.mSampleTime;
          HIWORD(buf.mSMPTETime.mFlags) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mHours = v91;
          _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
          if (*(_QWORD *)&v423.mSampleTime)
            free(*(void **)&v423.mSampleTime);
          a6 = v395;
          a7 = v396;
        }
      }
      v92 = (int *)*((_QWORD *)v9 + 1570);
      if (v92 && (v10[3409] || v10[3410]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v93 = VPLogScope(void)::scope;
        v94 = v410->mBuffers[0].mDataByteSize;
        v95 = *((_DWORD *)v9 + 121);
        CAFormatter::CAFormatter((CAFormatter *)&buf, v386);
        CALegacyLog::log(v92, 2, v93, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 148, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", a6, v94, v95, *(const char **)&buf.mSampleTime, *((_DWORD *)v9 + 3114));
        goto LABEL_201;
      }
    }
    if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, a6, v410), v10[3409]) || v10[3410])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, a6, v410, a7);
    v83 = *((_QWORD *)v9 + 1995);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_3957);
    if (!AudioIssueDetectorLibraryLoader(void)::libSym)
      goto LABEL_606;
LABEL_210:
    AudioIssueDetectorLibraryLoader(void)::libSym(v83, 68, 0, v410, a6, a7);
    goto LABEL_606;
  }
  if (v410->mBuffers[0].mDataByteSize != *((_DWORD *)v9 + 88) * (_DWORD)a6)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v77 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v78 = (*v77 ? *v77 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        v79 = v410->mBuffers[0].mDataByteSize;
        v80 = *((_DWORD *)v9 + 88) * a6;
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 182;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v79;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v80;
        _os_log_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v81 = (int *)*((_QWORD *)v9 + 1570);
    v82 = v10[3409];
    if (v81)
    {
      if (!v10[3409] && !v10[3410])
        goto LABEL_163;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v81, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 182, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", v410->mBuffers[0].mDataByteSize, *((_DWORD *)v9 + 88) * a6);
      v82 = v10[3409];
    }
    if (v82)
    {
      VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, a6, v410);
      if (v10[3409])
      {
LABEL_164:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, a6, v410, a7);
LABEL_165:
        v83 = *((_QWORD *)v9 + 1995);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1)
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_3957);
        if (!AudioIssueDetectorLibraryLoader(void)::libSym)
          goto LABEL_606;
        goto LABEL_210;
      }
    }
LABEL_163:
    if (!v10[3410])
      goto LABEL_165;
    goto LABEL_164;
  }
  v407 = v40;
  v408 = v39;
  if (!v10[3331])
    goto LABEL_234;
  v10[3331] = 0;
  v53 = (double)(mach_absolute_time() - *((_QWORD *)v9 + 1980)) * 0.0000000416666667;
  VoiceProcessorV2::LogIOError((uint64_t)v9, 23.002, (float)*((unsigned int *)v9 + 3114), (float)*((unsigned int *)v9 + 121), (float)a6, "processdownlinkaudio: <block size no longer mismatched>");
  if (v53 <= 1.0)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v96 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v96)
    {
      v97 = v96;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 205;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v53;
        _os_log_impl(&dword_1B5ED0000, v97, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    v98 = (int *)*((_QWORD *)v9 + 1570);
    if (v98 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v98, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 205, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v53);
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v99 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v99)
    {
      v100 = v99;
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        v101 = *((_DWORD *)v9 + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = a6;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v101;
        _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v60 = (int *)*((_QWORD *)v9 + 1570);
    if (v60 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v61 = 206;
      v62 = 2;
      goto LABEL_233;
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v54 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v54)
    {
      v55 = v54;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 200;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v53;
        _os_log_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    v56 = (int *)*((_QWORD *)v9 + 1570);
    if (v56 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v56, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 200, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v53);
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v57 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v57)
    {
      v58 = v57;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v59 = *((_DWORD *)v9 + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = a6;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v59;
        _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v60 = (int *)*((_QWORD *)v9 + 1570);
    if (v60 && (v10[3409] || v10[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v61 = 201;
      v62 = 1;
LABEL_233:
      CALegacyLog::log(v60, v62, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", v61, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", a6, *((_DWORD *)v9 + 121));
    }
  }
LABEL_234:
  v102 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)v9 + 48);
  v103 = *((_DWORD *)v9 + 121);
  if (*((_QWORD *)v9 + 47))
  {
    if (v102)
    {
      NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v102);
      v102 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)v9 + 47);
LABEL_241:
      v103 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v102);
      goto LABEL_242;
    }
    v102 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)v9 + 47);
LABEL_240:
    NumberOfSourceFrames = *((_DWORD *)v9 + 121);
    goto LABEL_241;
  }
  if (v102)
    goto LABEL_240;
LABEL_242:
  v104 = (unsigned int *)*((_QWORD *)v9 + 13);
  v105 = *v104;
  if ((int)v105 >= 1)
  {
    v106 = v103 * *((_DWORD *)v9 + 58);
    v107 = (int *)(v104 + 3);
    do
    {
      *v107 = v106;
      v107 += 4;
      --v105;
    }
    while (v105);
  }
  v424 = v103;
  (*(void (**)(void))(*((_QWORD *)v9 + 12) + 16))();
  v108 = v424;
  v426 = v424;
  v109 = (const AudioBufferList *)*((_QWORD *)v9 + 13);
  if (v10[3409]
    && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 0, v424, *((AudioBufferList **)v9 + 13)),
        v109 = (const AudioBufferList *)*((_QWORD *)v9 + 13),
        v10[3409])
    || v10[3410])
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x33u, v424, v109, a7);
    v109 = (const AudioBufferList *)*((_QWORD *)v9 + 13);
  }
  v110 = *((_QWORD *)v9 + 1995);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_3957);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v110, 51, 0, v109, v424, a7);
  if (*((_BYTE *)v9 + 2082) || *((_DWORD *)v9 + 19) == 7 && *((float *)v9 + 3116) == 0.0)
    bzero(*(void **)(*((_QWORD *)v9 + 13) + 16), 4 * v424);
  v111 = (_DWORD *)*((_QWORD *)v9 + 13);
  v112 = (CA::AudioSampleRateConverter **)*((_QWORD *)v9 + 47);
  if (v112)
  {
    VoiceProcessor::SampleRateConverter::Convert(v112, &v426, &NumberOfSourceFrames, *((const AudioBufferList **)v9 + 13), *((const AudioBufferList **)v9 + 23));
    v108 = NumberOfSourceFrames;
    v426 = NumberOfSourceFrames;
    v111 = (_DWORD *)*((_QWORD *)v9 + 23);
  }
  v395 = a6;
  v400 = v10;
  v114 = VoiceProcessorV2::DetermineNoiseBasedVolume(v9);
  v115 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&buf.mRateScalar = v115;
  v116 = *(_OWORD *)&a7->mSMPTETime.mHours;
  v118 = *(_OWORD *)&a7->mSampleTime;
  v117 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&buf.mSMPTETime.mHours = v116;
  v119 = *(_OWORD *)&a7->mRateScalar;
  v120 = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v423.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v423.mRateScalar = v119;
  v121 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v423.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v423.mSMPTETime.mHours = v121;
  v122 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v422.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v422.mRateScalar = v122;
  v123 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v422.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v422.mSMPTETime.mHours = v123;
  *(_OWORD *)&v421.mSampleTime = v118;
  *(_OWORD *)&v421.mRateScalar = v117;
  v396 = a7;
  v124 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v421.mSMPTETime.mSubframes = v120;
  *(_OWORD *)&v421.mSMPTETime.mHours = v124;
  v406 = v9;
  v125 = *((_DWORD *)v9 + 130);
  if (v125)
  {
    v126 = 0;
    v127 = 0;
    v128 = v108 / v125;
    v404 = v111;
    v405 = (AudioUnitParameterValue *)((char *)v406 + 16688);
    v129 = (uint64_t *)(v111 + 4);
    v130 = (double)v128;
    do
    {
      if ((*v111 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v434.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v434.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v434.mHostTime) = 1024;
          *(_DWORD *)((char *)&v434.mHostTime + 6) = 309;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v434, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69EE218;
        exception[2] = -50;
      }
      MEMORY[0x1E0C80A78](v113);
      v132 = (AudioBufferList *)((char *)&v385 - v131);
      bzero((char *)&v385 - v131, v133);
      v134 = *v111;
      v132->mNumberBuffers = v134;
      if ((_DWORD)v134)
      {
        v135 = &v132->mBuffers[0].mData;
        v136 = v129;
        do
        {
          *((_DWORD *)v135 - 2) = 1;
          *((_DWORD *)v135 - 1) = 4 * v128;
          v137 = *v136;
          v136 += 2;
          *v135 = (void *)(v137 + 4 * v127);
          v135 += 2;
          --v134;
        }
        while (v134);
      }
      v138 = *((_QWORD *)v406 + 1104);
      if ((v138 & 4) != 0 && (*((_BYTE *)v406 + 8840) & 4) != 0)
      {
        v139 = (OpaqueAudioComponentInstance *)*((_QWORD *)v406 + 439);
        if (v139)
        {
          LODWORD(v434.mSampleTime) = 512;
          AudioUnitProcess(v139, (AudioUnitRenderActionFlags *)&v434, &buf, v128, v132);
          if (v400[3409] || v400[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v406, 0x55u, v128, v132, &buf);
          buf.mSampleTime = buf.mSampleTime + v130;
          v138 = *((_QWORD *)v406 + 1104);
        }
      }
      if ((v138 & 0x40) != 0 && (*((_BYTE *)v406 + 8840) & 0x40) != 0)
      {
        v140 = (OpaqueAudioComponentInstance *)*((_QWORD *)v406 + 443);
        if (v140)
        {
          v141 = v129;
          *(_QWORD *)&v434.mSampleTime = v132;
          v434.mHostTime = 0;
          *(_QWORD *)&v433.mSampleTime = v132;
          v433.mHostTime = 0;
          LODWORD(v420.mSampleTime) = 512;
          AudioUnitProcessMultiple(v140, (AudioUnitRenderActionFlags *)&v420, &v423, v128, 2u, (const AudioBufferList **)&v434, 2u, (AudioBufferList **)&v433);
          v142 = (uint64_t)v406;
          v423.mSampleTime = v423.mSampleTime + v130;
          AudioUnitGetParameter(*((AudioUnit *)v406 + 443), 1u, 0, 0, v405);
          v138 = *(_QWORD *)(v142 + 8832);
          v129 = v141;
          v111 = v404;
        }
      }
      if ((v138 & 0x100) != 0 && (*((_BYTE *)v406 + 8841) & 1) != 0)
      {
        v143 = (OpaqueAudioComponentInstance *)*((_QWORD *)v406 + 445);
        if (v143)
        {
          AudioUnitSetParameter(v143, 5u, 0, 0, v114, 0);
          LODWORD(v434.mSampleTime) = 512;
          AudioUnitProcess(*((AudioUnit *)v406 + 445), (AudioUnitRenderActionFlags *)&v434, &v422, v128, v132);
          if (v400[3409] || v400[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v406, 0x36u, v128, v132, &v422);
          v422.mSampleTime = v422.mSampleTime + v130;
          v138 = *((_QWORD *)v406 + 1104);
        }
      }
      v113 = (uint64_t)v406;
      if ((v138 & 0x4000) != 0 && (*((_BYTE *)v406 + 8841) & 0x40) != 0 && *((_QWORD *)v406 + 451))
      {
        (*(void (**)(void))(*(_QWORD *)v406 + 664))();
        if (v400[3409] || v400[3410])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v406, 0x7Bu, v128, v132, &v421);
        v421.mSampleTime = v421.mSampleTime + v130;
        v113 = (uint64_t)v406;
      }
      v127 += v128;
      ++v126;
    }
    while (v126 < *(_DWORD *)(v113 + 520));
  }
  v9 = v406;
  if (*((_DWORD *)v406 + 1128) == 1)
  {
    v144 = (_DWORD *)*((_QWORD *)v406 + 197);
    if (v144)
      ABLRingBuffer<float>::ReadFrom((_DWORD *)v406 + 384, *((_DWORD *)v406 + 121), v144);
  }
  v146 = *((_QWORD *)v9 + 47);
  v145 = *((_QWORD *)v9 + 48);
  v10 = v400;
  v147 = v395;
  v148 = (int *)v407;
  if (v145)
  {
    a7 = v396;
    if (v146)
    {
      NumberOfSourceFrames = *((_DWORD *)v9 + 121);
      v145 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v145, &v426, &NumberOfSourceFrames, *((const AudioBufferList **)v9 + 23), *((const AudioBufferList **)v9 + 24));
      v149 = (UInt32 *)*((_QWORD *)v9 + 24);
      v426 = NumberOfSourceFrames;
    }
    else
    {
      v145 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v145, &v426, &NumberOfSourceFrames, *((const AudioBufferList **)v9 + 13), *((const AudioBufferList **)v9 + 24));
      v426 = NumberOfSourceFrames;
      v149 = (UInt32 *)*((_QWORD *)v9 + 24);
    }
  }
  else
  {
    a7 = v396;
    if (v146)
      v149 = (UInt32 *)*((_QWORD *)v9 + 23);
    else
      v149 = (UInt32 *)*((_QWORD *)v9 + 13);
  }
  v150 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v434.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v434.mRateScalar = v150;
  v151 = *(_OWORD *)&a7->mSMPTETime.mHours;
  v153 = *(_OWORD *)&a7->mSampleTime;
  v152 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v434.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v434.mSMPTETime.mHours = v151;
  v154 = *(_OWORD *)&a7->mRateScalar;
  v155 = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v433.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v433.mRateScalar = v154;
  v156 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v433.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v433.mSMPTETime.mHours = v156;
  v157 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v420.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v420.mRateScalar = v157;
  v158 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v420.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v420.mSMPTETime.mHours = v158;
  v159 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v419.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v419.mRateScalar = v159;
  v160 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v419.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v419.mSMPTETime.mHours = v160;
  v161 = *(_OWORD *)&a7->mRateScalar;
  *(_OWORD *)&v418.mSampleTime = *(_OWORD *)&a7->mSampleTime;
  *(_OWORD *)&v418.mRateScalar = v161;
  v162 = *(_OWORD *)&a7->mSMPTETime.mHours;
  *(_OWORD *)&v418.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
  *(_OWORD *)&v418.mSMPTETime.mHours = v162;
  v417[0] = v153;
  v417[1] = v152;
  v163 = *(_OWORD *)&a7->mSMPTETime.mHours;
  v417[2] = v155;
  v417[3] = v163;
  if (!*((_DWORD *)v9 + 130))
  {
LABEL_514:
    DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(v9);
    v313 = DynamicsDSPChannelCount;
    v314 = *((_QWORD *)v9 + 1104);
    if ((v314 & 0x200000000) != 0)
    {
      v315 = v410;
      if ((*((_BYTE *)v9 + 8844) & 2) != 0)
      {
        v316 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 470);
        if (v316)
        {
          if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_671;
            LODWORD(v427.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
            WORD2(v427.mHostTime) = 1024;
            *(_DWORD *)((char *)&v427.mHostTime + 6) = 736;
            v383 = MEMORY[0x1E0C81028];
            goto LABEL_670;
          }
          MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
          v318 = (AudioBufferList *)((char *)&v385 - v317);
          bzero((char *)&v385 - v317, v319);
          v318->mNumberBuffers = v313;
          memcpy(v318->mBuffers, v315->mBuffers, 16 * v313);
          v320 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v320;
          v321 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v321;
          v432.mNumberBuffers = 512;
          DynamicsDSPChannelCount = AudioUnitProcess(v316, &v432.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), v318);
          if (v10[3409] || v10[3410])
            DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x40u, v147, v318, &v427);
          v314 = *((_QWORD *)v9 + 1104);
        }
      }
    }
    else
    {
      v315 = v410;
    }
    if ((v314 & 0x1000000000) == 0)
      goto LABEL_530;
    if ((*((_BYTE *)v9 + 8844) & 0x10) == 0)
      goto LABEL_530;
    v322 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 473);
    if (!v322)
      goto LABEL_530;
    if (v313 - 65 > 0xFFFFFFBF)
    {
      MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
      v324 = (AudioBufferList *)((char *)&v385 - v323);
      bzero((char *)&v385 - v323, v325);
      v324->mNumberBuffers = v313;
      memcpy(v324->mBuffers, v315->mBuffers, 16 * v313);
      v326 = *(_OWORD *)&a7->mRateScalar;
      *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
      *(_OWORD *)&v427.mRateScalar = v326;
      v327 = *(_OWORD *)&a7->mSMPTETime.mHours;
      *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
      *(_OWORD *)&v427.mSMPTETime.mHours = v327;
      v432.mNumberBuffers = 512;
      AudioUnitProcess(v322, &v432.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), v324);
      if (v10[3409] || v10[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x38u, v147, v324, &v427);
LABEL_530:
      if (!*((_BYTE *)v9 + 2244) && v315->mNumberBuffers >= 2)
      {
        v328 = 1;
        v329 = 32;
        do
        {
          memcpy(*(void **)((char *)&v315->mNumberBuffers + v329), v315->mBuffers[0].mData, v315->mBuffers[0].mDataByteSize);
          ++v328;
          v329 += 16;
        }
        while (v328 < v315->mNumberBuffers);
      }
      v330 = *((_QWORD *)v9 + 1104);
      if ((v330 & 0x200000000000) != 0 && (*((_BYTE *)v9 + 8845) & 0x20) != 0)
      {
        v331 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 482);
        if (v331)
        {
          *(_QWORD *)&v432.mNumberBuffers = v315;
          *(_QWORD *)&v431.mNumberBuffers = v315;
          v332 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v332;
          v333 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v333;
          v416.mNumberBuffers = 512;
          AudioUnitProcessMultiple(v331, &v416.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), 1u, (const AudioBufferList **)&v432, 1u, (AudioBufferList **)&v431);
          v330 = *((_QWORD *)v9 + 1104);
        }
      }
      if ((v330 & 0x100000000000000) != 0 && (*((_BYTE *)v9 + 8847) & 1) != 0)
      {
        v334 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 493);
        if (v334)
        {
          *(_QWORD *)&v432.mNumberBuffers = v315;
          *(_QWORD *)&v431.mNumberBuffers = v315;
          v335 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v335;
          v336 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v336;
          v416.mNumberBuffers = 512;
          AudioUnitProcessMultiple(v334, &v416.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), 1u, (const AudioBufferList **)&v432, 1u, (AudioBufferList **)&v431);
          if (v10[3409] || v10[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x41u, v147, v315, &v427);
          v330 = *((_QWORD *)v9 + 1104);
        }
      }
      if ((v330 & 0x800000000000000) == 0 || (*((_BYTE *)v9 + 8847) & 8) == 0 && !*((_BYTE *)v9 + 472))
        goto LABEL_579;
      LODWORD(v427.mSampleTime) = 1065353216;
      v432.mNumberBuffers = 1065353216;
      if (*((_BYTE *)v9 + 2083) || *((_BYTE *)v9 + 472))
      {
        v337 = *((float *)v9 + 1131);
        if (v337 != 0.0)
        {
          v338 = __exp10f(v337 / 20.0);
          *(float *)&v432.mNumberBuffers = v338;
          *(float *)&v427.mSampleTime = v338;
LABEL_566:
          v315 = v410;
          goto LABEL_567;
        }
      }
      v339 = *((float *)v9 + 1129);
      if (v339 >= -300.0)
      {
        if (v339 == 0.0)
        {
          v338 = 1.0;
        }
        else
        {
          v340 = v339 / 20.0;
          v341 = v339 <= 60.0;
          v342 = 3.0;
          if (v341)
            v342 = v340;
          v338 = __exp10f(v342);
          *(float *)&v427.mSampleTime = v338;
          v315 = v410;
        }
      }
      else
      {
        LODWORD(v427.mSampleTime) = 0;
        v338 = 0.0;
      }
      v343 = *((float *)v9 + 1130);
      if (v343 >= -300.0)
      {
        if (v343 != 0.0)
        {
          v344 = v343 / 20.0;
          if (v343 > 60.0)
            v344 = 3.0;
          v432.mNumberBuffers = __exp10f(v344);
          v338 = *(float *)&v427.mSampleTime;
          goto LABEL_566;
        }
      }
      else
      {
        v432.mNumberBuffers = 0;
      }
LABEL_567:
      if (v338 == 0.0)
      {
        bzero(v315->mBuffers[0].mData, 4 * *((unsigned int *)v9 + 121));
        v147 = v395;
        a7 = v396;
      }
      else
      {
        v147 = v395;
        a7 = v396;
        if (v338 != 1.0)
          vDSP_vsmul((const float *)v315->mBuffers[0].mData, 1, (const float *)&v427, (float *)v315->mBuffers[0].mData, 1, *((unsigned int *)v9 + 121));
      }
      v10 = v400;
      if (v315->mNumberBuffers >= 2)
      {
        v345 = 1;
        v346 = 32;
        do
        {
          if (*(float *)&v432.mNumberBuffers == 0.0)
          {
            bzero(*(void **)((char *)&v315->mNumberBuffers + v346), 4 * *((unsigned int *)v9 + 121));
          }
          else if (*(float *)&v432.mNumberBuffers != 1.0)
          {
            vDSP_vsmul(*(const float **)((char *)&v315->mNumberBuffers + v346), 1, (const float *)&v432.mNumberBuffers, *(float **)((char *)&v315->mNumberBuffers + v346), 1, *((unsigned int *)v9 + 121));
          }
          ++v345;
          v346 += 16;
        }
        while (v345 < v315->mNumberBuffers);
      }
      v330 = *((_QWORD *)v9 + 1104);
LABEL_579:
      if ((v330 & 0x400000000000) != 0 && (*((_BYTE *)v9 + 8845) & 0x40) != 0)
      {
        v347 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 483);
        if (v347)
        {
          v348 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v348;
          v349 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v349;
          v432.mNumberBuffers = 512;
          AudioUnitProcess(v347, &v432.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), v315);
          v330 = *((_QWORD *)v9 + 1104);
        }
      }
      if ((v330 & 0x1000000000000000) != 0 && (*((_BYTE *)v9 + 8847) & 0x10) != 0)
      {
        v350 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 497);
        if (v350)
        {
          v351 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v351;
          v352 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v352;
          v432.mNumberBuffers = 512;
          AudioUnitProcess(v350, &v432.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), v315);
          v330 = *((_QWORD *)v9 + 1104);
        }
      }
      if ((v330 & 0x4000000000000) != 0 && (*((_BYTE *)v9 + 8846) & 4) != 0)
      {
        v353 = (OpaqueAudioComponentInstance *)*((_QWORD *)v9 + 487);
        if (v353)
        {
          v354 = *(_OWORD *)&a7->mRateScalar;
          *(_OWORD *)&v427.mSampleTime = *(_OWORD *)&a7->mSampleTime;
          *(_OWORD *)&v427.mRateScalar = v354;
          v355 = *(_OWORD *)&a7->mSMPTETime.mHours;
          *(_OWORD *)&v427.mSMPTETime.mSubframes = *(_OWORD *)&a7->mSMPTETime.mSubframes;
          *(_OWORD *)&v427.mSMPTETime.mHours = v355;
          v432.mNumberBuffers = 512;
          AudioUnitProcess(v353, &v432.mNumberBuffers, &v427, *((_DWORD *)v9 + 121), v315);
          if (v10[3409] || v10[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x75u, v147, v315, &v427);
        }
      }
      if (v10[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(v9, 2, v147, v315), v10[3409]) || v10[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x44u, v147, v315, a7);
      v356 = *((_QWORD *)v9 + 1995);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_3957);
      if (AudioIssueDetectorLibraryLoader(void)::libSym)
        AudioIssueDetectorLibraryLoader(void)::libSym(v356, 68, 0, v315, v147, a7);
      if (*((_DWORD *)v9 + 1127) == 1 && !v10[3688])
        VoiceProcessorV2::AppendReferenceSignal(v9, v315, (AudioBufferList *)a7, 0);
      if (v10[3409])
        VoiceProcessorV2::LoopBackRead(v9, v147, v315);
      goto LABEL_606;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_671:
      v384 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v384 = &off_1E69EE218;
      v384[2] = -50;
    }
    LODWORD(v427.mSampleTime) = 136315394;
    *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
    WORD2(v427.mHostTime) = 1024;
    *(_DWORD *)((char *)&v427.mHostTime + 6) = 748;
    v383 = MEMORY[0x1E0C81028];
LABEL_670:
    _os_log_impl(&dword_1B5ED0000, v383, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
    goto LABEL_671;
  }
  v399 = 0;
  LODWORD(v404) = 0;
  v385 = (VoiceProcessorV3 *)((char *)v9 + 2744);
  v164 = (float)v147;
  v391 = v148 + 4;
  v392 = (uint64_t *)(v149 + 4);
  v389 = &v409->mBuffers[0].mData;
  v390 = &v408->mBuffers[0].mData;
  v388 = &v410->mBuffers[0].mData;
  v15 = 1;
  v394 = v149;
  while (1)
  {
    if (*v149 - 65 <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v427.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v427.mHostTime) = 1024;
        *(_DWORD *)((char *)&v427.mHostTime + 6) = 412;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
      }
      v372 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v372 = &off_1E69EE218;
      v372[2] = -50;
    }
    MEMORY[0x1E0C80A78](v145);
    v166 = (AudioBufferList *)((char *)&v385 - v165);
    bzero((char *)&v385 - v165, v167);
    v166->mNumberBuffers = *v149;
    if (v148)
    {
      v169 = *v148;
      if ((v169 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v427.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v427.mHostTime) = 1024;
          *(_DWORD *)((char *)&v427.mHostTime + 6) = 414;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
        }
        v376 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v376 = &off_1E69EE218;
        v376[2] = -50;
      }
    }
    else
    {
      v169 = 1;
    }
    MEMORY[0x1E0C80A78](v168);
    v171 = (int *)((char *)&v385 - v170);
    bzero((char *)&v385 - v170, v172);
    v403 = (unsigned int *)v171;
    *v171 = v169;
    v174 = v409;
    if (v408)
    {
      v175 = v408->mNumberBuffers;
      if (v408->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v427.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v427.mHostTime) = 1024;
          *(_DWORD *)((char *)&v427.mHostTime + 6) = 416;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
        }
        v378 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v378 = &off_1E69EE218;
        v378[2] = -50;
      }
    }
    else
    {
      v175 = 1;
    }
    MEMORY[0x1E0C80A78](v173);
    v177 = (int *)((char *)&v385 - v176);
    bzero((char *)&v385 - v176, v178);
    v402 = v177;
    *v177 = v175;
    if (v174)
    {
      v180 = v174->mNumberBuffers;
      if (v174->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v427.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
          WORD2(v427.mHostTime) = 1024;
          *(_DWORD *)((char *)&v427.mHostTime + 6) = 418;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
        }
        v380 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v380 = &off_1E69EE218;
        v380[2] = -50;
      }
    }
    else
    {
      v180 = 1;
    }
    MEMORY[0x1E0C80A78](v179);
    v182 = (int *)((char *)&v385 - v181);
    bzero((char *)&v385 - v181, v183);
    *v182 = v180;
    v185 = (_DWORD *)*((_QWORD *)v9 + 203);
    if (!*((_BYTE *)v9 + 2244))
      goto LABEL_322;
    if (!v185)
      goto LABEL_325;
    if (*v185)
    {
      v186 = 0;
      v187 = (void **)(v185 + 4);
      do
      {
        bzero(*v187, *((unsigned int *)v187 - 1));
        ++v186;
        v187 += 2;
      }
      while (v186 < *v185);
      v185 = (_DWORD *)*((_QWORD *)v9 + 203);
LABEL_322:
      if (!v185)
      {
LABEL_325:
        v188 = 1;
        goto LABEL_326;
      }
    }
    v188 = *v185;
    if ((*v185 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v427.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v427.mHostTime) = 1024;
        *(_DWORD *)((char *)&v427.mHostTime + 6) = 424;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
      }
      v382 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v382 = &off_1E69EE218;
      v382[2] = -50;
    }
LABEL_326:
    MEMORY[0x1E0C80A78](v184);
    v190 = (UInt32 *)((char *)&v385 - v189);
    bzero((char *)&v385 - v189, v191);
    v401 = v190;
    *v190 = v188;
    v193 = v410->mNumberBuffers;
    if ((v193 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v427.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v427.mHostTime) = 1024;
        *(_DWORD *)((char *)&v427.mHostTime + 6) = 426;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
      }
      v373 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v373 = &off_1E69EE218;
      v373[2] = -50;
    }
    MEMORY[0x1E0C80A78](v192);
    v195 = (int *)((char *)&v385 - v194);
    bzero((char *)&v385 - v194, v196);
    *v195 = v193;
    v197 = v166->mNumberBuffers;
    if ((_DWORD)v197)
    {
      v198 = 4 * *((_DWORD *)v9 + 129);
      v199 = v404;
      v200 = &v166->mBuffers[0].mData;
      v201 = v392;
      do
      {
        *((_DWORD *)v200 - 2) = 1;
        *((_DWORD *)v200 - 1) = v198;
        v202 = *v201;
        v201 += 2;
        *v200 = (void *)(v202 + 4 * v199);
        v200 += 2;
        --v197;
      }
      while (v197);
    }
    v203 = *v403;
    if ((_DWORD)v203)
    {
      v204 = 4 * *((_DWORD *)v9 + 129);
      v205 = v404;
      v206 = (uint64_t *)(v403 + 4);
      v207 = v391;
      do
      {
        *((_DWORD *)v206 - 2) = 1;
        *((_DWORD *)v206 - 1) = v204;
        v208 = (uint64_t)v407;
        if (v407)
          v208 = *v207 + 4 * v205;
        *v206 = v208;
        v206 += 2;
        v207 += 2;
        --v203;
      }
      while (v203);
    }
    v209 = *v402;
    if ((_DWORD)v209)
    {
      v210 = 4 * *((_DWORD *)v9 + 129);
      v211 = v404;
      v212 = (uint64_t *)(v402 + 4);
      v213 = v390;
      do
      {
        *((_DWORD *)v212 - 2) = 1;
        *((_DWORD *)v212 - 1) = v210;
        v214 = (uint64_t)v408;
        if (v408)
          v214 = (uint64_t)*v213 + 4 * v211;
        *v212 = v214;
        v212 += 2;
        v213 += 2;
        --v209;
      }
      while (v209);
    }
    v215 = *v182;
    if ((_DWORD)v215)
    {
      v216 = 4 * *((_DWORD *)v9 + 129);
      v217 = v404;
      v218 = (AudioBufferList **)(v182 + 4);
      v219 = v389;
      do
      {
        *((_DWORD *)v218 - 2) = 1;
        *((_DWORD *)v218 - 1) = v216;
        v220 = v409;
        if (v409)
          v220 = (AudioBufferList *)((char *)*v219 + 4 * v217);
        *v218 = v220;
        v218 += 2;
        v219 += 2;
        --v215;
      }
      while (v215);
    }
    if ((_DWORD)v193)
    {
      v221 = 4 * *((_DWORD *)v9 + 129);
      v222 = v404;
      v223 = (AudioBufferList **)(v195 + 4);
      v224 = v388;
      do
      {
        *((_DWORD *)v223 - 2) = 1;
        *((_DWORD *)v223 - 1) = v221;
        v225 = v410;
        if (v410)
          v225 = (AudioBufferList *)((char *)*v224 + 4 * v222);
        *v223 = v225;
        v223 += 2;
        v224 += 2;
        --v193;
      }
      while (v193);
    }
    v226 = v409;
    if (v188)
    {
      v227 = 4 * *((_DWORD *)v9 + 129);
      v228 = v404;
      v229 = v188;
      v230 = v401 + 4;
      v231 = v185 + 4;
      do
      {
        *(v230 - 2) = 1;
        *(v230 - 1) = v227;
        if (v185)
          v232 = *v231 + 4 * v228;
        else
          v232 = 0;
        *(_QWORD *)v230 = v232;
        v230 += 4;
        v231 += 2;
        --v229;
      }
      while (v229);
    }
    if (v226 && *((_BYTE *)v9 + 2244))
      CopyAllBuffersABL(v401, v226);
    v397 = *((_DWORD *)v9 + 129);
    v233 = v9;
    MonoABL = GetMonoABL(v166, &v432, v397);
    if (v407)
      v235 = (AudioBufferList *)v403;
    else
      v235 = 0;
    v16 = (uint64_t)GetMonoABL(v235, &v431, *((unsigned int *)v233 + 129));
    if (v408)
      v236 = (AudioBufferList *)v402;
    else
      v236 = 0;
    v398 = GetMonoABL(v236, &v416, *((unsigned int *)v233 + 129));
    if (v226)
      v237 = (AudioBufferList *)v182;
    else
      v237 = 0;
    v238 = GetMonoABL(v237, &v415, *((unsigned int *)v233 + 129));
    v239 = *((_QWORD *)v233 + 1104);
    if ((v239 & 0x40000000) == 0 || (v240 = *((_QWORD *)v233 + 1105), (v240 & 0x40000000) == 0))
    {
LABEL_370:
      v241 = 0;
      goto LABEL_371;
    }
    if (!*((_QWORD *)v233 + 467))
    {
      v241 = 0;
      goto LABEL_371;
    }
    v241 = 0;
    if ((v239 & v240 & 0x80000000) == 0)
      goto LABEL_371;
    if (!*((_QWORD *)v406 + 468))
      goto LABEL_370;
    v257 = (uint64_t *)v385;
    if (!vp::Audio_Buffer::get_audio_buffer_list(v385))
      goto LABEL_370;
    vp::Audio_Buffer::prepare(v257, *((_DWORD *)v406 + 129));
    audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v257);
    if (*audio_buffer_list)
    {
      v259 = audio_buffer_list;
      v260 = 0;
      v261 = (void **)(audio_buffer_list + 4);
      do
      {
        bzero(*v261, *((unsigned int *)v261 - 1));
        ++v260;
        v261 += 2;
      }
      while (v260 < *v259);
    }
    v262 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v385);
    LODWORD(v427.mSampleTime) = 512;
    v263 = (uint64_t)v406;
    AudioUnitSetParameter(*((AudioUnit *)v406 + 467), 1u, 0, 0, (float)(*((float *)v406 + 3116) + -1.0) * 24.0, 0);
    AudioUnitProcess(*(AudioUnit *)(v263 + 3736), (AudioUnitRenderActionFlags *)&v427, &v434, *(_DWORD *)(v263 + 516), v262);
    v264 = *(unsigned int *)(v263 + 516);
    v434.mSampleTime = v434.mSampleTime + (double)v264;
    if (v400[3409] || v400[3410])
    {
      VoiceProcessorV2::SaveFilesWriteSignal(v263, 0x3Du, v264, v262, &v434);
      LODWORD(v264) = *(_DWORD *)(v263 + 516);
    }
    LODWORD(v427.mSampleTime) = 512;
    AudioUnitProcess(*(AudioUnit *)(v263 + 3744), (AudioUnitRenderActionFlags *)&v427, &v433, v264, v262);
    v265 = *(unsigned int *)(v263 + 516);
    if (v400[3409] || v400[3410])
    {
      VoiceProcessorV2::SaveFilesWriteSignal(v263, 0x3Eu, v265, v262, &v433);
      v265 = *(unsigned int *)(v263 + 516);
      v266 = v400[3409];
      v433.mSampleTime = v433.mSampleTime + (double)v265;
      if (v266)
        goto LABEL_512;
    }
    else
    {
      v433.mSampleTime = v433.mSampleTime + (double)v265;
    }
    if (v400[3410])
LABEL_512:
      VoiceProcessorV2::SaveFilesWriteSignal(v263, 0x3Fu, v265, v262, &v433);
    v241 = (uint64_t)v262;
LABEL_371:
    v242 = *((unsigned __int8 *)v406 + 2244);
    a7 = *((_BYTE *)v406 + 2244) ? (AudioTimeStamp *)v195 : (AudioTimeStamp *)MonoABL;
    p_mRateScalar = *((_BYTE *)v406 + 2244) ? (Float64 *)v401 : (Float64 *)v238;
    v244 = p_mRateScalar ? (AudioUnitParameterValue *)p_mRateScalar : (AudioUnitParameterValue *)v241;
    v405 = v244;
    v245 = *((_QWORD *)v406 + 1104);
    if ((v245 & 0x8000) != 0 && (v246 = *((_QWORD *)v406 + 1105), (v246 & 0x8000) != 0) && *((_QWORD *)v406 + 452))
    {
      v414 = 512;
      v247 = (UInt64)v403;
      if (v407 == 0 || v242 == 0)
        v247 = v16;
      *(_QWORD *)&v427.mSampleTime = MonoABL;
      v427.mHostTime = v247;
      v248 = *(double *)&v402;
      if (v408 == 0 || v242 == 0)
        v248 = *(double *)&v398;
      p_mNumberBuffers = v401;
      if (v409 == 0 || v242 == 0)
        p_mNumberBuffers = &v238->mNumberBuffers;
      v427.mRateScalar = v248;
      v427.mWordClockTime = (UInt64)p_mNumberBuffers;
      *(_QWORD *)&v427.mSMPTETime.mSubframes = v241;
      v429 = (AudioBufferList *)a7;
      v430 = v405;
      if ((v245 & 0x8000000) != 0)
      {
        v241 = (uint64_t)v400;
        if (((v246 & 0x8000000) != 0 || *((_BYTE *)v406 + 472)) && p_mRateScalar)
        {
          v267 = 1.0;
          if (!v242)
            v267 = *((float *)v406 + 3119);
          v268 = *((float *)v406 + 1114) + (float)((float)(*((float *)v406 + 1115) - *((float *)v406 + 1114)) * v267);
          *((float *)v406 + 1113) = v268;
          v413 = 0.0;
          v413 = __exp10f(v268 / 20.0);
          v412 = p_mRateScalar;
          v428[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v412);
          v428[1] = v269;
          v411[0] = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v412);
          v411[1] = v270;
          v241 = (uint64_t)v400;
          while (vp::Audio_Buffer_Iterator::operator!=(v428, v411))
          {
            data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v428);
            v272 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v428);
            vDSP_vsmul(data, 1, &v413, v272, 1, *((unsigned int *)v406 + 129));
            vp::Audio_Buffer_Iterator::operator++((uint64_t)v428);
          }
          v245 = *((_QWORD *)v406 + 1104);
        }
      }
      else
      {
        v241 = (uint64_t)v400;
      }
      v16 = (uint64_t)v406;
      if ((v245 & 0x10000000) != 0 && (*((_BYTE *)v406 + 8843) & 0x10) != 0)
        (*(void (**)(VoiceProcessorV3 *, AudioBufferList *, UInt32 *))(*(_QWORD *)v406 + 672))(v406, MonoABL, v401);
      AudioUnitProcessMultiple(*(AudioUnit *)(v16 + 3616), &v414, &v420, *(_DWORD *)(v16 + 516), 5u, (const AudioBufferList **)&v427, 2u, &v429);
      v273 = *(unsigned int *)(v16 + 516);
      v420.mSampleTime = v420.mSampleTime + (double)v273;
      if (*(_BYTE *)(v241 + 3409) || *(_BYTE *)(v241 + 3410))
      {
        VoiceProcessorV2::SaveFilesWriteSignal(v16, 0x59u, v273, (const AudioBufferList *)a7, &v420);
        if (*(_BYTE *)(v241 + 3409) || *(_BYTE *)(v241 + 3410))
          VoiceProcessorV2::SaveFilesWriteSignal(v16, 0x76u, *(unsigned int *)(v16 + 516), (const AudioBufferList *)v405, &v420);
      }
      v9 = (VoiceProcessorV3 *)v16;
    }
    else
    {
      if (v16)
      {
        LODWORD(v427.mSampleTime) = 1055175620;
        vDSP_vsma(*(const float **)(v16 + 16), 1, (const float *)&v427, (const float *)MonoABL->mBuffers[0].mData, 1, (float *)MonoABL->mBuffers[0].mData, 1, *((unsigned int *)v406 + 129));
      }
      v403 = (unsigned int *)v241;
      if (v398)
        vDSP_vadd((const float *)MonoABL->mBuffers[0].mData, 1, (const float *)v398->mBuffers[0].mData, 1, (float *)MonoABL->mBuffers[0].mData, 1, *((unsigned int *)v406 + 129));
      v250 = MonoABL->mNumberBuffers;
      if ((_DWORD)v250)
      {
        v16 = 0;
        v241 = 0;
        p_mRateScalar = &a7->mRateScalar;
        do
        {
          v251 = *(void **)((char *)&MonoABL->mBuffers[0].mData + v16);
          v252 = *(void **)((char *)p_mRateScalar + v16);
          if (v251 != v252)
          {
            memcpy(v252, v251, *(unsigned int *)((char *)&MonoABL->mBuffers[0].mDataByteSize + v16));
            v250 = MonoABL->mNumberBuffers;
          }
          ++v241;
          v16 += 16;
        }
        while (v241 < v250);
      }
      if (v238)
      {
        v9 = v406;
        v16 = (uint64_t)v403;
        if ((*((_BYTE *)v406 + 8835) & 8) != 0 && ((*((_BYTE *)v406 + 8843) & 8) != 0 || *((_BYTE *)v406 + 472)))
        {
          v253 = *((float *)v406 + 1114)
               + (float)((float)(*((float *)v406 + 1115) - *((float *)v406 + 1114)) * *((float *)v406 + 3119));
          *((float *)v406 + 1113) = v253;
          LODWORD(v427.mSampleTime) = 0;
          LODWORD(v427.mSampleTime) = __exp10f(v253 / 20.0);
          vDSP_vsmul((const float *)v238->mBuffers[0].mData, 1, (const float *)&v427, (float *)v238->mBuffers[0].mData, 1, *((unsigned int *)v9 + 129));
        }
        if (v16)
          vDSP_vadd((const float *)v238->mBuffers[0].mData, 1, *(const float **)(v16 + 16), 1, (float *)v238->mBuffers[0].mData, 1, *((unsigned int *)v9 + 129));
      }
      else
      {
        v238 = (AudioBufferList *)v403;
        v9 = v406;
      }
      if (v405)
      {
        if (v238)
        {
          v254 = v238->mNumberBuffers;
          if ((_DWORD)v254)
          {
            v16 = 0;
            v241 = 0;
            p_mRateScalar = (Float64 *)(v405 + 4);
            do
            {
              v255 = *(void **)((char *)&v238->mBuffers[0].mData + v16);
              v256 = *(void **)((char *)p_mRateScalar + v16);
              if (v255 != v256)
              {
                memcpy(v256, v255, *(unsigned int *)((char *)&v238->mBuffers[0].mDataByteSize + v16));
                v254 = v238->mNumberBuffers;
              }
              ++v241;
              v16 += 16;
            }
            while (v241 < v254);
          }
        }
      }
    }
    v274 = *((_QWORD *)v9 + 1104);
    if ((v274 & 0x8000) != 0 && (*((_BYTE *)v9 + 8841) & 0x80) != 0)
    {
      v10 = v400;
      if (*((_QWORD *)v9 + 452) && *((_BYTE *)v9 + 2244))
      {
        v307 = ((__n128 (*)(VoiceProcessorV3 *, AudioTimeStamp *, _OWORD *))*(_QWORD *)(*(_QWORD *)v9 + 648))(v9, a7, v417);
        v307.n128_u32[0] = *((_DWORD *)v9 + 129);
        *(double *)v417 = *(double *)v417 + (double)v307.n128_u64[0];
        v274 = *((_QWORD *)v9 + 1104);
      }
    }
    else
    {
      v10 = v400;
    }
    if ((v274 & 0x200000) != 0 && (*((_BYTE *)v9 + 8842) & 0x20) != 0 && *((_QWORD *)v9 + 458))
    {
      LODWORD(v430) = 0;
      v429 = 0;
      v275 = *((float *)v9 + 3117);
      v276 = *((float *)v9 + 3118);
      if (v10[3409])
      {
        v277 = *((_DWORD *)v9 + 3119);
        LODWORD(v429) = *((_DWORD *)v9 + 3117);
        *((float *)&v429 + 1) = v276;
        LODWORD(v430) = v277;
        VoiceProcessorV2::WriteControlDataToFile((uint64_t)v9, (char *)&v429, 0xCu, 0x34u);
      }
      v278 = *(double *)v386;
      v279 = (float)(v276 - v275) / (v164 / *(double *)v386);
      v280 = 2000.0;
      if (v279 <= 2000.0)
      {
        v280 = v279;
        if (v279 < -5000.0)
          v280 = -5000.0;
      }
      v16 = *((unsigned int *)v9 + 129);
      AudioUnitSetParameter(*((AudioUnit *)v9 + 458), 5u, 0, 0, 0.0, 0);
      v281 = (float)v16 / v278 * v280;
      *((float *)v9 + 3117) = v275 + (float)((float)v16 * (float)(v281 / (float)v16));
      LODWORD(v411[0]) = 512;
      *(_QWORD *)&v427.mSampleTime = a7;
      v427.mHostTime = (UInt64)v405;
      v428[0] = (AudioBufferList *)a7;
      AudioUnitProcessMultiple(*((AudioUnit *)v9 + 458), (AudioUnitRenderActionFlags *)v411, &v419, *((_DWORD *)v9 + 129), 2u, (const AudioBufferList **)&v427, 1u, v428);
      LODWORD(v282) = *((_DWORD *)v9 + 129);
      v419.mSampleTime = v419.mSampleTime + (double)v282;
    }
    else
    {
      v283 = 1.0;
      if (!*((_BYTE *)v9 + 2244))
        v283 = *((float *)v9 + 3119);
      *(float *)v411 = v283;
      vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v427, (const AudioBufferList *)a7);
      v428[0] = *(AudioBufferList **)&v427.mSampleTime;
      *(_QWORD *)&v427.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v428);
      v427.mHostTime = v284;
      v429 = (AudioBufferList *)vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v428);
      v430 = v285;
      while (vp::Audio_Buffer_Iterator::operator!=(&v427, &v429))
      {
        v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v427);
        v286 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v427);
        vDSP_vsmul((const float *)v16, 1, (const float *)v411, v286, 1, *((unsigned int *)v9 + 129));
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v427);
      }
      if (v10[3409] || v10[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x37u, *((unsigned int *)v9 + 129), (const AudioBufferList *)a7, v396);
    }
    if (!a7)
      break;
    if (!v405 || (*((_BYTE *)v9 + 8835) & 0x20) == 0 || (*((_BYTE *)v9 + 8843) & 0x20) == 0 && !*((_BYTE *)v9 + 472))
    {
      mSampleTime_low = *v195;
      if (*v195 >= LODWORD(a7->mSampleTime))
        mSampleTime_low = LODWORD(a7->mSampleTime);
      if (mSampleTime_low)
      {
        v288 = 0;
        v289 = 0;
        do
        {
          v290 = *(_DWORD *)((char *)&a7->mHostTime + v288 * 4 + 4);
          v291 = v195[v288 + 3];
          if (v290 >= v291)
            v292 = v291;
          else
            v292 = v290;
          memcpy(*(void **)&v195[v288 + 4], *(const void **)((char *)&a7->mRateScalar + v288 * 4), v292);
          ++v289;
          LODWORD(v293) = *v195;
          if (*v195 >= LODWORD(a7->mSampleTime))
            v293 = LODWORD(a7->mSampleTime);
          else
            v293 = v293;
          v288 += 4;
        }
        while (v289 < v293);
      }
      goto LABEL_494;
    }
    if (*((_BYTE *)v9 + 2244))
    {
      v294 = *((_DWORD *)v9 + 89);
      v295 = LODWORD(a7->mSampleTime);
LABEL_488:
      if (v295)
      {
        v296 = 0;
        v297 = v294 - 1;
        v298 = 4;
        do
        {
          if (v297 >= v296)
            v299 = v296;
          else
            v299 = v297;
          vDSP_vadd(*(const float **)((char *)&a7->mSampleTime + v298 * 4), 1, *(const float **)&v405[4 * v299 + 4], 1, *(float **)&v195[v298], 1, *((unsigned int *)v9 + 129));
          ++v296;
          v298 += 4;
        }
        while (v296 < LODWORD(a7->mSampleTime));
      }
      goto LABEL_494;
    }
    v295 = LODWORD(a7->mSampleTime);
    v294 = 1;
    v308 = LODWORD(a7->mSampleTime) - 1;
    if (LODWORD(a7->mSampleTime) == 1)
      goto LABEL_488;
    while ((v308 & 0x80000000) == 0)
    {
      v309 = (const float *)*((_QWORD *)&a7->mRateScalar + 2 * v308);
      v310 = *(const float **)&v405[4 * (v308 & (v308 >> 31)) + 4];
      v311 = *(float **)&v195[4 * v308-- + 4];
      vDSP_vadd(v309, 1, v310, 1, v311, 1, *((unsigned int *)v9 + 129));
    }
LABEL_494:
    v300 = VoiceProcessorV2::GetDynamicsDSPChannelCount(v9);
    if ((v300 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v427.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v427.mSampleTime + 4) = "vpProcessDownlink_v3.cpp";
        WORD2(v427.mHostTime) = 1024;
        *(_DWORD *)((char *)&v427.mHostTime + 6) = 712;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v427, 0x12u);
      }
      v374 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v374 = &off_1E69EE218;
      v374[2] = -50;
    }
    v301 = v300;
    MEMORY[0x1E0C80A78](v300);
    v303 = (AudioBufferList *)((char *)&v385 - v302);
    bzero((char *)&v385 - v302, v304);
    v303->mNumberBuffers = v301;
    v145 = (uint64_t)memcpy(v303->mBuffers, v195 + 2, 16 * v301);
    v147 = v395;
    a7 = v396;
    if (v10[3409] || v10[3410])
      v145 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v9, 0x35u, *((unsigned int *)v9 + 129), v303, v396);
    v149 = v394;
    if ((*((_BYTE *)v9 + 8836) & 1) != 0 && (*((_BYTE *)v9 + 8844) & 1) != 0)
    {
      v145 = *((_QWORD *)v9 + 469);
      if (v145)
      {
        LODWORD(v427.mSampleTime) = 512;
        v145 = AudioUnitProcess((AudioUnit)v145, (AudioUnitRenderActionFlags *)&v427, &v418, *((_DWORD *)v9 + 129), v303);
        LODWORD(v305) = *((_DWORD *)v9 + 129);
        v418.mSampleTime = v418.mSampleTime + (double)v305;
      }
    }
    LODWORD(v404) = v397 + (_DWORD)v404;
    v306 = *((_DWORD *)v9 + 130);
    ++v399;
    v148 = (int *)v407;
    if (v399 >= v306)
      goto LABEL_514;
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_641:
  dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
LABEL_612:
  v357 = (double)v241 * 0.0000000416666667 - v17;
  CALegacyLog::log(v195, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 876, "ProcessDownlinkAudio", "DL %f %f %f", a7->mSampleTime, v17, v357);
  v358 = *((_DWORD *)v9 + 121);
  v359 = *((double *)v9 + 41);
  if (v357 >= (double)v358 / v359)
  {
    v360 = (int *)*((_QWORD *)v9 + 1571);
    if (*((_QWORD *)p_mRateScalar + 44) != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    CALegacyLog::log(v360, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 878, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v357);
    v358 = *((_DWORD *)v9 + 121);
    v359 = *((double *)v9 + 41);
  }
  if (v17 - *((double *)v9 + 1986) > (double)(*((_DWORD *)v9 + 294) + v358) / v359)
  {
    v361 = (int *)*((_QWORD *)v9 + 1571);
    if (*((_QWORD *)p_mRateScalar + 44) != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    CALegacyLog::log(v361, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v3/vpProcessDownlink_v3.cpp", 880, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v17 - *((double *)v9 + 1986));
  }
  *((double *)v9 + 1986) = v17;
LABEL_621:
  if ((v15 & 1) != 0)
  {
    v362 = v410;
    if (*((_DWORD *)v9 + 19) != 1)
    {
      if (*((_BYTE *)v9 + 1648)
        || (v363 = FadeInOverFewFrames(*((AudioBufferList **)v9 + 204), v410, *((unsigned int *)v9 + 410), *((_DWORD *)v9 + 411)), *((_BYTE *)v9 + 1648) = v363, *((_DWORD *)v9 + 410) = HIDWORD(v363), (_BYTE)v363))
      {
        CopyAllBuffersABL(*((UInt32 **)v9 + 204), v362);
      }
    }
  }
  else
  {
    if (*((_DWORD *)v9 + 20) == 1)
    {
      v364 = v410;
      if (!v410->mNumberBuffers)
        goto LABEL_638;
      v365 = 0;
      v366 = &v410->mBuffers[0].mData;
      do
      {
        bzero(*v366, *((unsigned int *)v366 - 1));
        ++v365;
        v366 += 2;
      }
      while (v365 < v364->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)v9 + 410) = 0;
      *((_BYTE *)v9 + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)v9 + 204), v410);
    }
    v367 = *((_DWORD *)v9 + 20);
    if (v367 == 2 || v367 == 4)
      v16 = 0;
  }
  do
LABEL_638:
    v369 = __ldaxr(v11);
  while (__stlxr(v369 - 1, v11));
  return v16;
}

void sub_1B62417F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v4;

  if (*(_DWORD *)(v1 + 68))
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16));
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  _Unwind_Resume(exception_object);
}

_DWORD *ABLRingBuffer<float>::ReadFrom(_DWORD *result, unsigned int a2, _DWORD *a3)
{
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;

  if (a2)
  {
    v4 = result;
    if (*a3 == result[1])
    {
      v5 = result[2];
      if (v5)
      {
        if (v5 >= a2)
          v6 = a2;
        else
          v6 = result[2];
        v7 = *result - result[3];
        if (v7 >= v6)
          v8 = v6;
        else
          v8 = v7;
        if (*a3)
        {
          v9 = 0;
          v10 = (void **)(a3 + 4);
          do
          {
            v11 = *v10;
            v10 += 2;
            result = memcpy(v11, (const void *)(*((_QWORD *)v4 + 3) + 4 * (v4[3] + *v4 * v9++)), 4 * v8);
            v12 = v4[1];
          }
          while (v9 < v12);
          if (v6 > v7 && (_DWORD)v12)
          {
            v13 = 0;
            v14 = (uint64_t *)(a3 + 4);
            do
            {
              v15 = *v14;
              v14 += 2;
              result = memcpy((void *)(v15 + 4 * v8), (const void *)(*((_QWORD *)v4 + 3) + 4 * (*v4 * v13++)), 4 * (v6 - v8));
            }
            while (v13 < v4[1]);
          }
        }
        v16 = v4[3] + v6;
        v4[2] -= v6;
        v4[3] = v16;
        if (v16 >= *v4)
          v4[3] = v16 - *v4;
      }
    }
  }
  return result;
}

void VoiceProcessorV3::DecorrelationAndCNGForMediaChat(VoiceProcessorV3 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  char *v6;
  OpaqueAudioComponentInstance *v7;
  float v8;
  uint64_t v9;
  const float *mData;
  uint64_t audio_buffer_list;
  const float *v12;
  uint64_t v13;
  AudioUnitRenderActionFlags v14;
  AudioUnitParameterValue outValue;
  AudioBufferList *ioOutputBufferLists;
  AudioBufferList *inInputBufferLists[2];

  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E0C80C00];
  v6 = (char *)this + 15897;
  outValue = -200.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 452), 0xCu, 0, 0, &outValue);
  if (outValue <= -60.0)
  {
    v8 = *((float *)this + 413) + -1.5;
    if (v8 < -60.0)
      v8 = -60.0;
  }
  else
  {
    if ((*((_BYTE *)this + 8834) & 1) != 0 && (*((_BYTE *)this + 8842) & 1) != 0)
    {
      v7 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 453);
      if (v7)
      {
        v14 = 512;
        ioOutputBufferLists = a2;
        inInputBufferLists[0] = a2;
        AudioUnitProcessMultiple(v7, &v14, a3, *((_DWORD *)this + 129), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
      }
    }
    v8 = *((float *)this + 413) + 0.5;
    if (v8 > 0.0)
      v8 = 0.0;
  }
  *((float *)this + 413) = v8;
  if (*v6 || v6[1])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x78u, *((unsigned int *)this + 129), a2, a3);
  v9 = *((_QWORD *)this + 1104);
  if ((v9 & 0x20000) != 0 && (*((_BYTE *)this + 8842) & 2) != 0 && *((_QWORD *)this + 454))
  {
    (*(void (**)(VoiceProcessorV3 *, _QWORD, AudioTimeStamp *))(*(_QWORD *)this + 656))(this, 0, a3);
    mData = (const float *)a2->mBuffers[0].mData;
    audio_buffer_list = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2752));
    vDSP_vadd(mData, 1, *(const float **)(audio_buffer_list + 16), 1, (float *)a2->mBuffers[0].mData, 1, *((unsigned int *)this + 129));
    v9 = *((_QWORD *)this + 1104);
  }
  if ((v9 & 0x80000) != 0 && (*((_BYTE *)this + 8842) & 8) != 0 && *((_QWORD *)this + 456))
  {
    (*(void (**)(VoiceProcessorV3 *, uint64_t, AudioTimeStamp *))(*(_QWORD *)this + 656))(this, 1, a3);
    v12 = *(const float **)&a2[1].mBuffers[0].mNumberChannels;
    v13 = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2760));
    vDSP_vadd(v12, 1, *(const float **)(v13 + 16), 1, *(float **)&a2[1].mBuffers[0].mNumberChannels, 1, *((unsigned int *)this + 129));
  }
  if (*v6 || v6[1])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x79u, *((unsigned int *)this + 129), a2, a3);
}

uint64_t VoiceProcessorV3::CNGAndEqForMediaChat(VoiceProcessorV3 *this, int a2, const AudioTimeStamp *a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *audio_buffer_list;
  AudioBufferList *v9;
  unint64_t v10;
  void **v11;
  AudioUnit *v12;
  uint64_t result;
  AudioUnitRenderActionFlags ioActionFlags;

  if (a2)
    v5 = (uint64_t *)((char *)this + 2760);
  else
    v5 = (uint64_t *)((char *)this + 2752);
  if (a2)
    v6 = 20;
  else
    v6 = 18;
  if (a2)
    v7 = 19;
  else
    v7 = 17;
  vp::Audio_Buffer::prepare(v5, *((_DWORD *)this + 129));
  audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v5);
  v9 = (AudioBufferList *)audio_buffer_list;
  if (*audio_buffer_list)
  {
    v10 = 0;
    v11 = (void **)(audio_buffer_list + 4);
    do
    {
      bzero(*v11, *((unsigned int *)v11 - 1));
      ++v10;
      v11 += 2;
    }
    while (v10 < v9->mNumberBuffers);
  }
  ioActionFlags = 512;
  v12 = (AudioUnit *)((char *)this + 8 * v7);
  AudioUnitSetParameter(v12[437], 1u, 0, 0, *((float *)this + 413) + (float)((float)(*((float *)this + 3116) + -1.0) * 24.0), 0);
  AudioUnitProcess(v12[437], &ioActionFlags, a3, *((_DWORD *)this + 129), v9);
  result = VoiceProcessorV2::VPUseAUInProcess(this, v6, 0);
  if ((_DWORD)result)
  {
    ioActionFlags = 512;
    return AudioUnitProcess(*((AudioUnit *)this + v6 + 437), &ioActionFlags, a3, *((_DWORD *)this + 129), v9);
  }
  return result;
}

uint64_t VoiceProcessorV3::DownlinkAGCForMediaChat(VoiceProcessorV3 *this, AudioBufferList *a2, unsigned int a3, const AudioTimeStamp *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  float v13;
  const float *data;
  uint64_t audio_buffer_list;
  uint64_t v16;
  OpaqueAudioComponentInstance *v17;
  OpaqueAudioComponentInstance *v18;
  int v19;
  OpaqueAudioComponentInstance *v20;
  AudioBufferList *v21;
  float v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;
  float *v27;
  float v28;
  float v29;
  AudioUnitRenderActionFlags ioActionFlags;
  uint64_t v31;
  uint64_t v32;
  AudioUnitParameterValue outValue[2];
  uint64_t v34;
  AudioBufferList *v35;
  float __C;
  AudioUnitParameterValue v37;
  UInt32 ioDataSize;
  int outData;

  ioDataSize = 4;
  outData = 0;
  v37 = 0.0;
  result = AudioUnitGetProperty(*((AudioUnit *)this + 451), 0x15u, 0, 0, &outData, &ioDataSize);
  if (!outData)
  {
    __C = 0.0;
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v35, a2);
    *(_QWORD *)outValue = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v35);
    v34 = v9;
    v10 = 0;
    v11 = 0;
    v31 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v35);
    v32 = v12;
    v13 = -1.0;
    while (vp::Audio_Buffer_Iterator::operator!=(outValue, &v31))
    {
      data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      vDSP_svesq(data, 1, &__C, a3);
      if (__C > v13)
      {
        v13 = __C;
        v11 = v10;
      }
      ++v10;
      vp::Audio_Buffer_Iterator::operator++((uint64_t)outValue);
    }
    vp::Audio_Buffer::prepare((uint64_t *)this + 346, a3);
    audio_buffer_list = vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2768));
    memcpy(*(void **)(audio_buffer_list + 16), a2->mBuffers[v11].mData, a2->mBuffers[v11].mDataByteSize);
    ioActionFlags = 512;
    v16 = *((_QWORD *)this + 1104);
    if ((v16 & 2) != 0 && (*((_BYTE *)this + 8840) & 2) != 0)
    {
      v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 438);
      if (v17)
      {
        outValue[0] = 0.0;
        AudioUnitGetParameter(v17, 0x73707066u, 0, 0, outValue);
        AudioUnitSetParameter(*((AudioUnit *)this + 451), 0x23u, 0, 0, outValue[0], 0);
        v16 = *((_QWORD *)this + 1104);
      }
    }
    if ((v16 & 0x8000) != 0 && (*((_BYTE *)this + 8841) & 0x80) != 0)
    {
      v18 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
      if (v18)
      {
        outValue[0] = -200.0;
        AudioUnitGetParameter(v18, 0x14u, 0, 0, outValue);
        v19 = *((_DWORD *)this + 566);
        if (v19)
        {
          *((_DWORD *)this + 566) = v19 - 1;
        }
        else
        {
          v28 = *((float *)this + 1120);
          if (outValue[0] <= v28 || *((_DWORD *)this + 568))
          {
            if (outValue[0] <= v28 && *((_DWORD *)this + 568) == 1)
            {
              AudioUnitSetParameter(*((AudioUnit *)this + 451), 8u, 0, 0, *((AudioUnitParameterValue *)this + 569), 0);
              AudioUnitSetParameter(*((AudioUnit *)this + 451), 0x2Bu, 0, 0, *((AudioUnitParameterValue *)this + 570), 0);
              *((_DWORD *)this + 566) = *((float *)this + 1121);
              *((_DWORD *)this + 568) = 0;
            }
          }
          else
          {
            AudioUnitSetParameter(*((AudioUnit *)this + 451), 8u, 0, 0, *((AudioUnitParameterValue *)this + 1119), 0);
            AudioUnitSetParameter(*((AudioUnit *)this + 451), 0x2Bu, 0, 0, *((AudioUnitParameterValue *)this + 1118), 0);
            *((_DWORD *)this + 566) = *((float *)this + 1121);
            *((_DWORD *)this + 568) = 1;
          }
        }
      }
    }
    v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 451);
    v21 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((VoiceProcessorV3 *)((char *)this + 2768));
    AudioUnitProcess(v20, &ioActionFlags, a4, a3, v21);
    AudioUnitGetParameter(*((AudioUnit *)this + 451), 1u, 0, 0, &v37);
    v22 = __exp10f(v37 / 20.0);
    v23 = (float *)((char *)this + 16760);
    v29 = (float)(v22 - *v23) / (float)a3;
    v35 = a2;
    *(_QWORD *)outValue = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v35);
    v34 = v24;
    v31 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v35);
    v32 = v25;
    while (1)
    {
      result = vp::Audio_Buffer_Iterator::operator!=(outValue, &v31);
      if ((result & 1) == 0)
        break;
      v26 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      v27 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)outValue);
      vDSP_vrampmul(v26, 1, v23, &v29, v27, 1, a3);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)outValue);
    }
    *v23 = v22;
  }
  return result;
}

BOOL VoiceProcessorV3::ApplyMediaChatGains(VoiceProcessorV3 *this, AudioBufferList *a2, AudioBufferList *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  float *v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  const float *v20;
  float *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  const float *data;
  float *v26;
  unsigned int frame_count;
  uint64_t v28;
  uint64_t v29;
  const float *v30;
  const float *v31;
  float *v32;
  unsigned int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float __Step;

  v6 = COERCE_FLOAT(atomic_load((unsigned int *)this + 562));
  if (*((float *)this + 563) == v6)
  {
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a2);
    v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    v38 = v23;
    v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    v36 = v24;
    while (vp::Audio_Buffer_Iterator::operator!=(&v37, &v35))
    {
      data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v26 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vsmul(data, 1, (const float *)this + 564, v26, 1, frame_count);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a3);
    v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    v38 = v28;
    v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    v36 = v29;
    v30 = (const float *)((char *)this + 2260);
    while (1)
    {
      result = vp::Audio_Buffer_Iterator::operator!=(&v37, &v35);
      if (!result)
        break;
      v31 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v32 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v33 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vsmul(v31, 1, v30, v32, 1, v33);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
  }
  else
  {
    v7 = 0.0;
    if (v6 <= 0.25)
    {
      v8 = roundf(v6 * 16.0) * 0.0625;
      v9 = (float)((float)((float)(v8 * 16.0) + -1.0) * -0.25) + 1.0;
      if (v8 <= 0.0625)
        v9 = 1.0;
      v7 = v9 * *((float *)this + 1122);
    }
    v10 = __exp10f((float)((float)(*((float *)this + 1116)+ (float)(v6 * (float)(*((float *)this + 1117) - *((float *)this + 1116))))+ v7)* 0.05);
    __Step = (float)(v10 - *((float *)this + 564)) / (float)*((unsigned int *)this + 129);
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a2);
    v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    v38 = v11;
    v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    v36 = v12;
    while (vp::Audio_Buffer_Iterator::operator!=(&v37, &v35))
    {
      v13 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v14 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v15 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vrampmul(v13, 1, (float *)this + 564, &__Step, v14, 1, v15);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    v16 = __exp10f((float)(*((float *)this + 1114) + (float)(v6 * (float)(*((float *)this + 1115) - *((float *)this + 1114))))* 0.05);
    v34 = (float)(v16 - *((float *)this + 565)) / (float)*((unsigned int *)this + 129);
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v39, a3);
    v37 = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v39);
    v38 = v17;
    v35 = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v39);
    v36 = v18;
    while (1)
    {
      result = vp::Audio_Buffer_Iterator::operator!=(&v37, &v35);
      if (!result)
        break;
      v20 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v21 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v37);
      v22 = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&v37);
      vDSP_vrampmul(v20, 1, (float *)this + 565, &v34, v21, 1, v22);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v37);
    }
    *((float *)this + 563) = v6;
    *((float *)this + 564) = v10;
    *((float *)this + 565) = v16;
  }
  return result;
}

id GetSubDictionaryWithKey(const __CFDictionary *a1, const char *a2, char a3)
{
  const __CFDictionary *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  char isKindOfClass;
  id v13;
  void *v14;
  char v15;
  void *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  id v28;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a3 & 1) == 0)
  {
    -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v8 = *(id *)SCLogScope(void)::scope;
        if (!v8)
          goto LABEL_12;
      }
      else
      {
        v8 = (id)MEMORY[0x1E0C81028];
        v9 = MEMORY[0x1E0C81028];
      }
      v10 = v8;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v30 = 136315650;
        v31 = "LoadSpatialCaptureTuning.mm";
        v32 = 1024;
        v33 = 23;
        v34 = 2080;
        v35 = (const char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required key missing '%s'", (uint8_t *)&v30, 0x1Cu);
      }

    }
  }
LABEL_12:
  -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v13 = *(id *)SCLogScope(void)::scope;
      if (!v13)
        goto LABEL_30;
    }
    else
    {
      v13 = (id)MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    v19 = v13;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = objc_msgSend(v20, "UTF8String");
      v30 = 136315906;
      v31 = "LoadSpatialCaptureTuning.mm";
      v32 = 1024;
      v33 = 27;
      v34 = 2080;
      v35 = a2;
      v36 = 2080;
      v37 = v21;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist file for %s from %s", (uint8_t *)&v30, 0x26u);

    }
LABEL_30:
    v22 = (void *)MEMORY[0x1E0C99D80];
    -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "dictionaryWithContentsOfFile:", v23);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v17 = *(id *)SCLogScope(void)::scope;
        if (!v17)
          goto LABEL_44;
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
        v24 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        goto LABEL_43;
      v30 = 136315394;
      v31 = "LoadSpatialCaptureTuning.mm";
      v32 = 1024;
      v33 = 29;
      v25 = "%25s:%-5d Dictionary file not present on disk!";
      v26 = v17;
      v27 = 18;
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v15 = objc_opt_isKindOfClass();

  if ((v15 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
LABEL_44:
      v16 = 0;
      goto LABEL_45;
    }
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v17 = *(id *)SCLogScope(void)::scope;
      if (!v17)
        goto LABEL_44;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
LABEL_43:

      goto LABEL_44;
    }
    v30 = 136315650;
    v31 = "LoadSpatialCaptureTuning.mm";
    v32 = 1024;
    v33 = 33;
    v34 = 2080;
    v35 = a2;
    v25 = "%25s:%-5d Bad object for key '%s'";
    v26 = v17;
    v27 = 28;
LABEL_42:
    _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v30, v27);
    goto LABEL_43;
  }
  -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_45:

  return v16;
}

void sub_1B6242AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t GetCameraDirectionFromString(NSString *a1)
{
  NSString *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char *v6;
  char *v7;
  void *v8;
  BOOL v9;
  id v10;
  id v11;
  NSObject *v12;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = 0;
  v3 = 1;
  while (1)
  {
    v4 = v2;
    v5 = v3;
    v6 = (v3 & 1) != 0 ? "Front" : "?";
    v7 = (v2 & 1) != 0 ? "Back" : v6;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[NSString isEqualToString:](v1, "isEqualToString:", v8);

    if (v9)
      break;
    v3 = 0;
    v2 = 1;
    if ((v5 & 1) == 0)
    {
      if (SCLogScope(void)::once != -1)
        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
      if (SCLogScope(void)::scope)
      {
        v10 = *(id *)SCLogScope(void)::scope;
        if (!v10)
          break;
      }
      else
      {
        v10 = (id)MEMORY[0x1E0C81028];
        v11 = MEMORY[0x1E0C81028];
      }
      v12 = v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315650;
        v15 = "LoadSpatialCaptureTuning.mm";
        v16 = 1024;
        v17 = 96;
        v18 = 2080;
        v19 = -[NSString UTF8String](objc_retainAutorelease(v1), "UTF8String");
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad beam direction string: '%s'", (uint8_t *)&v14, 0x1Cu);
      }

      break;
    }
  }

  return v4;
}

void sub_1B6242D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GetOrientationFromString(NSString *a1)
{
  NSString *v1;
  uint64_t i;
  void *v3;
  BOOL v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  for (i = 0; i != 4; ++i)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (&off_1E69CC158)[i]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[NSString isEqualToString:](v1, "isEqualToString:", v3);

    if (v4)
    {
      v6 = i + 1;
      goto LABEL_15;
    }
  }
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (!SCLogScope(void)::scope)
  {
    v5 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
    goto LABEL_11;
  }
  v5 = *(id *)SCLogScope(void)::scope;
  if (v5)
  {
LABEL_11:
    v8 = v5;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "LoadSpatialCaptureTuning.mm";
      v12 = 1024;
      v13 = 120;
      v14 = 2080;
      v15 = -[NSString UTF8String](objc_retainAutorelease(v1), "UTF8String");
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad orientation string: '%s'", (uint8_t *)&v10, 0x1Cu);
    }

  }
  v6 = 1;
LABEL_15:

  return v6;
}

void sub_1B6242EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *vp::GetAVAUVoiceIOPreferredChatFlavorDidChangeNotificationName(vp *this)
{
  const void *v2;

  v2 = (const void *)*MEMORY[0x1E0C89C40];
  if (*MEMORY[0x1E0C89C40])
    CFRetain((CFTypeRef)*MEMORY[0x1E0C89C40]);
  return applesauce::CF::StringRef::StringRef(this, v2);
}

void vp::GetAVAUVoiceIOAutomaticChatFlavorDidChangeNotificationName(vp *this)
{
  const void **v2;
  void *v3;
  const void *v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (isAutomaticMicModeFeatureFlagOn())
  {
    v6 = 0;
    v7 = &v6;
    v8 = 0x2020000000;
    v2 = (const void **)getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr;
    v9 = getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr;
    if (!getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr)
    {
      v3 = (void *)AVFoundationLibrary();
      v2 = (const void **)dlsym(v3, "AVAUVoiceIOAutoChatFlavorEnabledDidChangeNotification");
      v7[3] = (uint64_t)v2;
      getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr = (uint64_t)v2;
    }
    _Block_object_dispose(&v6, 8);
    if (v2)
    {
      v4 = *v2;
      if (v4 && (CFRetain(v4), v5 = CFGetTypeID(v4), v5 != CFStringGetTypeID()))
      {
        *(_QWORD *)this = 0;
        CFRelease(v4);
      }
      else
      {
        *(_QWORD *)this = v4;
      }
    }
    else
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1B6243054(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 buf)
{
  _QWORD *v11;
  _anonymous_namespace_ *v14;
  NSObject *v15;

  _Block_object_dispose(&buf, 8);
  if (a2 == 2)
  {
    v14 = (_anonymous_namespace_ *)objc_begin_catch(a1);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "AVAUVoiceIOAutoChatFlavorEnabledDidChangeNotification not available", (uint8_t *)&buf, 2u);
    }

    *v11 = 0;
    objc_end_catch();
    JUMPOUT(0x1B6243018);
  }
  __clang_call_terminate(a1);
}

uint64_t isAutomaticMicModeFeatureFlagOn(void)
{
  return _os_feature_enabled_impl();
}

uint64_t AVFoundationLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (AVFoundationLibraryCore(char **)::frameworkLibrary)
    return AVFoundationLibraryCore(char **)::frameworkLibrary;
  AVFoundationLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = AVFoundationLibraryCore(char **)::frameworkLibrary;
  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id `anonymous namespace'::log(_anonymous_namespace_ *this)
{
}

void ___ZN12_GLOBAL__N_13logEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "vp_control_center_util");

}

applesauce::CF::StringRef *vp::ExtractBundleIDFromAVAUVoiceIOChatFlavorNotification(vp *this, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v4;

  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0C89C38]);
  v4 = Value;
  if (Value)
    CFRetain(Value);
  return applesauce::CF::StringRef::StringRef(this, v4);
}

applesauce::CF::StringRef *vp::GetBundleIDForAVFoundationSPI(applesauce::CF::StringRef *this, int a2, CFTypeRef cf, int a4)
{
  applesauce::CF::StringRef *v4;
  uint64_t v5;

  v4 = this;
  *(_QWORD *)this = 0;
  if (a2 == 1 && a4 == 1)
    goto LABEL_3;
  if (a2)
  {
    if (a2 == 4 || a2 == 2)
      goto LABEL_7;
    if ((a2 - 5) <= 1)
    {
      if (a4 == 1)
      {
LABEL_3:
        this = applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v5, "com.apple.mobilephone");
LABEL_8:
        *(_QWORD *)v4 = v5;
        return this;
      }
LABEL_7:
      this = applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v5, "com.apple.facetime");
      goto LABEL_8;
    }
  }
  else
  {
    *(_QWORD *)this = cf;
    if (cf)
      return (applesauce::CF::StringRef *)CFRetain(cf);
  }
  return this;
}

void vp::InitializeControlCenterListenersForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (this)
  {
    AVAUVoiceIOInitializeListenersForBundleID();
  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "AUVoiceIO can't initialize listener for null bundleID", v3, 2u);
    }

  }
}

_anonymous_namespace_ *vp::GetRequestedChatFlavorForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9[0]) = 0;
      v5 = "AUVoiceIO can't get requested ChatFlavor for null bundleID";
      v6 = v4;
      v7 = 2;
      goto LABEL_9;
    }
LABEL_6:

    return 0;
  }
  v2 = (_anonymous_namespace_ *)AVAUVoiceIOGetPreferredChatFlavorForBundleID();
  v3 = v2;
  if (v2 >= 3)
  {
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v9[0] = 67109120;
      v9[1] = (_DWORD)v3;
      v5 = "Unknown AVAUVoiceIOChatFlavor - %d. Return Default VP chat flavor instead";
      v6 = v4;
      v7 = 8;
LABEL_9:
      _os_log_error_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, v5, (uint8_t *)v9, v7);
      goto LABEL_6;
    }
    goto LABEL_6;
  }
  return v3;
}

void sub_1B62434D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void vp::SetActiveChatFlavorForBundleID(_anonymous_namespace_ *a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (a2)
  {
    AVAUVoiceIOSetActiveChatFlavorForBundleID();
  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set active ChatFlavor  for null bundleID", v3, 2u);
    }

  }
}

void vp::SetVoiceProcessingBypassedForBundleID(vp *this, uint64_t a2, const applesauce::CF::StringRef *a3)
{
  NSObject *v3;
  uint8_t v4[16];

  if (a2)
  {
    AVAUVoiceIOSetVoiceProcessingBypassedForBundleID();
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set vp bypass state for null bundleID", v4, 2u);
    }

  }
}

void vp::SetSupportedChatFlavorsForBundleID(vp *this, const applesauce::CF::ArrayRef *a2, const applesauce::CF::StringRef *a3)
{
  NSObject *v3;
  uint8_t v4[16];

  if (a2)
  {
    AVAUVoiceIOSetSupportedChatFlavorsForBundleID();
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set suported ChatFlavors for null bundleID", v4, 2u);
    }

  }
}

void vp::SetHiddenChatFlavorsForBundleID(vp *this, const applesauce::CF::ArrayRef *a2, const applesauce::CF::StringRef *a3)
{
  NSObject *v3;
  uint8_t v4[16];

  if (a2)
  {
    AVAUVoiceIOSetHiddenChatFlavorsForBundleID();
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "AUVoiceIO can't set hidden ChatFlavors for null bundleID", v4, 2u);
    }

  }
}

void vp::RemoveActiveChatFlavorForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (this)
  {
    AVAUVoiceIORemoveActiveChatFlavorForBundleID();
  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "AUVoiceIO can't remove the active ChatFlavor for null bundleID", v3, 2u);
    }

  }
}

uint64_t vp::IsAutomaticChatFlavorEnabledForBundleID(vp *this, const applesauce::CF::StringRef *a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t buf[8];
  uint8_t *v9;
  uint64_t v10;
  void *v11;

  if (*(_QWORD *)this)
  {
    result = isAutomaticMicModeFeatureFlagOn();
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)this;
      *(_QWORD *)buf = 0;
      v9 = buf;
      v10 = 0x2020000000;
      v5 = getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr;
      v11 = getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr;
      if (!getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr)
      {
        v6 = (void *)AVFoundationLibrary();
        v5 = dlsym(v6, "AVAUVoiceIOIsAutoChatFlavorEnabledForBundleID");
        *((_QWORD *)v9 + 3) = v5;
        getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr = v5;
      }
      _Block_object_dispose(buf, 8);
      if (v5)
      {
        return ((uint64_t (*)(uint64_t))v5)(v4);
      }
      else
      {
        dlerror();
        result = abort_report_np();
        __break(1u);
      }
    }
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "AUVoiceIO can't get automaic chat flavor update for null bundleID", buf, 2u);
    }

    return 0;
  }
  return result;
}

void sub_1B624386C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  __clang_call_terminate(a1);
}

void std::vector<WindUtility::EventTracker<float>>::resize(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;

  v4 = (char *)*a1;
  v5 = (char *)a1[1];
  v6 = 0x8E38E38E38E38E39 * ((uint64_t)&v5[-*a1] >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v20 = &v4[72 * a2];
    goto LABEL_21;
  }
  v8 = a1[2];
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    v20 = &v5[72 * v7];
    do
    {
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)v5 = 0uLL;
      *((_QWORD *)v5 + 6) = 0;
      *((_QWORD *)v5 + 7) = 1;
      *((_DWORD *)v5 + 16) = 0;
      v5 += 72;
    }
    while (v5 != v20);
LABEL_21:
    a1[1] = v20;
    return;
  }
  if (a2 > 0x38E38E38E38E38ELL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x1C71C71C71C71C7)
    v11 = 0x38E38E38E38E38ELL;
  else
    v11 = v10;
  if (v11 > 0x38E38E38E38E38ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(72 * v11);
  v13 = &v12[72 * v6];
  v14 = &v12[72 * a2];
  v15 = v13;
  do
  {
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *(_OWORD *)v15 = 0uLL;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 7) = 1;
    *((_DWORD *)v15 + 16) = 0;
    v15 += 72;
  }
  while (v15 != v14);
  v16 = (char *)*a1;
  if (v5 != (char *)*a1)
  {
    do
    {
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
      v17 = *(_OWORD *)(v5 - 56);
      v18 = *(_OWORD *)(v5 - 40);
      v19 = *(_OWORD *)(v5 - 24);
      *((_DWORD *)v13 - 2) = *((_DWORD *)v5 - 2);
      *(_OWORD *)(v13 - 24) = v19;
      *(_OWORD *)(v13 - 40) = v18;
      *(_OWORD *)(v13 - 56) = v17;
      v13 -= 72;
      v5 -= 72;
    }
    while (v5 != v16);
    v5 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[72 * v11];
  if (v5)
    operator delete(v5);
}

void WindSuppressorCore::~WindSuppressorCore(WindSuppressorCore *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  v12 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = (void *)*((_QWORD *)this + 30);
  if (v4)
  {
    *((_QWORD *)this + 31) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 27);
  if (v5)
  {
    *((_QWORD *)this + 28) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 24);
  if (v6)
  {
    *((_QWORD *)this + 25) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 21);
  if (v7)
  {
    *((_QWORD *)this + 22) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 18);
  if (v8)
  {
    *((_QWORD *)this + 19) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 16) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 12);
  if (v10)
  {
    *((_QWORD *)this + 13) = v10;
    operator delete(v10);
  }
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

uint64_t WindUtility::EventTracker<float>::update(uint64_t result, float a2)
{
  float v2;
  float v3;
  float v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  float v8;
  int v9;

  v2 = *(float *)result;
  v3 = *(float *)(result + 4);
  switch(*(_DWORD *)(result + 64))
  {
    case 0:
      v4 = *(float *)(result + 8);
      if (v2 < a2)
        goto LABEL_14;
      goto LABEL_23;
    case 1:
      v5 = *(_QWORD *)(result + 56);
      v4 = *(float *)(result + 20) + (float)(*(float *)(result + 24) * (float)v5);
      if (v3 > a2)
      {
        v5 = 0;
        v6 = 2;
LABEL_10:
        *(_DWORD *)(result + 64) = v6;
        goto LABEL_22;
      }
      v8 = *(float *)(result + 12);
      if (v4 < v8)
        goto LABEL_22;
      goto LABEL_17;
    case 2:
      v4 = *(float *)(result + 16);
      if (v2 < a2)
        goto LABEL_14;
      v5 = *(_QWORD *)(result + 56);
      v7 = *(_QWORD *)(result + 32);
      goto LABEL_19;
    case 3:
      v4 = *(float *)(result + 12);
      if (v3 <= a2)
        goto LABEL_23;
      v5 = 0;
      v6 = 4;
      goto LABEL_10;
    case 4:
      if (v2 < a2)
      {
        v8 = *(float *)(result + 12);
LABEL_17:
        *(_DWORD *)(result + 64) = 3;
        goto LABEL_27;
      }
      v4 = *(float *)(result + 16);
      v5 = *(_QWORD *)(result + 56);
      v7 = *(_QWORD *)(result + 40);
LABEL_19:
      if (v5 > v7)
      {
        v5 = 0;
        v9 = 5;
        goto LABEL_21;
      }
      goto LABEL_22;
    case 5:
      v5 = *(_QWORD *)(result + 56);
      v4 = *(float *)(result + 20) + (float)(*(float *)(result + 28) * (float)v5);
      if (v2 < a2)
      {
LABEL_14:
        v5 = 0;
        v9 = 1;
LABEL_21:
        *(_DWORD *)(result + 64) = v9;
        *(float *)(result + 20) = v4;
        goto LABEL_22;
      }
      v8 = *(float *)(result + 8);
      if (v4 > v8)
      {
LABEL_22:
        *(_QWORD *)(result + 56) = v5 + 1;
LABEL_23:
        v8 = v4;
        goto LABEL_24;
      }
      *(_DWORD *)(result + 64) = 0;
LABEL_27:
      *(_QWORD *)(result + 56) = 0;
LABEL_24:
      *(float *)(result + 16) = v8;
      return result;
    default:
      v5 = *(_QWORD *)(result + 56);
      v4 = 0.0;
      goto LABEL_22;
  }
}

void IVA_HRLS_Rank1::WAUpdate(IVA_HRLS_Rank1 *this)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t i;
  unsigned int j;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  vDSP_Length v16;

  LODWORD(v2) = *((_DWORD *)this + 11);
  if ((_DWORD)v2)
  {
    v3 = 0;
    do
    {
      vDSP_vclr(*((float **)this + 82), 1, (*((_DWORD *)this + 12) * v2));
      vDSP_vclr(*((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      v4 = *((_DWORD *)this + 11);
      if (v4)
      {
        for (i = 0; i < v4; ++i)
        {
          if (v4)
          {
            for (j = 0; j < v4; ++j)
            {
              vDSP_zvcma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v3)+ 16 * (v4 * j + i)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 132) + 16 * (v4 * j + v3)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * i), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * i), 1, *((unsigned int *)this + 12));
              v4 = *((_DWORD *)this + 11);
            }
          }
        }
      }
      vDSP_vclr(*((float **)this + 76), 1, *((_DWORD *)this + 12) * v4);
      vDSP_vclr(*((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v7) = *((_DWORD *)this + 11);
      if ((_DWORD)v7)
      {
        v8 = 0;
        do
        {
          if ((_DWORD)v7)
          {
            v9 = 0;
            v10 = 0;
            do
            {
              vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v3)+ 16 * (v10++ + v8 * v7)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + v9), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * v8), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * v8), 1, *((unsigned int *)this + 12));
              v7 = *((unsigned int *)this + 11);
              v9 += 16;
            }
            while (v10 < v7);
          }
          ++v8;
        }
        while (v8 < v7);
      }
      vDSP_vclr(**((float ***)this + 73), 1, *((unsigned int *)this + 12));
      if (*((_DWORD *)this + 11))
      {
        v11 = 0;
        v12 = 0;
        do
        {
          vDSP_zvmgsa((const DSPSplitComplex *)(*((_QWORD *)this + 97) + v11), 1, **((const float ***)this + 73), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
          ++v12;
          v11 += 16;
        }
        while (v12 < *((unsigned int *)this + 11));
      }
      vDSP_vsadd(**((const float ***)this + 73), 1, (const float *)this + 24, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_svdiv((const float *)this + 27, **((const float ***)this + 73), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      LODWORD(v13) = *((_DWORD *)this + 11);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 94) + v14), 1, **((const float ***)this + 73), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + v14), 1, *((unsigned int *)this + 12));
          ++v15;
          v13 = *((unsigned int *)this + 11);
          v14 += 16;
        }
        while (v15 < v13);
      }
      vDSP_vsub((const float *)(*((_QWORD *)this + 111) + 4 * (v13 * v3 * *((_DWORD *)this + 12))), 1, *((const float **)this + 76), 1, *((float **)this + 82), 1, (*((_DWORD *)this + 12) * v13));
      v16 = (*((_DWORD *)this + 12) * *((_DWORD *)this + 11));
      vDSP_vadd((const float *)(*((_QWORD *)this + 120) + 4 * (v16 * v3)), 1, *((const float **)this + 79), 1, *((float **)this + 85), 1, v16);
      vDSP_zvconj(*((const DSPSplitComplex **)this + 94), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 129) + 16 * (*((_DWORD *)this + 11) * v3)), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      SeparationBase::rank1WInverseA(this, v3++);
      v2 = *((unsigned int *)this + 11);
    }
    while (v3 < v2);
  }
  SeparationBase::minimumDistrotionPrinciple(this);
}

void IVA_HRLS_Rank1::CovarianceUpdate(IVA_HRLS_Rank1 *this)
{
  int v1;
  unint64_t v3;
  const float *v4;
  const float *v5;
  const float *v6;
  const float *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  const DSPSplitComplex *v21;
  float __B;
  int v23;

  v1 = *((_DWORD *)this + 11);
  v23 = *((_DWORD *)this + 12);
  if (v1)
  {
    v3 = 0;
    v4 = (const float *)((char *)this + 1152);
    v5 = (const float *)((char *)this + 108);
    v6 = (const float *)((char *)this + 104);
    v7 = (const float *)((char *)this + 112);
    do
    {
      __B = 0.0;
      __B = sqrtf(fmaxf(*((float *)this + 4) / (float)(*(float *)(*((_QWORD *)this + 105) + 4 * v3) + *((float *)this + 30)), 0.0));
      vDSP_vclr(*((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_vclr(*((float **)this + 101), 1, *((unsigned int *)this + 12));
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 135) + 24 * v3), 1, v4, *(float **)(*((_QWORD *)this + 135) + 24 * v3), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 138) + 24 * v3), 1, v4, *(float **)(*((_QWORD *)this + 138) + 24 * v3), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*((float **)this + 76), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_vclr(*((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v8) = *((_DWORD *)this + 11);
      if ((_DWORD)v8)
      {
        v9 = 0;
        do
        {
          if ((_DWORD)v8)
          {
            v10 = 0;
            v11 = 0;
            do
            {
              vDSP_zvcma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v3)+ 16 * (v9 + v8 * v11++)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 55) + v10), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * v9), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * v9), 1, *((unsigned int *)this + 12));
              v8 = *((unsigned int *)this + 11);
              v10 += 16;
            }
            while (v11 < v8);
          }
          ++v9;
        }
        while (v9 < v8);
      }
      vDSP_vsmul(*((const float **)this + 76), 1, &__B, *((float **)this + 76), 1, (*((_DWORD *)this + 12) * v8));
      vDSP_vsmul(*((const float **)this + 79), 1, &__B, *((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      if (*((_DWORD *)this + 11))
      {
        v12 = 0;
        v13 = 0;
        do
        {
          vDSP_zvmgsa((const DSPSplitComplex *)(*((_QWORD *)this + 94) + v12), 1, *((const float **)this + 100), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
          ++v13;
          v12 += 16;
        }
        while (v13 < *((unsigned int *)this + 11));
      }
      vDSP_vsadd(*((const float **)this + 100), 1, v5, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_vthr(**((const float ***)this + 73), 1, *((const float **)this + 19), **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vvsqrtf(*((float **)this + 100), **((const float ***)this + 73), &v23);
      vDSP_vadd(*((const float **)this + 100), 1, **((const float ***)this + 73), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_vthr(*((const float **)this + 100), 1, v6, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_svdiv(v7, *((const float **)this + 100), 1, **((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_vclr(*((float **)this + 82), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_vclr(*((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      LODWORD(v14) = *((_DWORD *)this + 11);
      if ((_DWORD)v14)
      {
        v15 = 0;
        do
        {
          if ((_DWORD)v14)
          {
            v16 = 0;
            v17 = 0;
            do
            {
              vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v3)+ 16 * (v17++ + v15 * v14)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + v16), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v15), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v15), 1, *((unsigned int *)this + 12));
              v14 = *((unsigned int *)this + 11);
              v16 += 16;
            }
            while (v17 < v14);
          }
          vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v15), 1, **((const float ***)this + 73), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v15), 1, *((unsigned int *)this + 12));
          ++v15;
          v14 = *((unsigned int *)this + 11);
        }
        while (v15 < v14);
        if ((_DWORD)v14)
        {
          v18 = 0;
          do
          {
            if ((_DWORD)v14)
            {
              v19 = 0;
              for (i = 0; i < v14; ++i)
              {
                v21 = (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v3)
                                              + 16 * (i + v18 * v14));
                vDSP_zvcma((const DSPSplitComplex *)(*((_QWORD *)this + 94) + v19), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v18), 1, v21, 1, v21, 1, *((unsigned int *)this + 12));
                v14 = *((unsigned int *)this + 11);
                v19 += 16;
              }
            }
            ++v18;
          }
          while (v18 < v14);
        }
      }
      ++v3;
    }
    while (v3 < v14);
  }
}

void AUNeuralNetRES::~AUNeuralNetRES(AUNeuralNetRES *this)
{
  AUNeuralNetRES::~AUNeuralNetRES(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t *v2;
  void **v3;

  *(_QWORD *)this = &off_1E69CC1E0;
  v2 = (uint64_t *)((char *)this + 968);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100]((uint64_t *)this + 121, 0);
  std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](v2, 0);
  v3 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);
}

void AUNeuralNetRES::CreateExtendedElements(AUNeuralNetRES *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFIndex v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  std::string v12;
  void *__p[2];
  int64_t v14;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 568), this, 4, 16);
  for (i = 0; i != 16; ++i)
  {
    std::to_string(&v12, i);
    v3 = std::string::insert(&v12, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v14 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v14 >= 0)
      v6 = HIBYTE(v14);
    else
      v6 = (CFIndex)__p[1];
    v7 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v8 = *((_QWORD *)this + 76);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v8, i);
    }
    else
    {
      v10 = *((_QWORD *)this + 73);
      if (i >= (*((_QWORD *)this + 74) - v10) >> 3)
        v9 = 0;
      else
        v9 = *(_QWORD *)(v10 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v9 + 72), v7);
    if (v12.__r_.__value_.__r.__words[0])
      CFRelease(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B624457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUNeuralNetRES::Initialize(AUNeuralNetRES *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char v7;
  int64x2_t *Scope;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t result;
  NSObject *v13;
  uint64_t Element;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  NSObject *v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (AUNeuralNetRESLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v29 = 136315394;
    v30 = "AUNeuralNetRES.cpp";
    v31 = 1024;
    v32 = 107;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Initialize.\n", (uint8_t *)&v29, 0x12u);
  }
LABEL_9:
  if (!*((_BYTE *)this + 616))
  {
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v13 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      {
LABEL_29:
        *((_BYTE *)this + 560) = 1;
        Element = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 0);
        result = 0;
        v15 = *(_QWORD *)(Element + 80);
        *((_DWORD *)this + 158) = *(_DWORD *)(Element + 108);
        *((_QWORD *)this + 78) = v15;
        return result;
      }
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 136315394;
      v30 = "AUNeuralNetRES.cpp";
      v31 = 1024;
      v32 = 114;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting NeuralNetRESLayers plist! Setting AU in Bypass mode.\n", (uint8_t *)&v29, 0x12u);
    }
    goto LABEL_29;
  }
  (*(void (**)(AUNeuralNetRES *))(*(_QWORD *)this + 64))(this);
  v3 = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 0);
  v4 = 0;
  v5 = *(_QWORD *)(v3 + 80);
  *((_DWORD *)this + 158) = *(_DWORD *)(v3 + 108);
  *((_QWORD *)this + 78) = v5;
  v6 = 1;
  do
  {
    v7 = v6;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), v4) + 108) != *((_DWORD *)this + 158))
      return 4294956421;
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 128), 0) + 108) != 1)
    return 4294956421;
  Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
  v9 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 155) = v9;
  v10 = *((_QWORD *)this + 121);
  if (*((double *)this + 78) != *(double *)v10)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v11 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      {
LABEL_33:
        *((_BYTE *)this + 560) = 1;
        v9 = *((_DWORD *)this + 155);
        v10 = *((_QWORD *)this + 121);
        goto LABEL_34;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 136315394;
      v30 = "AUNeuralNetRES.cpp";
      v31 = 1024;
      v32 = 150;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.\n", (uint8_t *)&v29, 0x12u);
    }
    goto LABEL_33;
  }
LABEL_34:
  if (v9 == *(_DWORD *)(v10 + 8))
    goto LABEL_44;
  if (AUNeuralNetRESLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  if (!AUNeuralNetRESLogScope(void)::scope)
  {
    v16 = MEMORY[0x1E0C81028];
LABEL_41:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 136315394;
      v30 = "AUNeuralNetRES.cpp";
      v31 = 1024;
      v32 = 154;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.\n", (uint8_t *)&v29, 0x12u);
    }
    goto LABEL_43;
  }
  v16 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
  if (*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
    goto LABEL_41;
LABEL_43:
  *((_BYTE *)this + 560) = 1;
LABEL_44:
  (*(void (**)(AUNeuralNetRES *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  v20 = **(_QWORD **)(*((_QWORD *)this + 121) + 152);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  ausdk::AUElement::SetParameter(v18, 0, (float)v21, 0);
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 1u, (float)*(unsigned int *)(*((_QWORD *)this + 121) + 12), 0);
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 2u, *(float *)(*((_QWORD *)this + 121) + 16), 0);
  if (AUNeuralNetRESLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    v28 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      return 0;
  }
  else
  {
    v28 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (!(_DWORD)result)
    return result;
  v29 = 136315394;
  v30 = "AUNeuralNetRES.cpp";
  v31 = 1024;
  v32 = 166;
  _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Successfully Initialized.\n", (uint8_t *)&v29, 0x12u);
  return 0;
}

void AUNeuralNetRES::Cleanup(NeuralNetRES **this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (AUNeuralNetRESLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 136315394;
    v4 = "AUNeuralNetRES.cpp";
    v5 = 1024;
    v6 = 178;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Cleanup().\n", (uint8_t *)&v3, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 616))
    NeuralNetRES::Cleanup(this[121]);
}

uint64_t AUNeuralNetRES::Reset(AUNeuralNetRES *this)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (AUNeuralNetRESLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  if (AUNeuralNetRESLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
      return 0;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    v3 = 136315394;
    v4 = "AUNeuralNetRES.cpp";
    v5 = 1024;
    v6 = 190;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_INFO, "%25s:%-5d AUNeuralNetRES: Reset.\n", (uint8_t *)&v3, 0x12u);
  }
  return 0;
}

uint64_t AUNeuralNetRES::GetPropertyInfo(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3699)
  {
    if (a2 != 21)
    {
      if (a2 != 3699)
        return result;
      *a6 = 0;
      v8 = 4 * *((_DWORD *)this + 155) + 4;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2 == 3700)
  {
LABEL_10:
    *a6 = 1;
    v8 = 4;
    goto LABEL_11;
  }
  if (a2 != 103699)
    return result;
  *a6 = 0;
  v8 = 8;
LABEL_11:
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUNeuralNetRES::GetProperty(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  CFArrayRef CFArray;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3699)
  {
    if (a2 != 21)
    {
      if (a2 == 3699)
      {
        memcpy(__dst, *(const void **)(*((_QWORD *)this + 121) + 192), 4 * (*((_DWORD *)this + 155) + 1));
        return 0;
      }
      return result;
    }
    result = 0;
    v9 = *((unsigned __int8 *)this + 560);
LABEL_12:
    *__dst = v9;
    return result;
  }
  if (a2 == 3700)
  {
    result = 0;
    v9 = *((unsigned __int8 *)this + 376);
    goto LABEL_12;
  }
  if (a2 == 103699)
  {
    CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)(*((_QWORD *)this + 121) + 192));
    result = 0;
    *(_QWORD *)__dst = CFArray;
  }
  return result;
}

uint64_t AUNeuralNetRES::SetProperty(AUNeuralNetRES *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 != 3700)
  {
    if (a2 != 3698)
    {
      if (a2 == 21)
      {
        result = 0;
        *((_BYTE *)this + 560) = *a5 != 0;
        return result;
      }
      return 4294956417;
    }
    if (a5)
    {
      v8 = *(const __CFDictionary **)a5;
      if (*((_QWORD *)this + 121))
        std::unique_ptr<NeuralNetRES>::reset[abi:ne180100]((uint64_t *)this + 121, 0);
      if (AUNeuralNetRESLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
      v9 = AUNeuralNetRESLogScope(void)::scope;
      v10 = operator new();
      NeuralNetRES::NeuralNetRES(v10, v8, v9);
      std::unique_ptr<NeuralNetRES>::reset[abi:ne180100]((uint64_t *)this + 121, v10);
      if (AUNeuralNetRESLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
      if (AUNeuralNetRESLogScope(void)::scope)
      {
        v11 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        {
LABEL_30:
          result = 0;
          *((_BYTE *)this + 616) = 1;
          return result;
        }
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v14 = "AUNeuralNetRES.cpp";
        v15 = 1024;
        v16 = 408;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully loaded NeuralNetRES plist.\n", buf, 0x12u);
      }
      goto LABEL_30;
    }
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v12 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "AUNeuralNetRES.cpp";
      v15 = 1024;
      v16 = 382;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n", buf, 0x12u);
    }
    return 4294956445;
  }
  result = 4294956445;
  if (a6 >= 4)
  {
    if (*(_BYTE *)a5)
      return 0;
    else
      return 4294956445;
  }
  return result;
}

void sub_1B624512C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, int a10, __int128 buf, __int16 a12, __int16 a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *exception_ptr;
  int v20;
  NSObject **v21;
  NSObject *v22;

  MEMORY[0x1BCC95CEC](v14, 0x10E0C403CD53A6ALL);
  if (a2 != 1)
    _Unwind_Resume(a1);
  exception_ptr = __cxa_get_exception_ptr(a1);
  a9.__vftable = (std::exception_vtbl *)&off_1E69EE218;
  v20 = exception_ptr[2];
  a10 = v20;
  __cxa_begin_catch(a1);
  if (*(_QWORD *)(v16 + 2352) != -1)
    dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
  v21 = *(NSObject ***)(v15 + 2344);
  if (v21)
  {
    v22 = *v21;
    if (!*v21)
      goto LABEL_10;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(_QWORD *)((char *)&buf + 4) = "AUNeuralNetRES.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 396;
    a13 = 1024;
    a14 = v20;
    _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load NeuralNetRES plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_10:
  std::exception::~exception(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1B62450D8);
}

uint64_t AUNeuralNetRES::SetParameter(AUNeuralNetRES *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;
  char *v15;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 76);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 73);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 74) - v14) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    v15 = (char *)this + 544;
  }
  else
  {
    if (a3)
      return 4294956418;
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v13)
        v9 = 0;
      else
        v9 = *v13;
    }
    ausdk::AUElement::SetParameter(v9, a2, a5, 0);
    v15 = (char *)this + 528;
  }
  result = 0;
  ++*(_QWORD *)v15;
  return result;
}

uint64_t AUNeuralNetRES::CanScheduleParameters(AUNeuralNetRES *this)
{
  return 0;
}

uint64_t AUNeuralNetRES::ProcessMultipleBufferLists(AUNeuralNetRES *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float Parameter;
  float v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  uint64_t v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  uint64_t v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  uint64_t v37;
  int *v38;
  int v39;
  const AudioBufferList *v40;
  AudioDSP::Utility *v41;
  BOOL *v42;
  float v43;
  NSObject *v44;
  NSObject *v46;
  const char *v47;
  BOOL *v48;
  NSObject *v49;
  unsigned __int8 v50;
  __int16 v51;
  int v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  AudioBufferList v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;

  v9 = (int)a3;
  v64 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v11)
  {
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v14)
        v13 = 0;
      else
        v13 = *v14;
    }
    Parameter = ausdk::AUElement::GetParameter(v13, 3u);
    v16 = 1.0;
    if (Parameter != 0.0)
      v16 = __exp10f(Parameter / 20.0);
    *((float *)this + 160) = v16;
    v17 = *((_QWORD *)this + 9);
    if (v17)
    {
      v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
    }
    else
    {
      v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v19)
        v18 = 0;
      else
        v18 = *v19;
    }
    *((_BYTE *)this + 644) = ausdk::AUElement::GetParameter(v18, 4u) != 0.0;
    *((_QWORD *)this + 67) = v11;
  }
  v20 = *((_QWORD *)this + 68);
  if (*((_QWORD *)this + 69) != v20)
  {
    if (*((_DWORD *)this + 158))
    {
      v21 = 0;
      v22 = (float *)((char *)this + 664);
      do
      {
        v23 = *((_QWORD *)this + 76);
        if (v23)
        {
          v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 32))(v23, v21);
        }
        else
        {
          v25 = *((_QWORD *)this + 73);
          if (v21 >= (*((_QWORD *)this + 74) - v25) >> 3)
            v24 = 0;
          else
            v24 = *(ausdk::AUElement **)(v25 + 8 * v21);
        }
        *(v22 - 4) = ausdk::AUElement::GetParameter(v24, 0x64u);
        v26 = *((_QWORD *)this + 76);
        if (v26)
        {
          v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 32))(v26, v21);
        }
        else
        {
          v28 = *((_QWORD *)this + 73);
          if (v21 >= (*((_QWORD *)this + 74) - v28) >> 3)
            v27 = 0;
          else
            v27 = *(ausdk::AUElement **)(v28 + 8 * v21);
        }
        *(v22 - 3) = ausdk::AUElement::GetParameter(v27, 0x65u);
        v29 = *((_QWORD *)this + 76);
        if (v29)
        {
          v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, v21);
        }
        else
        {
          v31 = *((_QWORD *)this + 73);
          if (v21 >= (*((_QWORD *)this + 74) - v31) >> 3)
            v30 = 0;
          else
            v30 = *(ausdk::AUElement **)(v31 + 8 * v21);
        }
        *(v22 - 2) = ausdk::AUElement::GetParameter(v30, 0x66u);
        v32 = *((_QWORD *)this + 76);
        if (v32)
        {
          v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 32))(v32, v21);
        }
        else
        {
          v34 = *((_QWORD *)this + 73);
          if (v21 >= (*((_QWORD *)this + 74) - v34) >> 3)
            v33 = 0;
          else
            v33 = *(ausdk::AUElement **)(v34 + 8 * v21);
        }
        *(v22 - 1) = ausdk::AUElement::GetParameter(v33, 0x67u);
        v35 = *((_QWORD *)this + 76);
        if (v35)
        {
          v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 32))(v35, v21);
        }
        else
        {
          v37 = *((_QWORD *)this + 73);
          if (v21 >= (*((_QWORD *)this + 74) - v37) >> 3)
            v36 = 0;
          else
            v36 = *(ausdk::AUElement **)(v37 + 8 * v21);
        }
        *v22 = ausdk::AUElement::GetParameter(v36, 0x68u);
        v22 += 5;
        ++v21;
      }
      while (v21 < *((unsigned int *)this + 158));
    }
    *((_QWORD *)this + 69) = v20;
  }
  if (*((_DWORD *)this + 84) != v9)
    return 4294956422;
  v38 = (int *)*a5;
  if (!*a5)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v46 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v60.mNumberBuffers = 136315394;
      *(_QWORD *)(&v60.mNumberBuffers + 1) = "AUNeuralNetRES.cpp";
      LOWORD(v60.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v60.mBuffers[0].mDataByteSize + 2) = 885;
      v47 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_78:
      _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, v47, (uint8_t *)&v60, 0x12u);
    }
    return 4294956420;
  }
  v39 = *v38;
  if (*v38 != *((_DWORD *)this + 158))
    return 4294956428;
  v40 = a5[1];
  if (!v40)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v46 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v60.mNumberBuffers = 136315394;
      *(_QWORD *)(&v60.mNumberBuffers + 1) = "AUNeuralNetRES.cpp";
      LOWORD(v60.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v60.mBuffers[0].mDataByteSize + 2) = 893;
      v47 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_78;
    }
    return 4294956420;
  }
  if (v40->mNumberBuffers != v39 || *a7 && (*a7)->mNumberBuffers != 1)
    return 4294956428;
  v51 = 0;
  v50 = 0;
  v41 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 155));
  *(_QWORD *)&v60.mNumberBuffers = *((_QWORD *)this + 78);
  v60.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v61 = 4;
  v62 = v39;
  v63 = 32;
  AudioDSP::Utility::DetectNonFinites(v41, v38, &v60, (const AudioStreamBasicDescription *)((char *)&v51 + 1), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v41, a5[1], &v60, (const AudioStreamBasicDescription *)&v51, v42);
  if (!*((_BYTE *)this + 560))
  {
    v43 = *((float *)this + 160);
    if (v43 != 1.0 && (!(HIBYTE(v51) | v51) || !*((_BYTE *)this + 636)))
    {
      NeuralNetRES::ProcessBufferList(*((NeuralNetRES **)this + 121), *a5, a5[1], *a7, v43, *((unsigned __int8 *)this + 644), 0, 2.2204e-16);
      AudioDSP::Utility::DetectNonFinites(v41, *a7, &v60, (const AudioStreamBasicDescription *)&v50, v48);
      if (!v50 || !*((_BYTE *)this + 636))
        return 0;
      if (AUNeuralNetRESLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
      if (AUNeuralNetRESLogScope(void)::scope)
      {
        v49 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        {
LABEL_96:
          (*(void (**)(AUNeuralNetRES *))(*(_QWORD *)this + 64))(this);
          CopyBufferList(&(*a5)->mNumberBuffers, *a7);
          return 0;
        }
      }
      else
      {
        v49 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v52 = 136315650;
        v53 = "AUNeuralNetRES.cpp";
        v54 = 1024;
        v55 = 942;
        v56 = 1024;
        v57 = v50;
        _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetRES: (OutputSignals) is NOT finite: (%u)", (uint8_t *)&v52, 0x18u);
      }
      goto LABEL_96;
    }
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  if (HIBYTE(v51) | v51)
  {
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v44 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        return 0;
    }
    else
    {
      v44 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v52 = 136315906;
      v53 = "AUNeuralNetRES.cpp";
      v54 = 1024;
      v55 = 925;
      v56 = 1024;
      v57 = HIBYTE(v51);
      v58 = 1024;
      v59 = v51;
      _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetRES: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v52, 0x1Eu);
    }
  }
  return 0;
}

uint64_t AUNeuralNetRES::Render(AUNeuralNetRES *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  char v11;
  char v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v8 = 0;
  v9 = 0;
  v20[1] = *MEMORY[0x1E0C80C00];
  v10 = (AUNeuralNetRES *)((char *)this + 80);
  v11 = 1;
  do
  {
    v12 = v11;
    if (ausdk::AUBase::HasInput(this, v8))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = 1;
    }
    v11 = 0;
    v8 = 1;
  }
  while ((v12 & 1) != 0);
  v15 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 128), 0);
  v16 = ausdk::AUIOElement::PrepareBuffer(v15, a4);
  result = 0;
  v20[0] = v16;
  if ((v9 & 1) == 0)
  {
    v17 = ausdk::AUScope::SafeGetElement(v10, 0);
    v19[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
    v18 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v19[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    return (*(uint64_t (**)(AUNeuralNetRES *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v19, 1, v20);
  }
  return result;
}

uint64_t AUNeuralNetRES::GetParameterList(AUNeuralNetRES *this, int a2, unsigned int *a3, unsigned int *a4)
{
  __int128 v4;
  unsigned int v5;
  uint64_t result;

  if (a2 == 4)
  {
    if (a3)
    {
      v4 = xmmword_1B66A1270;
      v5 = 104;
      goto LABEL_7;
    }
LABEL_8:
    result = 0;
    *a4 = 5;
    return result;
  }
  if (!a2)
  {
    if (a3)
    {
      v4 = xmmword_1B6626920;
      v5 = 4;
LABEL_7:
      *(_OWORD *)a3 = v4;
      a3[4] = v5;
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return 4294956430;
}

uint64_t AUNeuralNetRES::GetParameterInfo(AUNeuralNetRES *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v5;
  uint64_t result;
  AudioUnitParameterValue v7;
  AudioUnitParameterOptions v8;
  AudioUnitParameterOptions flags;
  int v10;
  const __CFString *v11;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 'd':
        buffer->cfNameString = CFSTR("EC Delta EIR.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Delta EIR."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x501502F900000000;
        goto LABEL_19;
      case 'e':
        buffer->cfNameString = CFSTR("EC IR Delay.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC IR Delay."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x43C8000000000000;
        goto LABEL_19;
      case 'f':
        v11 = CFSTR("EC Adapted flag.");
        goto LABEL_18;
      case 'g':
        buffer->cfNameString = CFSTR("EC Time aligned ref signal energy.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Time aligned ref signal energy."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x447A000000000000;
        goto LABEL_19;
      case 'h':
        v11 = CFSTR("EC Mic-Eclee cross correlation.");
LABEL_18:
        buffer->cfNameString = v11;
        buffer->flags = 0x8000000;
        CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x3F80000000000000;
LABEL_19:
        *(_QWORD *)&buffer->minValue = v5;
        goto LABEL_20;
      default:
        return 4294956418;
    }
  }
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Number of DNN layers");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Number of DNN layers"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4100000000000000;
      buffer->defaultValue = 0.0;
      goto LABEL_20;
    case 1:
      buffer->cfNameString = CFSTR("Number of frames for context window");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Number of frames for context window"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x410000003F800000;
      v7 = 1.0;
      break;
    case 2:
      buffer->cfNameString = CFSTR("Forgetting factor (time constant)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Forgetting factor (time constant)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x404000003E99999ALL;
      v7 = 0.3;
      break;
    case 3:
      buffer->cfNameString = CFSTR("Echo suppression amount");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Echo suppression amount"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3281387520;
      buffer->defaultValue = -300.0;
      v8 = buffer->flags | 0xC0000000;
      goto LABEL_22;
    case 4:
      buffer->cfNameString = CFSTR("Use gain floor?");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Use gain floor?"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      v10 = -1072693248;
      goto LABEL_21;
    default:
      return 4294956418;
  }
  buffer->defaultValue = v7;
LABEL_20:
  flags = buffer->flags;
  v10 = 1073774592;
LABEL_21:
  v8 = flags | v10;
LABEL_22:
  result = 0;
  buffer->flags = v8;
  return result;
}

UInt8 *AUNeuralNetRES::SaveExtendedScopes(AUNeuralNetRES *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUNeuralNetRES::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

uint64_t AUNeuralNetRES::GetParameterValueStrings(AUNeuralNetRES *this, int a2, unsigned int a3, const __CFArray **a4)
{
  BOOL v4;

  if (a4)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return 4294956430;
}

double AUNeuralNetRES::GetLatency(AUNeuralNetRES *this)
{
  return 0.0;
}

double AUNeuralNetRES::GetTailTime(AUNeuralNetRES *this)
{
  return 0.05;
}

uint64_t AUNeuralNetRES::SupportsTail(AUNeuralNetRES *this)
{
  return 1;
}

BOOL AUNeuralNetRES::StreamFormatWritable(AUNeuralNetRES *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNeuralNetRES::SupportedNumChannels(AUNeuralNetRES *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNeuralNetRES::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUNeuralNetRES::ValidFormat(AUNeuralNetRES *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2)
  {
    if (a4->mChannelsPerFrame == 1)
      return result;
    else
      return 0;
  }
  else if (a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUNeuralNetRES::ChangeStreamFormat(AUNeuralNetRES *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Element;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v6 = a3;
  v7 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v9 = 0;
  if (v7 == 1 && !v6)
  {
    v10 = *((_QWORD *)this + 15);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1))
        return 0;
    }
    else
    {
      v11 = *((_QWORD *)this + 12);
      if ((unint64_t)(*((_QWORD *)this + 13) - v11) < 9 || !*(_QWORD *)(v11 + 8))
        return 0;
    }
    Element = ausdk::AUScope::SafeGetElement((AUNeuralNetRES *)((char *)this + 80), 1u);
    v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)Element + 56))(Element, a5);
    if (AUNeuralNetRESLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetRESLogScope(void)::once, &__block_literal_global_4118);
    if (AUNeuralNetRESLogScope(void)::scope)
    {
      v13 = *(NSObject **)AUNeuralNetRESLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetRESLogScope(void)::scope)
        return v9;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = 136315394;
      v16 = "AUNeuralNetRES.cpp";
      v17 = 1024;
      v18 = 759;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v15, 0x12u);
    }
  }
  return v9;
}

uint64_t AUNeuralNetRES::GetScopeExtended(AUNeuralNetRES *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 568;
  else
    return 0;
}

os_log_t ___ZL22AUNeuralNetRESLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "nnres");
  *v0 = result;
  AUNeuralNetRESLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t *std::unique_ptr<NeuralNetRES>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(_QWORD *)(v2 + 48) = 0;
    }
    v4 = *(void **)(v2 + 192);
    if (v4)
    {
      *(_QWORD *)(v2 + 200) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 168);
    if (v5)
    {
      *(_QWORD *)(v2 + 176) = v5;
      operator delete(v5);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 152), 0);
    v6 = *(void **)(v2 + 128);
    if (v6)
    {
      *(_QWORD *)(v2 + 136) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 104);
    if (v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 80);
    if (v8)
    {
      *(_QWORD *)(v2 + 88) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 56);
    if (v9)
    {
      *(_QWORD *)(v2 + 64) = v9;
      operator delete(v9);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

float applesauce::CF::details::find_at_key<float,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1B6246338(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<unsigned int,0>(v2);
}

void sub_1B6246398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AUSM::RoomCongruence::TuningParameters::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29)
      && *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void aec_v5::aec_init(uint64_t **a1, unsigned int a2, int *a3)
{
  float v5;
  uint64_t v6;
  int v7;
  int v8;
  float32x2_t v9;
  float v10;
  int32x2_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _QWORD *v21;
  _OWORD *v22;
  int v23;
  uint64_t *v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  _OWORD *v31;
  unsigned int v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  float *v63;
  int v64;
  vDSP_Length v65;
  size_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  _OWORD *v120;
  float v121;
  void *v122;
  void *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  int v130;
  uint64_t v131;
  char *v132;
  char *v133;
  size_t v134;
  void *v135;
  int v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  float v145;
  void *v146;
  void *v147;
  float v148;
  void *v149;
  void *v150;
  float v151;
  float v152;
  uint64_t v153;
  float v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  float v169;
  float *v170;
  int64_t i;
  uint64_t v172;
  float *v173;
  float v174;
  float *v175;
  uint64_t v176;
  float v177;
  uint64_t v178;
  __int128 v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD *v186;
  uint64_t v187;
  float v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  size_t v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  size_t v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  int32x2_t v206;
  uint32x2_t *v207;
  float32x2_t v208;
  uint32x2_t v213;
  float v214;
  unsigned int v215;
  float v216;
  unsigned int v217;
  float v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  size_t v223;
  void *v224;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD *v229;
  _DWORD *v230;
  uint64_t v231;
  _DWORD *v232;
  _DWORD *v233;
  unsigned int v234;
  float v235;
  uint64_t v236;
  float v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  void *v241;
  int32x2_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  void *v246;
  int32x2_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int32x2_t v253;
  uint64_t v254;
  int32x2_t *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int32x2_t v262;
  int v263;
  void *v264;
  void *v266;
  void *v267;
  void *v269;
  void *v270;
  void *v272;
  void *v273;
  void *v275;
  int v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  float v285;
  uint64_t v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  uint64_t *v301;
  int *v302;
  vDSP_Length v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  _QWORD *v325;
  void *v326;
  void *v327;
  size_t v328;
  void *v329;
  void *v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  void *v345;
  void *v346;
  int v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  uint64_t v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  std::bad_alloc *exception;
  std::bad_alloc *v368;
  __int128 v369;
  float v370;
  int v371;
  int v372;
  float v373;
  float v374;
  uint64_t v375;
  size_t v376;
  float v377;
  float v378;
  int v379;
  uint64_t v380;
  float v381;
  float v382;
  const void *__src;
  int __srca;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  float v390;
  char size;
  uint64_t sizea;
  vDSP_Length v393;
  int v394;
  int v395;
  int v396;
  size_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  int v402;
  int v403;
  int v404;
  float __A;
  float __B;
  float v407[3];

  v5 = *(float *)a3;
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v390 = *((float *)a3 + 5);
  v9 = *(float32x2_t *)(a3 + 6);
  v10 = *((float *)a3 + 9);
  v380 = *(_QWORD *)(a3 + 11);
  v379 = a3[13];
  v377 = *((float *)a3 + 10);
  v378 = *((float *)a3 + 14);
  v381 = *((float *)a3 + 15);
  v382 = *((float *)a3 + 8);
  v369 = *((_OWORD *)a3 + 4);
  v389 = *((unsigned __int8 *)a3 + 84);
  v370 = *((float *)a3 + 20);
  v371 = a3[22];
  v11 = *(int32x2_t *)(a3 + 24);
  v12 = a3[27];
  v395 = a3[28];
  v396 = a3[26];
  v13 = a3[30];
  v394 = a3[29];
  v14 = a3[31];
  v15 = a3[32];
  v16 = *((float *)a3 + 34);
  v403 = *((unsigned __int8 *)a3 + 141);
  v404 = *((unsigned __int8 *)a3 + 140);
  v402 = *((unsigned __int8 *)a3 + 142);
  v17 = *((float *)a3 + 36);
  v18 = *((float *)a3 + 37);
  v19 = *((float *)a3 + 38);
  v20 = *((float *)a3 + 39);
  __src = (const void *)*((_QWORD *)a3 + 20);
  size = *((_BYTE *)a3 + 168);
  v21 = malloc_type_malloc(0x78uLL, 0x2C8E6D5CuLL);
  if (!v21)
    goto LABEL_293;
  v21[14] = 0;
  *((_OWORD *)v21 + 5) = 0u;
  *((_OWORD *)v21 + 6) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  *((_OWORD *)v21 + 4) = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *(_OWORD *)v21 = 0u;
  *a1 = v21;
  v22 = malloc_type_malloc(0x1E0uLL, 0x2C8E6D5CuLL);
  if (!v22)
    goto LABEL_293;
  v22[28] = 0u;
  v22[29] = 0u;
  v22[26] = 0u;
  v22[27] = 0u;
  v22[24] = 0u;
  v22[25] = 0u;
  v22[22] = 0u;
  v22[23] = 0u;
  v22[20] = 0u;
  v22[21] = 0u;
  v22[18] = 0u;
  v22[19] = 0u;
  v22[16] = 0u;
  v22[17] = 0u;
  v22[14] = 0u;
  v22[15] = 0u;
  v22[12] = 0u;
  v22[13] = 0u;
  v22[10] = 0u;
  v22[11] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  *v22 = 0u;
  v22[1] = 0u;
  v23 = SLODWORD(v5) / (int)v6 <= 1 ? 1 : SLODWORD(v5) / (int)v6;
  (*a1)[7] = (uint64_t)v22;
  v385 = v15;
  v386 = v14;
  v400 = v13;
  v399 = v6;
  v401 = a2;
  v387 = v12;
  v388 = v8;
  dft_v5::paramInit_v5(*a1, v23 * v6, v6, v23, a2, v389 != 0, v8, v12, v16, v17, v18, v19, v20, v7, v13, v14, v15, v404 != 0, v403 != 0,
    v402 != 0);
  v24 = *a1;
  v25 = (_DWORD *)**a1;
  __A = 0.0;
  v26 = v25[9];
  v27 = (int)v25[34];
  v28 = v25[37];
  v393 = (int)v25[38];
  v397 = v25[11];
  v29 = (int)v25[18];
  v30 = (int)v25[32];
  v31 = malloc_type_malloc(0xB0uLL, 0x2C8E6D5CuLL);
  if (!v31)
    goto LABEL_293;
  v31[9] = 0u;
  v31[10] = 0u;
  v31[7] = 0u;
  v31[8] = 0u;
  v31[5] = 0u;
  v31[6] = 0u;
  v31[3] = 0u;
  v31[4] = 0u;
  v31[1] = 0u;
  v31[2] = 0u;
  *v31 = 0u;
  v32 = v30 * v26;
  v24[1] = (uint64_t)v31;
  if ((_DWORD)v30 * v26 < 0)
    goto LABEL_293;
  v33 = malloc_type_malloc(4 * (v30 * v26), 0x2C8E6D5CuLL);
  v34 = v33;
  if (v32)
  {
    if (!v33)
      goto LABEL_293;
  }
  bzero(v33, 4 * v32);
  *(_QWORD *)v24[1] = v34;
  v35 = malloc_type_malloc(4 * v32, 0x2C8E6D5CuLL);
  v36 = v35;
  if (v32)
  {
    if (!v35)
      goto LABEL_293;
  }
  bzero(v35, 4 * v32);
  *(_QWORD *)(v24[1] + 8) = v36;
  v37 = malloc_type_malloc(8 * v27, 0x2C8E6D5CuLL);
  v38 = v37;
  if ((_DWORD)v27)
  {
    if (!v37)
      goto LABEL_293;
  }
  bzero(v37, 8 * v27);
  *(_QWORD *)(v24[1] + 32) = v38;
  *(_QWORD *)(v24[1] + 40) = *(_QWORD *)(v24[1] + 32);
  *(_QWORD *)(v24[1] + 48) = *(_QWORD *)(v24[1] + 32) + 4 * v27;
  if (v25[25])
  {
    *(_QWORD *)(v24[1] + 56) = 0;
    *(_QWORD *)(v24[1] + 64) = 0;
  }
  else
  {
    v39 = (int)v25[33];
    v40 = malloc_type_malloc(8 * v39, 0x2C8E6D5CuLL);
    v41 = v40;
    if ((_DWORD)v39 && !v40)
      goto LABEL_293;
    bzero(v40, 8 * v39);
    *(_QWORD *)(v24[1] + 56) = v41;
    v42 = malloc_type_malloc(8 * v39, 0x2C8E6D5CuLL);
    v43 = v42;
    if ((_DWORD)v39)
    {
      if (!v42)
        goto LABEL_293;
    }
    bzero(v42, 8 * v39);
    *(_QWORD *)(v24[1] + 64) = v43;
    v44 = (int)v25[19];
    v45 = malloc_type_malloc(4 * v44, 0x2C8E6D5CuLL);
    v46 = v45;
    if ((_DWORD)v44)
    {
      if (!v45)
        goto LABEL_293;
    }
    bzero(v45, 4 * v44);
    **(_QWORD **)(v24[1] + 56) = v46;
    v47 = malloc_type_malloc(4 * v44, 0x2C8E6D5CuLL);
    v48 = v47;
    if ((_DWORD)v44)
    {
      if (!v47)
        goto LABEL_293;
    }
    bzero(v47, 4 * v44);
    **(_QWORD **)(v24[1] + 64) = v48;
    v49 = v25[33];
    if (v49 >= 2)
    {
      v50 = 0;
      v51 = 8 * (v49 - 1);
      do
      {
        v52 = (_QWORD *)(*(_QWORD *)(v24[1] + 56) + v50);
        v52[1] = *v52 + 4 * v29;
        v53 = (_QWORD *)(*(_QWORD *)(v24[1] + 64) + v50);
        v53[1] = *v53 + 4 * v29;
        v50 += 8;
      }
      while (v51 != v50);
    }
  }
  v54 = v24[1];
  *(_DWORD *)(v54 + 112) = v25[11];
  *(_QWORD *)(v54 + 72) = 0;
  *(_DWORD *)(v54 + 80) = 0;
  if ((v397 & 0x80000000) != 0)
    goto LABEL_293;
  v55 = malloc_type_malloc(4 * v397, 0x2C8E6D5CuLL);
  v56 = v55;
  if ((_DWORD)v397)
  {
    if (!v55)
      goto LABEL_293;
  }
  bzero(v55, 4 * v397);
  *(_QWORD *)(v24[1] + 88) = v56;
  if ((v28 & 0x80000000) != 0)
    goto LABEL_293;
  v57 = malloc_type_malloc(4 * v28, 0x2C8E6D5CuLL);
  v58 = v57;
  if ((_DWORD)v28)
  {
    if (!v57)
      goto LABEL_293;
  }
  bzero(v57, 4 * v28);
  *(_QWORD *)(v24[1] + 16) = v58;
  v59 = malloc_type_malloc(4 * v28, 0x2C8E6D5CuLL);
  v60 = v59;
  if ((_DWORD)v28)
  {
    if (!v59)
      goto LABEL_293;
  }
  bzero(v59, 4 * v28);
  *(_QWORD *)(v24[1] + 24) = v60;
  if ((v393 & 0x80000000) != 0)
    goto LABEL_293;
  v61 = malloc_type_malloc(4 * v393, 0x2C8E6D5CuLL);
  v62 = v61;
  if ((_DWORD)v393)
  {
    if (!v61)
      goto LABEL_293;
  }
  bzero(v61, 4 * v393);
  *(_QWORD *)(v24[1] + 96) = v62;
  v63 = *(float **)(v24[1] + 96);
  __A = 9.0e-10;
  vDSP_vfill(&__A, v63, 1, v393);
  v64 = v30 * v397;
  if ((_DWORD)v30 * (_DWORD)v397 < 0)
    goto LABEL_293;
  v65 = v64;
  v66 = 4 * v64;
  v67 = malloc_type_malloc(v66, 0x2C8E6D5CuLL);
  v68 = v67;
  if ((_DWORD)v65)
  {
    if (!v67)
      goto LABEL_293;
  }
  bzero(v67, v66);
  *(_QWORD *)(v24[1] + 104) = v68;
  vDSP_vclr(*(float **)(v24[1] + 104), 1, v65);
  v69 = malloc_type_malloc(v30, 0x2C8E6D5CuLL);
  v70 = v69;
  if ((_DWORD)v30)
  {
    if (!v69)
      goto LABEL_293;
  }
  bzero(v69, v30);
  *(_QWORD *)(v24[1] + 120) = v70;
  v71 = malloc_type_malloc(v30, 0x2C8E6D5CuLL);
  v72 = v71;
  if ((_DWORD)v30)
  {
    if (!v71)
      goto LABEL_293;
    bzero(v71, v30);
    *(_QWORD *)(v24[1] + 128) = v72;
    v73 = malloc_type_malloc(v30, 0x2C8E6D5CuLL);
    if (!v73)
      goto LABEL_293;
    v74 = v73;
    bzero(v73, v30);
    *(_QWORD *)(v24[1] + 136) = v74;
    if ((v30 & 0x80000000) != 0)
      goto LABEL_293;
  }
  else
  {
    bzero(v71, v30);
    *(_QWORD *)(v24[1] + 128) = v72;
    v75 = malloc_type_malloc(v30, 0x2C8E6D5CuLL);
    bzero(v75, v30);
    *(_QWORD *)(v24[1] + 136) = v75;
  }
  v76 = malloc_type_malloc(4 * v30, 0x2C8E6D5CuLL);
  v77 = v76;
  if ((_DWORD)v30)
  {
    if (!v76)
      goto LABEL_293;
  }
  bzero(v76, 4 * v30);
  *(_QWORD *)(v24[1] + 144) = v77;
  v78 = v24[1];
  if ((_DWORD)v30)
  {
    memset(*(void **)(v78 + 120), 1, v30);
    memset(*(void **)(v78 + 128), 1, v30);
    bzero(*(void **)(v78 + 144), 4 * v30);
  }
  *(_DWORD *)(v78 + 152) = v25[32];
  v79 = malloc_type_malloc(4 * v30, 0x2C8E6D5CuLL);
  v80 = v79;
  if ((_DWORD)v30)
  {
    if (!v79)
      goto LABEL_293;
  }
  bzero(v79, 4 * v30);
  *(_QWORD *)(v24[1] + 160) = v80;
  memcpy(*(void **)(v24[1] + 160), __src, 4 * v30);
  *(_BYTE *)(v24[1] + 168) = size;
  v81 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v82 = v81;
  if (!v81)
    goto LABEL_293;
  bzero(v81, 4 * v399);
  *(_QWORD *)(*a1)[7] = v82;
  v83 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v84 = v83;
  if (!v83)
    goto LABEL_293;
  bzero(v83, 4 * v399);
  *(_QWORD *)((*a1)[7] + 8) = v84;
  v85 = *(int *)(**a1 + 136);
  v86 = malloc_type_malloc(8 * v85, 0x2C8E6D5CuLL);
  v87 = v86;
  if ((_DWORD)v85)
  {
    if (!v86)
      goto LABEL_293;
  }
  bzero(v86, 8 * v85);
  *(_QWORD *)((*a1)[7] + 16) = v87;
  *(_QWORD *)((*a1)[7] + 24) = *(_QWORD *)((*a1)[7] + 16) + 4 * v85;
  v88 = malloc_type_malloc(8 * v399, 0x2C8E6D5CuLL);
  v89 = v88;
  if (!v88)
    goto LABEL_293;
  bzero(v88, 8 * v399);
  *(_QWORD *)((*a1)[7] + 32) = v89;
  *(_QWORD *)((*a1)[7] + 40) = *(_QWORD *)((*a1)[7] + 32) + 4 * v399;
  v90 = malloc_type_malloc(8 * v399, 0x2C8E6D5CuLL);
  v91 = v90;
  if (!v90)
    goto LABEL_293;
  bzero(v90, 8 * v399);
  *(_QWORD *)((*a1)[7] + 48) = v91;
  *(_QWORD *)((*a1)[7] + 56) = *(_QWORD *)((*a1)[7] + 48) + 4 * v399;
  v92 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v93 = v92;
  if (!v92)
    goto LABEL_293;
  bzero(v92, 4 * v399);
  *(_QWORD *)((*a1)[7] + 64) = v93;
  v94 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v95 = v94;
  if (!v94)
    goto LABEL_293;
  bzero(v94, 4 * v399);
  *(_QWORD *)((*a1)[7] + 72) = v95;
  if ((int)v399 >= 1)
  {
    v96 = (*a1)[7];
    v97 = *(_DWORD **)(v96 + 64);
    v98 = *(_DWORD **)(v96 + 72);
    v99 = v399;
    do
    {
      *v97++ = 0;
      *v98++ = 0;
      --v99;
    }
    while (v99);
  }
  v100 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v101 = v100;
  if (!v100)
    goto LABEL_293;
  bzero(v100, 4 * v399);
  *(_QWORD *)((*a1)[7] + 80) = v101;
  v102 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v103 = v102;
  if (!v102)
    goto LABEL_293;
  bzero(v102, 4 * v399);
  *(_QWORD *)((*a1)[7] + 88) = v103;
  v104 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v105 = v104;
  if (!v104)
    goto LABEL_293;
  bzero(v104, 4 * v399);
  *(_QWORD *)((*a1)[7] + 96) = v105;
  v106 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v107 = v106;
  if (!v106)
    goto LABEL_293;
  bzero(v106, 4 * v399);
  *(_QWORD *)((*a1)[7] + 104) = v107;
  v108 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v109 = v108;
  if (!v108)
    goto LABEL_293;
  bzero(v108, 4 * v399);
  *(_QWORD *)((*a1)[7] + 112) = v109;
  v110 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v111 = v110;
  if (!v110)
    goto LABEL_293;
  bzero(v110, 4 * v399);
  *(_QWORD *)((*a1)[7] + 120) = v111;
  v112 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v113 = v112;
  if (!v112)
    goto LABEL_293;
  bzero(v112, 4 * v399);
  *(_QWORD *)((*a1)[7] + 128) = v113;
  v114 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v115 = v114;
  if (!v114)
    goto LABEL_293;
  bzero(v114, 4 * v399);
  *(_QWORD *)((*a1)[7] + 136) = v115;
  v116 = malloc_type_malloc(4 * v399, 0x2C8E6D5CuLL);
  v117 = v116;
  if (!v116)
    goto LABEL_293;
  v374 = v20;
  bzero(v116, 4 * v399);
  *(_QWORD *)((*a1)[7] + 168) = v117;
  v118 = malloc_type_malloc(8 * v399, 0x2C8E6D5CuLL);
  v119 = v118;
  if (!v118)
    goto LABEL_293;
  sizea = 4 * v399;
  v373 = v18;
  bzero(v118, 8 * v399);
  *(_QWORD *)((*a1)[7] + 144) = v119;
  *(_QWORD *)((*a1)[7] + 152) = *(_QWORD *)((*a1)[7] + 144);
  *(_QWORD *)((*a1)[7] + 160) = *(_QWORD *)((*a1)[7] + 144) + 4 * v399;
  v120 = malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
  if (!v120)
    goto LABEL_293;
  v398 = 8 * v85;
  v375 = v85;
  v376 = 8 * v399;
  v121 = v16;
  *v120 = 0u;
  v120[1] = 0u;
  (*a1)[8] = (uint64_t)v120;
  v122 = malloc_type_malloc(4 * v400, 0x2C8E6D5CuLL);
  v123 = v122;
  if ((_DWORD)v400)
  {
    if (!v122)
      goto LABEL_293;
  }
  bzero(v122, 4 * v400);
  *(_QWORD *)(*a1)[8] = v123;
  lmsfilt_v5::initLmsFilter(v396, v395, v394, **a1, (float ***)*a1 + 11, v400);
  (*a1)[2] = (*a1)[11];
  (*a1)[4] = (*a1)[11];
  lmsfilt_v5::initLmsFilter(v396, v395, v394, **a1, (float ***)*a1 + 12, v400);
  (*a1)[3] = (*a1)[12];
  v124 = *a1;
  *(_QWORD *)((*a1)[3] + 56) = 0x100000001;
  v125 = *v124;
  v126 = *(int *)(*v124 + 144);
  v128 = *(int *)(*v124 + 40);
  v127 = *(int *)(*v124 + 44);
  v129 = *(int *)(*v124 + 156);
  v372 = *(_DWORD *)(*v124 + 36);
  v130 = *(_DWORD *)(*v124 + 16);
  v131 = *(int *)(*v124 + 128);
  v132 = (char *)malloc_type_malloc(0x288uLL, 0x2C8E6D5CuLL);
  if (!v132)
    goto LABEL_293;
  v133 = v132;
  bzero(v132 + 1, 0x287uLL);
  v124[6] = (uint64_t)v133;
  *v133 = 1;
  *((_DWORD *)v133 + 1) = 813694978;
  v134 = 4 * v131;
  v135 = malloc_type_malloc(4 * v131, 0x2C8E6D5CuLL);
  v136 = v131;
  v137 = v135;
  __srca = v136;
  if (v136)
  {
    if (!v135)
      goto LABEL_293;
  }
  bzero(v135, v134);
  *(_QWORD *)(v124[6] + 8) = v137;
  v138 = v124[6];
  *(_OWORD *)(v138 + 16) = xmmword_1B66A1280;
  *(int32x2_t *)(v138 + 32) = vdup_n_s32(0x30800002u);
  *(_DWORD *)(v138 + 40) = 813694978;
  v139 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v140 = v139;
  if ((_DWORD)v128)
  {
    if (!v139)
      goto LABEL_293;
  }
  bzero(v139, 4 * v128);
  *(_QWORD *)(v124[6] + 48) = v140;
  v141 = malloc_type_malloc(4 * v126, 0x2C8E6D5CuLL);
  v142 = v141;
  if ((_DWORD)v126)
  {
    if (!v141)
      goto LABEL_293;
  }
  bzero(v141, 4 * v126);
  *(_QWORD *)(v124[6] + 56) = v142;
  v143 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v144 = v143;
  if ((_DWORD)v128)
  {
    if (!v143)
      goto LABEL_293;
  }
  bzero(v143, 4 * v128);
  *(_QWORD *)(v124[6] + 64) = v144;
  if ((v128 & 0x80000000) != 0)
    goto LABEL_293;
  v145 = v19;
  v146 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v147 = v146;
  if ((_DWORD)v128)
  {
    if (!v146)
      goto LABEL_293;
  }
  v148 = v17;
  bzero(v146, 4 * v128);
  *(_QWORD *)(v124[6] + 72) = v147;
  v149 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v150 = v149;
  if ((_DWORD)v128)
  {
    if (!v149)
      goto LABEL_293;
  }
  v151 = (float)v401;
  v152 = (float)v130 / (float)v401;
  bzero(v149, 4 * v128);
  *(_QWORD *)(v124[6] + 80) = v150;
  v153 = v124[6];
  *(int32x2_t *)(v153 + 88) = vdup_n_s32(0x30800002u);
  v154 = v401 >> 6 >= 0x177 ? 1.0 - expf(v152 / -0.65) : (float)v372 / 8000.0;
  *(float *)(v153 + 128) = v154;
  *(float *)(v153 + 132) = v152 + v152;
  *(float *)(v153 + 136) = v152 * 0.5;
  *(_QWORD *)(v153 + 148) = 0;
  *(_QWORD *)(v153 + 140) = 0;
  v155 = malloc_type_malloc(4 * (int)v128, 0x2C8E6D5CuLL);
  v156 = v155;
  if (v128 << 34)
  {
    if (!v155)
      goto LABEL_293;
  }
  bzero(v155, 4 * (int)v128);
  *(_QWORD *)(v124[6] + 112) = v156;
  v157 = malloc_type_malloc(4 * (int)v128, 0x2C8E6D5CuLL);
  v158 = v157;
  if (v128 << 34)
  {
    if (!v157)
      goto LABEL_293;
  }
  bzero(v157, 4 * (int)v128);
  *(_QWORD *)(v124[6] + 96) = v158;
  if ((_DWORD)v128)
  {
    v159 = v124[6];
    v160 = *(_DWORD **)(v159 + 112);
    v161 = *(_DWORD **)(v159 + 96);
    v162 = v128;
    do
    {
      *v160++ = 813130719;
      *v161++ = 813130719;
      --v162;
    }
    while (v162);
  }
  v163 = malloc_type_malloc(4 * v129, 0x2C8E6D5CuLL);
  v164 = v163;
  if ((_DWORD)v129)
  {
    if (!v163)
      goto LABEL_293;
  }
  bzero(v163, 4 * v129);
  *(_QWORD *)(v124[6] + 120) = v164;
  v407[0] = 0.0;
  vDSP_vfill(v407, *(float **)(v124[6] + 120), 1, v129);
  v165 = malloc_type_malloc(4 * v129, 0x2C8E6D5CuLL);
  v166 = v165;
  if ((_DWORD)v129)
  {
    if (!v165)
      goto LABEL_293;
  }
  bzero(v165, 4 * v129);
  *(_QWORD *)(v124[6] + 104) = v166;
  v167 = malloc_type_malloc(4 * v129, 0x2C8E6D5CuLL);
  v168 = v167;
  if ((_DWORD)v129)
  {
    if (!v167)
      goto LABEL_293;
  }
  bzero(v167, 4 * v129);
  *(_QWORD *)(v124[6] + 632) = v168;
  v169 = expf(-2.4 / (float)*(int *)(v125 + 44));
  v170 = *(float **)(v124[6] + 104);
  if ((int)v129 >= 1)
  {
    for (i = 0; i < v129; i += v127)
      v170[i] = 0.7;
  }
  v407[0] = 0.0;
  if (__srca < 1)
  {
    v174 = 0.0;
  }
  else
  {
    v172 = 0;
    v173 = v170 + 1;
    v174 = 0.0;
    do
    {
      v174 = v174 + v170[v172 * v127];
      v407[0] = v174;
      if ((int)v127 >= 2)
      {
        v175 = v173;
        v176 = v127 - 1;
        do
        {
          v177 = v169 * *(v175 - 1);
          *v175++ = v177;
          v174 = v177 + v407[0];
          v407[0] = v174;
          --v176;
        }
        while (v176);
      }
      ++v172;
      v173 += v127;
    }
    while (v172 != __srca);
  }
  __B = 1.0 / v174;
  vDSP_vsmul(v170, 1, &__B, v170, 1, v129);
  *(_QWORD *)(v124[6] + 160) = 0;
  *(_QWORD *)(v124[6] + 168) = 0;
  *(_QWORD *)(v124[6] + 176) = 0;
  *(_QWORD *)(v124[6] + 184) = 0;
  *(_QWORD *)(v124[6] + 192) = 0;
  *(_QWORD *)(v124[6] + 200) = 0;
  *(_QWORD *)(v124[6] + 208) = 0;
  v178 = v124[6];
  *(int32x2_t *)(v178 + 216) = vdup_n_s32(0x30800002u);
  *(_DWORD *)(v178 + 224) = 0;
  *(_OWORD *)(v178 + 228) = xmmword_1B66A1290;
  *(_QWORD *)&v179 = 0x100000001;
  *((_QWORD *)&v179 + 1) = 0x100000001;
  *(_OWORD *)(v178 + 244) = v179;
  *(_QWORD *)(v178 + 296) = 0;
  *(_QWORD *)(v178 + 268) = 0;
  *(_QWORD *)(v178 + 276) = 0;
  *(_QWORD *)(v178 + 260) = 0;
  *(_QWORD *)(v124[6] + 304) = 0;
  *(_QWORD *)(v124[6] + 284) = 0x3080000230800002;
  v180 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v181 = v180;
  if ((_DWORD)v128)
  {
    if (!v180)
      goto LABEL_293;
  }
  bzero(v180, 4 * v128);
  *(_QWORD *)(v124[6] + 296) = v181;
  v182 = malloc_type_malloc(4 * v128, 0x2C8E6D5CuLL);
  v183 = v182;
  if ((_DWORD)v128)
  {
    if (!v182)
    {
LABEL_293:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v368 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v182, 4 * v128);
  *(_QWORD *)(v124[6] + 304) = v183;
  v184 = v124[6];
  if ((_DWORD)v128)
  {
    v185 = *(_DWORD **)(v184 + 296);
    v186 = *(_DWORD **)(v184 + 304);
    v187 = v128;
    do
    {
      *v185++ = 0;
      *v186++ = 0;
      --v187;
    }
    while (v187);
  }
  v188 = floorf(v390 / *(float *)(v125 + 24));
  if (v188 <= 1.0)
    v188 = 1.0;
  v189 = v188;
  *(_DWORD *)(v184 + 236) = v188;
  v190 = 2 * *(_DWORD *)(v125 + 44);
  if (v190 > v188)
  {
    v189 = v190 | 1;
    *(_DWORD *)(v184 + 236) = v190 | 1;
  }
  v191 = v401;
  if (v189 < 5)
  {
    v189 = 5;
LABEL_135:
    *(_DWORD *)(v184 + 236) = v189;
    goto LABEL_136;
  }
  if (v189 >= 0x51)
  {
    v189 = 80;
    goto LABEL_135;
  }
LABEL_136:
  v192 = 4 * v189;
  v193 = malloc_type_malloc(v192, 0x2C8E6D5CuLL);
  if (!v193)
    goto LABEL_293;
  v194 = v193;
  bzero(v193, v192);
  *(_QWORD *)(v124[6] + 192) = v194;
  v195 = malloc_type_malloc(v192, 0x2C8E6D5CuLL);
  if (!v195)
    goto LABEL_293;
  v196 = v195;
  bzero(v195, v192);
  *(_QWORD *)(v124[6] + 200) = v196;
  v197 = malloc_type_malloc(v192, 0x2C8E6D5CuLL);
  if (!v197)
    goto LABEL_293;
  v198 = v197;
  bzero(v197, v192);
  *(_QWORD *)(v124[6] + 208) = v198;
  v199 = (4 * *(_DWORD *)(v124[6] + 236));
  v200 = malloc_type_malloc(v199, 0x2C8E6D5CuLL);
  v201 = v200;
  if ((_DWORD)v199)
  {
    if (!v200)
      goto LABEL_293;
  }
  bzero(v200, v199);
  *(_QWORD *)(v124[6] + 160) = v201;
  v202 = malloc_type_malloc(v199, 0x2C8E6D5CuLL);
  v203 = v202;
  if ((_DWORD)v199)
  {
    if (!v202)
      goto LABEL_293;
  }
  bzero(v202, v199);
  *(_QWORD *)(v124[6] + 168) = v203;
  v204 = malloc_type_malloc(v199, 0x2C8E6D5CuLL);
  v205 = v204;
  if ((_DWORD)v199)
  {
    if (!v204)
      goto LABEL_293;
  }
  bzero(v204, v199);
  *(_QWORD *)(v124[6] + 176) = v205;
  v206.i32[0] = *(_DWORD *)(v125 + 24);
  v207 = (uint32x2_t *)v124[6];
  v208 = vrndm_f32(vdiv_f32(v9, (float32x2_t)vdup_lane_s32(v206, 0)));
  __asm { FMOV            V9.2S, #1.0 }
  v213 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32(_D9, v208), (int8x8_t)_D9, (int8x8_t)v208));
  v214 = floorf(v382 / *(float *)v206.i32);
  if (v214 <= 1.0)
    v214 = 1.0;
  v215 = v214;
  v216 = floorf(v381 / *(float *)v206.i32);
  if (v216 <= 1.0)
    v216 = 1.0;
  v217 = v216;
  v218 = floorf(v10 / *(float *)v206.i32);
  if (v218 <= 1.0)
    v218 = 1.0;
  v219 = v218;
  if (v190 > v218)
  {
    v219 = v190;
    if (v10 > v390)
      v219 = v190 + 2;
  }
  v220 = v207[29].u32[1];
  v207[30] = vmin_u32((uint32x2_t)vdup_n_s32(v220), v213);
  if (v220 < v215)
    v215 = v220;
  if (v220 < v217)
    v217 = v220;
  v207[32].i32[0] = v217;
  v221 = v219 >= v220 + 1 ? v220 + 1 : v219;
  v207[31].i32[0] = v215;
  v207[31].i32[1] = v221;
  v222 = v221 <= v220 ? v220 : v221;
  v223 = 4 * v222;
  v224 = malloc_type_malloc(v223, 0x2C8E6D5CuLL);
  if (!v224 && (_DWORD)v223 != 0)
    goto LABEL_293;
  v226 = v224;
  bzero(v224, v223);
  *(_QWORD *)(v124[6] + 184) = v226;
  v227 = v124[6];
  v228 = *(unsigned int *)(v227 + 236);
  if ((_DWORD)v228)
  {
    v229 = *(_DWORD **)(v227 + 184);
    v230 = *(_DWORD **)(v227 + 192);
    v231 = *(unsigned int *)(v227 + 236);
    v232 = *(_DWORD **)(v227 + 200);
    v233 = *(_DWORD **)(v227 + 208);
    do
    {
      *v229++ = 1;
      *v230++ = 1;
      *v232++ = 1;
      *v233++ = 1;
      --v231;
    }
    while (v231);
  }
  v234 = *(_DWORD *)(v227 + 252);
  if (v228 < v234)
    memset_pattern16((void *)(*(_QWORD *)(v227 + 184) + 4 * v228), &unk_1B66A2BB0, 4 * (v234 + ~(_DWORD)v228) + 4);
  v235 = __exp10f(v377 / 10.0);
  v236 = v124[6];
  *(float *)(v236 + 260) = v235;
  *(_QWORD *)(v236 + 264) = v380;
  *(_DWORD *)(v236 + 272) = v379;
  v237 = __exp10f(v378 / 10.0);
  v238 = v124[6];
  *(float *)(v238 + 276) = v237;
  *(_QWORD *)(v238 + 320) = 0;
  *(_QWORD *)(v238 + 372) = 0;
  *(_OWORD *)(v238 + 336) = 0u;
  *(_OWORD *)(v238 + 352) = 0u;
  v239 = *(int *)(v125 + 128);
  v240 = malloc_type_malloc(4 * v239, 0x2C8E6D5CuLL);
  v241 = v240;
  if ((_DWORD)v239)
  {
    if (!v240)
      goto LABEL_293;
  }
  bzero(v240, 4 * v239);
  *(_QWORD *)(v124[6] + 328) = v241;
  v243 = v124[6];
  *(_QWORD *)(v243 + 380) = 0;
  *(_DWORD *)(v243 + 388) = 1022739087;
  *(_QWORD *)(v243 + 312) = 0;
  if (!*(_DWORD *)(v125 + 100))
  {
    v244 = *(int *)(v125 + 128);
    v245 = malloc_type_malloc(4 * v244, 0x2C8E6D5CuLL);
    v246 = v245;
    if ((_DWORD)v244 && !v245)
      goto LABEL_293;
    bzero(v245, 4 * v244);
    *(_QWORD *)(v124[6] + 312) = v246;
    v248 = v124[6];
    *(_DWORD *)(v248 + 320) = 0;
    v249 = *(_DWORD *)(v125 + 44);
    *(_OWORD *)(v248 + 336) = v369;
    if ((float)(*(float *)(v125 + 24) * (float)v249) >= 0xC9)
    {
      v247.i32[1] = 1045891645;
      *(_QWORD *)(v248 + 336) = 0x3E570A3D3F0CCCCDLL;
      *(_DWORD *)(v248 + 348) = 1048576000;
    }
    v250 = *(_DWORD *)(v125 + 80);
    *(float *)v247.i32 = v151 / (float)(2 * v250);
    if (v401 > 0xF9F)
    {
      v253 = vcvt_s32_f32(vrndm_f32(vdiv_f32((float32x2_t)0x44E1000043960000, (float32x2_t)vdup_lane_s32(v247, 0))));
      v252 = 1800;
      v251 = 300;
    }
    else
    {
      v251 = (int)*(float *)v247.i32;
      v252 = (int)-(*(float *)v247.i32 - v151 * 0.5);
      v253.i32[0] = 1;
      v253.i32[1] = v250 - 1;
    }
    *(_DWORD *)(v248 + 360) = v251;
    *(_DWORD *)(v248 + 364) = v252;
    *(int32x2_t *)(v248 + 352) = v253;
    *(float *)(v248 + 368) = v370 / 1000.0;
    *(float *)(v248 + 372) = expf((float)-v152 / (float)(v370 / 1000.0));
    *(_DWORD *)(v248 + 380) = 0;
    *(_DWORD *)(v248 + 384) = v249;
    *(_DWORD *)(v248 + 388) = v371;
  }
  v254 = v124[6];
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v254 + 392) = _Q0;
  *(float32x2_t *)(v254 + 408) = _D9;
  *(_DWORD *)(v254 + 416) = 1065353216;
  *(_QWORD *)(v254 + 448) = 0;
  *(_QWORD *)(v124[6] + 456) = 0;
  *(_QWORD *)(v124[6] + 464) = 0;
  *(_QWORD *)(v124[6] + 472) = 0;
  *(_QWORD *)(v124[6] + 496) = 0;
  *(_QWORD *)(v124[6] + 504) = 0;
  *(_QWORD *)(v124[6] + 480) = 0;
  *(_QWORD *)(v124[6] + 488) = 0;
  v256 = (int32x2_t *)v124[6];
  v256[53] = 0;
  v256[54] = 0;
  v256[55] = 0;
  v256[49] = v11;
  if (v401 >> 3 >= 0x55F)
    v257 = 256;
  else
    v257 = 160;
  if (v401 >> 7 <= 0x7C)
    v258 = v257;
  else
    v258 = 320;
  if (v401 >> 4 <= 0x55E)
    v259 = v258;
  else
    v259 = 512;
  if (v401 >> 8 <= 0x7C)
    v260 = v259;
  else
    v260 = 640;
  if (v401 >> 5 <= 0x55E)
    v261 = v260;
  else
    v261 = 1024;
  if (v261 <= *(_DWORD *)(v125 + 16))
    v261 = *(_DWORD *)(v125 + 16);
  v256[53].i32[0] = v261;
  v256[53].i32[1] = 2 * v261;
  v256[55].i32[0] = v261 + 1;
  *(float *)v242.i32 = v151 / (float)(2 * v261);
  v262 = vmin_s32(vadd_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(vcvt_f32_s32(v256[45]), (float32x2_t)vdup_lane_s32(v242, 0)))), (int32x2_t)0x100000001), (int32x2_t)-1), vdup_n_s32((int)(float)((float)((float)(2 * v261) * 0.5) + -1.0)));
  v256[54] = v262;
  v256[55].i32[1] = v262.i32[1] + 1;
  v263 = 4 * (v262.i32[1] + 1);
  v264 = malloc_type_malloc(v263, 0x2C8E6D5CuLL);
  if (!v264 && v263 != 0)
    goto LABEL_293;
  v266 = v264;
  bzero(v264, v263);
  *(_QWORD *)(v124[6] + 496) = v266;
  v267 = malloc_type_malloc(v263, 0x2C8E6D5CuLL);
  if (v263 && v267 == 0)
    goto LABEL_293;
  v269 = v267;
  bzero(v267, v263);
  *(_QWORD *)(v124[6] + 504) = v269;
  v270 = malloc_type_malloc(v263, 0x2C8E6D5CuLL);
  if (v263 && v270 == 0)
    goto LABEL_293;
  v272 = v270;
  bzero(v270, v263);
  *(_QWORD *)(v124[6] + 480) = v272;
  v273 = malloc_type_malloc(v263, 0x2C8E6D5CuLL);
  if (v263 && v273 == 0)
    goto LABEL_293;
  v275 = v273;
  bzero(v273, v263);
  *(_QWORD *)(v124[6] + 488) = v275;
  v276 = 4 * *(_DWORD *)(v124[6] + 440);
  v277 = malloc_type_malloc(v276, 0x2C8E6D5CuLL);
  v278 = v277;
  if (v276)
  {
    if (!v277)
      goto LABEL_293;
  }
  bzero(v277, v276);
  *(_QWORD *)(v124[6] + 448) = v278;
  v279 = malloc_type_malloc(v276, 0x2C8E6D5CuLL);
  v280 = v279;
  if (v276)
  {
    if (!v279)
      goto LABEL_293;
  }
  bzero(v279, v276);
  *(_QWORD *)(v124[6] + 456) = v280;
  v281 = malloc_type_malloc(v276, 0x2C8E6D5CuLL);
  v282 = v281;
  if (v276)
  {
    if (!v281)
      goto LABEL_293;
  }
  bzero(v281, v276);
  *(_QWORD *)(v124[6] + 464) = v282;
  v283 = malloc_type_malloc(v276, 0x2C8E6D5CuLL);
  v284 = v283;
  if (v276)
  {
    if (!v283)
      goto LABEL_293;
  }
  bzero(v283, v276);
  *(_QWORD *)(v124[6] + 472) = v284;
  v285 = expf(v152 / -0.03);
  v286 = v124[6];
  *(float *)(v286 + 412) = v285;
  *(float *)(v286 + 416) = v285;
  *(float *)(v286 + 420) = 1.0 - expf(v152 * -2.0);
  *(_DWORD *)(v286 + 512) = 813694978;
  *(_DWORD *)(v286 + 548) = 0;
  *(_OWORD *)(v286 + 516) = 0u;
  *(_OWORD *)(v286 + 532) = 0u;
  *(_OWORD *)(v286 + 552) = xmmword_1B66A12A0;
  *(_QWORD *)(v286 + 568) = 0x3CCCCCCD00000000;
  *(_OWORD *)(v286 + 576) = xmmword_1B66A1290;
  *(_QWORD *)(v286 + 592) = 0;
  *(_QWORD *)(v286 + 600) = 0xC1A0000000000000;
  *(_OWORD *)(v286 + 608) = 0u;
  *(_DWORD *)(v286 + 624) = 0;
  *(_QWORD *)(v286 + 640) = 3184315597;
  *(_QWORD *)((*a1)[7] + 176) = 0;
  *(_QWORD *)((*a1)[7] + 184) = 0;
  *(_QWORD *)((*a1)[7] + 192) = 0;
  *(_QWORD *)((*a1)[7] + 200) = 0;
  *(_QWORD *)((*a1)[7] + 208) = 0;
  *(_QWORD *)((*a1)[7] + 216) = 0;
  *(_QWORD *)((*a1)[7] + 224) = 0;
  *(_QWORD *)((*a1)[7] + 232) = 0;
  *(_QWORD *)((*a1)[7] + 240) = 0;
  *(_QWORD *)((*a1)[7] + 248) = 0;
  *(_QWORD *)((*a1)[7] + 256) = 0;
  *(_QWORD *)((*a1)[7] + 264) = 0;
  *(_QWORD *)((*a1)[7] + 272) = 0;
  *(_QWORD *)((*a1)[7] + 280) = 0;
  *(_QWORD *)((*a1)[7] + 288) = 0;
  (*a1)[9] = 0;
  v287 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
  v288 = v287;
  if (!v287)
    goto LABEL_293;
  bzero(v287, sizea);
  *(_QWORD *)((*a1)[7] + 296) = v288;
  v289 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
  v290 = v289;
  if (!v289)
    goto LABEL_293;
  bzero(v289, sizea);
  *(_QWORD *)((*a1)[7] + 304) = v290;
  v291 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
  v292 = v291;
  if (!v291)
    goto LABEL_293;
  bzero(v291, sizea);
  *(_QWORD *)((*a1)[7] + 312) = v292;
  v293 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
  v294 = v293;
  if (!v293)
    goto LABEL_293;
  bzero(v293, sizea);
  *(_QWORD *)((*a1)[7] + 320) = v294;
  v295 = malloc_type_malloc(v398, 0x2C8E6D5CuLL);
  v296 = v295;
  if ((_DWORD)v375)
  {
    if (!v295)
      goto LABEL_293;
  }
  bzero(v295, v398);
  *(_QWORD *)((*a1)[7] + 328) = v296;
  *(_QWORD *)((*a1)[7] + 336) = *(_QWORD *)((*a1)[7] + 328) + 4 * v375;
  v297 = malloc_type_malloc(v376, 0x2C8E6D5CuLL);
  v298 = v297;
  if (!v297)
    goto LABEL_293;
  bzero(v297, v376);
  *(_QWORD *)((*a1)[7] + 344) = v298;
  *(_QWORD *)((*a1)[7] + 352) = *(_QWORD *)((*a1)[7] + 344) + 4 * v399;
  v299 = malloc_type_malloc(v376, 0x2C8E6D5CuLL);
  v300 = v299;
  if (!v299)
    goto LABEL_293;
  bzero(v299, v376);
  *(_QWORD *)((*a1)[7] + 360) = v300;
  *(_QWORD *)((*a1)[7] + 368) = *(_QWORD *)((*a1)[7] + 360) + 4 * v399;
  v301 = *a1;
  v302 = (int *)**a1;
  if (v302[25])
    goto LABEL_271;
  v303 = v302[20];
  v304 = v302[33];
  v305 = 4 * v303;
  v306 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v307 = v306;
  if ((_DWORD)v303)
  {
    if (!v306)
      goto LABEL_293;
  }
  bzero(v306, 4 * v303);
  *(_QWORD *)((*a1)[7] + 176) = v307;
  v308 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v309 = v308;
  if ((_DWORD)v303)
  {
    if (!v308)
      goto LABEL_293;
  }
  bzero(v308, 4 * v303);
  *(_QWORD *)((*a1)[7] + 184) = v309;
  v310 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v311 = v310;
  if ((_DWORD)v303)
  {
    if (!v310)
      goto LABEL_293;
  }
  bzero(v310, 4 * v303);
  *(_QWORD *)((*a1)[7] + 192) = v311;
  v312 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v313 = v312;
  if ((_DWORD)v303)
  {
    if (!v312)
      goto LABEL_293;
  }
  bzero(v312, 4 * v303);
  *(_QWORD *)((*a1)[7] + 232) = v313;
  v314 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v315 = v314;
  if ((_DWORD)v303)
  {
    if (!v314)
      goto LABEL_293;
  }
  bzero(v314, 4 * v303);
  *(_QWORD *)((*a1)[7] + 240) = v315;
  v316 = malloc_type_malloc(8 * v303, 0x2C8E6D5CuLL);
  v317 = v316;
  if ((_DWORD)v303)
  {
    if (!v316)
      goto LABEL_293;
  }
  bzero(v316, 8 * v303);
  *(_QWORD *)((*a1)[7] + 248) = v317;
  *(_QWORD *)((*a1)[7] + 256) = *(_QWORD *)((*a1)[7] + 248) + 4 * v303;
  v318 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v319 = v318;
  if ((_DWORD)v303)
  {
    if (!v318)
      goto LABEL_293;
  }
  bzero(v318, 4 * v303);
  *(_QWORD *)((*a1)[7] + 272) = v319;
  v320 = malloc_type_malloc(8 * v304, 0x2C8E6D5CuLL);
  v321 = v320;
  if ((_DWORD)v304)
  {
    if (!v320)
      goto LABEL_293;
  }
  bzero(v320, 8 * v304);
  *(_QWORD *)((*a1)[7] + 264) = v321;
  v322 = malloc_type_malloc(v305 * v304, 0x2C8E6D5CuLL);
  v323 = v322;
  if (v305 * v304)
  {
    if (!v322)
      goto LABEL_293;
  }
  bzero(v322, v305 * v304);
  **(_QWORD **)((*a1)[7] + 264) = v323;
  if ((int)v304 >= 2)
  {
    v324 = 0;
    do
    {
      v325 = (_QWORD *)(*(_QWORD *)((*a1)[7] + 264) + v324);
      v325[1] = *v325 + 4 * v303;
      v324 += 8;
    }
    while (8 * (v304 - 1) != v324);
  }
  v326 = malloc_type_malloc(16 * v304, 0x2C8E6D5CuLL);
  v327 = v326;
  if ((_DWORD)v304)
  {
    if (!v326)
      goto LABEL_293;
  }
  bzero(v326, 16 * v304);
  *(_QWORD *)((*a1)[7] + 280) = v327;
  v328 = 2 * v305 * v304;
  v329 = malloc_type_malloc(v328, 0x2C8E6D5CuLL);
  v330 = v329;
  if (v328)
  {
    if (!v329)
      goto LABEL_293;
  }
  bzero(v329, v328);
  **(_QWORD **)((*a1)[7] + 280) = v330;
  v331 = *(_QWORD **)((*a1)[7] + 280);
  v331[1] = *v331 + 4 * v303;
  if ((int)v304 >= 2)
  {
    v332 = 0;
    do
    {
      v333 = (_QWORD *)(*(_QWORD *)((*a1)[7] + 280) + v332);
      v333[2] = *v333 + 8 * v303;
      v334 = *(_QWORD *)((*a1)[7] + 280) + v332;
      *(_QWORD *)(v334 + 24) = *(_QWORD *)(v334 + 8) + 8 * v303;
      v332 += 16;
    }
    while (16 * (v304 - 1) != v332);
  }
  v335 = malloc_type_malloc(8 * v303, 0x2C8E6D5CuLL);
  v336 = v335;
  if ((_DWORD)v303)
  {
    if (!v335)
      goto LABEL_293;
  }
  bzero(v335, 8 * v303);
  *(_QWORD *)((*a1)[7] + 200) = v336;
  *(_QWORD *)((*a1)[7] + 208) = *(_QWORD *)((*a1)[7] + 200) + 4 * v303;
  v337 = malloc_type_malloc(8 * v303, 0x2C8E6D5CuLL);
  v338 = v337;
  if ((_DWORD)v303)
  {
    if (!v337)
      goto LABEL_293;
  }
  bzero(v337, 8 * v303);
  *(_QWORD *)((*a1)[7] + 216) = v338;
  *(_QWORD *)((*a1)[7] + 224) = *(_QWORD *)((*a1)[7] + 216) + 4 * v303;
  v339 = malloc_type_malloc(4 * v303, 0x2C8E6D5CuLL);
  v340 = v339;
  if ((_DWORD)v303)
  {
    if (!v339)
      goto LABEL_293;
  }
  bzero(v339, 4 * v303);
  *(_QWORD *)((*a1)[7] + 288) = v340;
  vDSP_hann_window(*(float **)((*a1)[7] + 288), v303, 0);
  v191 = v401;
  dft_v5::paramInit_v5(*a1 + 9, v303, v303, 2, v401, v389 != 0, v388, v387, v121, v148, v373, v145, v374, 0, v400, v386, v385, v404 != 0, v403 != 0,
    v402 != 0);
  v301 = *a1;
LABEL_271:
  *(_QWORD *)(v301[7] + 408) = 0;
  *(_QWORD *)((*a1)[7] + 416) = 0;
  *(_QWORD *)((*a1)[7] + 424) = 0;
  *(_QWORD *)((*a1)[7] + 432) = 0;
  *(_QWORD *)((*a1)[7] + 440) = 0;
  *(_QWORD *)((*a1)[7] + 448) = 0;
  *(_QWORD *)((*a1)[7] + 456) = 0;
  *(_QWORD *)((*a1)[7] + 464) = 0;
  *(_QWORD *)((*a1)[7] + 472) = 0;
  v341 = (*a1)[6];
  v342 = *(int *)(v341 + 428);
  if ((int)v342 >= 0)
    v343 = *(_DWORD *)(v341 + 428);
  else
    v343 = v342 + 1;
  v344 = *(int *)(v341 + 424);
  v345 = malloc_type_malloc(4 * v342, 0x2C8E6D5CuLL);
  v346 = v345;
  if ((_DWORD)v342 && !v345)
    goto LABEL_293;
  v347 = v343 >> 1;
  bzero(v345, 4 * v342);
  *(_QWORD *)((*a1)[7] + 408) = v346;
  *(_QWORD *)((*a1)[7] + 416) = *(_QWORD *)((*a1)[7] + 408) + 4 * v347;
  v348 = malloc_type_malloc(4 * v342, 0x2C8E6D5CuLL);
  v349 = v348;
  if ((_DWORD)v342)
  {
    if (!v348)
      goto LABEL_293;
  }
  bzero(v348, 4 * v342);
  *(_QWORD *)((*a1)[7] + 424) = v349;
  *(_QWORD *)((*a1)[7] + 432) = *(_QWORD *)((*a1)[7] + 424) + 4 * v347;
  v350 = malloc_type_malloc(4 * v342, 0x2C8E6D5CuLL);
  v351 = v350;
  if ((_DWORD)v342)
  {
    if (!v350)
      goto LABEL_293;
  }
  bzero(v350, 4 * v342);
  *(_QWORD *)((*a1)[7] + 440) = v351;
  *(_QWORD *)((*a1)[7] + 448) = *(_QWORD *)((*a1)[7] + 440) + 4 * v347;
  v352 = malloc_type_malloc(4 * v344, 0x2C8E6D5CuLL);
  v353 = v352;
  if ((_DWORD)v344)
  {
    if (!v352)
      goto LABEL_293;
  }
  bzero(v352, 4 * v344);
  *(_QWORD *)((*a1)[7] + 456) = v353;
  v354 = malloc_type_malloc(4 * v344, 0x2C8E6D5CuLL);
  v355 = v354;
  if ((_DWORD)v344)
  {
    if (!v354)
      goto LABEL_293;
  }
  bzero(v354, 4 * v344);
  *(_QWORD *)((*a1)[7] + 464) = v355;
  v356 = malloc_type_malloc(4 * v344, 0x2C8E6D5CuLL);
  v357 = v356;
  if ((_DWORD)v344)
  {
    if (!v356)
      goto LABEL_293;
  }
  bzero(v356, 4 * v344);
  *(_QWORD *)((*a1)[7] + 472) = v357;
  dft_v5::paramInit_v5(*a1 + 10, v347, v347, 2, v191, 0, v388, v387, v121, v148, v373, v145, v374, 0, v400, v386, v385, v404 != 0, v403 != 0,
    v402 != 0);
  (*a1)[13] = 0;
  (*a1)[14] = 0;
  v358 = **a1;
  if (*(int *)(v358 + 104) >= 1)
  {
    lmsfilt_v5::initLmsFilter(v396, v395, v394, v358, (float ***)*a1 + 13, v400);
    (*a1)[4] = (*a1)[13];
    lmsfilt_v5::initLmsFilter(v396, v395, v394, **a1, (float ***)*a1 + 14, v400);
    (*a1)[5] = (*a1)[14];
    v359 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
    v360 = v359;
    if (!v359)
      goto LABEL_293;
    bzero(v359, sizea);
    *(_QWORD *)((*a1)[7] + 376) = v360;
    v361 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
    v362 = v361;
    if (!v361)
      goto LABEL_293;
    bzero(v361, sizea);
    *(_QWORD *)((*a1)[7] + 384) = v362;
    v363 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
    v364 = v363;
    if (!v363)
      goto LABEL_293;
    bzero(v363, sizea);
    *(_QWORD *)((*a1)[7] + 392) = v364;
    v365 = malloc_type_malloc(sizea, 0x2C8E6D5CuLL);
    v366 = v365;
    if (!v365)
      goto LABEL_293;
    bzero(v365, sizea);
    *(_QWORD *)((*a1)[7] + 400) = v366;
  }
}

