uint64_t VoiceProcessorV8::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  VoiceProcessorV8 *v3;
  size_t v4;
  int v5;
  const AudioBufferList *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const AudioBufferList *v10;
  const AudioBufferList *v11;
  unsigned int v12;
  unsigned int *v13;
  void *v14;
  const void **v15;
  _QWORD *v16;
  NSObject *v17;
  int v18;
  int *v19;
  OpaqueAudioComponentInstance *v20;
  UInt64 v21;
  UInt64 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  AudioBufferList *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  AudioBufferList *v33;
  uint64_t v34;
  OpaqueAudioComponentInstance *v35;
  __int128 v36;
  __int128 v37;
  OpaqueAudioComponentInstance *v38;
  __int128 v39;
  __int128 v40;
  OpaqueAudioComponentInstance *v41;
  __int128 v42;
  __int128 v43;
  OpaqueAudioComponentInstance *v44;
  __int128 v45;
  __int128 v46;
  AudioBufferList *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  OpaqueAudioComponentInstance *v57;
  __int128 v58;
  __int128 v59;
  OpaqueAudioComponentInstance *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  OpaqueAudioComponentInstance *v64;
  __int128 v65;
  __int128 v66;
  OpaqueAudioComponentInstance *v67;
  __int128 v68;
  __int128 v69;
  VPTimeFreqConverter *v70;
  const float *v71;
  UInt64 v72;
  VPTimeFreqConverter *v73;
  const float *v74;
  UInt64 v75;
  VPTimeFreqConverter *v76;
  const float *v77;
  UInt64 v78;
  VPTimeFreqConverter *v79;
  const float *v80;
  UInt64 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  AudioUnit v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  VPTimeFreqConverter *v91;
  const float *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  VPTimeFreqConverter *v97;
  const float *v98;
  uint64_t v99;
  AudioUnitParameterID **v100;
  uint64_t v101;
  const AudioBufferList *v102;
  unsigned int v103;
  NSObject *v104;
  NSObject *v105;
  int v106;
  int *v107;
  uint64_t v108;
  OpaqueAudioComponentInstance *v109;
  uint64_t v110;
  uint64_t v111;
  const AudioBufferList *v112;
  uint64_t v113;
  uint64_t v114;
  const AudioBufferList *v115;
  uint64_t v116;
  uint64_t v117;
  const AudioBufferList *v118;
  OpaqueAudioComponentInstance *v119;
  void *v120;
  OSStatus Property;
  uint64_t Parameter;
  const float *v123;
  UInt64 v124;
  VPTimeFreqConverter *v125;
  const float *v126;
  uint64_t v127;
  const float *v128;
  VPTimeFreqConverter *v129;
  const float *v130;
  uint64_t v131;
  const float *v132;
  uint64_t v133;
  uint64_t v134;
  VPTimeFreqConverter *v135;
  const float *v136;
  uint64_t v137;
  const float *v138;
  VPTimeFreqConverter *v139;
  const float *v140;
  uint64_t v141;
  const float *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  AudioUnit v146;
  const float *v147;
  uint64_t v148;
  uint64_t v149;
  float *v150;
  float *v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  float v155;
  VPTimeFreqConverter *v156;
  const float *v157;
  UInt64 v158;
  UInt64 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  const AudioBufferList *v163;
  int v164;
  _BOOL4 v165;
  uint64_t v166;
  _BOOL4 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  OpaqueAudioComponentInstance *v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  Float64 v175;
  Float64 v176;
  UInt64 v177;
  __int128 v178;
  __int128 v179;
  AudioUnitParameterValue v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  float *imagp;
  AudioTimeStamp *v185;
  uint64_t v186;
  unsigned int v187;
  const AudioBufferList *v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  const AudioBufferList *v192;
  uint64_t v193;
  AudioBufferList *v194;
  float *v195;
  AudioUnitParameterValue v196;
  OpaqueAudioComponentInstance *v197;
  __int128 v198;
  __int128 v199;
  const AudioBufferList *v200;
  uint64_t v201;
  BOOL *v202;
  __int128 v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  const AudioBufferList *v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  float *v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  AudioUnitParameterValue *v221;
  uint64_t v222;
  uint64_t v223;
  OpaqueAudioComponentInstance *v224;
  __int128 v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  Float64 v229;
  uint64_t v230;
  uint64_t v231;
  OpaqueAudioComponentInstance *v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  const AudioBufferList *v236;
  OpaqueAudioComponentInstance *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  Float64 v249;
  UInt64 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  const AudioBufferList *v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  int v262;
  uint64_t v263;
  OpaqueAudioComponentInstance *v264;
  __int128 v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  OpaqueAudioComponentInstance *v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  AudioUnit v279;
  _BOOL4 v280;
  uint64_t v281;
  _BOOL4 v282;
  uint64_t v283;
  int v284;
  UInt64 v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  OpaqueAudioComponentInstance *v289;
  AudioUnitParameterID v290;
  int v291;
  AudioUnit v292;
  UInt64 v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  void *v301;
  unsigned int v302;
  int v303;
  char *v304;
  uint64_t *v305;
  uint64_t v306;
  VPTimeFreqConverter *v307;
  const float *v308;
  Float64 v309;
  uint64_t v310;
  VPTimeFreqConverter *v311;
  const float *v312;
  __int128 v313;
  __int128 v314;
  OSStatus v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  void *v320;
  _DWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t *v326;
  uint64_t *v327;
  uint64_t v328;
  _OWORD *v329;
  UInt64 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  OpaqueAudioComponentInstance *v334;
  int v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  const AudioBufferList *v342;
  void *v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  AudioUnit v352;
  float v353;
  float v354;
  _BOOL4 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  AudioUnit v361;
  UInt64 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  const AudioBufferList *v366;
  OpaqueAudioComponentInstance *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  AudioUnit v373;
  UInt64 v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  const AudioBufferList *v378;
  char v379;
  float *v380;
  uint64_t v381;
  uint64_t v382;
  _BOOL4 v383;
  unsigned int v384;
  char v385;
  char *v386;
  const float *v387;
  float *v388;
  OpaqueAudioComponentInstance *v389;
  BOOL v390;
  uint64_t v391;
  char *v392;
  OpaqueAudioComponentInstance *v393;
  AudioUnit *v394;
  void *v395;
  UInt64 v396;
  UInt64 v397;
  __int128 v398;
  __int128 v399;
  unsigned int v400;
  AudioUnitParameterValue v401;
  unsigned int v402;
  char v403;
  uint64_t v404;
  OpaqueAudioComponentInstance *v405;
  AudioUnitParameterID v406;
  OpaqueAudioComponentInstance *v407;
  unsigned int v408;
  OpaqueAudioComponentInstance *v409;
  __int128 v410;
  __int128 v411;
  OpaqueAudioComponentInstance *v412;
  __int128 v413;
  __int128 v414;
  OpaqueAudioComponentInstance *v415;
  __int128 v416;
  __int128 v417;
  uint64_t v418;
  OpaqueAudioComponentInstance *v419;
  __int128 v420;
  __int128 v421;
  OpaqueAudioComponentInstance *v422;
  __int128 v423;
  __int128 v424;
  int mSampleTime_low;
  OpaqueAudioComponentInstance *v426;
  OpaqueAudioComponentInstance *v427;
  __int128 v428;
  __int128 v429;
  unsigned __int8 v430;
  uint64_t v432;
  uint64_t v433;
  AudioUnitParameterValue *v434;
  AudioUnitParameterValue *v435;
  AudioUnitParameterValue *v436;
  AudioUnitParameterValue *v437;
  AudioUnitParameterValue *v438;
  int v439;
  _BOOL4 v440;
  int v441;
  int v442;
  AudioBufferList *v443;
  uint64_t *v444;
  const AudioBufferList *v445;
  UInt64 v446;
  AudioUnitParameterValue v447;
  char v448;
  AudioUnitParameterValue v449;
  BOOL v450;
  BOOL v451;
  BOOL v452;
  BOOL v453;
  __int16 v454;
  AudioUnitRenderActionFlags v455;
  AudioUnitParameterValue v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  int v462;
  const AudioBufferList *v463;
  int v464;
  AudioTimeStamp v465;
  AudioBufferList v466;
  AudioBufferList *v467;
  uint64_t v468;
  DSPSplitComplex v469;
  AudioTimeStamp v470;
  AudioBufferList *inInputBufferLists;
  const AudioBufferList *v472;
  AudioTimeStamp buf;
  uint64_t v474;

  v3 = (VoiceProcessorV8 *)this;
  v474 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned int **)(this + 1080);
  if ((_DWORD)v4)
    bzero(*(void **)(this + 1408), v4);
  if (*((_BYTE *)v3 + 1404))
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  if (!*((_BYTE *)v3 + 2083))
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  v5 = *((unsigned __int8 *)v3 + 15897);
  if (*((_BYTE *)v3 + 15897)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && *((_BYTE *)v3 + 15896)
    || *((_BYTE *)v3 + 15899))
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      v5 = *((unsigned __int8 *)v3 + 15897);
    }
  }
  else
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
  }
  v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((_BYTE *)v3 + 15898))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    v9 = *((unsigned int *)v3 + 127);
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
    if (*((_BYTE *)v3 + 15897))
      goto LABEL_23;
  }
  else
  {
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
  }
  if (!*((_BYTE *)v3 + 15898))
  {
    v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  v9 = *((unsigned int *)v3 + 127);
  v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
  if (*((_BYTE *)v3 + 15897))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_27;
LABEL_28:
  v456 = 0.0;
  if (!*((_BYTE *)v3 + 2083) && !*((_BYTE *)v3 + 2085) && !*((_BYTE *)v3 + 472))
  {
    v25 = *((_QWORD *)v3 + 582);
    if (v25 || (*((_BYTE *)v3 + 4664) & 0x7F) != 0)
    {
      v455 = 0;
      *((_QWORD *)v3 + 2126) = 0;
      *((_QWORD *)v3 + 2127) = 0;
      *((_QWORD *)v3 + 2125) = 0;
      v446 = (UInt64)v3 + 17000;
      *((_DWORD *)v3 + 4250) = 1;
      *((_OWORD *)v3 + 1063) = *(_OWORD *)(*((_QWORD *)v3 + 134) + 8);
      if ((v25 & 1) != 0 && (*((_BYTE *)v3 + 4672) & 1) != 0)
      {
        this = *((_QWORD *)v3 + 347);
        if (this)
        {
          v26 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v26;
          v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v27;
          v455 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v455, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1E0C80A78](this);
      v29 = (AudioBufferList *)((char *)&v433 - ((v28 + 15) & 0x3FFFFFFFF0));
      v30 = (_DWORD *)*((_QWORD *)v3 + 135);
      if (*v30)
      {
        v31 = 0;
        v32 = 2;
        v33 = v29;
        do
        {
          *(_QWORD *)&v33->mNumberBuffers = 0;
          *(_QWORD *)&v33->mBuffers[0].mNumberChannels = 0;
          v33->mBuffers[0].mData = 0;
          v33->mNumberBuffers = 1;
          v33->mBuffers[0] = *(AudioBuffer *)&v30[v32];
          ++v31;
          v32 += 4;
          ++v33;
        }
        while (v31 < *v30);
      }
      v34 = *((_QWORD *)v3 + 582);
      if ((v34 & 2) != 0 && (*((_BYTE *)v3 + 4672) & 2) != 0)
      {
        v35 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 348);
        if (v35)
        {
          v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v36;
          v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          v455 = 512;
          AudioUnitProcess(v35, &v455, &buf, *((_DWORD *)v3 + 127), v29);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v29, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v29);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 4) != 0 && (*((_BYTE *)v3 + 4672) & 4) != 0)
      {
        v38 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 349);
        if (v38)
        {
          v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v39;
          v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          v455 = 512;
          AudioUnitProcess(v38, &v455, &buf, *((_DWORD *)v3 + 127), v29 + 1);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v29 + 1, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v29 + 1);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 8) != 0 && (*((_BYTE *)v3 + 4672) & 8) != 0)
      {
        v41 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 350);
        if (v41)
        {
          v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v42;
          v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          v455 = 512;
          AudioUnitProcess(v41, &v455, &buf, *((_DWORD *)v3 + 127), v29 + 2);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v29 + 2, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v29 + 2);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 0x10) != 0 && (*((_BYTE *)v3 + 4672) & 0x10) != 0)
      {
        v44 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 351);
        if (v44)
        {
          v45 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v45;
          v46 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v46;
          v455 = 512;
          v47 = v29 + 3;
          AudioUnitProcess(v44, &v455, &buf, *((_DWORD *)v3 + 127), v47);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v47, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v47);
        }
      }
      v48 = *((_QWORD *)v3 + 135);
      v49 = *(_DWORD *)v48;
      v444 = &v433;
      if (v49 < 3)
      {
        *((_OWORD *)v3 + 1051) = *(_OWORD *)(v48 + 8);
        if (*(_DWORD *)v48 < 2u)
        {
          v54 = 0;
          v53 = 0;
          v52 = 0;
          v51 = 0;
        }
        else
        {
          v54 = 0;
          v53 = 0;
          if (*(_BYTE *)(v446 + 64))
          {
            v52 = 0;
            *((_OWORD *)v3 + 1051) = *(_OWORD *)(v48 + 24);
            *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v48 + 8);
            v51 = 1;
          }
          else
          {
            v51 = 0;
            *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v48 + 24);
            v52 = 1;
          }
        }
LABEL_115:
        v56 = *((_QWORD *)v3 + 582);
        if ((v56 & 0x40) != 0 && (*((_BYTE *)v3 + 4672) & 0x40) != 0)
        {
          v57 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 353);
          if (v57)
          {
            v58 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v58;
            v59 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v59;
            v455 = 512;
            AudioUnitProcess(v57, &v455, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16808));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
            v56 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v56 & 0x80) != 0 && (*((_BYTE *)v3 + 4672) & 0x80) != 0)
        {
          v60 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 354);
          if (v60)
          {
            v61 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v61;
            v62 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v62;
            v455 = 512;
            AudioUnitProcess(v60, &v455, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16832));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16832), &buf);
            v56 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v56 & 0x100) != 0)
        {
          v63 = *((_QWORD *)v3 + 584);
          if ((v63 & 0x100) != 0)
          {
            v64 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 355);
            if (v64)
            {
              if ((v56 & v63 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
              {
                v65 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&buf.mRateScalar = v65;
                v66 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&buf.mSMPTETime.mHours = v66;
                v455 = 512;
                AudioUnitProcess(v64, &v455, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16856));
                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 8u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16856), &buf);
                v56 = *((_QWORD *)v3 + 582);
              }
            }
          }
        }
        if ((v56 & 0x200) != 0 && (*((_BYTE *)v3 + 4673) & 2) != 0)
        {
          v67 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 356);
          if (v67)
          {
            v68 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v68;
            v69 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v69;
            v455 = 512;
            AudioUnitProcess(v67, &v455, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16880));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16880), &buf);
            v56 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v56 & 0x200000) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0)
        {
          if (*((_QWORD *)v3 + 368))
          {
            v70 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2188);
            if (v70)
            {
              v71 = (const float *)*((_QWORD *)v3 + 2103);
              v72 = *(_QWORD *)(*((_QWORD *)v3 + 2183) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2183) + 16);
              buf.mHostTime = v72;
              VPTimeFreqConverter::Analyze(v70, v71, (DSPSplitComplex *)&buf);
              v56 = *((_QWORD *)v3 + 582);
            }
          }
        }
        if ((v56 & 0x400000) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0)
        {
          if (*((_QWORD *)v3 + 369))
          {
            v73 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2189);
            if (v73)
            {
              v74 = (const float *)*((_QWORD *)v3 + 2106);
              v75 = *(_QWORD *)(*((_QWORD *)v3 + 2184) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2184) + 16);
              buf.mHostTime = v75;
              VPTimeFreqConverter::Analyze(v73, v74, (DSPSplitComplex *)&buf);
              v56 = *((_QWORD *)v3 + 582);
            }
          }
        }
        if ((v56 & 0x800000) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
        {
          if (*((_QWORD *)v3 + 370))
          {
            v76 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2190);
            if (v76)
            {
              v77 = (const float *)*((_QWORD *)v3 + 2109);
              v78 = *(_QWORD *)(*((_QWORD *)v3 + 2185) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2185) + 16);
              buf.mHostTime = v78;
              VPTimeFreqConverter::Analyze(v76, v77, (DSPSplitComplex *)&buf);
              v56 = *((_QWORD *)v3 + 582);
            }
          }
        }
        if ((v56 & 0x1000000) != 0 && (*((_BYTE *)v3 + 4675) & 1) != 0)
        {
          if (*((_QWORD *)v3 + 371))
          {
            v79 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2191);
            if (v79)
            {
              v80 = (const float *)*((_QWORD *)v3 + 2112);
              v81 = *(_QWORD *)(*((_QWORD *)v3 + 2186) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2186) + 16);
              buf.mHostTime = v81;
              VPTimeFreqConverter::Analyze(v79, v80, (DSPSplitComplex *)&buf);
              v56 = *((_QWORD *)v3 + 582);
            }
          }
        }
        if (((v56 & 0x800000000000) == 0 || (*((_BYTE *)v3 + 4677) & 0x80) == 0 || !*((_QWORD *)v3 + 394))
          && (v56 & 0x400) != 0
          && (*((_BYTE *)v3 + 4673) & 4) != 0)
        {
          v82 = *((_QWORD *)v3 + 357);
          if (v82)
          {
            MEMORY[0x1E0C80A78](v82);
            *(&v433 - 6) = 2;
            *(_OWORD *)(&v433 - 5) = *((_OWORD *)v3 + 1051);
            *(_OWORD *)(&v433 - 3) = *(_OWORD *)((char *)v3 + 16840);
            *(_QWORD *)&v465.mSampleTime = &v433 - 6;
            v465.mHostTime = 0;
            *(_QWORD *)&v470.mSampleTime = (char *)v3 + 16808;
            memset(&v470.mHostTime, 0, 24);
            v455 = 512;
            v83 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v83;
            v84 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v84;
            AudioUnitProcessMultiple(v85, &v455, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 4u, (AudioBufferList **)&v470);
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
            v56 = *((_QWORD *)v3 + 582);
          }
        }
        v454 = 0;
        v86 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v86;
        v87 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v87;
        if ((v56 & 0x2000000) == 0 || (*((_BYTE *)v3 + 4675) & 2) == 0 || !*((_QWORD *)v3 + 372))
        {
LABEL_193:
          v453 = 0;
          if ((*((_BYTE *)v3 + 4659) & 4) == 0 || (*((_BYTE *)v3 + 4675) & 4) == 0 || !*((_QWORD *)v3 + 373))
            goto LABEL_209;
          v94 = *((_QWORD *)v3 + 2098);
          if ((unint64_t)(*((_QWORD *)v3 + 2099) - v94) <= 0x28)
            goto LABEL_885;
          ECApplicator::apply(*(AudioUnitParameterID **)(v94 + 40), &buf, v52, &v453, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
          v95 = *((unsigned int *)v3 + 127);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v95, *((const AudioBufferList **)v3 + 136), &buf);
            v95 = *((unsigned int *)v3 + 127);
            v96 = *((_QWORD *)v3 + 2137);
            if (*((_BYTE *)v3 + 15897))
              goto LABEL_203;
          }
          else
          {
            v96 = *((_QWORD *)v3 + 2137);
          }
          if (!*((_BYTE *)v3 + 15898))
          {
LABEL_204:
            v97 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2145);
            v98 = *(const float **)(v96 + 16);
            v99 = *((_QWORD *)v3 + 508);
            v470.mSampleTime = *(Float64 *)(v99 + 16);
            v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v95;
            if (v97)
            {
              VPTimeFreqConverter::Analyze(v97, v98, (DSPSplitComplex *)&v470);
              v95 = *((unsigned int *)v3 + 127);
              v99 = *((_QWORD *)v3 + 508);
            }
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v95, (const AudioBufferList *)v99, &buf);
LABEL_209:
            if ((*((_BYTE *)v3 + 4658) & 0x20) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0 && *((_QWORD *)v3 + 368))
            {
              v100 = (AudioUnitParameterID **)*((_QWORD *)v3 + 2098);
              if (*((AudioUnitParameterID ***)v3 + 2099) == v100)
                goto LABEL_885;
              ECApplicator::apply(*v100, &buf, v51, (BOOL *)&v454 + 1, (float *)v3 + 1046, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066);
              v101 = *((unsigned int *)v3 + 127);
              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v101, (const AudioBufferList *)((char *)v3 + 16808), &buf);
                v101 = *((unsigned int *)v3 + 127);
                v102 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
                if (*((_BYTE *)v3 + 15897))
                {
LABEL_249:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v101, v102, &buf);
                  goto LABEL_235;
                }
              }
              else
              {
                v102 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
              }
              if (*((_BYTE *)v3 + 15898))
                goto LABEL_249;
            }
            else
            {
              v103 = 0;
              while (((*((_DWORD *)v3 + 116) >> v103) & 1) == 0)
              {
                if (++v103 == 32)
                {
                  v103 = 33;
                  break;
                }
              }
              if (v103 >= **((_DWORD **)v3 + 135))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v104 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v104)
                {
                  v105 = v104;
                  if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
                  {
                    v106 = **((_DWORD **)v3 + 135);
                    LODWORD(v470.mSampleTime) = 136315906;
                    *(_QWORD *)((char *)&v470.mSampleTime + 4) = "vpProcessUplink_v8.cpp";
                    WORD2(v470.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v470.mHostTime + 6) = 370;
                    WORD1(v470.mRateScalar) = 1024;
                    HIDWORD(v470.mRateScalar) = v103;
                    LOWORD(v470.mWordClockTime) = 1024;
                    *(_DWORD *)((char *)&v470.mWordClockTime + 2) = v106;
                    _os_log_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&v470, 0x1Eu);
                  }
                }
                v107 = (int *)*((_QWORD *)v3 + 1570);
                if (v107 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v107, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessUplink_v8.cpp", 370, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v103, **((_DWORD **)v3 + 135));
                  v103 = 0;
                }
                else
                {
                  v103 = 0;
                }
              }
              v108 = *((_QWORD *)v3 + 135) + 16 * v103;
              memcpy(*(void **)(*((_QWORD *)v3 + 136) + 16), *(const void **)(v108 + 16), *(unsigned int *)(v108 + 12));
            }
LABEL_235:
            if ((*((_BYTE *)v3 + 4664) & 0x20) != 0 && (*((_BYTE *)v3 + 4680) & 0x20) != 0)
            {
              v109 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 416);
              if (v109)
              {
                v470.mSampleTime = *((Float64 *)v3 + 135);
                v470.mHostTime = v446;
                v465.mSampleTime = *((Float64 *)v3 + 136);
                v455 = 512;
                AudioUnitProcessMultiple(v109, &v455, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v470, 1u, (AudioBufferList **)&v465);
              }
            }
            v452 = 0;
            if ((*((_BYTE *)v3 + 4658) & 0x40) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0 && *((_QWORD *)v3 + 369))
            {
              v110 = *((_QWORD *)v3 + 2098);
              if ((unint64_t)(*((_QWORD *)v3 + 2099) - v110) <= 8)
                goto LABEL_885;
              ECApplicator::apply(*(AudioUnitParameterID **)(v110 + 8), &buf, v52, &v452, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
              v111 = *((unsigned int *)v3 + 127);
              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v111, (const AudioBufferList *)((char *)v3 + 16832), &buf);
                v111 = *((unsigned int *)v3 + 127);
                v112 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
                if (*((_BYTE *)v3 + 15897))
                {
LABEL_252:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v111, v112, &buf);
                  goto LABEL_253;
                }
              }
              else
              {
                v112 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
              }
              if (*((_BYTE *)v3 + 15898))
                goto LABEL_252;
            }
LABEL_253:
            v451 = 0;
            if ((*((_BYTE *)v3 + 4658) & 0x80) == 0 || (*((_BYTE *)v3 + 4674) & 0x80) == 0 || !*((_QWORD *)v3 + 370))
              goto LABEL_264;
            v113 = *((_QWORD *)v3 + 2098);
            if ((unint64_t)(*((_QWORD *)v3 + 2099) - v113) <= 0x10)
              goto LABEL_885;
            ECApplicator::apply(*(AudioUnitParameterID **)(v113 + 16), &buf, v54, &v451, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
            v114 = *((unsigned int *)v3 + 127);
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v114, (const AudioBufferList *)((char *)v3 + 16856), &buf);
              v114 = *((unsigned int *)v3 + 127);
              v115 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
              if (*((_BYTE *)v3 + 15897))
              {
LABEL_263:
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v114, v115, &buf);
LABEL_264:
                v450 = 0;
                if ((*((_BYTE *)v3 + 4659) & 1) == 0 || (*((_BYTE *)v3 + 4675) & 1) == 0 || !*((_QWORD *)v3 + 371))
                  goto LABEL_275;
                v116 = *((_QWORD *)v3 + 2098);
                if ((unint64_t)(*((_QWORD *)v3 + 2099) - v116) > 0x18)
                {
                  ECApplicator::apply(*(AudioUnitParameterID **)(v116 + 24), &buf, v53, &v450, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
                  v117 = *((unsigned int *)v3 + 127);
                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v117, (const AudioBufferList *)((char *)v3 + 16880), &buf);
                    v117 = *((unsigned int *)v3 + 127);
                    v118 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
                    if (*((_BYTE *)v3 + 15897))
                    {
LABEL_274:
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v117, v118, &buf);
                      goto LABEL_275;
                    }
                  }
                  else
                  {
                    v118 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
                  }
                  if (*((_BYTE *)v3 + 15898))
                    goto LABEL_274;
LABEL_275:
                  if ((*((_BYTE *)v3 + 8837) & 8) != 0 && (*((_BYTE *)v3 + 8845) & 8) != 0)
                  {
                    if (*((_QWORD *)v3 + 480))
                    {
                      *(_BYTE *)(v446 + 32) = 0;
                      if ((*((_BYTE *)v3 + 4658) & 0x80) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
                      {
                        v119 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 370);
                        if (v119)
                        {
                          if (*((_QWORD *)v3 + 2128))
                          {
                            LODWORD(v470.mSampleTime) = 0;
                            if (!AudioUnitGetPropertyInfo(v119, 0xF3Cu, 0, 0, (UInt32 *)&v470, 0)
                              && LODWORD(v470.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
                            {
                              v120 = *(void **)(*((_QWORD *)v3 + 2128) + 16);
                              Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 370), 0xF3Cu, 0, 0, v120, (UInt32 *)&v470);
                              if (*((_BYTE *)v3 + 481))
                                AudioUnitSetProperty(*((AudioUnit *)v3 + 480), 0xF3Cu, 0, 0, v120, LODWORD(v470.mSampleTime));
                              *(_BYTE *)(v446 + 32) = Property == 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  Parameter = *((_QWORD *)v3 + 518);
                  v123 = (const float *)*((_QWORD *)v3 + 2127);
                  v124 = *(_QWORD *)(*((_QWORD *)v3 + 510) + 16) + 4 * *((unsigned int *)v3 + 127);
                  v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 510) + 16);
                  v470.mHostTime = v124;
                  if (Parameter)
                    Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v123, (DSPSplitComplex *)&v470);
                  v449 = 0.0;
                  if ((*((_BYTE *)v3 + 4658) & 0x20) != 0
                    && (*((_BYTE *)v3 + 4674) & 0x20) != 0
                    && *((_QWORD *)v3 + 368))
                  {
                    v125 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 512);
                    v126 = (const float *)*((_QWORD *)v3 + 2103);
                    v127 = *((unsigned int *)v3 + 127);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 428) + 16);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v127;
                    if (v125)
                    {
                      VPTimeFreqConverter::Analyze(v125, v126, (DSPSplitComplex *)&v470);
                      v127 = *((unsigned int *)v3 + 127);
                    }
                    Parameter = *((_QWORD *)v3 + 516);
                    v128 = *(const float **)(*((_QWORD *)v3 + 418) + 16);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 16);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v127;
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v128, (DSPSplitComplex *)&v470);
                      v127 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v127, *((const AudioBufferList **)v3 + 428), &buf);
                  }
                  if ((*((_BYTE *)v3 + 4658) & 0x40) != 0
                    && (*((_BYTE *)v3 + 4674) & 0x40) != 0
                    && *((_QWORD *)v3 + 369))
                  {
                    v129 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 513);
                    v130 = (const float *)*((_QWORD *)v3 + 2106);
                    v131 = *((unsigned int *)v3 + 127);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 505) + 16);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v131;
                    if (v129)
                    {
                      VPTimeFreqConverter::Analyze(v129, v130, (DSPSplitComplex *)&v470);
                      v131 = *((unsigned int *)v3 + 127);
                    }
                    Parameter = *((_QWORD *)v3 + 517);
                    v132 = *(const float **)(*((_QWORD *)v3 + 419) + 16);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 32);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v131;
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v132, (DSPSplitComplex *)&v470);
                      v131 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v131, *((const AudioBufferList **)v3 + 505), &buf);
                  }
                  v133 = *((_QWORD *)v3 + 582);
                  if ((v133 & 0x800000) != 0)
                  {
                    v134 = *((_QWORD *)v3 + 584);
                    if ((v134 & 0x800000) != 0)
                    {
                      if (*((_QWORD *)v3 + 370))
                      {
                        if ((v133 & v134 & 0x40000000000) != 0)
                        {
                          Parameter = *((_QWORD *)v3 + 389);
                          if (Parameter)
                            Parameter = AudioUnitGetParameter((AudioUnit)Parameter, 0x2Bu, 0, 0, &v449);
                        }
                        if (v449 != 0.0
                          || (*((_BYTE *)v3 + 4661) & 0x80) != 0
                          && (*((_BYTE *)v3 + 4677) & 0x80) != 0
                          && *((_QWORD *)v3 + 394))
                        {
                          v135 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 514);
                          v136 = (const float *)*((_QWORD *)v3 + 2109);
                          v137 = *((unsigned int *)v3 + 127);
                          v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2167) + 16);
                          v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v137;
                          if (v135)
                          {
                            VPTimeFreqConverter::Analyze(v135, v136, (DSPSplitComplex *)&v470);
                            v137 = *((unsigned int *)v3 + 127);
                          }
                          Parameter = *((_QWORD *)v3 + 2132);
                          v138 = *(const float **)(*((_QWORD *)v3 + 421) + 16);
                          v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 48);
                          v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v137;
                          if (Parameter)
                          {
                            Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v138, (DSPSplitComplex *)&v470);
                            v137 = *((unsigned int *)v3 + 127);
                          }
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x14u, v137, *((const AudioBufferList **)v3 + 2167), &buf);
                        }
                      }
                    }
                  }
                  if ((*((_BYTE *)v3 + 4659) & 1) != 0 && (*((_BYTE *)v3 + 4675) & 1) != 0 && *((_QWORD *)v3 + 371))
                  {
                    v139 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 515);
                    v140 = (const float *)*((_QWORD *)v3 + 2112);
                    v141 = *((unsigned int *)v3 + 127);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 506) + 16);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v141;
                    if (v139)
                    {
                      VPTimeFreqConverter::Analyze(v139, v140, (DSPSplitComplex *)&v470);
                      v141 = *((unsigned int *)v3 + 127);
                    }
                    Parameter = *((_QWORD *)v3 + 2096);
                    v142 = *(const float **)(*((_QWORD *)v3 + 420) + 16);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 64);
                    v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v141;
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v142, (DSPSplitComplex *)&v470);
                      v141 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v141, *((const AudioBufferList **)v3 + 506), &buf);
                  }
                  v143 = *((_QWORD *)v3 + 582);
                  if ((v143 & 0x800) != 0 && (*((_BYTE *)v3 + 4673) & 8) != 0)
                  {
                    Parameter = *((_QWORD *)v3 + 358);
                    if (Parameter)
                    {
                      MEMORY[0x1E0C80A78](Parameter);
                      *(&v433 - 6) = 2;
                      *(_OWORD *)(&v433 - 5) = *((_OWORD *)v3 + 1051);
                      *(_OWORD *)(&v433 - 3) = *(_OWORD *)((char *)v3 + 16840);
                      inInputBufferLists = (AudioBufferList *)(&v433 - 6);
                      v472 = 0;
                      v465.mSampleTime = *((Float64 *)v3 + 2172);
                      memset(&v465.mHostTime, 0, 24);
                      v455 = 512;
                      v144 = *(_OWORD *)&a2->mRateScalar;
                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                      *(_OWORD *)&v470.mRateScalar = v144;
                      v145 = *(_OWORD *)&a2->mSMPTETime.mHours;
                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                      *(_OWORD *)&v470.mSMPTETime.mHours = v145;
                      AudioUnitProcessMultiple(v146, &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 4u, (AudioBufferList **)&v465);
                      Parameter = *((_QWORD *)v3 + 2175);
                      v147 = *(const float **)(*((_QWORD *)v3 + 2172) + 16);
                      v148 = *((_QWORD *)v3 + 2173);
                      v149 = *((unsigned int *)v3 + 127);
                      *(_QWORD *)&v466.mNumberBuffers = *(_QWORD *)(v148 + 16);
                      *(_QWORD *)&v466.mBuffers[0].mNumberChannels = *(_QWORD *)&v466.mNumberBuffers + 4 * v149;
                      if (Parameter)
                      {
                        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v147, (DSPSplitComplex *)&v466);
                        v149 = *((unsigned int *)v3 + 127);
                        v148 = *((_QWORD *)v3 + 2173);
                      }
                      if (*(_BYTE *)(v446 + 536))
                      {
                        *(_QWORD *)&v466.mNumberBuffers = *(_QWORD *)(*((_QWORD *)v3 + 428) + 16);
                        *(_QWORD *)&v466.mBuffers[0].mNumberChannels = *(_QWORD *)&v466.mNumberBuffers
                                                                     + 4 * v149;
                        v469.realp = *(float **)(v148 + 16);
                        v469.imagp = &v469.realp[v149];
                        v150 = *(float **)(*((_QWORD *)v3 + 2174) + 16);
                        v151 = &v150[v149];
                        vDSP_zvabs((const DSPSplitComplex *)&v466, 1, v150, 1, v149);
                        vDSP_zvabs(&v469, 1, v151, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmin(v150, 1, v151, 1, v150, 1, *((unsigned int *)v3 + 127));
                        LODWORD(v463) = 507307272;
                        vDSP_vsadd(v151, 1, (const float *)&v463, v151, 1, *((unsigned int *)v3 + 127));
                        vDSP_vdiv(v151, 1, v150, 1, v151, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(v469.realp, 1, v151, 1, v469.realp, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(v469.imagp, 1, v151, 1, v469.imagp, 1, *((unsigned int *)v3 + 127));
                        v149 = *((unsigned int *)v3 + 127);
                        v148 = *((_QWORD *)v3 + 2173);
                      }
                      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x5Fu, v149, (const AudioBufferList *)v148, &v470);
                      v143 = *((_QWORD *)v3 + 582);
                    }
                  }
                  if ((v143 & 0x10000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x10) != 0)
                  {
                    Parameter = *((_QWORD *)v3 + 375);
                    if (Parameter)
                    {
                      v465.mSampleTime = *((Float64 *)v3 + 428);
                      *(Float64 *)&v466.mNumberBuffers = v465.mSampleTime;
                      v455 = 512;
                      v152 = *(_OWORD *)&a2->mRateScalar;
                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                      *(_OWORD *)&v470.mRateScalar = v152;
                      v153 = *(_OWORD *)&a2->mSMPTETime.mHours;
                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                      *(_OWORD *)&v470.mSMPTETime.mHours = v153;
                      Parameter = AudioUnitProcessMultiple((AudioUnit)Parameter, &v455, &v470, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                      if (!(_DWORD)Parameter)
                      {
                        Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 375), 0x1450u, 0, 0, *(void **)(*((_QWORD *)v3 + 2171) + 16), (UInt32 *)(*((_QWORD *)v3 + 2171) + 12));
                        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2171), &v470);
                      }
                      v143 = *((_QWORD *)v3 + 582);
                    }
                  }
                  if ((v143 & 0x80000000000) == 0
                    || (v154 = *((_QWORD *)v3 + 584), (v154 & 0x80000000000) == 0)
                    || (Parameter = *((_QWORD *)v3 + 390)) == 0
                    || (v143 & v154 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
                  {
LABEL_371:
                    v448 = 0;
                    if ((v143 & 0x20000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x20) != 0 && *((_QWORD *)v3 + 376))
                    {
                      v164 = 1;
                      v165 = 1;
                    }
                    else if ((v143 & 0x100000000) != 0 && (*((_BYTE *)v3 + 4676) & 1) != 0)
                    {
                      v164 = 0;
                      v165 = *((_QWORD *)v3 + 379) != 0;
                    }
                    else
                    {
                      v164 = 0;
                      v165 = 0;
                    }
                    v166 = v143 & 0x40000000;
                    if ((v143 & 0x40000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
                    {
                      v167 = 1;
                      v164 = 1;
                      v168 = 1;
                      if ((v143 & 0x80000000) == 0)
                        goto LABEL_396;
                    }
                    else
                    {
                      if ((v143 & 0x80000000) == 0)
                      {
                        v167 = 0;
                        v168 = 1;
                        goto LABEL_396;
                      }
                      v168 = 1;
                      if ((*((_BYTE *)v3 + 4675) & 0x80) != 0)
                      {
                        v169 = *((_QWORD *)v3 + 378);
                        v167 = v169 != 0;
                        if (v169)
                          v168 = 2;
                        else
                          v168 = 1;
                      }
                      else
                      {
                        v167 = 0;
                      }
                    }
                    v170 = *((_QWORD *)v3 + 584);
                    if ((v170 & 0x80000000) != 0
                      && *((_QWORD *)v3 + 378)
                      && (v143 & v170 & 0x100000000) != 0
                      && *((_QWORD *)v3 + 379))
                    {
                      v168 = 2;
                      v164 = 2;
                    }
LABEL_396:
                    if ((v143 & 0x20000000) == 0)
                      goto LABEL_413;
                    if ((*((_BYTE *)v3 + 4675) & 0x20) == 0)
                      goto LABEL_413;
                    Parameter = *((_QWORD *)v3 + 376);
                    if (!Parameter)
                      goto LABEL_413;
                    AudioUnitSetProperty((AudioUnit)Parameter, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
                    if ((*((_BYTE *)v3 + 4659) & 0x40) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0)
                    {
                      v171 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
                      if (*((_QWORD *)v3 + 377))
                      {
                        v172 = (float)*((unsigned int *)v3 + 684);
LABEL_403:
                        AudioUnitSetParameter(v171, 0x1Bu, 0, 0, v172, 0);
                        v173 = *((_QWORD *)v3 + 582);
                        if ((v173 & 0x200000) != 0)
                        {
                          v174 = *((_QWORD *)v3 + 584);
                          if ((v174 & 0x200000) != 0
                            && *((_QWORD *)v3 + 368)
                            && (v173 & v174 & 0x400000) != 0
                            && *((_QWORD *)v3 + 369))
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x3Fu, 0, 0, *((float *)v3 + 1054) * *((float *)v3 + 1055), 0);
                          }
                        }
                        *(_QWORD *)&v175 = *((_QWORD *)v3 + 138) + 24;
                        *(_QWORD *)&v176 = *((_QWORD *)v3 + 139) + 24;
                        if (**((_DWORD **)v3 + 135) <= 2u)
                        {
                          *(_QWORD *)&v465.mSampleTime = *((_QWORD *)v3 + 138) + 24;
                          *(Float64 *)&v465.mHostTime = v176;
                          v465.mRateScalar = 0.0;
                          v465.mWordClockTime = v446;
                          *(_OWORD *)&v465.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
                        }
                        else
                        {
                          v177 = *((_QWORD *)v3 + 140) + 24;
                          *(_OWORD *)&v465.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
                          v465.mSampleTime = v176;
                          v465.mHostTime = v177;
                          v465.mRateScalar = v175;
                          v465.mWordClockTime = v446;
                        }
                        *(_QWORD *)&v466.mNumberBuffers = 0;
                        v455 = 512;
                        AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1090), 0);
                        v178 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&v470.mRateScalar = v178;
                        v179 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&v470.mSMPTETime.mHours = v179;
                        Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 376), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                        v143 = *((_QWORD *)v3 + 582);
                        v166 = v143 & 0x40000000;
LABEL_413:
                        if (v166 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
                        {
                          memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1040) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1041) + 16), *(const void **)(*((_QWORD *)v3 + 505) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          if (*((float *)v3 + 1066) == 0.0 && *((float *)v3 + 1067) == 0.0)
                            v180 = 0.0;
                          else
                            v180 = 1.0;
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x20u, 0, 0, v180, 0);
                          v465.mSampleTime = *((Float64 *)v3 + 434);
                          *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 429);
                          v181 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v470.mRateScalar = v181;
                          v182 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v470.mSMPTETime.mHours = v182;
                          v455 = 512;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v455, &v470, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                          LODWORD(inInputBufferLists) = 8 * *((_DWORD *)v3 + 127);
                          AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE7Au, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 16), (UInt32 *)&inInputBufferLists);
                          LODWORD(inInputBufferLists) = 8 * *((_DWORD *)v3 + 127);
                          Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE79u, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 32), (UInt32 *)&inInputBufferLists);
                          v183 = *((unsigned int *)v3 + 127);
                          imagp = (float *)*((_QWORD *)v3 + 429);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            v185 = &v470;
                            v186 = (uint64_t)v3;
                            v187 = 10;
LABEL_422:
                            Parameter = VoiceProcessorV2::SaveFilesWriteSignal(v186, v187, v183, (const AudioBufferList *)imagp, v185);
                          }
LABEL_450:
                          MEMORY[0x1E0C80A78](Parameter);
                          v200 = (const AudioBufferList *)(&v433 - 8);
                          *((_OWORD *)&v433 - 3) = 0u;
                          *((_OWORD *)&v433 - 2) = 0u;
                          *((_OWORD *)&v433 - 4) = 0u;
                          *((_DWORD *)&v433 - 16) = 3;
                          *(double *)&v203 = MEMORY[0x1E0C80A78](v201);
                          v445 = (const AudioBufferList *)(&v433 - 8);
                          v432 = 0;
                          *((_OWORD *)&v433 - 3) = v203;
                          *((_OWORD *)&v433 - 2) = v203;
                          *((_OWORD *)&v433 - 4) = v203;
                          *((_DWORD *)&v433 - 16) = v204;
                          v205 = *((_QWORD *)v3 + 582);
                          if ((v205 & 0x200000000) != 0 && (*((_BYTE *)v3 + 4676) & 2) != 0 && *((_QWORD *)v3 + 380)
                            || (v205 & 0x400000000) != 0 && (*((_BYTE *)v3 + 4676) & 4) != 0 && *((_QWORD *)v3 + 381)
                            || (v205 & 0x1000000000) != 0
                            && (*((_BYTE *)v3 + 4676) & 0x10) != 0
                            && *((_QWORD *)v3 + 383))
                          {
                            *(_OWORD *)(&v433 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                            *(_OWORD *)(&v433 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 505) + 8);
                            *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 506) + 8);
                            v206 = *((_QWORD *)v3 + 504);
                            v207 = v445;
                            v445->mBuffers[0] = *(AudioBuffer *)(v206 + 8);
                            *(_OWORD *)&v207[1].mNumberBuffers = *(_OWORD *)(v206 + 24);
                            v203 = *(_OWORD *)(v206 + 56);
                            *(_OWORD *)&v207[1].mBuffers[0].mData = v203;
                          }
                          if ((v205 & 0x200000000) == 0 || (*((_BYTE *)v3 + 4676) & 2) == 0 || !*((_QWORD *)v3 + 380))
                          {
LABEL_473:
                            if ((v205 & 0x400000000) == 0
                              || (*((_BYTE *)v3 + 4676) & 4) == 0
                              || !*((_QWORD *)v3 + 381))
                            {
LABEL_486:
                              if ((v205 & 0x1000000000) == 0
                                || (*((_BYTE *)v3 + 4676) & 0x10) == 0
                                || !*((_QWORD *)v3 + 383))
                              {
LABEL_499:
                                if (v164 == 2)
                                {
                                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v167, v165, (BOOL *)&v448, *(AudioUnitParameterValue *)&v203);
                                }
                                else if (v164 == 1)
                                {
                                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v167, v165, &v448, v202);
                                }
                                if (v168 == 1)
                                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v454) != 0, v452, v167, v448 != 0);
                                else
                                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v454) != 0, v450, v167, v448 != 0);
                                LODWORD(inInputBufferLists) = 0;
                                if ((*((_QWORD *)v3 + 582) & 0x1000000000000) != 0
                                  && (*((_QWORD *)v3 + 584) & 0x1000000000000) != 0)
                                {
                                  v222 = *((_QWORD *)v3 + 395);
                                  if (v222)
                                  {
                                    MEMORY[0x1E0C80A78](v222);
                                    *((_OWORD *)&v433 - 3) = 0u;
                                    *((_OWORD *)&v433 - 2) = 0u;
                                    *((_OWORD *)&v433 - 4) = 0u;
                                    *((_DWORD *)&v433 - 16) = 3;
                                    *(double *)&v225 = MEMORY[0x1E0C80A78](v223);
                                    v432 = 0;
                                    *((_OWORD *)&v433 - 3) = v225;
                                    *((_OWORD *)&v433 - 2) = v225;
                                    *((_OWORD *)&v433 - 4) = v225;
                                    *((_DWORD *)&v433 - 16) = v226;
                                    *(_OWORD *)(v227 - 56) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                    *(_OWORD *)(v227 - 40) = *(_OWORD *)(*((_QWORD *)v3 + 431) + 8);
                                    *(_OWORD *)(v227 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
                                    v228 = *((_QWORD *)v3 + 504);
                                    *(_OWORD *)(&v433 - 7) = *(_OWORD *)(v228 + 8);
                                    *(_OWORD *)(&v433 - 5) = *(_OWORD *)(v228 + 24);
                                    *(_OWORD *)(&v433 - 3) = *(_OWORD *)(v228 + 40);
                                    v465.mSampleTime = v229;
                                    v465.mHostTime = (UInt64)(&v433 - 8);
                                    *(_OWORD *)&v466.mNumberBuffers = *((_OWORD *)v3 + 1084);
                                    if ((v230 & v231 & 0x400000000000000) != 0)
                                    {
                                      v232 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 405);
                                      if (v232)
                                      {
                                        LODWORD(v470.mSampleTime) = 0;
                                        AudioUnitGetParameter(v232, 0, 0, 0, (AudioUnitParameterValue *)&v470);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 0, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 395), 0xDu, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        v224 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 395);
                                      }
                                    }
                                    v233 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&v470.mRateScalar = v233;
                                    v234 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&v470.mSMPTETime.mHours = v234;
                                    AudioUnitProcessMultiple(v224, &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                                    v235 = *((unsigned int *)v3 + 127);
                                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                    {
                                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Fu, v235, *((const AudioBufferList **)v3 + 2168), &v470);
                                      v235 = *((unsigned int *)v3 + 127);
                                      v236 = (const AudioBufferList *)*((_QWORD *)v3 + 2169);
                                      if (*((_BYTE *)v3 + 15897))
                                      {
LABEL_518:
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x80u, v235, v236, &v470);
                                        goto LABEL_519;
                                      }
                                    }
                                    else
                                    {
                                      v236 = (const AudioBufferList *)*((_QWORD *)v3 + 2169);
                                    }
                                    if (*((_BYTE *)v3 + 15898))
                                      goto LABEL_518;
                                  }
                                }
LABEL_519:
                                v237 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 432) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 16), *((unsigned int *)v3 + 1071));
                                v238 = *((_QWORD *)v3 + 582);
                                if ((v238 & 0x800000) != 0
                                  && (*((_BYTE *)v3 + 4674) & 0x80) != 0
                                  && *((_QWORD *)v3 + 370)
                                  && v449 == 1.0)
                                {
                                  v237 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 2131) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 48), *((unsigned int *)v3 + 1071));
                                  v238 = *((_QWORD *)v3 + 582);
                                }
                                if ((v238 & 0x200000000000) == 0
                                  || (v239 = *((_QWORD *)v3 + 584), (v239 & 0x200000000000) == 0)
                                  || !*((_QWORD *)v3 + 392))
                                {
LABEL_542:
                                  if ((v238 & 0x400000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x400000000000) != 0)
                                  {
                                    v255 = *((_QWORD *)v3 + 393);
                                    if (v255)
                                    {
                                      MEMORY[0x1E0C80A78](v255);
                                      *((_OWORD *)&v433 - 3) = 0u;
                                      *((_OWORD *)&v433 - 2) = 0u;
                                      *((_DWORD *)&v433 - 12) = 2;
                                      *(double *)&v257 = MEMORY[0x1E0C80A78](v256);
                                      v432 = 0;
                                      *((_OWORD *)&v433 - 3) = v257;
                                      *((_OWORD *)&v433 - 2) = v257;
                                      *((_DWORD *)&v433 - 12) = v258;
                                      *(_OWORD *)(v259 - 40) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                      *(_OWORD *)(v259 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2168) + 8);
                                      *(_OWORD *)(&v433 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 504) + 8);
                                      *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2169) + 8);
                                      *(double *)&v261 = MEMORY[0x1E0C80A78](v260);
                                      *((_OWORD *)&v433 - 3) = v261;
                                      *((_OWORD *)&v433 - 2) = v261;
                                      *((_DWORD *)&v433 - 12) = v262;
                                      *(double *)&v265 = MEMORY[0x1E0C80A78](v263);
                                      v432 = 0;
                                      *((_OWORD *)&v433 - 3) = v265;
                                      *((_OWORD *)&v433 - 2) = v265;
                                      *((_DWORD *)&v433 - 12) = v266;
                                      v267 = *((_QWORD *)v3 + 2170);
                                      *(_OWORD *)(v268 - 40) = *(_OWORD *)(v267 + 8);
                                      *(_OWORD *)(v268 - 24) = *(_OWORD *)(v267 + 24);
                                      *(_OWORD *)(&v433 - 5) = *(_OWORD *)(v267 + 40);
                                      *(_OWORD *)(&v433 - 3) = *(_OWORD *)(v267 + 56);
                                      if ((v269 & v270 & 0x1000000000000) != 0)
                                      {
                                        v271 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 395);
                                        if (v271)
                                        {
                                          LODWORD(v470.mSampleTime) = 0;
                                          AudioUnitGetParameter(v271, 1u, 0, 0, (AudioUnitParameterValue *)&v470);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 0, 4u, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 396), 0, 0, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                          v264 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 393);
                                        }
                                      }
                                      *(_QWORD *)&v465.mSampleTime = &v433 - 6;
                                      v465.mHostTime = (UInt64)(&v433 - 6);
                                      *(_QWORD *)&v466.mNumberBuffers = &v433 - 6;
                                      *(_QWORD *)&v466.mBuffers[0].mNumberChannels = &v433 - 6;
                                      v272 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v470.mRateScalar = v272;
                                      v273 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v470.mSMPTETime.mHours = v273;
                                      v455 = 512;
                                      AudioUnitProcessMultiple(v264, &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                                      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x83u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2170), &v470);
                                      v238 = *((_QWORD *)v3 + 582);
                                    }
                                  }
                                  if ((v238 & 0x2000000000000) != 0)
                                  {
                                    v274 = *((_QWORD *)v3 + 584);
                                    if ((v274 & 0x2000000000000) != 0)
                                    {
                                      v275 = *((_QWORD *)v3 + 396);
                                      if (v275)
                                      {
                                        if ((v238 & v274 & 0x400000000000) != 0 && *((_QWORD *)v3 + 393))
                                        {
                                          MEMORY[0x1E0C80A78](v275);
                                          v432 = 0;
                                          *((_OWORD *)&v433 - 3) = 0u;
                                          *((_OWORD *)&v433 - 2) = 0u;
                                          *((_DWORD *)&v433 - 12) = 2;
                                          v276 = *((_QWORD *)v3 + 2170);
                                          *(_OWORD *)(&v433 - 5) = *(_OWORD *)(v276 + 8);
                                          *(_OWORD *)(&v433 - 3) = *(_OWORD *)(v276 + 24);
                                          *(_QWORD *)&v465.mSampleTime = &v433 - 6;
                                          *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 431);
                                          v277 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&v470.mRateScalar = v277;
                                          v278 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&v470.mSMPTETime.mHours = v278;
                                          v455 = 512;
                                          AudioUnitProcessMultiple(v279, &v455, &v470, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 431), &v470);
                                          v238 = *((_QWORD *)v3 + 582);
                                        }
                                      }
                                    }
                                  }
                                  if ((v238 & 0x20000000000000) != 0
                                    && (*((_BYTE *)v3 + 4678) & 0x20) != 0
                                    && *((_QWORD *)v3 + 400))
                                  {
                                    v280 = 1;
                                  }
                                  else
                                  {
                                    v280 = (v238 & 0x80000000000000) != 0
                                        && (*((_BYTE *)v3 + 4678) & 0x80) != 0
                                        && *((_QWORD *)v3 + 402) != 0;
                                  }
                                  LODWORD(v469.realp) = 0;
                                  LODWORD(v463) = 0;
                                  v281 = AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v469);
                                  v282 = *(float *)&v469.realp < 1.0 && v280;
                                  LODWORD(v445) = v282;
                                  if (v280)
                                  {
                                    LODWORD(v470.mSampleTime) = 1065353216;
                                    if (*(float *)&v469.realp < 1.0)
                                      vDSP_vfill((const float *)&v470, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, *((unsigned int *)v3 + 127));
                                    vDSP_vfill((const float *)&v470, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
                                    v283 = *((_QWORD *)v3 + 582);
                                  }
                                  else
                                  {
                                    v283 = *((_QWORD *)v3 + 582);
                                    if ((v283 & 0x40000000000) == 0
                                      || (*((_BYTE *)v3 + 4677) & 4) == 0
                                      || !*((_QWORD *)v3 + 389))
                                    {
                                      goto LABEL_586;
                                    }
                                  }
                                  if ((v283 & 0x800000000000) == 0
                                    || (*((_BYTE *)v3 + 4677) & 0x80) == 0
                                    || !*((_QWORD *)v3 + 394))
                                  {
                                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                    {
                                      v281 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
                                      v283 = *((_QWORD *)v3 + 582);
                                    }
                                    v284 = 1;
LABEL_587:
                                    v443 = (AudioBufferList *)*((_QWORD *)v3 + 500);
                                    if ((v283 & 0x20000000000000) != 0
                                      && (*((_BYTE *)v3 + 4678) & 0x20) != 0
                                      && (v281 = *((_QWORD *)v3 + 400)) != 0)
                                    {
                                      v285 = *((_QWORD *)v3 + 499);
                                      v465.mSampleTime = *((Float64 *)v3 + 428);
                                      v465.mHostTime = v285;
                                      *(_QWORD *)&v465.mRateScalar = (char *)v3 + 16808;
                                      v286 = *((_QWORD *)v3 + 501);
                                      *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 429);
                                      *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v286;
                                      v466.mBuffers[0].mData = v443;
                                      v455 = 512;
                                      v287 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v470.mRateScalar = v287;
                                      v288 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v470.mSMPTETime.mHours = v288;
                                      AudioUnitProcessMultiple((AudioUnit)v281, &v455, &v470, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v465, 3u, (AudioBufferList **)&v466);
                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v456);
                                      v281 = AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, (AudioUnitParameterValue *)v3 + 4353);
                                      if ((*((_BYTE *)v3 + 4664) & 2) == 0
                                        || (*((_BYTE *)v3 + 4680) & 2) == 0
                                        || !*((_QWORD *)v3 + 412))
                                      {
                                        goto LABEL_603;
                                      }
                                      v289 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
                                      v290 = 2;
                                    }
                                    else
                                    {
                                      if ((v283 & 0x80000000000000) == 0 || (*((_BYTE *)v3 + 4678) & 0x80) == 0)
                                      {
                                        v291 = 1;
                                        goto LABEL_607;
                                      }
                                      v281 = *((_QWORD *)v3 + 402);
                                      v291 = 1;
                                      if (!v281)
                                        goto LABEL_607;
                                      MEMORY[0x1E0C80A78](v281);
                                      *(&v433 - 3) = 0;
                                      v432 = 0;
                                      *(&v433 - 4) = 0;
                                      *((_DWORD *)&v433 - 8) = 1;
                                      *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2170) + 8);
                                      AudioUnitSetParameter(v292, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                                      v293 = *((_QWORD *)v3 + 431);
                                      *(_QWORD *)&v465.mSampleTime = &v433 - 4;
                                      v465.mHostTime = v293;
                                      v465.mRateScalar = *((Float64 *)v3 + 499);
                                      v465.mWordClockTime = (UInt64)v3 + 16808;
                                      v294 = *((_QWORD *)v3 + 436);
                                      *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 429);
                                      *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v294;
                                      v466.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 501);
                                      v467 = v443;
                                      v295 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v470.mRateScalar = v295;
                                      v296 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v470.mSMPTETime.mHours = v296;
                                      v455 = 512;
                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 402), &v455, &v470, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v465, 4u, (AudioBufferList **)&v466);
                                      v281 = AudioUnitGetParameter(*((AudioUnit *)v3 + 402), 2u, 0, 0, &v456);
                                      if ((*((_BYTE *)v3 + 4664) & 2) == 0
                                        || (*((_BYTE *)v3 + 4680) & 2) == 0
                                        || !*((_QWORD *)v3 + 412))
                                      {
LABEL_603:
                                        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                          v281 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &v470);
                                        v291 = 0;
LABEL_607:
                                        v297 = *((_QWORD *)v3 + 582);
                                        if ((v297 & 0x200000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 2) != 0)
                                        {
                                          v281 = *((_QWORD *)v3 + 404);
                                          if (v281)
                                          {
                                            v465.mSampleTime = *((Float64 *)v3 + 428);
                                            *(_QWORD *)&v466.mNumberBuffers = 0;
                                            v298 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v470.mSMPTETime.mHours = v298;
                                            v299 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v470.mRateScalar = v299;
                                            v455 = 512;
                                            v300 = *((_QWORD *)v3 + 502);
                                            v301 = *(void **)(v300 + 16);
                                            v302 = *(_DWORD *)(v300 + 12);
                                            v281 = AudioUnitProcessMultiple((AudioUnit)v281, &v455, &v470, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                                            if ((_DWORD)v281
                                              || (v281 = AudioUnitGetProperty(*((AudioUnit *)v3 + 404), 0x13EDu, 0, 0, *(void **)(*((_QWORD *)v3 + 502) + 16), (UInt32 *)(*((_QWORD *)v3 + 502) + 12)), (_DWORD)v281))
                                            {
                                              if (v302 >= 4)
                                                memset_pattern16(v301, &unk_1B6627B80, v302 & 0xFFFFFFFC);
                                            }
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                              v281 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 502), &v470);
                                            v297 = *((_QWORD *)v3 + 582);
                                          }
                                        }
                                        if ((v297 & 0x400000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 4) != 0)
                                        {
                                          if (*((_QWORD *)v3 + 405))
                                          {
                                            v303 = *(_DWORD *)(v446 + 280);
                                            if (v303)
                                            {
                                              if (v303 == 1)
                                              {
                                                v304 = (char *)v3 + 1104;
                                                v305 = (uint64_t *)((char *)v3 + 1128);
                                              }
                                              else
                                              {
                                                v304 = (char *)v3 + 1112;
                                                v305 = (uint64_t *)((char *)v3 + 1120);
                                              }
                                              v306 = *v305;
                                              v307 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2146);
                                              v308 = *(const float **)(*(_QWORD *)v304 + 40);
                                              v309 = *((double *)v3 + 2142);
                                              v310 = *((unsigned int *)v3 + 127);
                                              v470.mSampleTime = *(Float64 *)(*(_QWORD *)&v309 + 16);
                                              v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v310;
                                              if (v307)
                                              {
                                                VPTimeFreqConverter::Analyze(v307, v308, (DSPSplitComplex *)&v470);
                                                v309 = *((double *)v3 + 2142);
                                                v310 = *((unsigned int *)v3 + 127);
                                              }
                                              v311 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2147);
                                              v312 = *(const float **)(v306 + 40);
                                              v470.mSampleTime = *(Float64 *)(*(_QWORD *)&v309 + 32);
                                              v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v310;
                                              if (v311)
                                              {
                                                VPTimeFreqConverter::Analyze(v311, v312, (DSPSplitComplex *)&v470);
                                                v309 = *((double *)v3 + 2142);
                                                LODWORD(v310) = *((_DWORD *)v3 + 127);
                                              }
                                              v442 = v284;
                                              v465.mSampleTime = v309;
                                              *(Float64 *)&v466.mNumberBuffers = v309;
                                              v455 = 512;
                                              v313 = *(_OWORD *)&a2->mRateScalar;
                                              *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                              *(_OWORD *)&v470.mRateScalar = v313;
                                              v314 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                              *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                              *(_OWORD *)&v470.mSMPTETime.mHours = v314;
                                              v315 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 405), &v455, &v470, v310, 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                                              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2142), &v470);
                                              v316 = *((_QWORD *)v3 + 2143);
                                              v319 = *(_DWORD *)(v316 + 12);
                                              v317 = v316 + 12;
                                              v318 = v319;
                                              v320 = *(void **)(v317 + 4);
                                              if ((v315
                                                 || AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x15FEu, 0, 0, *(void **)(v317 + 4), (UInt32 *)v317))&& v318 >= 4)
                                              {
                                                memset_pattern16(v320, &unk_1B6627B80, v318 & 0xFFFFFFFC);
                                              }
                                              v321 = (_DWORD *)(v446 + 408);
                                              v281 = AudioUnitGetParameter(*((AudioUnit *)v3 + 405), 0, 0, 0, (AudioUnitParameterValue *)(v446 + 408));
                                              if ((_DWORD)v281)
                                                *v321 = 0;
                                              LOBYTE(v284) = v442;
                                              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                                v281 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2143), &v470);
                                              v297 = *((_QWORD *)v3 + 582);
                                            }
                                          }
                                        }
                                        if ((v297 & 0x40000000000) == 0
                                          || (*((_QWORD *)v3 + 584) & 0x40000000000) == 0
                                          || !*((_QWORD *)v3 + 389))
                                        {
LABEL_682:
                                          if ((v297 & 0x800000000000) != 0
                                            && (*((_BYTE *)v3 + 4677) & 0x80) != 0
                                            && *((_QWORD *)v3 + 394))
                                          {
                                            LODWORD(v461) = 0;
                                            AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x25u, 0, 0, (AudioUnitParameterValue *)&v461);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 2u, *(AudioUnitParameterValue *)&v461, 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 3u, *(AudioUnitParameterValue *)&v461, 0);
                                            v343 = memcpy(*(void **)(*((_QWORD *)v3 + 2187) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), *(unsigned int *)(*((_QWORD *)v3 + 428) + 12));
                                            MEMORY[0x1E0C80A78](v343);
                                            v432 = 0;
                                            *((_OWORD *)&v433 - 3) = 0u;
                                            *((_OWORD *)&v433 - 2) = 0u;
                                            *((_OWORD *)&v433 - 5) = 0u;
                                            *((_OWORD *)&v433 - 4) = 0u;
                                            *((_DWORD *)&v433 - 20) = 4;
                                            *(_OWORD *)(&v433 - 9) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                            *(_OWORD *)(&v433 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
                                            *(_OWORD *)(&v433 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 506) + 8);
                                            *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 505) + 8);
                                            *(double *)&v345 = MEMORY[0x1E0C80A78](v344);
                                            v432 = 0;
                                            *((_OWORD *)&v433 - 3) = v345;
                                            *((_OWORD *)&v433 - 2) = v345;
                                            *((_OWORD *)&v433 - 5) = v345;
                                            *((_OWORD *)&v433 - 4) = v345;
                                            *((_DWORD *)&v433 - 20) = 4;
                                            *(_OWORD *)(&v433 - 9) = *(_OWORD *)(*((_QWORD *)v3 + 2183) + 8);
                                            *(_OWORD *)(&v433 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 2185) + 8);
                                            *(_OWORD *)(&v433 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 2186) + 8);
                                            *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2184) + 8);
                                            *(_QWORD *)&v465.mSampleTime = &v433 - 10;
                                            v465.mHostTime = (UInt64)(&v433 - 10);
                                            *(_QWORD *)&v466.mNumberBuffers = &v433 - 10;
                                            *(_QWORD *)&v466.mBuffers[0].mNumberChannels = &v433 - 10;
                                            v346 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v470.mRateScalar = v346;
                                            v347 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v470.mSMPTETime.mHours = v347;
                                            v455 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 394), &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x84u, *((unsigned int *)v3 + 127), (const AudioBufferList *)(&v433 - 10), &v470);
                                            v297 = *((_QWORD *)v3 + 582);
                                          }
                                          if ((v297 & 0x2000000000000) != 0)
                                          {
                                            v348 = *((_QWORD *)v3 + 584);
                                            if ((v348 & 0x2000000000000) != 0)
                                            {
                                              v349 = *((_QWORD *)v3 + 396);
                                              if (v349)
                                              {
                                                if ((v297 & v348 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
                                                {
                                                  MEMORY[0x1E0C80A78](v349);
                                                  v432 = 0;
                                                  *((_OWORD *)&v433 - 3) = 0u;
                                                  *((_OWORD *)&v433 - 2) = 0u;
                                                  *((_DWORD *)&v433 - 12) = 2;
                                                  *(_OWORD *)(&v433 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                                  *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
                                                  *(_QWORD *)&v465.mSampleTime = &v433 - 6;
                                                  *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 431);
                                                  v350 = *(_OWORD *)&a2->mRateScalar;
                                                  *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                  *(_OWORD *)&v470.mRateScalar = v350;
                                                  v351 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                  *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                  *(_OWORD *)&v470.mSMPTETime.mHours = v351;
                                                  v455 = 512;
                                                  AudioUnitProcessMultiple(v352, &v455, &v470, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                                                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 431), &v470);
                                                  v297 = *((_QWORD *)v3 + 582);
                                                }
                                              }
                                            }
                                          }
                                          LODWORD(v461) = 0;
                                          LODWORD(v459) = 0;
                                          v353 = 0.0;
                                          if ((v297 & 0x200000) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0)
                                          {
                                            v367 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 368);
                                            v354 = 0.0;
                                            if (v367)
                                            {
                                              AudioUnitGetParameter(v367, 0x43u, 0, 0, (AudioUnitParameterValue *)&v461);
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x47u, 0, 0, (AudioUnitParameterValue *)&v459);
                                              v354 = *(float *)&v461;
                                              v353 = *(float *)&v459;
                                              v297 = *((_QWORD *)v3 + 582);
                                            }
                                          }
                                          else
                                          {
                                            v354 = 0.0;
                                          }
                                          v355 = v353 != 0.0 && v354 != 0.0;
                                          if ((v297 & 0x80000000000) == 0
                                            || (v356 = *((_QWORD *)v3 + 584), (v356 & 0x80000000000) == 0)
                                            || (v357 = *((_QWORD *)v3 + 390)) == 0
                                            || (v297 & v356 & 0x800000000000) == 0
                                            || !*((_QWORD *)v3 + 394))
                                          {
LABEL_721:
                                            if ((v297 & 0x100000000000) == 0)
                                              goto LABEL_736;
                                            v368 = *((_QWORD *)v3 + 584);
                                            if ((v368 & 0x100000000000) == 0)
                                              goto LABEL_736;
                                            v369 = *((_QWORD *)v3 + 391);
                                            if (!v369 || (v297 & v368 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
                                              goto LABEL_736;
                                            MEMORY[0x1E0C80A78](v369);
                                            *(&v433 - 4) = 0;
                                            *(&v433 - 3) = 0;
                                            *((_DWORD *)&v433 - 8) = 1;
                                            MEMORY[0x1E0C80A78](v370);
                                            *(&v433 - 3) = 0;
                                            v432 = 0;
                                            *(&v433 - 4) = 0;
                                            *((_DWORD *)&v433 - 8) = v371;
                                            *(_OWORD *)(v372 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
                                            *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 504) + 40);
                                            AudioUnitSetParameter(v373, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
                                            *(_QWORD *)&v465.mSampleTime = &v433 - 4;
                                            v465.mHostTime = (UInt64)(&v433 - 4);
                                            v374 = *((_QWORD *)v3 + 501);
                                            v465.mRateScalar = *((Float64 *)v3 + 511);
                                            v465.mWordClockTime = v374;
                                            *(_QWORD *)&v465.mSMPTETime.mSubframes = v443;
                                            *(_QWORD *)&v465.mSMPTETime.mType = 0;
                                            *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 431);
                                            *(_QWORD *)&v466.mBuffers[0].mNumberChannels = 0;
                                            v466.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 2179);
                                            v375 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v470.mRateScalar = v375;
                                            v376 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v470.mSMPTETime.mHours = v376;
                                            v455 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 3u, (AudioBufferList **)&v466);
                                            v377 = *((unsigned int *)v3 + 127);
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                            {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x26u, v377, *((const AudioBufferList **)v3 + 431), &v470);
                                              v377 = *((unsigned int *)v3 + 127);
                                              v378 = (const AudioBufferList *)*((_QWORD *)v3 + 2179);
                                              if (*((_BYTE *)v3 + 15897))
                                                goto LABEL_732;
                                            }
                                            else
                                            {
                                              v378 = (const AudioBufferList *)*((_QWORD *)v3 + 2179);
                                            }
                                            if (!*((_BYTE *)v3 + 15898))
                                            {
LABEL_733:
                                              if (*(float *)&inInputBufferLists != 0.0)
                                                vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, *(const float **)(*((_QWORD *)v3 + 2179) + 16), 1, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
                                              v297 = *((_QWORD *)v3 + 582);
LABEL_736:
                                              if ((v297 & 0x40000000000) != 0
                                                && (*((_BYTE *)v3 + 4677) & 4) != 0
                                                && *((_QWORD *)v3 + 389))
                                              {
                                                if (!(_DWORD)v445)
                                                {
LABEL_759:
                                                  if ((*((_BYTE *)v3 + 4677) & 4) != 0)
                                                  {
                                                    v383 = *((_QWORD *)v3 + 389) != 0;
LABEL_762:
                                                    if (!v383 && !v280)
                                                    {
                                                      LODWORD(v470.mSampleTime) = 1065353216;
                                                      v384 = *((_DWORD *)v3 + 127);
                                                      vDSP_vfill((const float *)&v470, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, v384);
                                                      memcpy(*(void **)(*((_QWORD *)v3 + 429) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * v384);
                                                    }
                                                    goto LABEL_778;
                                                  }
LABEL_760:
                                                  v383 = 0;
                                                  goto LABEL_762;
                                                }
                                              }
                                              else
                                              {
                                                if ((v297 & 0x80000000000) == 0 || (*((_BYTE *)v3 + 4677) & 8) == 0)
                                                  goto LABEL_758;
                                                v379 = (char)v445;
                                                if (!*((_QWORD *)v3 + 390))
                                                  v379 = 0;
                                                if ((v379 & 1) == 0)
                                                {
LABEL_758:
                                                  if ((v297 & 0x40000000000) == 0)
                                                    goto LABEL_760;
                                                  goto LABEL_759;
                                                }
                                              }
                                              v380 = *(float **)(*((_QWORD *)v3 + 501) + 16);
                                              vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, v380, 1, v380, 1, *((unsigned int *)v3 + 127));
                                              v381 = *((_QWORD *)v3 + 582);
                                              if ((v381 & 0x200000000000000) != 0
                                                && (*((_BYTE *)v3 + 4679) & 2) != 0
                                                && *((_QWORD *)v3 + 404))
                                              {
                                                vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 502) + 16), 1, v380, 1, v380, 1, *((unsigned int *)v3 + 127));
                                                v381 = *((_QWORD *)v3 + 582);
                                              }
                                              if ((v381 & 0x400000000000000) != 0
                                                && (*((_BYTE *)v3 + 4679) & 4) != 0
                                                && *((_QWORD *)v3 + 405))
                                              {
                                                vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 2143) + 16), 1, v380, 1, v380, 1, *((unsigned int *)v3 + 127));
                                                v381 = *((_QWORD *)v3 + 582);
                                              }
                                              if ((v381 & 0x800) != 0
                                                && (*((_BYTE *)v3 + 4673) & 8) != 0
                                                && *((_QWORD *)v3 + 358))
                                              {
                                                v382 = 17384;
                                              }
                                              else if ((v381 & 0x400000000000) != 0
                                                     && (*((_BYTE *)v3 + 4677) & 0x40) != 0
                                                     && *((_QWORD *)v3 + 393))
                                              {
                                                v382 = 17360;
                                              }
                                              else
                                              {
                                                if ((v381 & 0x800000000000) == 0
                                                  || (*((_BYTE *)v3 + 4677) & 0x80) == 0
                                                  || (!*((_QWORD *)v3 + 394) ? (v385 = 1) : (v385 = v355),
                                                      (v385 & 1) != 0))
                                                {
                                                  v386 = (char *)v3 + 3424;
LABEL_777:
                                                  v387 = *(const float **)(*(_QWORD *)v386 + 16);
                                                  v388 = *(float **)(*((_QWORD *)v3 + 429) + 16);
                                                  vDSP_vmul(v387, 1, v380, 1, v388, 1, *((unsigned int *)v3 + 127));
                                                  vDSP_vmul(&v387[*((unsigned int *)v3 + 127) + 1], 1, v380 + 1, 1, &v388[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                                                  v387[*((unsigned int *)v3 + 127)] = v387[*((unsigned int *)v3 + 127)]
                                                                                    * v380[*((_DWORD *)v3 + 127) - 1];
LABEL_778:
                                                  if (((v284 & 1) != 0
                                                     || (*((_BYTE *)v3 + 4661) & 4) != 0
                                                     && (*((_BYTE *)v3 + 4677) & 4) != 0
                                                     && *((_QWORD *)v3 + 389))
                                                    && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
                                                  {
                                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), a2);
                                                  }
                                                  if ((*((_BYTE *)v3 + 4663) & 0x10) != 0
                                                    && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
                                                  {
                                                    v389 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
                                                    if (v389)
                                                    {
                                                      AudioUnitSetParameter(v389, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3117), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1046), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1050), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 3u, 0, 0, v456, 0);
                                                      LODWORD(v457) = 0;
                                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0x1Cu, 0, 0, (AudioUnitParameterValue *)&v457);
                                                      if (*(float *)&v457 == 1.0)
                                                      {
                                                        LODWORD(v470.mSampleTime) = -1082130432;
                                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v470);
                                                        v390 = *(float *)&v470.mSampleTime != 2.0
                                                            || *(float *)&v470.mSampleTime == 1.0;
                                                        v391 = 168;
                                                        if (!v390)
                                                          v391 = 176;
                                                        v392 = (char *)v3 + v391;
                                                        v393 = (OpaqueAudioComponentInstance *)*((_QWORD *)v392 + 347);
                                                        if (v393)
                                                        {
                                                          v394 = (AudioUnit *)(v392 + 2776);
                                                          LODWORD(v465.mSampleTime) = 0;
                                                          if (!AudioUnitGetPropertyInfo(v393, 0xED8u, 0, 0, (UInt32 *)&v465, 0))
                                                          {
                                                            v395 = (void *)*((_QWORD *)v3 + 2180);
                                                            if (*((_QWORD *)v3 + 2181) - (_QWORD)v395 >= (unint64_t)LODWORD(v465.mSampleTime))
                                                              AudioUnitGetProperty(*v394, 0xED8u, 0, 0, v395, (UInt32 *)&v465);
                                                          }
                                                          v466.mNumberBuffers = 0;
                                                          AudioUnitGetParameter(*v394, 1u, 0, 0, (AudioUnitParameterValue *)&v466.mNumberBuffers);
                                                          AudioUnitSetProperty(*((AudioUnit *)v3 + 407), 0x846u, 0, 0, *((const void **)v3 + 2180), vcvts_n_u32_f32(*(float *)&v466.mNumberBuffers, 2uLL));
                                                        }
                                                      }
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                                                      v396 = *((_QWORD *)v3 + 510);
                                                      v465.mSampleTime = *((Float64 *)v3 + 418);
                                                      v465.mHostTime = v396;
                                                      v397 = *((_QWORD *)v3 + 509);
                                                      v465.mRateScalar = *((Float64 *)v3 + 429);
                                                      v465.mWordClockTime = v397;
                                                      *(_QWORD *)&v465.mSMPTETime.mSubframes = *((_QWORD *)v3 + 499);
                                                      *(_QWORD *)&v465.mSMPTETime.mType = *((_QWORD *)v3 + 501);
                                                      *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 136);
                                                      v455 = 512;
                                                      v398 = *(_OWORD *)&a2->mRateScalar;
                                                      *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                      *(_OWORD *)&v470.mRateScalar = v398;
                                                      v399 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                      *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                      *(_OWORD *)&v470.mSMPTETime.mHours = v399;
                                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 1u, (AudioBufferList **)&v466);
                                                      v447 = 0.0;
                                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 1u, 0, 0, &v447);
                                                      *((AudioUnitParameterValue *)v3 + 3118) = v447;
                                                      if ((*((_BYTE *)v3 + 4664) & 2) != 0
                                                        && (*((_BYTE *)v3 + 4680) & 2) != 0
                                                        && *((_QWORD *)v3 + 412))
                                                      {
                                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 2u, 0, 0, &v456);
                                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v456, 0);
                                                      }
                                                    }
                                                  }
                                                  goto LABEL_803;
                                                }
                                                v382 = 17496;
                                              }
                                              v386 = (char *)v3 + v382;
                                              goto LABEL_777;
                                            }
LABEL_732:
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x51u, v377, v378, &v470);
                                            goto LABEL_733;
                                          }
                                          MEMORY[0x1E0C80A78](v357);
                                          *(&v433 - 4) = 0;
                                          *(&v433 - 3) = 0;
                                          *((_DWORD *)&v433 - 8) = 1;
                                          MEMORY[0x1E0C80A78](v358);
                                          *(&v433 - 3) = 0;
                                          v432 = 0;
                                          *(&v433 - 4) = 0;
                                          *((_DWORD *)&v433 - 8) = v359;
                                          *(_OWORD *)(v360 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                          *(_OWORD *)(&v433 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 431) + 8);
                                          AudioUnitSetParameter(v361, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
                                          *(_QWORD *)&v465.mSampleTime = &v433 - 4;
                                          v465.mHostTime = (UInt64)(&v433 - 4);
                                          v362 = *((_QWORD *)v3 + 501);
                                          *(_QWORD *)&v465.mRateScalar = &v433 - 4;
                                          v465.mWordClockTime = v362;
                                          *(_QWORD *)&v465.mSMPTETime.mSubframes = v443;
                                          *(_QWORD *)&v465.mSMPTETime.mType = 0;
                                          *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 431);
                                          *(_QWORD *)&v466.mBuffers[0].mNumberChannels = 0;
                                          v466.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 500);
                                          v363 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&v470.mRateScalar = v363;
                                          v364 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&v470.mSMPTETime.mHours = v364;
                                          v455 = 512;
                                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 3u, (AudioBufferList **)&v466);
                                          v365 = *((unsigned int *)v3 + 127);
                                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                          {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v365, *((const AudioBufferList **)v3 + 431), &v470);
                                            v365 = *((unsigned int *)v3 + 127);
                                            v366 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                                            if (*((_BYTE *)v3 + 15897))
                                              goto LABEL_717;
                                          }
                                          else
                                          {
                                            v366 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                                          }
                                          if (!*((_BYTE *)v3 + 15898))
                                          {
LABEL_718:
                                            if (v355)
                                              vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, *(const float **)(*((_QWORD *)v3 + 500) + 16), 1, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
                                            v297 = *((_QWORD *)v3 + 582);
                                            goto LABEL_721;
                                          }
LABEL_717:
                                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v365, v366, &v470);
                                          goto LABEL_718;
                                        }
                                        MEMORY[0x1E0C80A78](v281);
                                        *(&v433 - 4) = 0;
                                        *(&v433 - 3) = 0;
                                        *((_DWORD *)&v433 - 8) = 1;
                                        MEMORY[0x1E0C80A78](v322);
                                        *(&v433 - 4) = 0;
                                        *(&v433 - 3) = 0;
                                        v432 = 0;
                                        *((_DWORD *)&v433 - 8) = v325;
                                        if ((v323 & v324 & 0x400000000000) != 0)
                                        {
                                          v326 = &v433 - 3;
                                          v327 = &v433 - 3;
                                          if (*((_QWORD *)v3 + 393))
                                          {
                                            v328 = *((_QWORD *)v3 + 2170);
                                            *(_OWORD *)v326 = *(_OWORD *)(v328 + 8);
                                            v329 = (_OWORD *)(v328 + 40);
LABEL_650:
                                            *(_OWORD *)v327 = *v329;
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
                                            *(_QWORD *)&v465.mSampleTime = &v433 - 4;
                                            v465.mHostTime = (UInt64)(&v433 - 4);
                                            v330 = *((_QWORD *)v3 + 501);
                                            v465.mRateScalar = *((Float64 *)v3 + 511);
                                            v465.mWordClockTime = v330;
                                            *(_QWORD *)&v465.mSMPTETime.mSubframes = v443;
                                            *(_QWORD *)&v465.mSMPTETime.mType = 0;
                                            v331 = *((_QWORD *)v3 + 582);
                                            if ((v331 & 0x800000000000) != 0
                                              && (*((_BYTE *)v3 + 4677) & 0x80) != 0
                                              && *((_QWORD *)v3 + 394))
                                            {
                                              *(_QWORD *)&v465.mSMPTETime.mType = *((_QWORD *)v3 + 507);
                                            }
                                            if ((v445 & 1) == 0)
                                              v465.mWordClockTime = 0;
                                            v332 = *((_QWORD *)v3 + 509);
                                            *(_QWORD *)&v466.mNumberBuffers = 0;
                                            *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v332;
                                            v466.mBuffers[0].mData = 0;
                                            if ((v331 & 0x2000000) != 0
                                              && (v333 = *((_QWORD *)v3 + 584), (v333 & 0x2000000) != 0)
                                              && (v334 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 372)) != 0
                                              && (v331 & v333 & 0x200000) != 0
                                              && *((_QWORD *)v3 + 368))
                                            {
                                              LODWORD(v470.mSampleTime) = 0;
                                              *(_QWORD *)&v465.mSMPTETime.mType = *((_QWORD *)v3 + 507);
                                              AudioUnitGetParameter(v334, 0x2Du, 0, 0, (AudioUnitParameterValue *)&v470);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x2Du, 0, 0, (AudioUnitParameterValue *)&v470);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x29u, 0, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                            }
                                            else if ((v331 & 0x800000) != 0
                                                   && (*((_BYTE *)v3 + 4674) & 0x80) != 0
                                                   && *((_QWORD *)v3 + 370)
                                                   && v449 == 1.0)
                                            {
                                              *(_QWORD *)&v465.mSMPTETime.mType = *((_QWORD *)v3 + 2131);
                                            }
                                            v335 = (int)v445;
                                            v336 = 4008;
                                            if ((_DWORD)v445)
                                              v336 = 3992;
                                            v337 = *(void **)((char *)v3 + v336);
                                            if ((_DWORD)v445)
                                              v338 = 3448;
                                            else
                                              v338 = 3432;
                                            *(_QWORD *)&v466.mNumberBuffers = *(_QWORD *)((char *)v3 + v338);
                                            v466.mBuffers[0].mData = v337;
                                            v339 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v470.mRateScalar = v339;
                                            v340 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v470.mSMPTETime.mHours = v340;
                                            v455 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 389), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 3u, (AudioBufferList **)&v466);
                                            if ((v291 | v335 ^ 1) == 1)
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x20u, 0, 0, &v456);
                                            v341 = *((unsigned int *)v3 + 127);
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                            {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v341, *(const AudioBufferList **)((char *)v3 + v338), &v470);
                                              v341 = *((unsigned int *)v3 + 127);
                                              v342 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                                              if (*((_BYTE *)v3 + 15897))
                                                goto LABEL_680;
                                            }
                                            else
                                            {
                                              v342 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                                            }
                                            if (!*((_BYTE *)v3 + 15898))
                                            {
LABEL_681:
                                              v297 = *((_QWORD *)v3 + 582);
                                              goto LABEL_682;
                                            }
LABEL_680:
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v341, v342, &v470);
                                            goto LABEL_681;
                                          }
                                        }
                                        else
                                        {
                                          v326 = &v433 - 3;
                                          v327 = &v433 - 3;
                                        }
                                        *(_OWORD *)v326 = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                                        v329 = (_OWORD *)(*((_QWORD *)v3 + 432) + 8);
                                        goto LABEL_650;
                                      }
                                      v289 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                                      v290 = 9;
                                    }
                                    AudioUnitGetParameter(v289, v290, 0, 0, (AudioUnitParameterValue *)&v463);
                                    v281 = AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v463, 0);
                                    goto LABEL_603;
                                  }
LABEL_586:
                                  v284 = 0;
                                  goto LABEL_587;
                                }
                                LODWORD(v469.realp) = 1092616192;
                                if ((v238 & v239 & 0x80000000000000) != 0)
                                {
                                  v237 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                                  if (v237)
                                  {
                                    v237 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v237, 9u, 0, 0, (AudioUnitParameterValue *)&v469);
                                    v238 = *((_QWORD *)v3 + 582);
                                  }
                                }
                                if ((v238 & 0x80000000) != 0
                                  && (*((_BYTE *)v3 + 4675) & 0x80) != 0
                                  && *((_QWORD *)v3 + 378))
                                {
                                  LODWORD(v470.mSampleTime) = 0;
                                  LODWORD(v465.mSampleTime) = 0;
                                  v466.mNumberBuffers = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x18u, 0, 0, (AudioUnitParameterValue *)&v470);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x19u, 0, 0, (AudioUnitParameterValue *)&v465);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 5u, 0, 0, (AudioUnitParameterValue *)&v466.mNumberBuffers);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 3u, 0, 0, *(AudioUnitParameterValue *)&v470.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 4u, 0, 0, *(AudioUnitParameterValue *)&v465.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 5u, 0, 0, *(AudioUnitParameterValue *)&v466.mNumberBuffers, 0);
                                  v237 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 6u, 0, 0, *(AudioUnitParameterValue *)&v469.realp, 0);
                                }
                                MEMORY[0x1E0C80A78](v237);
                                v432 = 0;
                                *((_OWORD *)&v433 - 3) = 0u;
                                *((_OWORD *)&v433 - 2) = 0u;
                                *((_DWORD *)&v433 - 12) = 2;
                                v240 = *((_QWORD *)v3 + 428);
                                *(&v433 - 4) = *(_QWORD *)(v240 + 16);
                                *(&v433 - 5) = *(_QWORD *)(v240 + 8);
                                v241 = *((_QWORD *)v3 + 431);
                                v432 = *(_QWORD *)(v241 + 16);
                                *(&v433 - 3) = *(_QWORD *)(v241 + 8);
                                *(double *)&v243 = MEMORY[0x1E0C80A78](v242);
                                *((_OWORD *)&v433 - 3) = v243;
                                *((_OWORD *)&v433 - 2) = v243;
                                *((_DWORD *)&v433 - 12) = v244;
                                MEMORY[0x1E0C80A78](v245);
                                *(&v433 - 3) = 0;
                                v432 = 0;
                                *(&v433 - 4) = 0;
                                *((_DWORD *)&v433 - 8) = 1;
                                v246 = *((_QWORD *)v3 + 432);
                                *(_QWORD *)(v247 - 32) = *(_QWORD *)(v246 + 16);
                                *(_QWORD *)(v247 - 40) = *(_QWORD *)(v246 + 8);
                                v248 = *((_QWORD *)v3 + 504);
                                *(_QWORD *)(v247 - 16) = *(_QWORD *)(v248 + 32);
                                *(_QWORD *)(v247 - 24) = *(_QWORD *)(v248 + 24);
                                v432 = *(_QWORD *)(v246 + 16);
                                *(&v433 - 3) = *(_QWORD *)(v246 + 8);
                                v465.mSampleTime = v249;
                                v465.mHostTime = v250;
                                *(Float64 *)&v466.mNumberBuffers = v249;
                                *(_QWORD *)&v466.mBuffers[0].mNumberChannels = &v433 - 4;
                                v251 = *(_OWORD *)&a2->mRateScalar;
                                *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                *(_OWORD *)&v470.mRateScalar = v251;
                                v252 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                *(_OWORD *)&v470.mSMPTETime.mHours = v252;
                                v455 = 512;
                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 392), &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                                v253 = *((unsigned int *)v3 + 127);
                                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                {
                                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v253, *((const AudioBufferList **)v3 + 428), &v470);
                                  v253 = *((unsigned int *)v3 + 127);
                                  v254 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                                  if (*((_BYTE *)v3 + 15897))
                                    goto LABEL_540;
                                }
                                else
                                {
                                  v254 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                                }
                                if (!*((_BYTE *)v3 + 15898))
                                {
LABEL_541:
                                  v238 = *((_QWORD *)v3 + 582);
                                  goto LABEL_542;
                                }
LABEL_540:
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v253, v254, &v470);
                                goto LABEL_541;
                              }
                              v443 = (AudioBufferList *)v200;
                              v439 = v168;
                              v440 = v167;
                              v441 = v164;
                              v442 = v165;
                              v216 = 0;
                              v217 = (float *)*((_QWORD *)v3 + 523);
                              v435 = (AudioUnitParameterValue *)((char *)v3 + 4184);
                              v469.realp = v217;
                              LODWORD(v469.imagp) = *((_DWORD *)v3 + 1049);
                              v436 = (AudioUnitParameterValue *)((char *)v3 + 4200);
                              v463 = (const AudioBufferList *)*((_QWORD *)v3 + 525);
                              v464 = *((_DWORD *)v3 + 1053);
                              v437 = (AudioUnitParameterValue *)((char *)v3 + 4216);
                              v461 = *((_QWORD *)v3 + 527);
                              v462 = *((_DWORD *)v3 + 1057);
                              v438 = (AudioUnitParameterValue *)((char *)v3 + 4232);
                              v459 = *((_QWORD *)v3 + 529);
                              v460 = *((_DWORD *)v3 + 1061);
                              v434 = (AudioUnitParameterValue *)((char *)v3 + 4248);
                              v457 = *((_QWORD *)v3 + 531);
                              v458 = *((_DWORD *)v3 + 1065);
                              do
                              {
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, v216, *((AudioUnitParameterValue *)&v469.realp + v216), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, v216, *((AudioUnitParameterValue *)&v463 + v216), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, v216, *((AudioUnitParameterValue *)&v461 + v216), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, v216, *((AudioUnitParameterValue *)&v459 + v216), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, v216, *((AudioUnitParameterValue *)&v457 + v216), 0);
                                ++v216;
                              }
                              while (v216 != 3);
                              *(_QWORD *)&v466.mNumberBuffers = 1;
                              *(_QWORD *)&v466.mBuffers[0].mNumberChannels = 0;
                              v466.mBuffers[0].mData = 0;
                              v466.mBuffers[0] = *(AudioBuffer *)(*((_QWORD *)v3 + 504) + 8);
                              inInputBufferLists = v443;
                              v472 = v445;
                              v465.mSampleTime = *((Float64 *)v3 + 428);
                              v465.mHostTime = (UInt64)&v466;
                              v465.mRateScalar = 0.0;
                              v465.mWordClockTime = 0;
                              v455 = 512;
                              v218 = *(_OWORD *)&a2->mRateScalar;
                              *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                              *(_OWORD *)&v470.mRateScalar = v218;
                              v219 = *(_OWORD *)&a2->mSMPTETime.mHours;
                              *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                              *(_OWORD *)&v470.mSMPTETime.mHours = v219;
                              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 383), &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 4u, (AudioBufferList **)&v465);
                              v447 = 0.0;
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0xAu, 0, 0, &v447);
                              v220 = *((unsigned int *)v3 + 127);
                              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                              {
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v220, *((const AudioBufferList **)v3 + 428), &v470);
                                v220 = *((unsigned int *)v3 + 127);
                                v164 = v441;
                                v165 = v442;
                                v168 = v439;
                                v167 = v440;
                                v221 = v434;
                                if (*((_BYTE *)v3 + 15897))
                                  goto LABEL_497;
                              }
                              else
                              {
                                v164 = v441;
                                v165 = v442;
                                v168 = v439;
                                v167 = v440;
                                v221 = v434;
                              }
                              if (!*((_BYTE *)v3 + 15898))
                              {
LABEL_498:
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, 0, v435);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, 0, v436);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, 0, v437);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, 0, v438);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, 0, v221);
                                goto LABEL_499;
                              }
LABEL_497:
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v220, &v466, &v470);
                              goto LABEL_498;
                            }
                            v443 = (AudioBufferList *)v200;
                            v439 = v168;
                            v440 = v167;
                            v441 = v164;
                            v442 = v165;
                            v212 = 0;
                            inInputBufferLists = (AudioBufferList *)*((_QWORD *)v3 + 523);
                            LODWORD(v472) = *((_DWORD *)v3 + 1049);
                            v469.realp = (float *)*((_QWORD *)v3 + 525);
                            LODWORD(v469.imagp) = *((_DWORD *)v3 + 1053);
                            v463 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
                            v464 = *((_DWORD *)v3 + 1057);
                            v461 = *((_QWORD *)v3 + 529);
                            v462 = *((_DWORD *)v3 + 1061);
                            v459 = *((_QWORD *)v3 + 531);
                            v460 = *((_DWORD *)v3 + 1065);
                            do
                            {
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x12u, 4u, v212, *((AudioUnitParameterValue *)&inInputBufferLists + v212), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x13u, 4u, v212, *((AudioUnitParameterValue *)&v469.realp + v212), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x14u, 4u, v212, *((AudioUnitParameterValue *)&v463 + v212), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x15u, 4u, v212, *((AudioUnitParameterValue *)&v461 + v212), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x16u, 4u, v212, *((AudioUnitParameterValue *)&v459 + v212), 0);
                              ++v212;
                            }
                            while (v212 != 3);
                            v200 = v443;
                            *(_QWORD *)&v465.mSampleTime = v443;
                            v465.mHostTime = (UInt64)v445;
                            *(_QWORD *)&v466.mNumberBuffers = v443;
                            *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v445;
                            v455 = 512;
                            v213 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&v470.mRateScalar = v213;
                            v214 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&v470.mSMPTETime.mHours = v214;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                            v215 = *((unsigned int *)v3 + 127);
                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                            {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v215, v200, &v470);
                              v215 = *((unsigned int *)v3 + 127);
                              v164 = v441;
                              v165 = v442;
                              v168 = v439;
                              v167 = v440;
                              if (*((_BYTE *)v3 + 15897))
                                goto LABEL_484;
                            }
                            else
                            {
                              v164 = v441;
                              v165 = v442;
                              v168 = v439;
                              v167 = v440;
                            }
                            if (!*((_BYTE *)v3 + 15898))
                            {
LABEL_485:
                              v205 = *((_QWORD *)v3 + 582);
                              goto LABEL_486;
                            }
LABEL_484:
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v215, v445, &v470);
                            goto LABEL_485;
                          }
                          v443 = (AudioBufferList *)(&v433 - 8);
                          v439 = v168;
                          v440 = v167;
                          v441 = v164;
                          v442 = v165;
                          v208 = 0;
                          inInputBufferLists = (AudioBufferList *)*((_QWORD *)v3 + 523);
                          LODWORD(v472) = *((_DWORD *)v3 + 1049);
                          v469.realp = (float *)*((_QWORD *)v3 + 525);
                          LODWORD(v469.imagp) = *((_DWORD *)v3 + 1053);
                          v463 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
                          v464 = *((_DWORD *)v3 + 1057);
                          v461 = *((_QWORD *)v3 + 529);
                          v462 = *((_DWORD *)v3 + 1061);
                          v459 = *((_QWORD *)v3 + 531);
                          v460 = *((_DWORD *)v3 + 1065);
                          do
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 9u, 4u, v208, *((AudioUnitParameterValue *)&inInputBufferLists + v208), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 4u, v208, *((AudioUnitParameterValue *)&v469.realp + v208), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xBu, 4u, v208, *((AudioUnitParameterValue *)&v463 + v208), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xCu, 4u, v208, *((AudioUnitParameterValue *)&v461 + v208), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xDu, 4u, v208, *((AudioUnitParameterValue *)&v459 + v208), 0);
                            ++v208;
                          }
                          while (v208 != 3);
                          v200 = v443;
                          *(_QWORD *)&v465.mSampleTime = v443;
                          v465.mHostTime = (UInt64)v445;
                          *(_QWORD *)&v466.mNumberBuffers = v443;
                          *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v445;
                          v455 = 512;
                          v209 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v470.mRateScalar = v209;
                          v210 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v470.mSMPTETime.mHours = v210;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v455, &v470, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v465, 2u, (AudioBufferList **)&v466);
                          v211 = *((unsigned int *)v3 + 127);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v211, v200, &v470);
                            v211 = *((unsigned int *)v3 + 127);
                            v164 = v441;
                            v165 = v442;
                            v168 = v439;
                            v167 = v440;
                            if (*((_BYTE *)v3 + 15897))
                              goto LABEL_471;
                          }
                          else
                          {
                            v164 = v441;
                            v165 = v442;
                            v168 = v439;
                            v167 = v440;
                          }
                          if (!*((_BYTE *)v3 + 15898))
                          {
LABEL_472:
                            v205 = *((_QWORD *)v3 + 582);
                            goto LABEL_473;
                          }
LABEL_471:
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v211, v445, &v470);
                          goto LABEL_472;
                        }
                        if ((v143 & 0x80000000) == 0 || (*((_BYTE *)v3 + 4675) & 0x80) == 0 || !*((_QWORD *)v3 + 378))
                          goto LABEL_450;
                        memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * *((unsigned int *)v3 + 127));
                        memcpy(*(void **)(*((_QWORD *)v3 + 434) + 32), *(const void **)(*((_QWORD *)v3 + 506) + 16), 8 * *((unsigned int *)v3 + 127));
                        v463 = (const AudioBufferList *)*((_QWORD *)v3 + 434);
                        v188 = (const AudioBufferList *)*((_QWORD *)v3 + 433);
                        inInputBufferLists = (AudioBufferList *)*((_QWORD *)v3 + 429);
                        v472 = v188;
                        v189 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&v470.mRateScalar = v189;
                        v190 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&v470.mSMPTETime.mHours = v190;
                        Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v455, &v470, *((_DWORD *)v3 + 127), 1u, &v463, 2u, &inInputBufferLists);
                        v191 = *((unsigned int *)v3 + 127);
                        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                        {
                          Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v191, inInputBufferLists, &v470);
                          v191 = *((unsigned int *)v3 + 127);
                          v192 = v472;
                          if (*((_BYTE *)v3 + 15897))
                            goto LABEL_435;
                        }
                        else
                        {
                          v192 = v472;
                        }
                        if (!*((_BYTE *)v3 + 15898))
                        {
LABEL_436:
                          if ((*((_BYTE *)v3 + 4660) & 1) == 0
                            || (*((_BYTE *)v3 + 4676) & 1) == 0
                            || !*((_QWORD *)v3 + 379))
                          {
                            goto LABEL_450;
                          }
                          memcpy(*(void **)(*((_QWORD *)v3 + 435) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((_QWORD *)v3 + 430) + 16), *(const void **)(*((_QWORD *)v3 + 431) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          LODWORD(v461) = 1092616192;
                          v193 = *((_QWORD *)v3 + 433);
                          *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 429);
                          *(_QWORD *)&v466.mBuffers[0].mNumberChannels = v193;
                          v194 = (AudioBufferList *)*((_QWORD *)v3 + 506);
                          v466.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 435);
                          v467 = v194;
                          v468 = *((_QWORD *)v3 + 430);
                          v195 = (float *)*((_QWORD *)v3 + 431);
                          v196 = 10.0;
                          v469.realp = (float *)*((_QWORD *)v3 + 428);
                          v469.imagp = v195;
                          if ((*((_BYTE *)v3 + 4662) & 0x80) != 0 && (*((_BYTE *)v3 + 4678) & 0x80) != 0)
                          {
                            v197 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                            if (v197)
                            {
                              AudioUnitGetParameter(v197, 9u, 0, 0, (AudioUnitParameterValue *)&v461);
                              v196 = *(float *)&v461;
                            }
                          }
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0xAu, 0, 0, v196, 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                          v198 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v465.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v465.mRateScalar = v198;
                          v199 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v465.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v465.mSMPTETime.mHours = v199;
                          Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v455, &v465, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v466, 2u, (AudioBufferList **)&v469);
                          v183 = *((unsigned int *)v3 + 127);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v183, (const AudioBufferList *)v469.realp, &v465);
                            v183 = *((unsigned int *)v3 + 127);
                            imagp = v469.imagp;
                            if (*((_BYTE *)v3 + 15897))
                              goto LABEL_449;
                          }
                          else
                          {
                            imagp = v469.imagp;
                          }
                          if (!*((_BYTE *)v3 + 15898))
                            goto LABEL_450;
LABEL_449:
                          v185 = &v465;
                          v186 = (uint64_t)v3;
                          v187 = 27;
                          goto LABEL_422;
                        }
LABEL_435:
                        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v191, v192, &v470);
                        goto LABEL_436;
                      }
                    }
                    else
                    {
                      v171 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
                    }
                    v172 = 2.0;
                    goto LABEL_403;
                  }
                  v155 = *((float *)v3 + 1055);
                  if (v155 == 0.0)
                  {
                    v156 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2097);
                    v157 = *(const float **)(*((_QWORD *)v3 + 424) + 16);
                    v158 = *(_QWORD *)(*((_QWORD *)v3 + 435) + 16) + 4 * *((unsigned int *)v3 + 127);
                    v470.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 435) + 16);
                    v470.mHostTime = v158;
                    if (v156)
                    {
                      VPTimeFreqConverter::Analyze(v156, v157, (DSPSplitComplex *)&v470);
                      v155 = *((float *)v3 + 1055);
                      Parameter = *((_QWORD *)v3 + 390);
                    }
                  }
                  AudioUnitSetParameter((AudioUnit)Parameter, 6u, 0, 0, v155, 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1059), 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1063), 0);
                  memcpy(*(void **)(*((_QWORD *)v3 + 433) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 32), *((unsigned int *)v3 + 1071));
                  v159 = *((_QWORD *)v3 + 433);
                  v465.mSampleTime = *((Float64 *)v3 + 505);
                  v465.mHostTime = v159;
                  v465.mRateScalar = *((Float64 *)v3 + 511);
                  memset(&v465.mWordClockTime, 0, 24);
                  *(_QWORD *)&v466.mNumberBuffers = *((_QWORD *)v3 + 431);
                  *(_QWORD *)&v466.mBuffers[0].mNumberChannels = 0;
                  v466.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 500);
                  v160 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v470.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v470.mRateScalar = v160;
                  v161 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v470.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v470.mSMPTETime.mHours = v161;
                  v455 = 512;
                  Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v455, &v470, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v465, 3u, (AudioBufferList **)&v466);
                  v162 = *((unsigned int *)v3 + 127);
                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  {
                    Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v162, *((const AudioBufferList **)v3 + 431), &v470);
                    v162 = *((unsigned int *)v3 + 127);
                    v163 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                    if (*((_BYTE *)v3 + 15897))
                      goto LABEL_369;
                  }
                  else
                  {
                    v163 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                  }
                  if (!*((_BYTE *)v3 + 15898))
                  {
LABEL_370:
                    v143 = *((_QWORD *)v3 + 582);
                    goto LABEL_371;
                  }
LABEL_369:
                  Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v162, v163, &v470);
                  goto LABEL_370;
                }
LABEL_885:
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            else
            {
              v115 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
            }
            if (!*((_BYTE *)v3 + 15898))
              goto LABEL_264;
            goto LABEL_263;
          }
LABEL_203:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v95, (const AudioBufferList *)v96, &buf);
          v96 = *((_QWORD *)v3 + 2137);
          v95 = *((unsigned int *)v3 + 127);
          goto LABEL_204;
        }
        v88 = *((_QWORD *)v3 + 2098);
        if ((unint64_t)(*((_QWORD *)v3 + 2099) - v88) <= 0x20)
          goto LABEL_885;
        ECApplicator::apply(*(AudioUnitParameterID **)(v88 + 32), &buf, v51, (BOOL *)&v454, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
        v89 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v89, *((const AudioBufferList **)v3 + 136), &buf);
          v89 = *((unsigned int *)v3 + 127);
          v90 = *((_QWORD *)v3 + 422);
          if (*((_BYTE *)v3 + 15897))
            goto LABEL_187;
        }
        else
        {
          v90 = *((_QWORD *)v3 + 422);
        }
        if (!*((_BYTE *)v3 + 15898))
        {
LABEL_188:
          v91 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2130);
          v92 = *(const float **)(v90 + 16);
          v93 = *((_QWORD *)v3 + 507);
          v470.mSampleTime = *(Float64 *)(v93 + 16);
          v470.mHostTime = *(_QWORD *)&v470.mSampleTime + 4 * v89;
          if (v91)
          {
            VPTimeFreqConverter::Analyze(v91, v92, (DSPSplitComplex *)&v470);
            v89 = *((unsigned int *)v3 + 127);
            v93 = *((_QWORD *)v3 + 507);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v89, (const AudioBufferList *)v93, &buf);
          goto LABEL_193;
        }
LABEL_187:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v89, (const AudioBufferList *)v90, &buf);
        v90 = *((_QWORD *)v3 + 422);
        v89 = *((unsigned int *)v3 + 127);
        goto LABEL_188;
      }
      v50 = *((_DWORD *)v3 + 3098);
      if (v49 != 3)
      {
        if (v50 == 2)
        {
          v51 = 0;
          *((_OWORD *)v3 + 1054) = *(_OWORD *)(v48 + 40);
          *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v48 + 56);
          v52 = 1;
          v53 = 3;
          v54 = 2;
LABEL_114:
          v55 = v48 + 8;
          *((_OWORD *)v3 + 1051) = *(_OWORD *)(v55 + 16 * v51);
          *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v55 + 16 * v52);
          goto LABEL_115;
        }
        v50 = *((_DWORD *)v3 + 3098);
        if (v50 <= 0xC && ((0x1028u >> v50) & 1) != 0)
        {
          v51 = 0;
          *((_OWORD *)v3 + 1054) = *(_OWORD *)(v48 + 24);
          *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v48 + 40);
          v52 = 3;
          v53 = 2;
          v54 = 1;
          goto LABEL_114;
        }
      }
      if (v50 == 9)
      {
        v51 = 0;
        *((_OWORD *)v3 + 1054) = *(_OWORD *)(v48 + 56);
        *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v48 + 40);
        v52 = 1;
        v53 = 2;
        v54 = 3;
      }
      else
      {
        v54 = 0;
        v53 = 0;
        v51 = 1;
        v52 = 2;
      }
      goto LABEL_114;
    }
  }
  v12 = 0;
  while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
  {
    if (++v12 == 32)
    {
      v12 = 33;
      break;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)v3 + 135);
  if (v12 >= *v13)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v16 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v8.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 56;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v12;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v19 = (int *)*((_QWORD *)v3 + 1570);
    if (v19 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessUplink_v8.cpp", 56, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
    }
    v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v15 = (const void **)*((_QWORD *)v3 + 135);
  }
  else
  {
    v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v15 = (const void **)&v13[4 * v12];
  }
  memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4662) & 0x20) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0)
    {
      v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
      if (v20)
      {
        v21 = *((_QWORD *)v3 + 499);
        v470.mSampleTime = *((Float64 *)v3 + 136);
        v470.mHostTime = v21;
        v22 = *((_QWORD *)v3 + 501);
        v465.mSampleTime = v470.mSampleTime;
        v465.mHostTime = v22;
        v23 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v23;
        v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v24;
        v466.mNumberBuffers = 512;
        AudioUnitProcessMultiple(v20, &v466.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v470, 2u, (AudioBufferList **)&v465);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v456);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v456, 0);
        }
      }
    }
  }
LABEL_803:
  v466.mNumberBuffers = 0;
  v400 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  v402 = v400;
  if (!*((_BYTE *)v3 + 2080))
  {
    if ((v400 & 1) == 0)
      goto LABEL_824;
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v401);
LABEL_812:
    v404 = *((_QWORD *)v3 + 582);
    if ((v404 & 0x2000000000000000) != 0
      && (*((_BYTE *)v3 + 4679) & 0x20) != 0
      && (v405 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 408)) != 0)
    {
      v406 = 1936748646;
    }
    else
    {
      if ((v404 & 0x1000000000000000) == 0
        || (*((_BYTE *)v3 + 4679) & 0x10) == 0
        || (v405 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407)) == 0)
      {
        *(AudioUnitParameterValue *)&v466.mNumberBuffers = v456;
        goto LABEL_822;
      }
      v406 = 2;
    }
    AudioUnitGetParameter(v405, v406, 0, 0, (AudioUnitParameterValue *)&v466.mNumberBuffers);
    goto LABEL_822;
  }
  if (*((_QWORD *)v3 + 2054))
    v403 = 1;
  else
    v403 = v400;
  if ((v403 & 1) != 0)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v401);
    if ((v402 & 1) != 0)
      goto LABEL_812;
  }
LABEL_822:
  if (*((_BYTE *)v3 + 2080))
  {
    bzero(*(void **)(*((_QWORD *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v466.mNumberBuffers = 0;
    goto LABEL_825;
  }
LABEL_824:
  *((_DWORD *)v3 + 4110) = 0;
LABEL_825:
  if ((*((_BYTE *)v3 + 8833) & 0x80) != 0 && (*((_BYTE *)v3 + 8841) & 0x80) != 0)
  {
    v407 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 452);
    v408 = v407 ? v402 : 0;
    if (v408 == 1)
      AudioUnitSetParameter(v407, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v466.mNumberBuffers, 0);
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  if ((*((_BYTE *)v3 + 4663) & 8) != 0 && (*((_BYTE *)v3 + 4679) & 8) != 0)
  {
    v409 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 406);
    if (v409)
    {
      v470.mSampleTime = *((Float64 *)v3 + 136);
      v465.mSampleTime = v470.mSampleTime;
      LODWORD(inInputBufferLists) = 512;
      v410 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v410;
      v411 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v411;
      AudioUnitProcessMultiple(v409, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v470, 1u, (AudioBufferList **)&v465);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4664) & 0x40) != 0 && (*((_BYTE *)v3 + 4680) & 0x40) != 0)
    {
      v412 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 417);
      if (v412)
      {
        v470.mSampleTime = *((Float64 *)v3 + 136);
        v465.mSampleTime = v470.mSampleTime;
        LODWORD(inInputBufferLists) = 512;
        v413 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v413;
        v414 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v414;
        AudioUnitProcessMultiple(v412, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v470, 1u, (AudioBufferList **)&v465);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if ((*((_QWORD *)v3 + 582) & 0x8000000000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x8000000000000000) != 0)
  {
    v415 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 410);
    if (v415)
    {
      v416 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v416;
      v417 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v417;
      LODWORD(v470.mSampleTime) = 512;
      AudioUnitProcess(v415, (AudioUnitRenderActionFlags *)&v470, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  v418 = *((_QWORD *)v3 + 583);
  if ((v418 & 1) != 0 && (*((_BYTE *)v3 + 4680) & 1) != 0)
  {
    v419 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 411);
    if (v419)
    {
      v420 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v420;
      v421 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v421;
      LODWORD(v470.mSampleTime) = 512;
      AudioUnitProcess(v419, (AudioUnitRenderActionFlags *)&v470, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      v418 = *((_QWORD *)v3 + 583);
    }
  }
  if ((v418 & 2) != 0
    && (*((_BYTE *)v3 + 4680) & 2) != 0
    && (v422 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 412)) != 0)
  {
    v423 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v423;
    v424 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v424;
    LODWORD(v470.mSampleTime) = 512;
    AudioUnitProcess(v422, (AudioUnitRenderActionFlags *)&v470, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0 && *((_QWORD *)v3 + 407))
    {
      LODWORD(v465.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 1u, 0, 0, (AudioUnitParameterValue *)&v465);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v465.mSampleTime, 0);
    }
    LODWORD(v465.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v465);
    mSampleTime_low = LODWORD(v465.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v465.mSampleTime)
    {
      if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
      {
        v426 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
        if (v426)
        {
          AudioUnitSetParameter(v426, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v465.mSampleTime, 0);
          mSampleTime_low = LODWORD(v465.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((_BYTE *)v3 + 4663) & 0x40) != 0 && ((*((_BYTE *)v3 + 4679) & 0x40) != 0 || *((_BYTE *)v3 + 472)))
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1091) / 20.0);
    vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  if ((*((_BYTE *)v3 + 4664) & 8) != 0 && (*((_BYTE *)v3 + 4680) & 8) != 0)
  {
    v427 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 414);
    if (v427)
    {
      v428 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v428;
      v429 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v429;
      LODWORD(v470.mSampleTime) = 512;
      v430 = atomic_load(gWirelessChargingMatIsAttached);
      AudioUnitSetParameter(v427, 5u, 0, 0, (float)(v430 & 1), 0);
      AudioUnitProcess(*((AudioUnit *)v3 + 414), (AudioUnitRenderActionFlags *)&v470, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    }
  }
  return 0;
}

void vp::v10::create(vp::v10 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  vp *default_resource;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _BOOL4 v28;
  vp *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  const char *v37;
  _QWORD *v38;
  unsigned int *v39;
  vp *v40;
  NSObject *v41;
  _BOOL4 v42;
  vp *v43;
  uint64_t v44;
  NSObject *v45;
  int v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  const char *v51;
  _QWORD *v52;
  unsigned int *v53;
  vp *v54;
  NSObject *v55;
  _BOOL4 v56;
  vp *v57;
  uint64_t v58;
  NSObject *v59;
  int v60;
  _BYTE *v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  const char *v65;
  _QWORD *v66;
  unsigned int *v67;
  vp *v68;
  NSObject *v69;
  _BOOL4 v70;
  vp *v71;
  uint64_t v72;
  NSObject *v73;
  int v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _BYTE *v78;
  const char *v79;
  _QWORD *v80;
  unsigned int *v81;
  vp *v82;
  NSObject *v83;
  _BOOL4 v84;
  vp *v85;
  uint64_t v86;
  NSObject *v87;
  int v88;
  _BYTE *v89;
  char *v90;
  char *v91;
  _BYTE *v92;
  const char *v93;
  _QWORD *v94;
  unsigned int *v95;
  vp *v96;
  NSObject *v97;
  _BOOL4 v98;
  vp *v99;
  uint64_t v100;
  NSObject *v101;
  int v102;
  _BYTE *v103;
  char *v104;
  char *v105;
  _BYTE *v106;
  const char *v107;
  _QWORD *v108;
  unsigned int *v109;
  vp *v110;
  NSObject *v111;
  _BOOL4 v112;
  vp *v113;
  uint64_t v114;
  NSObject *v115;
  int v116;
  _BYTE *v117;
  char *v118;
  char *v119;
  _BYTE *v120;
  const char *v121;
  uint64_t v122;
  void *v123;
  id v124;
  unsigned int *v125;
  vp *v126;
  NSObject *v127;
  _BOOL4 v128;
  vp *v129;
  uint64_t v130;
  NSObject *v131;
  int v132;
  _BYTE *v133;
  char *v134;
  char *v135;
  _BYTE *v136;
  const char *v137;
  _QWORD *v138;
  unsigned int *v139;
  vp *v140;
  NSObject *v141;
  _BOOL4 v142;
  vp *v143;
  uint64_t v144;
  NSObject *v145;
  int v146;
  _BYTE *v147;
  char *v148;
  char *v149;
  _BYTE *v150;
  const char *v151;
  _QWORD *v152;
  unsigned int *v153;
  vp *v154;
  NSObject *v155;
  _BOOL4 v156;
  vp *v157;
  uint64_t v158;
  NSObject *v159;
  int v160;
  _BYTE *v161;
  char *v162;
  char *v163;
  _BYTE *v164;
  const char *v165;
  _QWORD *v166;
  unsigned int *v167;
  vp *v168;
  NSObject *v169;
  _BOOL4 v170;
  vp *v171;
  uint64_t v172;
  NSObject *v173;
  int v174;
  _BYTE *v175;
  char *v176;
  char *v177;
  _BYTE *v178;
  const char *v179;
  _QWORD *v180;
  unsigned int *v181;
  vp *v182;
  NSObject *v183;
  _BOOL4 v184;
  vp *v185;
  uint64_t v186;
  NSObject *v187;
  int v188;
  _BYTE *v189;
  char *v190;
  char *v191;
  _BYTE *v192;
  const char *v193;
  _QWORD *v194;
  unsigned int *v195;
  vp *v196;
  NSObject *v197;
  _BOOL4 v198;
  vp *v199;
  uint64_t v200;
  NSObject *v201;
  int v202;
  _BYTE *v203;
  char *v204;
  char *v205;
  _BYTE *v206;
  const char *v207;
  _QWORD *v208;
  unsigned int *v209;
  vp *v210;
  NSObject *v211;
  _BOOL4 v212;
  vp *v213;
  uint64_t v214;
  NSObject *v215;
  int v216;
  _BYTE *v217;
  char *v218;
  char *v219;
  _BYTE *v220;
  const char *v221;
  _QWORD *v222;
  _QWORD *v223;
  CFTypeRef v224;
  unsigned int *v225;
  vp *v226;
  NSObject *v227;
  _BOOL4 v228;
  vp *v229;
  uint64_t v230;
  NSObject *v231;
  int v232;
  _BYTE *v233;
  char *v234;
  char *v235;
  _BYTE *v236;
  const char *v237;
  _QWORD *v238;
  unsigned int *v239;
  vp *v240;
  uint64_t v241;
  NSObject *v242;
  _BOOL4 v243;
  vp *v244;
  uint64_t v245;
  NSObject *v246;
  int v247;
  _BYTE *v248;
  char *v249;
  char *v250;
  _BYTE *v251;
  const char *v252;
  _QWORD *v253;
  unsigned int *v254;
  std::pmr *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  _OWORD v260[2];
  uint64_t v261;
  std::__shared_weak_count *v262;
  CFTypeRef cf;
  _BYTE __p[24];
  char *v265;
  _BYTE *v266;
  _BYTE buf[24];
  uint64_t v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.coreaudio");
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  default_resource = (vp *)std::pmr::get_default_resource((std::pmr *)v5);
  *(_QWORD *)(v5 + 16) = default_resource;
  *(_QWORD *)(v5 + 24) = v5 + 48;
  *(_OWORD *)(v5 + 32) = xmmword_1B6626890;
  vp::get_log(default_resource);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

  if (v8)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, __p);
    v10 = __p[23];
    v11 = *(_QWORD *)&__p[8];
    vp::get_log(log_context_info);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((v10 & 0x80u) == 0)
        v13 = v10;
      else
        v13 = v11;
      v14 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v14 = __p;
      if (v13)
        v15 = " ";
      else
        v15 = "";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v15;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%s%screated", buf, 0x16u);
    }

    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v261 = v5;
  *(_QWORD *)__p = v5;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CFFA0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v262 = v16;
  v18 = *(std::__shared_weak_count **)(v5 + 8);
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    *(_QWORD *)v5 = v5;
    *(_QWORD *)(v5 + 8) = v16;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *(_QWORD *)v5 = v5;
    *(_QWORD *)(v5 + 8) = v16;
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_27:
  v26 = v261;
  vp::get_log((vp *)v18);
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);

  if (v28)
  {
    v29 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v30 = buf[23];
    else
      v30 = *(_QWORD *)&buf[8];
    vp::get_log(v29);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = buf[23];
      v33 = *(_BYTE **)buf;
      v34 = (char *)operator new(0x28uLL);
      v35 = v34;
      v36 = buf;
      if (v32 < 0)
        v36 = v33;
      strcpy(v34, "vp::services::Audio_Data_Analysis");
      v37 = " ";
      if (!v30)
        v37 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v36;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v37;
      *(_WORD *)&__p[22] = 2080;
      v265 = v34;
      _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v35);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v38 = (_QWORD *)operator new();
  *v38 = &off_1E69CFFD8;
  v38[1] = v26;
  v39 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x61646D73u);
  v40 = *(vp **)v39;
  *(_QWORD *)v39 = v38;
  if (v40)
    v40 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v40 + 8))(v40);
  vp::get_log(v40);
  v41 = objc_claimAutoreleasedReturnValue();
  v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);

  if (v42)
  {
    v43 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v44 = buf[23];
    else
      v44 = *(_QWORD *)&buf[8];
    vp::get_log(v43);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v46 = buf[23];
      v47 = *(_BYTE **)buf;
      v48 = (char *)operator new(0x20uLL);
      v49 = v48;
      v50 = buf;
      if (v46 < 0)
        v50 = v47;
      strcpy(v48, "vp::services::Audio_Hardware");
      v51 = " ";
      if (!v44)
        v51 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v50;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v51;
      *(_WORD *)&__p[22] = 2080;
      v265 = v48;
      _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v49);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v52 = (_QWORD *)operator new();
  *v52 = &off_1E69D00A8;
  v52[1] = v26;
  v53 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x61687773u);
  v54 = *(vp **)v53;
  *(_QWORD *)v53 = v52;
  if (v54)
    v54 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v54 + 8))(v54);
  vp::get_log(v54);
  v55 = objc_claimAutoreleasedReturnValue();
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);

  if (v56)
  {
    v57 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v58 = buf[23];
    else
      v58 = *(_QWORD *)&buf[8];
    vp::get_log(v57);
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      v60 = buf[23];
      v61 = *(_BYTE **)buf;
      v62 = (char *)operator new(0x28uLL);
      v63 = v62;
      v64 = buf;
      if (v60 < 0)
        v64 = v61;
      strcpy(v62, "vp::services::Audio_Issue_Detector");
      v65 = " ";
      if (!v58)
        v65 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v64;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v65;
      *(_WORD *)&__p[22] = 2080;
      v265 = v62;
      _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v63);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v66 = (_QWORD *)operator new();
  *v66 = &off_1E69D00D8;
  v66[1] = v26;
  v67 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x61696473u);
  v68 = *(vp **)v67;
  *(_QWORD *)v67 = v66;
  if (v68)
    v68 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v68 + 8))(v68);
  vp::get_log(v68);
  v69 = objc_claimAutoreleasedReturnValue();
  v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);

  if (v70)
  {
    v71 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v72 = buf[23];
    else
      v72 = *(_QWORD *)&buf[8];
    vp::get_log(v71);
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = buf[23];
      v75 = *(_BYTE **)buf;
      v76 = (char *)operator new(0x20uLL);
      v77 = v76;
      v78 = buf;
      if (v74 < 0)
        v78 = v75;
      strcpy(v76, "vp::services::Audio_Statistics");
      v79 = " ";
      if (!v72)
        v79 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v78;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v79;
      *(_WORD *)&__p[22] = 2080;
      v265 = v76;
      _os_log_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v77);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v80 = (_QWORD *)operator new();
  *v80 = &off_1E69D0178;
  v80[1] = v26;
  v81 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x61737473u);
  v82 = *(vp **)v81;
  *(_QWORD *)v81 = v80;
  if (v82)
    v82 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v82 + 8))(v82);
  vp::get_log(v82);
  v83 = objc_claimAutoreleasedReturnValue();
  v84 = os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);

  if (v84)
  {
    v85 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v86 = buf[23];
    else
      v86 = *(_QWORD *)&buf[8];
    vp::get_log(v85);
    v87 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      v88 = buf[23];
      v89 = *(_BYTE **)buf;
      v90 = (char *)operator new(0x19uLL);
      v91 = v90;
      v92 = buf;
      if (v88 < 0)
        v92 = v89;
      strcpy(v90, "vp::services::Backboard");
      v93 = " ";
      if (!v86)
        v93 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v92;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v93;
      *(_WORD *)&__p[22] = 2080;
      v265 = v90;
      _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v91);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v94 = (_QWORD *)operator new();
  *v94 = &off_1E69D01D8;
  v94[1] = v26;
  v95 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x62627264u);
  v96 = *(vp **)v95;
  *(_QWORD *)v95 = v94;
  if (v96)
    v96 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v96 + 8))(v96);
  vp::get_log(v96);
  v97 = objc_claimAutoreleasedReturnValue();
  v98 = os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);

  if (v98)
  {
    v99 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v100 = buf[23];
    else
      v100 = *(_QWORD *)&buf[8];
    vp::get_log(v99);
    v101 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      v102 = buf[23];
      v103 = *(_BYTE **)buf;
      v104 = (char *)operator new(0x20uLL);
      v105 = v104;
      v106 = buf;
      if (v102 < 0)
        v106 = v103;
      strcpy(v104, "vp::services::Control_Center");
      v107 = " ";
      if (!v100)
        v107 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v106;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v107;
      *(_WORD *)&__p[22] = 2080;
      v265 = v104;
      _os_log_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v105);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v108 = (_QWORD *)operator new();
  *v108 = &off_1E69D0200;
  v108[1] = v26;
  v109 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x63746C63u);
  v110 = *(vp **)v109;
  *(_QWORD *)v109 = v108;
  if (v110)
    v110 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v110 + 8))(v110);
  vp::get_log(v110);
  v111 = objc_claimAutoreleasedReturnValue();
  v112 = os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT);

  if (v112)
  {
    v113 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v114 = buf[23];
    else
      v114 = *(_QWORD *)&buf[8];
    vp::get_log(v113);
    v115 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      v116 = buf[23];
      v117 = *(_BYTE **)buf;
      v118 = (char *)operator new(0x20uLL);
      v119 = v118;
      v120 = buf;
      if (v116 < 0)
        v120 = v117;
      strcpy(v118, "vp::services::System_Status");
      v121 = " ";
      if (!v114)
        v121 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v120;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v121;
      *(_WORD *)&__p[22] = 2080;
      v265 = v118;
      _os_log_impl(&dword_1B5ED0000, v115, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v119);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v122 = operator new();
  *(_OWORD *)v122 = 0u;
  *(_OWORD *)(v122 + 16) = 0u;
  *(_QWORD *)v122 = &off_1E69D0290;
  *(_QWORD *)(v122 + 16) = &off_1E69D02B8;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2050000000;
  v123 = (void *)getSTMediaStatusDomainClass(void)::softClass;
  v268 = getSTMediaStatusDomainClass(void)::softClass;
  if (!getSTMediaStatusDomainClass(void)::softClass)
  {
    *(_QWORD *)__p = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__p[8] = 3221225472;
    *(_QWORD *)&__p[16] = ___ZL27getSTMediaStatusDomainClassv_block_invoke;
    v265 = (char *)&unk_1E69D3590;
    v266 = buf;
    ___ZL27getSTMediaStatusDomainClassv_block_invoke((uint64_t)__p);
    v123 = *(void **)(*(_QWORD *)&buf[8] + 24);
  }
  v124 = objc_retainAutorelease(v123);
  _Block_object_dispose(buf, 8);
  *(_QWORD *)(v122 + 24) = objc_opt_new();
  *(_QWORD *)(v122 + 8) = v26;
  v125 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x73797374u);
  v126 = *(vp **)v125;
  *(_QWORD *)v125 = v122;
  if (v126)
    v126 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v126 + 8))(v126);
  vp::get_log(v126);
  v127 = objc_claimAutoreleasedReturnValue();
  v128 = os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT);

  if (v128)
  {
    v129 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v130 = buf[23];
    else
      v130 = *(_QWORD *)&buf[8];
    vp::get_log(v129);
    v131 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
    {
      v132 = buf[23];
      v133 = *(_BYTE **)buf;
      v134 = (char *)operator new(0x20uLL);
      v135 = v134;
      v136 = buf;
      if (v132 < 0)
        v136 = v133;
      strcpy(v134, "vp::services::Core_Media");
      v137 = " ";
      if (!v130)
        v137 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v136;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v137;
      *(_WORD *)&__p[22] = 2080;
      v265 = v134;
      _os_log_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v135);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v138 = (_QWORD *)operator new();
  *v138 = &off_1E69D0330;
  v138[1] = v26;
  v139 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x63726D73u);
  v140 = *(vp **)v139;
  *(_QWORD *)v139 = v138;
  if (v140)
    v140 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v140 + 8))(v140);
  vp::get_log(v140);
  v141 = objc_claimAutoreleasedReturnValue();
  v142 = os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);

  if (v142)
  {
    v143 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v144 = buf[23];
    else
      v144 = *(_QWORD *)&buf[8];
    vp::get_log(v143);
    v145 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
    {
      v146 = buf[23];
      v147 = *(_BYTE **)buf;
      v148 = (char *)operator new(0x20uLL);
      v149 = v148;
      v150 = buf;
      if (v146 < 0)
        v150 = v147;
      strcpy(v148, "vp::services::Mobile_Gestalt");
      v151 = " ";
      if (!v144)
        v151 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v150;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v151;
      *(_WORD *)&__p[22] = 2080;
      v265 = v148;
      _os_log_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v149);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v152 = (_QWORD *)operator new();
  *v152 = &off_1E69D0368;
  v152[1] = v26;
  v153 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x6D677374u);
  v154 = *(vp **)v153;
  *(_QWORD *)v153 = v152;
  if (v154)
    v154 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v154 + 8))(v154);
  vp::get_log(v154);
  v155 = objc_claimAutoreleasedReturnValue();
  v156 = os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT);

  if (v156)
  {
    v157 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v158 = buf[23];
    else
      v158 = *(_QWORD *)&buf[8];
    vp::get_log(v157);
    v159 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
    {
      v160 = buf[23];
      v161 = *(_BYTE **)buf;
      v162 = (char *)operator new(0x20uLL);
      v163 = v162;
      v164 = buf;
      if (v160 < 0)
        v164 = v161;
      strcpy(v162, "vp::services::Orientation");
      v165 = " ";
      if (!v158)
        v165 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v164;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v165;
      *(_WORD *)&__p[22] = 2080;
      v265 = v162;
      _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v163);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v166 = (_QWORD *)operator new();
  *v166 = &off_1E69D0390;
  v166[1] = v26;
  v167 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x6F726E74u);
  v168 = *(vp **)v167;
  *(_QWORD *)v167 = v166;
  if (v168)
    v168 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v168 + 8))(v168);
  vp::get_log(v168);
  v169 = objc_claimAutoreleasedReturnValue();
  v170 = os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT);

  if (v170)
  {
    v171 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v172 = buf[23];
    else
      v172 = *(_QWORD *)&buf[8];
    vp::get_log(v171);
    v173 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
    {
      v174 = buf[23];
      v175 = *(_BYTE **)buf;
      v176 = (char *)operator new(0x20uLL);
      v177 = v176;
      v178 = buf;
      if (v174 < 0)
        v178 = v175;
      strcpy(v176, "vp::services::Personal_Audio");
      v179 = " ";
      if (!v172)
        v179 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v178;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v179;
      *(_WORD *)&__p[22] = 2080;
      v265 = v176;
      _os_log_impl(&dword_1B5ED0000, v173, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v177);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v180 = (_QWORD *)operator new();
  *v180 = &off_1E69D0400;
  v180[1] = v26;
  v181 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x70656175u);
  v182 = *(vp **)v181;
  *(_QWORD *)v181 = v180;
  if (v182)
    v182 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v182 + 8))(v182);
  vp::get_log(v182);
  v183 = objc_claimAutoreleasedReturnValue();
  v184 = os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT);

  if (v184)
  {
    v185 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v186 = buf[23];
    else
      v186 = *(_QWORD *)&buf[8];
    vp::get_log(v185);
    v187 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
    {
      v188 = buf[23];
      v189 = *(_BYTE **)buf;
      v190 = (char *)operator new(0x19uLL);
      v191 = v190;
      v192 = buf;
      if (v188 < 0)
        v192 = v189;
      strcpy(v190, "vp::services::Power_Log");
      v193 = " ";
      if (!v186)
        v193 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v192;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v193;
      *(_WORD *)&__p[22] = 2080;
      v265 = v190;
      _os_log_impl(&dword_1B5ED0000, v187, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v191);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v194 = (_QWORD *)operator new();
  *v194 = &off_1E69D0460;
  v194[1] = v26;
  v195 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x706C6773u);
  v196 = *(vp **)v195;
  *(_QWORD *)v195 = v194;
  if (v196)
    v196 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v196 + 8))(v196);
  vp::get_log(v196);
  v197 = objc_claimAutoreleasedReturnValue();
  v198 = os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT);

  if (v198)
  {
    v199 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v200 = buf[23];
    else
      v200 = *(_QWORD *)&buf[8];
    vp::get_log(v199);
    v201 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
    {
      v202 = buf[23];
      v203 = *(_BYTE **)buf;
      v204 = (char *)operator new(0x28uLL);
      v205 = v204;
      v206 = buf;
      if (v202 < 0)
        v206 = v203;
      strcpy(v204, "vp::services::Smart_Cover_Detector");
      v207 = " ";
      if (!v200)
        v207 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v206;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v207;
      *(_WORD *)&__p[22] = 2080;
      v265 = v204;
      _os_log_impl(&dword_1B5ED0000, v201, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v205);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v208 = (_QWORD *)operator new();
  *v208 = &off_1E69D0488;
  v208[1] = v26;
  v209 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x73636473u);
  v210 = *(vp **)v209;
  *(_QWORD *)v209 = v208;
  if (v210)
    v210 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v210 + 8))(v210);
  vp::get_log(v210);
  v211 = objc_claimAutoreleasedReturnValue();
  v212 = os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT);

  if (v212)
  {
    v213 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v214 = buf[23];
    else
      v214 = *(_QWORD *)&buf[8];
    vp::get_log(v213);
    v215 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
    {
      v216 = buf[23];
      v217 = *(_BYTE **)buf;
      v218 = (char *)operator new(0x20uLL);
      v219 = v218;
      v220 = buf;
      if (v216 < 0)
        v220 = v217;
      strcpy(v218, "vp::services::User_Defaults");
      v221 = " ";
      if (!v214)
        v221 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v220;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v221;
      *(_WORD *)&__p[22] = 2080;
      v265 = v218;
      _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v219);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v222 = (_QWORD *)operator new();
  v223 = v222;
  *v222 = &off_1E69D04B0;
  v222[1] = 0;
  v224 = cf;
  if (!cf)
  {
    v222[2] = 0;
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  CFRetain(cf);
  v223[1] = v26;
  v223[2] = v224;
  v225 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x75736473u);
  v226 = *(vp **)v225;
  *(_QWORD *)v225 = v223;
  if (v226)
    v226 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v226 + 8))(v226);
  vp::get_log(v226);
  v227 = objc_claimAutoreleasedReturnValue();
  v228 = os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT);

  if (v228)
  {
    v229 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v230 = buf[23];
    else
      v230 = *(_QWORD *)&buf[8];
    vp::get_log(v229);
    v231 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
    {
      v232 = buf[23];
      v233 = *(_BYTE **)buf;
      v234 = (char *)operator new(0x30uLL);
      v235 = v234;
      v236 = buf;
      if (v232 < 0)
        v236 = v233;
      strcpy(v234, "vp::services::Wireless_Charging_Detector");
      v237 = " ";
      if (!v230)
        v237 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v236;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v237;
      *(_WORD *)&__p[22] = 2080;
      v265 = v234;
      _os_log_impl(&dword_1B5ED0000, v231, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v235);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v238 = (_QWORD *)operator new();
  *v238 = &off_1E69D04F8;
  v238[1] = 0;
  StartVPWirelessChargingMatStateListener();
  v238[1] = v26;
  v239 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v26 + 16, 0x77636473u);
  v240 = *(vp **)v239;
  *(_QWORD *)v239 = v238;
  if (v240)
    v240 = (vp *)(*(uint64_t (**)(vp *))(*(_QWORD *)v240 + 8))(v240);
  v241 = v261;
  vp::get_log(v240);
  v242 = objc_claimAutoreleasedReturnValue();
  v243 = os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT);

  if (v243)
  {
    v244 = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, buf);
    if (buf[23] >= 0)
      v245 = buf[23];
    else
      v245 = *(_QWORD *)&buf[8];
    vp::get_log(v244);
    v246 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
    {
      v247 = buf[23];
      v248 = *(_BYTE **)buf;
      v249 = (char *)operator new(0x20uLL);
      v250 = v249;
      v251 = buf;
      if (v247 < 0)
        v251 = v248;
      strcpy(v249, "vp::services::Telephony_Utility");
      v252 = " ";
      if (!v245)
        v252 = "";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v251;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v252;
      *(_WORD *)&__p[22] = 2080;
      v265 = v249;
      _os_log_impl(&dword_1B5ED0000, v246, OS_LOG_TYPE_DEFAULT, "%s%sregister \"%s\"", __p, 0x20u);
      operator delete(v250);
    }

    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v253 = (_QWORD *)operator new();
  *v253 = &off_1E69D0520;
  v253[1] = v241;
  v254 = boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(v241 + 16, 0x74656C75u);
  v255 = *(std::pmr **)v254;
  *(_QWORD *)v254 = v253;
  if (v255)
    v255 = (std::pmr *)(*(uint64_t (**)(std::pmr *))(*(_QWORD *)v255 + 8))(v255);
  v256 = std::pmr::get_default_resource(v255);
  vp::vx::create_voice_processor((uint64_t)this, &v261, v256, v260);
  vp::vx::create_interface_adapter((uint64_t)v260, a2);
  std::unique_ptr<vp::vx::Voice_Processor_Interface,vp::Allocator_Delete<vp::vx::Voice_Processor_Interface>>::reset[abi:ne180100]((void (****)(_QWORD))v260, 0);
  v257 = v262;
  if (v262)
  {
    v258 = (unint64_t *)&v262->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B62C8CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a2)
  {
    _Block_object_dispose(&a23, 8);
    MEMORY[0x1BCC95CEC](v23, 0xA1C40069AE433);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  int v36;
  const char *v37;
  const char *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = *(unsigned int **)(a1 + 8);
  if (v4)
  {
    v7 = *(unsigned int **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    do
    {
      if (v8 != 1 && !v7)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v7)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v9 = v8 >> 1;
      v10 = &v7[4 * (v8 >> 1)];
      v12 = *v10;
      v11 = v10 + 4;
      v8 += ~(v8 >> 1);
      if (v12 >= a2)
        v8 = v9;
      else
        v7 = v11;
    }
    while (v8);
  }
  v13 = (unsigned int *)(v3 + 16 * v4);
  if (v7 == v13)
  {
    v43 = a2;
    v44 = 0;
    if (v3 <= (unint64_t)v7)
    {
      v40 = 0;
      v15 = v13;
      goto LABEL_27;
    }
LABEL_59:
    v35 = "this->priv_in_range_or_end(hint)";
    v36 = 879;
    v37 = "flat_tree.hpp";
    v38 = "insert_unique";
    goto LABEL_64;
  }
  if (!v7)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (*v7 > a2)
  {
    v43 = a2;
    v44 = 0;
    if (v3 <= (unint64_t)v7 && v7 <= v13)
    {
      v40 = 0;
      v15 = v7;
      if (*v7 <= a2)
      {
        v41 = v13;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(a1, (uint64_t)v7, &v41, &v43, &v40))goto LABEL_49;
LABEL_30:
        v19 = v40;
        v20 = *(_QWORD *)(a1 + 8);
        if (v20 > (unint64_t)v40)
          goto LABEL_61;
        v21 = *(_QWORD *)(a1 + 16);
        if (!v20 && v21)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        v22 = (unsigned int *)(v20 + 16 * v21);
        if (v40 > v22)
        {
LABEL_61:
          v35 = "this->priv_in_range_or_end(position)";
          v36 = 1862;
          v37 = "vector.hpp";
          v38 = "emplace";
        }
        else
        {
          v23 = *(_QWORD *)(a1 + 24);
          if (v23 >= v21)
          {
            if (v23 == v21)
            {
              boost::container::vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>>(&v39, (char *)a1, (uint64_t)v40, (uint64_t)&v43);
            }
            else
            {
              if (v22 == v40)
              {
                *v40 = v43;
                v32 = v44;
                v44 = 0;
                *(_QWORD *)(v20 + 16 * v21 + 8) = v32;
                *(_QWORD *)(a1 + 16) = v21 + 1;
              }
              else
              {
                v24 = v22 - 4;
                *v22 = *(v22 - 4);
                v25 = *((_QWORD *)v22 - 1);
                *((_QWORD *)v22 - 1) = 0;
                *(_QWORD *)(v20 + 16 * v21 + 8) = v25;
                *(_QWORD *)(a1 + 16) = v21 + 1;
                if (v22 - 4 != v19)
                {
                  v26 = v22 - 4;
                  do
                  {
                    v27 = *(v26 - 4);
                    v26 -= 4;
                    *v24 = v27;
                    v28 = *((_QWORD *)v24 - 1);
                    *((_QWORD *)v24 - 1) = 0;
                    v29 = *((_QWORD *)v24 + 1);
                    *((_QWORD *)v24 + 1) = v28;
                    if (v29)
                      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
                    v24 = v26;
                  }
                  while (v26 != v19);
                }
                *v19 = v43;
                v30 = v44;
                v44 = 0;
                v31 = *((_QWORD *)v19 + 1);
                *((_QWORD *)v19 + 1) = v30;
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
              }
              v39 = v19;
            }
            goto LABEL_52;
          }
          v35 = "this->m_holder.capacity() >= this->m_holder.m_size";
          v36 = 2821;
          v37 = "vector.hpp";
          v38 = "priv_insert_forward_range";
        }
LABEL_64:
        __assert_rtn(v38, v37, v36, v35);
      }
LABEL_27:
      v40 = v7;
      if (v15 != (unsigned int *)v3)
      {
        if (!v15)
          __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
        v17 = *(v15 - 4);
        v16 = v15 - 4;
        v18 = v17 > a2;
        if (v17 >= a2)
        {
          if (!v18)
          {
            v40 = v16;
            goto LABEL_49;
          }
          v42 = v16;
          if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(a1, v3, &v42, &v43, &v40))
          {
LABEL_49:
            if (!*(_QWORD *)(a1 + 8) && v40)
              __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
            v39 = v40;
LABEL_52:
            v33 = v44;
            v44 = 0;
            if (v33)
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v7 = v39;
            if (!v39)
              __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
            return v7 + 2;
          }
        }
      }
      goto LABEL_30;
    }
    goto LABEL_59;
  }
  return v7 + 2;
}

void sub_1B62C9200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *boost::container::vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>>(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  _QWORD *result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)a2 + 3);
  if (v4 != *((_QWORD *)a2 + 2))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v4 == 0xFFFFFFFFFFFFFFFLL)
    goto LABEL_30;
  if (v4 >> 61 > 4)
    v6 = -1;
  else
    v6 = 8 * v4;
  if (v4 >> 61)
    v7 = v6;
  else
    v7 = 8 * v4 / 5;
  if (v7 < 0xFFFFFFFFFFFFFFFLL)
    v5 = v7;
  v8 = v4 + 1 > v5 ? v4 + 1 : v5;
  if (v8 >> 60)
LABEL_30:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v13 = *((_QWORD *)a2 + 1);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, 16 * v8, 8);
  v15 = result;
  v16 = *((_QWORD *)a2 + 1);
  v17 = *((_QWORD *)a2 + 2);
  v18 = v16 + 16 * v17;
  v19 = result;
  if (v16 != a3)
  {
    v20 = *((_QWORD *)a2 + 1);
    v19 = result;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      v19[1] = v21;
      v19 += 2;
      v20 += 16;
    }
    while (v20 != a3);
  }
  *(_DWORD *)v19 = *(_DWORD *)a4;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  v19[1] = v22;
  if (v18 != a3)
  {
    v23 = v19 + 3;
    v24 = a3;
    do
    {
      *((_DWORD *)v23 - 2) = *(_DWORD *)v24;
      v25 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      *v23 = v25;
      v23 += 2;
      v24 += 16;
    }
    while (v24 != v18);
  }
  if (v16)
  {
    if (v17)
    {
      v26 = (uint64_t *)(v16 + 8);
      do
      {
        v27 = *v26;
        *v26 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v26 += 2;
        --v17;
      }
      while (v17);
    }
    result = boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(a2, *((_QWORD **)a2 + 1));
  }
  v28 = *((_QWORD *)a2 + 2) + 1;
  *((_QWORD *)a2 + 1) = v15;
  *((_QWORD *)a2 + 2) = v28;
  *((_QWORD *)a2 + 3) = v8;
  *a1 = (char *)v15 + a3 - v13;
  return result;
}

_QWORD *boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(_QWORD *result, _QWORD *a2)
{
  if (result + 4 != a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 24))(*result);
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  unsigned int *v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;

  v10 = *a3;
  v11 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,true>,unsigned int>(&v11, &v10, a4, &v12);
  v8 = v12;
  *a5 = v12;
  if (v8 == *a3)
    return 1;
  if (!v8)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v8;
}

void vp::services::Telephony_Utility_Impl::~Telephony_Utility_Impl(vp::services::Telephony_Utility_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Telephony_Utility_Impl::is_in_emergency_call(vp::services::Telephony_Utility_Impl *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(MEMORY[0x1E0DBD1C8], "sharedInstance", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "currentAudioAndVideoCalls");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "isEmergency") & 1) != 0)
        {
          v3 = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

void sub_1B62C9620(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void vp::services::Telephony_Utility_Impl::get_is_emergency_changed_cf_notification_key(applesauce::CF::StringRef *a1@<X8>)
{
  id v3;
  const void *v4;
  id v5;

  v3 = (id)*MEMORY[0x1E0DBD4E0];
  v4 = v3;
  v5 = v3;
  if (v3)
  {
    CFRetain(v3);
    v4 = v5;
  }
  applesauce::CF::StringRef::StringRef(a1, v4);

}

void sub_1B62C9698(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  __clang_call_terminate(a1);
}

void vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(vp::services::Legacy_Wireless_Charging_Detector_Impl *this)
{
  vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(this);
}

{
  vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  StopVPWirelessChargingMatStateListener();
}

uint64_t vp::services::Legacy_Wireless_Charging_Detector_Impl::is_wireless_charging_mat_attached(vp::services::Legacy_Wireless_Charging_Detector_Impl *this)
{
  unsigned __int8 v1;

  v1 = atomic_load(gWirelessChargingMatIsAttached);
  return v1 & 1;
}

void sub_1B62C972C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B62C9724);
}

void vp::services::User_Defaults_Impl::~User_Defaults_Impl(vp::services::User_Defaults_Impl *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCC95CECLL);
}

CFTypeRef vp::services::User_Defaults_Impl::get_default_app_id@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 2));
  *a2 = v3;
  return this;
}

void vp::services::User_Defaults_Impl::get_all_keys(CFStringRef *a1@<X1>, _QWORD *a2@<X8>)
{
  CFArrayRef v4;
  CFArrayRef v5;
  CFTypeID v6;
  CFTypeID TypeID;
  int Count;
  CFIndex v9;
  uint64_t v10;
  void **ValueAtIndex;
  void **v12;
  CFTypeID v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void ***v21;
  unint64_t v22;
  _QWORD *v23;
  void **v24;
  __int128 v25;
  unint64_t v26;
  CFTypeRef *v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  _BYTE v34[24];
  unint64_t v35;
  unint64_t *v36;

  v4 = CFPreferencesCopyKeyList(*a1, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  v5 = v4;
  if (!v4)
    goto LABEL_26;
  v6 = CFGetTypeID(v4);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v28 = 0uLL;
  v29 = 0;
  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    v34[0] = 0;
    LOBYTE(v35) = 0;
LABEL_30:
    *(_OWORD *)a2 = v28;
    a2[2] = v29;
    v29 = 0;
    v28 = 0uLL;
    goto LABEL_31;
  }
  Count = CFArrayGetCount(v5);
  v32 = 0uLL;
  v33 = 0;
  std::vector<applesauce::CF::StringRef>::reserve(&v32, Count);
  if (Count >= 1)
  {
    v9 = 0;
    v10 = Count;
    while (1)
    {
      ValueAtIndex = (void **)CFArrayGetValueAtIndex(v5, v9);
      v12 = ValueAtIndex;
      if (!ValueAtIndex)
        break;
      CFRetain(ValueAtIndex);
      v13 = CFGetTypeID(v12);
      if (v13 != CFStringGetTypeID())
      {
        CFRelease(v12);
        break;
      }
      v30 = v12;
      v31 = 1;
      v14 = (_QWORD *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1) >= v33)
      {
        v15 = (_QWORD *)v32;
        v16 = (uint64_t)(*((_QWORD *)&v32 + 1) - v32) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v18 = v33 - v32;
        if ((uint64_t)(v33 - v32) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v36 = &v33;
        if (v19)
        {
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v19);
          v14 = (_QWORD *)*((_QWORD *)&v32 + 1);
          v15 = (_QWORD *)v32;
          v12 = v30;
        }
        else
        {
          v20 = 0;
        }
        v21 = (void ***)(v19 + 8 * v16);
        v22 = v19 + 8 * v20;
        v35 = v22;
        *v21 = v12;
        v23 = v21 + 1;
        v30 = 0;
        *(_QWORD *)&v34[16] = v21 + 1;
        if (v14 != v15)
        {
          do
          {
            v24 = (void **)*--v14;
            *--v21 = v24;
            *v14 = 0;
          }
          while (v14 != v15);
          v23 = *(_QWORD **)&v34[16];
          v22 = v35;
        }
        v25 = v32;
        *(_QWORD *)&v32 = v21;
        *((_QWORD *)&v32 + 1) = v23;
        *(_OWORD *)&v34[8] = v25;
        v26 = v33;
        v33 = v22;
        v35 = v26;
        *(_QWORD *)v34 = v25;
        std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)v34);
        *((_QWORD *)&v32 + 1) = v23;
      }
      else
      {
        **((_QWORD **)&v32 + 1) = v12;
        v30 = 0;
        *((_QWORD *)&v32 + 1) = v14 + 1;
      }
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
      if (++v9 == v10)
        goto LABEL_24;
    }
    LOBYTE(v30) = 0;
    v31 = 0;
    v34[0] = 0;
    LOBYTE(v35) = 0;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
    v30 = (void **)&v32;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v30);
    goto LABEL_30;
  }
LABEL_24:
  *(_OWORD *)v34 = v32;
  *(_QWORD *)&v34[16] = v33;
  v33 = 0;
  v32 = 0uLL;
  LOBYTE(v35) = 1;
  v27 = *(CFTypeRef **)&v34[8];
  v30 = (void **)&v32;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v30);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<applesauce::CF::StringRef>::__init_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>(a2, *(CFTypeRef **)v34, v27, ((uint64_t)v27 - *(_QWORD *)v34) >> 3);
  *(_QWORD *)&v32 = v34;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
LABEL_31:
  *(_QWORD *)v34 = &v28;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  CFRelease(v5);
}

CFPropertyListRef vp::services::User_Defaults_Impl::get_object@<X0>(CFStringRef *a1@<X1>, CFStringRef *a2@<X2>, _QWORD *a3@<X8>)
{
  CFPropertyListRef result;

  result = CFPreferencesCopyAppValue(*a2, *a1);
  *a3 = result;
  return result;
}

void vp::services::User_Defaults_Impl::set_object(vp::services::User_Defaults_Impl *this, CFStringRef *a2, CFStringRef *a3, CFPropertyListRef *a4)
{
  CFPreferencesSetAppValue(*a3, *a4, *a2);
}

uint64_t vp::services::User_Defaults_Impl::synchronize(vp::services::User_Defaults_Impl *this, CFStringRef *a2)
{
  return CFPreferencesAppSynchronize(*a2);
}

void vp::services::Legacy_Smart_Cover_Detector_Impl::~Legacy_Smart_Cover_Detector_Impl(vp::services::Legacy_Smart_Cover_Detector_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

BOOL vp::services::Legacy_Smart_Cover_Detector_Impl::is_smart_cover_attached(vp::services::Legacy_Smart_Cover_Detector_Impl *this)
{
  int IsAttached;
  BOOL v4;

  v4 = 0;
  IsAttached = GetVPSmartCoverIsAttached(&v4);
  return v4 && IsAttached == 0;
}

void vp::services::Power_Log_Impl::~Power_Log_Impl(vp::services::Power_Log_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void vp::services::Power_Log_Impl::log_speaker_amp_power(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  CFNumberRef v5;
  vp *v6;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *p_p;
  const char *v15;
  CFNumberRef v16;
  vp *v17;
  NSObject *v18;
  _BOOL4 v19;
  vp *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  CFDictionaryRef CFDictionaryRef;
  std::runtime_error *exception;
  std::runtime_error *v29;
  CFTypeRef cf[2];
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;
  CFNumberRef v34;
  void **v35;
  void **v36;
  uint64_t v37;
  float valuePtr;
  _BYTE buf[12];
  __int16 v40;
  const char *v41;
  __int16 v42;
  double v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    v4 = *(float *)&a2;
    CFRetain(CFSTR("Avg Watts Measured"));
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, CFSTR("Avg Watts Measured"));
    valuePtr = v4;
    v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    v34 = v5;
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v6 = (vp *)std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(&v35, cf, (const void **)&v34);
    vp::get_log(v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      v10 = v33;
      v11 = v32;
      vp::get_log(log_context_info);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = v11;
        p_p = __p;
        if ((v33 & 0x80u) == 0)
          p_p = &__p;
        if (v13)
          v15 = " ";
        else
          v15 = "";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = p_p;
        v40 = 2080;
        v41 = v15;
        v42 = 2048;
        v43 = v4;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%s%saverage measured power is %f watts", buf, 0x20u);
      }

      if ((char)v33 < 0)
        operator delete(__p);
    }
    CFRelease(v5);
    if (cf[0])
      CFRelease(cf[0]);
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    CFRetain(CFSTR("Avg Watts Modelled"));
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, CFSTR("Avg Watts Modelled"));
    valuePtr = *(float *)&a3;
    v16 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    v34 = v16;
    if (!v16)
    {
      v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
    }
    v17 = (vp *)std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(&v35, cf, (const void **)&v34);
    vp::get_log(v17);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

    if (v19)
    {
      v20 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      v21 = v33;
      v22 = v32;
      vp::get_log(v20);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if ((v21 & 0x80u) == 0)
          v24 = v21;
        else
          v24 = v22;
        v25 = __p;
        if ((v33 & 0x80u) == 0)
          v25 = &__p;
        if (v24)
          v26 = " ";
        else
          v26 = "";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v25;
        v40 = 2080;
        v41 = v26;
        v42 = 2048;
        v43 = *(float *)&a3;
        _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "%s%saverage modelled power is %f watts", buf, 0x20u);
      }

      if ((char)v33 < 0)
        operator delete(__p);
    }
    CFRelease(v16);
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (v35 != v36)
  {
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(&v35);
    *(_QWORD *)buf = CFDictionaryRef;
    PLLogRegisteredEvent();
    if (CFDictionaryRef)
      CFRelease(CFDictionaryRef);
  }
  *(_QWORD *)buf = &v35;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B62C9FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void **buf,int a26,__int16 a27,uint64_t a28,__int16 a29,uint64_t a30)
{
  vp *v31;
  NSObject *v32;
  _BOOL4 v33;
  vp *log_context_info;
  NSObject *v35;

  if (a2)
  {
    applesauce::CF::StringRef::~StringRef((const void **)&a9);
    buf = &__p;
    std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&buf);
    v31 = (vp *)__cxa_begin_catch(exception_object);
    vp::get_log(v31);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);

    if (v33)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      vp::get_log(log_context_info);
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a23 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62C9F38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v12 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v13 = v7 - *a1;
    v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v21 = v6;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
    else
      v16 = 0;
    v17 = v16;
    v18 = &v16[16 * v12];
    v20 = &v16[16 * v15];
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(v18, *a2, a3);
    v19 = v18 + 16;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v11 = a1[1];
    result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(*(_QWORD **)(v6 - 8), *a2, a3);
    v11 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1B62CA2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(_QWORD *a1, CFTypeRef cf, const void **a3)
{
  const void *v6;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

void vp::services::Personal_Audio_Impl::~Personal_Audio_Impl(vp::services::Personal_Audio_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

unint64_t vp::services::Personal_Audio_Impl::is_personal_media_enabled(vp::services::Personal_Audio_Impl *this)
{
  void *v1;
  unint64_t v2;
  void *v3;

  if (!objc_opt_class())
    return 0;
  objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "personalMediaEnabled");

  if ((_DWORD)v2)
  {
    objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = ((unint64_t)objc_msgSend(v3, "personalAudioAccommodationTypes") >> 1) & 1;

  }
  return v2;
}

unint64_t vp::services::Personal_Audio_Impl::is_personal_media_enabled(uint64_t a1, id *a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  unint64_t v8;

  if (!objc_opt_class())
    return 0;
  v3 = (NSString *)*a2;
  parse_route_uid(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "personalMediaEnabledForRouteUID:", v4);

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = ((unint64_t)objc_msgSend(v7, "accommodationTypesForRouteUID:", v4) >> 1) & 1;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_enabled_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_PersonalMediaEnabled";
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_enabled_routeid_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_personalMediaEnabledByRouteUID";
}

void vp::services::Personal_Audio_Impl::get_personal_media_preset(applesauce::CF::DictionaryRef *a1@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  if (objc_opt_class())
  {
    objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "personalMediaConfiguration");
    v8 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "presetAdjustments");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (id)*MEMORY[0x1E0D70A88];
    objc_msgSend(v4, "objectForKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
      CFRetain(v6);
    applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);

  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
}

void vp::services::Personal_Audio_Impl::get_personal_media_preset(id *a1@<X1>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  NSString *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  if (objc_opt_class())
  {
    v4 = (NSString *)*a1;
    parse_route_uid(v4);
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D70A80], "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "personalMediaConfigurationForRouteUID:", v10);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "preset");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = v7;
    v9 = v8;
    if (v8)
      CFRetain(v8);
    applesauce::CF::DictionaryRef::DictionaryRef(a2, v9);

  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_preset_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_personalAudioAccommodationTypes";
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_preset_routeid_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_accommodationTypesByRouteUID";
}

id parse_route_uid(NSString *a1)
{
  void *v1;
  void *v2;

  -[NSString componentsSeparatedByString:](a1, "componentsSeparatedByString:", CFSTR("-"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1B62CA6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void vp::services::Orientation_Impl::~Orientation_Impl(vp::services::Orientation_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

BOOL vp::services::Orientation_Impl::register_device_orientation_listener(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  vp *v3;
  int v4;
  _BOOL8 v5;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(vp *, int);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v24 = MEMORY[0x1E0C809B0];
  v25 = 3321888768;
  v2 = *a2;
  v26 = ___ZN2vp8services16Orientation_Impl36register_device_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke;
  v27 = &__block_descriptor_80_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE_e8_v12__0i8l;
  v28 = a1;
  v29 = v2;
  (*(void (**)(_QWORD *, uint64_t *))(v2 + 8))(v30, a2 + 1);
  v3 = (vp *)CARegisterDeviceOrientation();
  v4 = (int)v3;
  v5 = (_DWORD)v3 == 0;
  if ((_DWORD)v3)
  {
    vp::get_log(v3);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      v10 = v17;
      v11 = __p[1];
      vp::get_log(log_context_info);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = (unint64_t)v11;
        if ((v17 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v19 = v14;
        if (v13)
          v15 = " ";
        else
          v15 = "";
        v20 = 2080;
        v21 = v15;
        v22 = 1024;
        v23 = v4;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%s%sfailed to register device orientation listener with status %u", buf, 0x1Cu);
      }

      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
  (*(void (**)(_QWORD *))(v29 + 24))(v30);
  return v5;
}

void sub_1B62CA8C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B62CA8E8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (a2)
  {
    (*(void (**)(uint64_t))(a23 + 24))(v23);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B62CA798);
  }
  JUMPOUT(0x1B62CA8D8);
}

uint64_t vp::services::Orientation_Impl::unregister_device_orientation_listener(vp::services::Orientation_Impl *this)
{
  vp *v1;
  int v2;
  NSObject *v4;
  _BOOL4 v5;
  vp *log_context_info;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  void **v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = (vp *)CAUnregisterDeviceOrientation();
  v2 = (int)v1;
  if (!(_DWORD)v1)
    return 1;
  vp::get_log(v1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
    v7 = v14;
    v8 = __p[1];
    vp::get_log(log_context_info);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = (unint64_t)v8;
      if ((v14 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = v11;
      if (v10)
        v12 = " ";
      else
        v12 = "";
      v17 = 2080;
      v18 = v12;
      v19 = 1024;
      v20 = v2;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister device orientation listener with status %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62CAA9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B62CAA8CLL);
  }
  j___Unwind_Resume_118(a1);
}

void sub_1B62CAAAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  j___Unwind_Resume_118(a1);
}

BOOL vp::services::Orientation_Impl::register_ui_orientation_listener(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  vp *v3;
  int v4;
  _BOOL8 v5;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(vp *, int);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v24 = MEMORY[0x1E0C809B0];
  v25 = 3321888768;
  v2 = *a2;
  v26 = ___ZN2vp8services16Orientation_Impl32register_ui_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke;
  v27 = &__block_descriptor_80_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE_e8_v12__0i8l;
  v28 = a1;
  v29 = v2;
  (*(void (**)(_QWORD *, uint64_t *))(v2 + 8))(v30, a2 + 1);
  v3 = (vp *)CARegisterUIOrientation();
  v4 = (int)v3;
  v5 = (_DWORD)v3 == 0;
  if ((_DWORD)v3)
  {
    vp::get_log(v3);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      v10 = v17;
      v11 = __p[1];
      vp::get_log(log_context_info);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = (unint64_t)v11;
        if ((v17 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v19 = v14;
        if (v13)
          v15 = " ";
        else
          v15 = "";
        v20 = 2080;
        v21 = v15;
        v22 = 1024;
        v23 = v4;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%s%sfailed to register UI orientation listener with status %u", buf, 0x1Cu);
      }

      if ((char)v17 < 0)
        operator delete(__p[0]);
    }
  }
  (*(void (**)(_QWORD *))(v29 + 24))(v30);
  return v5;
}

void sub_1B62CAC8C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B62CACAC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (a2)
  {
    (*(void (**)(uint64_t))(a23 + 24))(v23);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B62CAB5CLL);
  }
  JUMPOUT(0x1B62CAC9CLL);
}

uint64_t vp::services::Orientation_Impl::unregister_ui_orientation_listener(vp::services::Orientation_Impl *this)
{
  vp *v1;
  int v2;
  NSObject *v4;
  _BOOL4 v5;
  vp *log_context_info;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  void **v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = (vp *)CAUnregisterUIOrientation();
  v2 = (int)v1;
  if (!(_DWORD)v1)
    return 1;
  vp::get_log(v1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
    v7 = v14;
    v8 = __p[1];
    vp::get_log(log_context_info);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = (unint64_t)v8;
      if ((v14 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = v11;
      if (v10)
        v12 = " ";
      else
        v12 = "";
      v17 = 2080;
      v18 = v12;
      v19 = 1024;
      v20 = v2;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister UI orientation listener with status %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62CAE60(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B62CAE50);
  }
  j___Unwind_Resume_119(a1);
}

void sub_1B62CAE70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  j___Unwind_Resume_119(a1);
}

uint64_t ___ZN2vp8services16Orientation_Impl32register_ui_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke(vp *a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  vp *v6;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  vp *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);

  if (v5)
  {
    v6 = (vp *)CFStringCreateWithCAOrientation();
    vp::get_log(v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      v10 = v18;
      v11 = __p[1];
      vp::get_log(log_context_info);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = (unint64_t)v11;
        if ((v18 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v20 = v14;
        if (v13)
          v15 = " ";
        else
          v15 = "";
        v21 = 2080;
        v22 = v15;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s%sUI orientation changed to \"%@\"", buf, 0x20u);
      }

      if ((char)v18 < 0)
        operator delete(__p[0]);
    }
    CFRelease(v6);
  }
  *(_DWORD *)buf = a2;
  return (**((uint64_t (***)(uint64_t, uint8_t *))a1 + 5))((uint64_t)a1 + 48, buf);
}

uint64_t __copy_helper_block_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1 + 48, a2 + 48);
}

uint64_t __destroy_helper_block_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 24))(a1 + 48);
}

uint64_t ___ZN2vp8services16Orientation_Impl36register_device_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke(vp *a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  vp *v6;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  vp *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);

  if (v5)
  {
    v6 = (vp *)CFStringCreateWithCAOrientation();
    vp::get_log(v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      v10 = v18;
      v11 = __p[1];
      vp::get_log(log_context_info);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        if ((v10 & 0x80u) == 0)
          v13 = v10;
        else
          v13 = (unint64_t)v11;
        if ((v18 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v20 = v14;
        if (v13)
          v15 = " ";
        else
          v15 = "";
        v21 = 2080;
        v22 = v15;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s%sdevice orientation changed to \"%@\"", buf, 0x20u);
      }

      if ((char)v18 < 0)
        operator delete(__p[0]);
    }
    CFRelease(v6);
  }
  *(_DWORD *)buf = a2;
  return (**((uint64_t (***)(uint64_t, uint8_t *))a1 + 5))((uint64_t)a1 + 48, buf);
}

void vp::services::Mobile_Gestalt_Impl::~Mobile_Gestalt_Impl(vp::services::Mobile_Gestalt_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Mobile_Gestalt_Impl::copy_answer@<X0>(unsigned int a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (a1 <= 1)
    return vp::services::Mobile_Gestalt_Impl::copy_answer<__CFString const*>(a2);
  *a2 = 0;
  return result;
}

uint64_t vp::services::Mobile_Gestalt_Impl::copy_answer<__CFString const*>(uint64_t *a1)
{
  uint64_t result;

  result = MGCopyAnswer();
  *a1 = result;
  return result;
}

void sub_1B62CB290(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B62CB284);
}

void vp::services::Core_Media_Impl::~Core_Media_Impl(vp::services::Core_Media_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

BOOL vp::services::Core_Media_Impl::is_fig_capture_speaker_interference_mitigation_supported(vp::services::Core_Media_Impl *this)
{
  return FigCaptureSpeakerInterferenceMitigationIsSupported() != 0;
}

BOOL vp::services::Core_Media_Impl::is_fig_capture_speaker_interference_mitigation_required(vp::services::Core_Media_Impl *this)
{
  return FigCaptureSpeakerInterferenceMitigationIsRequired() != 0;
}

void vp::services::Core_Media_Impl::get_fig_capture_speaker_interference_mitigation_cf_notification_key(_QWORD *a1@<X8>)
{
  const void *v3;
  CFTypeID v4;

  v3 = (const void *)*MEMORY[0x1E0D040A0];
  if (*MEMORY[0x1E0D040A0]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E0D040A0]), v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

Class ___ZL27getSTMediaStatusDomainClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!SystemStatusLibraryCore(char **)::frameworkLibrary)
  {
    SystemStatusLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!SystemStatusLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("STMediaStatusDomain");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getSTMediaStatusDomainClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void vp::services::System_Status_Impl::Media_Status_Domain::~Media_Status_Domain(id *this)
{

}

{

  JUMPOUT(0x1BCC95CECLL);
}

void vp::services::System_Status_Impl::Media_Status_Domain::get_camera_capture_attributions(vp::services::System_Status_Impl::Media_Status_Domain *this@<X0>, _QWORD *a2@<X8>)
{
  vp::services::System_Status_Impl::Media_Status_Domain *v2;
  NSObject *v4;
  _BOOL4 v5;
  vp *log_context_info;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  __int128 *v11;
  const char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  const void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE buf[12];
  __int16 v38;
  const char *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v2 = this;
  v44 = *MEMORY[0x1E0C80C00];
  if (!SystemStatusLibraryCore(char **)::frameworkLibrary)
  {
    v40 = xmmword_1E69D02D8;
    v41 = 0;
    this = (vp::services::System_Status_Impl::Media_Status_Domain *)_sl_dlopen();
    SystemStatusLibraryCore(char **)::frameworkLibrary = (uint64_t)this;
  }
  if (!SystemStatusLibraryCore(char **)::frameworkLibrary)
  {
    vp::get_log(this);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::System_Status_Impl::Media_Status_Domain]", 53, &v40);
      v7 = HIBYTE(v41);
      v8 = *((_QWORD *)&v40 + 1);
      vp::get_log(log_context_info);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if ((v7 & 0x80u) == 0)
          v10 = v7;
        else
          v10 = v8;
        v11 = (__int128 *)v40;
        if (SHIBYTE(v41) >= 0)
          v11 = &v40;
        if (v10)
          v12 = " ";
        else
          v12 = "";
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v11;
        v38 = 2080;
        v39 = v12;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "%s%sSystemStatus framework is unavailable and camera status indicator will not function", buf, 0x16u);
      }

      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = std::pmr::get_default_resource(this);
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend(*((id *)v2 + 1), "data", 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "cameraAttributions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v33;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v33 != v16)
          objc_enumerationMutation(v14);
        objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * v17), "activityAttribution");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "attributedEntity");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "bundleIdentifier");
        v20 = (id)objc_claimAutoreleasedReturnValue();
        v21 = v20;
        if (v20)
          CFRetain(v20);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v21);

        v22 = (_QWORD *)a2[1];
        v23 = a2[2];
        if ((unint64_t)v22 >= v23)
        {
          v24 = ((uint64_t)v22 - *a2) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v26 = v23 - *a2;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v43 = a2 + 3;
          if (v27)
            v28 = std::__allocate_at_least[abi:ne180100]<vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>(a2 + 3, v27);
          else
            v28 = 0;
          v29 = (_QWORD *)(v28 + 8 * v24);
          *(_QWORD *)&v40 = v28;
          *((_QWORD *)&v40 + 1) = v29;
          v42 = v28 + 8 * v27;
          *v29 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          v41 = v29 + 1;
          std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(a2, &v40);
          v30 = a2[1];
          std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer(&v40);
          v31 = *(const void **)buf;
          a2[1] = v30;
          if (v31)
            CFRelease(v31);
        }
        else
        {
          *v22 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          a2[1] = v22 + 1;
        }

        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v15);
  }

}

void sub_1B62CB838(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *vp::services::System_Status_Impl::Media_Status_Domain::observe_camera_capture_attributions(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD aBlock[4];
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZNK2vp8services18System_Status_Impl19Media_Status_Domain35observe_camera_capture_attributionsENSt3__18functionIFvNS3_6vectorINS0_13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS_9AllocatorIS8_EEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE_e33_v16__0__STMediaStatusDomainData_8l;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  v3 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 8), "observeDataWithBlock:", v3);

  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1B62CB954(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ___ZNK2vp8services18System_Status_Impl19Media_Status_Domain35observe_camera_capture_attributionsENSt3__18functionIFvNS3_6vectorINS0_13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS_9AllocatorIS8_EEEEEEE_block_invoke(uint64_t a1, void *a2)
{
  std::pmr *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  CFTypeRef *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  CFTypeRef **v16;
  CFTypeRef **v17;
  CFTypeRef *v18;
  uint64_t v19;
  uint64_t v20;
  std::pmr *v21;
  uint64_t v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CFTypeRef *v27;
  CFTypeRef *v28;
  unint64_t v29;
  uint64_t default_resource;
  CFTypeRef **v31[5];
  CFTypeRef cf;
  _BYTE v33[128];
  uint64_t v34;

  v20 = a1;
  v34 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  default_resource = std::pmr::get_default_resource(v2);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v21 = v2;
  -[std::pmr cameraAttributions](v2, "cameraAttributions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v24 != v5)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "activityAttribution", v20);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "attributedEntity");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "bundleIdentifier");
        v9 = (id)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (v9)
          CFRetain(v9);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);

        v11 = v28;
        if ((unint64_t)v28 >= v29)
        {
          v12 = v28 - v27;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v14 = v29 - (_QWORD)v27;
          if ((uint64_t)(v29 - (_QWORD)v27) >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          v31[4] = (CFTypeRef **)&default_resource;
          if (v15)
          {
            if (v15 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = (CFTypeRef **)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)default_resource
                                                                                              + 16))(default_resource, 8 * v15, 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[v12];
          v31[0] = v16;
          v31[1] = v17;
          v31[3] = &v16[v15];
          *v17 = (CFTypeRef *)cf;
          cf = 0;
          v31[2] = v17 + 1;
          std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(&v27, v31);
          v18 = v28;
          std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer(v31);
          v28 = v18;
          if (cf)
            CFRelease(cf);
        }
        else
        {
          *v28 = cf;
          cf = 0;
          v28 = v11 + 1;
        }

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v4);
  }

  memset(v22, 0, 24);
  v22[3] = default_resource;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__init_with_size[abi:ne180100]<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution*,vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution*>(v22, v27, v28, v28 - v27);
  v19 = *(_QWORD *)(v20 + 56);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, v22);
  v31[0] = (CFTypeRef **)v22;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100](v31);
  v31[0] = &v27;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100](v31);

}

void sub_1B62CBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFTypeRef **a32)
{
  a32 = (CFTypeRef **)&a23;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100](&a32);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
    *v2 = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  for (i = a1[2]; i != v3; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 8;
    std::pmr::polymorphic_allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>::destroy[abi:ne180100]<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>(v4, (CFTypeRef *)(i - 8));
  }
  if (*a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)a1[4] + 24))(*(_QWORD *)a1[4], *a1, a1[3] - *a1, 8);
  return a1;
}

void vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution::~Camera_Capture_Attribution(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void vp::services::System_Status_Impl::~System_Status_Impl(id *this)
{

}

{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::System_Status_Impl::get_media_status_domain(vp::services::System_Status_Impl *this)
{
  return (uint64_t)this + 16;
}

void vp::services::Control_Center_Impl::~Control_Center_Impl(vp::services::Control_Center_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Control_Center_Impl::initialize_listeners_for_bundle_id(vp *a1, const __CFString **a2)
{
  NSObject *v3;
  _BOOL4 v4;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  const char *v11;
  void **v12;
  std::runtime_error *exception;
  void *__p[2];
  char v16;
  void *v17[2];
  unsigned __int8 v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void **v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v17);
    v6 = v18;
    v7 = v17[1];
    vp::get_log(log_context_info);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0)
        v9 = v6;
      else
        v9 = (unint64_t)v7;
      if ((v18 & 0x80u) == 0)
        v10 = v17;
      else
        v10 = (void **)v17[0];
      if (v9)
        v11 = " ";
      else
        v11 = "";
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v16 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v20 = v10;
      v21 = 2080;
      v22 = v11;
      v23 = 2080;
      v24 = v12;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%s%sinitializing listeners for bundle ID \"%s\"", buf, 0x20u);
      if (v16 < 0)
        operator delete(__p[0]);
    }

    if ((char)v18 < 0)
      operator delete(v17[0]);
  }
  return AVAUVoiceIOInitializeListenersForBundleID();
}

void sub_1B62CC048(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  vp *v22;
  NSObject *v23;
  _BOOL4 v24;
  vp *log_context_info;
  NSObject *v26;

  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0)
      operator delete(__p);
    v22 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CBFE0);
  }
  _Unwind_Resume(a1);
}

vp *vp::services::Control_Center_Impl::get_preferred_chat_flavor_for_bundle_id(vp *a1, const __CFString **a2)
{
  NSObject *v3;
  _BOOL4 v4;
  vp *log_context_info;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void **v12;
  vp *v13;
  vp *v14;
  NSObject *v16;
  _BOOL4 v17;
  vp *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  std::runtime_error *exception;
  void *__p[2];
  char v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v28);
    v6 = v30;
    v7 = v29;
    vp::get_log(log_context_info);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0)
        v9 = v6;
      else
        v9 = v7;
      if ((v30 & 0x80u) == 0)
        v10 = &v28;
      else
        v10 = v28;
      if (v9)
        v11 = " ";
      else
        v11 = "";
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v27 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v32 = v10;
      v33 = 2080;
      v34 = v11;
      v35 = 2080;
      v36 = v12;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%s%sgetting preferred chat flavor for bundle ID \"%s\"", buf, 0x20u);
      if (v27 < 0)
        operator delete(__p[0]);
    }

    if ((char)v30 < 0)
      operator delete(v28);
  }
  v13 = (vp *)AVAUVoiceIOGetPreferredChatFlavorForBundleID();
  v14 = v13;
  if (v13 >= 3)
  {
    vp::get_log(v13);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_FAULT);

    if (v17)
    {
      v18 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v28);
      v19 = v30;
      v20 = v29;
      vp::get_log(v18);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      {
        if ((v19 & 0x80u) == 0)
          v22 = v19;
        else
          v22 = v20;
        if ((v30 & 0x80u) == 0)
          v23 = &v28;
        else
          v23 = v28;
        *(_DWORD *)buf = 136315650;
        v32 = v23;
        if (v22)
          v24 = " ";
        else
          v24 = "";
        v33 = 2080;
        v34 = v24;
        v35 = 1024;
        LODWORD(v36) = (_DWORD)v14;
        _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_FAULT, "%s%shandling unknown chat flavor %u", buf, 0x1Cu);
      }

      if ((char)v30 < 0)
        operator delete(v28);
    }
    return 0;
  }
  return v14;
}

void sub_1B62CC4B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  vp *v22;
  NSObject *v23;
  _BOOL4 v24;
  vp *log_context_info;
  NSObject *v26;

  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0)
      operator delete(__p);
    v22 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CC474);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::get_preferred_chat_flavor_notification(_QWORD *a1@<X8>)
{
  const void *v3;
  CFTypeID v4;

  v3 = (const void *)*MEMORY[0x1E0C89C40];
  if (*MEMORY[0x1E0C89C40]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E0C89C40]), v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

void vp::services::Control_Center_Impl::get_notification_dictionary_bundle_id_key(_QWORD *a1@<X8>)
{
  const void *v3;
  CFTypeID v4;

  v3 = (const void *)*MEMORY[0x1E0C89C38];
  if (*MEMORY[0x1E0C89C38]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E0C89C38]), v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

uint64_t vp::services::Control_Center_Impl::set_active_chat_flavor_for_bundle_id(uint64_t a1, const __CFString **a2, int a3)
{
  char *v4;
  size_t v5;
  size_t v6;
  NSObject *v7;
  _BOOL4 v8;
  vp *log_context_info;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  void **v14;
  const char *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  std::runtime_error *exception;
  void *__dst[2];
  int64_t v24;
  void *__p[2];
  char v26;
  void *v27[2];
  unsigned __int8 v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(a3);
  v6 = v5;
  vp::get_log((vp *)v4);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (!v8)
    return AVAUVoiceIOSetActiveChatFlavorForBundleID();
  log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v27);
  v10 = v28;
  v11 = v27[1];
  vp::get_log(log_context_info);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = (unint64_t)v11;
    if ((v28 & 0x80u) == 0)
      v14 = v27;
    else
      v14 = (void **)v27[0];
    if (v13)
      v15 = " ";
    else
      v15 = "";
    if (!*a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v16 = __p;
    applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
    if (v26 < 0)
      v16 = (void **)__p[0];
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v6 >= 0x17)
    {
      v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v18 = v6 | 7;
      v19 = v18 + 1;
      v17 = (void **)operator new(v18 + 1);
      __dst[1] = (void *)v6;
      v24 = v19 | 0x8000000000000000;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v24) = v6;
      v17 = __dst;
      if (!v6)
        goto LABEL_23;
    }
    memmove(v17, v4, v6);
LABEL_23:
    *((_BYTE *)v17 + v6) = 0;
    v20 = __dst;
    if (v24 < 0)
      v20 = (void **)__dst[0];
    *(_DWORD *)buf = 136315906;
    v30 = v14;
    v31 = 2080;
    v32 = v15;
    v33 = 2080;
    v34 = v16;
    v35 = 2080;
    v36 = v20;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s%ssetting active chat flavor for bundle ID \"%s\" to \"%s\"", buf, 0x2Au);
    if (SHIBYTE(v24) < 0)
      operator delete(__dst[0]);
    if (v26 < 0)
      operator delete(__p[0]);
  }

  if ((char)v28 < 0)
    operator delete(v27[0]);
  return AVAUVoiceIOSetActiveChatFlavorForBundleID();
}

void sub_1B62CC9D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  vp *v24;
  NSObject *v25;
  _BOOL4 v26;
  vp *log_context_info;
  NSObject *v28;

  if (a2)
  {
    __cxa_free_exception(v22);

    if (a21 < 0)
      operator delete(__p);
    v24 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v24);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);

    if (v26)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a10);

      if (a21 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CC95CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::remove_active_chat_flavor_for_bundle_id(vp *a1, const __CFString **a2)
{
  NSObject *v3;
  _BOOL4 v4;
  vp *log_context_info;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  void **v10;
  const char *v11;
  void **v12;
  std::runtime_error *exception;
  void *__p[2];
  char v16;
  void *v17[2];
  unsigned __int8 v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void **v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v17);
    v6 = v18;
    v7 = v17[1];
    vp::get_log(log_context_info);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0)
        v9 = v6;
      else
        v9 = (unint64_t)v7;
      if ((v18 & 0x80u) == 0)
        v10 = v17;
      else
        v10 = (void **)v17[0];
      if (v9)
        v11 = " ";
      else
        v11 = "";
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v16 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v20 = v10;
      v21 = 2080;
      v22 = v11;
      v23 = 2080;
      v24 = v12;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%s%sremoving active chat flavor for bundle ID \"%s\"", buf, 0x20u);
      if (v16 < 0)
        operator delete(__p[0]);
    }

    if ((char)v18 < 0)
      operator delete(v17[0]);
  }
  return AVAUVoiceIORemoveActiveChatFlavorForBundleID();
}

void sub_1B62CCD5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  vp *v22;
  NSObject *v23;
  _BOOL4 v24;
  vp *log_context_info;
  NSObject *v26;

  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0)
      operator delete(__p);
    v22 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CCCF4);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::set_voice_processing_bypassed_for_bundle_id(vp *a1, const __CFString **a2, int a3)
{
  NSObject *v5;
  _BOOL4 v6;
  vp *log_context_info;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  unint64_t v11;
  void **v12;
  const char *v13;
  int v14;
  void **v15;
  void **v16;
  std::string *v17;
  std::runtime_error *exception;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  unsigned __int8 v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  std::string *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);

  if (v6)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v23);
    v8 = v24;
    v9 = v23[1];
    vp::get_log(log_context_info);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if ((v8 & 0x80u) == 0)
        v11 = v8;
      else
        v11 = (unint64_t)v9;
      if ((v24 & 0x80u) == 0)
        v12 = v23;
      else
        v12 = (void **)v23[0];
      if (v11)
        v13 = " ";
      else
        v13 = "";
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      v14 = v22;
      v15 = (void **)__p[0];
      std::to_string(&v20, a3);
      v16 = __p;
      if (v14 < 0)
        v16 = v15;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v20;
      else
        v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v26 = v12;
      v27 = 2080;
      v28 = v13;
      v29 = 2080;
      v30 = v16;
      v31 = 2080;
      v32 = v17;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_INFO, "%s%ssetting bypass for bundle ID \"%s\" to %s", buf, 0x2Au);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v22 < 0)
        operator delete(__p[0]);
    }

    if ((char)v24 < 0)
      operator delete(v23[0]);
  }
  return AVAUVoiceIOSetVoiceProcessingBypassedForBundleID();
}

void sub_1B62CD110(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  vp *v24;
  NSObject *v25;
  _BOOL4 v26;
  vp *log_context_info;
  NSObject *v28;

  if (a2)
  {
    __cxa_free_exception(v22);

    if (a21 < 0)
      operator delete(__p);
    v24 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v24);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);

    if (v26)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a10);

      if (a21 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CD0A0);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::set_hidden_chat_flavors_for_bundle_id(vp *a1, const __CFString **a2, uint64_t a3, unint64_t a4)
{
  NSObject *v7;
  _BOOL4 v8;
  std::string *v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  std::string::size_type v13;
  NSObject *v14;
  BOOL v15;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  void **v21;
  const char *v22;
  void **v23;
  std::string *v24;
  std::runtime_error *exception;
  void *__p[2];
  char v27;
  void *v28[2];
  unsigned __int8 v29;
  std::string v30;
  _BYTE buf[12];
  __int16 v32;
  const char *v33;
  __int16 v34;
  void **v35;
  __int16 v36;
  std::string *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (v8)
  {
    memset(&v30, 0, sizeof(v30));
    std::string::reserve(&v30, 0x80uLL);
    if (a4)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        if (v11 != 1)
          std::string::append(&v30, ", ", 2uLL);
        std::string::append(&v30, "\"", 1uLL);
        v12 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(*(_DWORD *)(a3 + 4 * v10));
        std::string::append(&v30, v12, v13);
        v9 = std::string::append(&v30, "\"", 1uLL);
        v10 = v11++;
      }
      while (v10 < a4);
    }
    vp::get_log((vp *)v9);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);

    if (v15)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v28);
      v17 = v29;
      v18 = v28[1];
      vp::get_log(log_context_info);
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if ((v17 & 0x80u) == 0)
          v20 = v17;
        else
          v20 = (unint64_t)v18;
        if ((v29 & 0x80u) == 0)
          v21 = v28;
        else
          v21 = (void **)v28[0];
        if (v20)
          v22 = " ";
        else
          v22 = "";
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
        if (v27 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        v24 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v21;
        v32 = 2080;
        v33 = v22;
        v34 = 2080;
        v35 = v23;
        v36 = 2080;
        v37 = v24;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s%ssetting hidden chat flavors for bundle ID \"%s\" to [%s]", buf, 0x2Au);
        if (v27 < 0)
          operator delete(__p[0]);
      }

      if ((char)v29 < 0)
        operator delete(v28[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  vp::services::Control_Center_Impl::convert_chat_flavors((applesauce::CF::ArrayRef *)buf, a3, a4);
  AVAUVoiceIOSetHiddenChatFlavorsForBundleID();
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
}

void sub_1B62CD5A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  vp *v27;
  NSObject *v28;
  _BOOL4 v29;
  vp *log_context_info;
  NSObject *v31;

  if (a2)
  {
    __cxa_free_exception(v24);

    if (a18 < 0)
      operator delete(__p);
    if (a24 < 0)
      operator delete(a19);
    v27 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v27);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);

    if (v29)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &a19);
      vp::get_log(log_context_info);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a10);

      if (a24 < 0)
        operator delete(a19);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CD53CLL);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::set_supported_chat_flavors_for_bundle_id(vp *a1, const __CFString **a2, uint64_t a3, unint64_t a4)
{
  NSObject *v7;
  _BOOL4 v8;
  std::string *v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  std::string::size_type v13;
  NSObject *v14;
  BOOL v15;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  void **v21;
  const char *v22;
  void **v23;
  std::string *v24;
  std::runtime_error *exception;
  void *__p[2];
  char v27;
  void *v28[2];
  unsigned __int8 v29;
  std::string v30;
  _BYTE buf[12];
  __int16 v32;
  const char *v33;
  __int16 v34;
  void **v35;
  __int16 v36;
  std::string *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (v8)
  {
    memset(&v30, 0, sizeof(v30));
    std::string::reserve(&v30, 0x80uLL);
    if (a4)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        if (v11 != 1)
          std::string::append(&v30, ", ", 2uLL);
        std::string::append(&v30, "\"", 1uLL);
        v12 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(*(_DWORD *)(a3 + 4 * v10));
        std::string::append(&v30, v12, v13);
        v9 = std::string::append(&v30, "\"", 1uLL);
        v10 = v11++;
      }
      while (v10 < a4);
    }
    vp::get_log((vp *)v9);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);

    if (v15)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v28);
      v17 = v29;
      v18 = v28[1];
      vp::get_log(log_context_info);
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if ((v17 & 0x80u) == 0)
          v20 = v17;
        else
          v20 = (unint64_t)v18;
        if ((v29 & 0x80u) == 0)
          v21 = v28;
        else
          v21 = (void **)v28[0];
        if (v20)
          v22 = " ";
        else
          v22 = "";
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
        if (v27 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        v24 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v21;
        v32 = 2080;
        v33 = v22;
        v34 = 2080;
        v35 = v23;
        v36 = 2080;
        v37 = v24;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s%ssetting supported chat flavors for bundle ID \"%s\" to [%s]", buf, 0x2Au);
        if (v27 < 0)
          operator delete(__p[0]);
      }

      if ((char)v29 < 0)
        operator delete(v28[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  vp::services::Control_Center_Impl::convert_chat_flavors((applesauce::CF::ArrayRef *)buf, a3, a4);
  AVAUVoiceIOSetSupportedChatFlavorsForBundleID();
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
}

void sub_1B62CDA60(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  vp *v27;
  NSObject *v28;
  _BOOL4 v29;
  vp *log_context_info;
  NSObject *v31;

  if (a2)
  {
    __cxa_free_exception(v24);

    if (a18 < 0)
      operator delete(__p);
    if (a24 < 0)
      operator delete(a19);
    v27 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v27);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);

    if (v29)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &a19);
      vp::get_log(log_context_info);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a10);

      if (a24 < 0)
        operator delete(a19);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CD9F4);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::get_automatic_mic_mode_is_enabled_for_bundle_id(vp *a1, const __CFString **a2)
{
  NSObject *v3;
  _BOOL4 v4;
  vp::services *v5;
  vp *log_context_info;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void **v13;
  vp *isAutomaticMicModeFeatureFlagOn;
  const __CFString *v15;
  void *v16;
  void *v17;
  vp *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  vp *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  void **v29;
  uint64_t result;
  std::runtime_error *exception;
  std::runtime_error *v32;
  void *__p[2];
  char v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _BYTE buf[24];
  void *v39;
  __int16 v40;
  void **v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  vp::get_log(a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v35);
    v7 = v37;
    v8 = v36;
    vp::get_log(log_context_info);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = v8;
      if ((v37 & 0x80u) == 0)
        v11 = &v35;
      else
        v11 = v35;
      if (v10)
        v12 = " ";
      else
        v12 = "";
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v34 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2080;
      v39 = v13;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, "%s%sgetting automatic mic mode is enabled for bundle ID \"%s\"", buf, 0x20u);
      if (v34 < 0)
        operator delete(__p[0]);
    }

    if ((char)v37 < 0)
      operator delete(v35);
  }
  isAutomaticMicModeFeatureFlagOn = (vp *)vp::services::isAutomaticMicModeFeatureFlagOn(v5);
  if ((_DWORD)isAutomaticMicModeFeatureFlagOn)
  {
    v15 = *a2;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr;
    v39 = getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr;
    if (!getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr)
    {
      v17 = (void *)AVFoundationLibrary();
      v16 = dlsym(v17, "AVAUVoiceIOIsAutoChatFlavorEnabledForBundleID");
      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v16;
      getAVAUVoiceIOIsAutoChatFlavorEnabledForBundleIDSymbolLoc(void)::ptr = v16;
    }
    _Block_object_dispose(buf, 8);
    if (!v16)
    {
      dlerror();
      result = abort_report_np();
      __break(1u);
      return result;
    }
    isAutomaticMicModeFeatureFlagOn = (vp *)((uint64_t (*)(const __CFString *))v16)(v15);
    v18 = isAutomaticMicModeFeatureFlagOn;
  }
  else
  {
    v18 = 0;
  }
  vp::get_log(isAutomaticMicModeFeatureFlagOn);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);

  if (v20)
  {
    v21 = &v35;
    v22 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v35);
    v23 = v37;
    v24 = v36;
    vp::get_log(v22);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if ((v23 & 0x80u) == 0)
        v26 = v23;
      else
        v26 = v24;
      if ((v37 & 0x80u) != 0)
        v21 = v35;
      if (v26)
        v27 = " ";
      else
        v27 = "";
      if ((_DWORD)v18)
        v28 = "enabled";
      else
        v28 = "disabled";
      if (!*a2)
      {
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v34 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 2080;
      v39 = (void *)v28;
      v40 = 2080;
      v41 = v29;
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_INFO, "%s%sautomatic mic mode is %s for bundle ID \"%s\"", buf, 0x2Au);
      if (v34 < 0)
        operator delete(__p[0]);
    }

    if ((char)v37 < 0)
      operator delete(v35);
  }
  return (uint64_t)v18;
}

void sub_1B62CE008(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  vp *v24;
  NSObject *v25;
  _BOOL4 v26;
  vp *log_context_info;
  NSObject *v28;

  if (a2)
  {
    __cxa_free_exception(v21);

    if (a21 < 0)
      operator delete(__p);
    v24 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v24);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);

    if (v26)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      vp::get_log(log_context_info);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a11);

      if (a21 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CDF4CLL);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::get_automatic_mic_mode_is_enabled_notification(vp::services::Control_Center_Impl *this@<X0>, _QWORD *a2@<X8>)
{
  const void **v3;
  void *v4;
  const void *v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (vp::services::isAutomaticMicModeFeatureFlagOn(this))
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v3 = (const void **)getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr;
    v10 = getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr;
    if (!getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr)
    {
      v4 = (void *)AVFoundationLibrary();
      v3 = (const void **)dlsym(v4, "AVAUVoiceIOAutoChatFlavorEnabledDidChangeNotification");
      v8[3] = (uint64_t)v3;
      getAVAUVoiceIOAutoChatFlavorEnabledDidChangeNotificationSymbolLoc(void)::ptr = (uint64_t)v3;
    }
    _Block_object_dispose(&v7, 8);
    if (!v3)
    {
      dlerror();
      abort_report_np();
      __break(1u);
      return;
    }
    v5 = *v3;
    if (v5)
    {
      CFRetain(v5);
      v6 = CFGetTypeID(v5);
      if (v6 != CFStringGetTypeID())
      {
        *a2 = 0;
        CFRelease(v5);
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void sub_1B62CE2E0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  __clang_call_terminate(a1);
}

uint64_t vp::services::isAutomaticMicModeFeatureFlagOn(vp::services *this)
{
  return _os_feature_enabled_impl();
}

uint64_t AVFoundationLibrary()
{
  uint64_t v0;
  void *v2;

  if (AVFoundationLibraryCore(char **)::frameworkLibrary)
    return AVFoundationLibraryCore(char **)::frameworkLibrary;
  AVFoundationLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = AVFoundationLibraryCore(char **)::frameworkLibrary;
  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

char *vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(int a1)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int v4;

  if (a1)
  {
    v1 = vp::detail::reflect_value_name<(vp::services::Control_Center::Chat_Flavor)1,128ul>(a1);
    if (!v2)
    {
      v3 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    v1 = "vp::services::Control_Center::Chat_Flavor::Standard]";
    v2 = 51;
  }
  v3 = v2;
  while (v3)
  {
    v4 = v1[--v3];
    if (v4 == 58)
    {
      ++v3;
      break;
    }
  }
LABEL_9:
  if (v2 < v3)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  return &v1[v3];
}

applesauce::CF::ArrayRef *vp::services::Control_Center_Impl::convert_chat_flavors(applesauce::CF::ArrayRef *a1, uint64_t a2, unint64_t capacity)
{
  __CFArray *Mutable;
  unint64_t v7;
  unsigned int v8;
  CFNumberRef v9;
  CFNumberRef v10;
  std::runtime_error *exception;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378]);
  if (capacity)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      valuePtr = *(_DWORD *)(a2 + 4 * v7);
      v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v10 = v9;
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v10);
      v7 = v8++;
    }
    while (v7 < capacity);
  }
  return applesauce::CF::ArrayRef::ArrayRef(a1, Mutable);
}

void sub_1B62CE550(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *vp::detail::reflect_value_name<(vp::services::Control_Center::Chat_Flavor)1,128ul>(int a1)
{
  int v1;
  char *result;

  v1 = a1 - 1;
  result = "vp::services::Control_Center::Chat_Flavor::Wide_Spectrum]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "vp::services::Control_Center::Chat_Flavor::Voice_Isolation]";
      break;
    case 2:
      result = "(vp::services::Control_Center::Chat_Flavor)3]";
      break;
    case 3:
      result = "(vp::services::Control_Center::Chat_Flavor)4]";
      break;
    case 4:
      result = "(vp::services::Control_Center::Chat_Flavor)5]";
      break;
    case 5:
      result = "(vp::services::Control_Center::Chat_Flavor)6]";
      break;
    case 6:
      result = "(vp::services::Control_Center::Chat_Flavor)7]";
      break;
    case 7:
      result = "(vp::services::Control_Center::Chat_Flavor)8]";
      break;
    case 8:
      result = "(vp::services::Control_Center::Chat_Flavor)9]";
      break;
    case 9:
      result = "(vp::services::Control_Center::Chat_Flavor)10]";
      break;
    case 10:
      result = "(vp::services::Control_Center::Chat_Flavor)11]";
      break;
    case 11:
      result = "(vp::services::Control_Center::Chat_Flavor)12]";
      break;
    case 12:
      result = "(vp::services::Control_Center::Chat_Flavor)13]";
      break;
    case 13:
      result = "(vp::services::Control_Center::Chat_Flavor)14]";
      break;
    case 14:
      result = "(vp::services::Control_Center::Chat_Flavor)15]";
      break;
    case 15:
      result = "(vp::services::Control_Center::Chat_Flavor)16]";
      break;
    case 16:
      result = "(vp::services::Control_Center::Chat_Flavor)17]";
      break;
    case 17:
      result = "(vp::services::Control_Center::Chat_Flavor)18]";
      break;
    case 18:
      result = "(vp::services::Control_Center::Chat_Flavor)19]";
      break;
    case 19:
      result = "(vp::services::Control_Center::Chat_Flavor)20]";
      break;
    case 20:
      result = "(vp::services::Control_Center::Chat_Flavor)21]";
      break;
    case 21:
      result = "(vp::services::Control_Center::Chat_Flavor)22]";
      break;
    case 22:
      result = "(vp::services::Control_Center::Chat_Flavor)23]";
      break;
    case 23:
      result = "(vp::services::Control_Center::Chat_Flavor)24]";
      break;
    case 24:
      result = "(vp::services::Control_Center::Chat_Flavor)25]";
      break;
    case 25:
      result = "(vp::services::Control_Center::Chat_Flavor)26]";
      break;
    case 26:
      result = "(vp::services::Control_Center::Chat_Flavor)27]";
      break;
    case 27:
      result = "(vp::services::Control_Center::Chat_Flavor)28]";
      break;
    case 28:
      result = "(vp::services::Control_Center::Chat_Flavor)29]";
      break;
    case 29:
      result = "(vp::services::Control_Center::Chat_Flavor)30]";
      break;
    case 30:
      result = "(vp::services::Control_Center::Chat_Flavor)31]";
      break;
    case 31:
      result = "(vp::services::Control_Center::Chat_Flavor)32]";
      break;
    case 32:
      result = "(vp::services::Control_Center::Chat_Flavor)33]";
      break;
    case 33:
      result = "(vp::services::Control_Center::Chat_Flavor)34]";
      break;
    case 34:
      result = "(vp::services::Control_Center::Chat_Flavor)35]";
      break;
    case 35:
      result = "(vp::services::Control_Center::Chat_Flavor)36]";
      break;
    case 36:
      result = "(vp::services::Control_Center::Chat_Flavor)37]";
      break;
    case 37:
      result = "(vp::services::Control_Center::Chat_Flavor)38]";
      break;
    case 38:
      result = "(vp::services::Control_Center::Chat_Flavor)39]";
      break;
    case 39:
      result = "(vp::services::Control_Center::Chat_Flavor)40]";
      break;
    case 40:
      result = "(vp::services::Control_Center::Chat_Flavor)41]";
      break;
    case 41:
      result = "(vp::services::Control_Center::Chat_Flavor)42]";
      break;
    case 42:
      result = "(vp::services::Control_Center::Chat_Flavor)43]";
      break;
    case 43:
      result = "(vp::services::Control_Center::Chat_Flavor)44]";
      break;
    case 44:
      result = "(vp::services::Control_Center::Chat_Flavor)45]";
      break;
    case 45:
      result = "(vp::services::Control_Center::Chat_Flavor)46]";
      break;
    case 46:
      result = "(vp::services::Control_Center::Chat_Flavor)47]";
      break;
    case 47:
      result = "(vp::services::Control_Center::Chat_Flavor)48]";
      break;
    case 48:
      result = "(vp::services::Control_Center::Chat_Flavor)49]";
      break;
    case 49:
      result = "(vp::services::Control_Center::Chat_Flavor)50]";
      break;
    case 50:
      result = "(vp::services::Control_Center::Chat_Flavor)51]";
      break;
    case 51:
      result = "(vp::services::Control_Center::Chat_Flavor)52]";
      break;
    case 52:
      result = "(vp::services::Control_Center::Chat_Flavor)53]";
      break;
    case 53:
      result = "(vp::services::Control_Center::Chat_Flavor)54]";
      break;
    case 54:
      result = "(vp::services::Control_Center::Chat_Flavor)55]";
      break;
    case 55:
      result = "(vp::services::Control_Center::Chat_Flavor)56]";
      break;
    case 56:
      result = "(vp::services::Control_Center::Chat_Flavor)57]";
      break;
    case 57:
      result = "(vp::services::Control_Center::Chat_Flavor)58]";
      break;
    case 58:
      result = "(vp::services::Control_Center::Chat_Flavor)59]";
      break;
    case 59:
      result = "(vp::services::Control_Center::Chat_Flavor)60]";
      break;
    case 60:
      result = "(vp::services::Control_Center::Chat_Flavor)61]";
      break;
    case 61:
      result = "(vp::services::Control_Center::Chat_Flavor)62]";
      break;
    case 62:
      result = "(vp::services::Control_Center::Chat_Flavor)63]";
      break;
    case 63:
      result = "(vp::services::Control_Center::Chat_Flavor)64]";
      break;
    case 64:
      result = "(vp::services::Control_Center::Chat_Flavor)65]";
      break;
    case 65:
      result = "(vp::services::Control_Center::Chat_Flavor)66]";
      break;
    case 66:
      result = "(vp::services::Control_Center::Chat_Flavor)67]";
      break;
    case 67:
      result = "(vp::services::Control_Center::Chat_Flavor)68]";
      break;
    case 68:
      result = "(vp::services::Control_Center::Chat_Flavor)69]";
      break;
    case 69:
      result = "(vp::services::Control_Center::Chat_Flavor)70]";
      break;
    case 70:
      result = "(vp::services::Control_Center::Chat_Flavor)71]";
      break;
    case 71:
      result = "(vp::services::Control_Center::Chat_Flavor)72]";
      break;
    case 72:
      result = "(vp::services::Control_Center::Chat_Flavor)73]";
      break;
    case 73:
      result = "(vp::services::Control_Center::Chat_Flavor)74]";
      break;
    case 74:
      result = "(vp::services::Control_Center::Chat_Flavor)75]";
      break;
    case 75:
      result = "(vp::services::Control_Center::Chat_Flavor)76]";
      break;
    case 76:
      result = "(vp::services::Control_Center::Chat_Flavor)77]";
      break;
    case 77:
      result = "(vp::services::Control_Center::Chat_Flavor)78]";
      break;
    case 78:
      result = "(vp::services::Control_Center::Chat_Flavor)79]";
      break;
    case 79:
      result = "(vp::services::Control_Center::Chat_Flavor)80]";
      break;
    case 80:
      result = "(vp::services::Control_Center::Chat_Flavor)81]";
      break;
    case 81:
      result = "(vp::services::Control_Center::Chat_Flavor)82]";
      break;
    case 82:
      result = "(vp::services::Control_Center::Chat_Flavor)83]";
      break;
    case 83:
      result = "(vp::services::Control_Center::Chat_Flavor)84]";
      break;
    case 84:
      result = "(vp::services::Control_Center::Chat_Flavor)85]";
      break;
    case 85:
      result = "(vp::services::Control_Center::Chat_Flavor)86]";
      break;
    case 86:
      result = "(vp::services::Control_Center::Chat_Flavor)87]";
      break;
    case 87:
      result = "(vp::services::Control_Center::Chat_Flavor)88]";
      break;
    case 88:
      result = "(vp::services::Control_Center::Chat_Flavor)89]";
      break;
    case 89:
      result = "(vp::services::Control_Center::Chat_Flavor)90]";
      break;
    case 90:
      result = "(vp::services::Control_Center::Chat_Flavor)91]";
      break;
    case 91:
      result = "(vp::services::Control_Center::Chat_Flavor)92]";
      break;
    case 92:
      result = "(vp::services::Control_Center::Chat_Flavor)93]";
      break;
    case 93:
      result = "(vp::services::Control_Center::Chat_Flavor)94]";
      break;
    case 94:
      result = "(vp::services::Control_Center::Chat_Flavor)95]";
      break;
    case 95:
      result = "(vp::services::Control_Center::Chat_Flavor)96]";
      break;
    case 96:
      result = "(vp::services::Control_Center::Chat_Flavor)97]";
      break;
    case 97:
      result = "(vp::services::Control_Center::Chat_Flavor)98]";
      break;
    case 98:
      result = "(vp::services::Control_Center::Chat_Flavor)99]";
      break;
    case 99:
      result = "(vp::services::Control_Center::Chat_Flavor)100]";
      break;
    case 100:
      result = "(vp::services::Control_Center::Chat_Flavor)101]";
      break;
    case 101:
      result = "(vp::services::Control_Center::Chat_Flavor)102]";
      break;
    case 102:
      result = "(vp::services::Control_Center::Chat_Flavor)103]";
      break;
    case 103:
      result = "(vp::services::Control_Center::Chat_Flavor)104]";
      break;
    case 104:
      result = "(vp::services::Control_Center::Chat_Flavor)105]";
      break;
    case 105:
      result = "(vp::services::Control_Center::Chat_Flavor)106]";
      break;
    case 106:
      result = "(vp::services::Control_Center::Chat_Flavor)107]";
      break;
    case 107:
      result = "(vp::services::Control_Center::Chat_Flavor)108]";
      break;
    case 108:
      result = "(vp::services::Control_Center::Chat_Flavor)109]";
      break;
    case 109:
      result = "(vp::services::Control_Center::Chat_Flavor)110]";
      break;
    case 110:
      result = "(vp::services::Control_Center::Chat_Flavor)111]";
      break;
    case 111:
      result = "(vp::services::Control_Center::Chat_Flavor)112]";
      break;
    case 112:
      result = "(vp::services::Control_Center::Chat_Flavor)113]";
      break;
    case 113:
      result = "(vp::services::Control_Center::Chat_Flavor)114]";
      break;
    case 114:
      result = "(vp::services::Control_Center::Chat_Flavor)115]";
      break;
    case 115:
      result = "(vp::services::Control_Center::Chat_Flavor)116]";
      break;
    case 116:
      result = "(vp::services::Control_Center::Chat_Flavor)117]";
      break;
    case 117:
      result = "(vp::services::Control_Center::Chat_Flavor)118]";
      break;
    case 118:
      result = "(vp::services::Control_Center::Chat_Flavor)119]";
      break;
    case 119:
      result = "(vp::services::Control_Center::Chat_Flavor)120]";
      break;
    case 120:
      result = "(vp::services::Control_Center::Chat_Flavor)121]";
      break;
    case 121:
      result = "(vp::services::Control_Center::Chat_Flavor)122]";
      break;
    case 122:
      result = "(vp::services::Control_Center::Chat_Flavor)123]";
      break;
    case 123:
      result = "(vp::services::Control_Center::Chat_Flavor)124]";
      break;
    case 124:
      result = "(vp::services::Control_Center::Chat_Flavor)125]";
      break;
    case 125:
      result = "(vp::services::Control_Center::Chat_Flavor)126]";
      break;
    case 126:
      result = "(vp::services::Control_Center::Chat_Flavor)127]";
      break;
    default:
      if ("vp::services::Control_Center::Chat_Flavor::Wide_Spectrum]" == 128)
        result = "(vp::services::Control_Center::Chat_Flavor)128]";
      else
        result = "?";
      break;
  }
  return result;
}

void vp::services::Backboard_Impl::~Backboard_Impl(vp::services::Backboard_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

const char *vp::services::Backboard_Impl::get_proximity_changed_darwin_notification_key(vp::services::Backboard_Impl *this)
{
  return "com.apple.backboard.proximity.changed";
}

void vp::services::Audio_Statistics_Impl::~Audio_Statistics_Impl(vp::services::Audio_Statistics_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void vp::services::Audio_Statistics_Impl::report_event(vp::services::Audio_Statistics_Impl *this, const vp::services::Audio_Statistics::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *(unsigned int *)a2;
  v4 = *((unsigned __int16 *)a2 + 2);
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_156);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(v2, v3, v4);
}

void sub_1B62CECB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Statistics_Impl]", 35, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CEC68);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Statistics_Impl::report_event(vp::services::Audio_Statistics_Impl *this, const vp::services::Audio_Statistics::Event *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)a2 + 1);
  v5 = *(unsigned int *)a2;
  v6 = *((unsigned __int16 *)a2 + 2);
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_156);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(a3, v4, v5, v6);
}

void sub_1B62CEECC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Statistics_Impl]", 35, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CEE80);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Statistics_Impl::get_audio_service_type(vp::services::Audio_Statistics_Impl *this, uint64_t a2)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_156);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    return AudioStatisticsLibraryLoader(void)::libSym(a2);
  else
    return 0xFFFFLL;
}

void sub_1B62CF238(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B62CF23CLL);
  __clang_call_terminate(a1);
}

void vp::services::Audio_Statistics_Impl::copy_configuration(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;

  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_156);
  if (AudioStatisticsLibraryLoader(void)::libSym)
  {
    v5 = (const void *)AudioStatisticsLibraryLoader(void)::libSym(a1);
    v6 = v5;
    if (v5)
    {
      v7 = CFGetTypeID(v5);
      if (v7 != CFDictionaryGetTypeID())
      {
        *a2 = 0;
        CFRelease(v6);
        return;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void sub_1B62CF32C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void vp::services::Audio_Issue_Detector_Impl::~Audio_Issue_Detector_Impl(vp::services::Audio_Issue_Detector_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void vp::services::Audio_Issue_Detector_Impl::create_client(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *__p;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E69D0118;
  v3[1] = 0;
  __p = 0;
  v7 = 0;
  v8 = 0;
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    v4 = AudioIssueDetectorLibraryLoader(void)::libSym(3, &__p);
    v5 = __p;
    v3[1] = v4;
    if (v5)
    {
      v7 = v5;
      operator delete(v5);
    }
  }
  else
  {
    v3[1] = 0;
  }
  *a1 = v3;
}

void sub_1B62CF740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,__int16 a27,uint64_t a28)
{
  vp *v29;
  NSObject *v30;
  _BOOL4 v31;
  vp *log_context_info;
  NSObject *v33;

  if (a2)
  {
    if (__p)
    {
      a24 = (uint64_t)__p;
      operator delete(__p);
    }
    v29 = (vp *)__cxa_begin_catch(exception_object);
    vp::get_log(v29);
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);

    if (v31)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &a17);
      vp::get_log(log_context_info);
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a22 < 0)
        operator delete(a17);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CF6ECLL);
  }
  _Unwind_Resume(exception_object);
}

void vp::services::Audio_Issue_Detector_Impl::set_uplink_mute(vp::services::Audio_Issue_Detector_Impl *this, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
}

void sub_1B62CF96C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CF920);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::set_downlink_volume(vp::services::Audio_Issue_Detector_Impl *this, float a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
}

void sub_1B62CFB74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CFB24);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::set_downlink_route_specific_gain_adjustment(vp::services::Audio_Issue_Detector_Impl *this, float a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
}

void sub_1B62CFD7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62CFD2CLL);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::Client::~Client(vp::services::Audio_Issue_Detector_Impl::Client *this)
{
  vp::services::Audio_Issue_Detector_Impl::Client::~Client(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::set_node_format(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  vp *v8;
  uint64_t v9;
  int v10;
  NSObject *v12;
  _BOOL4 v13;
  vp *log_context_info;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  void **v19;
  const char *v20;
  void *v21[2];
  unsigned __int8 v22;
  _BYTE __p[12];
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, off_1E69D0540[a2]);
  if ((a2 - 1) > 2)
    v9 = 51;
  else
    v9 = *(unsigned int *)&aD_5[4 * (a2 - 1)];
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    v8 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v7, __p, v9, a3, a4);
    v10 = (int)v8;
  }
  else
  {
    v10 = -1;
  }
  if (SHIBYTE(v26) < 0)
    operator delete(*(void **)__p);
  if (!v10)
    return 1;
  vp::get_log(v8);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

  if (v13)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, v21);
    v15 = v22;
    v16 = v21[1];
    vp::get_log(log_context_info);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if ((v15 & 0x80u) == 0)
        v18 = v15;
      else
        v18 = (unint64_t)v16;
      if ((v22 & 0x80u) == 0)
        v19 = v21;
      else
        v19 = (void **)v21[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v19;
      if (v18)
        v20 = " ";
      else
        v20 = "";
      v24 = 2080;
      v25 = v20;
      v26 = 1024;
      v27 = v10;
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to set node format due to error - %u", __p, 0x1Cu);
    }

    if ((char)v22 < 0)
      operator delete(v21[0]);
  }
  return 0;
}

void sub_1B62D02C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,int a24,__int16 a25,uint64_t a26,char a27,char a28,uint64_t a29)
{
  vp *v30;
  NSObject *v31;
  _BOOL4 v32;
  vp *log_context_info;
  NSObject *v34;

  if (a2)
  {
    if (SHIBYTE(a26) < 0)
      operator delete(__p);
    v30 = (vp *)__cxa_begin_catch(exception_object);
    vp::get_log(v30);
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);

    if (v32)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &a17);
      vp::get_log(log_context_info);
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a22 < 0)
        operator delete(a17);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D02B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::set_reporter_ids(vp *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v6;
  _BOOL4 v7;
  vp *log_context_info;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  unint64_t v12;
  void **v13;
  const char *v14;
  void *__p[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v3, a2);
    v4 = (int)a1;
    if (!(_DWORD)a1)
      return 1;
  }
  else
  {
    v4 = -1;
  }
  vp::get_log(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    v9 = v16;
    v10 = __p[1];
    vp::get_log(log_context_info);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0)
        v12 = v9;
      else
        v12 = (unint64_t)v10;
      if ((v16 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v18 = v13;
      if (v12)
        v14 = " ";
      else
        v14 = "";
      v19 = 2080;
      v20 = v14;
      v21 = 1024;
      v22 = v4;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set reporter IDs due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D05FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D05ACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::initialize(vp::services::Audio_Issue_Detector_Impl::Client *this)
{
  uint64_t v1;
  int v2;
  NSObject *v4;
  _BOOL4 v5;
  vp *log_context_info;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  void **v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    this = (vp::services::Audio_Issue_Detector_Impl::Client *)AudioIssueDetectorLibraryLoader(void)::libSym(v1);
    v2 = (int)this;
    if (!(_DWORD)this)
      return 1;
  }
  else
  {
    v2 = -1;
  }
  vp::get_log(this);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    v7 = v14;
    v8 = __p[1];
    vp::get_log(log_context_info);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = (unint64_t)v8;
      if ((v14 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = v11;
      if (v10)
        v12 = " ";
      else
        v12 = "";
      v17 = 2080;
      v18 = v12;
      v19 = 1024;
      v20 = v2;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to initialize due to error - %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D0900(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D08B0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::analyze(vp *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v14;
  _BOOL4 v15;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  void **v21;
  const char *v22;
  void *__p[2];
  unsigned __int8 v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 2)
    v10 = 51;
  else
    v10 = *(unsigned int *)&aD_5[4 * (a2 - 1)];
  v11 = *((_QWORD *)a1 + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_132);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v11, v10, a3, a4, a5, a6);
    v12 = (int)a1;
    if (!(_DWORD)a1)
      return 1;
  }
  else
  {
    v12 = -1;
  }
  vp::get_log(a1);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

  if (v15)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    v17 = v24;
    v18 = __p[1];
    vp::get_log(log_context_info);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if ((v17 & 0x80u) == 0)
        v20 = v17;
      else
        v20 = (unint64_t)v18;
      if ((v24 & 0x80u) == 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v26 = v21;
      if (v20)
        v22 = " ";
      else
        v22 = "";
      v27 = 2080;
      v28 = v22;
      v29 = 1024;
      v30 = v12;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to analyze buffer due to error - %u", buf, 0x1Cu);
    }

    if ((char)v24 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D0C50(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D0BFCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B62D0E50(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D0E00);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Hardware_Impl::~Audio_Hardware_Impl(vp::services::Audio_Hardware_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Audio_Hardware_Impl::audio_object_has_property(vp::services::Audio_Hardware_Impl *this, AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return AudioObjectHasProperty(inObjectID, inAddress);
}

uint64_t vp::services::Audio_Hardware_Impl::audio_object_get_property_data(vp::services::Audio_Hardware_Impl *this, AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, unsigned int *a6, void *outData)
{
  uint64_t result;
  UInt32 v8;
  unsigned int *v9;

  v8 = *a6;
  v9 = a6;
  result = AudioObjectGetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, &v8, outData);
  *v9 = v8;
  return result;
}

void vp::services::Audio_Data_Analysis_Impl::~Audio_Data_Analysis_Impl(vp::services::Audio_Data_Analysis_Impl *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::create_client@<X0>(uint64_t a1@<X1>, vp **a2@<X8>)
{
  vp *v4;
  caulk::deferred_logger *v5;
  void *v6;
  uint64_t result;

  v4 = (vp *)operator new();
  *(_QWORD *)v4 = &off_1E69D0008;
  *((_QWORD *)v4 + 1) = 561211748;
  vp::get_log(v4);
  v5 = (caulk::deferred_logger *)objc_claimAutoreleasedReturnValue();
  caulk::deferred_logger::create_v(v5, v6);

  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
    result = AudioDataAnalysisManagerLibraryLoader(void)::libSym(3, a1);
  else
    result = 560033897;
  *((_QWORD *)v4 + 1) = result;
  if (result == 560033897 || result == 561211748)
  {
    *a2 = 0;
    vp::services::Audio_Data_Analysis_Impl::Client::~Client(v4);
    JUMPOUT(0x1BCC95CECLL);
  }
  *a2 = v4;
  return result;
}

void sub_1B62D11D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D110CLL);
  }
  _Unwind_Resume(a1);
}

id vp::services::Audio_Data_Analysis_Impl::create_settings_manager@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  id result;

  v3 = (_QWORD *)operator new();
  *v3 = &off_1E69D0078;
  v3[1] = 0;
  result = objc_alloc_init(MEMORY[0x1E0CFEF98]);
  v3[1] = result;
  *a1 = v3;
  return result;
}

void sub_1B62D1390(void *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x81C40803F642BLL);
  __clang_call_terminate(a1);
}

void vp::services::Audio_Data_Analysis_Impl::Settings_Manager::~Settings_Manager(id *this)
{

}

{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Settings_Manager::is_volume_limit_enabled(id *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(this[1], "getPreferenceFor:", *MEMORY[0x1E0CFEF88]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

float vp::services::Audio_Data_Analysis_Impl::Settings_Manager::get_volume_limit_threshold(id *this)
{
  void *v1;
  float v2;
  float v3;

  objc_msgSend(this[1], "getPreferenceFor:", *MEMORY[0x1E0CFEF90]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "floatValue");
  v3 = v2;

  return v3;
}

void vp::services::Audio_Data_Analysis_Impl::Client::~Client(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2 != 560033897 && v2 != 561211748)
  {
    if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
      dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
    if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
      AudioDataAnalysisManagerLibraryLoader(void)::libSym(v2);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  vp::services::Audio_Data_Analysis_Impl::Client::~Client(this);
  JUMPOUT(0x1BCC95CECLL);
}

void sub_1B62D1580(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D1528);
  }
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_6740()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::get_session_id(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::set_reporter_ids(vp *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v6;
  _BOOL4 v7;
  vp *log_context_info;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  unint64_t v12;
  void **v13;
  const char *v14;
  void *__p[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v3, a2);
    v4 = (int)a1;
    if (!(_DWORD)a1)
      return 1;
  }
  else
  {
    v4 = 560033897;
  }
  vp::get_log(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    v9 = v16;
    v10 = __p[1];
    vp::get_log(log_context_info);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0)
        v12 = v9;
      else
        v12 = (unint64_t)v10;
      if ((v16 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v18 = v13;
      if (v12)
        v14 = " ";
      else
        v14 = "";
      v19 = 2080;
      v20 = v14;
      v21 = 1024;
      v22 = v4;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set reporter IDs due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D1BE4(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  vp *v3;
  NSObject *v4;
  va_list va;

  va_start(va, a3);
  if (a2)
  {
    v3 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v3);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      vp::get_log_exception_info((uint64_t)va);

    __cxa_end_catch();
    JUMPOUT(0x1B62D1B94);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::set_application_bundle_id(vp *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v6;
  _BOOL4 v7;
  vp *log_context_info;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  unint64_t v12;
  void **v13;
  const char *v14;
  void *__p[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 1);
  v3 = *a2;
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v2, v3);
    v4 = (int)a1;
    if (!(_DWORD)a1)
      return 1;
  }
  else
  {
    v4 = 560033897;
  }
  vp::get_log(a1);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    v9 = v16;
    v10 = __p[1];
    vp::get_log(log_context_info);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0)
        v12 = v9;
      else
        v12 = (unint64_t)v10;
      if ((v16 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v18 = v13;
      if (v12)
        v14 = " ";
      else
        v14 = "";
      v19 = 2080;
      v20 = v14;
      v21 = 1024;
      v22 = v4;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set application bundle ID due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D1E58(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  vp *v3;
  NSObject *v4;
  va_list va;

  va_start(va, a3);
  if (a2)
  {
    v3 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v3);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      vp::get_log_exception_info((uint64_t)va);

    __cxa_end_catch();
    JUMPOUT(0x1B62D1E08);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::create_pcm_node(uint64_t a1, uint64_t a2, const __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  vp *v11;
  int v12;
  NSObject *v14;
  _BOOL4 v15;
  vp *log_context_info;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  void **v21;
  const char *v22;
  void *v23[2];
  unsigned __int8 v24;
  _BYTE __p[12];
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (vp *)applesauce::CF::convert_to<std::string,0>(*a3, (uint64_t)__p);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    v11 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v10, a2, __p, a4, a5, a6);
    v12 = (int)v11;
  }
  else
  {
    v12 = 560033897;
  }
  if (SHIBYTE(v28) < 0)
    operator delete(*(void **)__p);
  if (!v12)
    return 1;
  vp::get_log(v11);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

  if (v15)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, v23);
    v17 = v24;
    v18 = v23[1];
    vp::get_log(log_context_info);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if ((v17 & 0x80u) == 0)
        v20 = v17;
      else
        v20 = (unint64_t)v18;
      if ((v24 & 0x80u) == 0)
        v21 = v23;
      else
        v21 = (void **)v23[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v21;
      if (v20)
        v22 = " ";
      else
        v22 = "";
      v26 = 2080;
      v27 = v22;
      v28 = 1024;
      v29 = v12;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to create PCM node due to error - %u", __p, 0x1Cu);
    }

    if ((char)v24 < 0)
      operator delete(v23[0]);
  }
  return 0;
}

void sub_1B62D2108(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t buf, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  vp *v21;
  NSObject *v22;

  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    v21 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v21);
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      vp::get_log_exception_info((uint64_t)&a10);

    __cxa_end_catch();
    JUMPOUT(0x1B62D20FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::process(vp::services::Audio_Data_Analysis_Impl::Client *this, uint64_t a2, const AudioBufferList *a3, uint64_t a4, const AudioTimeStamp *a5)
{
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  caulk::concurrent::message *v14;
  _DWORD *v15;

  v10 = *((_QWORD *)this + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    v11 = AudioDataAnalysisManagerLibraryLoader(void)::libSym(v10, a2, a3, a4, a5);
    if (!v11)
      return 1;
  }
  else
  {
    v11 = 560033897;
  }
  v13 = _os_log_pack_size();
  result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 2), v13 + 88, 16);
  if (result)
  {
    v14 = (caulk::concurrent::message *)result;
    v15 = (_DWORD *)_os_log_pack_fill();
    *v15 = 67109120;
    v15[1] = v11;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 2) + 16), v14);
    return 0;
  }
  return result;
}

void sub_1B62D233C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  vp *v3;
  NSObject *v4;
  va_list va;

  va_start(va, a3);
  if (a2)
  {
    v3 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v3);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      vp::get_log_exception_info((uint64_t)va);

    __cxa_end_catch();
    JUMPOUT(0x1B62D22F0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::initialize(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  uint64_t v1;
  int v2;
  NSObject *v4;
  _BOOL4 v5;
  vp *log_context_info;
  unint64_t v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  void **v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_6738);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    this = (vp::services::Audio_Data_Analysis_Impl::Client *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v1);
    v2 = (int)this;
    if (!(_DWORD)this)
      return 1;
  }
  else
  {
    v2 = 560033897;
  }
  vp::get_log(this);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    v7 = v14;
    v8 = __p[1];
    vp::get_log(log_context_info);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = (unint64_t)v8;
      if ((v14 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = v11;
      if (v10)
        v12 = " ";
      else
        v12 = "";
      v17 = 2080;
      v18 = v12;
      v19 = 1024;
      v20 = v2;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to initialize due to error - %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B62D25B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  vp *v19;
  NSObject *v20;
  _BOOL4 v21;
  vp *log_context_info;
  NSObject *v23;

  if (a2)
  {
    v19 = (vp *)__cxa_begin_catch(a1);
    vp::get_log(v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      vp::get_log(log_context_info);
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        vp::get_log_exception_info((uint64_t)&a9);

      if (a19 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B62D2568);
  }
  _Unwind_Resume(a1);
}

std::__shared_weak_count **std::unique_ptr<vp::Service_Provider>::reset[abi:ne180100](std::__shared_weak_count ***a1)
{
  std::__shared_weak_count **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    vp::Service_Provider::~Service_Provider(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void vp::Service_Provider::~Service_Provider(std::__shared_weak_count **this)
{
  NSObject *v2;
  _BOOL4 v3;
  vp *log_context_info;
  unint64_t v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  void **v9;
  const char *v10;
  std::__shared_weak_count *v11;
  uint64_t *p_shared_owners;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p[2];
  unsigned __int8 v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  vp::get_log((vp *)this);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, __p);
    v5 = v16;
    v6 = __p[1];
    vp::get_log(log_context_info);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if ((v5 & 0x80u) == 0)
        v8 = v5;
      else
        v8 = (unint64_t)v6;
      v9 = (void **)__p[0];
      if ((v16 & 0x80u) == 0)
        v9 = __p;
      if (v8)
        v10 = " ";
      else
        v10 = "";
      *(_DWORD *)buf = 136315394;
      v18 = v9;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }

    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
  v11 = this[4];
  if (v11)
  {
    p_shared_owners = &this[3]->__shared_owners_;
    do
    {
      v13 = *p_shared_owners;
      *p_shared_owners = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      p_shared_owners += 2;
      v11 = (std::__shared_weak_count *)((char *)v11 - 1);
    }
    while (v11);
  }
  if (this[5])
    boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(this + 2, this[3]);
  v14 = this[1];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

void std::__shared_ptr_pointer<vp::Service_Provider *,std::shared_ptr<vp::Service_Provider>::__shared_ptr_default_delete<vp::Service_Provider,vp::Service_Provider>,std::allocator<vp::Service_Provider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

std::__shared_weak_count **std::__shared_ptr_pointer<vp::Service_Provider *,std::shared_ptr<vp::Service_Provider>::__shared_ptr_default_delete<vp::Service_Provider,vp::Service_Provider>,std::allocator<vp::Service_Provider>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count **result;

  result = *(std::__shared_weak_count ***)(a1 + 24);
  if (result)
  {
    vp::Service_Provider::~Service_Provider(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::vector<AUFIREngineKernel::FilterData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<AUFIREngineKernel::FilterData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<AUFIREngineKernel::FilterData>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<AUFIREngineKernel::FilterData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 59)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUFIREngineKernel::FilterData>,AUFIREngineKernel::FilterData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 4;
      v5 = v3;
      std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

AUFIREngineKernel::XfadeChannel *AUFIREngineKernel::XfadeChannel::XfadeChannel(AUFIREngineKernel::XfadeChannel *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  _QWORD *v13;
  char *v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  char *v29;
  char v30;

  v4 = a3;
  v7 = a3;
  v8 = a4;
  LODWORD(v29) = 0;
  std::vector<float>::vector(&__p, a4, &v29);
  std::vector<std::vector<float>>::vector(this, v7, (uint64_t)&__p);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  std::vector<std::span<float,18446744073709551615ul>>::vector((_QWORD *)this + 3, v7);
  LODWORD(__p) = 0;
  std::vector<float>::vector((_QWORD *)this + 6, v8, &__p);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  if (v4)
  {
    std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](&__p, v7);
    v9 = (char *)v27;
    bzero(v27, 8 * v7);
    v10 = &v9[8 * v7];
  }
  else
  {
    v10 = 0;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v11 = a2;
  *((_QWORD *)this + 13) = 0;
  v29 = (char *)this + 88;
  v30 = 0;
  if (a2)
  {
    v24 = v4;
    v25 = v7;
    v23 = a2;
    v12 = 3 * a2;
    v13 = operator new(v12 * 8);
    *((_QWORD *)this + 11) = v13;
    *((_QWORD *)this + 12) = v13;
    v22 = &v13[v12];
    *((_QWORD *)this + 13) = &v13[v12];
    v14 = (char *)__p;
    v15 = v10 - (_BYTE *)__p;
    v16 = (v10 - (_BYTE *)__p) >> 3;
    do
    {
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      if (v10 != v14)
      {
        std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](v13, v16);
        v17 = (char *)v13[1];
        memmove(v17, v14, v15);
        v13[1] = &v17[8 * v16];
      }
      v13 += 3;
      v12 -= 3;
    }
    while (v12 * 8);
    v11 = v23;
    *((_QWORD *)this + 12) = v22;
    v7 = v25;
    v4 = v24;
    if (v14)
      goto LABEL_12;
  }
  else
  {
    v14 = (char *)__p;
    if (__p)
LABEL_12:
      operator delete(v14);
  }
  *((_DWORD *)this + 28) = 1065353216;
  LODWORD(v29) = 1065353216;
  std::vector<float>::vector(&__p, v7, &v29);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 15, v11, (uint64_t)&__p);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  *((_BYTE *)this + 144) = 1;
  if (v4)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (_QWORD *)(*((_QWORD *)this + 3) + v18);
      *v20 = *(_QWORD *)(*(_QWORD *)this + v19);
      v20[1] = v8;
      v19 += 24;
      v18 += 16;
    }
    while (24 * v7 != v19);
  }
  return this;
}

void sub_1B62D2D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  _QWORD *v19;
  void *v21;
  void *v22;
  void *v23;

  v21 = __p;
  std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (v21)
    operator delete(v21);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a9);
  v22 = *a10;
  if (*a10)
  {
    v19[7] = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    v19[4] = v23;
    operator delete(v23);
  }
  __p = v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::span<float,18446744073709551615ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DSPSplitComplex>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B62D2E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::vector<std::vector<BOOL>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B62D3088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***AUFIREngineKernel::SetMatrixFIRs(float *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  DSPSplitComplex **v39;
  DSPSplitComplex *i;
  DSPSplitComplex *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  _BOOL8 IsNearlyZero;
  float *j;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  DSPSplitComplex *v60;
  DSPSplitComplex *v61;
  uint64_t v62;
  unint64_t v63;
  DSPSplitComplex *v64;
  uint64_t v65;
  DSPSplitComplex *v66;
  DSPSplitComplex *v67;
  uint64_t v68;
  DSPSplitComplex *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  DSPSplitComplex *v73;
  DSPSplitComplex *v74;
  DSPSplitComplex *v75;
  uint64_t v76;
  DSPSplitComplex *v77;
  MultiRadixRealFFT *v78;
  DSPSplitComplex *v79;
  DSPSplitComplex *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  DSPComplex *v84;
  char *v85;
  DSPSplitComplex *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  int **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  int **v106;
  uint64_t v107;
  int *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  int *v127;
  uint64_t v128;
  void **v129;
  unint64_t v130;
  int *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  int *v138;
  unint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  int *v145;
  unsigned __int8 *v146;
  std::logic_error *exception;
  MultiRadixRealFFT *v149;
  float *v150;
  _QWORD *v152;
  _QWORD *v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  uint64_t v161;
  char *v162;
  float **v163;
  void **v164[2];
  char v165;
  char *v166;
  char v167;
  _QWORD *v168;
  _QWORD v169[2];
  char v170;
  void *__dst[2];
  void *__p;
  _BYTE *v173;
  void **v174;
  int *v175;
  int *v176;
  int *v177;
  int **v178;

  v3 = *a2;
  v2 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - *a2) >> 3) != *((_DWORD *)a1 + 3))
    goto LABEL_165;
  v4 = a1;
  if (v3 != v2)
  {
    while (1)
    {
      v6 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)v3) >> 3) != *((_DWORD *)a1 + 1))
        goto LABEL_165;
      if (v6 != v5)
        break;
LABEL_7:
      v3 += 24;
      if (v3 == v2)
        goto LABEL_8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3) == *(_DWORD *)a1)
    {
      v6 += 3;
      if (v6 == v5)
        goto LABEL_7;
    }
LABEL_165:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "matrix");
  }
LABEL_8:
  v7 = operator new();
  v8 = v7;
  v9 = *((unsigned int *)v4 + 3);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = 0;
  v174 = (void **)v7;
  LOBYTE(v175) = 0;
  v150 = v4;
  if ((_DWORD)v9)
  {
    v10 = operator new(16 * v9);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 16) = &v10[2 * v9];
    bzero(v10, 16 * v9);
    v152 = &v10[2 * v9];
    *(_QWORD *)(v8 + 8) = v152;
    v164[0] = (void **)v8;
    if (16 * v9)
    {
      do
      {
        v11 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v11 + 8) = 0u;
        *(_QWORD *)v11 = &off_1E69D0570;
        v12 = *(unsigned int *)v4;
        v13 = *((unsigned int *)v4 + 1);
        __p = 0;
        *(_OWORD *)__dst = 0u;
        v174 = __dst;
        LOBYTE(v175) = 0;
        if ((_DWORD)v13)
        {
          std::vector<AUFIREngineKernel::FilterData>::__vallocate[abi:ne180100](__dst, v13);
          v14 = (char *)__dst[1];
          bzero(__dst[1], 32 * v13);
          __dst[1] = &v14[32 * v13];
        }
        v15 = v11 + 24;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 5) = 0;
        v164[1] = (void **)(v11 + 24);
        v165 = 0;
        if ((_DWORD)v12)
        {
          v154 = v11 + 24;
          v157 = v10;
          v16 = (char *)operator new(24 * v12);
          *((_QWORD *)v11 + 3) = v16;
          *((_QWORD *)v11 + 4) = v16;
          v159 = v11;
          v162 = &v16[24 * v12];
          *((_QWORD *)v11 + 5) = v162;
          do
          {
            *(_QWORD *)v16 = 0;
            *((_QWORD *)v16 + 1) = 0;
            *((_QWORD *)v16 + 2) = 0;
            v18 = (uint64_t *)__dst[0];
            v17 = (uint64_t *)__dst[1];
            v166 = v16;
            v167 = 0;
            if (__dst[1] != __dst[0])
            {
              std::vector<AUFIREngineKernel::FilterData>::__vallocate[abi:ne180100](v16, ((char *)__dst[1] - (char *)__dst[0]) >> 5);
              v168 = (_QWORD *)*((_QWORD *)v16 + 1);
              v169[0] = v168;
              v174 = (void **)(v16 + 16);
              v175 = (int *)&v168;
              v176 = (int *)v169;
              LOBYTE(v177) = 0;
              v19 = v168;
              do
              {
                *v19 = 0;
                v19[1] = 0;
                v19[2] = 0;
                v20 = *v18;
                v21 = v18[1];
                v169[1] = v19;
                v170 = 0;
                v22 = v19;
                if (v21 != v20)
                {
                  std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](v19, (v21 - v20) >> 5);
                  v23 = 0;
                  v24 = v19[1];
                  do
                  {
                    v25 = (_QWORD *)(v24 + v23);
                    std::valarray<float>::valarray((_QWORD *)(v24 + v23 + 16), (int **)(v20 + v23 + 16));
                    v26 = *(_QWORD *)(v24 + v23 + 16);
                    v27 = v26 + 4 * ((*(_QWORD *)(v24 + v23 + 24) - v26) >> 3);
                    *v25 = v26;
                    v25[1] = v27;
                    v23 += 32;
                  }
                  while (v20 + v23 != v21);
                  v19[1] = v24 + v23;
                  v22 = (_QWORD *)v169[0];
                }
                v19[3] = v18[3];
                v18 += 4;
                v19 = v22 + 4;
                v169[0] = v22 + 4;
              }
              while (v18 != v17);
              LOBYTE(v177) = 1;
              std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUFIREngineKernel::FilterData>,AUFIREngineKernel::FilterData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v174);
              *((_QWORD *)v16 + 1) = v19;
              v4 = v150;
            }
            v16 += 24;
          }
          while (v16 != v162);
          v11 = v159;
          *((_QWORD *)v159 + 4) = v162;
          v15 = v154;
          v10 = v157;
        }
        v174 = __dst;
        std::vector<AUFIREngineKernel::FilterData>::__destroy_vector::operator()[abi:ne180100](&v174);
        *(_QWORD *)&v28 = v15;
        *((_QWORD *)&v28 + 1) = v11;
        v29 = (std::__shared_weak_count *)v10[1];
        *(_OWORD *)v10 = v28;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v10 += 2;
      }
      while (v10 != v152);
    }
  }
  else
  {
    v164[0] = (void **)v7;
  }
  if (*(_DWORD *)v4)
  {
    v32 = 0;
    v149 = (MultiRadixRealFFT *)(v4 + 34);
    do
    {
      v33 = *((unsigned int *)v4 + 3);
      v158 = v32;
      if ((_DWORD)v33)
      {
        v155 = 0;
        v34 = 0;
        *(float *)&v35 = v4[1];
        do
        {
          if ((_DWORD)v35)
          {
            v36 = 0;
            v153 = (_QWORD *)*((_QWORD *)*v164[0] + 2 * v155);
            do
            {
              v160 = v34;
              v37 = *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v155) + 24 * v36);
              v38 = *(_QWORD *)(*v153 + 24 * v32);
              v39 = (DSPSplitComplex **)(v38 + 32 * v36);
              v41 = *v39;
              for (i = v39[1]; i != v41; CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)&i[-2]))
                ;
              v39[1] = v41;
              v163 = (float **)(v37 + 24 * v32);
              v42 = *v163;
              v43 = v163[1];
              v44 = (char *)v43 - (char *)*v163;
              if (v43 == *v163)
              {
                v50 = 0;
              }
              else
              {
                v45 = v44 >> 2;
                v46 = &v42[v44 >> 2];
                v47 = 4 * (v44 >> 2);
                v48 = v47;
                v49 = *v163;
                while (1)
                {
                  if ((i & 1) == 0)
                    break;
                  ++v49;
                  v48 -= 4;
                  if (!v48)
                  {
                    v50 = 0;
                    v44 = 0;
                    v4 = v150;
                    goto LABEL_47;
                  }
                }
                v51 = v42;
                while (1)
                {
                  if (!(_DWORD)i)
                    break;
                  ++v51;
                  v47 -= 4;
                  if (!v47)
                  {
                    v51 = v46;
                    break;
                  }
                }
                v4 = v150;
                if (v51 == &v42[v45])
                  goto LABEL_64;
                if (!IsNearlyZero)
                  goto LABEL_64;
                for (j = v51 + 1; j != v46; ++j)
                {
                  if (!IsNearlyZero)
                    goto LABEL_64;
                }
                v44 = v51 - v42;
                if (*((_DWORD *)v150 + 2) < v44)
                {
LABEL_64:
                  *(_QWORD *)(v38 + 32 * v36 + 24) = 2;
                  v54 = v163[1] - *v163;
                  v32 = v158;
                  do
                  {
                    if (!v54)
                      goto LABEL_49;
                    v55 = v54--;
                  }
                  while ((*v163)[v55 - 1] == 0.0);
                  std::vector<float>::vector(__dst, *((unsigned int *)v150 + 4));
                  v56 = *((_DWORD *)v150 + 2);
                  CDSPSplitComplex::CDSPSplitComplex((CDSPSplitComplex *)&v174, *((unsigned int *)v150 + 5));
                  v57 = (v55 + v56 - 1) / v56;
                  v58 = (uint64_t)v39[2];
                  v59 = (char *)*v39;
                  if (v57 <= (v58 - (uint64_t)*v39) >> 5)
                  {
                    v70 = (char *)v39[1] - v59;
                    v71 = v70 >> 5;
                    if (v70 >> 5 >= v57)
                      v72 = v57;
                    else
                      v72 = v70 >> 5;
                    for (; v72; --v72)
                    {
                      CDSPSplitComplex::operator=(v59, (uint64_t)&v174);
                      v59 += 32;
                    }
                    if (v57 > v71)
                    {
                      v73 = v39[1];
                      v65 = (uint64_t)&v73[2 * (v57 - v71)];
                      v74 = v73 + 1;
                      do
                      {
                        v75 = (DSPSplitComplex *)std::valarray<float>::valarray(v74, &v176);
                        v76 = (uint64_t)&v75->realp[((char *)v75->imagp - (char *)v75->realp) >> 3];
                        v75[-1].realp = v75->realp;
                        v75[-1].imagp = (float *)v76;
                        v77 = v75 + 1;
                        v74 = v75 + 2;
                      }
                      while (v77 != (DSPSplitComplex *)v65);
                      goto LABEL_89;
                    }
                    v86 = v39[1];
                    v65 = (uint64_t)&(*v39)[2 * v57];
                    v78 = v149;
                    while (v86 != (DSPSplitComplex *)v65)
                      CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)&v86[-2]);
                  }
                  else
                  {
                    if (v59)
                    {
                      v60 = v39[1];
                      v61 = *v39;
                      if (v60 != (DSPSplitComplex *)v59)
                      {
                        do
                          CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)&v60[-2]);
                        while (v60 != (DSPSplitComplex *)v59);
                        v61 = *v39;
                      }
                      v39[1] = (DSPSplitComplex *)v59;
                      operator delete(v61);
                      v58 = 0;
                      *v39 = 0;
                      v39[1] = 0;
                      v39[2] = 0;
                    }
                    v62 = v58 >> 4;
                    if (v58 >> 4 <= v57)
                      v62 = (v55 + v56 - 1) / v56;
                    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0)
                      v63 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v63 = v62;
                    std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](v39, v63);
                    v64 = v39[1];
                    v65 = (uint64_t)&v64[2 * v57];
                    v66 = v64 + 1;
                    do
                    {
                      v67 = (DSPSplitComplex *)std::valarray<float>::valarray(v66, &v176);
                      v68 = (uint64_t)&v67->realp[((char *)v67->imagp - (char *)v67->realp) >> 3];
                      v67[-1].realp = v67->realp;
                      v67[-1].imagp = (float *)v68;
                      v69 = v67 + 1;
                      v66 = v67 + 2;
                    }
                    while (v69 != (DSPSplitComplex *)v65);
LABEL_89:
                    v78 = v149;
                  }
                  v39[1] = (DSPSplitComplex *)v65;
                  if (v176)
                  {
                    if (v177 != v176)
                      v177 = (int *)((char *)v177 + (((char *)v176 - (char *)v177 + 3) & 0xFFFFFFFFFFFFFFFCLL));
                    operator delete(v176);
                  }
                  v80 = *v39;
                  v79 = v39[1];
                  if (*v39 != v79)
                  {
                    v81 = 0;
                    do
                    {
                      v82 = *((_DWORD *)v150 + 2);
                      if (v82 >= v55)
                        v83 = v55;
                      else
                        v83 = v82;
                      if ((_DWORD)v83)
                        memmove(__dst[0], &(*v163)[v81], 4 * v83);
                      v84 = (DSPComplex *)__dst[0];
                      v85 = (char *)__dst[0] + 4 * v83;
                      if ((char *)__dst[1] - (char *)v85 >= 1)
                        bzero(v85, 4* (((unint64_t)((char *)__dst[1] - (char *)v85) >> 2)- ((void *)((char *)__dst[1] - (char *)v85) > (void *)3))+ 4);
                      MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v78, v84, v80, v150[6]);
                      LODWORD(v55) = v55 - v83;
                      v81 += v83;
                      v80 += 2;
                    }
                    while (v80 != v79);
                  }
                  if (__dst[0])
                  {
                    __dst[1] = __dst[0];
                    operator delete(__dst[0]);
                  }
                  goto LABEL_48;
                }
                v50 = 1;
              }
LABEL_47:
              *(_QWORD *)(v38 + 32 * v36 + 24) = v50 | (v44 << 32);
LABEL_48:
              v32 = v158;
LABEL_49:
              v34 = v160;
              if (v160 <= ((unint64_t)((char *)v39[1] - (char *)*v39) >> 5))
                v34 = (unint64_t)((char *)v39[1] - (char *)*v39) >> 5;
              ++v36;
              v35 = *((unsigned int *)v4 + 1);
            }
            while (v36 < v35);
            v33 = *((unsigned int *)v4 + 3);
          }
          ++v155;
        }
        while (v155 < v33);
      }
      else
      {
        v34 = 0;
      }
      v87 = *((_QWORD *)v4 + 19);
      v88 = *((unsigned int *)v4 + 4);
      LODWORD(v174) = 0;
      std::vector<float>::resize(v87 + 56 * v32, v88, &v174);
      v89 = v32;
      v90 = v87 + 56 * v32;
      v93 = *(_QWORD *)(v90 + 24);
      v92 = (uint64_t *)(v90 + 24);
      v91 = v93;
      v94 = v34;
      v95 = (int **)(v92 + 1);
      v96 = v92[1] - v93;
      if (v94 <= v96 >> 5)
        goto LABEL_155;
      v97 = *(unsigned int *)(v87 + 56 * v89 + 48);
      CDSPSplitComplex::CDSPSplitComplex((CDSPSplitComplex *)__dst, *((unsigned int *)v150 + 5));
      v98 = v96 >> 5;
      v99 = v94 - v98;
      if (v94 != v98)
      {
        v100 = *v92;
        v101 = v91 + 32 * v97 - *v92;
        v102 = v101 >> 5;
        v103 = (void **)(*v92 + (v101 & 0xFFFFFFFFFFFFFFE0));
        v104 = v87 + 56 * v158;
        v107 = *(_QWORD *)(v104 + 40);
        v106 = (int **)(v104 + 40);
        v105 = v107;
        v108 = *v95;
        if (v99 <= (v107 - (uint64_t)*v95) >> 5)
        {
          v161 = *v92;
          v113 = (char *)v108 - (char *)v103;
          v114 = *v95;
          v115 = v94 - v98;
          if (v99 <= ((char *)v108 - (char *)v103) >> 5)
            goto LABEL_129;
          v156 = v102;
          v116 = 0;
          v115 = v113 >> 5;
          v114 = &v108[8 * (v99 - (v113 >> 5))];
          v117 = 32 * v94 - 32 * (v113 >> 5) - 32 * v98;
          do
          {
            v118 = &v108[v116 / 4];
            std::valarray<float>::valarray(&v108[v116 / 4 + 4], (int **)&__p);
            v119 = *(_QWORD *)&v108[v116 / 4 + 4];
            v120 = v119 + 4 * ((*(_QWORD *)&v108[v116 / 4 + 6] - v119) >> 3);
            *(_QWORD *)v118 = v119;
            *((_QWORD *)v118 + 1) = v120;
            v116 += 32;
          }
          while (v117 != v116);
          *v95 = v114;
          v99 = v94 - v98;
          if (v108 != (int *)v103)
          {
            v102 = v156;
LABEL_129:
            v121 = (unint64_t)&v114[-8 * v99];
            v122 = v114;
            if (v121 < (unint64_t)v108)
            {
              v123 = v114 + 4;
              do
              {
                v124 = std::valarray<float>::valarray(v123, (int **)(v121 + 16));
                v125 = *v124 + 4 * ((uint64_t)(v124[1] - *v124) >> 3);
                *(v124 - 2) = *v124;
                *(v124 - 1) = v125;
                v121 += 32;
                v123 = v124 + 4;
              }
              while (v121 < (unint64_t)v108);
              v122 = (int *)(v123 - 2);
              v99 = v94 - v98;
            }
            v126 = &v103[4 * v99];
            *v95 = v122;
            if (v114 != (int *)v126)
            {
              v127 = v114 - 8;
              v128 = 32 * (((char *)v114 - (char *)v126) >> 5);
              do
              {
                v127 = (int *)(CDSPSplitComplex::operator=(v127, v161 + 32 * v102 - 32 + v128) - 4);
                v128 -= 32;
              }
              while (v128);
            }
            v129 = __dst;
            if (v103 <= __dst)
            {
              v130 = v94 - v98;
              if (*v95 <= (int *)__dst)
                v130 = 0;
              v129 = &__dst[4 * v130];
            }
            do
            {
              CDSPSplitComplex::operator=(v103, (uint64_t)v129);
              v103 += 4;
              --v115;
            }
            while (v115);
          }
        }
        else
        {
          v109 = v99 + (((uint64_t)v108 - v100) >> 5);
          if (v109 >> 59)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v110 = v105 - v100;
          if (v110 >> 4 > v109)
            v109 = v110 >> 4;
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFE0)
            v111 = 0x7FFFFFFFFFFFFFFLL;
          else
            v111 = v109;
          v178 = v106;
          if (v111)
            v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v111);
          else
            v112 = 0;
          v174 = (void **)v111;
          v175 = (int *)(v111 + 32 * v102);
          v176 = v175;
          v177 = (int *)(v111 + 32 * v112);
          v131 = &v175[8 * (v94 - v98)];
          v132 = v175 + 4;
          v133 = 32 * v94 - 32 * v98;
          do
          {
            v134 = std::valarray<float>::valarray(v132, (int **)&__p);
            v135 = *v134 + 4 * ((uint64_t)(v134[1] - *v134) >> 3);
            *(v134 - 2) = *v134;
            *(v134 - 1) = v135;
            v132 = v134 + 4;
            v133 -= 32;
          }
          while (v133);
          v176 = v131;
          v136 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CDSPSplitComplex>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>>((uint64_t)v103, (uint64_t)v103, *v92, *v92, (uint64_t)v175, (uint64_t)v175);
          v175 = (int *)v136;
          v137 = *v95;
          v138 = v176;
          if (v103 != (void **)*v95)
          {
            v139 = 0;
            do
            {
              v140 = &v138[v139 / 4];
              std::valarray<float>::valarray(&v138[v139 / 4 + 4], (int **)&v103[v139 / 8 + 2]);
              v141 = *(_QWORD *)&v138[v139 / 4 + 4];
              v142 = v141 + 4 * ((*(_QWORD *)&v138[v139 / 4 + 6] - v141) >> 3);
              *(_QWORD *)v140 = v141;
              *((_QWORD *)v140 + 1) = v142;
              v139 += 32;
            }
            while (&v103[v139 / 8] != (void **)v137);
            v138 = (int *)((char *)v138 + v139);
            v136 = (uint64_t)v175;
          }
          v176 = v138;
          v143 = *v92;
          *v92 = v136;
          v175 = (int *)v143;
          v144 = *v95;
          *v95 = v176;
          v176 = v144;
          v145 = *v106;
          *v106 = v177;
          v177 = v145;
          v174 = (void **)v175;
          std::__split_buffer<CDSPSplitComplex>::~__split_buffer((uint64_t)&v174);
        }
      }
      if (__p)
      {
        if (v173 != __p)
          v173 += ((_BYTE *)__p - v173 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        operator delete(__p);
      }
      v89 = v158;
LABEL_155:
      v4 = v150;
      v32 = v89 + 1;
    }
    while (v89 + 1 < (unint64_t)*(unsigned int *)v150);
  }
  __dst[0] = 0;
  while (ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::pop((uint64_t)(v4 + 64), (void ***)__dst));
  if (!v164[0])
    __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
  v146 = (unsigned __int8 *)v4 + 2241;
  do
    __ldaxr(v146);
  while (__stlxr(1u, v146));
  v174 = v164[0];
  if (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>((uint64_t)(v4 + 80), &v174))
  {
    v164[0] = 0;
  }
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::drain_trash((uint64_t)(v4 + 64));
  std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100]((void ***)__dst, 0);
  return std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](v164, 0);
}

void sub_1B62D3D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  void *v35;

  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void AUFIREngineKernel::PrepareXfadeChannel(AUFIREngineKernel *this, unsigned int a2)
{
  void ***v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  int v37;
  _DWORD *v38;

  v4 = (void ***)((char *)this + 176);
  v5 = (char *)this + 256;
  while (ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::pop((uint64_t)v5, v4));
  v6 = (char *)this + 152 * a2;
  v7 = *((_QWORD *)v6 + 309);
  v8 = *((_QWORD *)v6 + 310);
  *((_QWORD *)v6 + 310) = 0;
  *((_QWORD *)v6 + 309) = 0;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)v9 = &off_1E69D05A8;
  caulk::concurrent::messenger::enqueue((AUFIREngineKernel *)((char *)this + 2712), (caulk::concurrent::message *)v9);
  v10 = a2;
  v11 = v6 + 2472;
  v12 = *((unsigned int *)this + 576);
  v13 = *(_OWORD *)(**((_QWORD **)this + 22) + 16 * v12);
  v14 = *(_QWORD *)(**((_QWORD **)this + 22) + 16 * v12 + 8);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)v6 + 310);
  *v11 = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (char *)this + 152 * v10;
  *((_DWORD *)v20 + 628) = *((_DWORD *)this + 577);
  if (v20 + 2520 != (char *)this + 2312)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v20 + 2520), *((_QWORD *)this + 289), *((_QWORD *)this + 290), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 290) - *((_QWORD *)this + 289)) >> 3));
  v21 = (char *)this + 152 * v10;
  v21[2544] = 1;
  v22 = *(unsigned int *)this;
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = v21 + 2544;
    v25 = (_QWORD *)((char *)this + 152 * v10 + 2488);
    LODWORD(v26) = *((_DWORD *)this + 1);
    do
    {
      if ((_DWORD)v26)
      {
        v27 = 0;
        v28 = 0;
        v29 = *(_QWORD *)(*((_QWORD *)this + 295) + 24 * v23);
        v30 = *(_QWORD *)(*((_QWORD *)this + 292) + 24 * v23);
        v31 = (int *)(*(_QWORD *)(**(_QWORD **)v11 + 24 * v23) + 28);
        do
        {
          v32 = (v28 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v33 = *(v31 - 1);
          if (v33)
            v34 = (*(_QWORD *)(v29 + v32) & (1 << v28)) == 0;
          else
            v34 = 0;
          if (v34)
          {
            v35 = *(_QWORD *)(v30 + v32) & (1 << v28);
            if (v33 != 1 && v35 == 0)
            {
              *(_QWORD *)(*(_QWORD *)(*v25 + 24 * v23) + 8 * v28) = 2;
              *v24 = 0;
            }
            else
            {
              if (v35)
                v37 = 0;
              else
                v37 = *v31;
              v38 = (_DWORD *)(*(_QWORD *)(*v25 + 24 * v23) + 4 * v27);
              *v38 = 1;
              v38[1] = v37;
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(*v25 + 24 * v23) + 8 * v28) = 0;
          }
          ++v28;
          v26 = *((unsigned int *)this + 1);
          v27 += 2;
          v31 += 8;
        }
        while (v28 < v26);
        v22 = *(unsigned int *)this;
      }
      ++v23;
    }
    while (v23 < v22);
  }
}

void sub_1B62D41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(uint64_t a1)
{
  void **v2;
  void **v4;
  void **v5;

  *(_QWORD *)a1 = &off_1E69E32C0;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::drain_trash(a1);
  v4 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v4))
  {
    v2 = v4;
    if (v4)
    {
      v5 = v4;
      std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1BCC95CEC](v2, 0x20C40960023A9);
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ***std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void **v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v9 = (void **)(v4 - 32);
        std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v9);
        v8 = (void *)*((_QWORD *)v6 - 7);
        v6 -= 56;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 6) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  void **v3;
  void **v4;
  void **v5;

  v4 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result)
      break;
    v3 = v4;
    if (!v4)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    v5 = v4;
    std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1BCC95CEC](v3, 0x20C40960023A9);
  }
  return result;
}

void ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::pop(uint64_t a1, void ***a2)
{
  _BOOL8 v4;
  void **v5;
  void **v6;
  std::runtime_error *exception;
  void **v9;
  void **v10;

  v10 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1B62D4604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69D05D0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69D05D0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::perform(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69D05D0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688]
                                                                                           + 24))(*MEMORY[0x1E0DDB688], a1, 48, 8);
}

void caulk::concurrent::details::message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::~message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69D05D0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69D05D0;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *CDSPSplitComplex::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
    std::valarray<float>::__assign_range((uint64_t)(a1 + 2), *(_BYTE **)(a2 + 16), *(_BYTE **)(a2 + 24));
  v3 = a1[2];
  v4 = v3 + 4 * ((a1[3] - v3) >> 3);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

BOOL `anonymous namespace'::IsNearlyZero(_anonymous_namespace_ *this, float a2)
{
  unsigned __int8 v2;
  float *v3;
  int v5;
  float v6;

  v3 = (float *)&xmmword_1EF135FF8 + 2;
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v3 = (float *)(&xmmword_1EF135FF8 + 8);
    a2 = v6;
    if (v5)
    {
      v3 = (float *)(&xmmword_1EF135FF8 + 8);
      a2 = v6;
    }
  }
  return fabsf(a2) < v3[498];
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D0570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D0570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::vector<AUFIREngineKernel::FilterData>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

char *std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

_QWORD *ca::concurrent::deferred_deletion_stash<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E32A0;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E32A0;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

uint64_t AUFIREngineKernel::AUFIREngineKernel(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  caulk::concurrent::messenger *v15;
  uint64_t v16;
  std::logic_error *exception;
  int v19;
  void *__p;
  void *v21;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  v10 = 1 << -(char)__clz(2 * a4 - 1);
  *(_DWORD *)(a1 + 12) = -1431655765 * ((unint64_t)(a5[1] - *a5) >> 3);
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v10 >> 1;
  *(float *)(a1 + 24) = 1.0 / (float)v10;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (a2)
  {
    v12 = (char *)operator new(16 * a2);
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[16 * v11];
    *(_QWORD *)(a1 + 48) = v13;
    bzero(v12, 16 * v11);
    *(_QWORD *)(a1 + 40) = v13;
  }
  std::vector<std::span<float,18446744073709551615ul>>::vector((_QWORD *)(a1 + 56), a3);
  std::vector<float>::vector((_QWORD *)(a1 + 80), *(unsigned int *)(a1 + 16));
  CDSPSplitComplex::CDSPSplitComplex((CDSPSplitComplex *)(a1 + 104), *(unsigned int *)(a1 + 20));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  __p = (void *)(a1 + 152);
  LOBYTE(v21) = 0;
  if (a2)
  {
    v14 = (char *)operator new(56 * v11);
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 168) = &v14[56 * v11];
    bzero(v14, 56 * ((56 * v11 - 56) / 0x38) + 56);
    *(_QWORD *)(a1 + 160) = &v14[56 * ((56 * v11 - 56) / 0x38) + 56];
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = &off_1E69E32A0;
  *(_QWORD *)(a1 + 256) = &off_1E69E32C0;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 320));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 1280));
  *(_BYTE *)(a1 + 2241) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  v19 = 1065353216;
  std::vector<float>::vector(&__p, a3, &v19);
  std::vector<std::vector<float>>::vector((_QWORD *)(a1 + 2312), v11, (uint64_t)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  LOBYTE(v19) = 0;
  std::vector<BOOL>::vector(&__p, a3, (unsigned __int8 *)&v19);
  std::vector<std::vector<BOOL>>::vector((_QWORD *)(a1 + 2336), v11, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  LOBYTE(v19) = 0;
  std::vector<BOOL>::vector(&__p, a3, (unsigned __int8 *)&v19);
  std::vector<std::vector<BOOL>>::vector((_QWORD *)(a1 + 2360), v11, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  *(_OWORD *)(a1 + 2384) = 0u;
  AUFIREngineKernel::XfadeChannel::XfadeChannel((AUFIREngineKernel::XfadeChannel *)(a1 + 2400), a2, a3, a4);
  v15 = AUFIREngineKernel::XfadeChannel::XfadeChannel((AUFIREngineKernel::XfadeChannel *)(a1 + 2552), a2, a3, a4);
  *(_DWORD *)(a1 + 2704) = 0;
  v16 = caulk::concurrent::messenger::shared_high_priority(v15);
  MEMORY[0x1BCC94FFC](a1 + 2712, 0, v16);
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "numChannelsIn");
    goto LABEL_18;
  }
  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "numChannelsOut");
    goto LABEL_18;
  }
  if (!a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "blockSize");
LABEL_18:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  }
  MultiRadixRealFFT::Initialize((MultiRadixRealFFT *)(a1 + 136), *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 2384) = 0;
  AUFIREngineKernel::SetMatrixFIRs((float *)a1, a5);
  AUFIREngineKernel::PrepareXfadeChannel((AUFIREngineKernel *)a1, 0);
  return a1;
}

void sub_1B62D4DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, CDSPSplitComplex *a13, void **a14, void **a15, void **a16, uint64_t a17, _QWORD *__p, uint64_t a19)
{
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  __cxa_free_exception(v20);
  MEMORY[0x1BCC95008](v24);
  v26 = 0;
  while (1)
  {
    v27 = &v19[v26];
    __p = &v19[v26 + 334];
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = &v19[v26 + 330];
    std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v19[v26 + 328]);
    v28 = (void *)v19[v26 + 325];
    if (v28)
    {
      v27[326] = v28;
      operator delete(v28);
    }
    v29 = (void *)v27[322];
    if (v29)
    {
      v19[v26 + 323] = v29;
      operator delete(v29);
    }
    __p = v27 + 319;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v26 -= 19;
    if (v26 == -38)
    {
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = a10;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = a11;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v19[24] = &off_1E69E32A0;
      ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(v23);
      std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](v22, 0);
      __p = a12;
      std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v21);
      CDSPSplitComplex::~CDSPSplitComplex(a13);
      v30 = *a14;
      if (*a14)
      {
        v19[11] = v30;
        operator delete(v30);
      }
      v31 = *a15;
      if (*a15)
      {
        v19[8] = v31;
        operator delete(v31);
      }
      v32 = *a16;
      if (*a16)
      {
        v19[5] = v32;
        operator delete(v32);
      }
      _Unwind_Resume(a1);
    }
  }
}

void AUFIREngineKernel::ProcessXfadeChannel(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  const DSPSplitComplex *v12;
  float v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  const DSPSplitComplex *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  const DSPSplitComplex *v32;
  float v33;
  float v34;
  float *imagp;
  float *v36;
  float v37;
  float *v38;
  float *v39;
  uint64_t v40;
  const float *v41;
  float *v42;
  vDSP_Length v43;
  vDSP_Length v44;
  const float *v45;
  float *v46;
  uint64_t v47;
  const vDSP_DFT_SetupStruct ***v50;
  _QWORD *v52;
  float **v53;
  float v54;
  float __B;

  if (*(_DWORD *)(a1 + 4))
  {
    v6 = a6;
    v7 = a4;
    v8 = a2;
    v10 = 0;
    v11 = a3;
    v52 = (_QWORD *)(**(_QWORD **)(a2 + 72) + 24 * a3);
    v12 = (const DSPSplitComplex *)(a1 + 104);
    v50 = (const vDSP_DFT_SetupStruct ***)(a1 + 136);
    v47 = a3;
    do
    {
      v54 = 0.0;
      v13 = *(float *)(v8 + 112) * *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 120) + 24 * v11) + 4 * v10);
      v54 = v13;
      v14 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 24 * v11);
      v15 = *(_DWORD *)(v14 + 8 * v10);
      if (v15 == 2)
      {
        v17 = *(_QWORD *)(a1 + 152);
        v18 = (uint64_t *)(*v52 + 32 * v10);
        __B = v13;
        v19 = *v18;
        if (*v18 == v18[1])
          __assert_rtn("ProcessFilter", "AUFIREngineKernel.cpp", 353, "!filter.mIRBlockFFTs.empty()");
        v20 = 0;
        v21 = 0;
        v53 = (float **)(v7 + 16 * v10);
        v22 = v17 + 56 * v11;
        v23 = (_QWORD *)(v22 + 24);
        v24 = (_QWORD *)(v22 + 32);
        v25 = (_DWORD *)(v22 + 48);
        do
        {
          v26 = (uint64_t)(*v24 - *v23) >> 5;
          if (v26 <= v21)
            __assert_rtn("GetPastInputBlock", "AUFIREngineKernel.cpp", 405, "block < blockCount");
          v27 = (const DSPSplitComplex *)(v19 + 32 * v20);
          v28 = v21;
          v29 = v26 + ~v21 + *v25;
          if (v26 <= v29)
            v30 = (uint64_t)(*v24 - *v23) >> 5;
          else
            v30 = 0;
          v31 = v29 - v30;
          v32 = (const DSPSplitComplex *)(*v23 + 32 * v31);
          if (v21)
          {
            v33 = **(float **)(a1 + 104);
            v34 = **(float **)(a1 + 112);
            vDSP_zvma(v27, 1, v32, 1, v12, 1, v12, 1, *(unsigned int *)(a1 + 20));
            imagp = v27->imagp;
            v36 = v32->imagp;
            **(float **)(a1 + 104) = v33 + (float)(*v27->realp * *v32->realp);
            v37 = v34 + (float)(*imagp * *v36);
          }
          else
          {
            vDSP_zvmul(v27, 1, (const DSPSplitComplex *)(*v23 + 32 * v31), 1, v12, 1, *(unsigned int *)(a1 + 20), 1);
            v38 = v27->imagp;
            v39 = v32->imagp;
            **(float **)(a1 + 104) = *v27->realp * *v32->realp;
            v37 = *v38 * *v39;
          }
          **(float **)(a1 + 112) = v37;
          v20 = v28 + 1;
          v19 = *v18;
          v21 = v28 + 1;
        }
        while (v20 < (v18[1] - *v18) >> 5);
        v40 = *(unsigned int *)(a1 + 8);
        MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v50, v12, *(DSPComplex **)(a1 + 80));
        v41 = (const float *)(*(_QWORD *)(a1 + 80) + 4 * v40);
        v42 = *v53;
        v43 = *(unsigned int *)(a1 + 8);
        v6 = a6;
        if (a6)
          vDSP_vsma(v41, 1, &__B, v42, 1, *v53, 1, v43);
        else
          vDSP_vsmul(v41, 1, &__B, v42, 1, v43);
        v8 = a2;
        v7 = a4;
        v11 = v47;
      }
      else if (v15 == 1)
      {
        v44 = *(unsigned int *)(a1 + 8);
        v45 = (const float *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 56 * v11)
                            + 4 * v44
                            - 4 * *(unsigned int *)(v14 + 8 * v10 + 4));
        v46 = *(float **)(v7 + 16 * v10);
        if (v6)
          vDSP_vsma(v45, 1, &v54, v46, 1, *(float **)(v7 + 16 * v10), 1, v44);
        else
          vDSP_vsmul(v45, 1, &v54, v46, 1, *(unsigned int *)(a1 + 8));
      }
      else
      {
        if (v15)
          v16 = 0;
        else
          v16 = v6 == 0;
        if (v16)
          vDSP_vclr(*(float **)(v7 + 16 * v10), 1, *(unsigned int *)(a1 + 8));
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 4));
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a1 + 80);
  std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void CartesianPanner::~CartesianPanner(CartesianPanner *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;

  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 25);
  if (v3)
  {
    *((_QWORD *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 19);
  if (v5)
  {
    *((_QWORD *)this + 20) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 16);
  if (v6)
  {
    v7 = *((_QWORD *)this + 17);
    v8 = (void *)*((_QWORD *)this + 16);
    if (v7 != v6)
    {
      do
      {
        v7 -= 104;
        std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(v7);
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v6;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = (void **)((char *)this + 8);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v13);
}

uint64_t CartesianPanner::initialize(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t m;
  uint64_t i3;
  uint64_t k;
  uint64_t kk;
  uint64_t nn;
  uint64_t v11;
  uint64_t j;
  uint64_t i2;
  uint64_t i1;
  uint64_t mm;
  uint64_t n;
  uint64_t v17;
  uint64_t ii;
  uint64_t i;
  uint64_t jj;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  AUSM::ExclusionZone *v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  AUSM::ExclusionZone *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float v38;
  AUSM::ExclusionZone *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  int64_t v43;
  float *v44;
  int64_t v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  float *i4;
  float v58;
  float v59;
  float *v60;
  float *v61;
  _DWORD *v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  float *v84;
  float *v85;
  float *v86;
  float *v87;
  float v88;
  float v89;
  float *i5;
  float v91;
  float v92;
  int *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t i7;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  int v156;
  int v158;
  float *v159;
  float *v160;
  unint64_t v161;
  uint64_t v162;
  float *i6;
  unint64_t v164;
  _DWORD *v165;
  AUSM::ExclusionZone *v166;
  void *v167;
  _BYTE *v168;
  void *v169;
  _DWORD *v170;
  unint64_t v171;
  void *v172;
  float *v173;
  uint64_t v174;
  _OWORD v175[2];
  void *v176;
  _BYTE *v177;
  void *v178;
  _DWORD *v179;
  unint64_t v180;
  float *v181;
  float *v182;
  uint64_t v183;
  void **v184;
  _BYTE v185[24];
  _OWORD *v186;
  _BYTE __p[64];
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[2];
  _QWORD v191[3];
  __int128 v192;
  _QWORD v193[3];
  __int128 v194;
  _QWORD v195[3];
  __int128 v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  uint64_t v201[3];
  __int128 v202;

  *(_QWORD *)&v202 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
    return 4294956447;
  result = 4294956428;
  if (a2 > 8126469)
  {
    if (a2 > 12648463)
    {
      if (a2 > 12779529)
      {
        if (a2 == 12779530)
        {
          *(_DWORD *)(a1 + 4) = 9;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Ltf");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rtf");
          std::string::basic_string[abi:ne180100]<0>(&v194, "Ltr");
          std::string::basic_string[abi:ne180100]<0>(v195, "Rtr");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v196, 9uLL);
          for (i = 0; i != -27; i -= 3)
          {
            if (SHIBYTE(v195[i + 2]) < 0)
              operator delete((void *)v195[i]);
          }
          *(_OWORD *)__p = xmmword_1B664DA24;
          *(_OWORD *)&__p[16] = unk_1B664DA34;
          *(_DWORD *)&__p[32] = 1056964608;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DA48;
          *(_OWORD *)&__p[16] = unk_1B664DA58;
          *(_DWORD *)&__p[32] = -1090519040;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DA6C;
          *(_OWORD *)&__p[16] = *(_OWORD *)algn_1B664DA7C;
          *(_DWORD *)&__p[32] = 1065353216;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DB6C;
          *(_OWORD *)&__p[16] = unk_1B664DB7C;
          *(_DWORD *)&__p[32] = 9;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[36], 9uLL);
        }
        else
        {
          if (a2 != 12845066)
            return result;
          *(_DWORD *)(a1 + 4) = 9;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
          std::string::basic_string[abi:ne180100]<0>(&v194, "Ltm");
          std::string::basic_string[abi:ne180100]<0>(v195, "Rtm");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v196, 9uLL);
          for (j = 0; j != -27; j -= 3)
          {
            if (SHIBYTE(v195[j + 2]) < 0)
              operator delete((void *)v195[j]);
          }
          *(_OWORD *)__p = xmmword_1B664DB00;
          *(_OWORD *)&__p[16] = unk_1B664DB10;
          *(_DWORD *)&__p[32] = 1056964608;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DB24;
          *(_OWORD *)&__p[16] = *(_OWORD *)algn_1B664DB34;
          *(_DWORD *)&__p[32] = 0;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DB48;
          *(_OWORD *)&__p[16] = unk_1B664DB58;
          *(_DWORD *)&__p[32] = 1065353216;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1B664DB6C;
          *(_OWORD *)&__p[16] = unk_1B664DB7C;
          *(_DWORD *)&__p[32] = 9;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[36], 9uLL);
        }
      }
      else if (a2 == 12648464)
      {
        *(_DWORD *)(a1 + 4) = 15;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lw");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rw");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v194, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v195, "Rrs");
        std::string::basic_string[abi:ne180100]<0>(&v196, "Ltf");
        std::string::basic_string[abi:ne180100]<0>(v197, "Rtf");
        std::string::basic_string[abi:ne180100]<0>(&v198, "Ltm");
        std::string::basic_string[abi:ne180100]<0>(v199, "Rtm");
        std::string::basic_string[abi:ne180100]<0>(v200, "Ltr");
        std::string::basic_string[abi:ne180100]<0>(v201, "Rtr");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v202, 0xFuLL);
        v17 = 360;
        do
        {
          if ((char)__p[v17 - 1] < 0)
            operator delete(*(void **)&v185[v17 + 8]);
          v17 -= 24;
        }
        while (v17);
        *(_OWORD *)__p = xmmword_1B664DC40;
        *(_OWORD *)&__p[16] = unk_1B664DC50;
        *(_OWORD *)&__p[32] = xmmword_1B664DC60;
        *(_OWORD *)&__p[44] = *(__int128 *)((char *)&xmmword_1B664DC60 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[60], 0xFuLL);
        *(_OWORD *)__p = xmmword_1B664DC7C;
        *(_OWORD *)&__p[16] = unk_1B664DC8C;
        *(_OWORD *)&__p[32] = xmmword_1B664DC9C;
        *(_OWORD *)&__p[44] = *(__int128 *)((char *)&xmmword_1B664DC9C + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[60], 0xFuLL);
        memset(__p, 0, 32);
        *(_OWORD *)&__p[32] = xmmword_1B664DCD8;
        *(_OWORD *)&__p[44] = *(__int128 *)((char *)&xmmword_1B664DCD8 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[60], 0xFuLL);
        *(_OWORD *)__p = xmmword_1B664DCF4;
        *(_OWORD *)&__p[16] = unk_1B664DD04;
        *(_OWORD *)&__p[32] = xmmword_1B664DD14;
        *(_OWORD *)&__p[44] = *(__int128 *)((char *)&xmmword_1B664DD14 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[60], 0xFuLL);
      }
      else
      {
        if (a2 != 12713992)
          return result;
        *(_DWORD *)(a1 + 4) = 7;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Ltm");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rtm");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
        for (k = 0; k != -21; k -= 3)
        {
          if (SHIBYTE(v193[k + 2]) < 0)
            operator delete((void *)v193[k]);
        }
        *(_OWORD *)__p = xmmword_1B664D9D0;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664D9D0 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1B664D9EC;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664D9EC + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1B664DA08;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DA08 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1B664DAE4;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAE4 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
      }
    }
    else
    {
      if (a2 <= 10485767)
      {
        if (a2 != 8126470)
        {
          if (a2 != 8388616)
            return result;
          *(_DWORD *)(a1 + 4) = 7;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
          for (m = 0; m != -21; m -= 3)
          {
            if (SHIBYTE(v193[m + 2]) < 0)
              operator delete((void *)v193[m]);
          }
          *(_OWORD *)__p = xmmword_1B664DAAC;
          *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAAC + 12);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
          *(_OWORD *)__p = xmmword_1B664DAC8;
          *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAC8 + 12);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
          memset(__p, 0, 28);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
          *(_OWORD *)__p = xmmword_1B664DAE4;
          *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAE4 + 12);
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
          goto LABEL_99;
        }
        *(_DWORD *)(a1 + 4) = 5;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
        for (n = 0; n != -15; n -= 3)
        {
          if (SHIBYTE(v191[n + 2]) < 0)
            operator delete((void *)v191[n]);
        }
LABEL_63:
        *(_OWORD *)__p = xmmword_1B664D994;
        *(_DWORD *)&__p[16] = 1065353216;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
        *(_OWORD *)__p = xmmword_1B664D9A8;
        *(_DWORD *)&__p[16] = 0;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
        memset(__p, 0, 20);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
        *(_OWORD *)__p = xmmword_1B664D9BC;
        *(_DWORD *)&__p[16] = 4;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
        goto LABEL_99;
      }
      if (a2 == 10485768)
      {
        *(_DWORD *)(a1 + 4) = 7;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
        for (ii = 0; ii != -21; ii -= 3)
        {
          if (SHIBYTE(v193[ii + 2]) < 0)
            operator delete((void *)v193[ii]);
        }
        *(_OWORD *)__p = xmmword_1B664DAAC;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAAC + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1B664DAC8;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DAC8 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
        memset(__p, 0, 28);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1B664DA90;
        *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_1B664DA90 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
      }
      else
      {
        if (a2 != 12582924)
          return result;
        *(_DWORD *)(a1 + 4) = 11;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
        std::string::basic_string[abi:ne180100]<0>(&v194, "Ltf");
        std::string::basic_string[abi:ne180100]<0>(v195, "Rtf");
        std::string::basic_string[abi:ne180100]<0>(&v196, "Ltr");
        std::string::basic_string[abi:ne180100]<0>(v197, "Rtr");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v198, 0xBuLL);
        v11 = 264;
        do
        {
          if ((char)__p[v11 - 1] < 0)
            operator delete(*(void **)&v185[v11 + 8]);
          v11 -= 24;
        }
        while (v11);
        *(_OWORD *)__p = xmmword_1B664DB90;
        *(_OWORD *)&__p[16] = unk_1B664DBA0;
        *(_OWORD *)&__p[28] = unk_1B664DBAC;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1B664DBBC;
        *(_OWORD *)&__p[16] = *(_OWORD *)algn_1B664DBCC;
        *(_OWORD *)&__p[28] = unk_1B664DBD8;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1B664DBE8;
        *(_OWORD *)&__p[16] = unk_1B664DBF8;
        *(_OWORD *)&__p[28] = unk_1B664DC04;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1B664DC14;
        *(_OWORD *)&__p[16] = unk_1B664DC24;
        *(_OWORD *)&__p[28] = unk_1B664DC30;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[44], 0xBuLL);
      }
    }
    goto LABEL_99;
  }
  if (a2 <= 7864324)
  {
    if (a2 == 7667717)
    {
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (jj = 0; jj != -15; jj -= 3)
      {
        if (SHIBYTE(v191[jj + 2]) < 0)
          operator delete((void *)v191[jj]);
      }
      *(_OWORD *)__p = xmmword_1B664D994;
      *(_DWORD *)&__p[16] = 1065353216;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1B664D9A8;
      *(_DWORD *)&__p[16] = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
      memset(__p, 0, 20);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1B664D944;
      *(_DWORD *)&__p[16] = 4;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
      goto LABEL_99;
    }
    if (a2 != 7733253)
    {
      if (a2 != 7798789)
        return result;
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (kk = 0; kk != -15; kk -= 3)
      {
        if (SHIBYTE(v191[kk + 2]) < 0)
          operator delete((void *)v191[kk]);
      }
LABEL_37:
      *(_OWORD *)__p = xmmword_1B664D994;
      *(_DWORD *)&__p[16] = 1065353216;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1B664D9A8;
      *(_DWORD *)&__p[16] = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
      memset(__p, 0, 20);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1B664D980;
      *(_DWORD *)&__p[16] = 4;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
      goto LABEL_99;
    }
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (mm = 0; mm != -15; mm -= 3)
    {
      if (SHIBYTE(v191[mm + 2]) < 0)
        operator delete((void *)v191[mm]);
    }
LABEL_68:
    *(_OWORD *)__p = xmmword_1B664D994;
    *(_DWORD *)&__p[16] = 1065353216;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
    *(_OWORD *)__p = xmmword_1B664D9A8;
    *(_DWORD *)&__p[16] = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
    memset(__p, 0, 20);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
    *(_OWORD *)__p = xmmword_1B664D96C;
    *(_DWORD *)&__p[16] = 3;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
    goto LABEL_99;
  }
  if (a2 > 7995397)
  {
    if (a2 != 7995398)
    {
      if (a2 != 8060934)
        return result;
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (nn = 0; nn != -15; nn -= 3)
      {
        if (SHIBYTE(v191[nn + 2]) < 0)
          operator delete((void *)v191[nn]);
      }
      goto LABEL_37;
    }
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (i1 = 0; i1 != -15; i1 -= 3)
    {
      if (SHIBYTE(v191[i1 + 2]) < 0)
        operator delete((void *)v191[i1]);
    }
    goto LABEL_68;
  }
  if (a2 == 7864325)
  {
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (i2 = 0; i2 != -15; i2 -= 3)
    {
      if (SHIBYTE(v191[i2 + 2]) < 0)
        operator delete((void *)v191[i2]);
    }
    goto LABEL_63;
  }
  if (a2 != 7929862)
    return result;
  *(_DWORD *)(a1 + 4) = 5;
  std::string::basic_string[abi:ne180100]<0>(__p, "L");
  std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
  std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
  std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
  std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
  for (i3 = 0; i3 != -15; i3 -= 3)
  {
    if (SHIBYTE(v191[i3 + 2]) < 0)
      operator delete((void *)v191[i3]);
  }
  *(_OWORD *)__p = xmmword_1B664D994;
  *(_DWORD *)&__p[16] = 1065353216;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
  *(_OWORD *)__p = xmmword_1B664D9A8;
  *(_DWORD *)&__p[16] = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
  memset(__p, 0, 20);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
  *(_OWORD *)__p = xmmword_1B664D958;
  *(_DWORD *)&__p[16] = 5;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
LABEL_99:
  memset(__p, 0, 24);
  v158 = a3;
  AUSM::ExclusionZone::getPreset(a3, (void **)__p);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  v23 = a1;
  v24 = *(AUSM::ExclusionZone **)__p;
  if (v21 != v22)
  {
    v25 = *(_QWORD *)(a1 + 104);
    v26 = *(float **)(a1 + 80);
    v27 = *(float **)(v23 + 56);
    v28 = *(float **)(v23 + 32);
    v29 = *(AUSM::ExclusionZone **)&__p[8];
    v166 = *(AUSM::ExclusionZone **)__p;
    do
    {
      v30 = *v28;
      v31 = *v27;
      v32 = *v26;
      v33 = atan2f(*v28, *v27);
      v34 = hypotf(v30, v31);
      v36 = atan2f(v32, v34);
      if (v24 == v29)
      {
LABEL_105:
        v21 += 24;
        ++v28;
        ++v27;
        ++v26;
        v25 += 4;
      }
      else
      {
        v37 = v33 * 57.296;
        v38 = v36 * 57.296;
        v39 = v24;
        while (!AUSM::ExclusionZone::isInExclusionZone(v39, v37, v38, v35))
        {
          v39 = (AUSM::ExclusionZone *)((char *)v39 + 28);
          if (v39 == v29)
            goto LABEL_105;
        }
        v40 = v21;
        if (v21 + 24 != v22)
        {
          do
          {
            if (*(char *)(v40 + 23) < 0)
              operator delete(*(void **)v40);
            *(_OWORD *)v40 = *(_OWORD *)(v40 + 24);
            *(_QWORD *)(v40 + 16) = *(_QWORD *)(v40 + 40);
            *(_BYTE *)(v40 + 47) = 0;
            v41 = v40 + 48;
            *(_BYTE *)(v40 + 24) = 0;
            v40 += 24;
          }
          while (v41 != v22);
          v22 = *(_QWORD *)(v23 + 16);
        }
        while (v22 != v40)
        {
          if (*(char *)(v22 - 1) < 0)
            operator delete(*(void **)(v22 - 24));
          v22 -= 24;
        }
        *(_QWORD *)(v23 + 16) = v40;
        v42 = *(float **)(v23 + 40);
        v43 = (char *)v42 - (char *)(v28 + 1);
        if (v42 != v28 + 1)
          memmove(v28, v28 + 1, (char *)v42 - (char *)(v28 + 1));
        *(_QWORD *)(v23 + 40) = (char *)v28 + v43;
        v44 = *(float **)(v23 + 64);
        v45 = (char *)v44 - (char *)(v27 + 1);
        v24 = v166;
        if (v44 != v27 + 1)
          memmove(v27, v27 + 1, (char *)v44 - (char *)(v27 + 1));
        *(_QWORD *)(v23 + 64) = (char *)v27 + v45;
        v46 = *(char **)(v23 + 88);
        v47 = v46 - (char *)(v26 + 1);
        if (v46 != (char *)(v26 + 1))
          memmove(v26, v26 + 1, v46 - (char *)(v26 + 1));
        *(_QWORD *)(v23 + 88) = (char *)v26 + v47;
        v48 = *(_QWORD *)(v23 + 112);
        v49 = v48 - (v25 + 4);
        if (v48 != v25 + 4)
          memmove((void *)v25, (const void *)(v25 + 4), v48 - (v25 + 4));
        *(_QWORD *)(v23 + 112) = v25 + v49;
        --*(_DWORD *)(v23 + 4);
        v22 = *(_QWORD *)(v23 + 16);
      }
    }
    while (v21 != v22);
  }
  if (v24)
    operator delete(v24);
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v50 = v23;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v181, *(const void **)(v23 + 80), *(_QWORD *)(v23 + 88), (uint64_t)(*(_QWORD *)(v23 + 88) - *(_QWORD *)(v23 + 80)) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  v51 = v181;
  v52 = v182;
  if (v181 != v182)
  {
    v53 = v181 + 1;
    while (v53 != v182)
    {
      v54 = v53 - 1;
      v55 = *(v53 - 1);
      v56 = *v53++;
      if (v55 == v56)
      {
        for (i4 = v54 + 2; i4 != v52; ++i4)
        {
          v58 = *i4;
          if (v55 != *i4)
          {
            v54[1] = v58;
            ++v54;
            v55 = v58;
          }
        }
        v52 = v54 + 1;
        break;
      }
    }
    if (v51 != v52)
    {
      v159 = v52;
      do
      {
        v160 = v51;
        v59 = *v51;
        v178 = 0;
        v179 = 0;
        v180 = 0;
        v61 = *(float **)(v50 + 80);
        v60 = *(float **)(v50 + 88);
        if (v61 == v60)
        {
          v62 = 0;
          v66 = 0;
        }
        else
        {
          v62 = 0;
          v63 = 0;
          v64 = 0;
          do
          {
            if (*v61 == v59)
            {
              v65 = ((uint64_t)v61 - *(_QWORD *)(v50 + 80)) >> 2;
              if ((unint64_t)v63 >= v64)
              {
                v67 = v63 - v62;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62)
LABEL_320:
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v69 = v62;
                if ((uint64_t)(v64 - (_QWORD)v62) >> 1 > v68)
                  v68 = (uint64_t)(v64 - (_QWORD)v62) >> 1;
                if (v64 - (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                  v70 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                  v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v70);
                else
                  v71 = 0;
                v50 = v23;
                v62 = (_DWORD *)(v70 + 4 * v67);
                *v62 = v65;
                v66 = (uint64_t)(v62 + 1);
                while (v63 != v69)
                {
                  v72 = *--v63;
                  *--v62 = v72;
                }
                v64 = v70 + 4 * v71;
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *v63 = v65;
                v66 = (uint64_t)(v63 + 1);
              }
              v73 = *(_QWORD *)(v50 + 56);
              v74 = v179;
              if ((unint64_t)v179 >= v180)
              {
                v76 = v178;
                v77 = ((char *)v179 - (_BYTE *)v178) >> 2;
                v78 = v77 + 1;
                if ((unint64_t)(v77 + 1) >> 62)
LABEL_321:
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v79 = v180 - (_QWORD)v178;
                if ((uint64_t)(v180 - (_QWORD)v178) >> 1 > v78)
                  v78 = v79 >> 1;
                if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                  v80 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v80 = v78;
                if (v80)
                {
                  v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v180, v80);
                  v76 = v178;
                  v74 = v179;
                }
                else
                {
                  v81 = 0;
                }
                v82 = &v81[4 * v77];
                *(_DWORD *)v82 = *(_DWORD *)(v73 + 4 * v65);
                v75 = v82 + 4;
                while (v74 != v76)
                {
                  v83 = *--v74;
                  *((_DWORD *)v82 - 1) = v83;
                  v82 -= 4;
                }
                v178 = v82;
                v179 = v75;
                v180 = (unint64_t)&v81[4 * v80];
                if (v76)
                  operator delete(v76);
              }
              else
              {
                *v179 = *(_DWORD *)(v73 + 4 * v65);
                v75 = v74 + 1;
              }
              v179 = v75;
              v60 = *(float **)(v50 + 88);
              v63 = (_DWORD *)v66;
            }
            else
            {
              v66 = (uint64_t)v63;
            }
            ++v61;
          }
          while (v61 != v60);
        }
        *(_DWORD *)__p = 0;
        v161 = (v66 - (uint64_t)v62) >> 2;
        std::vector<float>::vector(&v176, v161, __p);
        memset(v175, 0, 24);
        v172 = 0;
        v173 = 0;
        v174 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v172, v178, (uint64_t)v179, ((char *)v179 - (_BYTE *)v178) >> 2);
        std::__sort<std::__less<float,float> &,float *>();
        v85 = (float *)v172;
        v84 = v173;
        v165 = v62;
        if (v172 != v173)
        {
          v86 = (float *)((char *)v172 + 4);
          while (v86 != v173)
          {
            v87 = v86 - 1;
            v88 = *(v86 - 1);
            v89 = *v86++;
            if (v88 == v89)
            {
              for (i5 = v87 + 2; i5 != v84; ++i5)
              {
                v91 = *i5;
                if (v88 != *i5)
                {
                  v87[1] = v91;
                  ++v87;
                  v88 = v91;
                }
              }
              v84 = v87 + 1;
              break;
            }
          }
          for (i6 = v84; v85 != i6; v62 = v165)
          {
            v92 = *v85;
            v169 = 0;
            v170 = 0;
            v171 = 0;
            if (v62 == (_DWORD *)v66)
            {
              v94 = 0;
              v98 = 0;
            }
            else
            {
              v93 = v62;
              v94 = 0;
              v95 = 0;
              v96 = 0;
              do
              {
                v97 = *v93;
                if (*(float *)(*(_QWORD *)(v23 + 56) + 4 * *v93) == v92)
                {
                  if ((unint64_t)v95 >= v96)
                  {
                    v99 = (v95 - v94) >> 2;
                    v100 = v99 + 1;
                    if ((unint64_t)(v99 + 1) >> 62)
                      goto LABEL_320;
                    if ((uint64_t)(v96 - (_QWORD)v94) >> 1 > v100)
                      v100 = (uint64_t)(v96 - (_QWORD)v94) >> 1;
                    if (v96 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                      v101 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v101 = v100;
                    if (v101)
                      v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v101);
                    else
                      v102 = 0;
                    v103 = (char *)(v101 + 4 * v99);
                    *(_DWORD *)v103 = v97;
                    v98 = (uint64_t)(v103 + 4);
                    while (v95 != v94)
                    {
                      v104 = *((_DWORD *)v95 - 1);
                      v95 -= 4;
                      *((_DWORD *)v103 - 1) = v104;
                      v103 -= 4;
                    }
                    v96 = v101 + 4 * v102;
                    if (v94)
                      operator delete(v94);
                    v94 = v103;
                  }
                  else
                  {
                    *(_DWORD *)v95 = v97;
                    v98 = (uint64_t)(v95 + 4);
                  }
                  v105 = v97;
                  v106 = *(_QWORD *)(v23 + 32);
                  v107 = v170;
                  if ((unint64_t)v170 >= v171)
                  {
                    v109 = v169;
                    v110 = ((char *)v170 - (_BYTE *)v169) >> 2;
                    v111 = v110 + 1;
                    if ((unint64_t)(v110 + 1) >> 62)
                      goto LABEL_321;
                    v112 = v171 - (_QWORD)v169;
                    if ((uint64_t)(v171 - (_QWORD)v169) >> 1 > v111)
                      v111 = v112 >> 1;
                    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                      v113 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v113 = v111;
                    if (v113)
                    {
                      v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v171, v113);
                      v109 = v169;
                      v107 = v170;
                    }
                    else
                    {
                      v114 = 0;
                    }
                    v115 = &v114[4 * v110];
                    *(_DWORD *)v115 = *(_DWORD *)(v106 + 4 * v105);
                    v108 = v115 + 4;
                    while (v107 != v109)
                    {
                      v116 = *--v107;
                      *((_DWORD *)v115 - 1) = v116;
                      v115 -= 4;
                    }
                    v169 = v115;
                    v170 = v108;
                    v171 = (unint64_t)&v114[4 * v113];
                    if (v109)
                      operator delete(v109);
                  }
                  else
                  {
                    *v170 = *(_DWORD *)(v106 + 4 * v97);
                    v108 = v107 + 1;
                  }
                  v170 = v108;
                  v95 = (char *)v98;
                }
                else
                {
                  v98 = (uint64_t)v95;
                }
                ++v93;
              }
              while (v93 != (int *)v66);
            }
            *(_DWORD *)__p = 0;
            std::vector<float>::vector(&v167, (v98 - (uint64_t)v94) >> 2, __p);
            *(float *)__p = v92;
            memset(&__p[8], 0, 24);
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[8], v94, v98, (v98 - (uint64_t)v94) >> 2);
            memset(&__p[32], 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[32], v169, (uint64_t)v170, ((char *)v170 - (_BYTE *)v169) >> 2);
            *(_QWORD *)&__p[56] = 0;
            v188 = 0;
            v189 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[56], v167, (uint64_t)v168, (v168 - (_BYTE *)v167) >> 2);
            v117 = *((_QWORD *)&v175[0] + 1);
            if (*((_QWORD *)&v175[0] + 1) >= *(_QWORD *)&v175[1])
            {
              v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v175[0] + 1) - *(_QWORD *)&v175[0]) >> 4);
              v120 = v119 + 1;
              if (v119 + 1 > 0x333333333333333)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v175[1] - *(_QWORD *)&v175[0]) >> 4) > v120)
                v120 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v175[1] - *(_QWORD *)&v175[0]) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v175[1] - *(_QWORD *)&v175[0]) >> 4) >= 0x199999999999999)
                v121 = 0x333333333333333;
              else
                v121 = v120;
              v186 = &v175[1];
              if (v121)
                v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(v121);
              else
                v122 = 0;
              v184 = (void **)v121;
              *(_QWORD *)v185 = v121 + 80 * v119;
              *(_QWORD *)&v185[8] = *(_QWORD *)v185;
              *(_QWORD *)&v185[16] = v121 + 80 * v122;
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(*(uint64_t *)v185, (uint64_t)__p);
              v123 = *(_QWORD *)v185;
              *(_QWORD *)&v185[8] += 80;
              v124 = v175[0];
              for (i7 = 80; ; i7 -= 80)
              {
                v126 = v123 + i7;
                if (*((_QWORD *)&v124 + 1) + i7 - 80 == (_QWORD)v124)
                  break;
                v127 = *((_QWORD *)&v124 + 1) + i7 - 160;
                std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(v126 - 160, v127);
              }
              v128 = *(_QWORD *)&v175[1];
              v162 = *(_QWORD *)&v185[8];
              v129 = *(_OWORD *)&v185[8];
              v130 = v175[0];
              *(_QWORD *)&v175[0] = v126 - 80;
              *(_OWORD *)v185 = v130;
              *(_OWORD *)((char *)v175 + 8) = v129;
              *(_QWORD *)&v185[16] = v128;
              v184 = (void **)v130;
              std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::~__split_buffer((uint64_t)&v184);
              v118 = v162;
            }
            else
            {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(*((uint64_t *)&v175[0] + 1), (uint64_t)__p);
              v118 = v117 + 80;
            }
            *((_QWORD *)&v175[0] + 1) = v118;
            if (*(_QWORD *)&__p[56])
            {
              v188 = *(_QWORD *)&__p[56];
              operator delete(*(void **)&__p[56]);
            }
            if (*(_QWORD *)&__p[32])
            {
              *(_QWORD *)&__p[40] = *(_QWORD *)&__p[32];
              operator delete(*(void **)&__p[32]);
            }
            if (*(_QWORD *)&__p[8])
            {
              *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
              operator delete(*(void **)&__p[8]);
            }
            if (v167)
            {
              v168 = v167;
              operator delete(v167);
            }
            if (v169)
            {
              v170 = v169;
              operator delete(v169);
            }
            if (v94)
              operator delete(v94);
            ++v85;
          }
        }
        *(float *)__p = v59;
        memset(&__p[8], 0, 24);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[8], v62, v66, v161);
        v50 = v23;
        memset(&__p[32], 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[32], v178, (uint64_t)v179, ((char *)v179 - (_BYTE *)v178) >> 2);
        *(_QWORD *)&__p[56] = 0;
        v188 = 0;
        v189 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[56], v176, (uint64_t)v177, (v177 - (_BYTE *)v176) >> 2);
        v190[0] = 0;
        v190[1] = 0;
        v191[0] = 0;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>((uint64_t)v190, *(uint64_t *)&v175[0], *((uint64_t *)&v175[0] + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v175[0] + 1) - *(_QWORD *)&v175[0]) >> 4));
        v132 = *(_QWORD *)(v23 + 136);
        v131 = *(_QWORD *)(v23 + 144);
        if (v132 >= v131)
        {
          v134 = *(_QWORD *)(v23 + 128);
          v135 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v132 - v134) >> 3);
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) > 0x276276276276276)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v137 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v131 - v134) >> 3);
          if (2 * v137 > v136)
            v136 = 2 * v137;
          if (v137 >= 0x13B13B13B13B13BLL)
            v138 = 0x276276276276276;
          else
            v138 = v136;
          v186 = (_OWORD *)(v23 + 144);
          if (v138)
          {
            if (v138 > 0x276276276276276)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v139 = (void **)operator new(104 * v138);
          }
          else
          {
            v139 = 0;
          }
          v184 = v139;
          *(_QWORD *)v185 = &v139[13 * v135];
          *(_QWORD *)&v185[8] = *(_QWORD *)v185;
          *(_QWORD *)&v185[16] = &v139[13 * v138];
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(*(uint64_t *)v185, (uint64_t)__p);
          v140 = 0;
          v141 = *(_QWORD *)v185;
          *(_QWORD *)&v185[8] += 104;
          v143 = *(_QWORD *)(v23 + 128);
          v142 = *(_QWORD *)(v23 + 136);
          while (1)
          {
            v144 = v141 + v140;
            v145 = v142 + v140;
            if (v142 + v140 == v143)
              break;
            v146 = *(_DWORD *)(v145 - 104);
            *(_QWORD *)(v144 - 96) = 0;
            v147 = v144 - 96;
            *(_DWORD *)(v144 - 104) = v146;
            *(_QWORD *)(v147 + 8) = 0;
            *(_QWORD *)(v147 + 16) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v144 - 96), *(const void **)(v145 - 96), *(_QWORD *)(v145 - 88), (uint64_t)(*(_QWORD *)(v145 - 88) - *(_QWORD *)(v145 - 96)) >> 2);
            v148 = v141 + v140;
            v149 = v141 + v140;
            *(_QWORD *)(v149 - 72) = 0;
            *(_QWORD *)(v149 - 64) = 0;
            *(_QWORD *)(v141 + v140 - 56) = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v141 + v140 - 72), *(const void **)(v145 - 72), *(_QWORD *)(v145 - 64), (uint64_t)(*(_QWORD *)(v145 - 64) - *(_QWORD *)(v145 - 72)) >> 2);
            *(_QWORD *)(v148 - 48) = 0;
            *(_QWORD *)(v148 - 40) = 0;
            v150 = (_QWORD *)(v141 + v140 - 48);
            v150[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v150, *(const void **)(v145 - 48), *(_QWORD *)(v145 - 40), (uint64_t)(*(_QWORD *)(v145 - 40) - *(_QWORD *)(v145 - 48)) >> 2);
            v151 = v141 + v140;
            *(_QWORD *)(v151 - 24) = 0;
            *(_QWORD *)(v151 - 16) = 0;
            v152 = v141 + v140 - 24;
            *(_QWORD *)(v152 + 16) = 0;
            v140 -= 104;
            std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>(v152, *(_QWORD *)(v145 - 24), *(_QWORD *)(v145 - 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v145 - 16) - *(_QWORD *)(v145 - 24)) >> 4));
          }
          v50 = v23;
          v153 = *(_QWORD *)(v23 + 144);
          v164 = *(_QWORD *)&v185[8];
          v154 = *(_OWORD *)&v185[8];
          v155 = *(_OWORD *)(v23 + 128);
          *(_QWORD *)(v23 + 128) = v144;
          *(_OWORD *)v185 = v155;
          *(_OWORD *)(v23 + 136) = v154;
          *(_QWORD *)&v185[16] = v153;
          v184 = (void **)v155;
          std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>>::~__split_buffer((uint64_t)&v184);
          v133 = v164;
        }
        else
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(*(_QWORD *)(v23 + 136), (uint64_t)__p);
          v133 = v132 + 104;
        }
        *(_QWORD *)(v50 + 136) = v133;
        v184 = (void **)v190;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v184);
        if (*(_QWORD *)&__p[56])
        {
          v188 = *(_QWORD *)&__p[56];
          operator delete(*(void **)&__p[56]);
        }
        if (*(_QWORD *)&__p[32])
        {
          *(_QWORD *)&__p[40] = *(_QWORD *)&__p[32];
          operator delete(*(void **)&__p[32]);
        }
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (v172)
        {
          v173 = (float *)v172;
          operator delete(v172);
        }
        *(_QWORD *)__p = v175;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v176)
        {
          v177 = v176;
          operator delete(v176);
        }
        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }
        if (v165)
          operator delete(v165);
        v51 = v160 + 1;
      }
      while (v160 + 1 != v159);
      v51 = v181;
    }
  }
  if (v51)
  {
    v182 = v51;
    operator delete(v51);
  }
  std::vector<float>::resize(v50 + 152, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 176, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 200, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 224, *(unsigned int *)(v50 + 4));
  if (v158 || *(_BYTE *)(v50 + 252))
    goto LABEL_318;
  if (a2 <= 8126469)
  {
    if (a2 <= 7864324)
    {
      if (a2 == 7667717 || a2 == 7733253)
        goto LABEL_317;
      v156 = 7798789;
    }
    else if (a2 > 7995397)
    {
      if (a2 == 7995398)
        goto LABEL_317;
      v156 = 8060934;
    }
    else
    {
      if (a2 == 7864325)
        goto LABEL_317;
      v156 = 7929862;
    }
  }
  else if (a2 > 12648463)
  {
    if (a2 > 12779529)
    {
      if (a2 == 12845066)
        goto LABEL_317;
      v156 = 12779530;
    }
    else
    {
      if (a2 == 12648464)
        goto LABEL_317;
      v156 = 12713992;
    }
  }
  else
  {
    if (a2 <= 10485767)
    {
      if (a2 != 8126470)
      {
        v156 = 8388616;
        goto LABEL_316;
      }
LABEL_317:
      *(_DWORD *)(v50 + 248) = a2;
      *(_BYTE *)(v50 + 252) = 1;
      *(_BYTE *)(v50 + 256) = 1;
      goto LABEL_318;
    }
    if (a2 == 10485768)
      goto LABEL_317;
    v156 = 12582924;
  }
LABEL_316:
  if (a2 == v156)
    goto LABEL_317;
LABEL_318:
  result = 0;
  *(_BYTE *)v50 = 1;
  return result;
}

void sub_1B62D7CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return a1;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  return a1;
}

void sub_1B62D7EF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void sub_1B62D7FC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x333333333333334)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = result + 80 * v8;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(v7 + v9, a2 + v9);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1B62D80E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1B62D81B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>((_QWORD *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::__fs::filesystem::path>::__vdeallocate(a1);
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_14:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_14;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1B62D83FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t CartesianPanner::pan(CartesianPanner *this, float a2, float a3, float a4, float a5, float *a6, unsigned int a7)
{
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  vDSP_Length v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int *v47;
  float *v48;
  int v49;
  float *v50;
  int v51;
  uint64_t v52;
  float *v53;
  uint64_t v55;
  int v56;
  int v57;
  float *v58;
  float32x4_t v59;
  float32x4_t v60;
  float *v61;
  float *v62;
  uint64_t jj;
  uint64_t kk;
  int v65;
  int v66;
  float *v67;
  float32x2x2_t v68;
  __int128 v69;
  float *v70;
  float *v71;
  uint64_t mm;
  uint64_t nn;
  int v74;
  int v75;
  float *v76;
  uint64_t k;
  uint64_t m;
  int v79;
  int v80;
  float *v81;
  float *v82;
  float32x4_t v83;
  float32x4_t v84;
  float *v85;
  float *v86;
  uint64_t n;
  uint64_t ii;
  int v89;
  float *v90;
  float *v91;
  __int128 v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  float *v96;
  uint64_t i;
  uint64_t j;
  int v99;
  int v100;
  float *v101;
  size_t v102;
  int v103;
  float *v104;
  float *v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  unsigned int *v110;
  uint64_t v111;
  unsigned int v112;
  _BYTE v113[12];
  int v114;
  _BYTE *v115;
  float v116;
  _BYTE v117[32];
  _BYTE __B[32];
  uint64_t v119;
  float32x2x2_t v120;
  float32x2x2_t v121;
  float32x2x2_t v122;
  float32x2x2_t v123;
  float32x2x2_t v124;
  float32x2x2_t v125;

  v119 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)this)
    return 4294956429;
  result = 4294900553;
  if (a6 && *((_DWORD *)this + 1))
  {
    vDSP_vclr(a6, 1, a7);
    v16 = a2 < 0.05 || a2 == 0.0;
    MEMORY[0x1E0C80A78](v15);
    v18 = (float *)&v113[-((v17 + 15) & 0x7FFFFFFF0)];
    vDSP_vclr(v18, 1, *((unsigned int *)this + 1));
    v20 = *((unsigned int *)this + 1);
    if (((*((_BYTE *)this + 256) != 0) & ~v16) == 0)
    {
      v21 = (uint64_t)(*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 2;
      if (v21 != v20)
        return 0xFFFFFFFFLL;
      v114 = v16;
      v115 = v113;
      CartesianPanner::axisPanner(*((float **)this + 10), *((float **)this + 11), *((float **)this + 25), *((_QWORD *)this + 26), a5);
      v22 = *((_QWORD *)this + 16);
      v23 = *((_QWORD *)this + 17);
      while (v22 != v23)
      {
        CartesianPanner::axisPanner(*(float **)(v22 + 32), *(float **)(v22 + 40), *(float **)(v22 + 56), *(_QWORD *)(v22 + 64), a4);
        v24 = *(int **)(v22 + 8);
        v25 = *(int **)(v22 + 16);
        if (v24 != v25)
        {
          v26 = *(int **)(v22 + 56);
          v27 = *((_QWORD *)this + 22);
          do
          {
            v28 = *v26++;
            v29 = v28;
            v30 = *v24++;
            *(_DWORD *)(v27 + 4 * v30) = v29;
          }
          while (v24 != v25);
        }
        v31 = *(_QWORD *)(v22 + 80);
        v32 = *(_QWORD *)(v22 + 88);
        while (v31 != v32)
        {
          CartesianPanner::axisPanner(*(float **)(v31 + 32), *(float **)(v31 + 40), *(float **)(v31 + 56), *(_QWORD *)(v31 + 64), a3);
          v33 = *(int **)(v31 + 8);
          v34 = *(int **)(v31 + 16);
          if (v33 != v34)
          {
            v35 = *(int **)(v31 + 56);
            v36 = *((_QWORD *)this + 19);
            do
            {
              v37 = *v35++;
              v38 = v37;
              v39 = *v33++;
              *(_DWORD *)(v36 + 4 * v39) = v38;
            }
            while (v33 != v34);
          }
          v31 += 80;
        }
        v22 += 104;
      }
      v19 = (float *)*((_QWORD *)this + 28);
      v40 = *((_QWORD *)this + 29) - (_QWORD)v19;
      v41 = v40 >> 2;
      if (v40)
      {
        v42 = 0;
        v43 = *((_QWORD *)this + 19);
        v44 = *((_QWORD *)this + 22);
        v45 = *((_QWORD *)this + 25);
        do
        {
          v19[v42] = (float)(*(float *)(v43 + 4 * v42) * *(float *)(v44 + 4 * v42)) * *(float *)(v45 + 4 * v42);
          ++v42;
        }
        while (v41 > v42);
      }
      LOBYTE(v16) = v114;
      if (*((_QWORD *)this + 17) - *((_QWORD *)this + 16) == 104)
      {
        v46 = *((_DWORD *)this + 1);
        if (a5 == 0.0 || v46 != 5)
        {
          if (a5 != 0.0 && v46 == 7)
          {
            *(float *)__B = (float)(a5 * -0.095) + 1.0;
            vDSP_vsmul(v19, 1, (const float *)__B, v19, 1, v41);
          }
        }
        else
        {
          *(float *)__B = (float)(a5 * -0.184) + 1.0;
          vDSP_vsmul(v19, 1, (const float *)__B, v19, 1, v41);
        }
      }
      if ((_DWORD)v20)
      {
        v47 = (int *)*((_QWORD *)this + 28);
        v48 = v18;
        do
        {
          v49 = *v47++;
          *(_DWORD *)v48++ = v49;
          --v21;
        }
        while (v21);
      }
      LODWORD(v20) = *((_DWORD *)this + 1);
    }
    MEMORY[0x1E0C80A78](v19);
    v53 = (float *)&v113[-v52];
    if (a2 == 0.0 || v51 == 0)
    {
      v55 = v20;
LABEL_104:
      MEMORY[0x1E0C80A78](result);
      v104 = (float *)&v113[-((v102 + 15) & 0x7FFFFFFF0)];
      if (a2 == 0.0 || !v103)
      {
        if (!(_DWORD)v20)
          return 0;
      }
      else
      {
        if ((v16 & 1) != 0)
        {
          if ((_DWORD)v20)
          {
            v105 = (float *)&v113[-((v102 + 15) & 0x7FFFFFFF0)];
            v106 = v55;
            do
            {
              v107 = *v18++;
              v108 = v107;
              v109 = *v53++;
              *v105++ = (float)((float)(a2 * 20.0) * v109) + (float)((float)(1.0 - (float)(a2 * 20.0)) * v108);
              --v106;
            }
            while (v106);
LABEL_113:
            result = 0;
            v110 = (unsigned int *)*((_QWORD *)this + 13);
            do
            {
              v112 = *v110++;
              v111 = v112;
              if (v112 >= a7)
                result = 4294967246;
              else
                a6[v111] = *v104;
              ++v104;
              --v55;
            }
            while (v55);
            return result;
          }
          return 0;
        }
        v18 = v53;
        if (!(_DWORD)v20)
          return 0;
      }
      memcpy(&v113[-((v102 + 15) & 0x7FFFFFFF0)], v18, v102);
      goto LABEL_113;
    }
    if (!*((_BYTE *)this + 252))
      return 4294956429;
    v56 = *((_DWORD *)this + 62);
    result = 4294956428;
    if (v56 > 8126469)
    {
      if (v56 > 12648463)
      {
        if (v56 > 12779529)
        {
          if (v56 == 12779530)
          {
            if ((_DWORD)v20 == 9)
            {
              CartesianPannerNN::panAtmos504Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
              CartesianPannerNN::panAtmos504Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v96);
              for (i = 0; i != 20; i += 4)
                *(float *)&__B[i] = fmaxf(*(float *)&__B[i], 0.0);
              for (j = 0; j != 20; j += 4)
                *(float *)&v117[j] = fmaxf(*(float *)&v117[j], 0.0);
              v99 = *(_DWORD *)v117;
              v100 = *(_DWORD *)&__B[4];
              *v53 = *(float *)__B;
              *((_DWORD *)v53 + 1) = v99;
              *((_DWORD *)v53 + 2) = v100;
              v101 = v53 + 3;
              v121.val[0] = *(float32x2_t *)&__B[8];
              v121.val[1] = *(float32x2_t *)&v117[8];
              vst2_f32(v101, v121);
              v121.val[1].i32[0] = *(_DWORD *)&v117[16];
              v53[7] = *(float *)&__B[16];
              v53[8] = v121.val[1].f32[0];
              v116 = 1.05;
              vDSP_vsmul(v53, 1, &v116, v53, 1, 9uLL);
            }
          }
          else
          {
            if (v56 != 12845066)
              return result;
            if ((_DWORD)v20 == 9)
            {
              CartesianPannerNN::panAtmos702Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
              CartesianPannerNN::panAtmos702Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v76);
              for (k = 0; k != 20; k += 4)
                *(float *)&__B[k] = fmaxf(*(float *)&__B[k], 0.0);
              for (m = 0; m != 20; m += 4)
                *(float *)&v117[m] = fmaxf(*(float *)&v117[m], 0.0);
              v79 = *(_DWORD *)v117;
              v80 = *(_DWORD *)&__B[4];
              *v53 = *(float *)__B;
              *((_DWORD *)v53 + 1) = v79;
              *((_DWORD *)v53 + 2) = v80;
              v81 = v53 + 3;
              v120.val[0] = *(float32x2_t *)&__B[8];
              v120.val[1] = *(float32x2_t *)&v117[8];
              vst2_f32(v81, v120);
              v120.val[1].i32[0] = *(_DWORD *)&v117[16];
              v53[7] = *(float *)&__B[16];
              v53[8] = v120.val[1].f32[0];
              v116 = 1.015;
              vDSP_vsmul(v53, 1, &v116, v53, 1, 9uLL);
            }
          }
        }
        else if (v56 == 12648464)
        {
          if ((_DWORD)v20 == 15)
          {
            CartesianPannerNN::panAtmos906Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos906Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v86);
            for (n = 0; n != 32; n += 16)
              *(float32x4_t *)&__B[n] = vmaxnmq_f32(*(float32x4_t *)&__B[n], (float32x4_t)0);
            for (ii = 0; ii != 32; ii += 16)
              *(float32x4_t *)&v117[ii] = vmaxnmq_f32(*(float32x4_t *)&v117[ii], (float32x4_t)0);
            v89 = *(_DWORD *)v117;
            v90 = v53 + 3;
            v122.val[0] = *(float32x2_t *)&__B[8];
            v122.val[1] = *(float32x2_t *)&v117[8];
            vst2_f32(v90, v122);
            v122.val[1].i32[0] = *(_DWORD *)&__B[4];
            *v53 = *(float *)__B;
            *((_DWORD *)v53 + 1) = v89;
            v91 = v53 + 7;
            v92 = *(_OWORD *)&__B[16];
            v122 = *(float32x2x2_t *)&v117[16];
            vst2_f32(v91, v122);
            v53[2] = v122.val[1].f32[0];
            v122.val[1] = (float32x2_t)*((_QWORD *)&v92 + 1);
            v93 = v53 + 11;
            v95 = v94;
            vst2_f32(v93, *(float32x2x2_t *)((char *)&v122 + 8));
            v116 = 0.975;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 0xFuLL);
          }
        }
        else
        {
          if (v56 != 12713992)
            return result;
          if ((_DWORD)v20 == 7)
          {
            CartesianPannerNN::panAtmos502Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos502Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v58);
            v59 = vmaxnmq_f32(*(float32x4_t *)__B, (float32x4_t)0);
            *(float32x4_t *)__B = v59;
            v60 = vmaxnmq_f32(*(float32x4_t *)v117, (float32x4_t)0);
            *(float32x4_t *)v117 = v60;
            v53[2] = v59.f32[1];
            *(int32x2_t *)v53 = vzip1_s32(*(int32x2_t *)v59.f32, *(int32x2_t *)v60.f32);
            v123.val[0] = (float32x2_t)v59.i64[1];
            v61 = v53 + 3;
            v123.val[1] = (float32x2_t)v60.i64[1];
            vst2_f32(v61, v123);
            v116 = 1.08;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 7uLL);
          }
        }
        goto LABEL_103;
      }
      if (v56 > 10485767)
      {
        if (v56 != 10485768)
        {
          if (v56 != 12582924)
            return result;
          if ((_DWORD)v20 == 11)
          {
            CartesianPannerNN::panAtmos704Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos704Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v62);
            for (jj = 0; jj != 24; jj += 4)
              *(float *)&__B[jj] = fmaxf(*(float *)&__B[jj], 0.0);
            for (kk = 0; kk != 24; kk += 4)
              *(float *)&v117[kk] = fmaxf(*(float *)&v117[kk], 0.0);
            v65 = *(_DWORD *)v117;
            v66 = *(_DWORD *)&__B[4];
            *v53 = *(float *)__B;
            *((_DWORD *)v53 + 1) = v65;
            v67 = v53 + 3;
            v68 = *(float32x2x2_t *)&__B[8];
            v69 = *(_OWORD *)&v117[8];
            vst2_f32(v67, v68);
            *((_DWORD *)v53 + 2) = v66;
            v124.val[0] = v68.val[1];
            v70 = v53 + 7;
            v124.val[1] = (float32x2_t)*((_QWORD *)&v69 + 1);
            vst2_f32(v70, v124);
            v116 = 0.953;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 0xBuLL);
          }
          goto LABEL_103;
        }
        goto LABEL_89;
      }
      if (v56 != 8126470)
      {
        if (v56 != 8388616)
          return result;
LABEL_89:
        if ((_DWORD)v20 == 7)
        {
          CartesianPannerNN::panAtmos700Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
          CartesianPannerNN::panAtmos700Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v82);
          v83 = vmaxnmq_f32(*(float32x4_t *)__B, (float32x4_t)0);
          *(float32x4_t *)__B = v83;
          v84 = vmaxnmq_f32(*(float32x4_t *)v117, (float32x4_t)0);
          *(float32x4_t *)v117 = v84;
          v53[2] = v83.f32[1];
          *(int32x2_t *)v53 = vzip1_s32(*(int32x2_t *)v83.f32, *(int32x2_t *)v84.f32);
          v125.val[0] = (float32x2_t)v83.i64[1];
          v85 = v53 + 3;
          v125.val[1] = (float32x2_t)v84.i64[1];
          vst2_f32(v85, v125);
          v116 = 1.045;
          vDSP_vsmul(v53, 1, &v116, v53, 1, 7uLL);
        }
LABEL_103:
        v55 = *((unsigned int *)this + 1);
        LODWORD(v20) = *((_DWORD *)this + 1);
        goto LABEL_104;
      }
LABEL_75:
      if ((_DWORD)v20 == 5)
      {
        CartesianPannerNN::panAtmos500Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
        CartesianPannerNN::panAtmos500Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v71);
        for (mm = 0; mm != 12; mm += 4)
          *(float *)&__B[mm] = fmaxf(*(float *)&__B[mm], 0.0);
        for (nn = 0; nn != 12; nn += 4)
          *(float *)&v117[nn] = fmaxf(*(float *)&v117[nn], 0.0);
        v74 = *(_DWORD *)v117;
        v75 = *(_DWORD *)&v117[8];
        *v53 = *(float *)__B;
        *((_DWORD *)v53 + 1) = v74;
        *((_QWORD *)v53 + 1) = *(_QWORD *)&__B[4];
        *((_DWORD *)v53 + 4) = v75;
        v116 = 1.13;
        vDSP_vsmul(v53, 1, &v116, v53, 1, 5uLL);
      }
      goto LABEL_103;
    }
    if (v56 <= 7864324)
    {
      if (v56 == 7667717 || v56 == 7733253)
        goto LABEL_75;
      v57 = 7798789;
    }
    else if (v56 > 7995397)
    {
      if (v56 == 7995398)
        goto LABEL_75;
      v57 = 8060934;
    }
    else
    {
      if (v56 == 7864325)
        goto LABEL_75;
      v57 = 7929862;
    }
    if (v56 != v57)
      return result;
    goto LABEL_75;
  }
  return result;
}

void sub_1B62D8F24(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPanner::axisPanner(float *a1, float *a2, float *__b, uint64_t a4, float a5)
{
  uint64_t v5;
  float *v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v32;
  __float2 v33;
  float v34;
  float v35;
  float sinval;
  float cosval;

  v5 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 != a4 - (_QWORD)__b)
    __assert_rtn("axisPanner", "CartesianPanner.cpp", 534, "inSpeakerCoords.size() == outGains.size()");
  v7 = a1;
  if (a2 != a1)
  {
    v8 = __b;
    v9 = a1 + 1;
    v10 = *a1;
    if (a1 + 1 == a2)
    {
      v17 = *a1;
    }
    else
    {
      v11 = *a1;
      v12 = a1 + 1;
      v13 = a1;
      v14 = a1 + 1;
      do
      {
        v15 = *v14++;
        v16 = v15;
        if (v15 < v11)
        {
          v11 = v16;
          v13 = v12;
        }
        v12 = v14;
      }
      while (v14 != a2);
      v17 = *v13;
      v18 = a1;
      v19 = a1 + 1;
      do
      {
        v20 = *v19++;
        v21 = v20;
        if (v10 < v20)
        {
          v10 = v21;
          v18 = v9;
        }
        v9 = v19;
      }
      while (v19 != a2);
      v10 = *v18;
    }
    if (v10 >= a5)
      v22 = a5;
    else
      v22 = v10;
    if (v17 <= a5)
      v23 = v22;
    else
      v23 = v17;
    if ((float)(v10 - v17) == 0.0)
    {
      if (v5 >= 1)
        memset_pattern16(__b, &unk_1B6627B80, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    }
    else
    {
      v24 = a1;
      while (*v24 != v23)
      {
        if (++v24 == a2)
          goto LABEL_28;
      }
      v5 = (char *)v24 - (char *)a1;
LABEL_28:
      if ((float *)((char *)a1 + v5) == a2)
      {
        v27 = a1;
        do
        {
          v28 = *v27++;
          v29 = v28;
          if (v28 >= v17)
            v30 = v29;
          else
            v30 = v17;
          if (v29 < v23)
            v17 = v30;
          if (v10 >= v29 && v29 >= v23)
            v10 = v29;
        }
        while (v27 != a2);
        if ((float)(v10 - v17) == 0.0)
          v32 = 0.7854;
        else
          v32 = (float)((float)(v23 - v17) / (float)(v10 - v17)) * 1.5708;
        v33 = __sincosf_stret(v32);
        do
        {
          v34 = *v7++;
          v35 = v34;
          if (v34 == v10)
            sinval = v33.__sinval;
          else
            sinval = 0.0;
          if (v35 == v17)
            cosval = v33.__cosval;
          else
            cosval = sinval;
          *v8++ = cosval;
        }
        while (v7 != a2);
      }
      else
      {
        do
        {
          v25 = *v7++;
          if (v25 == v23)
            v26 = 1.0;
          else
            v26 = 0.0;
          *v8++ = v26;
        }
        while (v7 != a2);
      }
    }
  }
}

void MidSideRotation::calculateCoefficients(__float2 *this)
{
  float cosval;
  float v3;
  float v4;

  cosval = this[2].__cosval;
  v3 = sinf(this[2].__sinval * 0.017453);
  v4 = asinf(v3);
  this[1] = __sincosf_stret((float)((float)(cosval * -0.5) * v4) + 0.7854);
}

void AUExpanseController::~AUExpanseController(AUExpanseController *this)
{
  AUExpanseController::~AUExpanseController(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  int v3;
  AUExpanseController *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D05F8;
  if (getAUExpanseControllerLog(void)::onceToken != -1)
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
  v2 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    v3 = 134217984;
    v4 = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", (uint8_t *)&v3, 0xCu);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUExpanseController::Initialize(AUExpanseController *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  AUExpanseController *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (getAUExpanseControllerLog(void)::onceToken != -1)
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
  v2 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    v12 = 134217984;
    v13 = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", (uint8_t *)&v12, 0xCu);
  }
  Element = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0);
  v5 = v4;
  if (*(double *)(Element + 80) == *(double *)(v4 + 80) && *(_DWORD *)(Element + 108) == *(_DWORD *)(v4 + 108))
  {
    (*(void (**)(AUExpanseController *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    *((_DWORD *)this + 143) = *((_DWORD *)this + 142);
    AUExpanseController::UpdateExpanseControllerState(this);
    return 0;
  }
  else
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v7 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)(Element + 108);
      v9 = *(_QWORD *)(Element + 80);
      v10 = *(_DWORD *)(v5 + 108);
      v11 = *(_QWORD *)(v5 + 80);
      v12 = 134219008;
      v13 = this;
      v14 = 1024;
      v15 = v8;
      v16 = 2048;
      v17 = v9;
      v18 = 1024;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "[%p] failed to initialize - input format [%u %lf] and output format [%u %lf] mismatched ", (uint8_t *)&v12, 0x2Cu);
    }
    return 4294956428;
  }
}

uint64_t AUExpanseController::Reset(AUExpanseController *this)
{
  *((_DWORD *)this + 134) = 0;
  return 0;
}

uint64_t AUExpanseController::GetPropertyInfo(AUExpanseController *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = *((_BYTE *)this + 17) ^ 1;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUExpanseController::GetProperty(AUExpanseController *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 528;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUExpanseController::SetProperty(AUExpanseController *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  AUExpanseController *v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 0;
    *((_BYTE *)this + 376) = *a5 != 0;
    return result;
  }
  if (a2 != 21)
    return 4294956417;
  if (a6 > 3)
  {
    result = 0;
    v10 = *((unsigned __int8 *)this + 528);
    v11 = *a5;
    *((_BYTE *)this + 528) = *a5 != 0;
    if (v10 && !v11)
    {
      result = 0;
      atomic_store(1u, (unsigned __int8 *)this + 529);
    }
  }
  else
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v9 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v12 = 134218240;
      v13 = this;
      v14 = 1024;
      v15 = a6;
      _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "[%p] failed to set bypass property; size error; inDataSize[%u]",
        (uint8_t *)&v12,
        0x12u);
    }
    return 4294956445;
  }
  return result;
}

uint64_t AUExpanseController::GetParameter(AUExpanseController *this, unsigned int a2, int a3, unsigned int a4, float *a5)
{
  uint64_t result;
  unsigned int v9;
  ausdk::AUElement *Element;
  float Parameter;

  if (a3)
    return 4294956430;
  if (a2 == 5)
  {
    result = 0;
    v9 = atomic_load((unsigned int *)this + 133);
    *(_DWORD *)a5 = v9;
  }
  else
  {
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 32), a4);
    Parameter = ausdk::AUElement::GetParameter(Element, a2);
    result = 0;
    *a5 = Parameter;
  }
  return result;
}

uint64_t AUExpanseController::SetParameter(AUExpanseController *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t result;
  unsigned int *v9;
  float v10;
  unsigned int v11;
  ausdk::AUElement *Element;

  if (a3)
    return 4294956430;
  if (a2 == 5)
  {
    result = 0;
    v9 = (unsigned int *)((char *)this + 532);
    v10 = COERCE_FLOAT(atomic_load(v9));
    if (a5 <= 1.0 && a5 >= 0.0 && v10 != a5)
    {
      do
      {
        while (1)
        {
          v11 = __ldaxr(v9);
          if (v11 == LODWORD(v10))
            break;
          __clrex();
          sched_yield();
          v10 = *(float *)&v11;
        }
      }
      while (__stlxr(LODWORD(a5), v9));
      return 0;
    }
  }
  else
  {
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    result = 0;
    ++*((_DWORD *)this + 142);
  }
  return result;
}

uint64_t AUExpanseController::CanScheduleParameters(AUExpanseController *this)
{
  return 0;
}

uint64_t AUExpanseController::ProcessMultipleBufferLists(AUExpanseController *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int *v12;
  int v13;
  const AudioBufferList *v14;
  uint64_t Element;
  int v16;
  unsigned int *v17;
  int v18;
  AudioBufferList *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void **v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  size_t v31;
  void **p_mData;
  unsigned int v33;
  void *mData;
  unsigned int *v35;
  uint64_t mNumberBuffers;
  uint64_t v37;
  unsigned int v38;
  size_t v39;
  void **v40;
  unsigned int v41;
  void *v42;
  unsigned __int8 v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  float **v54;
  unsigned int v55;
  const float *v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  float **v63;
  unsigned int v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  float **v70;
  unsigned int v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  vDSP_Length v76;
  float **v77;
  unsigned int v78;
  float *v79;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint64_t v84;
  unsigned int v85;
  UInt32 v86;
  unsigned int v87;
  UInt32 v88;
  float __Start;
  float __Step;
  AUExpanseController *v91;
  __int16 v92;
  unsigned int v93;
  __int16 v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (a4 != 2)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v81 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956428;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = a3;
    v94 = 1024;
    v95 = 2;
    v82 = "[%p] cannot process %u input busses (expected input bus count is %u)";
    v83 = v81;
    goto LABEL_95;
  }
  v12 = (unsigned int *)*a5;
  v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0) + 108);
  if (*v12 != v13)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v85 = *v12;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = v85;
    v94 = 1024;
    v95 = v13;
    v82 = "[%p] number of voice input buffers %u is not equal to expected number of voice input channels %u";
    goto LABEL_94;
  }
  v14 = a5[1];
  Element = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 1u);
  if (!v14)
  {
    v35 = (unsigned int *)*a7;
    mNumberBuffers = (*a7)->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      v37 = 0;
      v38 = *v12 - 1;
      v39 = 4 * a3;
      v40 = (void **)(v35 + 4);
      do
      {
        if (v38 >= v37)
          v41 = v37;
        else
          v41 = v38;
        v42 = *(void **)&v12[4 * v41 + 4];
        if (v42 != *v40)
          memcpy(*v40, v42, v39);
        ++v37;
        v40 += 2;
      }
      while (mNumberBuffers != v37);
    }
    return 0;
  }
  v16 = *(_DWORD *)(Element + 108);
  if (v14->mNumberBuffers != v16)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v86 = v14->mNumberBuffers;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = v86;
    v94 = 1024;
    v95 = v16;
    v82 = "[%p] number of media input buffers %u is not equal to expected number of media input channels %u";
    goto LABEL_94;
  }
  if (a6 != 2)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956428;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = a6;
    v94 = 1024;
    v95 = 2;
    v82 = "[%p] cannot process %u output busses (expected output bus count is %u)";
    goto LABEL_94;
  }
  v17 = (unsigned int *)*a7;
  v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0) + 108);
  if (*v17 != v18)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v87 = *v17;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = v87;
    v94 = 1024;
    v95 = v18;
    v82 = "[%p] number of voice output buffers %u is not equal to expected number of voice output channels %u";
    goto LABEL_94;
  }
  v19 = a7[1];
  v20 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 1u) + 108);
  if (v19->mNumberBuffers == v20)
  {
    v21 = *((_DWORD *)this + 142);
    if (v21 != *((_DWORD *)this + 143))
    {
      AUExpanseController::UpdateExpanseControllerState(this);
      *((_DWORD *)this + 143) = v21;
    }
    if (*((_BYTE *)this + 528))
    {
      v22 = *v17;
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = *v12 - 1;
        v25 = (void **)(v17 + 4);
        do
        {
          if (v24 >= v23)
            v26 = v23;
          else
            v26 = v24;
          v27 = *(void **)&v12[4 * v26 + 4];
          if (v27 != *v25)
            memcpy(*v25, v27, 4 * a3);
          ++v23;
          v25 += 2;
        }
        while (v22 != v23);
      }
      v28 = v19->mNumberBuffers;
      if ((_DWORD)v28)
      {
        v29 = 0;
        v30 = v14->mNumberBuffers - 1;
        v31 = 4 * a3;
        p_mData = &v19->mBuffers[0].mData;
        do
        {
          if (v30 >= v29)
            v33 = v29;
          else
            v33 = v30;
          mData = v14->mBuffers[v33].mData;
          if (mData != *p_mData)
            memcpy(*p_mData, mData, v31);
          ++v29;
          p_mData += 2;
        }
        while (v28 != v29);
      }
    }
    else
    {
      v43 = atomic_load((unsigned __int8 *)this + 529);
      if ((v43 & 1) != 0)
      {
        *((_DWORD *)this + 134) = 0;
        atomic_store(0, (unsigned __int8 *)this + 529);
      }
      v44 = COERCE_FLOAT(atomic_load((unsigned int *)this + 133));
      v45 = v44;
      if (*((float *)this + 134) == v44)
      {
        __Step = *((float *)this + 140);
        v67 = *v17;
        if ((_DWORD)v67)
        {
          v68 = 0;
          v69 = *v12 - 1;
          v70 = (float **)(v17 + 4);
          do
          {
            if (v69 >= v68)
              v71 = v68;
            else
              v71 = v69;
            v72 = *v70;
            v70 += 2;
            vDSP_vsmul(*(const float **)&v12[4 * v71 + 4], 1, &__Step, v72, 1, a3);
            ++v68;
          }
          while (v67 != v68);
        }
        __Step = *((float *)this + 141);
        v73 = v19->mNumberBuffers;
        if ((_DWORD)v73)
        {
          v74 = 0;
          v75 = v14->mNumberBuffers - 1;
          v76 = a3;
          v77 = (float **)&v19->mBuffers[0].mData;
          do
          {
            if (v75 >= v74)
              v78 = v74;
            else
              v78 = v75;
            v79 = *v77;
            v77 += 2;
            vDSP_vsmul((const float *)v14->mBuffers[v78].mData, 1, &__Step, v79, 1, v76);
            ++v74;
          }
          while (v73 != v74);
        }
      }
      else
      {
        *((float *)this + 134) = v44;
        v46 = 0.0;
        if (v44 <= 0.25)
        {
          v47 = roundf(v44 * 16.0) * 0.0625;
          v48 = (float)((float)((float)(v47 * 16.0) + -1.0) * -0.25) + 1.0;
          if (v47 <= 0.0625)
            v48 = 1.0;
          v46 = v48 * *((float *)this + 139);
        }
        v49 = __exp10f((float)((float)(*((float *)this + 137)+ (float)(v44 * (float)(*((float *)this + 138) - *((float *)this + 137))))+ v46)* 0.05);
        v50 = *((float *)this + 140);
        __Step = (float)(v49 - v50) / (float)a3;
        v51 = *v17;
        if ((_DWORD)v51)
        {
          v52 = 0;
          v53 = *v12 - 1;
          v54 = (float **)(v17 + 4);
          do
          {
            if (v53 >= v52)
              v55 = v52;
            else
              v55 = v53;
            v56 = *(const float **)&v12[4 * v55 + 4];
            v57 = *v54;
            v54 += 2;
            __Start = v50;
            vDSP_vrampmul(v56, 1, &__Start, &__Step, v57, 1, a3);
            *((float *)this + 140) = __Start;
            ++v52;
          }
          while (v51 != v52);
        }
        v58 = __exp10f((float)(*((float *)this + 135) + (float)(v45 * (float)(*((float *)this + 136) - *((float *)this + 135))))* 0.05);
        v59 = *((float *)this + 141);
        __Step = (float)(v58 - v59) / (float)a3;
        v60 = v19->mNumberBuffers;
        if ((_DWORD)v60)
        {
          v61 = 0;
          v62 = v14->mNumberBuffers - 1;
          v63 = (float **)&v19->mBuffers[0].mData;
          do
          {
            if (v62 >= v61)
              v64 = v61;
            else
              v64 = v62;
            v65 = (const float *)v14->mBuffers[v64].mData;
            v66 = *v63;
            v63 += 2;
            __Start = v59;
            vDSP_vrampmul(v65, 1, &__Start, &__Step, v66, 1, a3);
            *((float *)this + 141) = __Start;
            ++v61;
          }
          while (v60 != v61);
        }
      }
    }
    return 0;
  }
  if (getAUExpanseControllerLog(void)::onceToken != -1)
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
  v84 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v88 = v19->mNumberBuffers;
    __Step = 3.8522e-34;
    v91 = this;
    v92 = 1024;
    v93 = v88;
    v94 = 1024;
    v95 = v20;
    v82 = "[%p] number of media output buffers %u is not equal to expected number of media output channels %u";
LABEL_94:
    v83 = v84;
LABEL_95:
    _os_log_error_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_ERROR, v82, (uint8_t *)&__Step, 0x18u);
  }
  return 4294956428;
}

uint64_t AUExpanseController::Render(AUExpanseController *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t BufferList;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _BYTE buf[18];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((ausdk::AUBase::HasInput(this, 0) & 1) == 0)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v13 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = this;
      _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "[%p] AU has no input busses", buf, 0xCu);
    }
    return 4294956420;
  }
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0);
  v9 = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if ((_DWORD)v9)
  {
    v10 = v9;
    if (getAUExpanseControllerLog(void)::onceToken != -1)
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
    v11 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v12 = "[%p] Error[%d] pulling input from bus 0";
LABEL_7:
      _os_log_error_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      return v10;
    }
    return v10;
  }
  if (!ausdk::AUBase::HasInput(this, 1u))
  {
    BufferList = 0;
LABEL_21:
    v18 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0);
    v19 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0);
    *(_QWORD *)buf = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    *(_QWORD *)&buf[8] = BufferList;
    v21[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    v21[1] = 0;
    return (*(uint64_t (**)(AUExpanseController *, unsigned int *, uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 2, buf, 2, v21);
  }
  v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 1u);
  v15 = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
  if (!(_DWORD)v15)
  {
    v17 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 1u);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
    goto LABEL_21;
  }
  v10 = v15;
  if (getAUExpanseControllerLog(void)::onceToken != -1)
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_6839);
  v11 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    v12 = "[%p] Error[%d] pulling input from bus 1";
    goto LABEL_7;
  }
  return v10;
}

double AUExpanseController::GetParameterList(AUExpanseController *this, int a2, unsigned int *a3, unsigned int *a4)
{
  double result;

  if (a2)
  {
    *a4 = 0;
  }
  else
  {
    *a4 = 10;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      *(_QWORD *)&result = 0x900000008;
      *((_QWORD *)a3 + 4) = 0x900000008;
    }
  }
  return result;
}

uint64_t AUExpanseController::GetParameterInfo(AUExpanseController *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  const __CFString *v10;

  if (a2)
    return 4294956430;
  buffer->flags = 0;
  buffer->unitName = 0;
  switch(a3)
  {
    case 0:
      v6 = -1069547520;
      v7 = CFSTR("Min. Media Gain (dB)");
      goto LABEL_7;
    case 1:
      v6 = -1069547520;
      v7 = CFSTR("Max. Media Gain (dB)");
LABEL_7:
      buffer->cfNameString = v7;
      buffer->flags = 0x8000000;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3266576384;
      buffer->defaultValue = -15.0;
      goto LABEL_19;
    case 2:
      v6 = -1069547520;
      v8 = CFSTR("Min. Voice Gain (dB)");
      goto LABEL_10;
    case 3:
      v6 = -1069547520;
      v8 = CFSTR("Max. Voice Gain (dB)");
LABEL_10:
      buffer->cfNameString = v8;
      buffer->flags = 0x8000000;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41F00000C2B40000;
      buffer->defaultValue = 0.0;
      goto LABEL_19;
    case 4:
      buffer->cfNameString = CFSTR("Scale factor for volume matching");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Scale factor for volume matching"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x4248000000000000;
      goto LABEL_18;
    case 5:
      buffer->cfNameString = CFSTR("Current Scalar Volume");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Current Scalar Volume"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v6 = 1073782784;
      goto LABEL_19;
    case 6:
      v10 = CFSTR("AGC media target (dB)");
      goto LABEL_17;
    case 7:
      buffer->cfNameString = CFSTR("AGC max media gain (dB)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("AGC max media gain (dB)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v9 = 0x41F00000C1F00000;
      goto LABEL_18;
    case 8:
      buffer->cfNameString = CFSTR("Hold time for switching AGC parameters (frames)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Hold time for switching AGC parameters (frames)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x43FA000000000000;
      goto LABEL_18;
    case 9:
      v10 = CFSTR("Threshold for media presence detection (dB)");
LABEL_17:
      buffer->cfNameString = v10;
      buffer->flags = 0x8000000;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v9 = 3266576384;
LABEL_18:
      *(_QWORD *)&buffer->minValue = v9;
      buffer->defaultValue = 0.0;
      v6 = -1073741824;
LABEL_19:
      result = 0;
      buffer->flags |= v6;
      break;
    default:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUExpanseController::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 142);
  return result;
}

double AUExpanseController::GetLatency(AUExpanseController *this)
{
  return 0.0;
}

double AUExpanseController::GetTailTime(AUExpanseController *this)
{
  return 0.0;
}

uint64_t AUExpanseController::SupportsTail(AUExpanseController *this)
{
  return 1;
}

BOOL AUExpanseController::StreamFormatWritable(AUExpanseController *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUExpanseController::SupportedNumChannels(AUExpanseController *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUExpanseController::SupportedNumChannels(AUChannelInfo const**)::chans;
  return 1;
}

os_log_t ___Z25getAUExpanseControllerLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUExpanseController");
  getAUExpanseControllerLog(void)::gLog = (uint64_t)result;
  return result;
}

void AUExpanseController::UpdateExpanseControllerState(AUExpanseController *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((float *)this + 135) = ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((float *)this + 136) = ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((float *)this + 137) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 138) = ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((float *)this + 139) = ausdk::AUElement::GetParameter(v15, 4u);
}

void AUFIRFilter::~AUFIRFilter(AUFIRFilter *this)
{
  AUFIRFilter::~AUFIRFilter(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  const void *v2;
  const void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69D0888;
  v2 = (const void *)*((_QWORD *)this + 78);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 77);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 74);
  if (v4)
  {
    *((_QWORD *)this + 75) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = &off_1E69ED840;
  v5 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUFIRFilter::Initialize(int64x2_t *this)
{
  const __CFString *v2;
  OpaqueAudioComponentInstance *v3;
  uint64_t Element;
  const __CFNumber *v5;
  double v6;
  unsigned int v7;
  const __CFAllocator *v8;
  CFURLRef v9;
  __CFReadStream *v10;
  __CFReadStream *v11;
  const __CFDictionary *v12;
  std::string *v13;
  CFIndex size;
  CFStringRef v15;
  const __CFDictionary *Value;
  std::string *v17;
  CFIndex v18;
  CFStringRef v19;
  CFStringRef v20;
  const __CFData *v21;
  const __CFData *v22;
  unint64_t Length;
  const UInt8 *BytePtr;
  std::string::size_type error;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  OSStatus v29;
  std::runtime_error *exception;
  std::runtime_error *v32;
  std::runtime_error *v33;
  int v34;
  std::string v35;
  CFStringRef v36;
  const __CFDictionary *v37;
  __CFReadStream *v38;
  CFURLRef fileURL;

  v2 = (const __CFString *)this[38].i64[1];
  if (!v2 || !this[39].i64[0])
    return ausdk::AUEffectBase::Initialize(this);
  v3 = (OpaqueAudioComponentInstance *)this->i64[1];
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0);
  v5 = (const __CFNumber *)this[39].i64[0];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v6 = *(double *)(Element + 80);
  v7 = applesauce::CF::convert_to<unsigned int,0>(v5);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&fileURL, v9);
  if (fileURL)
  {
    v10 = CFReadStreamCreateWithFile(v8, fileURL);
    v11 = v10;
    v38 = v10;
    if (v10)
    {
      if (CFReadStreamOpen(v10))
      {
        v12 = (const __CFDictionary *)CFPropertyListCreateWithStream(v8, v11, 0, 0, 0, 0);
        v37 = v12;
        CFReadStreamClose(v11);
        if (v12)
        {
          std::to_string(&v35, (int)v6);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v35;
          else
            v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          else
            size = v35.__r_.__value_.__l.__size_;
          v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, size, 0x8000100u, 0);
          v36 = v15;
          if (!v15)
          {
            v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v32, "Could not construct");
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          Value = (const __CFDictionary *)CFDictionaryGetValue(v12, v15);
          if (Value)
          {
            std::to_string(&v35, v7);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = &v35;
            else
              v17 = (std::string *)v35.__r_.__value_.__r.__words[0];
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
            else
              v18 = v35.__r_.__value_.__l.__size_;
            v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
            v20 = v19;
            if (!v19)
            {
              v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v33, "Could not construct");
            }
            v36 = v19;
            CFRelease(v15);
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v35.__r_.__value_.__l.__data_);
            v21 = (const __CFData *)CFDictionaryGetValue(Value, v20);
            v22 = v21;
            if (v21)
            {
              Length = CFDataGetLength(v21);
              std::vector<float>::vector(&v35, Length >> 2);
              BytePtr = CFDataGetBytePtr(v22);
              error = v35.__r_.__value_.__r.__words[0];
              if (Length >= 4)
              {
                if (Length >> 2 <= 1)
                  v26 = 1;
                else
                  v26 = Length >> 2;
                v27 = (_DWORD *)v35.__r_.__value_.__r.__words[0];
                do
                {
                  v28 = *(_DWORD *)BytePtr;
                  BytePtr += 4;
                  *v27++ = bswap32(v28);
                  --v26;
                }
                while (v26);
              }
              v34 = v35.__r_.__value_.__r.__words[1];
              LODWORD(Value) = 1;
            }
            else
            {
              LODWORD(Value) = 0;
              error = 0xFFFFFFFFLL;
            }
          }
          else
          {
            error = 0xFFFFFFFFLL;
            v20 = v15;
          }
          CFRelease(v20);
          CFRelease(v12);
        }
        else
        {
          LODWORD(Value) = 0;
          error = 0xFFFFFFFFLL;
        }
      }
      else
      {
        LODWORD(Value) = 0;
        error = CFReadStreamGetError(v11).error;
      }
      CFRelease(v11);
    }
    else
    {
      LODWORD(Value) = 0;
      error = 0xFFFFFFFFLL;
    }
    if (fileURL)
      CFRelease(fileURL);
    if ((_DWORD)Value)
    {
      v29 = AudioUnitSetProperty(v3, 0x1195u, 0, 0, (const void *)error, (v34 - error) & 0xFFFFFFFC);
      if (error)
        operator delete((void *)error);
      if (v29)
        return 4294956421;
      return ausdk::AUEffectBase::Initialize(this);
    }
  }
  else
  {
    LODWORD(error) = -1;
  }
  if ((_DWORD)error)
    return 4294956421;
  return ausdk::AUEffectBase::Initialize(this);
}

void sub_1B62DAAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19, const void *a20,const void *a21)
{
  if (a17 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a18);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a19);
  applesauce::CF::ObjectRef<__CFReadStream *>::~ObjectRef(&a20);
  applesauce::CF::URLRef::~URLRef(&a21);
  _Unwind_Resume(a1);
}

uint64_t AUFIRFilter::GetPropertyInfo(AUFIRFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 4501:
      *a6 = *((_BYTE *)this + 17) ^ 1;
      v7 = (*((_DWORD *)this + 150) - *((_DWORD *)this + 148)) & 0xFFFFFFFC;
      break;
    case 4502:
    case 4503:
    case 4504:
    case 4505:
      *a6 = *((_BYTE *)this + 17) ^ 1;
      v7 = 8;
      break;
    default:
      if (a2 != 29 && a2 != 21)
        return 4294956417;
      *a6 = 1;
      v7 = 4;
      break;
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUFIRFilter::GetProperty(const void **this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  uint64_t result;
  int v8;
  CFArrayRef CFArray;
  std::runtime_error *exception;
  const __CFArray *v11;
  CFArrayRef v12;
  const void *valuePtr;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 4501:
      memcpy(__dst, this[74], (_BYTE *)this[75] - (_BYTE *)this[74]);
      return 0;
    case 4502:
      CFArray = applesauce::CF::details::make_CFArrayRef<float>(this + 74);
      goto LABEL_16;
    case 4503:
      valuePtr = this[79];
      CFArray = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!CFArray)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
LABEL_16:
      v12 = CFArray;
      result = 0;
      *__dst = v12;
      return result;
    case 4504:
      v11 = (const __CFArray *)this[77];
      if (v11)
        CFRetain(this[77]);
      goto LABEL_19;
    case 4505:
      v11 = (const __CFArray *)this[78];
      if (v11)
        CFRetain(this[78]);
LABEL_19:
      result = 0;
      *__dst = v11;
      return result;
    default:
      if (a2 == 29)
      {
        result = 0;
        v8 = *((unsigned __int8 *)this + 554);
      }
      else
      {
        if (a2 != 21)
          return 4294956417;
        result = 0;
        v8 = *((unsigned __int8 *)this + 552);
      }
      *(_DWORD *)__dst = v8;
      break;
  }
  return result;
}

void sub_1B62DADB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUFIRFilter::SetProperty(AUFIRFilter *this, int a2, int a3, unsigned int a4, int *__src, unsigned int a6)
{
  uint64_t result;
  unsigned int v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const __CFBoolean *v13;
  char v14;
  const __CFBoolean *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  char v21;

  if (a3)
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, __src, a6);
  switch(a2)
  {
    case 4501:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a6)
        return 4294956445;
      if (a6 < 4)
      {
        v8 = 0;
        goto LABEL_31;
      }
      v8 = 0;
      v18 = a6 >> 2;
      break;
    case 4502:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (a6 != 8)
        return 4294956445;
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v19, *(const __CFArray **)__src);
      if (!v21)
        return 4294956445;
      v9 = v19;
      v10 = (unint64_t)(v20 - (_QWORD)v19) >> 2;
      if (((v20 - (_QWORD)v19) & 0x3FFFFFFFCLL) != 0)
      {
        v11 = 0;
        v12 = v10 - 1;
        do
        {
          if (v19[v12] != 0.0)
            goto LABEL_33;
          ++v11;
          --v12;
        }
        while (((unint64_t)(v20 - (_QWORD)v19) >> 2) != v11);
        v11 = (unint64_t)(v20 - (_QWORD)v19) >> 2;
      }
      else
      {
        LODWORD(v11) = 0;
      }
LABEL_33:
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 592, (char *)v19, (uint64_t)&v19[(v10 - v11)], (v10 - v11));
      if (v9)
        operator delete(v9);
      return 0;
    case 4503:
      v13 = applesauce::CF::convert_as<double,0>(*(const __CFNumber **)__src);
      if (!v14)
        return 4294956445;
      v15 = v13;
      result = 0;
      *((_QWORD *)this + 79) = v15;
      return result;
    case 4504:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (a6 != 8)
        return 4294956445;
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v19, *(CFTypeRef *)__src);
      v16 = (float *)*((_QWORD *)this + 77);
      *((_QWORD *)this + 77) = v19;
      v19 = v16;
      applesauce::CF::StringRef::~StringRef((const void **)&v19);
      return 0;
    case 4505:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (a6 == 8)
      {
        applesauce::CF::NumberRef::from_get((applesauce::CF::NumberRef *)&v19, *(CFTypeRef *)__src);
        v17 = (float *)*((_QWORD *)this + 78);
        *((_QWORD *)this + 78) = v19;
        v19 = v17;
        applesauce::CF::NumberRef::~NumberRef((const void **)&v19);
        return 0;
      }
      return 4294956445;
    default:
      a3 = 0;
      return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, __src, a6);
  }
  while (*(float *)&__src[(v18 - 1)] == 0.0)
  {
    ++v8;
    if (!--v18)
    {
      v8 = a6 >> 2;
      break;
    }
  }
LABEL_31:
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 592, (char *)__src, (uint64_t)&__src[(a6 >> 2) - v8], (a6 >> 2) - v8);
  return 0;
}

void sub_1B62DAFD0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double AUFIRFilter::GetLatency(AUFIRFilter *this)
{
  return *((double *)this + 79);
}

double AUFIRFilter::GetTailTime(AUFIRFilter *this)
{
  double v1;

  v1 = (double)(unint64_t)((uint64_t)(*((_QWORD *)this + 75) - *((_QWORD *)this + 74)) >> 2);
  return v1 / *(double *)(ausdk::AUScope::SafeGetElement((AUFIRFilter *)((char *)this + 128), 0) + 80);
}

uint64_t AUFIRFilter::SupportsTail(AUFIRFilter *this)
{
  return 1;
}

BOOL AUFIRFilter::StreamFormatWritable(AUFIRFilter *this)
{
  return *((_BYTE *)this + 17) == 0;
}

_QWORD *AUFIRFilter::NewKernel@<X0>(AUFIRFilter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_1E69D0AF0;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = this;
  result = std::vector<float>::vector((_QWORD *)(v4 + 32), *((unsigned int *)this + 84) + ((uint64_t)(*((_QWORD *)this + 75) - *((_QWORD *)this + 74)) >> 2) - 1);
  *a2 = v4;
  return result;
}

void sub_1B62DB0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10A1C40D1E223BDLL);
  _Unwind_Resume(a1);
}

void AUFIRFilter::FIRFilterKernel::~FIRFilterKernel(AUFIRFilter::FIRFilterKernel *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69D0AF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69D0AF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void AUFIRFilter::FIRFilterKernel::Reset(AUFIRFilter::FIRFilterKernel *this)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
}

void *AUFIRFilter::FIRFilterKernel::Process(AUFIRFilter::FIRFilterKernel *this, const float *a2, float *__dst, unsigned int a4, BOOL *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  vDSP_Length v10;
  const float *v11;
  float *v12;
  size_t v13;

  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 600);
  v9 = v8 - *(_QWORD *)(v7 + 592);
  if (!v9)
    return memcpy(__dst, a2, 4 * a4);
  v10 = v9 >> 2;
  v11 = (const float *)(v8 - 4);
  v12 = (float *)*((_QWORD *)this + 4);
  v13 = v9 - 4;
  memcpy((char *)v12 + v9 - 4, a2, 4 * a4);
  vDSP_conv(v12, 1, v11, -1, __dst, 1, a4, v10);
  return memmove(v12, &v12[a4], v13);
}

applesauce::CF::NumberRef *applesauce::CF::NumberRef::from_get(applesauce::CF::NumberRef *this, CFTypeRef cf)
{
  applesauce::CF::NumberRef *v2;

  v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::NumberRef::NumberRef(v2, cf);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t VPEchoGateBaseV3::Initialize(VPEchoGateBaseV3 *this, int a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v6;
  __int128 v7;

  (*(void (**)(VPEchoGateBaseV3 *))(*(_QWORD *)this + 48))(this);
  *((_DWORD *)this + 2) = a2;
  v6 = *(_QWORD *)&a3->mBitsPerChannel;
  v7 = *(_OWORD *)&a3->mBytesPerPacket;
  *((_OWORD *)this + 1) = *(_OWORD *)&a3->mSampleRate;
  *((_OWORD *)this + 2) = v7;
  *((_QWORD *)this + 6) = v6;
  return 0;
}

uint64_t VPEchoGateBaseV3::Process(VPEchoGateBaseV3 *this, float a2, float a3, DSPSplitComplex *a4, DSPSplitComplex *a5, DSPSplitComplex *a6, const float *a7, const float *a8, const float *a9, const float *a10, const float *a11, float *a12)
{
  if (a4 && a5 && a6)
    return (*(uint64_t (**)(VPEchoGateBaseV3 *, float, float))(*(_QWORD *)this + 56))(this, a2, a3);
  else
    return 4294967246;
}

uint64_t VPEchoGateBaseV3::SetParameter(VPEchoGateBaseV3 *this, int a2, void *a3)
{
  return 4294967292;
}

uint64_t VPEchoGateBaseV3::GetParameter(VPEchoGateBaseV3 *this, int a2, void *a3)
{
  return 4294967292;
}

uint64_t VPEchoGateBaseV3::Cleanup(VPEchoGateBaseV3 *this)
{
  return 0;
}

void VPEchoGateV3::~VPEchoGateV3(void **this)
{
  VPEchoGateV3::~VPEchoGateV3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *this = &off_1E69D0B70;
  VPEchoGateV3::Cleanup((VPEchoGateV3 *)this);
  if (*((char *)this + 1527) < 0)
    operator delete(this[188]);
  v2 = this[181];
  if (v2)
  {
    this[182] = v2;
    operator delete(v2);
  }
  v3 = this[162];
  if (v3)
  {
    this[163] = v3;
    operator delete(v3);
  }
  v4 = this[159];
  if (v4)
  {
    this[160] = v4;
    operator delete(v4);
  }
  v5 = this[156];
  if (v5)
  {
    this[157] = v5;
    operator delete(v5);
  }
  v6 = this[153];
  if (v6)
  {
    this[154] = v6;
    operator delete(v6);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(this + 31));
  *this = off_1E69D0B20;
}

uint64_t VPEchoGateV3::SetParameter(VPEchoGateV3 *this, int a2, _OWORD *a3)
{
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a3)
    return 4294967246;
  result = 4294967292;
  switch(a2)
  {
    case 1:
      result = 0;
      *((_DWORD *)this + 352) = *(_DWORD *)a3;
      break;
    case 2:
    case 4:
      result = 0;
      *((_DWORD *)this + 349) = *(_DWORD *)a3;
      break;
    case 6:
      result = 0;
      *((_DWORD *)this + 351) = *(_DWORD *)a3;
      break;
    case 8:
      result = 0;
      v11 = a3[1];
      *(_OWORD *)((char *)this + 1576) = *a3;
      *(_OWORD *)((char *)this + 1592) = v11;
      v12 = a3[2];
      v13 = a3[3];
      v14 = a3[4];
      *((_QWORD *)this + 207) = *((_QWORD *)a3 + 10);
      *(_OWORD *)((char *)this + 1624) = v13;
      *(_OWORD *)((char *)this + 1640) = v14;
      *(_OWORD *)((char *)this + 1608) = v12;
      break;
    case 9:
      result = 0;
      *((_DWORD *)this + 298) = *(_DWORD *)a3;
      break;
    case 16:
      v5 = *(float *)a3;
      if (*(float *)a3 <= 0.0)
      {
        result = 0;
        *(_OWORD *)((char *)this + 1352) = xmmword_1B66A16A0;
      }
      else
      {
        v6 = v5 * 0.25;
        v7 = *((float *)this + 18) / (float)*((unsigned int *)this + 2);
        v8 = expf(-1.0 / (float)(v5 * v7));
        *((float *)this + 338) = v8;
        *((float *)this + 339) = 1.0 - v8;
        v9 = expf(-1.0 / (float)(v6 * v7));
        result = 0;
        *((float *)this + 340) = v9;
        *((float *)this + 341) = 1.0 - v9;
      }
      break;
    case 17:
      if (*(float *)a3 <= 0.0)
      {
        result = 0;
        *(_QWORD *)((char *)this + 1372) = 0x3F80000000000000;
      }
      else
      {
        v10 = expf(-1.0 / (float)(*(float *)a3 * (float)(*((float *)this + 18) / (float)*((unsigned int *)this + 2))));
        result = 0;
        *((float *)this + 343) = v10;
        *((float *)this + 344) = 1.0 - v10;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VPEchoGateV3::GetParameter(VPEchoGateV3 *this, int a2, _OWORD *a3)
{
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (!a3)
    return 4294967246;
  result = 4294967292;
  switch(a2)
  {
    case 3:
    case 5:
      result = 0;
      v5 = *((_DWORD *)this + 350);
      goto LABEL_10;
    case 6:
      result = 0;
      v5 = *((_DWORD *)this + 351);
      goto LABEL_10;
    case 7:
      result = 0;
      v5 = *((_DWORD *)this + 183);
      goto LABEL_10;
    case 8:
      result = 0;
      v6 = *(_OWORD *)((char *)this + 1592);
      *a3 = *(_OWORD *)((char *)this + 1576);
      a3[1] = v6;
      v7 = *(_OWORD *)((char *)this + 1608);
      v8 = *(_OWORD *)((char *)this + 1624);
      v9 = *(_OWORD *)((char *)this + 1640);
      *((_QWORD *)a3 + 10) = *((_QWORD *)this + 207);
      a3[3] = v8;
      a3[4] = v9;
      a3[2] = v7;
      return result;
    case 9:
      result = 0;
      v5 = *((_DWORD *)this + 298);
      goto LABEL_10;
    case 18:
      result = 0;
      v5 = *((_DWORD *)this + 345);
LABEL_10:
      *(_DWORD *)a3 = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VPEchoGateV3::Cleanup(VPEchoGateV3 *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 12) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 15) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 27);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 27) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 24);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 24) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 18) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 21);
  if (v7)
  {
    free(v7);
    *((_QWORD *)this + 21) = 0;
  }
  free(*((void **)this + 28));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    MEMORY[0x1BCC95CC8](v8, 0x1000C8052888210);
    *((_QWORD *)this + 33) = 0;
  }
  v9 = *((_QWORD *)this + 34);
  if (v9)
  {
    MEMORY[0x1BCC95CC8](v9, 0x1000C8052888210);
    *((_QWORD *)this + 34) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 35);
  if (v10)
  {
    free(v10);
    *((_QWORD *)this + 35) = 0;
  }
  v11 = (void *)*((_QWORD *)this + 87);
  if (v11)
  {
    free(v11);
    *((_QWORD *)this + 87) = 0;
  }
  v12 = (void *)*((_QWORD *)this + 86);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 86) = 0;
  }
  v13 = (void *)*((_QWORD *)this + 96);
  if (v13)
  {
    free(v13);
    *((_QWORD *)this + 96) = 0;
  }
  v14 = (void *)*((_QWORD *)this + 97);
  if (v14)
  {
    free(v14);
    *((_QWORD *)this + 97) = 0;
  }
  v15 = (void *)*((_QWORD *)this + 98);
  if (v15)
  {
    free(v15);
    *((_QWORD *)this + 98) = 0;
  }
  v16 = (void *)*((_QWORD *)this + 145);
  if (v16)
  {
    free(v16);
    *((_QWORD *)this + 145) = 0;
  }
  v17 = (void *)*((_QWORD *)this + 112);
  if (v17)
  {
    free(v17);
    *((_QWORD *)this + 112) = 0;
  }
  v18 = (void *)*((_QWORD *)this + 113);
  if (v18)
  {
    free(v18);
    *((_QWORD *)this + 113) = 0;
  }
  v19 = (void *)*((_QWORD *)this + 111);
  if (v19)
  {
    free(v19);
    *((_QWORD *)this + 111) = 0;
  }
  v20 = (void *)*((_QWORD *)this + 115);
  if (v20)
  {
    free(v20);
    *((_QWORD *)this + 115) = 0;
  }
  v21 = (void *)*((_QWORD *)this + 116);
  if (v21)
  {
    free(v21);
    *((_QWORD *)this + 116) = 0;
  }
  v22 = (void *)*((_QWORD *)this + 109);
  if (v22)
  {
    free(v22);
    *((_QWORD *)this + 109) = 0;
  }
  v23 = (void *)*((_QWORD *)this + 110);
  if (v23)
  {
    free(v23);
    *((_QWORD *)this + 110) = 0;
  }
  v24 = (void *)*((_QWORD *)this + 114);
  if (v24)
  {
    free(v24);
    *((_QWORD *)this + 114) = 0;
  }
  v25 = (void *)*((_QWORD *)this + 118);
  if (v25)
  {
    free(v25);
    *((_QWORD *)this + 118) = 0;
  }
  v26 = (void *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 154) = 0;
  *((_QWORD *)this + 153) = 0;
  if (v26)
    operator delete(v26);
  v27 = (void *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 156) = 0;
  if (v27)
    operator delete(v27);
  v28 = (void *)*((_QWORD *)this + 159);
  *((_QWORD *)this + 161) = 0;
  *((_QWORD *)this + 160) = 0;
  *((_QWORD *)this + 159) = 0;
  if (v28)
    operator delete(v28);
  v29 = (void *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 162) = 0;
  if (v29)
    operator delete(v29);
  return 0;
}

uint64_t VPEchoGateV3::ProcessInternal(VPEchoGateV3 *this, float a2, float a3, DSPSplitComplex *a4, DSPSplitComplex *a5, DSPSplitComplex *a6, const float *a7, const float *a8, const float *a9, const float *a10, float *a11, float *a12)
{
  vDSP_Length v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  void (*v23)(_QWORD, char *, char *, float *, float *, float *, float *, float *);
  int v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  void (*v30)(_QWORD, float *, uint64_t, _QWORD);
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  char *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int v66;
  int v67;
  int v68;
  float v69;
  float v70;
  uint64_t v71;
  vDSP_Length v72;
  int v73;
  const float *v74;
  const float *v75;
  const float *v76;
  float *v77;
  vDSP_Length v78;
  uint64_t v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  char *v84;
  float v85;
  float v86;
  float v87;
  const float *v88;
  int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  int v95;
  const float *v96;
  float *v97;
  float *v98;
  float *v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  float *v112;
  float *v113;
  uint64_t v114;
  float v115;
  int v116;
  int v117;
  int v118;
  int i;
  int v120;
  const float *v121;
  uint64_t v122;
  float *v123;
  unint64_t v124;
  float *v125;
  float *v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  float *v133;
  uint64_t v134;
  float *v135;
  const float *v136;
  int v137;
  const float *v138;
  int v139;
  float *v140;
  uint64_t v141;
  float *v142;
  float *v143;
  float v144;
  unsigned int v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  float *v149;
  float v150;
  float v151;
  int v152;
  float v153;
  double v154;
  float *v155;
  int v156;
  float v157;
  uint64_t v158;
  float v159;
  uint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  float *v181;
  uint64_t v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  uint64_t v202;
  unint64_t v203;
  float v204;
  int v205;
  float v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  float v210;
  double v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  BOOL v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  uint64_t v249;
  vDSP_Length v250;
  const float *v251;
  float *v252;
  vDSP_Length v253;
  const float *v254;
  uint64_t v255;
  uint64_t v256;
  vDSP_Length v257;
  const float *v258;
  float *v259;
  vDSP_Length v260;
  const float *v261;
  uint64_t v262;
  unsigned int v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  int v272;
  int v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  double v281;
  double v282;
  float v283;
  float v284;
  float v285;
  float v286;
  _BOOL4 v287;
  _BOOL4 v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  int v301;
  float32x2_t v302;
  float32x2_t v303;
  float32x2_t v304;
  float32x2_t v310;
  float32x2_t v311;
  int8x8_t v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  char *v318;
  double *v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float *realp;
  float *imagp;
  char v328;
  float v329;
  float v330;
  uint64_t v331;
  uint64_t v332;
  float v333;
  float v334;
  unsigned int v335;
  unsigned int v336;
  _BOOL4 v337;
  _BOOL4 v338;
  float v339;
  float v340;
  vDSP_Length v341;
  uint64_t v342;
  float v343;
  float *v344;
  uint64_t v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  float v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  double v364;
  double v365;
  double v366;
  float v367;
  int v369;
  DSPSplitComplex __src;
  float v373;
  float v375;
  float v376;
  float v377;
  float32x2_t v378;
  float32x2_t v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float32x2_t *v390;
  float v391;
  float *v392;
  float v393;
  float v395;
  DSPSplitComplex v396;
  float __B;
  float __C[4];
  float v399;
  uint64_t v400;
  uint64_t v401;
  float v402;
  float v403;
  DSPSplitComplex v404;
  DSPSplitComplex __A;
  DSPSplitComplex v406;
  uint64_t v407;

  v407 = *MEMORY[0x1E0C80C00];
  __B = (float)*((unsigned int *)this + 15);
  *((float *)this + 79) = a2;
  v390 = (float32x2_t *)((char *)this + 1212);
  v392 = (float *)((char *)this + 320);
  *((float *)this + 80) = a3;
  *((_BYTE *)this + 736) = a12 != 0;
  *((_BYTE *)this + 737) = a8 != 0;
  v16 = *((unsigned int *)this + 72);
  v18 = (float *)*((_QWORD *)this + 28);
  v17 = (float *)*((_QWORD *)this + 29);
  v19 = &v18[v16];
  v406.realp = v18;
  v406.imagp = v19;
  v20 = &v17[v16];
  v404.realp = v17;
  v404.imagp = v20;
  v21 = (float *)*((_QWORD *)this + 30);
  v22 = &v21[v16];
  __A.realp = v21;
  __A.imagp = v22;
  vDSP_vsmul(a4->realp, 1, &__B, v18, 1, v16);
  vDSP_vsmul(a4->imagp, 1, &__B, v19, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a6->realp, 1, &__B, v17, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a6->imagp, 1, &__B, v20, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a5->realp, 1, &__B, v21, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a5->imagp, 1, &__B, v22, 1, *((unsigned int *)this + 72));
  if (*((_BYTE *)this + 1440))
  {
    v23 = (void (*)(_QWORD, char *, char *, float *, float *, float *, float *, float *))*((_QWORD *)this + 179);
    if (v23)
    {
      v24 = (int)a7;
      if (!a7)
        v24 = (int)v18;
      v369 = v24;
      v23(*((_QWORD *)this + 177), (char *)this + 312, (char *)this + 316, v392, v21, v22, v17, v20);
    }
  }
  __src = *(DSPSplitComplex *)((char *)this + 1160);
  v396 = __src;
  v400 = 0;
  v399 = 0.0;
  ++*((_DWORD *)this + 348);
  v25 = v390[46];
  v26 = *((float *)this + 397);
  if (!*((_BYTE *)this + 1492))
    goto LABEL_9;
  if (*((_BYTE *)this + 1493))
  {
    v25 = *(float32x2_t *)((char *)this + 1592);
    v26 = *((float *)this + 400);
LABEL_9:
    v373 = 0.0;
    goto LABEL_10;
  }
  v379 = v390[46];
  __C[0] = 0.0;
  vDSP_svesq(*((const float **)this + 181), 1, __C, *((unsigned int *)this + 369));
  v42 = log10((float)(__C[0] / (float)*((unsigned int *)this + 369)) + 0.01) * 10.0;
  v43 = v42 - *((float *)this + 372);
  v373 = v43;
  if (v43 <= 0.0)
  {
    v25 = v379;
  }
  else
  {
    v44 = powf(fminf(v43 / *((float *)this + 370), 1.0), *((float *)this + 371));
    v25 = vmla_n_f32(v379, vsub_f32(*(float32x2_t *)((char *)this + 1592), v379), v44);
    v26 = v26 + (float)(v44 * (float)(*((float *)this + 400) - v26));
  }
LABEL_10:
  *((float *)this + 302) = *((float *)this + 394) + 0.0;
  v378 = v25;
  *((float *)this + 301) = v26 + 0.0;
  *v390 = vadd_f32(v25, 0);
  v27 = *((float *)this + 407);
  *((float *)this + 78) = v27;
  v385 = *((float *)this + 79);
  v28 = *((float *)this + 351);
  v29 = *((float *)this + 352);
  v389 = *((float *)this + 349);
  v391 = *((float *)this + 350);
  __C[0] = v389;
  __C[1] = v391;
  v377 = v28;
  __C[2] = v28;
  __C[3] = v29;
  if (*((_BYTE *)this + 1440))
  {
    v30 = (void (*)(_QWORD, float *, uint64_t, _QWORD))*((_QWORD *)this + 178);
    if (v30)
      v30(*((_QWORD *)this + 177), __C, 16, 0);
  }
  *__A.imagp = 0.0;
  *v404.imagp = 0.0;
  *v406.imagp = 0.0;
  v31 = (float *)*((_QWORD *)this + 24);
  v32 = (float *)*((_QWORD *)this + 18);
  v33 = (float *)*((_QWORD *)this + 21);
  vDSP_zvmags(&__A, 1, v31, 1, *((unsigned int *)this + 72));
  vDSP_zvmags(&v404, 1, v32, 1, *((unsigned int *)this + 72));
  vDSP_zvmags(&v406, 1, v33, 1, *((unsigned int *)this + 72));
  *((float *)&v400 + 1) = 1.0 / *((float *)this + 73);
  vDSP_vsmul(v31, 1, (const float *)&v400 + 1, v31, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(v32, 1, (const float *)&v400 + 1, v32, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(v33, 1, (const float *)&v400 + 1, v33, 1, *((unsigned int *)this + 72));
  if (*((_BYTE *)this + 737))
    vDSP_vsq(a8, 1, *((float **)this + 145), 1, *((int *)this + 214));
  *((_DWORD *)this + 296) = 0;
  v34 = (float *)&unk_1B6629000;
  if (*((float *)this + 411) == 0.0)
  {
    *((int32x2_t *)this + 94) = vdup_n_s32(0x3C23D70Au);
    goto LABEL_71;
  }
  v35 = (char *)*((_QWORD *)this + 115);
  vDSP_vmul(*((const float **)this + 96), 1, v32, 1, *((float **)this + 146), 1, *((int *)this + 130));
  v36 = *((unsigned int *)this + 130);
  if (*((_BYTE *)this + 737))
  {
    if ((int)v36 >= 1)
    {
      v37 = 0;
      v38 = *((_QWORD *)this + 145);
      do
      {
        v39 = *(float *)(v38 + v37 * 4);
        if (v39 <= 0.0)
        {
          *(_DWORD *)&v35[v37 * 4] = 0;
          v40 = (char *)*((_QWORD *)this + 146);
          v41 = 0.0;
        }
        else
        {
          v40 = v35;
          v41 = v31[v37] / v39;
        }
        *(float *)&v40[v37 * 4] = v41;
        ++v37;
      }
      while (v36 != v37);
    }
  }
  else
  {
    memcpy(v35, v31, 4 * (int)v36);
    LODWORD(v36) = *((_DWORD *)this + 130);
  }
  vDSP_vmul(*((const float **)this + 96), 1, (const float *)v35, 1, (float *)v35, 1, (int)v36);
  v45 = *((_DWORD *)this + 130);
  if (v45 >= 0)
    v46 = *((_DWORD *)this + 130);
  else
    v46 = v45 + 1;
  v47 = v46 >> 1;
  v401 = 0;
  if (v45 <= 1)
  {
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0.0;
  }
  else
  {
    VPEchoGateV3::GatecrossCorrSpec((VPEchoGateV3 *)v35, *((const float **)this + 97), *((const float **)this + 146), *((const float **)this + 98), *((float **)this + 147), (float *)&v401 + 1, (float *)&v401, (float *)(v46 >> 1), v369);
    v49 = *((float *)&v401 + 1);
    v48 = *(float *)&v401;
    v50 = *((float *)&v401 + 1) / (float)(*(float *)&v401 + 1.0e-15);
    v45 = *((_DWORD *)this + 130);
  }
  v403 = 0.0;
  v402 = 0.0;
  VPEchoGateV3::GatecrossCorrSpec((VPEchoGateV3 *)&v35[4 * v47], (const float *)(*((_QWORD *)this + 97) + 4 * v47), (const float *)(*((_QWORD *)this + 146) + 4 * v47), (const float *)(*((_QWORD *)this + 98) + 4 * v47), (float *)(*((_QWORD *)this + 147) + 4 * v47), &v403, &v402, (float *)(v45 - v47), v369);
  v51 = (float)(v403 + v49) / (float)((float)(v402 + v48) + 1.0e-15);
  if (v51 <= (float)(v403 / (float)(v402 + 1.0e-15)))
    v51 = v403 / (float)(v402 + 1.0e-15);
  if (v50 > v51)
    v51 = v50;
  *((_DWORD *)this + 296) = 0;
  if (*((float *)this + 415) != 1.0)
  {
    v53 = 0;
    goto LABEL_46;
  }
  if (v51 > 0.8 || v51 < 0.0)
  {
    v52 = 1;
    *((_DWORD *)this + 296) = 1;
    v54 = 0.0;
    goto LABEL_45;
  }
  v52 = 0;
  v53 = 0;
  v54 = *((float *)this + 300);
  if (v54 < 1200.0)
  {
LABEL_45:
    *((float *)this + 300) = v54 + *((float *)this + 76);
    v53 = v52;
  }
LABEL_46:
  if (v51 >= 0.0 || (v55 = 0.5, *((float *)this + 121) >= 3000.0) && !v53)
  {
    if (v51 >= -0.1)
    {
      v55 = 0.001;
      if (v51 >= 0.001)
      {
        v55 = 0.5;
        if (v51 <= 0.5 || *((float *)this + 121) >= 3000.0 && !v53)
        {
          v55 = v51;
          if (v51 > 0.1)
            v55 = 0.1;
        }
      }
    }
    else
    {
      v55 = 0.1;
    }
  }
  if (v51 <= 0.0)
  {
    v56 = *((float *)this + 185);
    v57 = *((float *)this + 186);
    v58 = *((float *)this + 187);
  }
  else
  {
    v56 = (float)(*((float *)this + 137) * *((float *)this + 185)) + (float)(*((float *)this + 136) * v55);
    v57 = (float)(*((float *)this + 139) * *((float *)this + 186)) + (float)(*((float *)this + 138) * v55);
    v58 = (float)(*((float *)this + 141) * *((float *)this + 187)) + (float)(*((float *)this + 140) * v55);
  }
  if (v56 < 0.001)
    v56 = 0.001;
  *((float *)this + 185) = v56;
  if (v57 < 0.001)
    v57 = 0.001;
  *((float *)this + 186) = v57;
  if (v58 < 0.001)
    v58 = 0.001;
  *((float *)this + 187) = v58;
  if (v57 <= v56)
    v57 = v56;
  if (v58 <= v57)
    v58 = v57;
  *((float *)this + 188) = v58;
  *((float *)this + 189) = v56;
  VPEchoGateV3::GatesmoothPowerSpectrum(*((VPEchoGateV3 **)this + 97), (const float *)v35, (const float *)*((unsigned int *)this + 130), *((float *)this + 190));
  VPEchoGateV3::GatesmoothPowerSpectrum(*((VPEchoGateV3 **)this + 98), *((const float **)this + 146), (const float *)*((unsigned int *)this + 130), *((float *)this + 190));
LABEL_71:
  if (*((float *)this + 415) != 0.0)
  {
    v59 = 0.0;
    if (*((float *)this + 298) != *((float *)this + 297) || (v59 = *((float *)this + 299), v59 < 1200.0))
    {
      v59 = v59 + *((float *)this + 76);
      *((float *)this + 299) = v59;
    }
    if (*((float *)this + 300) < 1000.0
      && v59 < 1000.0
      && *((float *)this + 408) * 2000.0 < (float)(*((float *)this + 121) + *((float *)this + 121)))
    {
      *((_DWORD *)this + 121) = 0;
    }
  }
  vDSP_sve(&v32[*((int *)this + 129)], 1, (float *)this + 146, *((int *)this + 130) - (uint64_t)*((int *)this + 129));
  vDSP_sve(&v33[*((int *)this + 129)], 1, (float *)this + 122, *((int *)this + 130) - (uint64_t)*((int *)this + 129));
  v60 = *((float *)this + 143);
  *((float *)this + 146) = *((float *)this + 146) / v60;
  *((float *)this + 122) = *((float *)this + 122) / v60;
  if (*((float *)this + 410) != 1)
    goto LABEL_84;
  if (*((float *)this + 18) <= 8000.0)
    goto LABEL_84;
  v403 = 0.0;
  v402 = 0.0;
  vDSP_sve(&v32[*((int *)this + 130)], 1, &v403, *((int *)this + 131) - (uint64_t)*((int *)this + 130));
  vDSP_sve(&v33[*((int *)this + 130)], 1, &v402, *((int *)this + 131) - (uint64_t)*((int *)this + 130));
  v61 = *((float *)this + 146);
  v60 = *((float *)this + 143);
  v62 = *((float *)this + 144);
  v63 = (float)(v403 + (float)(v61 * v60)) / v62;
  if (v63 <= v61)
    goto LABEL_84;
  v64 = *((float *)this + 122);
  v65 = (float)(v402 + (float)(v64 * v60)) / v62;
  if (v65 > v64)
  {
    *((float *)this + 146) = v63;
    *((float *)this + 122) = v65;
    v66 = *((_DWORD *)this + 131);
    v67 = 1;
    v68 = v66;
    v69 = v62;
  }
  else
  {
LABEL_84:
    v67 = 0;
    v66 = *((_DWORD *)this + 130);
    v68 = *((_DWORD *)this + 128);
    v62 = v60;
    v69 = *((float *)this + 142);
  }
  if (*((_BYTE *)this + 737))
  {
    vDSP_vmul(v32, 1, *((const float **)this + 145), 1, v32, 1, v66);
    if (*((_DWORD *)this + 234))
      vDSP_vmul(a11, 1, *((const float **)this + 145), 1, *((float **)this + 118), 1, v66);
  }
  vDSP_sve(&v32[*((int *)this + 129)], 1, (float *)this + 157, v66 - (uint64_t)*((int *)this + 129));
  v70 = *((float *)this + 157) / v62;
  *((float *)this + 157) = v70;
  v71 = *((int *)this + 129);
  v72 = v68 - v71;
  v388 = v70;
  if (*((float *)this + 411) == 0.0)
  {
    v76 = &v31[v71];
    v77 = (float *)((char *)this + 580);
    v78 = (int)v72;
  }
  else
  {
    v73 = *((_DWORD *)this + 234);
    if (v73 == 4 || v73 == 2)
    {
      memcpy(*((void **)this + 146), *((const void **)this + 118), 4 * *((unsigned int *)this + 2));
      v72 = (int)v72;
    }
    else
    {
      v74 = &v32[v71];
      v75 = (const float *)((char *)this + 756);
      if (v73)
      {
        v72 = (int)v72;
        vDSP_vsmul(v74, 1, v75, (float *)(*((_QWORD *)this + 146) + 4 * v71), 1, (int)v72);
        if ((*((_DWORD *)this + 234) | 2) == 3)
          vDSP_vmax((const float *)(*((_QWORD *)this + 146) + 4 * *((int *)this + 129)), 1, (const float *)(*((_QWORD *)this + 118) + 4 * *((int *)this + 129)), 1, (float *)(*((_QWORD *)this + 146) + 4 * *((int *)this + 129)), 1, (int)v72);
      }
      else
      {
        vDSP_vsmul(v74, 1, v75, (float *)(*((_QWORD *)this + 146) + 4 * v71), 1, v68 - v71);
      }
    }
    LODWORD(v400) = 0;
    v79 = *((int *)this + 129);
    v80 = (float *)(*((_QWORD *)this + 145) + 4 * v79);
    vDSP_vsub((const float *)(*((_QWORD *)this + 146) + 4 * v79), 1, &v31[v79], 1, v80, 1, v72);
    vDSP_vthr(v80, 1, (const float *)&v400, v80, 1, v72);
    v77 = (float *)((char *)this + 580);
    v76 = v80;
    v78 = v72;
  }
  vDSP_sve(v76, 1, v77, v78);
  v81 = *((float *)this + 145) / v69;
  *((float *)this + 145) = v81;
  v82 = *((float *)this + 146);
  *((float *)this + 199) = v82;
  v83 = *((float *)this + 157);
  v84 = "N6DspLib8BuzzKill9AlgorithmE" + 20;
  v376 = v29;
  if (*((float *)this + 411) == 0.0)
  {
    v90 = *((float *)this + 136);
    v91 = *((float *)this + 137);
    v92 = (float)(v91 * *((float *)this + 148)) + (float)(v90 * v81);
    v93 = v91 * *((float *)this + 159);
    v94 = 0.0;
  }
  else
  {
    v85 = v81 + v29 * -2.0 * v83;
    if (v85 >= 0.0)
      v86 = v81 + v29 * -2.0 * v83;
    else
      v86 = 0.0;
    v87 = *((float *)this + 188);
    v403 = 0.0;
    v402 = 0.0;
    v88 = (const float *)*((_QWORD *)this + 115);
    v89 = *((_DWORD *)this + 234);
    if (v89 == 4 || v89 == 2)
    {
      memcpy(*((void **)this + 146), *((const void **)this + 118), 4 * *((unsigned int *)this + 2));
    }
    else if (v89)
    {
      vDSP_vsmul(v32, 1, (const float *)this + 188, *((float **)this + 146), 1, *((int *)this + 214));
      if ((*((_DWORD *)this + 234) | 2) == 3)
        vDSP_vmax((const float *)(*((_QWORD *)this + 146) + 4 * *((int *)this + 129)), 1, (const float *)(*((_QWORD *)this + 118) + 4 * *((int *)this + 129)), 1, (float *)(*((_QWORD *)this + 146) + 4 * *((int *)this + 129)), 1, *((int *)this + 214));
    }
    else
    {
      vDSP_vsmul(v32, 1, (const float *)this + 188, *((float **)this + 146), 1, *((int *)this + 214));
    }
    v95 = v67;
    vDSP_vmin(*((const float **)this + 146), 1, v31, 1, *((float **)this + 146), 1, *((int *)this + 214));
    v96 = (const float *)*((unsigned int *)this + 214);
    if ((int)v96 >= 1)
    {
      v97 = (float *)*((_QWORD *)this + 146);
      v98 = v31;
      v99 = (float *)v88;
      v100 = *((unsigned int *)this + 214);
      do
      {
        v101 = *v98++;
        v102 = v101;
        v103 = *v97++;
        v104 = v102 - v103;
        if (v102 <= v103)
          v105 = 0.0;
        else
          v105 = v104;
        *v99++ = v105;
        --v100;
      }
      while (v100);
    }
    VPEchoGateV3::Gate_spread_energy(*((VPEchoGateV3 **)this + 147), v88, *((const float **)this + 106), *((float **)this + 116), v96, *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    v106 = *((_DWORD *)this + 203);
    if (v106 + 1 < *((_DWORD *)this + 204))
      v107 = v106 + 1;
    else
      v107 = 0;
    *((_DWORD *)this + 203) = v107;
    v108 = *((_DWORD *)this + 214);
    v109 = v107 * v108;
    memcpy((void *)(*((_QWORD *)this + 109) + 4 * v107 * v108), *((const void **)this + 147), 4 * v108);
    v110 = *((_DWORD *)this + 214);
    v111 = *((_QWORD *)this + 147);
    if (v110 >= 1)
    {
      v112 = (float *)(*((_QWORD *)this + 110) + 4 * v109);
      v113 = (float *)*((_QWORD *)this + 147);
      v114 = *((unsigned int *)this + 214);
      do
      {
        v115 = *v113++;
        *v112++ = log10f(v115 + 1.0e-15);
        --v114;
      }
      while (v114);
    }
    VPEchoGateV3::Gate_spread_energy((VPEchoGateV3 *)(*((_QWORD *)this + 145) + 4 * *((int *)this + 208)), (const float *)(v111 + 4 * *((int *)this + 208)), *((const float **)this + 106), *((float **)this + 116), (const float *)(v110 - *((_DWORD *)this + 208)), *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    vDSP_vsmul((const float *)(*((_QWORD *)this + 145) + 4 * *((int *)this + 209)), 1, (const float *)this + 238, (float *)(*((_QWORD *)this + 147) + 4 * *((int *)this + 209)), 1, *((int *)this + 214) - (uint64_t)*((int *)this + 209));
    VPEchoGateV3::Gate_spread_energy((VPEchoGateV3 *)(*((_QWORD *)this + 145) + 4 * *((int *)this + 209)), (const float *)(*((_QWORD *)this + 147) + 4 * *((int *)this + 209)), *((const float **)this + 106), *((float **)this + 116), (const float *)(*((_DWORD *)this + 214) - *((_DWORD *)this + 209)), *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    vDSP_vsmul((const float *)(*((_QWORD *)this + 145) + 4 * *((int *)this + 210)), 1, (const float *)this + 239, (float *)(*((_QWORD *)this + 147) + 4 * *((int *)this + 210)), 1, *((int *)this + 214) - (uint64_t)*((int *)this + 210));
    v116 = *((_DWORD *)this + 203);
    v117 = *((_DWORD *)this + 214) * v116;
    memcpy(*((void **)this + 115), (const void *)(*((_QWORD *)this + 110) + 4 * v117), 4 * v66);
    memcpy(*((void **)this + 116), (const void *)(*((_QWORD *)this + 109) + 4 * v117), 4 * v66);
    v118 = *((_DWORD *)this + 204);
    if (v118 > 1)
    {
      for (i = 1; i < v118; ++i)
      {
        if (v116 + 1 < v118)
          ++v116;
        else
          v116 = 0;
        v120 = *((_DWORD *)this + 214) * v116;
        vDSP_vadd((const float *)(*((_QWORD *)this + 110) + 4 * v120), 1, *((const float **)this + 115), 1, *((float **)this + 115), 1, v66);
        vDSP_vadd((const float *)(*((_QWORD *)this + 109) + 4 * v120), 1, *((const float **)this + 116), 1, *((float **)this + 116), 1, v66);
        v118 = *((_DWORD *)this + 204);
      }
    }
    vDSP_vsmul(*((const float **)this + 115), 1, (const float *)this + 206, *((float **)this + 115), 1, *((int *)this + 214));
    vDSP_vsmul(*((const float **)this + 116), 1, (const float *)this + 206, *((float **)this + 116), 1, *((int *)this + 214));
    v121 = (const float *)*((_QWORD *)this + 145);
    v122 = *((unsigned int *)this + 129);
    if ((int)v122 < 1)
    {
      LODWORD(v122) = 0;
      v123 = (float *)*((_QWORD *)this + 145);
    }
    else
    {
      memset_pattern16(*((void **)this + 145), &unk_1B6627B80, 4 * v122);
      v123 = (float *)&v121[(v122 - 1) + 1];
    }
    v382 = v27;
    if ((int)v122 >= v66)
    {
      v67 = v95;
    }
    else
    {
      v124 = v66 - (unint64_t)v122;
      v125 = (float *)(*((_QWORD *)this + 115) + 4 * v122);
      v126 = (float *)(*((_QWORD *)this + 116) + 4 * v122);
      do
      {
        v127 = *((float *)this + 202);
        v128 = *v126++;
        v129 = log10f(v128 + 1.0e-15);
        v130 = *v125++;
        v131 = v127 * (float)(v129 - v130);
        if (v131 < 0.0)
          v131 = 0.0;
        if (v131 > 1.0)
          v131 = 1.0;
        v403 = v131;
        *v123++ = v131;
        --v124;
      }
      while (v124);
      LODWORD(v122) = v66;
      v67 = v95;
    }
    v132 = *((int *)this + 214);
    if ((int)v122 < (int)v132)
      memset_pattern16(v123, &unk_1B6627B80, 4 * (v132 + ~(_DWORD)v122) + 4);
    v133 = (float *)*((_QWORD *)this + 115);
    if (*((float *)this + 75) < 0.015)
    {
      vDSP_vadd(v121, 1, *((const float **)this + 111), 1, *((float **)this + 115), 1, v66);
      v403 = 0.5;
      vDSP_vsmul(v133, 1, &v403, v133, 1, v66);
      v132 = *((int *)this + 214);
      if ((int)v132 > v66)
      {
        v134 = v132 - v66;
        v135 = &v133[v66];
        v136 = &v121[v66];
        do
        {
          v137 = *(_DWORD *)v136++;
          *(_DWORD *)v135++ = v137;
          --v134;
        }
        while (v134);
      }
      v133 = (float *)*((_QWORD *)this + 111);
    }
    memcpy(v133, v121, 4 * v132);
    v138 = (const float *)*((_QWORD *)this + 113);
    v139 = *((_DWORD *)this + 129);
    if (v139 < 1)
    {
      v145 = 0;
      v142 = (float *)*((_QWORD *)this + 113);
      v34 = (float *)&unk_1B6629000;
      v143 = (float *)((char *)this + 752);
    }
    else
    {
      v140 = (float *)*((_QWORD *)this + 147);
      v141 = *((unsigned int *)this + 129);
      v142 = (float *)*((_QWORD *)this + 113);
      v34 = (float *)&unk_1B6629000;
      v143 = (float *)((char *)this + 752);
      do
      {
        v144 = *v140++;
        *v142++ = v144 * 0.0316;
        --v141;
      }
      while (v141);
      v145 = v139;
    }
    v146 = *((unsigned int *)this + 214);
    if ((int)v145 < (int)v146)
    {
      v147 = (float *)(*((_QWORD *)this + 115) + 4 * v139);
      v148 = v146 - v145;
      v149 = (float *)(*((_QWORD *)this + 147) + 4 * v145);
      do
      {
        v150 = *v147++;
        v151 = (float)(1.0 - v150) * *((float *)this + 414);
        v152 = llroundf(v151 + (float)(v150 * *((float *)this + 413)));
        v403 = v151 + (float)(v150 * *((float *)this + 413));
        if (v152 >= 25)
          v152 = 25;
        v153 = *v149++;
        *v142++ = *((float *)this + (v152 & ~(v152 >> 31)) + 263) * v153;
        --v148;
      }
      while (v148);
    }
    v154 = (float)(v83 * (float)(v29 + v87));
    v155 = (float *)*((_QWORD *)this + 145);
    v403 = 0.8;
    v402 = 0.2;
    vDSP_vsmul(v138, 1, &v403, v155, 1, v66);
    vDSP_vsmul(*((const float **)this + 112), 1, &v402, *((float **)this + 112), 1, v66);
    vDSP_vadd(v155, 1, *((const float **)this + 112), 1, v155, 1, v66);
    vDSP_vmin(*((const float **)this + 113), 1, v155, 1, v155, 1, v66);
    memcpy(*((void **)this + 112), *((const void **)this + 113), 4 * *((int *)this + 214));
    v156 = *((_DWORD *)this + 129);
    v157 = 0.0;
    if (v66 > v156)
    {
      v158 = *((_QWORD *)this + 146);
      v159 = v34[564];
      v160 = *((int *)this + 129);
      do
      {
        v161 = *(float *)(v158 + 4 * v160);
        v162 = v155[v160];
        if (v161 > v162)
        {
          v163 = v162 * 3.0;
          v164 = (float)(v161 - v162) * 0.25;
          v165 = (float)(v161 + (float)(v162 * -3.0)) + (float)(v162 * 0.5);
          if (v161 <= v163)
            v166 = v164;
          else
            v166 = v165;
          v402 = v166;
          v167 = v159 + (float)((float)(*((float *)this + 240) * 4.0) * *(float *)(v158 + 4 * v160));
          v403 = (float)((float)(*(float *)(*((_QWORD *)this + 147) + 4 * v160) / v167)
                       * (float)(*(float *)(*((_QWORD *)this + 147) + 4 * v160) / v167))
               + 1.0;
          v157 = v157 + (float)(v166 / v403);
        }
        ++v160;
      }
      while (v66 != v160);
    }
    v168 = (float)(v157 * (float)(1.0 / *v143)) / v62;
    v169 = v34[564];
    v170 = (float)(v168 + (float)((float)(v66 - v156) * v169)) / *((float *)this + 157);
    if (v170 > 1.0)
      v170 = 1.0;
    v171 = log10f(v170) * 10.0;
    v172 = -20.0;
    if (v171 >= -20.0)
    {
      v172 = v171;
      if (v171 > 0.0)
        v172 = 0.0;
    }
    v173 = (float)(*((float *)this + 137) * *((float *)this + 215)) + (float)(*((float *)this + 136) * v172);
    if (v173 > 0.0)
      v173 = 0.0;
    v174 = (float)(*((float *)this + 139) * *((float *)this + 216)) + (float)(*((float *)this + 138) * v172);
    if (v174 > 0.0)
      v174 = 0.0;
    v175 = (float)(*((float *)this + 141) * *((float *)this + 217)) + (float)(*((float *)this + 140) * v172);
    if (v175 > 0.0)
      v175 = 0.0;
    *((float *)this + 215) = v173;
    *((float *)this + 216) = v174;
    *((float *)this + 217) = v175;
    if (v173 >= v175)
      v175 = v173;
    if (v175 >= v174)
      v176 = v175;
    else
      v176 = v174;
    v177 = (float *)*((_QWORD *)this + 114);
    v178 = *((unsigned int *)this + 205);
    v84 = "gorithmE";
    if ((int)v178 <= 1)
    {
      *v177 = v176;
    }
    else
    {
      v179 = 4 * v178 - 8;
      v180 = v178 + 1;
      do
      {
        *(float *)((char *)v177 + v179 + 4) = *(float *)((char *)v177 + v179);
        v179 -= 4;
        --v180;
      }
      while (v180 > 2);
      *v177 = v176;
      v181 = v177 + 1;
      v182 = v178 - 1;
      do
      {
        v183 = *v181++;
        v184 = v183;
        if (v176 < v183)
          v176 = v184;
        --v182;
      }
      while (v182);
    }
    v185 = (v86 + 1.0e-20) / (v154 + 1.0e-20);
    v90 = *((float *)this + 136);
    v91 = *((float *)this + 137);
    v93 = v91 * *((float *)this + 159);
    v380 = *((float *)this + 157);
    v81 = *((float *)this + 145);
    v92 = (float)(v91 * *((float *)this + 148)) + (float)(v90 * v81);
    if ((float)(log10f((float)(v92 + v169) / (float)((float)(v93 + (float)(v90 * v380)) + v169)) * 10.0) <= (float)(*((float *)this + 303) + 3.0))
    {
      v188 = -20.0;
      if (v176 >= -20.0)
        v188 = v176;
      v94 = 0.0;
      v187 = 0.0 - roundf(v188);
      if (v187 >= 0.0)
        v94 = v187;
      if (v94 > 25.0)
        v94 = 25.0;
    }
    else
    {
      v186 = -10.0;
      if (v176 >= -10.0)
        v186 = v176;
      v94 = 0.0;
      v187 = 0.0 - roundf(v186);
    }
    v395 = 0.0;
    if (v187 < 0.0)
      v187 = 0.0;
    if (v187 > 25.0)
      v187 = 25.0;
    v27 = v382;
    if (v185 <= 6.0 || *v143 >= 0.05)
    {
      v82 = *((float *)this + 199);
      v83 = v380;
      goto LABEL_209;
    }
    v83 = v380 * *((float *)this + (int)v94 + 263);
    *((float *)this + 157) = v83;
    v82 = *((float *)this + 199) * *((float *)this + (int)v187 + 263);
  }
  v395 = v94;
LABEL_209:
  v375 = v27 + v385;
  v189 = *((float *)this + 146);
  v190 = *((float *)this + 122);
  *((float *)this + 145) = v92;
  v191 = (float)(v91 * *((float *)this + 149)) + (float)(v90 * v189);
  *((float *)this + 146) = v191;
  v192 = (float)(v91 * *((float *)this + 150)) + (float)(v90 * v190);
  *((float *)this + 122) = v192;
  v193 = *((float *)this + 140);
  v194 = *((float *)this + 141);
  v195 = (float)(v194 * *((float *)this + 154)) + (float)(v193 * v81);
  *((float *)this + 151) = v195;
  v196 = (float)(v194 * *((float *)this + 155)) + (float)(v193 * v189);
  *((float *)this + 152) = v196;
  v197 = (float)(v194 * *((float *)this + 156)) + (float)(v193 * v190);
  *((float *)this + 123) = v197;
  *((float *)this + 148) = v92;
  *((float *)this + 149) = v191;
  *((float *)this + 150) = v192;
  *((float *)this + 154) = v195;
  *((float *)this + 155) = v196;
  *((float *)this + 156) = v197;
  v198 = v93 + (float)(v90 * v83);
  *((float *)this + 157) = v198;
  v199 = (float)(v194 * *((float *)this + 160)) + (float)(v193 * v83);
  *((float *)this + 158) = v199;
  v200 = (float)(v91 * *((float *)this + 200)) + (float)(v90 * v82);
  *((float *)this + 199) = v200;
  v201 = (float)(v194 * *((float *)this + 201)) + (float)(v193 * v82);
  *((float *)this + 198) = v201;
  *((float *)this + 159) = v198;
  *((float *)this + 160) = v199;
  *((float *)this + 200) = v200;
  *((float *)this + 201) = v201;
  memmove((char *)this + 328, (char *)this + 324, 0x4CuLL);
  v202 = 0;
  do
  {
    *((_DWORD *)this + v202 + 120) = *((_DWORD *)this + v202 + 119);
    v203 = v202 + 19;
    --v202;
  }
  while (v203 > 1);
  *((_DWORD *)this + 81) = *((_DWORD *)this + 122);
  *((_DWORD *)this + 101) = *((_DWORD *)this + 123);
  v204 = *((float *)this + 80);
  *(float *)&v205 = 0.0;
  if (v204 > 0.0)
  {
    if (v204 <= 1000000000.0)
      goto LABEL_215;
    *(float *)&v205 = 2000.0;
  }
  *v392 = *(float *)&v205;
  v204 = *(float *)&v205;
LABEL_215:
  v206 = v204 * *((float *)this + 77);
  if (v206 > 19.0)
    v206 = 19.0;
  v207 = llroundf(v206);
  v208 = v207 & ~(v207 >> 31);
  if (v207 <= 1)
    v207 = 1;
  v209 = v207 - 1;
  if (v208 > 0x12)
  {
    v208 = 19;
    v209 = 19;
  }
  *(float *)&v400 = (float)(int)v209 + 0.5;
  v210 = (float)((float)(int)v208 + 0.5) - v206;
  if (v210 > 1.0)
    v210 = 1.0;
  if (v210 < 0.0)
    v210 = 0.0;
  v211 = 1.0 - v210;
  v212 = (float)(*((float *)this + v209 + 81) * v210) + v211 * *((float *)this + v208 + 81);
  *((float *)this + 147) = v212;
  v213 = (float)(*((float *)this + v209 + 101) * v210) + v211 * *((float *)this + v208 + 101);
  v214 = v34[564];
  v386 = log10f(*((float *)this + 145) + v214) * 10.0;
  *((float *)this + 145) = v386;
  v383 = log10f(*((float *)this + 146) + v214) * 10.0;
  *((float *)this + 146) = v383;
  v381 = log10f(v212 + v214) * 10.0;
  *((float *)this + 147) = v381;
  v215 = log10f(*((float *)this + 151) + v214) * 10.0;
  *((float *)this + 151) = v215;
  v216 = log10f(*((float *)this + 152) + v214) * 10.0;
  *((float *)this + 152) = v216;
  v217 = log10f(v213 + v214) * 10.0;
  *((float *)this + 153) = v217;
  v218 = log10f(*((float *)this + 157) + v214) * 10.0;
  *((float *)this + 157) = v218;
  v219 = log10f(*((float *)this + 158) + v214) * 10.0;
  *((float *)this + 158) = v219;
  v220 = log10f(*((float *)this + 199) + v214) * 10.0;
  *((float *)this + 199) = v220;
  v221 = log10f(*((float *)this + 198) + v214) * 10.0;
  *((float *)this + 198) = v221;
  v393 = v215;
  if (v386 >= v215)
    v222 = v386;
  else
    v222 = v215;
  if (v383 >= v216)
    v223 = v383;
  else
    v223 = v216;
  if (v381 >= v217)
    v224 = v381;
  else
    v224 = v217;
  if (v218 >= v219)
    v225 = v218;
  else
    v225 = v219;
  if (v220 >= v221)
    v221 = v220;
  v384 = v221;
  v387 = v219;
  *((float *)&v400 + 1) = v225;
  v226 = *((float *)this + 401);
  v227 = v225;
  if (v223 > v226)
  {
    v228 = *((float *)this + 403);
    v229 = v223 - v226;
    v230 = v224 - v228;
    v231 = v224 <= v228 || v230 <= v229;
    v227 = v225;
    if (!v231)
    {
      v283 = v225 + v230;
      v227 = v225 + 6.0;
      *(float *)&v400 = v225 + 6.0;
      if (v283 <= (float)(v225 + 6.0))
      {
        *((float *)&v400 + 1) = v283;
        v227 = v283;
      }
      else
      {
        *((float *)&v400 + 1) = v225 + 6.0;
      }
    }
  }
  if (v395 <= 0.0 || (v232 = v227 - v225, (float)(v227 - v225) <= 0.0))
  {
    v236 = v227;
  }
  else
  {
    v233 = 6.0;
    if (v232 <= 6.0)
    {
      v233 = v232;
      if (v232 < 0.0)
        v233 = 0.0;
    }
    v234 = (float)((float)(v388 * *((float *)this + 189)) / *((float *)this + (int)v233 + 263))
         - (float)(v388 * *((float *)this + 189));
    v235 = 0.0;
    v236 = v227;
    v237 = v393;
    if (v234 > 0.0)
    {
      v238 = __exp10f(v222 * 0.1) - v234;
      if (v238 >= 0.0)
        v239 = v238 + v214;
      else
        v239 = v214;
      v235 = v222 + (float)(log10f(v239) * -10.0);
      v237 = *((float *)this + 151);
      v387 = *((float *)this + 158);
      v236 = *((float *)&v400 + 1);
    }
    if (v235 < (float)(v395 * 0.75))
      v235 = v395 * 0.75;
    v222 = v222 - v235;
    v393 = v237 - v235;
    *((float *)this + 151) = v237 - v235;
  }
  v240 = *((float *)this + 304);
  *((float *)this + 181) = v240;
  *((_DWORD *)this + 182) = -1023279104;
  if (*((float *)this + 409) == 1.0)
  {
    v241 = *((float *)this + 302);
    if (v241 < -85.0 && v376 < 5.0 && v240 > -10.0)
    {
      v242 = (float)(v227 + v375) + -20.0;
      v243 = v240;
      if (v242 < (float)((float)(v222 + v375) + -6.0))
      {
        v244 = -10.0;
        if (v242 < -95.0
          || (v244 = -6.0, (float)(v241 + -4.5) > v227)
          || (v244 = -4.0, (float)(v241 + -3.0) > v227)
          || (v244 = -3.0, v243 = v240, (float)(v241 + -1.5) > v227))
        {
          v243 = v240 + v244;
          *((float *)this + 181) = v240 + v244;
          *((_DWORD *)this + 182) = -1024458752;
        }
      }
      if ((float)(v222 + v375) < -90.0)
        *((_DWORD *)this + 182) = -1025769472;
      if (v240 >= -5.0 && (v245 = -10.0, v243 < -10.0) || (v245 = -15.0, v243 < -15.0))
        *((float *)this + 181) = v245;
    }
  }
  vDSP_sve(v31, 1, (float *)this + 161, *((unsigned int *)this + 72));
  v246 = *((float *)this + 161);
  v247 = (float)(*((float *)this + 137) * *((float *)this + 162)) + (float)(*((float *)this + 136) * v246);
  *((float *)this + 162) = v247;
  v248 = (float)(*((float *)this + 141) * *((float *)this + 163)) + (float)(*((float *)this + 140) * v246);
  *((float *)this + 163) = v248;
  if (v247 >= v248)
    v248 = v247;
  *((float *)this + 164) = v248;
  v249 = *((unsigned int *)this + 176);
  v250 = *((unsigned int *)this + 177);
  if (v249 >= v250)
  {
    v254 = (const float *)*((_QWORD *)this + 86);
    v255 = (v250 - 1);
    if ((_DWORD)v250 == 1)
    {
      v255 = 0;
    }
    else
    {
      memmove(*((void **)this + 86), v254 + 1, 4 * (v250 - 1));
      v247 = *((float *)this + 162);
    }
    v254[v255] = v247;
    v252 = (float *)((char *)this + 660);
    v251 = v254;
    v253 = v250;
  }
  else
  {
    v251 = (const float *)*((_QWORD *)this + 86);
    v251[v249] = v247;
    v252 = (float *)((char *)this + 660);
    v253 = (v249 + 1);
  }
  vDSP_minv(v251, 1, v252, v253);
  v256 = *((unsigned int *)this + 176);
  v257 = *((unsigned int *)this + 178);
  if (v256 >= v257)
  {
    v261 = (const float *)*((_QWORD *)this + 87);
    v262 = (v257 - 1);
    if ((_DWORD)v257 == 1)
      v262 = 0;
    else
      memmove(*((void **)this + 87), v261 + 1, 4 * (v257 - 1));
    v261[v262] = *((const float *)this + 162);
    v259 = (float *)((char *)this + 664);
    v258 = v261;
    v260 = v257;
  }
  else
  {
    v258 = (const float *)*((_QWORD *)this + 87);
    v258[v256] = *((const float *)this + 162);
    v259 = (float *)((char *)this + 664);
    v260 = (v256 + 1);
  }
  vDSP_minv(v258, 1, v259, v260);
  v263 = *((_DWORD *)this + 176);
  if (v263 < *((_DWORD *)this + 177) || v263 < *((_DWORD *)this + 178))
    *((_DWORD *)this + 176) = v263 + 1;
  v264 = *((float *)this + 165) + 1.0e-15;
  v265 = log10f(v264) * 10.0;
  v266 = *((float *)this + 166) + 1.0e-15;
  v267 = log10f(v266) * 10.0;
  v268 = *((float *)this + 162) + 1.0e-15;
  v269 = log10f(v268) * 10.0;
  v270 = v265 - v269;
  *((float *)this + 167) = v265 - v269;
  v271 = v267 - v269;
  *((float *)this + 168) = v271;
  if (v265 >= -70.0)
  {
    if (v265 >= -50.0)
      goto LABEL_297;
    v270 = (float)(v270 + -15.0) + (float)((float)(v265 + 60.0) * 1.5);
  }
  else
  {
    v270 = v270 + -30.0;
  }
  *((float *)this + 167) = v270;
LABEL_297:
  if (v267 < -70.0)
  {
    v271 = v271 + -30.0;
LABEL_301:
    *((float *)this + 168) = v271;
    goto LABEL_302;
  }
  if (v267 < -50.0)
  {
    v271 = (float)(v271 + -15.0) + (float)((float)(v267 + 60.0) * 1.5);
    goto LABEL_301;
  }
LABEL_302:
  *(float *)&v272 = -70.0;
  if (v270 < -70.0 || (*(float *)&v272 = 0.0, v270 > 0.0))
  {
    *((float *)this + 167) = *(float *)&v272;
    v270 = *(float *)&v272;
  }
  *(float *)&v273 = -70.0;
  if (v271 < -70.0 || (*(float *)&v273 = 0.0, v271 > 0.0))
  {
    *((float *)this + 168) = *(float *)&v273;
    v271 = *(float *)&v273;
  }
  v274 = *((float *)this + 405);
  v275 = *((float *)this + 121);
  v276 = 0.0;
  v277 = v274;
  v278 = 0.0;
  if (v275 <= 7000.0)
  {
    v279 = v275 + *((float *)this + 76);
    *((float *)this + 121) = v279;
    v280 = *((float *)this + 408);
    v277 = v274;
    v278 = 0.0;
    if (v280 > 0.0)
    {
      v277 = v274;
      v278 = 0.0;
      if (v280 <= 1.0)
      {
        v281 = v279;
        v282 = v280;
        if (v280 * 2000.0 <= v279)
        {
          if (v282 * 3000.0 <= v281)
          {
            v231 = v282 * 5000.0 <= v281;
            v277 = v274;
            v278 = 0.0;
            if (!v231)
            {
              v277 = 5.0;
              v278 = 5.0;
            }
          }
          else
          {
            v278 = 10.0;
            v277 = 3.0;
          }
        }
        else
        {
          v278 = 20.0;
          v277 = 1.0;
          if (*((float *)this + 415) == 1.0)
            v277 = 0.5;
        }
      }
    }
  }
  if (v277 <= v274)
    v284 = v277;
  else
    v284 = v274;
  v285 = *((float *)this + 147);
  if (v285 >= -100.0)
  {
    if (v285 >= -90.0)
    {
      v276 = v376;
    }
    else
    {
      *((float *)&v400 + 1) = (float)(v285 + 100.0) * 0.1;
      v276 = v376 * *((float *)&v400 + 1);
    }
  }
  v286 = (float)(v222 - v236) + -3.0;
  if (!v67)
    v286 = v222 - v236;
  *((_DWORD *)this + 180) = 1120403456;
  v287 = v285 > -100.0;
  if (v286 >= 30.0)
    v287 = 0;
  if (v285 > -85.0)
    v287 = 1;
  v288 = v388 > 5.0e-10 && v287;
  v289 = *((float *)this + 303);
  if (v288 && v276 > v284 && ((float)(v286 - v395) < (float)(v289 + 6.0) || v274 <= 20.0))
  {
    v271 = v271 - v278;
    *((_DWORD *)this + 179) = 0;
    goto LABEL_359;
  }
  v290 = v393 - v387;
  if (v286 > v289 && v384 < *((float *)this + 402))
  {
    *((_DWORD *)this + 179) = 2;
LABEL_356:
    v295 = (float)(v290 - v378.f32[0]) + -6.0;
    *((float *)this + 180) = v295;
    v292 = 0.0;
    if (v295 < 0.0)
      *((_DWORD *)this + 180) = 0;
    goto LABEL_377;
  }
  if (v286 <= *((float *)this + 181))
  {
    v293 = *((float *)this + 301);
    *((_DWORD *)this + 179) = 0;
    if (v286 <= v293)
    {
      v271 = -70.0;
    }
    else
    {
      v294 = (float)(v290 - v378.f32[0]) + -6.0;
      *((float *)this + 180) = v294;
      if (v294 < 0.0)
        *((_DWORD *)this + 180) = 0;
    }
    goto LABEL_359;
  }
  v291 = *((float *)this + 302);
  if (v222 >= v291)
  {
    *((_DWORD *)this + 170) = 0;
    *((_DWORD *)this + 179) = 2;
    if (v286 <= *((float *)this + 304))
    {
      v302.i32[0] = *((_DWORD *)this + 402);
      v302.f32[1] = v393 - v387;
      v303.i32[1] = v378.i32[1];
      v303.i32[0] = *((_DWORD *)this + 152);
      v304 = vsub_f32(v302, v303);
      __asm { FMOV            V1.2S, #-6.0 }
      v310 = vadd_f32(v304, _D1);
      v311 = (float32x2_t)vdup_n_s32(0xC3960000);
      v312 = vbsl_s8((int8x8_t)vcgt_f32(v311, v310), (int8x8_t)v311, (int8x8_t)v310);
      *((_DWORD *)this + 180) = v312.i32[0];
      v292 = 0.0;
      if (*(float *)v312.i32 > *(float *)&v312.i32[1])
        *((_DWORD *)this + 180) = v312.i32[1];
      goto LABEL_377;
    }
    goto LABEL_356;
  }
  if (v227 < -85.0 && v227 < v291 && *((float *)this + 409) == 1.0)
  {
    *((_DWORD *)this + 179) = 2;
    v292 = 0.0;
LABEL_377:
    v299 = v377;
    goto LABEL_378;
  }
  v301 = *((_DWORD *)this + 179);
  v292 = 0.0;
  v299 = v377;
  if (v301 != 2)
  {
    v271 = v270 + 0.0;
    v299 = v377;
    if (v301)
    {
LABEL_368:
      v292 = -70.0;
      if (v271 >= -70.0)
      {
        if (v271 <= 0.0)
          v292 = v271;
        else
          v292 = 0.0;
      }
      goto LABEL_378;
    }
LABEL_359:
    v296 = -5.0;
    if (v375 >= -5.0)
    {
      v296 = v375;
      if (v375 > 20.0)
        v296 = 20.0;
    }
    v297 = *((float *)this + 182) - v296;
    v298 = v222 + v271;
    if ((float)((float)((float)(v227 + v271) - v395) + -25.0) > (float)(v222 + v271))
      v298 = (float)((float)(v227 + v271) - v395) + -25.0;
    v299 = 0.0;
    if (v298 < v297)
    {
      v300 = v297 - v298;
      if (v300 > 100.0)
        v300 = 100.0;
      v271 = v271 + v300;
      *((float *)this + 170) = v271;
    }
    goto LABEL_368;
  }
LABEL_378:
  v313 = *((float *)this + 169);
  v314 = *((float *)this + 75);
  v315 = (float)(v292 - v313) / v314;
  v316 = 5000.0;
  if (v315 <= 5000.0)
  {
    v316 = v315;
    if (v315 < -5000.0)
      v316 = -5000.0;
  }
  v317 = v313 + (float)(v316 * v314);
  v318 = "10AudioMeter9AlgorithmE";
  v319 = (double *)&unk_1B662C000;
  if (v317 <= v313)
  {
    v320 = v313 * 0.7 + v317 * 0.3;
    *((float *)this + 170) = v320;
    *((_DWORD *)this + 347) = 0;
  }
  else
  {
    if ((*((_BYTE *)this + 1532) & 2) != 0 && v299 < *((float *)this + 393))
      v320 = (float)(v313 * *((float *)this + 343)) + (float)(*((float *)this + 344) * v317);
    else
      v320 = v313 * 0.2 + v317 * 0.8;
    *((float *)this + 170) = v320;
    v321 = (float)(v313 - v320) + *((float *)this + 347);
    if (v321 < -20.0)
      v321 = -20.0;
    *((float *)this + 347) = v321;
  }
  *((float *)this + 169) = v320;
  *((float *)this + 351) = v299;
  v322 = *((float *)v84 + 896);
  v323 = __exp10f(v320 * v322);
  v399 = v323;
  if (*((_DWORD *)this + 375))
  {
    v324 = *((float *)this + 374);
    if (v323 < v324)
      v324 = v323;
    v323 = fmaxf(v324, 0.0);
    v399 = v323;
    v325 = log10f(v323) * 20.0;
    *((float *)this + 169) = v325;
    *((float *)this + 170) = v325;
  }
  *((float *)this + 183) = v323;
  if (*((_BYTE *)this + 736))
  {
    if (!*((_DWORD *)this + 382))
      v399 = 1.0;
    realp = v396.realp;
    vDSP_vsmul(__A.realp, 1, &v399, v396.realp, 1, *((unsigned int *)this + 72));
    imagp = v396.imagp;
    vDSP_vsmul(__A.imagp, 1, &v399, v396.imagp, 1, *((unsigned int *)this + 72));
    *(_QWORD *)((char *)this + 1380) = 0;
    if (v373 <= 0.0 && (*((_DWORD *)this + 383) & 1) != 0)
    {
      v403 = 0.0;
      v402 = 0.0;
      v328 = v377 >= *((float *)this + 393) || v288;
      if ((v328 & 1) == 0)
      {
        v402 = 9.3132e-10;
        vDSP_vsmul(a9, 1, &v402, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        vDSP_vmul(*((const float **)this + 153), 1, a10, 1, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        v329 = *((float *)this + 386);
        v330 = *((float *)this + 342);
        v331 = 1360;
        if (v329 > v330)
          v331 = 1352;
        v332 = 1364;
        if (v329 > v330)
          v332 = 1356;
        v333 = *(float *)((char *)this + v331);
        LODWORD(v401) = *(_DWORD *)((char *)this + v332);
        *((float *)&v401 + 1) = v333;
        *((float *)this + 342) = (float)(v329 * *(float *)&v401) + (float)(v333 * v330);
        vDSP_vsmul(*((const float **)this + 153), 1, (const float *)&v401, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        vDSP_vsma(*((const float **)this + 159), 1, (const float *)&v401 + 1, *((const float **)this + 153), 1, *((float **)this + 159), 1, *((unsigned int *)this + 72));
      }
      vDSP_meanv(a7, 1, &v403, *((unsigned int *)this + 72));
      v334 = *((float *)this + 342);
      if (v334 <= *((float *)this + 392) || v334 >= *((float *)this + 390))
      {
        v335 = *((_DWORD *)this + 331) + 1;
        *((_DWORD *)this + 331) = v335;
        v336 = *((_DWORD *)this + 332);
        v337 = v335 < v336;
      }
      else
      {
        v335 = *((_DWORD *)this + 331);
        v336 = *((_DWORD *)this + 332);
        v337 = 1;
      }
      if (v335 > v336)
        *((_DWORD *)this + 331) = v336;
      if (v299 > *((float *)this + 393))
      {
        *((_DWORD *)this + 330) = 0;
        goto LABEL_439;
      }
      v338 = *((float *)this + 384) > 0.0;
      if ((float)(v403 * v399) >= *((float *)this + 387))
        v338 = 0;
      if (v338 && v337)
      {
        *((_DWORD *)this + 330) = 1065353216;
LABEL_421:
        v340 = __exp10f((float)(*((float *)this + 347) + fminf(*((float *)this + 391) - v334, 0.0)) * v322);
        v341 = *((unsigned int *)this + 72);
        if ((_DWORD)v341)
        {
          v342 = 0;
          v343 = v340 * *((float *)this + 385);
          v344 = (float *)*((_QWORD *)this + 156);
          v345 = *((_QWORD *)this + 159);
          v346 = *((unsigned __int8 *)this + 1348);
          do
          {
            v344[2 * v342] = v343 * sqrtf(*(float *)(v345 + 4 * v342));
            if (v346)
            {
              v346 = 0;
              *((_BYTE *)this + 1348) = 0;
              v362 = *((float *)this + 336);
            }
            else
            {
              v347 = *((_DWORD *)this + 333);
              do
              {
                v348 = v347 / 0xADC8;
                v349 = 48271 * (v347 % 0xADC8);
                v348 *= 3399;
                _CF = v349 >= v348;
                v350 = v349 - v348;
                if (_CF)
                  v351 = 0;
                else
                  v351 = 0x7FFFFFFF;
                v352 = v351 + v350;
                v353 = (float)(v352 - 1) * 4.6566e-10;
                v354 = v352 / 0xADC8;
                v355 = 48271 * (v352 % 0xADC8);
                v354 *= 3399;
                _CF = v355 >= v354;
                v356 = v355 - v354;
                if (_CF)
                  v357 = 0;
                else
                  v357 = 0x7FFFFFFF;
                v347 = v357 + v356;
                v358 = (float)(v353 * 2.0) + -1.0;
                v359 = (float)((float)((float)(v347 - 1) * 4.6566e-10) * 2.0) + -1.0;
                v360 = (float)(v359 * v359) + (float)(v358 * v358);
              }
              while (v360 > 1.0 || v360 == 0.0);
              *((_DWORD *)this + 333) = v347;
              v361 = sqrtf((float)(logf((float)(v359 * v359) + (float)(v358 * v358)) * -2.0) / v360);
              *((float *)this + 336) = v359 * v361;
              v346 = 1;
              *((_BYTE *)this + 1348) = 1;
              v362 = v358 * v361;
            }
            *(float *)((char *)v344 + ((8 * v342++) | 4)) = *((float *)this + 334)
                                                          + (float)(v362 * *((float *)this + 335));
          }
          while (v342 != v341);
          v318 = "N6DspLib10AudioMeter9AlgorithmE" + 8;
          v319 = (double *)&unk_1B662C000;
        }
        else
        {
          v341 = 0;
          v344 = (float *)*((_QWORD *)this + 156);
        }
        vDSP_rect(v344, 2, v344, 2, v341);
        *((float *)&v401 + 1) = (float)*((unsigned int *)this + 15);
        vDSP_vsmul(*((const float **)this + 156), 1, (const float *)&v401 + 1, *((float **)this + 156), 1, (2 * *((_DWORD *)this + 72)));
        vDSP_vadd(realp, 1, *((const float **)this + 156), 2, realp, 1, *((unsigned int *)this + 72));
        vDSP_vadd(imagp, 1, (const float *)(*((_QWORD *)this + 156) + 4), 2, imagp, 1, *((unsigned int *)this + 72));
        goto LABEL_439;
      }
      v339 = *((float *)this + 343) * *((float *)this + 330);
      *((float *)this + 330) = v339;
      if (v339 > 0.1)
        goto LABEL_421;
    }
  }
LABEL_439:
  v363 = v389 + *((float *)this + 180);
  v364 = v319[239];
  v365 = *((double *)v318 + 5);
  if (v363 >= v391)
    v366 = v363 * v365 + v391 * v364;
  else
    v366 = v363 * v364 + v391 * v365;
  v367 = v366;
  if (v367 > 0.0)
    v367 = 0.0;
  if (v367 < *((float *)this + 406))
    v367 = *((float *)this + 406);
  *((float *)this + 350) = v367;
  *((_DWORD *)this + 297) = *((_DWORD *)this + 298);
  if (*((_BYTE *)this + 736))
  {
    if (*((_BYTE *)this + 56))
    {
      memcpy(a12, __src.realp, 4 * *((unsigned int *)this + 17));
      memcpy(&a12[*((unsigned int *)this + 17)], __src.imagp, 4 * *((unsigned int *)this + 17));
    }
    else
    {
      MultiRadixRealFFT::RealOutOfPlaceInverseTransform((const vDSP_DFT_SetupStruct ***)this + 31, &v396, *((DSPComplex **)this + 12));
      vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 35), 1, *((float **)this + 12), 1, *((unsigned int *)this + 16));
      __C[0] = 1.0 / (float)*((unsigned int *)this + 15);
      vDSP_vsmul(*((const float **)this + 12), 1, __C, *((float **)this + 12), 1, *((unsigned int *)this + 16));
      vDSP_vadd(*((const float **)this + 12), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 16));
      memcpy(a12, *((const void **)this + 27), 4 * *((unsigned int *)this + 17));
      memmove(*((void **)this + 27), (const void *)(*((_QWORD *)this + 27) + 4 * *((unsigned int *)this + 17)), 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17)));
      bzero((void *)(*((_QWORD *)this + 27) + 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17))), 4 * *((unsigned int *)this + 17));
    }
  }
  return 0;
}

uint64_t VPEchoGateV3::Initialize(VPEchoGateV3 *this, int a2, int a3, const AudioStreamBasicDescription *a4, char a5)
{
  uint64_t v10;
  __int128 v11;
  const AudioStreamBasicDescription *v12;
  AudioBufferList *v13;
  AudioBufferList *v14;
  AudioBufferList *v15;
  AudioBufferList *v16;
  AudioBufferList *v17;
  AudioBufferList *v18;
  size_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  float v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint32x2_t v54;
  __int32 v55;
  size_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __float2 v74;
  int v75;
  size_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  const float *v85;
  float32x2_t v86;
  int32x2_t v87;
  float v88;
  float v89;
  signed int v90;
  signed int v91;
  signed int v92;
  signed int v93;
  signed int v94;
  signed int v95;
  signed int v96;
  float *v97;
  unsigned int v98;
  int v99;
  float v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  int v108;
  void *v109;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  unsigned int v124;
  void *v125;
  void *v126;
  unsigned int v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  double v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  int32x2_t v142;
  uint64x2_t v143;
  float *v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float v151;
  float64x2_t v152;
  float64x2_t v153;
  unint64_t v154;
  std::bad_alloc *exception;
  std::bad_alloc *v157;
  int64x2_t v158;
  uint64x2_t v159;
  float v160;
  float64x2_t __x;
  long double v162;
  float32x2_t v163;
  int32x2_t v164;
  int64x2_t v165;
  uint8_t buf[4];
  const char *v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  (*(void (**)(VPEchoGateV3 *))(*(_QWORD *)this + 48))(this);
  (*(void (**)(VPEchoGateV3 *))(*(_QWORD *)this + 48))(this);
  *((_DWORD *)this + 2) = a2;
  v10 = *(_QWORD *)&a4->mBitsPerChannel;
  v11 = *(_OWORD *)&a4->mBytesPerPacket;
  *((_OWORD *)this + 1) = *(_OWORD *)&a4->mSampleRate;
  *((_OWORD *)this + 2) = v11;
  *((_QWORD *)this + 6) = v10;
  *((_BYTE *)this + 56) = a5;
  v12 = (const AudioStreamBasicDescription *)(2 * a2);
  *((_DWORD *)this + 16) = (_DWORD)v12;
  *((_DWORD *)this + 17) = a2;
  *((_DWORD *)this + 15) = (_DWORD)v12;
  *((_DWORD *)this + 72) = a2 & 0x7FFFFFFF;
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), v12, (uint64_t)this + 80, v13);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 15), (uint64_t)this + 104, v14);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 128, v15);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 152, v16);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 176, v17);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 16), (uint64_t)this + 200, v18);
  v19 = (8 * *((_DWORD *)this + 15));
  v20 = malloc_type_malloc(v19, 0x2C8E6D5CuLL);
  v21 = v20;
  if ((_DWORD)v19 && !v20)
    goto LABEL_98;
  bzero(v20, v19);
  *((_QWORD *)this + 28) = v21;
  v22 = malloc_type_malloc(v19, 0x2C8E6D5CuLL);
  v23 = v22;
  if ((_DWORD)v19)
  {
    if (!v22)
      goto LABEL_98;
  }
  bzero(v22, v19);
  *((_QWORD *)this + 29) = v23;
  v24 = malloc_type_malloc(v19, 0x2C8E6D5CuLL);
  v25 = v24;
  if ((_DWORD)v19)
  {
    if (!v24)
      goto LABEL_98;
  }
  bzero(v24, v19);
  *((_QWORD *)this + 30) = v25;
  v26 = *((double *)this + 2);
  *((float *)this + 18) = v26;
  v27 = *((unsigned int *)this + 15);
  v28 = malloc_type_malloc(4 * v27, 0x2C8E6D5CuLL);
  v29 = (uint64_t)v28;
  if ((_DWORD)v27)
  {
    if (!v28)
      goto LABEL_98;
  }
  bzero(v28, 4 * v27);
  *((_QWORD *)this + 35) = v29;
  CreateMagicalWindow(v29, *((_DWORD *)this + 16));
  v30 = MultiRadixRealFFT::Initialize((VPEchoGateV3 *)((char *)this + 248), *((_DWORD *)this + 15));
  if (!(_DWORD)v30)
  {
    *((_QWORD *)this + 33) = operator new[]();
    *((_QWORD *)this + 34) = operator new[]();
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform((VPEchoGateV3 *)((char *)this + 248), *((DSPComplex **)this + 35), (DSPSplitComplex *)((char *)this + 264), 1.0);
    vDSP_zvmags((const DSPSplitComplex *)((char *)this + 264), 1, *((float **)this + 18), 1, *((unsigned int *)this + 72));
    vDSP_sve(*((const float **)this + 18), 1, (float *)this + 73, *((unsigned int *)this + 72));
    v33 = -(**((float **)this + 18) - *((float *)this + 73) * 2.0) * 0.25;
    *((float *)this + 73) = v33;
    v34 = *((_DWORD *)this + 17);
    v35 = *((float *)this + 18);
    v36 = v35 / (float)*((unsigned int *)this + 15);
    *((float *)this + 74) = v36;
    v37 = (float)v34 / v35;
    *((float *)this + 75) = v37;
    *((float *)this + 76) = v37 * 1000.0;
    *((float *)this + 77) = 1.0 / (float)(v37 * 1000.0);
    *((_DWORD *)this + 121) = 0;
    *((_DWORD *)this + 296) = 0;
    *(_OWORD *)((char *)this + 1188) = xmmword_1B66A05D0;
    *((_QWORD *)this + 39) = 1092616192;
    *((_OWORD *)this + 33) = xmmword_1B66A1EA0;
    calc_alpha_TE(50.0, v37, 99.0);
    *((float *)this + 136) = v38;
    *((float *)this + 137) = 1.0 - v38;
    calc_alpha_TE(150.0, v37, 99.0);
    *((float *)this + 138) = v39;
    *((float *)this + 139) = 1.0 - v39;
    calc_alpha_TE(500.0, v37, 99.0);
    *((float *)this + 140) = v40;
    *((float *)this + 141) = 1.0 - v40;
    v41 = 1200.0;
    if (*((float *)this + 411) != 0.0)
      v41 = 3700.0;
    v42 = (float)(v36 * -2.0) + 4000.0;
    if (v42 >= (float)((float)(v35 * 0.5) + (float)(v36 * -2.0)))
      v42 = (float)(v35 * 0.5) + (float)(v36 * -2.0);
    if (v41 > v42)
      v41 = v42;
    v43 = fminf(v42, 70.0);
    v44 = fminf(v42, 3700.0);
    v45 = (float)(v35 * 0.5) + -1000.0;
    if (v45 > 10000.0)
      v45 = 10000.0;
    if (v45 < 0.0)
      v45 = 0.0;
    if (v45 < v44)
      v45 = v44;
    v46 = v41 / v36;
    v47 = roundf(v46);
    *((_DWORD *)this + 128) = llroundf(v46);
    *((_DWORD *)this + 129) = vcvtps_s32_f32(v43 / v36);
    v48 = v44 / v36;
    v49 = roundf(v48);
    *((_DWORD *)this + 130) = llroundf(v48);
    *((_DWORD *)this + 131) = llroundf(v45 / v36);
    v50 = v36 * (float)(int)v47;
    *((float *)this + 124) = v50;
    v51 = v36 * (float)(int)ceilf(v43 / v36);
    *((float *)this + 125) = v51;
    v52 = v36 * (float)(int)v49;
    *((float *)this + 126) = v52;
    v53 = v36 * (float)(int)roundf(v45 / v36);
    *((float *)this + 127) = v53;
    *((float *)this + 142) = v36 + (float)(v50 - v51);
    *((float *)this + 143) = v36 + (float)(v52 - v51);
    *((float *)this + 144) = v36 + (float)(v53 - v51);
    *((_QWORD *)this + 61) = 0;
    *(_OWORD *)((char *)this + 324) = 0u;
    *(_OWORD *)((char *)this + 340) = 0u;
    *(_OWORD *)((char *)this + 356) = 0u;
    *(_OWORD *)((char *)this + 372) = 0u;
    *(_OWORD *)((char *)this + 388) = 0u;
    *(_OWORD *)((char *)this + 404) = 0u;
    *(_OWORD *)((char *)this + 420) = 0u;
    *(_OWORD *)((char *)this + 436) = 0u;
    *(_OWORD *)((char *)this + 452) = 0u;
    *(_OWORD *)((char *)this + 468) = 0u;
    *(_OWORD *)((char *)this + 612) = 0u;
    *(_OWORD *)((char *)this + 628) = 0u;
    *(_OWORD *)((char *)this + 580) = 0u;
    *(_OWORD *)((char *)this + 596) = 0u;
    v54 = vcvt_u32_f32(vdiv_f32((float32x2_t)0x4220000041A00000, (float32x2_t)vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT((float)*((unsigned int *)this + 17) / v35), 0)));
    *(uint32x2_t *)((char *)this + 708) = v54;
    v55 = v54.i32[0];
    v56 = 4 * v54.u32[0];
    v57 = malloc_type_malloc(v56, 0x2C8E6D5CuLL);
    v58 = v57;
    if (v57 || !v55)
    {
      bzero(v57, v56);
      *((_QWORD *)this + 86) = v58;
      v59 = *((unsigned int *)this + 178);
      v60 = malloc_type_malloc(4 * v59, 0x2C8E6D5CuLL);
      v61 = v60;
      if (!(_DWORD)v59 || v60)
      {
        bzero(v60, 4 * v59);
        *((_QWORD *)this + 87) = v61;
        *((_DWORD *)this + 176) = 0;
        *(_QWORD *)((char *)this + 716) = 0;
        *((_QWORD *)this + 81) = 0;
        *((_QWORD *)this + 83) = 0;
        *((_QWORD *)this + 82) = 0;
        *((_DWORD *)this + 168) = 0;
        *(_QWORD *)((char *)this + 676) = 3263954944;
        *(int32x4_t *)((char *)this + 740) = vdupq_n_s32(0x3C23D70Au);
        *((_DWORD *)this + 189) = 1008981770;
        v62 = *((unsigned int *)this + 17);
        *((float *)this + 190) = 1.0
                               - expf((float)((float)-(float)v62 / *((float *)this + 18))+ (float)((float)-(float)v62 / *((float *)this + 18)));
        v63 = malloc_type_malloc(4 * v62, 0x2C8E6D5CuLL);
        v64 = v63;
        if (!(_DWORD)v62 || v63)
        {
          bzero(v63, 4 * v62);
          *((_QWORD *)this + 96) = v64;
          v65 = *((unsigned int *)this + 17);
          v66 = malloc_type_malloc(4 * v65, 0x2C8E6D5CuLL);
          v67 = v66;
          if (!(_DWORD)v65 || v66)
          {
            bzero(v66, 4 * v65);
            *((_QWORD *)this + 97) = v67;
            v68 = *((unsigned int *)this + 17);
            v69 = malloc_type_malloc(4 * v68, 0x2C8E6D5CuLL);
            v70 = v69;
            if (!(_DWORD)v68 || v69)
            {
              bzero(v69, 4 * v68);
              *((_QWORD *)this + 98) = v70;
              v71 = *((unsigned int *)this + 17);
              if ((_DWORD)v71)
              {
                v72 = 0;
                v73 = *((_QWORD *)this + 96);
                do
                {
                  v74 = __sincosf_stret((float)(3.1416 / (float)v71) * (float)v72);
                  *(float *)(v73 + 4 * v72++) = (float)((float)(v74.__sinval * 0.9) * (float)(v74.__sinval * 0.9))
                                              + (float)((float)((float)(v74.__cosval * -0.9) + 1.0)
                                                      * (float)((float)(v74.__cosval * -0.9) + 1.0));
                }
                while (v71 != v72);
              }
              v75 = 4 * v71;
              v76 = 4 * (4 * v71);
              v77 = (char *)malloc_type_malloc(v76, 0x2C8E6D5CuLL);
              v78 = v77;
              if (!v75 || v77)
              {
                bzero(v77, v76);
                *((_QWORD *)this + 145) = v78;
                v79 = *((unsigned int *)this + 17);
                v80 = &v78[4 * v79];
                *((_QWORD *)this + 146) = v80;
                v81 = &v80[4 * v79];
                *((_QWORD *)this + 109) = v81;
                *((_QWORD *)this + 147) = &v81[4 * v79];
                *((_DWORD *)this + 234) = a3;
                if (a3)
                {
                  v82 = (*((_DWORD *)this + 2) + 1);
                  v83 = malloc_type_malloc(4 * v82, 0x2C8E6D5CuLL);
                  v84 = v83;
                  if ((_DWORD)v82 && !v83)
                    goto LABEL_98;
                  bzero(v83, 4 * v82);
                  *((_QWORD *)this + 118) = v84;
                }
                *(_OWORD *)((char *)this + 792) = 0u;
                *((float *)this + 202) = 10.0 / *((float *)this + 412);
                v85 = (const float *)((char *)this + 300);
                v86 = vld1_dup_f32(v85);
                v87 = vmax_s32(vcvt_s32_f32(vrndp_f32(vdiv_f32((float32x2_t)0x3D75C28F3DA3D70ALL, v86))), (int32x2_t)0x100000001);
                *((int32x2_t *)this + 102) = v87;
                v88 = 1.0 / (float)v87.i32[0];
                v89 = *((float *)this + 74);
                LODWORD(v85) = llroundf(200.0 / v89);
                *((_DWORD *)this + 203) = 0;
                *((float *)this + 206) = v88;
                v90 = v85 & ~((int)v85 >> 31);
                *((_DWORD *)this + 207) = v90;
                v91 = llroundf(500.0 / v89);
                if (v90 >= v91)
                  v92 = v90 + 1;
                else
                  v92 = v91;
                *((_DWORD *)this + 208) = v92;
                v93 = llroundf(1000.0 / v89);
                if (v92 >= v93)
                  v94 = v92 + 1;
                else
                  v94 = v93;
                *((_DWORD *)this + 209) = v94;
                v95 = llroundf(2500.0 / v89);
                if (v94 >= v95)
                  v96 = v94 + 1;
                else
                  v96 = v95;
                *((_DWORD *)this + 210) = v96;
                if (v89 <= 35.0)
                {
                  v97 = (float *)((char *)this + 972);
                  *((_QWORD *)this + 106) = (char *)this + 972;
                  *(_QWORD *)((char *)this + 964) = 0xB00000004;
                  __asm { FMOV            V0.2S, #0.25 }
                  *((_QWORD *)this + 119) = _D0;
                  v98 = 11;
                }
                else if (v89 >= 75.0)
                {
                  v97 = (float *)((char *)this + 1040);
                  *((_QWORD *)this + 106) = (char *)this + 1040;
                  *(_QWORD *)((char *)this + 964) = 0x300000001;
                  *((_QWORD *)this + 119) = 0x3F60902E3F6F41F2;
                  v98 = 3;
                }
                else
                {
                  v97 = (float *)((char *)this + 1016);
                  *((_QWORD *)this + 106) = (char *)this + 1016;
                  *(_QWORD *)((char *)this + 964) = 0x600000002;
                  *((_QWORD *)this + 119) = 0x3EE388663F000000;
                  v98 = 6;
                }
                *((_DWORD *)this + 240) = 0;
                v104 = 0.0;
                v105 = v98;
                do
                {
                  v106 = *v97++;
                  v104 = v106 + v104;
                  *((float *)this + 240) = v104;
                  --v105;
                }
                while (v105);
                v107 = *((unsigned int *)this + 17);
                v108 = *((_DWORD *)this + 131) + v98;
                if (v108 >= (int)v107)
                  v108 = *((_DWORD *)this + 17);
                *((_DWORD *)this + 214) = v108;
                *((_DWORD *)this + 215) = 0;
                *((_QWORD *)this + 108) = 0;
                v109 = malloc_type_malloc(4 * v107, 0x2C8E6D5CuLL);
                if ((_DWORD)v107)
                  _ZF = v109 == 0;
                else
                  _ZF = 0;
                if (!_ZF)
                {
                  v111 = v109;
                  bzero(v109, 4 * v107);
                  *((_QWORD *)this + 112) = v111;
                  v112 = *((unsigned int *)this + 17);
                  v113 = malloc_type_malloc(4 * v112, 0x2C8E6D5CuLL);
                  v114 = v113;
                  if (!(_DWORD)v112 || v113)
                  {
                    bzero(v113, 4 * v112);
                    *((_QWORD *)this + 113) = v114;
                    v115 = *((unsigned int *)this + 17);
                    v116 = malloc_type_malloc(4 * v115, 0x2C8E6D5CuLL);
                    v117 = v116;
                    if (!(_DWORD)v115 || v116)
                    {
                      bzero(v116, 4 * v115);
                      *((_QWORD *)this + 111) = v117;
                      v118 = *((unsigned int *)this + 17);
                      v119 = malloc_type_malloc(4 * v118, 0x2C8E6D5CuLL);
                      v120 = v119;
                      if (!(_DWORD)v118 || v119)
                      {
                        bzero(v119, 4 * v118);
                        *((_QWORD *)this + 115) = v120;
                        v121 = *((unsigned int *)this + 17);
                        v122 = malloc_type_malloc(4 * v121, 0x2C8E6D5CuLL);
                        v123 = v122;
                        if (!(_DWORD)v121 || v122)
                        {
                          bzero(v122, 4 * v121);
                          *((_QWORD *)this + 116) = v123;
                          v124 = *((_DWORD *)this + 204) * *((_DWORD *)this + 214);
                          if ((v124 & 0x80000000) == 0)
                          {
                            v125 = malloc_type_malloc(4 * (*((_DWORD *)this + 204) * *((_DWORD *)this + 214)), 0x2C8E6D5CuLL);
                            v126 = v125;
                            if (!v124 || v125)
                            {
                              bzero(v125, 4 * v124);
                              *((_QWORD *)this + 109) = v126;
                              v127 = *((_DWORD *)this + 204) * *((_DWORD *)this + 214);
                              if ((v127 & 0x80000000) == 0)
                              {
                                v128 = malloc_type_malloc(4 * (*((_DWORD *)this + 204) * *((_DWORD *)this + 214)), 0x2C8E6D5CuLL);
                                v129 = v128;
                                if (!v127 || v128)
                                {
                                  bzero(v128, 4 * v127);
                                  *((_QWORD *)this + 110) = v129;
                                  v130 = *((unsigned int *)this + 205);
                                  if ((v130 & 0x80000000) == 0)
                                  {
                                    v131 = malloc_type_malloc(4 * v130, 0x2C8E6D5CuLL);
                                    v132 = v131;
                                    if (!(_DWORD)v130 || v131)
                                    {
                                      bzero(v131, 4 * v130);
                                      *((_QWORD *)this + 114) = v132;
                                      *((_DWORD *)this + 383) = 0;
                                      *((_QWORD *)this + 165) = 0;
                                      *((_OWORD *)this + 87) = 0u;
                                      v133 = (float)(3.0 / *((float *)this + 75));
                                      *((_DWORD *)this + 352) = 0;
                                      *((_DWORD *)this + 332) = v133;
                                      *((_DWORD *)this + 388) = 0;
                                      *(_OWORD *)((char *)this + 1560) = xmmword_1B66A1EB0;
                                      *((_OWORD *)this + 96) = xmmword_1B66A1EC0;
                                      *(_OWORD *)((char *)this + 1352) = xmmword_1B66A1340;
                                      *(_OWORD *)((char *)this + 1368) = xmmword_1B66A1ED0;
                                      *((_QWORD *)this + 173) = 0;
                                      v134 = (2 * *((_DWORD *)this + 72));
                                      *(_DWORD *)buf = 0;
                                      std::vector<float>::assign((char **)this + 153, v134, buf);
                                      v135 = (2 * *((_DWORD *)this + 72));
                                      *(_DWORD *)buf = 0;
                                      std::vector<float>::assign((char **)this + 156, v135, buf);
                                      v136 = *((unsigned int *)this + 72);
                                      *(_DWORD *)buf = 0;
                                      std::vector<float>::assign((char **)this + 159, v136, buf);
                                      v137 = *((unsigned int *)this + 72);
                                      *(_DWORD *)buf = 0;
                                      std::vector<float>::assign((char **)this + 162, v137, buf);
                                      v138 = *((float *)this + 18);
                                      v139 = *((unsigned int *)this + 72);
                                      if ((_DWORD)v139)
                                      {
                                        v140 = v138 / ((double)v139 + (double)v139);
                                        v160 = v140;
                                        v159 = (uint64x2_t)vdupq_n_s64(v139 - 1);
                                        v141 = (v139 + 1) & 0x1FFFFFFFELL;
                                        v142 = (int32x2_t)0x100000000;
                                        v143 = (uint64x2_t)xmmword_1B6626830;
                                        v144 = (float *)(*((_QWORD *)this + 162) + 4);
                                        v145 = (float32x2_t)vdup_n_s32(0x43D428CAu);
                                        v146 = (float32x2_t)vdup_n_s32(0x4D0DCF73u);
                                        v158 = vdupq_n_s64(2uLL);
                                        do
                                        {
                                          v164 = vmovn_s64((int64x2_t)vcgeq_u64(v159, v143));
                                          v165 = (int64x2_t)v143;
                                          v147 = vmul_n_f32(vcvt_f32_s32(v142), v160);
                                          v163 = vmul_f32(v147, v147);
                                          __x = vcvtq_f64_f32(v147);
                                          v162 = pow(__x.f64[1], 8.0);
                                          *(double *)v148.i64 = pow(__x.f64[0], 8.0);
                                          *(long double *)&v148.i64[1] = v162;
                                          v149 = vcvtq_f64_f32(vadd_f32(v163, v145));
                                          v150 = vcvtq_f64_f32(vadd_f32(v163, v146));
                                          if ((v164.i8[0] & 1) != 0)
                                          {
                                            v151 = 3.5041384e16
                                                 * *(double *)v148.i64
                                                 / ((float)(v163.f32[0] + 11589.0)
                                                  * vmulq_f64(v149, v149).f64[0]
                                                  * (float)(v163.f32[0] + 544440.0)
                                                  * vmulq_f64(v150, v150).f64[0]);
                                            *(v144 - 1) = v151;
                                          }
                                          if ((v164.i8[4] & 1) != 0)
                                          {
                                            v152 = (float64x2_t)vzip2q_s64(v148, (int64x2_t)v150);
                                            v150.f64[0] = 3.5041384e16;
                                            v153 = vmulq_f64(v152, v150);
                                            *(float *)v153.f64 = v153.f64[0]
                                                               / vmuld_lane_f64(vmuld_lane_f64((float)(v163.f32[1] + 11589.0), vmulq_f64(v149, v149), 1)* (float)(v163.f32[1] + 544440.0), v153, 1);
                                            *v144 = *(float *)v153.f64;
                                          }
                                          v143 = (uint64x2_t)vaddq_s64(v165, v158);
                                          v142 = vadd_s32(v142, (int32x2_t)0x200000002);
                                          v144 += 2;
                                          v141 -= 2;
                                        }
                                        while (v141);
                                        v138 = *((float *)this + 18);
                                      }
                                      v154 = (int)(v138 * 0.05);
                                      *((_DWORD *)this + 333) = 56851123;
                                      *((_DWORD *)this + 368) = 4 * v154;
                                      *((_DWORD *)this + 369) = v154;
                                      *(_DWORD *)buf = 0;
                                      std::vector<float>::assign((char **)this + 181, v154, buf);
                                      return 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_98:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v157 = std::bad_alloc::bad_alloc(exception);
  }
  v31 = v30;
  if (VPEchoGateV3LogScope(void)::once != -1)
    dispatch_once(&VPEchoGateV3LogScope(void)::once, &__block_literal_global_6864);
  if (VPEchoGateV3LogScope(void)::scope)
  {
    v32 = *(NSObject **)VPEchoGateV3LogScope(void)::scope;
    if (!*(_QWORD *)VPEchoGateV3LogScope(void)::scope)
      return v31;
  }
  else
  {
    v32 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v99 = *((_DWORD *)this + 15);
    *(_DWORD *)buf = 136315906;
    v167 = "vpEchoGateV3.cpp";
    v168 = 1024;
    v169 = 420;
    v170 = 1024;
    v171 = v31;
    v172 = 1024;
    v173 = v99;
    _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: gate: err %d initializing res fft to %d", buf, 0x1Eu);
  }
  return v31;
}

uint64_t VPEchoGateV3::ProcessBypass(VPEchoGateV3 *this, DSPSplitComplex *a2, float *a3)
{
  char *v6;
  size_t v7;
  char *v8;
  DSPSplitComplex v10;

  *((_BYTE *)this + 736) = 1;
  if (a2 && a3)
  {
    v6 = (char *)*((_QWORD *)this + 30);
    v7 = *((unsigned int *)this + 72);
    v8 = &v6[4 * v7];
    memcpy(v6, a2->realp, v7);
    memcpy(v8, a2->imagp, *((unsigned int *)this + 72));
    v10.realp = (float *)v6;
    v10.imagp = (float *)v8;
    if (*((_BYTE *)this + 736))
    {
      if (*((_BYTE *)this + 56))
      {
        memcpy(a3, v6, 4 * *((unsigned int *)this + 17));
        memcpy(&a3[*((unsigned int *)this + 17)], v8, 4 * *((unsigned int *)this + 17));
      }
      else
      {
        MultiRadixRealFFT::RealOutOfPlaceInverseTransform((const vDSP_DFT_SetupStruct ***)this + 31, &v10, *((DSPComplex **)this + 12));
        vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 35), 1, *((float **)this + 12), 1, *((unsigned int *)this + 16));
        vDSP_vadd(*((const float **)this + 12), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 16));
        memcpy(a3, *((const void **)this + 27), 4 * *((unsigned int *)this + 17));
        memmove(*((void **)this + 27), (const void *)(*((_QWORD *)this + 27) + 4 * *((unsigned int *)this + 17)), 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17)));
        bzero((void *)(*((_QWORD *)this + 27) + 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17))), 4 * *((unsigned int *)this + 17));
      }
    }
  }
  else
  {
    *((_BYTE *)this + 736) = 0;
  }
  return 0;
}

os_log_t ___ZL20VPEchoGateV3LogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "vpechogate3");
  *v0 = result;
  VPEchoGateV3LogScope(void)::scope = (uint64_t)v0;
  return result;
}

void EchoGateV3::myAllocABL(EchoGateV3 *this, const AudioStreamBasicDescription *a2, uint64_t a3, AudioBufferList *a4)
{
  int v5;
  void *v7;
  size_t v8;
  void *v9;
  BOOL v10;
  void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;

  v5 = (int)a2;
  v7 = *(void **)(a3 + 16);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a3 + 16) = 0;
  }
  *(_DWORD *)a3 = 1;
  v8 = (*((_DWORD *)this + 6) * v5);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)this + 7);
  *(_DWORD *)(a3 + 12) = v8;
  v9 = malloc_type_malloc(v8, 0x2C8E6D5CuLL);
  if ((_DWORD)v8)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_alloc::bad_alloc(exception);
  }
  v11 = v9;
  bzero(v9, v8);
  *(_QWORD *)(a3 + 16) = v11;
}

void VPEchoGateV3::Gate_spread_energy(VPEchoGateV3 *this, const float *__A, const float *a3, float *a4, const float *a5, int a6, int a7)
{
  uint64_t v12;
  const float *v13;
  const float *v14;
  vDSP_Length v15;
  const float *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  vDSP_Length v21;
  const float *v22;

  v12 = (int)a5;
  v13 = &a3[a6];
  vDSP_vsmul(__A, 1, v13, (float *)this, 1, (int)a5);
  if (a6 >= 1)
  {
    v14 = v13 - 1;
    v15 = v12 - 1;
    v16 = __A + 1;
    v17 = a6;
    do
    {
      vDSP_vsmul(v16, 1, v14, a4, 1, v15);
      vDSP_vadd((const float *)this, 1, a4, 1, (float *)this, 1, v15);
      --v14;
      --v15;
      ++v16;
      --v17;
    }
    while (v17);
  }
  v18 = a6 + 1;
  if (a6 + 1 < a7)
  {
    v19 = (~a6 + a7);
    v20 = (float *)((char *)this + 4);
    v21 = v12 - 1;
    v22 = &a3[v18];
    do
    {
      vDSP_vsmul(__A, 1, v22, a4, 1, v21);
      vDSP_vadd(v20, 1, a4, 1, v20, 1, v21);
      ++v20;
      --v21;
      ++v22;
      --v19;
    }
    while (v19);
  }
}

float VPEchoGateV3::GatecrossCorrSpec(VPEchoGateV3 *this, const float *a2, const float *a3, const float *__B, float *a5, float *a6, float *a7, float *a8, int a9)
{
  vDSP_Length __N;
  float v15;
  float v16;
  float result;
  uint64_t __C;

  __C = 0;
  __N = (int)a8;
  vDSP_vsub(__B, 1, a3, 1, a5, 1, (int)a8);
  vDSP_svesq(a5, 1, (float *)&__C + 1, __N);
  vDSP_vsbm((const float *)this, 1, a2, 1, a5, 1, a5, 1, __N);
  vDSP_sve(a5, 1, (float *)&__C, __N);
  v15 = *(float *)&__C + 8.6736e-19;
  v16 = sqrtf(*((float *)&__C + 1) + 8.6736e-19);
  *a7 = v16;
  result = v15 / v16;
  *a6 = result;
  return result;
}

void VPEchoGateV3::GatesmoothPowerSpectrum(VPEchoGateV3 *this, const float *a2, const float *a3, float a4)
{
  vDSP_Length v6;
  float __B;
  float v8;

  v8 = a4;
  __B = 1.0 - a4;
  v6 = (int)a3;
  vDSP_vsmul((const float *)this, 1, &__B, (float *)this, 1, (int)a3);
  vDSP_vsma(a2, 1, &v8, (const float *)this, 1, (float *)this, 1, v6);
}

void AUDereverb::~AUDereverb(AUDereverb *this)
{
  AUDereverb::~AUDereverb(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;
  void **v3;

  *(_QWORD *)this = &off_1E69D0C10;
  v2 = (_QWORD *)((char *)this + 1048);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100]((_QWORD *)this + 131, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 134, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](v2, 0);
  v3 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);
}

void AUDereverb::CreateExtendedElements(AUDereverb *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 568), this, 4, 16);
  for (i = 0; i != 16; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = *((_QWORD *)this + 76);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 73);
      if (i >= (*((_QWORD *)this + 74) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B62DF5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUDereverb::Initialize(AUDereverb *this)
{
  NSObject *v2;
  uint64_t Element;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  unsigned int v9;
  char v10;
  char v11;
  int v12;
  int64x2_t *Scope;
  double AppFloatValue;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  NSObject *v18;
  int v19;
  const char *v20;
  int v21;
  ausdk::AUElement **v23;
  NSObject *v24;
  NSObject *v25;
  BOOL v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _DWORD v32[7];

  *(_QWORD *)&v32[5] = *MEMORY[0x1E0C80C00];
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (!AUDereverbLogScope(void)::scope)
  {
    v2 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v28 = "AUDereverb.cpp";
      v29 = 1024;
      v30 = 130;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Initialize.\n", buf, 0x12u);
    }
    goto LABEL_9;
  }
  v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(_QWORD *)AUDereverbLogScope(void)::scope)
    goto LABEL_7;
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0);
  v4 = 0;
  v5 = *(_QWORD *)(Element + 80);
  *((_DWORD *)this + 158) = *(_DWORD *)(Element + 108);
  *((_QWORD *)this + 78) = v5;
  v6 = 1;
  while (1)
  {
    v7 = v6;
    v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), v4) + 108);
    if (v8 != *((_DWORD *)this + 158))
      break;
    v6 = 0;
    v4 = 1;
    if ((v7 & 1) == 0)
    {
      v9 = 0;
      v10 = 1;
      while (1)
      {
        v11 = v10;
        v12 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), v9) + 108);
        if (v12 != *((_DWORD *)this + 158))
          break;
        v10 = 0;
        v9 = 1;
        if ((v11 & 1) == 0)
        {
          Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
          *((_DWORD *)this + 154) = *((_DWORD *)this + 84);
          v26 = 0;
          AppFloatValue = CACFPreferencesGetAppFloatValue(CFSTR("mclp_log_period_in_seconds"), CFSTR("com.apple.coreaudio"), &v26);
          if (v26)
          {
            v15 = AppFloatValue;
            if (v15 > 0.0)
            {
              *((float *)this + 259) = v15;
              v16 = *((_QWORD *)this + 9);
              if (v16)
              {
                v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
              }
              else
              {
                v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v23)
                  v17 = 0;
                else
                  v17 = *v23;
              }
              ausdk::AUElement::SetParameter(v17, 0x14u, v15, 0);
              if (AUDereverbLogScope(void)::once != -1)
                dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
              if (AUDereverbLogScope(void)::scope)
              {
                v24 = *(NSObject **)AUDereverbLogScope(void)::scope;
                if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
                  goto LABEL_48;
              }
              else
              {
                v24 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v28 = "AUDereverb.cpp";
                v29 = 1024;
                v30 = 168;
                v31 = 2048;
                *(double *)v32 = v15;
                _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Using logPeriod of (%g)s as specified in defaults write mclp_log_period_in_seconds.\n", buf, 0x1Cu);
              }
            }
          }
LABEL_48:
          AUDereverb::UpdateState(this);
          *((_QWORD *)this + 67) = *((_QWORD *)this + 66);
          (*(void (**)(AUDereverb *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          if (AUDereverbLogScope(void)::once != -1)
            dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
          if (AUDereverbLogScope(void)::scope)
          {
            v25 = *(NSObject **)AUDereverbLogScope(void)::scope;
            if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
              return 0;
          }
          else
          {
            v25 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v28 = "AUDereverb.cpp";
            v29 = 1024;
            v30 = 180;
            _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Successfully initialized.\n", buf, 0x12u);
          }
          return 0;
        }
      }
      if (AUDereverbLogScope(void)::once != -1)
        dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
      if (AUDereverbLogScope(void)::scope)
      {
        v18 = *(NSObject **)AUDereverbLogScope(void)::scope;
        if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
          return 4294956421;
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v21 = *((_DWORD *)this + 158);
        *(_DWORD *)buf = 136315906;
        v28 = "AUDereverb.cpp";
        v29 = 1024;
        v30 = 147;
        v31 = 1024;
        v32[0] = v12;
        LOWORD(v32[1]) = 1024;
        *(_DWORD *)((char *)&v32[1] + 2) = v21;
        v20 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
        goto LABEL_35;
      }
      return 4294956421;
    }
  }
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v18 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      return 4294956421;
  }
  else
  {
    v18 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = *((_DWORD *)this + 158);
    *(_DWORD *)buf = 136315906;
    v28 = "AUDereverb.cpp";
    v29 = 1024;
    v30 = 140;
    v31 = 1024;
    v32[0] = v8;
    LOWORD(v32[1]) = 1024;
    *(_DWORD *)((char *)&v32[1] + 2) = v19;
    v20 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_35:
    _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, v20, buf, 0x1Eu);
  }
  return 4294956421;
}

void AUDereverb::Cleanup(AUDereverb *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  AUDereverb *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v26 = "AUDereverb.cpp";
    v27 = 1024;
    v28 = 191;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Cleanup.\n", buf, 0x12u);
  }
LABEL_9:
  v24 = this;
  v3 = *((_QWORD *)this + 131);
  if (v3)
  {
    *(_DWORD *)(v3 + 84) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    bzero(*(void **)(v3 + 96), *(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96));
    bzero(*(void **)(v3 + 120), *(_QWORD *)(v3 + 128) - *(_QWORD *)(v3 + 120));
    bzero(*(void **)(v3 + 144), *(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144));
    bzero(*(void **)(v3 + 168), *(_QWORD *)(v3 + 176) - *(_QWORD *)(v3 + 168));
    bzero(*(void **)(v3 + 192), *(_QWORD *)(v3 + 200) - *(_QWORD *)(v3 + 192));
    bzero(*(void **)(v3 + 216), *(_QWORD *)(v3 + 224) - *(_QWORD *)(v3 + 216));
    bzero(*(void **)(v3 + 240), *(_QWORD *)(v3 + 248) - *(_QWORD *)(v3 + 240));
    bzero(*(void **)(v3 + 264), *(_QWORD *)(v3 + 272) - *(_QWORD *)(v3 + 264));
    bzero(*(void **)(v3 + 288), *(_QWORD *)(v3 + 296) - *(_QWORD *)(v3 + 288));
    bzero(*(void **)(v3 + 312), *(_QWORD *)(v3 + 320) - *(_QWORD *)(v3 + 312));
    v4 = *(_DWORD *)(v3 + 40);
    if (v4)
    {
      v5 = 0;
      v6 = *(_DWORD *)(v3 + 32);
      do
      {
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          v9 = *(unsigned int *)(v3 + 28);
          do
          {
            if ((_DWORD)v9)
            {
              v10 = *(_QWORD *)(v3 + 192);
              v11 = v7 + v5 * *(_DWORD *)(v3 + 52);
              v12 = v9;
              do
              {
                *(float *)(v10 + 4 * v11++) = powf(*(float *)(v3 + 20), (float)v5);
                --v12;
              }
              while (v12);
            }
            ++v8;
            v7 += v9;
          }
          while (v8 != v6);
        }
        ++v5;
      }
      while (v5 != v4);
    }
  }
  v13 = *((_QWORD *)v24 + 132);
  if (v13)
  {
    *(_QWORD *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 84) = 0;
    vec::cleanup<float>((uint64_t *)(v13 + 96));
    bzero(*(void **)(v13 + 120), *(_QWORD *)(v13 + 128) - *(_QWORD *)(v13 + 120));
    bzero(*(void **)(v13 + 144), *(_QWORD *)(v13 + 152) - *(_QWORD *)(v13 + 144));
    bzero(*(void **)(v13 + 168), *(_QWORD *)(v13 + 176) - *(_QWORD *)(v13 + 168));
    bzero(*(void **)(v13 + 192), *(_QWORD *)(v13 + 200) - *(_QWORD *)(v13 + 192));
    v14 = *(_DWORD **)(v13 + 216);
    v15 = *(_QWORD *)(v13 + 224) - (_QWORD)v14;
    if (v15 >= 1)
    {
      v16 = ((unint64_t)v15 >> 2) + 1;
      do
      {
        *v14++ = *(_DWORD *)(v13 + 64);
        --v16;
      }
      while (v16 > 1);
    }
    v17 = *(_DWORD **)(v13 + 240);
    v18 = *(_QWORD *)(v13 + 248) - (_QWORD)v17;
    if (v18 >= 1)
    {
      v19 = ((unint64_t)v18 >> 2) + 1;
      do
      {
        *v17++ = *(_DWORD *)(v13 + 64);
        --v19;
      }
      while (v19 > 1);
    }
    vec::cleanup<float>((uint64_t *)(v13 + 264));
    bzero(*(void **)(v13 + 288), *(_QWORD *)(v13 + 296) - *(_QWORD *)(v13 + 288));
    bzero(*(void **)(v13 + 312), *(_QWORD *)(v13 + 320) - *(_QWORD *)(v13 + 312));
    bzero(*(void **)(v13 + 336), *(_QWORD *)(v13 + 344) - *(_QWORD *)(v13 + 336));
    bzero(*(void **)(v13 + 360), *(_QWORD *)(v13 + 368) - *(_QWORD *)(v13 + 360));
    bzero(*(void **)(v13 + 384), *(_QWORD *)(v13 + 392) - *(_QWORD *)(v13 + 384));
    bzero(*(void **)(v13 + 408), *(_QWORD *)(v13 + 416) - *(_QWORD *)(v13 + 408));
    bzero(*(void **)(v13 + 432), *(_QWORD *)(v13 + 440) - *(_QWORD *)(v13 + 432));
    bzero(*(void **)(v13 + 456), *(_QWORD *)(v13 + 464) - *(_QWORD *)(v13 + 456));
    bzero(*(void **)(v13 + 480), *(_QWORD *)(v13 + 488) - *(_QWORD *)(v13 + 480));
    bzero(*(void **)(v13 + 504), *(_QWORD *)(v13 + 512) - *(_QWORD *)(v13 + 504));
    bzero(*(void **)(v13 + 528), *(_QWORD *)(v13 + 536) - *(_QWORD *)(v13 + 528));
    bzero(*(void **)(v13 + 552), *(_QWORD *)(v13 + 560) - *(_QWORD *)(v13 + 552));
    bzero(*(void **)(v13 + 576), *(_QWORD *)(v13 + 584) - *(_QWORD *)(v13 + 576));
    bzero(*(void **)(v13 + 600), *(_QWORD *)(v13 + 608) - *(_QWORD *)(v13 + 600));
    bzero(*(void **)(v13 + 624), *(_QWORD *)(v13 + 632) - *(_QWORD *)(v13 + 624));
    bzero(*(void **)(v13 + 648), *(_QWORD *)(v13 + 656) - *(_QWORD *)(v13 + 648));
    bzero(*(void **)(v13 + 672), *(_QWORD *)(v13 + 680) - *(_QWORD *)(v13 + 672));
    bzero(*(void **)(v13 + 696), *(_QWORD *)(v13 + 704) - *(_QWORD *)(v13 + 696));
    bzero(*(void **)(v13 + 720), *(_QWORD *)(v13 + 728) - *(_QWORD *)(v13 + 720));
  }
  v20 = *((_QWORD *)v24 + 133);
  if (v20)
  {
    *(_DWORD *)(v20 + 140) = *(_DWORD *)(v20 + 40);
    vec::fill<BOOL>(*(_QWORD *)(v20 + 144), *(_QWORD *)(v20 + 152), 0);
    *(_DWORD *)(v20 + 168) = 0;
    bzero(*(void **)(v20 + 176), *(_QWORD *)(v20 + 184) - *(_QWORD *)(v20 + 176));
    bzero(*(void **)(v20 + 200), *(_QWORD *)(v20 + 208) - *(_QWORD *)(v20 + 200));
    bzero(*(void **)(v20 + 248), *(_QWORD *)(v20 + 256) - *(_QWORD *)(v20 + 248));
    bzero(*(void **)(v20 + 272), *(_QWORD *)(v20 + 280) - *(_QWORD *)(v20 + 272));
    bzero(*(void **)(v20 + 320), *(_QWORD *)(v20 + 328) - *(_QWORD *)(v20 + 320));
    bzero(*(void **)(v20 + 344), *(_QWORD *)(v20 + 352) - *(_QWORD *)(v20 + 344));
    vec::cleanup<float>((uint64_t *)(v20 + 392));
    vec::cleanup<float>((uint64_t *)(v20 + 416));
    v21 = *(_DWORD **)(v20 + 464);
    v22 = *(_QWORD *)(v20 + 472) - (_QWORD)v21;
    if (v22 >= 1)
    {
      v23 = ((unint64_t)v22 >> 2) + 1;
      do
      {
        *v21++ = *(_DWORD *)(v20 + 88);
        --v23;
      }
      while (v23 > 1);
    }
    bzero(*(void **)(v20 + 488), *(_QWORD *)(v20 + 496) - *(_QWORD *)(v20 + 488));
    bzero(*(void **)(v20 + 512), *(_QWORD *)(v20 + 520) - *(_QWORD *)(v20 + 512));
    vec::cleanup<float>((uint64_t *)(v20 + 536));
    vec::cleanup<float>((uint64_t *)(v20 + 560));
    bzero(*(void **)(v20 + 608), *(_QWORD *)(v20 + 616) - *(_QWORD *)(v20 + 608));
    bzero(*(void **)(v20 + 632), *(_QWORD *)(v20 + 640) - *(_QWORD *)(v20 + 632));
    bzero(*(void **)(v20 + 656), *(_QWORD *)(v20 + 664) - *(_QWORD *)(v20 + 656));
    bzero(*(void **)(v20 + 696), *(_QWORD *)(v20 + 704) - *(_QWORD *)(v20 + 696));
    bzero(*(void **)(v20 + 720), *(_QWORD *)(v20 + 728) - *(_QWORD *)(v20 + 720));
    bzero(*(void **)(v20 + 744), *(_QWORD *)(v20 + 752) - *(_QWORD *)(v20 + 744));
    bzero(*(void **)(v20 + 768), *(_QWORD *)(v20 + 776) - *(_QWORD *)(v20 + 768));
    bzero(*(void **)(v20 + 792), *(_QWORD *)(v20 + 800) - *(_QWORD *)(v20 + 792));
    bzero(*(void **)(v20 + 816), *(_QWORD *)(v20 + 824) - *(_QWORD *)(v20 + 816));
    if (*(_BYTE *)(v20 + 36))
    {
      bzero(*(void **)(v20 + 840), *(_QWORD *)(v20 + 848) - *(_QWORD *)(v20 + 840));
      bzero(*(void **)(v20 + 864), *(_QWORD *)(v20 + 872) - *(_QWORD *)(v20 + 864));
      bzero(*(void **)(v20 + 912), *(_QWORD *)(v20 + 920) - *(_QWORD *)(v20 + 912));
      bzero(*(void **)(v20 + 936), *(_QWORD *)(v20 + 944) - *(_QWORD *)(v20 + 936));
      bzero(*(void **)(v20 + 984), *(_QWORD *)(v20 + 992) - *(_QWORD *)(v20 + 984));
      bzero(*(void **)(v20 + 1008), *(_QWORD *)(v20 + 1016) - *(_QWORD *)(v20 + 1008));
      vec::cleanup<float>((uint64_t *)(v20 + 1056));
      vec::cleanup<float>((uint64_t *)(v20 + 1080));
    }
  }
}

uint64_t AUDereverb::Reset(AUDereverb *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 165);
  if ((v1 - 2) >= 2)
  {
    if (v1 == 1)
    {
      v12 = *((_QWORD *)this + 132);
      *(_QWORD *)(v12 + 88) = 0;
      *(_DWORD *)(v12 + 84) = 0;
      bzero(*(void **)(v12 + 144), *(_QWORD *)(v12 + 152) - *(_QWORD *)(v12 + 144));
      bzero(*(void **)(v12 + 168), *(_QWORD *)(v12 + 176) - *(_QWORD *)(v12 + 168));
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 133);
    *(_DWORD *)(v2 + 168) = 0;
    v3 = *(unsigned int *)(v2 + 72);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = *(_DWORD *)(v2 + 40);
      v6 = v5;
      do
      {
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          v9 = *(_DWORD *)(v2 + 60);
          do
          {
            v10 = v7 + 1;
            if (v7 + 1 < v9)
            {
              v11 = 1;
              do
              {
                if ((v7 + v11) < *(_DWORD *)(v2 + 40))
                {
                  bzero(*(void **)(*(_QWORD *)(*(_QWORD *)(v2 + 440) + 24 * v4) + 16 * (v8 + v11 - 1)), 4 * *(unsigned int *)(v2 + 64));
                  bzero(*(void **)(*(_QWORD *)(*(_QWORD *)(v2 + 440) + 24 * v4) + 16 * (v8 + v11 - 1) + 8), 4 * *(unsigned int *)(v2 + 64));
                  v9 = *(_DWORD *)(v2 + 60);
                }
                ++v11;
              }
              while (v7 + v11 < v9);
              v8 = v8 + v11 - 1;
              v5 = *(_DWORD *)(v2 + 40);
            }
            ++v7;
          }
          while (v10 < v5);
          v3 = *(unsigned int *)(v2 + 72);
          v6 = v5;
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
  return 0;
}

uint64_t AUDereverb::GetPropertyInfo(AUDereverb *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDereverb::GetProperty(AUDereverb *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 560;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDereverb::SetProperty(AUDereverb *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5)
        return 0;
      else
        return 4294956445;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_BYTE *)this + 560) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUDereverb::SetParameter(AUDereverb *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;
  char *v15;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 76);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 73);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 74) - v14) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    v15 = (char *)this + 544;
  }
  else
  {
    if (a3)
      return 4294956418;
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v13)
        v9 = 0;
      else
        v9 = *v13;
    }
    ausdk::AUElement::SetParameter(v9, a2, a5, 0);
    v15 = (char *)this + 528;
  }
  result = 0;
  ++*(_QWORD *)v15;
  return result;
}

uint64_t AUDereverb::CanScheduleParameters(AUDereverb *this)
{
  return 0;
}

uint64_t AUDereverb::ProcessMultipleBufferLists(AUDereverb *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8)
{
  int v10;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  uint64_t v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  uint64_t v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  uint64_t v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  int *v32;
  int v33;
  const AudioBufferList *v34;
  AudioBufferList *v35;
  AudioDSP::Utility *v36;
  BOOL *v37;
  NSObject *v38;
  NSObject *v40;
  const char *v41;
  unint64_t v42;
  char v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float *mData;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  ausdk::AUElement **v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  BOOL *v63;
  BOOL *v64;
  double v65;
  NSObject *v66;
  int v67;
  int v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  AudioBufferList v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v10 = (int)a3;
  v80 = *MEMORY[0x1E0C80C00];
  LODWORD(a8) = *((_DWORD *)this + 154);
  *((double *)this + 81) = *((double *)this + 81) + (double)*(unint64_t *)&a8 / *((double *)this + 78);
  v12 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v12)
  {
    AUDereverb::UpdateState(this);
    *((_QWORD *)this + 67) = v12;
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v13 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
        goto LABEL_10;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v76.mNumberBuffers = 136315394;
      *(_QWORD *)(&v76.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v76.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v76.mBuffers[0].mDataByteSize + 2) = 1029;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: parameters changed after Initialize, which will allocate memory on the realtime audio thread - only SetParameter before Initialize.\n", (uint8_t *)&v76, 0x12u);
    }
  }
LABEL_10:
  v14 = *((_QWORD *)this + 68);
  if (*((_QWORD *)this + 69) != v14)
  {
    if (*((_DWORD *)this + 158))
    {
      v15 = 0;
      v16 = (float *)((char *)this + 708);
      do
      {
        v17 = *((_QWORD *)this + 76);
        if (v17)
        {
          v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 32))(v17, v15);
        }
        else
        {
          v19 = *((_QWORD *)this + 73);
          if (v15 >= (*((_QWORD *)this + 74) - v19) >> 3)
            v18 = 0;
          else
            v18 = *(ausdk::AUElement **)(v19 + 8 * v15);
        }
        *(v16 - 4) = ausdk::AUElement::GetParameter(v18, 9u);
        v20 = *((_QWORD *)this + 76);
        if (v20)
        {
          v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 32))(v20, v15);
        }
        else
        {
          v22 = *((_QWORD *)this + 73);
          if (v15 >= (*((_QWORD *)this + 74) - v22) >> 3)
            v21 = 0;
          else
            v21 = *(ausdk::AUElement **)(v22 + 8 * v15);
        }
        *(v16 - 3) = ausdk::AUElement::GetParameter(v21, 0xAu);
        v23 = *((_QWORD *)this + 76);
        if (v23)
        {
          v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 32))(v23, v15);
        }
        else
        {
          v25 = *((_QWORD *)this + 73);
          if (v15 >= (*((_QWORD *)this + 74) - v25) >> 3)
            v24 = 0;
          else
            v24 = *(ausdk::AUElement **)(v25 + 8 * v15);
        }
        *(v16 - 2) = ausdk::AUElement::GetParameter(v24, 0xBu);
        v26 = *((_QWORD *)this + 76);
        if (v26)
        {
          v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 32))(v26, v15);
        }
        else
        {
          v28 = *((_QWORD *)this + 73);
          if (v15 >= (*((_QWORD *)this + 74) - v28) >> 3)
            v27 = 0;
          else
            v27 = *(ausdk::AUElement **)(v28 + 8 * v15);
        }
        *(v16 - 1) = ausdk::AUElement::GetParameter(v27, 0xCu);
        v29 = *((_QWORD *)this + 76);
        if (v29)
        {
          v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, v15);
        }
        else
        {
          v31 = *((_QWORD *)this + 73);
          if (v15 >= (*((_QWORD *)this + 74) - v31) >> 3)
            v30 = 0;
          else
            v30 = *(ausdk::AUElement **)(v31 + 8 * v15);
        }
        *v16 = ausdk::AUElement::GetParameter(v30, 0xDu);
        v16 += 5;
        ++v15;
      }
      while (v15 < *((unsigned int *)this + 158));
    }
    *((_QWORD *)this + 69) = v14;
  }
  if (*((_DWORD *)this + 84) != v10)
    return 4294956422;
  v32 = (int *)*a5;
  if (!*a5)
  {
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v40 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v40 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v76.mNumberBuffers = 136315394;
      *(_QWORD *)(&v76.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v76.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v76.mBuffers[0].mDataByteSize + 2) = 1045;
      v41 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_74:
      _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, v41, (uint8_t *)&v76, 0x12u);
    }
    return 4294956420;
  }
  v33 = *v32;
  if (*v32 != *((_DWORD *)this + 158))
    return 4294956428;
  v34 = a5[1];
  if (!v34)
  {
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v40 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v40 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v76.mNumberBuffers = 136315394;
      *(_QWORD *)(&v76.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v76.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v76.mBuffers[0].mDataByteSize + 2) = 1053;
      v41 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_74;
    }
    return 4294956420;
  }
  if (v34->mNumberBuffers != v33 || *a7 && (*a7)->mNumberBuffers != v33)
    return 4294956428;
  v35 = a7[1];
  if (v35)
  {
    if (v35->mNumberBuffers != v33)
      return 4294956428;
  }
  v67 = 0;
  v36 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 154));
  *(_QWORD *)&v76.mNumberBuffers = *((_QWORD *)this + 78);
  v76.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v77 = 4;
  v78 = v33;
  v79 = 32;
  AudioDSP::Utility::DetectNonFinites(v36, v32, &v76, (const AudioStreamBasicDescription *)((char *)&v67 + 3), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v36, a5[1], &v76, (const AudioStreamBasicDescription *)((char *)&v67 + 2), v37);
  if (!*((_BYTE *)this + 560) && (!(HIBYTE(v67) | BYTE2(v67)) || !*((_BYTE *)this + 656)))
  {
    if (*((_BYTE *)this + 681))
    {
      if (*((_DWORD *)this + 158))
      {
        v42 = 0;
        v43 = 0;
        do
        {
          if (*((float *)this + 5 * v42 + 175) == 0.0)
          {
            v44 = *((float *)this + 5 * v42 + 176);
            v45 = *((float *)this + 171);
            v46 = 1.0;
            if (v45 != 0.0)
              v46 = __exp10f(v45 / 10.0);
            if (v44 > v46)
              v43 = 1;
          }
          else
          {
            v47 = *((unsigned int *)this + 154);
            if ((_DWORD)v47)
            {
              v48 = 0;
              v50 = 0.0;
              do
              {
                mData = (float *)a5[1]->mBuffers[v42].mData;
                v50 = v50
                    + (float)((float)(mData[(v47 + v48)] * mData[(v47 + v48)])
                            + (float)(mData[v48] * mData[v48]));
                ++v48;
              }
              while (v47 != v48);
            }
            else
            {
              v50 = 0.0;
            }
            v51 = *((float *)this + 172);
            v52 = 1.0;
            if (v51 != 0.0)
              v52 = __exp10f(v51 / 10.0);
            if (v50 > v52)
              v43 = 1;
          }
          ++v42;
        }
        while (v42 < *((unsigned int *)this + 158));
      }
      else
      {
        v43 = 0;
      }
      v53 = v43 & 1;
    }
    else
    {
      v53 = 0;
    }
    v54 = v53 ^ 1;
    switch(*((_DWORD *)this + 165))
    {
      case 0:
        MCLP_ORNLMS_BLAS::ProcessBufferList(*((MCLP_ORNLMS_BLAS **)this + 131), *a5, *a7, v53);
        if (*((_BYTE *)this + 680))
          MCLP_ORNLMS_BLAS::ProcessEchoBufferList(*((MCLP_ORNLMS_BLAS **)this + 131), a5[1], a7[1]);
        v55 = *((_QWORD *)this + 9);
        if (v55)
          goto LABEL_112;
        v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v57)
          v56 = 0;
        else
          v56 = *v57;
        goto LABEL_123;
      case 1:
        MCLP_FRLS_vDSP::ProcessBufferList(*((MCLP_FRLS_vDSP **)this + 132), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 680), v54, *((unsigned __int8 *)this + 1012));
        v55 = *((_QWORD *)this + 9);
        if (v55)
          goto LABEL_112;
        v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v58)
          v56 = 0;
        else
          v56 = *v58;
        goto LABEL_123;
      case 2:
        MCLP_FLSL_Joint_OS_vDSP::ProcessBufferList(*((MCLP_FLSL_Joint_OS_vDSP **)this + 133), *a5, a5[1], *a7, a7[1], v54, 0, *((unsigned __int8 *)this + 1012), (unsigned int *)this + 256);
        v55 = *((_QWORD *)this + 9);
        if (v55)
        {
LABEL_112:
          v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
        }
        else
        {
          v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v59)
            v56 = 0;
          else
            v56 = *v59;
        }
LABEL_123:
        *((_DWORD *)this + 256) = ausdk::AUElement::GetParameter(v56, 2u);
        break;
      case 3:
        MCLP_FLSL_Joint_OS_vDSP::ProcessBufferList(*((MCLP_FLSL_Joint_OS_vDSP **)this + 133), *a5, a5[1], *a7, a7[1], v54, 1, *((unsigned __int8 *)this + 1012), (unsigned int *)this + 256);
        break;
      default:
        break;
    }
    if (!*((_BYTE *)this + 680))
      CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
    v60 = *((_QWORD *)this + 9);
    if (v60)
    {
      v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
    }
    else
    {
      v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v62)
        v61 = 0;
      else
        v61 = *v62;
    }
    ausdk::AUElement::SetParameter(v61, 0x11u, (float)*((unsigned int *)this + 256), 0);
    AudioDSP::Utility::DetectNonFinites(v36, *a7, &v76, (const AudioStreamBasicDescription *)((char *)&v67 + 1), v63);
    AudioDSP::Utility::DetectNonFinites(v36, a7[1], &v76, (const AudioStreamBasicDescription *)&v67, v64);
    if (!(BYTE1(v67) | v67) || !*((_BYTE *)this + 656))
      goto LABEL_142;
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v66 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      {
LABEL_141:
        (*(void (**)(AUDereverb *))(*(_QWORD *)this + 64))(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *a7);
        CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
        *((_QWORD *)this + 80) = 0;
LABEL_142:
        AUDereverb::LogMaster((uint64_t)this, *a5, *a7, v65);
        return 0;
      }
    }
    else
    {
      v66 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v68 = 136315906;
      v69 = "AUDereverb.cpp";
      v70 = 1024;
      v71 = 1193;
      v72 = 1024;
      v73 = BYTE1(v67);
      v74 = 1024;
      v75 = v67;
      _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: (OutputSignals, MCLPLeeOut) is NOT finite: (%u, %u)\n", (uint8_t *)&v68, 0x1Eu);
    }
    goto LABEL_141;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
  if (HIBYTE(v67) | BYTE2(v67))
  {
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v38 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
        goto LABEL_100;
    }
    else
    {
      v38 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v68 = 136315906;
      v69 = "AUDereverb.cpp";
      v70 = 1024;
      v71 = 1092;
      v72 = 1024;
      v73 = HIBYTE(v67);
      v74 = 1024;
      v75 = BYTE2(v67);
      _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v68, 0x1Eu);
    }
  }
LABEL_100:
  *((_QWORD *)this + 80) = 0;
  return 0;
}

uint64_t AUDereverb::Render(AUDereverb *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  char v11;
  char v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v15;
  ausdk::AUIOElement *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];

  v8 = 0;
  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v10 = (AUDereverb *)((char *)this + 80);
  v11 = 1;
  do
  {
    v12 = v11;
    if (ausdk::AUBase::HasInput(this, v8))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = 1;
    }
    v11 = 0;
    v8 = 1;
  }
  while ((v12 & 1) != 0);
  v15 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), 0);
  v21[0] = ausdk::AUIOElement::PrepareBuffer(v15, a4);
  v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), 1u);
  v17 = ausdk::AUIOElement::PrepareBuffer(v16, a4);
  result = 0;
  v21[1] = v17;
  if ((v9 & 1) == 0)
  {
    v18 = ausdk::AUScope::SafeGetElement(v10, 0);
    v20[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    v19 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v20[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    return (*(uint64_t (**)(AUDereverb *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v20, 2, v21);
  }
  return result;
}

uint64_t AUDereverb::GetParameterList(AUDereverb *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a2 == 4)
  {
    if (!a3)
    {
      v4 = 5;
      goto LABEL_10;
    }
    v4 = 5;
    *a3 = 9;
    v5 = 13;
    v6 = 12;
    v7 = 11;
    v8 = 10;
    v9 = 4;
    v10 = 3;
    v11 = 2;
    v12 = 1;
    goto LABEL_7;
  }
  if (a2)
    return 4294956430;
  v4 = 17;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    v5 = 21;
    v6 = 20;
    v7 = 19;
    v8 = 18;
    *((_OWORD *)a3 + 2) = xmmword_1B66A1EE0;
    a3[12] = 17;
    v9 = 16;
    v10 = 15;
    v11 = 14;
    v12 = 13;
LABEL_7:
    a3[v12] = v8;
    a3[v11] = v7;
    a3[v10] = v6;
    a3[v9] = v5;
  }
LABEL_10:
  result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUDereverb::GetParameterInfo(AUDereverb *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  AudioUnitParameterOptions flags;
  int v10;
  AudioUnitParameterValue v11;
  AudioUnitParameterValue v12;
  const __CFString *v13;
  AudioUnitParameterOptions v14;
  AudioUnitParameterOptions v15;
  const __CFString *v16;
  AudioUnitParameterOptions v17;
  const __CFString *v18;
  uint64_t v19;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 9:
        buffer->cfNameString = CFSTR("EC Delta EIR");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Delta EIR"), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x501502F900000000;
        goto LABEL_14;
      case 10:
        buffer->cfNameString = CFSTR("EC IR Delay");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC IR Delay"), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x43C8000000000000;
        goto LABEL_14;
      case 11:
        v8 = CFSTR("EC Adapted flag");
        goto LABEL_13;
      case 12:
        buffer->cfNameString = CFSTR("EC Time aligned ref signal energy");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Time aligned ref signal energy"), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x447A000000000000;
        goto LABEL_14;
      case 13:
        v8 = CFSTR("EC Mic-Eclee cross correlation");
LABEL_13:
        buffer->cfNameString = v8;
        buffer->flags = 0x8000000;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x3F80000000000000;
LABEL_14:
        *(_QWORD *)&buffer->minValue = v7;
        flags = buffer->flags;
        v10 = 1073774592;
LABEL_40:
        v15 = flags | v10;
LABEL_41:
        result = 0;
        buffer->flags = v15;
        break;
      default:
        result = 4294956418;
        break;
    }
  }
  else
  {
    if (!a2)
    {
      result = 4294956418;
      switch(a3)
      {
        case 0:
          buffer->cfNameString = CFSTR("MCLP mode");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("MCLP mode"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          v6 = 0x4040000000000000;
          goto LABEL_26;
        case 1:
          buffer->cfNameString = CFSTR("Delay for MCLP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Delay for MCLP"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v6 = 0x408000003F800000;
          goto LABEL_26;
        case 2:
          buffer->cfNameString = CFSTR("MCLP order");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("MCLP order"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x41F000003F800000;
          v11 = 5.0;
          goto LABEL_27;
        case 3:
          buffer->cfNameString = CFSTR("Forgetting factor (time constant)");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Forgetting factor (time constant)"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(_QWORD *)&buffer->minValue = 0x412000003E99999ALL;
          v11 = 1.58;
          goto LABEL_27;
        case 4:
          buffer->cfNameString = CFSTR("Backward prediction error energy threshold");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Backward prediction error energy threshold"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0x41C8000000000000;
          v12 = 10.0;
          goto LABEL_30;
        case 5:
          v13 = CFSTR("Filter echo estimates?");
          goto LABEL_21;
        case 6:
          v13 = CFSTR("Stop adaptation during echo?");
LABEL_21:
          buffer->cfNameString = v13;
          buffer->flags = 0x8000000;
          CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          v14 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          buffer->defaultValue = 0.0;
          v15 = v14 | 0xC0100000;
          goto LABEL_41;
        case 7:
          v16 = CFSTR("Sxx threshold to stop adaptation");
          goto LABEL_24;
        case 8:
          v16 = CFSTR("Eclee threshold to stop adaptation");
LABEL_24:
          buffer->cfNameString = v16;
          buffer->flags = 0x8000000;
          CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          buffer->defaultValue = -60.0;
          *(_QWORD *)&buffer->minValue = 3267887104;
          goto LABEL_31;
        case 14:
          buffer->cfNameString = CFSTR("Apply conversion factor?");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Apply conversion factor?"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          v6 = 0x3F80000000000000;
LABEL_26:
          *(_QWORD *)&buffer->minValue = v6;
          v11 = 1.0;
LABEL_27:
          buffer->defaultValue = v11;
          v15 = buffer->flags | 0xC0000000;
          goto LABEL_41;
        case 15:
          buffer->cfNameString = CFSTR("Min frequency for backward prediction energy");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Min frequency for backward prediction energy"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(_QWORD *)&buffer->minValue = 0x447A000000000000;
          v12 = 50.0;
          goto LABEL_30;
        case 16:
          buffer->cfNameString = CFSTR("Max frequency for backward prediction energy");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Max frequency for backward prediction energy"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(_QWORD *)&buffer->minValue = 0x46BB8000447A0000;
          v12 = 7000.0;
LABEL_30:
          buffer->defaultValue = v12;
LABEL_31:
          v10 = -1072693248;
          goto LABEL_40;
        case 17:
          buffer->cfNameString = CFSTR("Selected MCLP order");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Selected MCLP order"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          v17 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x41F0000000000000;
          buffer->defaultValue = 0.0;
          v15 = v17 | 0x40108000;
          goto LABEL_41;
        case 18:
          buffer->cfNameString = CFSTR("Weighted error regularization energy threshold");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Weighted error regularization energy threshold"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0xC2200000C2C80000;
          buffer->defaultValue = -70.0;
          goto LABEL_39;
        case 19:
          v18 = CFSTR("P-norm");
          goto LABEL_37;
        case 20:
          buffer->cfNameString = CFSTR("Time period after which debug metrics are logged");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Time period after which debug metrics are logged"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          v19 = 0x45D0500000000000;
          goto LABEL_38;
        case 21:
          v18 = CFSTR("Place holder");
LABEL_37:
          buffer->cfNameString = v18;
          buffer->flags = 0x8000000;
          CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v19 = 0x3F80000000000000;
LABEL_38:
          *(_QWORD *)&buffer->minValue = v19;
          buffer->defaultValue = 0.0;
LABEL_39:
          v10 = -1005584384;
          goto LABEL_40;
        default:
          return result;
      }
    }
    return 4294956430;
  }
  return result;
}

UInt8 *AUDereverb::SaveExtendedScopes(AUDereverb *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDereverb::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

uint64_t AUDereverb::GetParameterValueStrings(AUDereverb *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3)
    return 0;
  v7[0] = xmmword_1E69D0E50;
  v7[1] = *(_OWORD *)off_1E69D0E60;
  v6 = CFArrayCreate(0, (const void **)v7, 4, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AUDereverb::GetLatency(AUDereverb *this)
{
  return 0.0;
}

double AUDereverb::GetTailTime(AUDereverb *this)
{
  return 0.05;
}

uint64_t AUDereverb::SupportsTail(AUDereverb *this)
{
  return 1;
}

BOOL AUDereverb::StreamFormatWritable(AUDereverb *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDereverb::SupportedNumChannels(AUDereverb *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDereverb::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUDereverb::ValidFormat(AUDereverb *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUDereverb::ChangeStreamFormat(AUDereverb *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Element;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v6 = a3;
  v7 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v9 = 0;
  if (v7 == 1 && !v6)
  {
    v10 = *((_QWORD *)this + 15);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1))
        return 0;
    }
    else
    {
      v11 = *((_QWORD *)this + 12);
      if ((unint64_t)(*((_QWORD *)this + 13) - v11) < 9 || !*(_QWORD *)(v11 + 8))
        return 0;
    }
    Element = ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 1u);
    v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)Element + 56))(Element, a5);
    if (AUDereverbLogScope(void)::once != -1)
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
    if (AUDereverbLogScope(void)::scope)
    {
      v13 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
        return v9;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = 136315394;
      v16 = "AUDereverb.cpp";
      v17 = 1024;
      v18 = 916;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v15, 0x12u);
    }
  }
  return v9;
}

uint64_t AUDereverb::GetScopeExtended(AUDereverb *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 568;
  else
    return 0;
}

os_log_t ___ZL18AUDereverbLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "audrev");
  *v0 = result;
  AUDereverbLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUDereverb::UpdateState(AUDereverb *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  caulk::concurrent::messenger *Element;
  uint64_t v54;
  uint64_t v55;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 165) = (int)ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((_DWORD *)this + 166) = ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((_DWORD *)this + 167) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 168) = ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v15, 4u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((_BYTE *)this + 680) = ausdk::AUElement::GetParameter(v18, 5u) != 0.0;
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((_BYTE *)this + 681) = ausdk::AUElement::GetParameter(v21, 6u) != 0.0;
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v24, 7u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 172) = ausdk::AUElement::GetParameter(v27, 8u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((_BYTE *)this + 1012) = ausdk::AUElement::GetParameter(v30, 0xEu) != 0.0;
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((float *)this + 254) = ausdk::AUElement::GetParameter(v33, 0xFu);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((float *)this + 255) = ausdk::AUElement::GetParameter(v36, 0x10u);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((_DWORD *)this + 256) = ausdk::AUElement::GetParameter(v39, 0x11u);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((float *)this + 257) = ausdk::AUElement::GetParameter(v42, 0x12u);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((float *)this + 258) = ausdk::AUElement::GetParameter(v45, 0x13u);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *((float *)this + 259) = ausdk::AUElement::GetParameter(v48, 0x14u);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *((float *)this + 260) = ausdk::AUElement::GetParameter(v51, 0x15u);
  if (*((float *)this + 257) == 0.0)
    *((_DWORD *)this + 257) = -1031012352;
  *((_DWORD *)this + 154) = *((_DWORD *)this + 84);
  *((_DWORD *)this + 158) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0) + 108);
  Element = (caulk::concurrent::messenger *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0);
  *((_QWORD *)this + 78) = *((_QWORD *)Element + 10);
  if (!*((_QWORD *)this + 134) && *((float *)this + 259) > 0.0)
  {
    v54 = caulk::concurrent::messenger::shared_logging_priority(Element);
    v55 = operator new();
    MEMORY[0x1BCC94FFC](v55, 0, v54);
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 134, v55);
  }
  AUDereverb::InitializeMCLPClasses(this);
}

void sub_1B62E1E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t AUDereverb::LogMaster(uint64_t this, const AudioBufferList *a2, const AudioBufferList *a3, double a4)
{
  double v4;
  float v5;
  uint64_t v6;
  caulk::concurrent::messenger *v7;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  void **p_mData;
  void **v14;
  const float *v15;
  const float *v16;
  const float *v17;
  float v18;
  float v19;
  float v20;
  caulk::concurrent::messenger *v21;
  uint64_t v22;
  caulk::concurrent::messenger *v23;
  uint64_t v24;
  float v25;
  uint64_t __C;

  LODWORD(a4) = *(_DWORD *)(this + 616);
  v4 = *(double *)(this + 640) + (double)*(unint64_t *)&a4 / *(double *)(this + 624);
  if (v4 < 0.0)
    v4 = 0.0;
  *(double *)(this + 640) = v4;
  v5 = *(float *)(this + 1036);
  if (v5 > 0.0 && v4 > v5)
  {
    v6 = this;
    v7 = *(caulk::concurrent::messenger **)(this + 1072);
    if (v7)
    {
      v10 = (_QWORD *)MEMORY[0x1E0DDB688];
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v11 + 16) = 0;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 640);
      *(_QWORD *)v11 = &off_1E69D0EC0;
      *(_QWORD *)(v11 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v11);
      if (*(_DWORD *)(v6 + 632))
      {
        v12 = 0;
        p_mData = &a3->mBuffers[0].mData;
        v14 = &a2->mBuffers[0].mData;
        do
        {
          __C = 0;
          v25 = 0.0;
          vDSP_svesq((const float *)*v14, 1, (float *)&__C + 1, (2 * *(_DWORD *)(v6 + 616)));
          vDSP_svesq((const float *)*p_mData, 1, (float *)&__C, (2 * *(_DWORD *)(v6 + 616)));
          v16 = (const float *)*v14;
          v14 += 2;
          v15 = v16;
          v17 = (const float *)*p_mData;
          p_mData += 2;
          vDSP_distancesq(v15, 1, v17, 1, &v25, (2 * *(_DWORD *)(v6 + 616)));
          v18 = *(float *)&__C + 2.2204e-16;
          v19 = log10f((float)(*(float *)&__C + 2.2204e-16) / (float)(v25 + 2.2204e-16)) * 10.0;
          v20 = log10f(v18 / (float)(*((float *)&__C + 1) + 2.2204e-16)) * 10.0;
          v21 = *(caulk::concurrent::messenger **)(v6 + 1072);
          v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v10 + 16))(*v10, 40, 8);
          *(_DWORD *)(v22 + 16) = 0;
          *(_DWORD *)(v22 + 24) = v12;
          *(float *)(v22 + 28) = v19;
          *(float *)(v22 + 32) = v20;
          *(_QWORD *)v22 = &off_1E69D0EE8;
          *(_QWORD *)(v22 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v22);
          ++v12;
        }
        while (v12 < *(unsigned int *)(v6 + 632));
      }
      v23 = *(caulk::concurrent::messenger **)(v6 + 1072);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v10 + 16))(*v10, 24, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)v24 = &off_1E69D0F10;
      *(_QWORD *)(v24 + 8) = 0;
      this = caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v24);
      *(_QWORD *)(v6 + 640) = 0;
    }
  }
  return this;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::perform(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  NSObject *v4;
  caulk::concurrent::message *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  v3 = *(float *)(a1 + 32);
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v8 = "AUDereverb.cpp";
    v9 = 1024;
    v10 = 1246;
    v11 = 1024;
    v12 = v1;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: DRR measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUDereverb.cpp";
    v6 = 1024;
    v7 = 1250;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::perform(caulk::concurrent::message *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  caulk::concurrent::message *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v2 = *((_QWORD *)a1 + 3);
  v1 = *((_QWORD *)a1 + 4);
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "AUDereverb.cpp";
    v8 = 1024;
    v9 = 1231;
    v10 = 2048;
    v11 = v2;
    v12 = 2048;
    v13 = v1;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: ********* Logging begins *********\nAUDereverb: logging (period, timestamp): (%f, %f) (s)\n", buf, 0x26u);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void AUDereverb::InitializeMCLPClasses(AUDereverb *this)
{
  NSObject *v2;
  unsigned int v3;
  double v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  float v10;
  NSObject *v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  NSObject *v16;
  float v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  float v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  float v40;
  int v41;
  int m;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  char v56;
  unint64_t v57;
  float v58;
  float v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  uint64_t *v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t j;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD **v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t k;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD **v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  float v145;
  unint64_t v146;
  void *v147;
  void *v148;
  void **v149;
  _BYTE buf[18];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (AUDereverbLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(_QWORD *)AUDereverbLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUDereverb.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1325;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Initialize MCLP Classes.\n", buf, 0x12u);
  }
LABEL_9:
  v3 = *((_DWORD *)this + 154);
  v4 = *((double *)this + 78) * 0.5;
  if (v4 >= *((float *)this + 254))
    goto LABEL_24;
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (!AUDereverbLogScope(void)::scope)
  {
    v5 = MEMORY[0x1E0C81028];
LABEL_16:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUDereverb.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1331;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Fmin must be < (samplingRate/2). Setting Fmin = samplingRate/2.\n", buf, 0x12u);
    }
    goto LABEL_18;
  }
  v5 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(_QWORD *)AUDereverbLogScope(void)::scope)
    goto LABEL_16;
LABEL_18:
  v6 = *((double *)this + 78) * 0.5;
  *((float *)this + 254) = v6;
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
    v6 = *((float *)this + 254);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, 0xFu, v6, 0);
  v4 = *((double *)this + 78) * 0.5;
LABEL_24:
  v10 = *((float *)this + 255);
  if (v4 >= v10)
    goto LABEL_39;
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (!AUDereverbLogScope(void)::scope)
  {
    v11 = MEMORY[0x1E0C81028];
LABEL_31:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUDereverb.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1336;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Fmax must be < (samplingRate/2). Setting Fmax = samplingRate/2.\n", buf, 0x12u);
    }
    goto LABEL_33;
  }
  v11 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(_QWORD *)AUDereverbLogScope(void)::scope)
    goto LABEL_31;
LABEL_33:
  v12 = *((double *)this + 78) * 0.5;
  *((float *)this + 255) = v12;
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    v12 = *((float *)this + 255);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 0x10u, v12, 0);
  v10 = *((float *)this + 255);
LABEL_39:
  if (*((float *)this + 254) <= v10)
    goto LABEL_54;
  if (AUDereverbLogScope(void)::once != -1)
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_6882);
  if (!AUDereverbLogScope(void)::scope)
  {
    v16 = MEMORY[0x1E0C81028];
LABEL_46:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUDereverb.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1341;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Fmin must be <= Fmax. Setting Fmin = Fmax.\n", buf, 0x12u);
    }
    goto LABEL_48;
  }
  v16 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(_QWORD *)AUDereverbLogScope(void)::scope)
    goto LABEL_46;
LABEL_48:
  v17 = *((float *)this + 255);
  *((float *)this + 254) = v17;
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    v17 = *((float *)this + 254);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 0xFu, v17, 0);
LABEL_54:
  v21 = *((float *)this + 168);
  v22 = 0.0;
  if (v21 != 0.0)
  {
    v23 = *((double *)this + 78);
    v22 = expf((float)((float)-(float)*((unsigned int *)this + 154) / v23) / v21);
  }
  v24 = *((float *)this + 169);
  v25 = 1.0;
  if (v24 != 0.0)
    v25 = __exp10f(v24 / 10.0);
  if (*((_QWORD *)this + 131))
    std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100]((_QWORD *)this + 131, 0);
  if (*((_QWORD *)this + 132))
    std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  v26 = v3 + 1;
  if (*((_QWORD *)this + 133))
    std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  v27 = *((_DWORD *)this + 165);
  if ((v27 - 2) < 2)
  {
    v46 = *((float *)this + 257);
    v47 = 1.0;
    if (v46 != 0.0)
      v47 = __exp10f(v46 / 10.0);
    v48 = operator new();
    v49 = *((_DWORD *)this + 158);
    v50 = *((_DWORD *)this + 166);
    v51 = *((_DWORD *)this + 167);
    v52 = *((float *)this + 258);
    v53 = *((double *)this + 78);
    v54 = *((float *)this + 254);
    v55 = *((float *)this + 255);
    v56 = *((_BYTE *)this + 680);
    *(_DWORD *)v48 = v49;
    *(_DWORD *)(v48 + 4) = v26;
    *(_DWORD *)(v48 + 8) = v50;
    *(_DWORD *)(v48 + 12) = v51;
    *(_DWORD *)(v48 + 16) = 629145600;
    *(float *)(v48 + 20) = v47;
    *(float *)(v48 + 24) = v22;
    *(float *)(v48 + 28) = v25;
    *(float *)(v48 + 32) = v52;
    *(_BYTE *)(v48 + 36) = v56;
    *(_DWORD *)(v48 + 40) = v49;
    *(_DWORD *)(v48 + 44) = v26;
    *(_DWORD *)(v48 + 48) = v26;
    *(_DWORD *)(v48 + 52) = 2 * v26;
    v57 = 2 * v49;
    *(_DWORD *)(v48 + 56) = v3 >> 1;
    *(_DWORD *)(v48 + 60) = v57;
    *(_DWORD *)(v48 + 64) = 2 * v26;
    *(_DWORD *)(v48 + 68) = v50;
    *(_DWORD *)(v48 + 72) = v51;
    *(_DWORD *)(v48 + 76) = v26 * v49;
    *(_DWORD *)(v48 + 80) = v26 * v49 * v49;
    *(_QWORD *)(v48 + 84) = 0x3F80000000000000;
    v58 = 1.0 / (float)v49;
    *(float *)(v48 + 92) = v58;
    *(float *)(v48 + 96) = 1.0 - v22;
    *(float *)(v48 + 100) = v58 / (float)(1.0 - v22);
    *(float *)(v48 + 104) = 1.0 - (float)(v52 * 0.5);
    *(float *)(v48 + 108) = v53;
    *(float *)(v48 + 112) = v54;
    *(float *)(v48 + 116) = v55;
    v59 = v53 * 0.5;
    v60 = vcvtas_u32_f32((float)(v54 / v59) * (float)v3);
    v61 = vcvtas_u32_f32((float)(v55 / v59) * (float)v3);
    *(_DWORD *)(v48 + 120) = v60;
    *(_DWORD *)(v48 + 124) = v61;
    *(_DWORD *)(v48 + 128) = v61 - v60 + 1;
    v62 = (float)v3 + (float)v3;
    *(float *)(v48 + 132) = v62;
    *(float *)(v48 + 136) = 1.0 / v62;
    *(_DWORD *)(v48 + 140) = v49;
    buf[0] = 0;
    std::vector<BOOL>::vector((_QWORD *)(v48 + 144), v57, buf);
    *(_DWORD *)(v48 + 168) = 0;
    std::vector<float>::vector((_QWORD *)(v48 + 176), *(unsigned int *)(v48 + 76));
    std::vector<float>::vector((_QWORD *)(v48 + 200), *(unsigned int *)(v48 + 76));
    std::vector<DSPSplitComplex>::vector((_QWORD *)(v48 + 224), *(unsigned int *)(v48 + 40));
    std::vector<float>::vector((_QWORD *)(v48 + 248), (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72)));
    std::vector<float>::vector((_QWORD *)(v48 + 272), (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72)));
    v63 = *(unsigned int *)(v48 + 72);
    std::vector<DSPSplitComplex>::vector(buf, *(unsigned int *)(v48 + 40));
    std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)(v48 + 296), v63, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    std::vector<float>::vector((_QWORD *)(v48 + 320), (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72)));
    std::vector<float>::vector((_QWORD *)(v48 + 344), (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72)));
    v64 = *(unsigned int *)(v48 + 72);
    std::vector<DSPSplitComplex>::vector(buf, *(unsigned int *)(v48 + 40));
    std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)(v48 + 368), v64, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v65 = *(unsigned int *)(v48 + 72);
    v66 = *(_DWORD *)(v48 + 40);
    std::vector<float>::vector(&v147, *(unsigned int *)(v48 + 64));
    std::vector<std::vector<float>>::vector(buf, v66 * v66 + (((v66 - 1) * v66) >> 1), (uint64_t)&v147);
    std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)(v48 + 392), v65, (uint64_t *)buf);
    v149 = (void **)buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v149);
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    v67 = *(unsigned int *)(v48 + 72);
    v68 = *(_DWORD *)(v48 + 40);
    std::vector<float>::vector(&v147, *(unsigned int *)(v48 + 64));
    std::vector<std::vector<float>>::vector(buf, v68 * v68 + (((v68 - 1) * v68) >> 1), (uint64_t)&v147);
    std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)(v48 + 416), v67, (uint64_t *)buf);
    v149 = (void **)buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v149);
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    v69 = *(unsigned int *)(v48 + 72);
    std::vector<DSPSplitComplex>::vector(buf, *(_DWORD *)(v48 + 40) * *(_DWORD *)(v48 + 40)+ (((*(_DWORD *)(v48 + 40) - 1) * *(_DWORD *)(v48 + 40)) >> 1));
    std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)(v48 + 440), v69, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    std::vector<float>::vector((_QWORD *)(v48 + 464), (*(_DWORD *)(v48 + 40) * *(_DWORD *)(v48 + 72) * *(_DWORD *)(v48 + 64)), (_DWORD *)(v48 + 88));
    std::vector<float>::vector((_QWORD *)(v48 + 488), *(unsigned int *)(v48 + 40));
    std::vector<float>::vector((_QWORD *)(v48 + 512), *(unsigned int *)(v48 + 64));
    v70 = *(unsigned int *)(v48 + 60);
    std::vector<float>::vector(buf, *(unsigned int *)(v48 + 64));
    std::vector<std::vector<float>>::vector((_QWORD *)(v48 + 536), v70, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v71 = *(unsigned int *)(v48 + 60);
    std::vector<float>::vector(buf, *(unsigned int *)(v48 + 64));
    std::vector<std::vector<float>>::vector((_QWORD *)(v48 + 560), v71, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v72 = *(unsigned int *)(v48 + 60);
    std::vector<DSPSplitComplex>::vector(buf, 2uLL);
    std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)(v48 + 584), v72, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    std::vector<float>::vector((_QWORD *)(v48 + 608), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 632), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 656), *(unsigned int *)(v48 + 64));
    *(_QWORD *)(v48 + 680) = *(_QWORD *)(v48 + 632);
    *(_QWORD *)(v48 + 688) = *(_QWORD *)(v48 + 656);
    std::vector<float>::vector((_QWORD *)(v48 + 696), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 720), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 744), *(unsigned int *)(v48 + 44));
    std::vector<float>::vector((_QWORD *)(v48 + 768), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 792), *(unsigned int *)(v48 + 64));
    std::vector<float>::vector((_QWORD *)(v48 + 816), *(unsigned int *)(v48 + 44));
    *(_OWORD *)(v48 + 1096) = 0u;
    *(_OWORD *)(v48 + 1112) = 0u;
    *(_OWORD *)(v48 + 1064) = 0u;
    *(_OWORD *)(v48 + 1080) = 0u;
    *(_OWORD *)(v48 + 1032) = 0u;
    *(_OWORD *)(v48 + 1048) = 0u;
    *(_OWORD *)(v48 + 1000) = 0u;
    *(_OWORD *)(v48 + 1016) = 0u;
    *(_OWORD *)(v48 + 968) = 0u;
    *(_OWORD *)(v48 + 984) = 0u;
    *(_OWORD *)(v48 + 936) = 0u;
    *(_OWORD *)(v48 + 952) = 0u;
    *(_OWORD *)(v48 + 904) = 0u;
    *(_OWORD *)(v48 + 920) = 0u;
    *(_OWORD *)(v48 + 872) = 0u;
    *(_OWORD *)(v48 + 888) = 0u;
    *(_OWORD *)(v48 + 840) = 0u;
    *(_OWORD *)(v48 + 856) = 0u;
    v73 = *(unsigned int *)(v48 + 72);
    v74 = *(unsigned int *)(v48 + 40);
    if ((_DWORD)v73)
    {
      for (i = 0; i != v73; ++i)
      {
        if ((_DWORD)v74 * (_DWORD)v74 + (((v74 - 1) * v74) >> 1))
        {
          v76 = *(uint64_t **)(*(_QWORD *)(v48 + 392) + 24 * i);
          v77 = *(uint64_t **)(*(_QWORD *)(v48 + 416) + 24 * i);
          v78 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 440) + 24 * i) + 8);
          v79 = (_DWORD)v74 * (_DWORD)v74 + (((v74 - 1) * v74) >> 1);
          do
          {
            v80 = *v76;
            v76 += 3;
            *(v78 - 1) = v80;
            v81 = *v77;
            v77 += 3;
            *v78 = v81;
            v78 += 2;
            --v79;
          }
          while (v79);
        }
      }
      for (j = 0; j != v73; ++j)
      {
        if ((_DWORD)v74)
        {
          v83 = *(_DWORD *)(v48 + 44);
          v84 = *(_QWORD *)(v48 + 248);
          v85 = *(_QWORD *)(v48 + 272);
          v86 = *(_QWORD *)(v48 + 320);
          v87 = *(_QWORD *)(v48 + 344);
          v88 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 368) + 24 * j) + 8);
          v89 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 296) + 24 * j) + 8);
          v90 = *(_DWORD *)(v48 + 76) * j;
          v91 = v74;
          do
          {
            *(v89 - 1) = v84 + 4 * v90;
            *v89 = v85 + 4 * v90;
            *(v88 - 1) = v86 + 4 * v90;
            *v88 = v87 + 4 * v90;
            v88 += 2;
            v89 += 2;
            v90 += v83;
            --v91;
          }
          while (v91);
        }
      }
    }
    if ((_DWORD)v74)
    {
      v92 = 0;
      v93 = *(_DWORD *)(v48 + 44);
      v94 = *(_QWORD *)(v48 + 176);
      v95 = *(_QWORD *)(v48 + 200);
      v96 = (_QWORD *)(*(_QWORD *)(v48 + 224) + 8);
      do
      {
        *(v96 - 1) = v94 + 4 * v92;
        *v96 = v95 + 4 * v92;
        v96 += 2;
        v92 += v93;
        --v74;
      }
      while (v74);
    }
    v97 = *(unsigned int *)(v48 + 60);
    if ((_DWORD)v97)
    {
      v98 = *(uint64_t **)(v48 + 536);
      v99 = *(_QWORD ***)(v48 + 584);
      v100 = *(unsigned int *)(v48 + 44);
      v101 = *(uint64_t **)(v48 + 560);
      do
      {
        v103 = *v98;
        v98 += 3;
        v102 = v103;
        v105 = *v99;
        v99 += 3;
        v104 = v105;
        *v105 = v102;
        v105[2] = v102 + 4 * v100;
        v106 = *v101;
        v101 += 3;
        v104[1] = v106;
        v104[3] = v106 + 4 * v100;
        --v97;
      }
      while (v97);
    }
    if (*(_BYTE *)(v48 + 36))
    {
      v107 = *(unsigned int *)(v48 + 76);
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 840), v107, &v147);
      v108 = *(unsigned int *)(v48 + 76);
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 864), v108, &v147);
      std::vector<std::span<float,18446744073709551615ul>>::resize((char **)(v48 + 888), *(unsigned int *)(v48 + 40));
      v109 = (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72));
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 912), v109, &v147);
      v110 = (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72));
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 936), v110, &v147);
      vec::init<DSPSplitComplex>((uint64_t *)(v48 + 960), *(_DWORD *)(v48 + 72), *(_DWORD *)(v48 + 40));
      v111 = (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72));
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 984), v111, &v147);
      v112 = (*(_DWORD *)(v48 + 76) * *(_DWORD *)(v48 + 72));
      LODWORD(v147) = 0;
      std::vector<float>::assign((char **)(v48 + 1008), v112, &v147);
      vec::init<DSPSplitComplex>((uint64_t *)(v48 + 1032), *(_DWORD *)(v48 + 72), *(_DWORD *)(v48 + 40));
      vec::init<float>((uint64_t *)(v48 + 1056), *(_DWORD *)(v48 + 60), *(_DWORD *)(v48 + 64));
      vec::init<float>((uint64_t *)(v48 + 1080), *(_DWORD *)(v48 + 60), *(_DWORD *)(v48 + 64));
      vec::init<DSPSplitComplex>((uint64_t *)(v48 + 1104), *(_DWORD *)(v48 + 60), 2u);
      v113 = *(unsigned int *)(v48 + 72);
      v114 = *(unsigned int *)(v48 + 40);
      if ((_DWORD)v113)
      {
        for (k = 0; k != v113; ++k)
        {
          if ((_DWORD)v114)
          {
            v116 = *(_DWORD *)(v48 + 44);
            v117 = *(_QWORD *)(v48 + 912);
            v118 = *(_QWORD *)(v48 + 936);
            v119 = *(_QWORD *)(v48 + 984);
            v120 = *(_QWORD *)(v48 + 1008);
            v121 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 1032) + 24 * k) + 8);
            v122 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 960) + 24 * k) + 8);
            v123 = *(_DWORD *)(v48 + 76) * k;
            v124 = v114;
            do
            {
              *(v122 - 1) = v117 + 4 * v123;
              *v122 = v118 + 4 * v123;
              *(v121 - 1) = v119 + 4 * v123;
              *v121 = v120 + 4 * v123;
              v121 += 2;
              v122 += 2;
              v123 += v116;
              --v124;
            }
            while (v124);
          }
        }
      }
      if ((_DWORD)v114)
      {
        v125 = 0;
        v126 = *(_DWORD *)(v48 + 44);
        v127 = *(_QWORD *)(v48 + 840);
        v128 = *(_QWORD *)(v48 + 864);
        v129 = (_QWORD *)(*(_QWORD *)(v48 + 888) + 8);
        do
        {
          *(v129 - 1) = v127 + 4 * v125;
          *v129 = v128 + 4 * v125;
          v129 += 2;
          v125 += v126;
          --v114;
        }
        while (v114);
      }
      v130 = *(unsigned int *)(v48 + 60);
      if ((_DWORD)v130)
      {
        v131 = *(uint64_t **)(v48 + 1056);
        v132 = *(_QWORD ***)(v48 + 1104);
        v133 = *(unsigned int *)(v48 + 44);
        v134 = *(uint64_t **)(v48 + 1080);
        do
        {
          v136 = *v131;
          v131 += 3;
          v135 = v136;
          v138 = *v132;
          v132 += 3;
          v137 = v138;
          *v138 = v135;
          v138[2] = v135 + 4 * v133;
          v139 = *v134;
          v134 += 3;
          v137[1] = v139;
          v137[3] = v139 + 4 * v133;
          --v130;
        }
        while (v130);
      }
    }
    std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, v48);
  }
  else if (v27 == 1)
  {
    v140 = operator new();
    v141 = *((_DWORD *)this + 158);
    v142 = *((unsigned int *)this + 166);
    v143 = *((_DWORD *)this + 167);
    *(_DWORD *)v140 = v141;
    *(_DWORD *)(v140 + 4) = v26;
    *(_DWORD *)(v140 + 8) = v142;
    *(_DWORD *)(v140 + 12) = v143;
    *(_DWORD *)(v140 + 16) = 629145600;
    *(float *)(v140 + 20) = v22;
    *(float *)(v140 + 24) = v25;
    *(_DWORD *)(v140 + 28) = v141;
    *(_DWORD *)(v140 + 32) = v26;
    *(_DWORD *)(v140 + 36) = v26;
    *(_DWORD *)(v140 + 40) = v3 >> 1;
    *(_DWORD *)(v140 + 44) = v142;
    *(_DWORD *)(v140 + 48) = v143;
    v144 = v26 * v141;
    *(_DWORD *)(v140 + 52) = v144;
    *(_DWORD *)(v140 + 56) = v144 * v141;
    *(_QWORD *)(v140 + 60) = 0x3F80000000000000;
    *(float *)(v140 + 68) = 1.0 / (float)v141;
    *(float *)(v140 + 72) = 1.0 - v22;
    v145 = (float)v3 + (float)v3;
    *(float *)(v140 + 76) = v145;
    *(float *)(v140 + 80) = 1.0 / v145;
    *(_QWORD *)(v140 + 88) = 0;
    *(_DWORD *)(v140 + 84) = 0;
    std::vector<DSPComplex>::vector(buf, v144);
    std::vector<std::vector<DSPComplex>>::vector((_QWORD *)(v140 + 96), v142, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 120), (*(_DWORD *)(v140 + 52) * *(_DWORD *)(v140 + 48)));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 144), (*(_DWORD *)(v140 + 56) * *(_DWORD *)(v140 + 48)));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 168), (2 * *(_DWORD *)(v140 + 48) * *(_DWORD *)(v140 + 56)));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 192), (*(_DWORD *)(v140 + 56) * *(_DWORD *)(v140 + 48)));
    std::vector<float>::vector((_QWORD *)(v140 + 216), (*(_DWORD *)(v140 + 52) * *(_DWORD *)(v140 + 48)), (_DWORD *)(v140 + 64));
    std::vector<float>::vector((_QWORD *)(v140 + 240), (*(_DWORD *)(v140 + 52) * *(_DWORD *)(v140 + 48)), (_DWORD *)(v140 + 64));
    v146 = *(unsigned int *)(v140 + 44);
    std::vector<DSPComplex>::vector(buf, *(unsigned int *)(v140 + 52));
    std::vector<std::vector<DSPComplex>>::vector((_QWORD *)(v140 + 264), v146, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 288), (*(_DWORD *)(v140 + 52) * *(_DWORD *)(v140 + 48)));
    std::vector<float>::vector((_QWORD *)(v140 + 312), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 336), *(unsigned int *)(v140 + 32));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 360), *(unsigned int *)(v140 + 52));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 384), *(unsigned int *)(v140 + 52));
    std::vector<float>::vector((_QWORD *)(v140 + 408), *(unsigned int *)(v140 + 32));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 432), (2 * *(_DWORD *)(v140 + 52)));
    std::vector<float>::vector((_QWORD *)(v140 + 456), *(unsigned int *)(v140 + 32));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 480), *(unsigned int *)(v140 + 32));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 504), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 528), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 552), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 576), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 600), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 624), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 648), *(unsigned int *)(v140 + 32));
    std::vector<float>::vector((_QWORD *)(v140 + 672), *(unsigned int *)(v140 + 32));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 696), *(unsigned int *)(v140 + 52));
    std::vector<DSPComplex>::vector((_QWORD *)(v140 + 720), (2 * *(_DWORD *)(v140 + 52)));
    std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, v140);
  }
  else if (!v27)
  {
    v28 = operator new();
    v29 = *((_DWORD *)this + 158);
    v30 = *((_DWORD *)this + 166);
    v31 = *((_DWORD *)this + 167);
    *(_DWORD *)v28 = v29;
    *(_DWORD *)(v28 + 4) = v26;
    *(_DWORD *)(v28 + 8) = v30;
    *(_DWORD *)(v28 + 12) = v31;
    *(_DWORD *)(v28 + 16) = 629145600;
    *(float *)(v28 + 20) = v22;
    *(float *)(v28 + 24) = v25;
    *(_DWORD *)(v28 + 28) = v29;
    *(_DWORD *)(v28 + 32) = v26;
    *(_DWORD *)(v28 + 36) = v30;
    *(_DWORD *)(v28 + 40) = v31;
    v32 = v30 * v29;
    *(_DWORD *)(v28 + 44) = 2 * v29;
    *(_DWORD *)(v28 + 48) = v32;
    v33 = v26 * v29;
    v34 = v29 * v29;
    *(_DWORD *)(v28 + 52) = v33;
    *(_DWORD *)(v28 + 56) = v34;
    *(_DWORD *)(v28 + 60) = v34 * v26;
    *(float *)(v28 + 64) = 1.0 - v22;
    *(_QWORD *)(v28 + 68) = 1065353216;
    v35 = (float)v3 + (float)v3;
    *(float *)(v28 + 76) = v35;
    *(float *)(v28 + 80) = 1.0 / v35;
    *(_DWORD *)(v28 + 84) = 0;
    *(_DWORD *)(v28 + 88) = 0;
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 96), v32 * v26);
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 120), (*(_DWORD *)(v28 + 52) * *(_DWORD *)(v28 + 40)));
    std::vector<float>::vector((_QWORD *)(v28 + 144), (*(_DWORD *)(v28 + 52) * *(_DWORD *)(v28 + 40)));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 168), (*(_DWORD *)(v28 + 60) * *(_DWORD *)(v28 + 40)));
    std::vector<float>::vector((_QWORD *)(v28 + 192), (*(_DWORD *)(v28 + 52) * *(_DWORD *)(v28 + 40)));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 216), (*(_DWORD *)(v28 + 48) * *(_DWORD *)(v28 + 32)));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 240), (*(_DWORD *)(v28 + 52) * *(_DWORD *)(v28 + 40)));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 264), *(unsigned int *)(v28 + 52));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 288), *(unsigned int *)(v28 + 52));
    std::vector<DSPComplex>::vector((_QWORD *)(v28 + 312), *(unsigned int *)(v28 + 28));
    *(_BYTE *)(v28 + 336) = 0;
    v36 = *(_DWORD *)(v28 + 40);
    if (v36)
    {
      v37 = 0;
      v38 = *(_DWORD *)(v28 + 32);
      do
      {
        if (v38)
        {
          v39 = *(unsigned int *)(v28 + 28);
          v40 = powf(v22, (float)v37);
          v41 = 0;
          for (m = 0; m != v38; ++m)
          {
            if ((_DWORD)v39)
            {
              v43 = *(_QWORD *)(v28 + 192);
              v44 = v41 + v37 * *(_DWORD *)(v28 + 52);
              v45 = v39;
              do
              {
                *(float *)(v43 + 4 * v44++) = v40;
                --v45;
              }
              while (v45);
            }
            v41 += v39;
          }
        }
        ++v37;
      }
      while (v37 != v36);
    }
    std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100]((_QWORD *)this + 131, v28);
  }
  *((_OWORD *)this + 40) = 0u;
}

void sub_1B62E37C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,uint64_t a35,void **a36,void **a37,void **a38)
{
  _QWORD *v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;

  v48 = *v42;
  if (*v42)
  {
    v38[88] = v48;
    operator delete(v48);
  }
  v49 = *v41;
  if (*v41)
  {
    v38[85] = v49;
    operator delete(v49);
  }
  v50 = *v40;
  if (*v40)
  {
    v38[82] = v50;
    operator delete(v50);
  }
  v51 = *v39;
  if (*v39)
  {
    v38[79] = v51;
    operator delete(v51);
  }
  v52 = *v45;
  if (*v45)
  {
    v38[76] = v52;
    operator delete(v52);
  }
  v53 = *v44;
  if (*v44)
  {
    v38[73] = v53;
    operator delete(v53);
  }
  v54 = *v43;
  if (*v43)
  {
    v38[70] = v54;
    operator delete(v54);
  }
  v55 = *a24;
  if (*a24)
  {
    v38[67] = v55;
    operator delete(v55);
  }
  v56 = *a25;
  if (*a25)
  {
    v38[64] = v56;
    operator delete(v56);
  }
  v57 = *a26;
  if (*a26)
  {
    v38[61] = v57;
    operator delete(v57);
  }
  v58 = *a27;
  if (*a27)
  {
    v38[58] = v58;
    operator delete(v58);
  }
  v59 = *a28;
  if (*a28)
  {
    v38[55] = v59;
    operator delete(v59);
  }
  v60 = *a29;
  if (*a29)
  {
    v38[52] = v60;
    operator delete(v60);
  }
  v61 = *a30;
  if (*a30)
  {
    v38[49] = v61;
    operator delete(v61);
  }
  v62 = *a31;
  if (*a31)
  {
    v38[46] = v62;
    operator delete(v62);
  }
  v63 = *a32;
  if (*a32)
  {
    v38[43] = v63;
    operator delete(v63);
  }
  v64 = *a33;
  if (*a33)
  {
    v38[40] = v64;
    operator delete(v64);
  }
  v65 = *a34;
  if (*a34)
  {
    v38[37] = v65;
    operator delete(v65);
  }
  *(_QWORD *)(v46 - 160) = a35;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 160));
  v66 = *a36;
  if (*a36)
  {
    v38[31] = v66;
    operator delete(v66);
  }
  v67 = *a37;
  if (*a37)
  {
    v38[28] = v67;
    operator delete(v67);
  }
  v68 = *a38;
  if (*a38)
  {
    v38[25] = v68;
    operator delete(v68);
  }
  v69 = **(void ***)(v46 - 224);
  if (v69)
  {
    v38[22] = v69;
    operator delete(v69);
  }
  v70 = **(void ***)(v46 - 216);
  if (v70)
  {
    v38[19] = v70;
    operator delete(v70);
  }
  v71 = **(void ***)(v46 - 208);
  if (v71)
  {
    v38[16] = v71;
    operator delete(v71);
  }
  *(_QWORD *)(v46 - 160) = *(_QWORD *)(v46 - 200);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 160));
  MEMORY[0x1BCC95CEC](v38, 0x10A0C403BC2864ALL);
  _Unwind_Resume(a1);
}

void sub_1B62E4188()
{
  JUMPOUT(0x1B62E4180);
}

_QWORD *std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[39];
    if (v3)
    {
      v2[40] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[36];
    if (v4)
    {
      v2[37] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[33];
    if (v5)
    {
      v2[34] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[30];
    if (v6)
    {
      v2[31] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[27];
    if (v7)
    {
      v2[28] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[24];
    if (v8)
    {
      v2[25] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[21];
    if (v9)
    {
      v2[22] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[18];
    if (v10)
    {
      v2[19] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[15];
    if (v11)
    {
      v2[16] = v11;
      operator delete(v11);
    }
    v12 = (void *)v2[12];
    if (v12)
    {
      v2[13] = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void **v28;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 720);
    if (v3)
    {
      *(_QWORD *)(v2 + 728) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 696);
    if (v4)
    {
      *(_QWORD *)(v2 + 704) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 672);
    if (v5)
    {
      *(_QWORD *)(v2 + 680) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 648);
    if (v6)
    {
      *(_QWORD *)(v2 + 656) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 624);
    if (v7)
    {
      *(_QWORD *)(v2 + 632) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 600);
    if (v8)
    {
      *(_QWORD *)(v2 + 608) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 576);
    if (v9)
    {
      *(_QWORD *)(v2 + 584) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 552);
    if (v10)
    {
      *(_QWORD *)(v2 + 560) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 528);
    if (v11)
    {
      *(_QWORD *)(v2 + 536) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 504);
    if (v12)
    {
      *(_QWORD *)(v2 + 512) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 480);
    if (v13)
    {
      *(_QWORD *)(v2 + 488) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 456);
    if (v14)
    {
      *(_QWORD *)(v2 + 464) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 432);
    if (v15)
    {
      *(_QWORD *)(v2 + 440) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 408);
    if (v16)
    {
      *(_QWORD *)(v2 + 416) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 384);
    if (v17)
    {
      *(_QWORD *)(v2 + 392) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(v2 + 360);
    if (v18)
    {
      *(_QWORD *)(v2 + 368) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(v2 + 336);
    if (v19)
    {
      *(_QWORD *)(v2 + 344) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v2 + 312);
    if (v20)
    {
      *(_QWORD *)(v2 + 320) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v2 + 288);
    if (v21)
    {
      *(_QWORD *)(v2 + 296) = v21;
      operator delete(v21);
    }
    v28 = (void **)(v2 + 264);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
    v22 = *(void **)(v2 + 240);
    if (v22)
    {
      *(_QWORD *)(v2 + 248) = v22;
      operator delete(v22);
    }
    v23 = *(void **)(v2 + 216);
    if (v23)
    {
      *(_QWORD *)(v2 + 224) = v23;
      operator delete(v23);
    }
    v24 = *(void **)(v2 + 192);
    if (v24)
    {
      *(_QWORD *)(v2 + 200) = v24;
      operator delete(v24);
    }
    v25 = *(void **)(v2 + 168);
    if (v25)
    {
      *(_QWORD *)(v2 + 176) = v25;
      operator delete(v25);
    }
    v26 = *(void **)(v2 + 144);
    if (v26)
    {
      *(_QWORD *)(v2 + 152) = v26;
      operator delete(v26);
    }
    v27 = *(void **)(v2 + 120);
    if (v27)
    {
      *(_QWORD *)(v2 + 128) = v27;
      operator delete(v27);
    }
    v28 = (void **)(v2 + 96);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void **v30;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v30 = (void **)(v2 + 1104);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 1080);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 1056);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 1032);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v3 = *(void **)(v2 + 1008);
    if (v3)
    {
      *(_QWORD *)(v2 + 1016) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 984);
    if (v4)
    {
      *(_QWORD *)(v2 + 992) = v4;
      operator delete(v4);
    }
    v30 = (void **)(v2 + 960);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v5 = *(void **)(v2 + 936);
    if (v5)
    {
      *(_QWORD *)(v2 + 944) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 912);
    if (v6)
    {
      *(_QWORD *)(v2 + 920) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 888);
    if (v7)
    {
      *(_QWORD *)(v2 + 896) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 864);
    if (v8)
    {
      *(_QWORD *)(v2 + 872) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 840);
    if (v9)
    {
      *(_QWORD *)(v2 + 848) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 816);
    if (v10)
    {
      *(_QWORD *)(v2 + 824) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 792);
    if (v11)
    {
      *(_QWORD *)(v2 + 800) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 768);
    if (v12)
    {
      *(_QWORD *)(v2 + 776) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 744);
    if (v13)
    {
      *(_QWORD *)(v2 + 752) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 720);
    if (v14)
    {
      *(_QWORD *)(v2 + 728) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 696);
    if (v15)
    {
      *(_QWORD *)(v2 + 704) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 656);
    if (v16)
    {
      *(_QWORD *)(v2 + 664) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 632);
    if (v17)
    {
      *(_QWORD *)(v2 + 640) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(v2 + 608);
    if (v18)
    {
      *(_QWORD *)(v2 + 616) = v18;
      operator delete(v18);
    }
    v30 = (void **)(v2 + 584);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 560);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 536);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v19 = *(void **)(v2 + 512);
    if (v19)
    {
      *(_QWORD *)(v2 + 520) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v2 + 488);
    if (v20)
    {
      *(_QWORD *)(v2 + 496) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v2 + 464);
    if (v21)
    {
      *(_QWORD *)(v2 + 472) = v21;
      operator delete(v21);
    }
    v30 = (void **)(v2 + 440);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 416);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 392);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)(v2 + 368);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v22 = *(void **)(v2 + 344);
    if (v22)
    {
      *(_QWORD *)(v2 + 352) = v22;
      operator delete(v22);
    }
    v23 = *(void **)(v2 + 320);
    if (v23)
    {
      *(_QWORD *)(v2 + 328) = v23;
      operator delete(v23);
    }
    v30 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v24 = *(void **)(v2 + 272);
    if (v24)
    {
      *(_QWORD *)(v2 + 280) = v24;
      operator delete(v24);
    }
    v25 = *(void **)(v2 + 248);
    if (v25)
    {
      *(_QWORD *)(v2 + 256) = v25;
      operator delete(v25);
    }
    v26 = *(void **)(v2 + 224);
    if (v26)
    {
      *(_QWORD *)(v2 + 232) = v26;
      operator delete(v26);
    }
    v27 = *(void **)(v2 + 200);
    if (v27)
    {
      *(_QWORD *)(v2 + 208) = v27;
      operator delete(v27);
    }
    v28 = *(void **)(v2 + 176);
    if (v28)
    {
      *(_QWORD *)(v2 + 184) = v28;
      operator delete(v28);
    }
    v29 = *(void **)(v2 + 144);
    if (v29)
      operator delete(v29);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::vector<void *>::assign(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v10];
    v11 = (uint64_t)&result[a2];
    v12 = 8 * a2;
    do
    {
      *result++ = *a3;
      v12 -= 8;
    }
    while (v12);
    goto LABEL_23;
  }
  v13 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 3;
  if (v13 >= a2)
    v14 = a2;
  else
    v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 3;
  for (; v14; --v14)
    *result++ = *a3;
  if (a2 <= v13)
  {
    v11 = *(_QWORD *)a1 + 8 * a2;
LABEL_23:
    *(_QWORD *)(a1 + 8) = v11;
    return result;
  }
  v15 = *(_QWORD **)(a1 + 8);
  v16 = &v15[a2 - v13];
  v17 = 8 * a2 - 8 * v13;
  do
  {
    *v15++ = *a3;
    v17 -= 8;
  }
  while (v17);
  *(_QWORD *)(a1 + 8) = v16;
  return result;
}

float NFNSwitchKernel::CalculateEnergyRatioInFreqRange(uint64_t a1, const float *a2, const float *a3, unsigned int a4, unsigned int a5, float *a6, float a7, float a8, float a9)
{
  uint64_t v14;
  float v15;
  double v16;
  double v17;
  float v18;
  unsigned int v19;
  float v20;
  vDSP_Length v21;
  VPTimeFreqConverter *v22;
  VPTimeFreqConverter *v23;
  float v24;
  float v25;
  float result;
  DSPSplitComplex __A;
  DSPSplitComplex v28;
  uint64_t __C;

  v14 = *(unsigned int *)(a1 + 16);
  v15 = (float)(v14 - 1);
  v16 = (float)v14;
  v17 = *(double *)(a1 + 8);
  v18 = a7 / (v17 * 0.5) * v16;
  v19 = fminf(v15, roundf(v18));
  v28.realp = *(float **)(a1 + 176);
  v28.imagp = &v28.realp[v14];
  __C = 0;
  v20 = a8 / (v17 * 0.5) * v16;
  v21 = fminf(v15, roundf(v20)) - v19 + 1;
  __A.realp = &v28.realp[v19];
  __A.imagp = &v28.imagp[v19];
  v22 = *(VPTimeFreqConverter **)(*(_QWORD *)(a1 + 32) + 8 * a4);
  if (v22)
    VPTimeFreqConverter::Analyze(v22, a2, &v28);
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 200), 1, v21);
  vDSP_sve(*(const float **)(a1 + 200), 1, (float *)&__C + 1, v21);
  v23 = *(VPTimeFreqConverter **)(*(_QWORD *)(a1 + 32) + 8 * a5);
  if (v23)
    VPTimeFreqConverter::Analyze(v23, a3, &v28);
  v24 = v17 / (double)v14;
  v25 = expf(-1.0 / (float)(v24 * a9));
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 200), 1, v21);
  vDSP_sve(*(const float **)(a1 + 200), 1, (float *)&__C, v21);
  result = (float)((float)(1.0 - v25) * (float)(*((float *)&__C + 1) / (float)(*(float *)&__C + 1.0e-12)))
         + (float)(v25 * *a6);
  *a6 = result;
  return result;
}

void NFNSwitchKernel::ProcessBufferLists(NFNSwitchKernel *this, const float *a2, const float *a3, const float *a4, const float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float *v15;
  float v16;
  float v17;
  float v18;
  float *realp;
  uint64_t v20;
  float *imagp;
  float v22;
  double v23;
  double v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  VPTimeFreqConverter *v30;
  float v31;
  float v32;
  float v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  double v40;
  double v41;
  float v42;
  float v43;
  double v44;
  float v45;
  char *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  double v51;
  double v52;
  float v53;
  float v54;
  double v55;
  float v56;
  vDSP_Length __N;
  DSPSplitComplex __A;
  DSPSplitComplex v61;
  float __C;

  if (*(_BYTE *)this)
  {
    v15 = a9;
    v16 = *((float *)this + 18);
    v17 = *((float *)this + 19);
    v18 = *((float *)this + 24);
    __C = 0.0;
    realp = (float *)*((_QWORD *)this + 22);
    v20 = *((unsigned int *)this + 4);
    imagp = &realp[v20];
    v22 = (float)(v20 - 1);
    v23 = (float)v20;
    v24 = *((double *)this + 1);
    v25 = v16 / (v24 * 0.5) * v23;
    v26 = fminf(v22, roundf(v25));
    v61.realp = realp;
    v61.imagp = imagp;
    v27 = v17 / (v24 * 0.5) * v23;
    __N = fminf(v22, roundf(v27)) - v26 + 1;
    v28 = v24 / (double)v20;
    v29 = expf(-1.0 / (float)(v18 * v28));
    v30 = *(VPTimeFreqConverter **)(*((_QWORD *)this + 4) + 32);
    if (v30)
    {
      VPTimeFreqConverter::Analyze(v30, a6, &v61);
      realp = v61.realp;
      imagp = v61.imagp;
    }
    __A.realp = &realp[v26];
    __A.imagp = &imagp[v26];
    vDSP_zvmags(&__A, 1, *((float **)this + 25), 1, __N);
    vDSP_sve(*((const float **)this + 25), 1, &__C, __N);
    *((float *)this + 5) = (float)((float)(1.0 - v29) * __C) + (float)(v29 * *((float *)this + 5));
    NFNSwitchKernel::CalculateEnergyRatioInFreqRange((uint64_t)this, a3, a2, 1u, 0, (float *)this + 6, *((float *)this + 20), *((float *)this + 21), *((float *)this + 25));
    NFNSwitchKernel::CalculateEnergyRatioInFreqRange((uint64_t)this, a4, a5, 2u, 3u, (float *)this + 7, *((float *)this + 22), *((float *)this + 23), *((float *)this + 26));
    v31 = log10f(*((float *)this + 5) + 1.0e-12) * 10.0;
    *((float *)this + 27) = v31;
    v32 = log10f(*((float *)this + 6) + 1.0e-12) * 10.0;
    *((float *)this + 28) = v32;
    v33 = log10f(*((float *)this + 7) + 1.0e-12) * 10.0;
    *((float *)this + 29) = v33;
    v34 = *((_DWORD *)this + 33);
    *((_BYTE *)this + 120) = 0;
    *((_DWORD *)this + 31) = 0;
    *((_DWORD *)this + 33) = 1;
    if (v31 >= *((float *)this + 14))
    {
      *((_DWORD *)this + 32) = 1;
    }
    else
    {
      *((_DWORD *)this + 32) = 0;
      if (v33 > *((float *)this + 16))
      {
        *((_BYTE *)this + 120) = 1;
        goto LABEL_11;
      }
    }
    if (v32 <= *((float *)this + 15) && v33 >= *((float *)this + 17))
    {
      if (v34 != 1)
      {
        v35 = 1;
        if (!v34)
        {
          *((_DWORD *)this + 33) = 1;
          v47 = *((unsigned int *)this + 4);
          if ((_DWORD)v47)
          {
            v48 = 1.0 / (double)(v47 - 1);
            v49 = 1.0;
            do
            {
              v50 = *a4++;
              v51 = (float)(v49 * v50);
              v52 = 1.0 - v49;
              v53 = *a5++;
              *(float *)&v51 = v51 + v52 * v53;
              *a8++ = *(float *)&v51;
              v54 = *a6++;
              v55 = (float)(v49 * v54);
              v56 = *a7++;
              *(float *)&v55 = v55 + v52 * v56;
              *v15++ = *(float *)&v55;
              v49 = v49 - v48;
              --v47;
            }
            while (v47);
            v35 = 1;
          }
          goto LABEL_18;
        }
        goto LABEL_12;
      }
LABEL_17:
      memcpy(a8, a5, 4 * *((unsigned int *)this + 4));
      memcpy(a9, a7, 4 * *((unsigned int *)this + 4));
      v35 = *((_DWORD *)this + 33);
LABEL_18:
      v46 = (char *)this + 20 * v35 + 136;
      *(_OWORD *)((char *)this + 136) = *(_OWORD *)v46;
      *((_DWORD *)this + 38) = *((_DWORD *)v46 + 4);
      return;
    }
    *((_DWORD *)this + 31) = 1;
LABEL_11:
    v35 = 0;
    *((_DWORD *)this + 33) = 0;
    if (v34)
    {
LABEL_12:
      v36 = *((unsigned int *)this + 4);
      if ((_DWORD)v36)
      {
        v37 = 1.0 / (double)(v36 - 1);
        v38 = 1.0;
        do
        {
          v39 = *a5++;
          v40 = (float)(v38 * v39);
          v41 = 1.0 - v38;
          v42 = *a4++;
          *(float *)&v40 = v40 + v41 * v42;
          *a8++ = *(float *)&v40;
          v43 = *a7++;
          v44 = (float)(v38 * v43);
          v45 = *a6++;
          *(float *)&v44 = v44 + v41 * v45;
          *v15++ = *(float *)&v44;
          v38 = v38 - v37;
          --v36;
        }
        while (v36);
      }
      goto LABEL_18;
    }
    a5 = a4;
    a7 = a6;
    goto LABEL_17;
  }
}

void AUDSPGraph::~AUDSPGraph(AUDSPGraph *this)
{
  AUDSPGraph::~AUDSPGraph(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  _BYTE v28[12];
  __int16 v29;
  AUDSPGraph *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D0F78;
  v2 = (void **)((char *)this + 632);
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v3 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v2;
      if (*((char *)this + 655) < 0)
        v4 = *v2;
      *(_DWORD *)v28 = 136315394;
      *(_QWORD *)&v28[4] = v4;
      v29 = 2048;
      v30 = this;
      v5 = "[%s|%p] destructed";
      v6 = v3;
      v7 = 22;
      goto LABEL_12;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v8 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v28 = 134217984;
      *(_QWORD *)&v28[4] = this;
      v5 = "[%p] destructed";
      v6 = v8;
      v7 = 12;
LABEL_12:
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, v5, v28, v7);
    }
  }
  v9 = (const void *)*((_QWORD *)this + 135);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 134);
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 133);
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 132);
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 131);
  if (v13)
    CFRelease(v13);
  v14 = (void *)*((_QWORD *)this + 128);
  if (v14)
  {
    *((_QWORD *)this + 129) = v14;
    operator delete(v14);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 126));
  v15 = (const void *)*((_QWORD *)this + 124);
  if (v15)
    CFRelease(v15);
  std::mutex::~mutex((std::mutex *)((char *)this + 928));
  *(_QWORD *)v28 = (char *)this + 904;
  std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  v16 = (void *)*((_QWORD *)this + 109);
  if (v16)
  {
    *((_QWORD *)this + 110) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 106);
  if (v17)
  {
    *((_QWORD *)this + 107) = v17;
    operator delete(v17);
  }
  v18 = (const void *)*((_QWORD *)this + 105);
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 104);
  if (v19)
    CFRelease(v19);
  v20 = (const void *)*((_QWORD *)this + 103);
  if (v20)
    CFRelease(v20);
  v21 = (void *)*((_QWORD *)this + 100);
  if (v21)
  {
    *((_QWORD *)this + 101) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 97);
  if (v22)
  {
    *((_QWORD *)this + 98) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 94);
  if (v23)
  {
    *((_QWORD *)this + 95) = v23;
    operator delete(v23);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 736);
  CACFArray::~CACFArray((AUDSPGraph *)((char *)this + 720));
  CACFArray::~CACFArray((AUDSPGraph *)((char *)this + 704));
  CACFDictionary::~CACFDictionary((AUDSPGraph *)((char *)this + 688));
  v24 = (const void *)*((_QWORD *)this + 85);
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)this + 84);
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 83);
  if (v26)
    CFRelease(v26);
  if (*((_BYTE *)this + 656) && *((char *)this + 655) < 0)
    operator delete(*v2);
  if (*((_BYTE *)this + 624) && *((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  if (*((_BYTE *)this + 592) && *((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  v27 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUDSPGraph::Initialize(AUDSPGraph *this)
{
  unint64_t v1;
  uint64_t v2;
  std::string::size_type *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  uint64_t v7;
  AUDSPGraph *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Element;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  float *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  unint64_t v27;
  void *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  float *v34;
  __int128 *v35;
  uint8x8_t v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  std::string *v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  unsigned __int8 **v56;
  unsigned __int8 *i;
  unint64_t v58;
  char *v59;
  char *v60;
  std::string *v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  _QWORD *v67;
  unint64_t v68;
  std::string::size_type v69;
  NSObject *v70;
  const char *v71;
  uint32_t v72;
  const __CFDictionary *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  std::string::size_type *v86;
  const char *v87;
  NSObject *v88;
  uint32_t v89;
  char **v90;
  uint64_t v91;
  std::string::size_type *v92;
  char *v93;
  const char *v94;
  NSObject *v95;
  uint32_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  std::string::size_type *v101;
  const char *v102;
  NSObject *v103;
  uint32_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  size_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char **v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char **v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  std::string::size_type *v134;
  uint64_t v135;
  NSObject *v136;
  const char *v137;
  uint32_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t **j;
  const __CFDictionary *v145;
  uint64_t v146;
  std::string::size_type *v147;
  const char *v148;
  NSObject *v149;
  uint32_t v150;
  uint64_t v151;
  std::string::size_type *v152;
  const char *v153;
  NSObject *v154;
  uint32_t v155;
  uint64_t v156;
  uint64_t v157;
  const __CFDictionary *v158;
  uint64_t v159;
  std::string::size_type *v160;
  const char *v161;
  NSObject *v162;
  uint32_t v163;
  uint64_t v164;
  AUDSPGraph *v165;
  uint64_t v166;
  uint64_t k;
  int v168;
  void *v169;
  unint64_t v170;
  size_t v171;
  const void *v172;
  uint64_t v173;
  std::string::size_type *v174;
  const void *v175;
  NSObject *v176;
  const char *v177;
  uint32_t v178;
  _BYTE *v179;
  _BOOL4 v181;
  __n128 v182;
  __int128 v183;
  uint64_t v184;
  int v185;
  void *v186;
  unint64_t v187;
  size_t v188;
  const void *v189;
  uint64_t v190;
  const void *v191;
  _BYTE *v192;
  _BOOL4 v194;
  uint64_t v195;
  std::string::size_type *v196;
  const void *v197;
  NSObject *v198;
  const char *v199;
  uint32_t v200;
  uint64_t v201;
  const void *v202;
  int v203;
  int v204;
  uint64_t v205;
  std::string::size_type *v206;
  int v207;
  const char *v208;
  NSObject *v209;
  uint32_t v210;
  uint64_t v211;
  std::string::size_type *v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  std::string::size_type *v219;
  const char *v220;
  NSObject *v221;
  uint32_t v222;
  uint64_t v223;
  __n128 v224;
  AUDSPGraph *v225;
  const __CFArray *v226;
  CFIndex Count;
  CFIndex v228;
  const __CFArray *v229;
  CFIndex v230;
  unint64_t v231;
  int v232;
  uint64_t v233;
  std::string::size_type *v234;
  NSObject *v235;
  const char *v236;
  uint32_t v237;
  uint64_t v238;
  int v239;
  const void *v240;
  const __CFArray *v241;
  CFIndex v242;
  CFIndex v243;
  const __CFArray *v244;
  CFIndex v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  const char *v250;
  size_t v251;
  uint64_t v252;
  _BYTE *v253;
  uint64_t v254;
  std::string::size_type *v255;
  _BYTE *v256;
  NSObject *v257;
  const char *v258;
  uint32_t v259;
  uint64_t v260;
  _BYTE *v261;
  int v262;
  uint64_t v263;
  std::string::size_type *v264;
  _BYTE *v265;
  NSObject *v266;
  const char *v267;
  uint32_t v268;
  uint64_t v269;
  _BYTE *v270;
  const void *v271;
  const __CFArray *v272;
  CFIndex v273;
  CFIndex v274;
  const __CFArray *v275;
  CFIndex v276;
  unint64_t v277;
  const void *v278;
  int *v279;
  int *v280;
  int v281;
  uint64_t *v282;
  uint64_t *v283;
  char *v284;
  uint64_t v285;
  std::string::size_type *v286;
  _BYTE *v287;
  const char *v288;
  NSObject *v289;
  uint32_t v290;
  unsigned __int8 v291;
  uint64_t v292;
  std::string::size_type *v293;
  const char *v294;
  NSObject *v295;
  uint32_t v296;
  const void *v297;
  const void *v298;
  uint64_t v299;
  size_t v300;
  void **v301;
  std::string::size_type *v302;
  void **v303;
  std::string::size_type v304;
  size_t v305;
  std::string *v306;
  _BYTE *v307;
  std::string *v308;
  __int128 v309;
  std::string *v310;
  __int128 v311;
  std::string *v312;
  __int128 v313;
  std::string *v314;
  __int128 v315;
  std::string::size_type v316;
  const __CFDictionary *v317;
  uint64_t v318;
  uint64_t v319;
  std::string::size_type *v320;
  const char *v321;
  NSObject *v322;
  uint32_t v323;
  uint64_t v324;
  _QWORD *n;
  _QWORD *v326;
  size_t v327;
  std::string *v328;
  char *v329;
  uint64_t v330;
  char *v331;
  CFTypeRef *v332;
  std::string::size_type v333;
  std::string *v334;
  __int128 v335;
  std::string *v336;
  __int128 v337;
  std::string *v338;
  std::string::size_type size;
  std::string *v340;
  __int128 v341;
  std::string *v342;
  __int128 v343;
  std::string *v344;
  uint64_t v345;
  std::string::size_type *v346;
  const char *v347;
  NSObject *v348;
  uint32_t v349;
  uint64_t v350;
  _DWORD *v351;
  _DWORD *v352;
  _DWORD *v353;
  _DWORD *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  char *v359;
  char *v360;
  _DWORD *v361;
  int v362;
  _DWORD *v363;
  _DWORD *v364;
  _DWORD *v365;
  _DWORD *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  char *v372;
  int v373;
  unsigned int *v374;
  unsigned int v375;
  float *m;
  float v377;
  ausdk::AUElement *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v382;
  int v383;
  int v384;
  const char *v385;
  NSObject *v386;
  uint32_t v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  __int128 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  __int128 v398;
  uint64_t v399;
  std::string::size_type *v400;
  NSObject *v401;
  const char *v402;
  uint32_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int16x8_t v407;
  uint8_t *v408;
  NSObject *v409;
  const char *v410;
  uint32_t v411;
  uint64_t v412;
  int16x8_t v413;
  uint8_t *v414;
  uint64_t v415;
  uint64_t v416;
  int16x8_t v417;
  uint8_t *v418;
  NSObject *v419;
  const char *v420;
  uint32_t v421;
  uint64_t v422;
  int16x8_t v423;
  uint8_t *v424;
  uint64_t v425;
  uint64_t v426;
  std::string::size_type *v427;
  NSObject *v428;
  const char *v429;
  uint32_t v430;
  uint64_t v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  __int128 v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  std::string::size_type *v443;
  NSObject *v444;
  const char *v445;
  uint32_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int16x8_t v450;
  uint8_t *v451;
  NSObject *v452;
  const char *v453;
  uint32_t v454;
  uint64_t v455;
  int16x8_t v456;
  uint8_t *v457;
  uint64_t v458;
  uint64_t v459;
  int16x8_t v460;
  uint8_t *v461;
  NSObject *v462;
  const char *v463;
  uint32_t v464;
  uint64_t v465;
  int16x8_t v466;
  uint8_t *v467;
  uint64_t v468;
  uint64_t v469;
  std::string::size_type *v470;
  NSObject *v471;
  const char *v472;
  uint32_t v473;
  uint64_t v474;
  AUDSPGraph *v475;
  const std::string::value_type *v476;
  uint64_t v477;
  void *v478;
  _QWORD *v479;
  void *v480;
  unsigned __int8 v481;
  uint64_t v482;
  std::string::size_type *v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  const char *v487;
  NSObject *v488;
  uint32_t v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  std::string::size_type *v493;
  char *v494;
  _QWORD *v495;
  uint64_t v496;
  NSObject *v497;
  const char *v498;
  uint32_t v499;
  uint64_t v500;
  char *v501;
  _QWORD *v502;
  uint64_t v503;
  uint64_t v504;
  std::string::size_type *v505;
  uint64_t v506;
  std::string::size_type *v507;
  uint64_t v508;
  const char *v509;
  NSObject *v510;
  uint32_t v511;
  uint64_t v512;
  const char *v513;
  NSObject *v514;
  uint32_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  int v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  _BYTE *v523;
  std::logic_error *exception;
  const char *v525;
  _QWORD *v526;
  const char *v527;
  _QWORD *v528;
  std::runtime_error *v529;
  std::runtime_error *v530;
  std::runtime_error *v531;
  std::runtime_error *v532;
  std::runtime_error *v533;
  std::runtime_error *v534;
  uint64_t v535;
  char v536;
  int __val;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  ausdk::AUScope *v542;
  std::string::size_type *v543;
  _QWORD *v544;
  _QWORD v546[3];
  void *v547[3];
  void *__p[2];
  __int128 v549;
  int v550;
  void *v551;
  void *v552;
  __int128 v553;
  __int128 v554;
  float v555;
  __int128 v556;
  __int128 v557;
  float v558;
  std::string v559;
  CFTypeRef cf[2];
  unsigned __int8 v561;
  std::string v562;
  std::string v563;
  std::string v564;
  _QWORD *v565;
  _BYTE __sz[48];
  _BYTE v567[40];
  void *v568;
  void *v569;
  uint8_t v570[16];
  __int128 v571;
  int v572;
  uint8_t buf[48];
  __int128 v574;
  __int128 v575;
  _OWORD v576[2];
  std::string v577;
  uint64_t v578;

  v578 = *MEMORY[0x1E0C80C00];
  v543 = (std::string::size_type *)((char *)this + 632);
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v2 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    v3 = v543;
    if (*((char *)this + 655) < 0)
      v3 = (std::string::size_type *)*v543;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = this;
    v4 = "[%s|%p] will initialize";
    v5 = v2;
    v6 = 22;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v7 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    v4 = "[%p] will initialize";
    v5 = v7;
    v6 = 12;
  }
  _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, v4, buf, v6);
LABEL_13:
  v8 = this;
  v9 = *((_QWORD *)this + 15);
  if (v9)
  {
    LODWORD(v538) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v8 = this;
  }
  else
  {
    v538 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  }
  v10 = *((_QWORD *)v8 + 21);
  if (v10)
  {
    LODWORD(v541) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v8 = this;
  }
  else
  {
    v541 = (*((_QWORD *)v8 + 19) - *((_QWORD *)v8 + 18)) >> 3;
  }
  v542 = (AUDSPGraph *)((char *)v8 + 80);
  Element = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)v8 + 80), 0);
  if ((_DWORD)v541)
  {
    v12 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), 0);
    v13 = *(_BYTE *)(v12 + 80);
    v576[0] = *(_OWORD *)(v12 + 81);
    *(_OWORD *)((char *)v576 + 11) = *(_OWORD *)(v12 + 92);
    v536 = v13;
    __val = *(_DWORD *)(v12 + 108);
    v535 = *(_QWORD *)(v12 + 112);
  }
  else
  {
    v536 = 0;
  }
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)buf);
  *(_OWORD *)v570 = 0u;
  v571 = 0u;
  v572 = 1065353216;
  v556 = 0u;
  v557 = 0u;
  v558 = 1.0;
  v553 = 0u;
  v554 = 0u;
  v555 = 1.0;
  v539 = Element + 80;
  std::to_string((std::string *)v567, (int)*(double *)(Element + 80));
  std::string::basic_string[abi:ne180100]<0>(__p, "sampleRate");
  *(_QWORD *)__sz = __p;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v556, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__sz);
  v15 = v14 + 40;
  if ((char)v14[63] < 0)
    operator delete(*(void **)v15);
  *(_OWORD *)v15 = *(_OWORD *)v567;
  *((_QWORD *)v15 + 2) = *(_QWORD *)&v567[16];
  v567[23] = 0;
  v567[0] = 0;
  if (SBYTE7(v549) < 0)
  {
    operator delete(__p[0]);
    if ((v567[23] & 0x80000000) != 0)
      operator delete(*(void **)v567);
  }
  std::to_string((std::string *)v567, *(_DWORD *)(Element + 108));
  std::string::basic_string[abi:ne180100]<0>(__p, "numIns");
  *(_QWORD *)__sz = __p;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v556, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__sz);
  v17 = v16 + 40;
  if ((char)v16[63] < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = *(_OWORD *)v567;
  *((_QWORD *)v17 + 2) = *(_QWORD *)&v567[16];
  v567[23] = 0;
  v567[0] = 0;
  if (SBYTE7(v549) < 0)
  {
    operator delete(__p[0]);
    if ((v567[23] & 0x80000000) != 0)
      operator delete(*(void **)v567);
  }
  if ((_DWORD)v541)
  {
    std::to_string((std::string *)v567, __val);
    std::string::basic_string[abi:ne180100]<0>(__p, "numOuts");
    *(_QWORD *)__sz = __p;
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v556, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__sz);
    v19 = v18 + 40;
    if ((char)v18[63] < 0)
      operator delete(*(void **)v19);
    *(_OWORD *)v19 = *(_OWORD *)v567;
    *((_QWORD *)v19 + 2) = *(_QWORD *)&v567[16];
    v567[23] = 0;
    v567[0] = 0;
    if (SBYTE7(v549) < 0)
    {
      operator delete(__p[0]);
      if ((v567[23] & 0x80000000) != 0)
        operator delete(*(void **)v567);
    }
  }
  if (*((_BYTE *)this + 376))
    v20 = *((_DWORD *)this + 84);
  else
    v20 = 1;
  std::to_string((std::string *)v567, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "blockSize");
  *(_QWORD *)__sz = __p;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v556, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__sz);
  v22 = v21 + 40;
  if ((char)v21[63] < 0)
    operator delete(*(void **)v22);
  v23 = &v555;
  *(_OWORD *)v22 = *(_OWORD *)v567;
  *((_QWORD *)v22 + 2) = *(_QWORD *)&v567[16];
  v567[23] = 0;
  v567[0] = 0;
  if (SBYTE7(v549) < 0)
  {
    operator delete(__p[0]);
    if ((v567[23] & 0x80000000) != 0)
      operator delete(*(void **)v567);
  }
  v24 = (unint64_t)this;
  applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator((uint64_t)v567, *((CFDictionaryRef *)this + 124));
  applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator((uint64_t)__p, *((CFDictionaryRef *)this + 124));
  __p[1] = (void *)((uint64_t)(*((_QWORD *)&v549 + 1) - v549) >> 3);
  v25 = &v557;
  v26 = &v554;
  while (1)
  {
    if (*(_QWORD *)v567
      && (v27 = *(_QWORD *)&v567[8], *(_QWORD *)&v567[8] != (uint64_t)(*(_QWORD *)&v567[24] - *(_QWORD *)&v567[16]) >> 3))
    {
      v28 = __p[0];
    }
    else
    {
      v28 = __p[0];
      if (!__p[0] || __p[1] == (void *)((uint64_t)(*((_QWORD *)&v549 + 1) - v549) >> 3))
        break;
      v27 = *(_QWORD *)&v567[8];
    }
    if (*(void **)v567 == v28 && (void *)v27 == __p[1])
      break;
    if ((v27 & 0x8000000000000000) != 0 || v27 >= (uint64_t)(*(_QWORD *)&v567[24] - *(_QWORD *)&v567[16]) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    }
    applesauce::CF::convert_to<std::string,0>(*(const __CFString **)(*(_QWORD *)&v567[16] + 8 * v27), (uint64_t)&v564);
    applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v568 + *(_QWORD *)&v567[8]), (uint64_t)&v577);
    *(std::string *)__sz = v564;
    *(std::string *)&__sz[24] = v577;
    v30 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v557 + 8, (uint64_t)__sz);
    v31 = v30;
    v32 = *((_QWORD *)&v556 + 1);
    if (!*((_QWORD *)&v556 + 1))
      goto LABEL_77;
    v33 = v26;
    v34 = v23;
    v35 = v25;
    v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v556 + 8));
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.u32[0];
    if (v36.u32[0] > 1uLL)
    {
      v1 = v30;
      if (v30 >= *((_QWORD *)&v556 + 1))
        v1 = v30 % *((_QWORD *)&v556 + 1);
    }
    else
    {
      v1 = (*((_QWORD *)&v556 + 1) - 1) & v30;
    }
    v38 = *(uint64_t ***)(v556 + 8 * v1);
    if (!v38 || (v39 = *v38) == 0)
    {
      v25 = v35;
      v23 = v34;
      v26 = v33;
LABEL_77:
      v42 = (char *)operator new(0x40uLL);
      v43 = v42;
      v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      v564.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
      v564.__r_.__value_.__s.__data_[16] = 0;
      *(_QWORD *)v42 = 0;
      *((_QWORD *)v42 + 1) = v31;
      if ((__sz[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v42 + 16), *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
      }
      else
      {
        *((_OWORD *)v42 + 1) = *(_OWORD *)__sz;
        *((_QWORD *)v42 + 4) = *(_QWORD *)&__sz[16];
      }
      v44 = (std::string *)(v43 + 40);
      if ((__sz[47] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)&__sz[24], *(std::string::size_type *)&__sz[32]);
      }
      else
      {
        *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz[24];
        *((_QWORD *)v43 + 7) = *(_QWORD *)&__sz[40];
      }
      v564.__r_.__value_.__s.__data_[16] = 1;
      v45 = (float)(unint64_t)(*((_QWORD *)&v557 + 1) + 1);
      if (!v32 || (float)(v558 * (float)v32) < v45)
      {
        v46 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3)
          v46 = 1;
        v47 = v46 | (2 * v32);
        v48 = vcvtps_u32_f32(v45 / v558);
        if (v47 <= v48)
          v49 = v48;
        else
          v49 = v47;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&v556, v49);
        v32 = *((_QWORD *)&v556 + 1);
        if ((*((_QWORD *)&v556 + 1) & (*((_QWORD *)&v556 + 1) - 1)) != 0)
        {
          if (v31 >= *((_QWORD *)&v556 + 1))
            v1 = v31 % *((_QWORD *)&v556 + 1);
          else
            v1 = v31;
        }
        else
        {
          v1 = (*((_QWORD *)&v556 + 1) - 1) & v31;
        }
      }
      v50 = *(_QWORD **)(v556 + 8 * v1);
      if (v50)
      {
        *(_QWORD *)v564.__r_.__value_.__l.__data_ = *v50;
        *v50 = v564.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_QWORD *)v564.__r_.__value_.__l.__data_ = v557;
        *(_QWORD *)&v557 = v564.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v556 + 8 * v1) = v25;
        if (*(_QWORD *)v564.__r_.__value_.__l.__data_)
        {
          v51 = *(_QWORD *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 8);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v51 >= v32)
              v51 %= v32;
          }
          else
          {
            v51 &= v32 - 1;
          }
          *(_QWORD *)(v556 + 8 * v51) = v564.__r_.__value_.__r.__words[0];
        }
      }
      v564.__r_.__value_.__r.__words[0] = 0;
      ++*((_QWORD *)&v557 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v564, 0);
      v52 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v554 + 8, (uint64_t)__sz);
      v53 = v52;
      v24 = *((_QWORD *)&v553 + 1);
      if (*((_QWORD *)&v553 + 1))
      {
        v54 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v553 + 8));
        v54.i16[0] = vaddlv_u8(v54);
        v55 = v54.u32[0];
        if (v54.u32[0] > 1uLL)
        {
          v1 = v52;
          if (v52 >= *((_QWORD *)&v553 + 1))
            v1 = v52 % *((_QWORD *)&v553 + 1);
        }
        else
        {
          v1 = (*((_QWORD *)&v553 + 1) - 1) & v52;
        }
        v56 = *(unsigned __int8 ***)(v553 + 8 * v1);
        if (v56)
        {
          for (i = *v56; i; i = *(unsigned __int8 **)i)
          {
            v58 = *((_QWORD *)i + 1);
            if (v58 == v53)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v23, i + 16, __sz) & 1) != 0)
                goto LABEL_146;
            }
            else
            {
              if (v55 > 1)
              {
                if (v58 >= v24)
                  v58 %= v24;
              }
              else
              {
                v58 &= v24 - 1;
              }
              if (v58 != v1)
                break;
            }
          }
        }
      }
      v59 = (char *)operator new(0x40uLL);
      v60 = v59;
      v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      v564.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
      v564.__r_.__value_.__s.__data_[16] = 0;
      *(_QWORD *)v59 = 0;
      *((_QWORD *)v59 + 1) = v53;
      if ((__sz[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v59 + 16), *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
      }
      else
      {
        *((_OWORD *)v59 + 1) = *(_OWORD *)__sz;
        *((_QWORD *)v59 + 4) = *(_QWORD *)&__sz[16];
      }
      v61 = (std::string *)(v60 + 40);
      if ((__sz[47] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)&__sz[24], *(std::string::size_type *)&__sz[32]);
      }
      else
      {
        *(_OWORD *)&v61->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz[24];
        *((_QWORD *)v60 + 7) = *(_QWORD *)&__sz[40];
      }
      v564.__r_.__value_.__s.__data_[16] = 1;
      v62 = (float)(unint64_t)(*((_QWORD *)&v554 + 1) + 1);
      if (!v24 || (float)(v555 * (float)v24) < v62)
      {
        v63 = (v24 & (v24 - 1)) != 0;
        if (v24 < 3)
          v63 = 1;
        v64 = v63 | (2 * v24);
        v65 = vcvtps_u32_f32(v62 / v555);
        if (v64 <= v65)
          v66 = v65;
        else
          v66 = v64;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&v553, v66);
        v24 = *((_QWORD *)&v553 + 1);
        if ((*((_QWORD *)&v553 + 1) & (*((_QWORD *)&v553 + 1) - 1)) != 0)
        {
          if (v53 >= *((_QWORD *)&v553 + 1))
            v1 = v53 % *((_QWORD *)&v553 + 1);
          else
            v1 = v53;
        }
        else
        {
          v1 = (*((_QWORD *)&v553 + 1) - 1) & v53;
        }
      }
      v67 = *(_QWORD **)(v553 + 8 * v1);
      if (v67)
      {
        *(_QWORD *)v564.__r_.__value_.__l.__data_ = *v67;
        *v67 = v564.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_QWORD *)v564.__r_.__value_.__l.__data_ = v554;
        *(_QWORD *)&v554 = v564.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v553 + 8 * v1) = v26;
        if (*(_QWORD *)v564.__r_.__value_.__l.__data_)
        {
          v68 = *(_QWORD *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 8);
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v68 >= v24)
              v68 %= v24;
          }
          else
          {
            v68 &= v24 - 1;
          }
          *(_QWORD *)(v553 + 8 * v68) = v564.__r_.__value_.__r.__words[0];
        }
      }
      v564.__r_.__value_.__r.__words[0] = 0;
      ++*((_QWORD *)&v554 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v564, 0);
      goto LABEL_146;
    }
    while (1)
    {
      v40 = v39[1];
      if (v40 == v31)
        break;
      if (v37 > 1)
      {
        if (v40 >= v32)
          v40 %= v32;
      }
      else
      {
        v40 &= v32 - 1;
      }
      if (v40 != v1)
      {
LABEL_75:
        v25 = v35;
        v23 = v34;
        v26 = v33;
        goto LABEL_77;
      }
LABEL_74:
      v39 = (uint64_t *)*v39;
      if (!v39)
        goto LABEL_75;
    }
    v41 = v39 + 2;
    if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v558, (unsigned __int8 *)v39 + 16, __sz) & 1) == 0)
      goto LABEL_74;
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v25 = v35;
      v24 = getAUDSPGraphLog(void)::gLog;
      v23 = v34;
      v26 = v33;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v69 = (std::string::size_type)v543;
        if (*((char *)this + 655) < 0)
          v69 = *v543;
        if (*((char *)v39 + 39) < 0)
          v41 = (_QWORD *)*v41;
        LODWORD(v564.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 4) = v69;
        WORD2(v564.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v564.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)this;
        HIWORD(v564.__r_.__value_.__r.__words[2]) = 2080;
        v565 = v41;
        v70 = v24;
        v71 = "[%s|%p] failed to insert %s, key already exists.";
        v72 = 32;
        goto LABEL_166;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v25 = v35;
      v24 = getAUDSPGraphLog(void)::gLog;
      v23 = v34;
      v26 = v33;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v39 + 39) < 0)
          v41 = (_QWORD *)*v41;
        LODWORD(v564.__r_.__value_.__l.__data_) = 134218242;
        *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
        WORD2(v564.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v564.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v41;
        v70 = v24;
        v71 = "[%p] failed to insert %s, key already exists.";
        v72 = 22;
LABEL_166:
        _os_log_error_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_ERROR, v71, (uint8_t *)&v564, v72);
      }
    }
LABEL_146:
    if ((__sz[47] & 0x80000000) != 0)
      operator delete(*(void **)&__sz[24]);
    if ((__sz[23] & 0x80000000) != 0)
      operator delete(*(void **)__sz);
    ++*(_QWORD *)&v567[8];
  }
  if (v551)
  {
    v552 = v551;
    operator delete(v551);
  }
  if ((_QWORD)v549)
  {
    *((_QWORD *)&v549 + 1) = v549;
    operator delete((void *)v549);
  }
  if (v568)
  {
    v569 = v568;
    operator delete(v568);
  }
  if (*(_QWORD *)&v567[16])
  {
    *(_QWORD *)&v567[24] = *(_QWORD *)&v567[16];
    operator delete(*(void **)&v567[16]);
  }
  memset(v547, 0, sizeof(v547));
  v544 = (_QWORD *)((char *)this + 736);
  if (*((_QWORD *)this + 92) && !*((_BYTE *)this + 898))
    goto LABEL_320;
  if (_os_feature_enabled_impl())
  {
    v73 = (const __CFDictionary *)*((_QWORD *)this + 124);
    if (v73)
    {
      if (CFDictionaryGetCount(v73))
      {
        std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((_QWORD *)this + 100, *((uint64_t **)this + 128), *((uint64_t **)this + 129), (uint64_t)(*((_QWORD *)this + 129) - *((_QWORD *)this + 128)) >> 3);
        v74 = (const void *)*((_QWORD *)this + 131);
        if (v74)
          CFRetain(*((CFTypeRef *)this + 131));
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v567, v74);
        v75 = (const void *)*((_QWORD *)this + 103);
        *((_QWORD *)this + 103) = *(_QWORD *)v567;
        *(_QWORD *)v567 = v75;
        if (v75)
          CFRelease(v75);
        v76 = (const void *)*((_QWORD *)this + 132);
        if (v76)
          CFRetain(*((CFTypeRef *)this + 132));
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v567, v76);
        v77 = (const void *)*((_QWORD *)this + 104);
        *((_QWORD *)this + 104) = *(_QWORD *)v567;
        *(_QWORD *)v567 = v77;
        if (v77)
          CFRelease(v77);
        v78 = (const void *)*((_QWORD *)this + 133);
        if (v78)
          CFRetain(*((CFTypeRef *)this + 133));
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v567, v78);
        v79 = (const void *)*((_QWORD *)this + 105);
        *((_QWORD *)this + 105) = *(_QWORD *)v567;
        *(_QWORD *)v567 = v79;
        if (v79)
          CFRelease(v79);
        v80 = (const void *)*((_QWORD *)this + 83);
        v81 = (const void *)*((_QWORD *)this + 134);
        *((_QWORD *)this + 83) = v81;
        if (v81)
          CFRetain(v81);
        if (v80)
          CFRelease(v80);
        v82 = (const void *)*((_QWORD *)this + 84);
        v83 = (const void *)*((_QWORD *)this + 135);
        *((_QWORD *)this + 84) = v83;
        if (v83)
          CFRetain(v83);
        if (v82)
          CFRelease(v82);
      }
    }
  }
  v84 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  if (!*((_BYTE *)this + 624))
  {
    if (*((_BYTE *)this + 592))
    {
      v90 = (char **)((char *)this + 568);
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v91 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
          goto LABEL_317;
        v92 = v543;
        if (*((char *)this + 655) < 0)
          v92 = (std::string::size_type *)*v543;
        v93 = (char *)this + 568;
        if (*((char *)this + 591) < 0)
          v93 = *v90;
        *(_DWORD *)v567 = 136315650;
        *(_QWORD *)&v567[4] = v92;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        *(_WORD *)&v567[22] = 2080;
        *(_QWORD *)&v567[24] = v93;
        v94 = "[%s|%p] compiling graph file: '%s'";
        v95 = v91;
        v96 = 32;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v141 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
          goto LABEL_317;
        v142 = (char *)this + 568;
        if (*((char *)this + 591) < 0)
          v142 = *v90;
        *(_DWORD *)v567 = 134218242;
        *(_QWORD *)&v567[4] = this;
        *(_WORD *)&v567[12] = 2080;
        *(_QWORD *)&v567[14] = v142;
        v94 = "[%p] compiling graph file: '%s'";
        v95 = v141;
        v96 = 22;
      }
      _os_log_impl(&dword_1B5ED0000, v95, OS_LOG_TYPE_DEFAULT, v94, v567, v96);
LABEL_317:
      DSPGraph::Interpreter::compileFile();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v544, (uint64_t *)v567);
      v143 = *(_QWORD *)v567;
      *(_QWORD *)v567 = 0;
      if (v143)
        (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
      goto LABEL_319;
    }
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v100 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v101 = v543;
        if (*((char *)this + 655) < 0)
          v101 = (std::string::size_type *)*v543;
        *(_DWORD *)v567 = 136315394;
        *(_QWORD *)&v567[4] = v101;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        v102 = "[%s|%p] patcher mode is enabled";
        v103 = v100;
        v104 = 22;
        goto LABEL_674;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v299 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v567 = 134217984;
        *(_QWORD *)&v567[4] = this;
        v102 = "[%p] patcher mode is enabled";
        v103 = v299;
        v104 = 12;
LABEL_674:
        _os_log_impl(&dword_1B5ED0000, v103, OS_LOG_TYPE_DEFAULT, v102, v567, v104);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v567, "graphName \"");
    if (*((_BYTE *)this + 656))
    {
      if (*((char *)this + 655) >= 0)
        v300 = *((unsigned __int8 *)this + 655);
      else
        v300 = *((_QWORD *)this + 80);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v300 + 2);
      if ((SBYTE7(v549) & 0x80u) == 0)
        v301 = __p;
      else
        v301 = (void **)__p[0];
      if (v300)
      {
        if (*((char *)this + 655) >= 0)
          v302 = v543;
        else
          v302 = (std::string::size_type *)*((_QWORD *)this + 79);
        memmove(v301, v302, v300);
      }
      strcpy((char *)v301 + v300, "\"\n");
      if ((SBYTE7(v549) & 0x80u) == 0)
        v303 = __p;
      else
        v303 = (void **)__p[0];
      if ((SBYTE7(v549) & 0x80u) == 0)
        v304 = BYTE7(v549);
      else
        v304 = (std::string::size_type)__p[1];
      std::string::append((std::string *)v567, (const std::string::value_type *)v303, v304);
      if (SBYTE7(v549) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::append((std::string *)v567, "Default Matrix Patcher (No graph specified)\"\n", 0x2DuLL);
    }
    if (v567[23] >= 0)
      v305 = v567[23];
    else
      v305 = *(_QWORD *)&v567[8];
    v24 = (unint64_t)&v563;
    std::string::basic_string[abi:ne180100]((uint64_t)&v563, v305 + 9);
    if ((v563.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v306 = &v563;
    else
      v306 = (std::string *)v563.__r_.__value_.__r.__words[0];
    if (v305)
    {
      if (v567[23] >= 0)
        v307 = v567;
      else
        v307 = *(_BYTE **)v567;
      memmove(v306, v307, v305);
    }
    strcpy((char *)v306 + v305, "in input\n");
    v308 = std::string::append(&v563, "out output\n", 0xBuLL);
    v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
    v577.__r_.__value_.__r.__words[2] = v308->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v309;
    v308->__r_.__value_.__l.__size_ = 0;
    v308->__r_.__value_.__r.__words[2] = 0;
    v308->__r_.__value_.__r.__words[0] = 0;
    v310 = std::string::append(&v577, "box MatrixPatcher (aufx pchr appl) 1 1\n", 0x27uLL);
    v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
    v564.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v311;
    v310->__r_.__value_.__l.__size_ = 0;
    v310->__r_.__value_.__r.__words[2] = 0;
    v310->__r_.__value_.__r.__words[0] = 0;
    v312 = std::string::append(&v564, "wire input MatrixPatcher ([sampleRate] [numIns])\n", 0x31uLL);
    v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
    *(_QWORD *)&__sz[16] = *((_QWORD *)&v312->__r_.__value_.__l + 2);
    *(_OWORD *)__sz = v313;
    v312->__r_.__value_.__l.__size_ = 0;
    v312->__r_.__value_.__r.__words[2] = 0;
    v312->__r_.__value_.__r.__words[0] = 0;
    v314 = std::string::append((std::string *)__sz, "wire MatrixPatcher output ([sampleRate] [numOuts])\n", 0x33uLL);
    v315 = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
    *(_QWORD *)&v549 = *((_QWORD *)&v314->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v315;
    v314->__r_.__value_.__l.__size_ = 0;
    v314->__r_.__value_.__r.__words[2] = 0;
    v314->__r_.__value_.__r.__words[0] = 0;
    if ((__sz[23] & 0x80000000) != 0)
      operator delete(*(void **)__sz);
    if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v564.__r_.__value_.__l.__data_);
    if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v577.__r_.__value_.__l.__data_);
    if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v563.__r_.__value_.__l.__data_);
    memset(__sz, 0, 24);
    DSPGraph::Interpreter::compileText();
    std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v544, (uint64_t *)&v577);
    v316 = v577.__r_.__value_.__r.__words[0];
    v577.__r_.__value_.__r.__words[0] = 0;
    if (v316)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v316 + 8))(v316);
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)__sz;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v564);
    *((_BYTE *)this + 898) = 1;
    v317 = (const __CFDictionary *)*((_QWORD *)this + 86);
    if (!v317 || !CFDictionaryGetCount(v317))
      goto LABEL_1108;
    std::string::basic_string[abi:ne180100]<0>(__sz, "MatrixPatcher");
    v318 = DSPGraph::Graph::box();
    if ((__sz[23] & 0x80000000) != 0)
      operator delete(*(void **)__sz);
    if (!v318)
      goto LABEL_1108;
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v319 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        goto LABEL_1107;
      v320 = v543;
      if (*((char *)this + 655) < 0)
        v320 = (std::string::size_type *)*v543;
      *(_DWORD *)__sz = 136315394;
      *(_QWORD *)&__sz[4] = v320;
      *(_WORD *)&__sz[12] = 2048;
      *(_QWORD *)&__sz[14] = this;
      v321 = "[%s|%p] setting I/O channel names on MatrixPatcher box";
      v322 = v319;
      v323 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v517 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        goto LABEL_1107;
      *(_DWORD *)__sz = 134217984;
      *(_QWORD *)&__sz[4] = this;
      v321 = "[%p] setting I/O channel names on MatrixPatcher box";
      v322 = v517;
      v323 = 12;
    }
    _os_log_debug_impl(&dword_1B5ED0000, v322, OS_LOG_TYPE_DEBUG, v321, __sz, v323);
LABEL_1107:
    *(_QWORD *)__sz = *((_QWORD *)this + 86);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v318 + 312))(v318, 1667788397, 0, 0, 8, __sz);
LABEL_1108:
    if (SBYTE7(v549) < 0)
      operator delete(__p[0]);
    if ((v567[23] & 0x80000000) != 0)
      operator delete(*(void **)v567);
    goto LABEL_320;
  }
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v85 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v86 = v543;
      if (*((char *)this + 655) < 0)
        v86 = (std::string::size_type *)*v543;
      *(_DWORD *)v567 = 136315394;
      *(_QWORD *)&v567[4] = v86;
      *(_WORD *)&v567[12] = 2048;
      *(_QWORD *)&v567[14] = this;
      v87 = "[%s|%p] compiling graph text";
      v88 = v85;
      v89 = 22;
LABEL_224:
      _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_DEFAULT, v87, v567, v89);
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v97 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v567 = 134217984;
      *(_QWORD *)&v567[4] = this;
      v87 = "[%p] compiling graph text";
      v88 = v97;
      v89 = 12;
      goto LABEL_224;
    }
  }
  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    goto LABEL_302;
  if (!*((_BYTE *)this + 624))
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*((char *)this + 623) < 0)
  {
    v99 = (char *)*((_QWORD *)this + 75);
    v98 = *((_QWORD *)this + 76);
  }
  else
  {
    v98 = *((unsigned __int8 *)this + 623);
    v99 = (char *)this + 600;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = &v99[v98];
  while (1)
  {
    v110 = (char *)(v98 - v108);
    if (v98 < v108)
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    v111 = &v99[v108];
    v112 = v98 - v108;
    if ((uint64_t)(v98 - v108) < 1)
      break;
    v113 = &v99[v108];
    while (1)
    {
      v114 = (char *)memchr(v113, 10, v112);
      if (!v114)
        goto LABEL_270;
      if (*v114 == 10)
        break;
      v113 = v114 + 1;
      v112 = v109 - v113;
      if (v109 - v113 < 1)
        goto LABEL_270;
    }
    if (v114 == v109)
      break;
    v115 = v114 - v99;
    if (v114 - v99 == -1)
      break;
    if ((unint64_t)v110 >= v115 - v108)
      v116 = (char *)(v115 - v108);
    else
      v116 = (char *)(v98 - v108);
    if ((unint64_t)v106 >= v105)
    {
      v118 = (v106 - v107) >> 4;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 60)
        goto LABEL_1148;
      if ((uint64_t)(v105 - (_QWORD)v107) >> 3 > v119)
        v119 = (uint64_t)(v105 - (_QWORD)v107) >> 3;
      if (v105 - (unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
        v120 = 0xFFFFFFFFFFFFFFFLL;
      else
        v120 = v119;
      if (v120)
        v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v120);
      else
        v121 = 0;
      v122 = (char **)(v120 + 16 * v118);
      *v122 = v111;
      v122[1] = v116;
      if (v106 == v107)
      {
        v107 = (char *)(v120 + 16 * v118);
      }
      else
      {
        v123 = (char *)(v120 + 16 * v118);
        do
        {
          *((_OWORD *)v123 - 1) = *((_OWORD *)v106 - 1);
          v123 -= 16;
          v106 -= 16;
        }
        while (v106 != v107);
        v106 = v107;
        v107 = v123;
      }
      v105 = v120 + 16 * v121;
      v117 = (char *)(v122 + 2);
      if (v106)
        operator delete(v106);
    }
    else
    {
      *(_QWORD *)v106 = v111;
      *((_QWORD *)v106 + 1) = v116;
      v117 = v106 + 16;
    }
    v108 = v115 + 1;
    v106 = v117;
  }
LABEL_270:
  if ((unint64_t)v106 < v105)
  {
    *(_QWORD *)v106 = v111;
    *((_QWORD *)v106 + 1) = v110;
    v124 = v106 + 16;
    goto LABEL_284;
  }
  v125 = (v106 - v107) >> 4;
  v126 = v125 + 1;
  if ((unint64_t)(v125 + 1) >> 60)
LABEL_1148:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((uint64_t)(v105 - (_QWORD)v107) >> 3 > v126)
    v126 = (uint64_t)(v105 - (_QWORD)v107) >> 3;
  if (v105 - (unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
    v127 = 0xFFFFFFFFFFFFFFFLL;
  else
    v127 = v126;
  if (v127)
    v127 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v127);
  v128 = (char **)(v127 + 16 * v125);
  *v128 = v111;
  v128[1] = v110;
  v124 = (char *)(v128 + 2);
  if (v106 == v107)
  {
    v107 = (char *)v128;
    if (v106)
      goto LABEL_283;
  }
  else
  {
    do
    {
      *((_OWORD *)v128 - 1) = *((_OWORD *)v106 - 1);
      v128 -= 2;
      v106 -= 16;
    }
    while (v106 != v107);
    v106 = v107;
    v107 = (char *)v128;
    if (v106)
LABEL_283:
      operator delete(v106);
  }
LABEL_284:
  if (v107 == v124)
    goto LABEL_301;
  v129 = 0;
  v130 = v107;
  while (2)
  {
    v132 = *(void **)v130;
    v131 = *((_QWORD *)v130 + 1);
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v133 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v134 = v543;
        if (*((char *)this + 655) < 0)
          v134 = (std::string::size_type *)*v543;
        v135 = v129 + 1;
        *(_DWORD *)v567 = 136316162;
        *(_QWORD *)&v567[4] = v134;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        *(_WORD *)&v567[22] = 2048;
        *(_QWORD *)&v567[24] = v129;
        *(_WORD *)&v567[32] = 1040;
        *(_DWORD *)&v567[34] = v131;
        *(_WORD *)&v567[38] = 2080;
        v568 = v132;
        v136 = v133;
        v137 = "[%s|%p] [%2lu]: %.*s";
        v138 = 48;
LABEL_299:
        _os_log_debug_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEBUG, v137, v567, v138);
        v129 = v135;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v139 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v135 = v129 + 1;
        *(_DWORD *)v567 = 134218754;
        *(_QWORD *)&v567[4] = this;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = v129;
        *(_WORD *)&v567[22] = 1040;
        *(_DWORD *)&v567[24] = v131;
        *(_WORD *)&v567[28] = 2080;
        *(_QWORD *)&v567[30] = v132;
        v136 = v139;
        v137 = "[%p] [%2lu]: %.*s";
        v138 = 38;
        goto LABEL_299;
      }
    }
    v130 += 16;
    if (v130 != v124)
      continue;
    break;
  }
  if (v107)
LABEL_301:
    operator delete(v107);
LABEL_302:
  v24 = *((_QWORD *)&v554 + 1);
  if (*((_QWORD *)&v554 + 1))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v549 = 0;
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v549 = 0u;
    v550 = 1065353216;
    memset(v546, 0, sizeof(v546));
  }
  DSPGraph::Interpreter::compileText();
  std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v544, (uint64_t *)__sz);
  v140 = *(_QWORD *)__sz;
  *(_QWORD *)__sz = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  if (v24)
  {
    *(_QWORD *)v567 = __p;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v567);
  }
  else
  {
    *(_QWORD *)v567 = v546;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v567);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  }
LABEL_319:
  *((_BYTE *)this + 898) = 0;
LABEL_320:
  if (!*v544)
  {
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v151 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_854;
      v152 = v543;
      if (*((char *)this + 655) < 0)
        v152 = (std::string::size_type *)*v543;
      *(_DWORD *)v567 = 136315394;
      *(_QWORD *)&v567[4] = v152;
      *(_WORD *)&v567[12] = 2048;
      *(_QWORD *)&v567[14] = this;
      v153 = "[%s|%p] failed to create DSPGraph instance";
      v154 = v151;
      v155 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v156 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_854;
      *(_DWORD *)v567 = 134217984;
      *(_QWORD *)&v567[4] = this;
      v153 = "[%p] failed to create DSPGraph instance";
      v154 = v156;
      v155 = 12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v154, OS_LOG_TYPE_ERROR, v153, v567, v155);
LABEL_854:
    v262 = 1;
    goto LABEL_855;
  }
  if (*((_QWORD *)this + 127))
  {
    for (j = *(uint64_t ***)(*v544 + 24); j; j = (uint64_t **)*j)
    {
      (*(void (**)(_BYTE *__return_ptr))(*j[2] + 208))(v567);
      if (*(_DWORD *)&v567[4] == 1685287015)
      {
        applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)v567, (const UInt8 **)this + 125);
        *(_QWORD *)__sz = *(_QWORD *)v567;
        (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *))(*j[2] + 312))(j[2], 1886548853, 0, 0, 8, __sz);
        if (*(_QWORD *)v567)
          CFRelease(*(CFTypeRef *)v567);
      }
    }
  }
  v145 = (const __CFDictionary *)*((_QWORD *)this + 84);
  if (v145 && CFDictionaryGetCount(v145))
  {
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v146 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v147 = v543;
        if (*((char *)this + 655) < 0)
          v147 = (std::string::size_type *)*v543;
        *(_DWORD *)v567 = 136315394;
        *(_QWORD *)&v567[4] = v147;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        v148 = "[%s|%p] setting .propstrip on DSPGraph";
        v149 = v146;
        v150 = 22;
LABEL_352:
        _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_DEFAULT, v148, v567, v150);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v157 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v567 = 134217984;
        *(_QWORD *)&v567[4] = this;
        v148 = "[%p] setting .propstrip on DSPGraph";
        v149 = v157;
        v150 = 12;
        goto LABEL_352;
      }
    }
    DSPGraph::Graph::setPropertyStrip(*((DSPGraph::Graph **)this + 92), *((const __CFDictionary **)this + 84), *((const __CFString **)this + 85));
  }
  v158 = (const __CFDictionary *)*((_QWORD *)this + 83);
  if (v158 && CFDictionaryGetCount(v158))
  {
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v159 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v160 = v543;
        if (*((char *)this + 655) < 0)
          v160 = (std::string::size_type *)*v543;
        *(_DWORD *)v567 = 136315394;
        *(_QWORD *)&v567[4] = v160;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        v161 = "[%s|%p] setting .austrip on DSPGraph";
        v162 = v159;
        v163 = 22;
LABEL_367:
        _os_log_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_DEFAULT, v161, v567, v163);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v164 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v567 = 134217984;
        *(_QWORD *)&v567[4] = this;
        v161 = "[%p] setting .austrip on DSPGraph";
        v162 = v164;
        v163 = 12;
        goto LABEL_367;
      }
    }
    DSPGraph::Graph::setAUStrip(*((DSPGraph::Graph **)this + 92), *((const __CFDictionary **)this + 83));
  }
  v165 = this;
  if (!*((_BYTE *)this + 898))
  {
    DSPGraph::Graph::getFormatNames((DSPGraph::Graph *)*v544);
    v166 = *(_QWORD *)__sz;
    for (k = *(_QWORD *)&__sz[8]; v166 != k; v166 += 24)
    {
      v564.__r_.__value_.__r.__words[0] = 0;
      DSPGraph::Graph::getFormat();
      if (v564.__r_.__value_.__r.__words[0])
      {
        std::string::basic_string[abi:ne180100]<0>(v567, "input");
        v168 = v567[23];
        v169 = *(void **)v567;
        if (v567[23] >= 0)
          v170 = v567[23];
        else
          v170 = *(_QWORD *)&v567[8];
        if (*(char *)(v166 + 23) < 0)
        {
          if (v170 == -1)
LABEL_1135:
            std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__throw_out_of_range[abi:ne180100]();
          v172 = *(const void **)v166;
          if (*(_QWORD *)(v166 + 8) >= v170)
            v171 = v170;
          else
            v171 = *(_QWORD *)(v166 + 8);
        }
        else
        {
          if (v170 == -1)
            goto LABEL_1135;
          if (*(unsigned __int8 *)(v166 + 23) >= v170)
            v171 = v170;
          else
            v171 = *(unsigned __int8 *)(v166 + 23);
          v172 = (const void *)v166;
        }
        if (v567[23] >= 0)
          v179 = v567;
        else
          v179 = *(_BYTE **)v567;
        v181 = !memcmp(v172, v179, v171) && v171 == v170;
        if (v168 < 0)
        {
          operator delete(v169);
          if (v181)
          {
LABEL_405:
            v182 = *(__n128 *)v539;
            v183 = *(_OWORD *)(v539 + 16);
            *(_OWORD *)v567 = *(_OWORD *)v539;
            *(_OWORD *)&v567[16] = v183;
            v184 = *(_QWORD *)(v539 + 32);
LABEL_442:
            *(_QWORD *)&v567[32] = v184;
            AUDSPGraph::Initialize(void)::$_1::operator()((uint64_t *)v564.__r_.__value_.__l.__data_, (_QWORD *)v166, (uint64_t *)v567, v182);
            continue;
          }
        }
        else if (v181)
        {
          goto LABEL_405;
        }
        std::string::basic_string[abi:ne180100]<0>(v567, "output");
        v185 = v567[23];
        v186 = *(void **)v567;
        if (v567[23] >= 0)
          v187 = v567[23];
        else
          v187 = *(_QWORD *)&v567[8];
        if (*(char *)(v166 + 23) < 0)
        {
          if (v187 == -1)
LABEL_1143:
            std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__throw_out_of_range[abi:ne180100]();
          v189 = *(const void **)v166;
          if (*(_QWORD *)(v166 + 8) >= v187)
            v188 = v187;
          else
            v188 = *(_QWORD *)(v166 + 8);
        }
        else
        {
          if (v187 == -1)
            goto LABEL_1143;
          if (*(unsigned __int8 *)(v166 + 23) >= v187)
            v188 = v187;
          else
            v188 = *(unsigned __int8 *)(v166 + 23);
          v189 = (const void *)v166;
        }
        if (v567[23] >= 0)
          v192 = v567;
        else
          v192 = *(_BYTE **)v567;
        v194 = !memcmp(v189, v192, v188) && v188 == v187;
        if (v185 < 0)
        {
          operator delete(v186);
          if (!v194)
            continue;
        }
        else if (!v194)
        {
          continue;
        }
        if ((_DWORD)v541)
        {
          v567[0] = v536;
          *(_OWORD *)&v567[1] = v576[0];
          v182 = *(__n128 *)((char *)v576 + 11);
          *(_OWORD *)&v567[12] = *(_OWORD *)((char *)v576 + 11);
          *(_DWORD *)&v567[28] = __val;
          v184 = v535;
          goto LABEL_442;
        }
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v195 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            continue;
          v196 = v543;
          if (*((char *)this + 655) < 0)
            v196 = (std::string::size_type *)*v543;
          v197 = (const void *)v166;
          if (*(char *)(v166 + 23) < 0)
            v197 = *(const void **)v166;
          *(_DWORD *)v567 = 136315650;
          *(_QWORD *)&v567[4] = v196;
          *(_WORD *)&v567[12] = 2048;
          *(_QWORD *)&v567[14] = this;
          *(_WORD *)&v567[22] = 2080;
          *(_QWORD *)&v567[24] = v197;
          v198 = v195;
          v199 = "[%s|%p] failed to update output format \"%s\"";
          v200 = 32;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v201 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            continue;
          v202 = (const void *)v166;
          if (*(char *)(v166 + 23) < 0)
            v202 = *(const void **)v166;
          *(_DWORD *)v567 = 134218242;
          *(_QWORD *)&v567[4] = this;
          *(_WORD *)&v567[12] = 2080;
          *(_QWORD *)&v567[14] = v202;
          v198 = v201;
          v199 = "[%p] failed to update output format \"%s\"";
          v200 = 22;
        }
        _os_log_impl(&dword_1B5ED0000, v198, OS_LOG_TYPE_DEFAULT, v199, v567, v200);
      }
      else
      {
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v173 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            continue;
          v174 = v543;
          if (*((char *)this + 655) < 0)
            v174 = (std::string::size_type *)*v543;
          v175 = (const void *)v166;
          if (*(char *)(v166 + 23) < 0)
            v175 = *(const void **)v166;
          *(_DWORD *)v567 = 136315650;
          *(_QWORD *)&v567[4] = v174;
          *(_WORD *)&v567[12] = 2048;
          *(_QWORD *)&v567[14] = this;
          *(_WORD *)&v567[22] = 2080;
          *(_QWORD *)&v567[24] = v175;
          v176 = v173;
          v177 = "[%s|%p] Failed to get format and block size for named format '%s'";
          v178 = 32;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v190 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            continue;
          v191 = (const void *)v166;
          if (*(char *)(v166 + 23) < 0)
            v191 = *(const void **)v166;
          *(_DWORD *)v567 = 134218242;
          *(_QWORD *)&v567[4] = this;
          *(_WORD *)&v567[12] = 2080;
          *(_QWORD *)&v567[14] = v191;
          v176 = v190;
          v177 = "[%p] Failed to get format and block size for named format '%s'";
          v178 = 22;
        }
        _os_log_error_impl(&dword_1B5ED0000, v176, OS_LOG_TYPE_ERROR, v177, v567, v178);
      }
    }
    *(_QWORD *)v567 = __sz;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v567);
    v165 = this;
  }
  v203 = *((unsigned __int8 *)v165 + 376);
  v204 = *((unsigned __int8 *)v165 + 656);
  if (!v203)
  {
    if (v204)
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v211 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v24 = (unint64_t)this;
        v212 = v543;
        if (*((char *)this + 655) < 0)
          v212 = (std::string::size_type *)*v543;
        v213 = *((_DWORD *)this + 84);
        *(_DWORD *)v567 = 136315650;
        *(_QWORD *)&v567[4] = v212;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        *(_WORD *)&v567[22] = 1024;
        *(_DWORD *)&v567[24] = v213;
        v208 = "[%s|%p] setting variable slice duration with block size: %d";
        v209 = v211;
        v210 = 28;
        goto LABEL_481;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v216 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v24 = (unint64_t)this;
        v217 = *((_DWORD *)this + 84);
        *(_DWORD *)v567 = 134218240;
        *(_QWORD *)&v567[4] = this;
        *(_WORD *)&v567[12] = 1024;
        *(_DWORD *)&v567[14] = v217;
        v208 = "[%p] setting variable slice duration with block size: %d";
        v209 = v216;
        v210 = 18;
        goto LABEL_481;
      }
    }
    v24 = (unint64_t)this;
    goto LABEL_487;
  }
  if (!v204)
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v214 = getAUDSPGraphLog(void)::gLog;
    v24 = (unint64_t)this;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      goto LABEL_487;
    v215 = *((_DWORD *)this + 84);
    *(_DWORD *)v567 = 134218240;
    *(_QWORD *)&v567[4] = this;
    *(_WORD *)&v567[12] = 1024;
    *(_DWORD *)&v567[14] = v215;
    v208 = "[%p] setting fixed slice duration with block size: %d";
    v209 = v214;
    v210 = 18;
LABEL_481:
    _os_log_impl(&dword_1B5ED0000, v209, OS_LOG_TYPE_DEFAULT, v208, v567, v210);
    goto LABEL_487;
  }
  if (getAUDSPGraphLog(void)::onceToken != -1)
    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
  v205 = getAUDSPGraphLog(void)::gLog;
  v24 = (unint64_t)this;
  if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v206 = v543;
    if (*((char *)this + 655) < 0)
      v206 = (std::string::size_type *)*v543;
    v207 = *((_DWORD *)this + 84);
    *(_DWORD *)v567 = 136315650;
    *(_QWORD *)&v567[4] = v206;
    *(_WORD *)&v567[12] = 2048;
    *(_QWORD *)&v567[14] = this;
    *(_WORD *)&v567[22] = 1024;
    *(_DWORD *)&v567[24] = v207;
    v208 = "[%s|%p] setting fixed slice duration with block size: %d";
    v209 = v205;
    v210 = 28;
    goto LABEL_481;
  }
LABEL_487:
  DSPGraph::Graph::setSliceDuration();
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v218 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v219 = v543;
      if (*((char *)this + 655) < 0)
        v219 = (std::string::size_type *)*v543;
      *(_DWORD *)v567 = 136315394;
      *(_QWORD *)&v567[4] = v219;
      *(_WORD *)&v567[12] = 2048;
      *(_QWORD *)&v567[14] = this;
      v220 = "[%s|%p] configuring DSPGraph";
      v221 = v218;
      v222 = 22;
      goto LABEL_498;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v223 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v567 = 134217984;
      *(_QWORD *)&v567[4] = this;
      v220 = "[%p] configuring DSPGraph";
      v221 = v223;
      v222 = 12;
LABEL_498:
      _os_log_impl(&dword_1B5ED0000, v221, OS_LOG_TYPE_DEFAULT, v220, v567, v222);
    }
  }
  DSPGraph::Graph::configure((DSPGraph::Graph *)*v544);
  v225 = this;
  v226 = (const __CFArray *)*((_QWORD *)this + 103);
  if (v226)
  {
    Count = CFArrayGetCount(*((CFArrayRef *)this + 103));
    v228 = Count;
    v229 = (const __CFArray *)*((_QWORD *)this + 103);
    if (v229)
    {
      v230 = CFArrayGetCount(*((CFArrayRef *)this + 103));
      if (!v228)
      {
LABEL_525:
        v225 = this;
        v240 = (const void *)*((_QWORD *)this + 103);
        *((_QWORD *)this + 103) = 0;
        if (v240)
          CFRelease(v240);
        goto LABEL_527;
      }
    }
    else
    {
      v230 = 0;
      if (!Count)
        goto LABEL_525;
    }
    v231 = 0;
    v224.n128_u32[1] = 0;
    v24 = 1024;
    while (1)
    {
      if (v226 == v229 && v230 == v231)
        goto LABEL_525;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v226, v231, (applesauce::CF::DictionaryRef *)__sz);
      if (!*(_QWORD *)__sz)
      {
        v529 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v529, "Could not construct");
      }
      v232 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*(const __CFDictionary **)__sz);
      v564.__r_.__value_.__r.__words[0] = *(_QWORD *)__sz;
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v233 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v234 = v543;
          if (*((char *)this + 655) < 0)
            v234 = (std::string::size_type *)*v543;
          *(_DWORD *)v567 = 136315650;
          *(_QWORD *)&v567[4] = v234;
          *(_WORD *)&v567[12] = 2048;
          *(_QWORD *)&v567[14] = this;
          *(_WORD *)&v567[22] = 1024;
          *(_DWORD *)&v567[24] = v232;
          v235 = v233;
          v236 = "[%s|%p] setting graph property %d";
          v237 = 28;
          goto LABEL_520;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v238 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v567 = 134218240;
          *(_QWORD *)&v567[4] = this;
          *(_WORD *)&v567[12] = 1024;
          *(_DWORD *)&v567[14] = v232;
          v235 = v238;
          v236 = "[%p] setting graph property %d";
          v237 = 18;
LABEL_520:
          _os_log_impl(&dword_1B5ED0000, v235, OS_LOG_TYPE_DEFAULT, v236, v567, v237);
        }
      }
      v239 = (*(uint64_t (**)(AUDSPGraph *, uint64_t, _QWORD, _QWORD, std::string *, uint64_t))(*(_QWORD *)this + 96))(this, 1735553138, 0, 0, &v564, 8);
      if (v239)
      {
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v292 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v293 = v543;
            if (*((char *)this + 655) < 0)
              v293 = (std::string::size_type *)*v543;
            *(_DWORD *)v567 = 136315906;
            *(_QWORD *)&v567[4] = v293;
            *(_WORD *)&v567[12] = 2048;
            *(_QWORD *)&v567[14] = this;
            *(_WORD *)&v567[22] = 1024;
            *(_DWORD *)&v567[24] = v232;
            *(_WORD *)&v567[28] = 1024;
            *(_DWORD *)&v567[30] = v239;
            v294 = "[%s|%p] failed to set graph property %d. Error code: %d";
            v295 = v292;
            v296 = 34;
LABEL_1124:
            _os_log_error_impl(&dword_1B5ED0000, v295, OS_LOG_TYPE_ERROR, v294, v567, v296);
          }
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v379 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v567 = 134218496;
            *(_QWORD *)&v567[4] = this;
            *(_WORD *)&v567[12] = 1024;
            *(_DWORD *)&v567[14] = v232;
            *(_WORD *)&v567[18] = 1024;
            *(_DWORD *)&v567[20] = v239;
            v294 = "[%p] failed to set graph property %d. Error code: %d";
            v295 = v379;
            v296 = 24;
            goto LABEL_1124;
          }
        }
        v298 = *(const void **)__sz;
        if (*(_QWORD *)__sz)
LABEL_853:
          CFRelease(v298);
        goto LABEL_854;
      }
      if (*(_QWORD *)__sz)
        CFRelease(*(CFTypeRef *)__sz);
      if (v228 == ++v231)
        goto LABEL_525;
    }
  }
  *((_QWORD *)this + 103) = 0;
LABEL_527:
  v241 = (const __CFArray *)*((_QWORD *)v225 + 104);
  if (!v241)
  {
    *((_QWORD *)v225 + 104) = 0;
    goto LABEL_611;
  }
  v242 = CFArrayGetCount(*((CFArrayRef *)v225 + 104));
  v243 = v242;
  v244 = (const __CFArray *)*((_QWORD *)this + 104);
  if (v244)
  {
    v245 = CFArrayGetCount(*((CFArrayRef *)this + 104));
    if (!v243)
    {
LABEL_609:
      v225 = this;
      v271 = (const void *)*((_QWORD *)this + 104);
      *((_QWORD *)this + 104) = 0;
      if (v271)
        CFRelease(v271);
LABEL_611:
      v272 = (const __CFArray *)*((_QWORD *)v225 + 105);
      if (!v272)
      {
        *((_QWORD *)v225 + 105) = 0;
        goto LABEL_626;
      }
      v273 = CFArrayGetCount(*((CFArrayRef *)v225 + 105));
      v274 = v273;
      v275 = (const __CFArray *)*((_QWORD *)this + 105);
      if (v275)
      {
        v276 = CFArrayGetCount(*((CFArrayRef *)this + 105));
        if (!v274)
        {
LABEL_624:
          v225 = this;
          v278 = (const void *)*((_QWORD *)this + 105);
          *((_QWORD *)this + 105) = 0;
          if (v278)
            CFRelease(v278);
LABEL_626:
          v279 = (int *)*((_QWORD *)v225 + 100);
          v280 = (int *)*((_QWORD *)v225 + 101);
          while (v279 != v280)
          {
            v224.n128_u32[0] = v279[1];
            AUDSPGraph::SetGraphParameter((uint64_t)this, *v279, v224);
            v279 += 2;
          }
          v281 = _os_feature_enabled_impl();
          v282 = (uint64_t *)*((_QWORD *)this + 100);
          if (v281)
          {
            v283 = (uint64_t *)*((_QWORD *)this + 101);
            if (v283 != v282)
            {
              std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((_QWORD *)this + 128, v282, v283, v283 - v282);
              v282 = (uint64_t *)*((_QWORD *)this + 100);
            }
          }
          *((_QWORD *)this + 101) = v282;
          if (*((_BYTE *)this + 528))
            goto LABEL_633;
          if (isInternalBuild())
          {
            v24 = (unint64_t)&xmmword_1EF135FF8 + 8;
            if ((v291 & 1) == 0)
              goto LABEL_1150;
            goto LABEL_655;
          }
LABEL_784:
          if (*((_BYTE *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v345 = getAUDSPGraphLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
              goto LABEL_796;
            v346 = v543;
            if (*((char *)this + 655) < 0)
              v346 = (std::string::size_type *)*v543;
            *(_DWORD *)v567 = 136315394;
            *(_QWORD *)&v567[4] = v346;
            *(_WORD *)&v567[12] = 2048;
            *(_QWORD *)&v567[14] = this;
            v347 = "[%s|%p] initializing DSPGraph";
            v348 = v345;
            v349 = 22;
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v350 = getAUDSPGraphLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
              goto LABEL_796;
            *(_DWORD *)v567 = 134217984;
            *(_QWORD *)&v567[4] = this;
            v347 = "[%p] initializing DSPGraph";
            v348 = v350;
            v349 = 12;
          }
          _os_log_impl(&dword_1B5ED0000, v348, OS_LOG_TYPE_DEFAULT, v347, v567, v349);
LABEL_796:
          DSPGraph::Graph::initialize((DSPGraph::Graph *)*v544);
          DSPGraph::Graph::getParameterList((DSPGraph::Graph *)*v544);
          memset(v567, 0, 24);
          v351 = (_DWORD *)*((_QWORD *)this + 113);
          v352 = (_DWORD *)*((_QWORD *)this + 114);
          if (v351 != v352)
          {
            v353 = 0;
            do
            {
              if ((unint64_t)v353 >= *(_QWORD *)&v567[16])
              {
                v354 = *(_DWORD **)v567;
                v355 = ((uint64_t)v353 - *(_QWORD *)v567) >> 2;
                v356 = v355 + 1;
                if ((unint64_t)(v355 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v357 = *(_QWORD *)&v567[16] - *(_QWORD *)v567;
                if ((uint64_t)(*(_QWORD *)&v567[16] - *(_QWORD *)v567) >> 1 > v356)
                  v356 = v357 >> 1;
                if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFFCLL)
                  v358 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v358 = v356;
                if (v358)
                {
                  v359 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v567[16], v358);
                  v353 = *(_DWORD **)&v567[8];
                  v354 = *(_DWORD **)v567;
                }
                else
                {
                  v359 = 0;
                }
                v360 = &v359[4 * v355];
                *(_DWORD *)v360 = *v351;
                v361 = v360 + 4;
                while (v353 != v354)
                {
                  v362 = *--v353;
                  *((_DWORD *)v360 - 1) = v362;
                  v360 -= 4;
                }
                *(_QWORD *)v567 = v360;
                *(_QWORD *)&v567[8] = v361;
                *(_QWORD *)&v567[16] = &v359[4 * v358];
                if (v354)
                  operator delete(v354);
                v353 = v361;
              }
              else
              {
                *v353++ = *v351;
              }
              *(_QWORD *)&v567[8] = v353;
              v351 += 12;
            }
            while (v351 != v352);
            v363 = *(_DWORD **)v567;
            if (*(_DWORD **)v567 == v353)
              goto LABEL_836;
            v364 = *(_DWORD **)&__sz[8];
            do
            {
              if ((unint64_t)v364 >= *(_QWORD *)&__sz[16])
              {
                v366 = *(_DWORD **)__sz;
                v367 = ((uint64_t)v364 - *(_QWORD *)__sz) >> 2;
                v368 = v367 + 1;
                if ((unint64_t)(v367 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v369 = *(_QWORD *)&__sz[16] - *(_QWORD *)__sz;
                if ((uint64_t)(*(_QWORD *)&__sz[16] - *(_QWORD *)__sz) >> 1 > v368)
                  v368 = v369 >> 1;
                if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFFCLL)
                  v370 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v370 = v368;
                if (v370)
                {
                  v371 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__sz[16], v370);
                  v364 = *(_DWORD **)&__sz[8];
                  v366 = *(_DWORD **)__sz;
                }
                else
                {
                  v371 = 0;
                }
                v372 = &v371[4 * v367];
                *(_DWORD *)v372 = *v363;
                v365 = v372 + 4;
                while (v364 != v366)
                {
                  v373 = *--v364;
                  *((_DWORD *)v372 - 1) = v373;
                  v372 -= 4;
                }
                *(_QWORD *)__sz = v372;
                *(_QWORD *)&__sz[8] = v365;
                *(_QWORD *)&__sz[16] = &v371[4 * v370];
                if (v366)
                  operator delete(v366);
              }
              else
              {
                *v364 = *v363;
                v365 = v364 + 1;
              }
              *(_QWORD *)&__sz[8] = v365;
              ++v363;
              v364 = v365;
            }
            while (v363 != v353);
            v353 = *(_DWORD **)v567;
            if (*(_QWORD *)v567)
            {
LABEL_836:
              *(_QWORD *)&v567[8] = v353;
              operator delete(v353);
            }
          }
          v374 = *(unsigned int **)__sz;
          v24 = *(_QWORD *)&__sz[8];
          if (*(_QWORD *)__sz != *(_QWORD *)&__sz[8])
          {
            do
            {
              v375 = *v374;
              for (m = (float *)*((_QWORD *)this + 113); ; m += 12)
              {
                if (m == *((float **)this + 114))
                {
                  v377 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*v544 + 48))(*v544, *v374);
                  goto LABEL_844;
                }
                if (*(_DWORD *)m == v375)
                  break;
              }
              v377 = m[1];
LABEL_844:
              v378 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(v378, v375, v377, 0);
              ++v374;
            }
            while (v374 != (unsigned int *)v24);
            v374 = *(unsigned int **)__sz;
          }
          if (v374)
          {
            *(_QWORD *)&__sz[8] = v374;
            operator delete(v374);
          }
          v262 = 0;
          goto LABEL_855;
        }
      }
      else
      {
        v276 = 0;
        if (!v273)
          goto LABEL_624;
      }
      v277 = 0;
      while (v272 != v275 || v276 != v277)
      {
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v272, v277, (applesauce::CF::DictionaryRef *)v567);
        if (AUDSPGraph::SetBoxPreset(this, *(CFTypeRef *)v567))
        {
          v297 = (const void *)*((_QWORD *)this + 105);
          *((_QWORD *)this + 105) = 0;
          if (v297)
            CFRelease(v297);
          v298 = *(const void **)v567;
          if (!*(_QWORD *)v567)
            goto LABEL_854;
          goto LABEL_853;
        }
        if (*(_QWORD *)v567)
          CFRelease(*(CFTypeRef *)v567);
        if (v274 == ++v277)
          goto LABEL_624;
      }
      goto LABEL_624;
    }
  }
  else
  {
    v245 = 0;
    if (!v242)
      goto LABEL_609;
  }
  v246 = 0;
  v224.n128_u32[1] = 0;
  while (2)
  {
    if (v241 == v244 && v246 == v245)
      goto LABEL_609;
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v241, v246, (applesauce::CF::DictionaryRef *)&v563);
    if (!v563.__r_.__value_.__r.__words[0])
    {
      v532 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v532, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>((applesauce::CF::StringRef *)&v562, (const __CFDictionary *)v563.__r_.__value_.__l.__data_);
    if (!v562.__r_.__value_.__r.__words[0])
    {
      v531 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v531, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)v562.__r_.__value_.__l.__data_, (uint64_t)__sz);
    if (!v563.__r_.__value_.__r.__words[0])
    {
      v530 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v530, "Could not construct");
    }
    v247 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>((const __CFDictionary *)v563.__r_.__value_.__l.__data_);
    if (!v563.__r_.__value_.__r.__words[0])
    {
      v534 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v534, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>((const __CFDictionary *)v563.__r_.__value_.__l.__data_, "data", (applesauce::CF::DataRef *)cf);
    if (!cf[0])
    {
      v533 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v533, "Could not construct");
    }
    applesauce::CF::convert_to<std::vector<unsigned char>,0>(cf[0], &v564);
    v24 = *(_QWORD *)(*v544 + 24);
    if (!v24)
      goto LABEL_577;
    v248 = 0;
    do
    {
      while ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 16) + 216))(*(_QWORD *)(v24 + 16)))
      {
        v249 = *(_QWORD *)(v24 + 16);
        v250 = (const char *)(v249 + 32);
        if (*(char *)(v249 + 55) < 0)
          v250 = *(const char **)v250;
        v251 = strlen(v250);
        v252 = __sz[23];
        if (__sz[23] < 0)
          v252 = *(_QWORD *)&__sz[8];
        if (v251 != v252)
          break;
        v253 = __sz[23] >= 0 ? __sz : *(_BYTE **)__sz;
        if (memcmp(v250, v253, v251))
          break;
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v254 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            goto LABEL_573;
          v255 = v543;
          if (*((char *)this + 655) < 0)
            v255 = (std::string::size_type *)*v543;
          if (__sz[23] >= 0)
            v256 = __sz;
          else
            v256 = *(_BYTE **)__sz;
          *(_DWORD *)v567 = 136315906;
          *(_QWORD *)&v567[4] = v255;
          *(_WORD *)&v567[12] = 2048;
          *(_QWORD *)&v567[14] = this;
          *(_WORD *)&v567[22] = 1024;
          *(_DWORD *)&v567[24] = v247;
          *(_WORD *)&v567[28] = 2080;
          *(_QWORD *)&v567[30] = v256;
          v257 = v254;
          v258 = "[%s|%p] setting box property %d on %s";
          v259 = 38;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v260 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            goto LABEL_573;
          if (__sz[23] >= 0)
            v261 = __sz;
          else
            v261 = *(_BYTE **)__sz;
          *(_DWORD *)v567 = 134218498;
          *(_QWORD *)&v567[4] = this;
          *(_WORD *)&v567[12] = 1024;
          *(_DWORD *)&v567[14] = v247;
          *(_WORD *)&v567[18] = 2080;
          *(_QWORD *)&v567[20] = v261;
          v257 = v260;
          v258 = "[%p] setting box property %d on %s";
          v259 = 28;
        }
        _os_log_impl(&dword_1B5ED0000, v257, OS_LOG_TYPE_DEFAULT, v258, v567, v259);
LABEL_573:
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v24 + 16) + 312))(*(_QWORD *)(v24 + 16), v247, 0, 0, (LODWORD(v564.__r_.__value_.__r.__words[1]) - LODWORD(v564.__r_.__value_.__l.__data_)));
        v262 = 0;
        v24 = *(_QWORD *)v24;
        v248 = 1;
        if (!v24)
          goto LABEL_591;
      }
      v24 = *(_QWORD *)v24;
    }
    while (v24);
    if ((v248 & 1) != 0)
    {
      v262 = 0;
      v248 = 1;
      goto LABEL_591;
    }
LABEL_577:
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v263 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v264 = v543;
        if (*((char *)this + 655) < 0)
          v264 = (std::string::size_type *)*v543;
        if (__sz[23] >= 0)
          v265 = __sz;
        else
          v265 = *(_BYTE **)__sz;
        *(_DWORD *)v567 = 136315650;
        *(_QWORD *)&v567[4] = v264;
        *(_WORD *)&v567[12] = 2048;
        *(_QWORD *)&v567[14] = this;
        *(_WORD *)&v567[22] = 2080;
        *(_QWORD *)&v567[24] = v265;
        v266 = v263;
        v267 = "[%s|%p] failed to find %s box inside DSPGraph";
        v268 = 32;
LABEL_608:
        _os_log_error_impl(&dword_1B5ED0000, v266, OS_LOG_TYPE_ERROR, v267, v567, v268);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v269 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (__sz[23] >= 0)
          v270 = __sz;
        else
          v270 = *(_BYTE **)__sz;
        *(_DWORD *)v567 = 134218242;
        *(_QWORD *)&v567[4] = this;
        *(_WORD *)&v567[12] = 2080;
        *(_QWORD *)&v567[14] = v270;
        v266 = v269;
        v267 = "[%p] failed to find %s box inside DSPGraph";
        v268 = 22;
        goto LABEL_608;
      }
    }
    v248 = 0;
    v262 = 1;
LABEL_591:
    if (v564.__r_.__value_.__r.__words[0])
    {
      v564.__r_.__value_.__l.__size_ = v564.__r_.__value_.__r.__words[0];
      operator delete(v564.__r_.__value_.__l.__data_);
    }
    if (cf[0])
      CFRelease(cf[0]);
    if ((__sz[23] & 0x80000000) != 0)
      operator delete(*(void **)__sz);
    if (v562.__r_.__value_.__r.__words[0])
      CFRelease(v562.__r_.__value_.__l.__data_);
    if (v563.__r_.__value_.__r.__words[0])
      CFRelease(v563.__r_.__value_.__l.__data_);
    if ((v248 & 1) != 0)
    {
      if (++v246 == v243)
        goto LABEL_609;
      continue;
    }
    break;
  }
LABEL_855:
  *(_QWORD *)v567 = v547;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v567);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v553);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v556);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v570);
  MEMORY[0x1BCC95158](buf);
  if (v262)
    return 4294956421;
  if (DSPGraph::Graph::numInputs((DSPGraph::Graph *)*v544) == (_DWORD)v538
    && DSPGraph::Graph::numOutputs((DSPGraph::Graph *)*v544) == (_DWORD)v541)
  {
    v540 = 1;
    goto LABEL_872;
  }
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v382 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v24 = (unint64_t)v543;
      if (*((char *)this + 655) < 0)
        v24 = *v543;
      v383 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 92));
      v384 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 92));
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v538;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v541;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v383;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v384;
      v385 = "[%s|%p] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match";
      v386 = v382;
      v387 = 46;
LABEL_1113:
      _os_log_error_impl(&dword_1B5ED0000, v386, OS_LOG_TYPE_ERROR, v385, buf, v387);
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v388 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v518 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 92));
      v519 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 92));
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v538;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v541;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v518;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&buf[32] = v519;
      v385 = "[%p] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match";
      v386 = v388;
      v387 = 36;
      goto LABEL_1113;
    }
  }
  v540 = 0;
LABEL_872:
  v389 = DSPGraph::Graph::numInputs((DSPGraph::Graph *)*v544);
  if (v538 >= v389)
    v390 = v389;
  else
    v390 = v538;
  if (v390)
  {
    v391 = 0;
    while (2)
    {
      v392 = ausdk::AUScope::SafeGetElement(v542, v391);
      v393 = *(_OWORD *)(v392 + 96);
      *(_OWORD *)v567 = *(_OWORD *)(v392 + 80);
      *(_OWORD *)&v567[16] = v393;
      *(_QWORD *)&v567[32] = *(_QWORD *)(v392 + 112);
      v394 = DSPGraph::Graph::in((DSPGraph::Graph *)*v544);
      v395 = *(_QWORD *)(v394 + 88);
      if (*(_QWORD *)(v394 + 96) == v395)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(__sz, "out");
        v526 = (_QWORD *)(v394 + 32);
        if (*(char *)(v394 + 55) < 0)
          v526 = (_QWORD *)*v526;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v525, v526, (uint64_t)(*(_QWORD *)(v394 + 96) - *(_QWORD *)(v394 + 88)) >> 5, 0);
        DSPGraph::ThrowException();
LABEL_1149:
        __break(1u);
LABEL_1150:
        {
          *(_BYTE *)(v24 + 2072) = CFPreferencesGetAppBooleanValue(CFSTR("enable_audspg_dsp_captures"), CFSTR("com.apple.coreaudio"), 0) != 0;
        }
LABEL_655:
        if (!*(_BYTE *)(v24 + 2072))
          goto LABEL_784;
LABEL_633:
        std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>((std::string *)v567, "/tmp/AudioCapture/AUDSPGraph");
        v284 = (char *)(*v544 + 408);
        if (*(char *)(*v544 + 431) < 0)
          v284 = *(char **)v284;
        std::string::basic_string[abi:ne180100]<0>(&v577, v284);
        v564 = v577;
        memset(&v577, 0, sizeof(v577));
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v564, (uint64_t)v567, (std::__fs::filesystem::path *)__sz);
        if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v564.__r_.__value_.__l.__data_);
        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v577.__r_.__value_.__l.__data_);
        if ((v567[23] & 0x80000000) != 0)
          operator delete(*(void **)v567);
        std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__sz, 0);
        if ((v567[0] == 255 || !v567[0])
          && std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__sz, 0))
        {
          if (*((_BYTE *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v285 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v286 = v543;
              if (*((char *)this + 655) < 0)
                v286 = (std::string::size_type *)*v543;
              v287 = __sz;
              if (__sz[23] < 0)
                v287 = *(_BYTE **)__sz;
              *(_DWORD *)v567 = 136315650;
              *(_QWORD *)&v567[4] = v286;
              *(_WORD *)&v567[12] = 2048;
              *(_QWORD *)&v567[14] = this;
              *(_WORD *)&v567[22] = 2080;
              *(_QWORD *)&v567[24] = v287;
              v288 = "[%s|%p] Captures folder created : %s";
              v289 = v285;
              v290 = 32;
              goto LABEL_1122;
            }
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v324 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v523 = __sz;
              if (__sz[23] < 0)
                v523 = *(_BYTE **)__sz;
              *(_DWORD *)v567 = 134218242;
              *(_QWORD *)&v567[4] = this;
              *(_WORD *)&v567[12] = 2080;
              *(_QWORD *)&v567[14] = v523;
              v288 = "[%p] Captures folder created : %s";
              v289 = v324;
              v290 = 22;
LABEL_1122:
              _os_log_debug_impl(&dword_1B5ED0000, v289, OS_LOG_TYPE_DEBUG, v288, v567, v290);
            }
          }
        }
        for (n = *(_QWORD **)(*v544 + 24); n; n = (_QWORD *)*n)
        {
          v326 = (_QWORD *)n[2];
          if (((v326[9] - v326[8]) & 0x1FFFFFFFE0) != 0 || ((v326[12] - v326[11]) & 0x1FFFFFFFE0) != 0)
          {
            if (*((char *)this + 559) >= 0)
              v327 = *((unsigned __int8 *)this + 559);
            else
              v327 = *((_QWORD *)this + 68);
            std::string::basic_string[abi:ne180100]((uint64_t)&v562, v327 + 1);
            if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v328 = &v562;
            else
              v328 = (std::string *)v562.__r_.__value_.__r.__words[0];
            if (v327)
            {
              if (*((char *)this + 559) >= 0)
                v329 = (char *)this + 536;
              else
                v329 = (char *)*((_QWORD *)this + 67);
              memmove(v328, v329, v327);
            }
            *(_WORD *)((char *)&v328->__r_.__value_.__l.__data_ + v327) = 95;
            v330 = n[2];
            v331 = (char *)(v330 + 32);
            if (*(char *)(v330 + 55) < 0)
              v331 = *(char **)v331;
            std::string::basic_string[abi:ne180100]<0>(cf, v331);
            if ((v561 & 0x80u) == 0)
              v332 = cf;
            else
              v332 = (CFTypeRef *)cf[0];
            if ((v561 & 0x80u) == 0)
              v333 = v561;
            else
              v333 = (std::string::size_type)cf[1];
            v334 = std::string::append(&v562, (const std::string::value_type *)v332, v333);
            v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
            v563.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v335;
            v334->__r_.__value_.__l.__size_ = 0;
            v334->__r_.__value_.__r.__words[2] = 0;
            v334->__r_.__value_.__r.__words[0] = 0;
            v336 = std::string::append(&v563, "_", 1uLL);
            v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
            v577.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v577.__r_.__value_.__l.__data_ = v337;
            v336->__r_.__value_.__l.__size_ = 0;
            v336->__r_.__value_.__r.__words[2] = 0;
            v336->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v559, *((_DWORD *)this + 133));
            if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v338 = &v559;
            else
              v338 = (std::string *)v559.__r_.__value_.__r.__words[0];
            if ((v559.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v559.__r_.__value_.__r.__words[2]);
            else
              size = v559.__r_.__value_.__l.__size_;
            v340 = std::string::append(&v577, (const std::string::value_type *)v338, size);
            v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
            v564.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v341;
            v340->__r_.__value_.__l.__size_ = 0;
            v340->__r_.__value_.__r.__words[2] = 0;
            v340->__r_.__value_.__r.__words[0] = 0;
            v342 = std::string::append(&v564, ".caf", 4uLL);
            v343 = *(_OWORD *)&v342->__r_.__value_.__l.__data_;
            *(_QWORD *)&v567[16] = *((_QWORD *)&v342->__r_.__value_.__l + 2);
            *(_OWORD *)v567 = v343;
            v342->__r_.__value_.__l.__size_ = 0;
            v342->__r_.__value_.__r.__words[2] = 0;
            v342->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v564.__r_.__value_.__l.__data_);
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v559.__r_.__value_.__l.__data_);
            if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v577.__r_.__value_.__l.__data_);
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v563.__r_.__value_.__l.__data_);
            if ((char)v561 < 0)
              operator delete((void *)cf[0]);
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v562.__r_.__value_.__l.__data_);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v577, v567);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v577, (uint64_t)__sz, (std::__fs::filesystem::path *)&v564);
            if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v577.__r_.__value_.__l.__data_);
            if ((v564.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v344 = &v564;
            else
              v344 = (std::string *)v564.__r_.__value_.__r.__words[0];
            (*(void (**)(_QWORD, std::string *, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)n[2] + 152))(n[2], v344, 0, 1, 0, 4096);
            if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v564.__r_.__value_.__l.__data_);
            if ((v567[23] & 0x80000000) != 0)
              operator delete(*(void **)v567);
          }
        }
        ++*((_DWORD *)this + 133);
        if ((__sz[23] & 0x80000000) != 0)
          operator delete(*(void **)__sz);
        goto LABEL_784;
      }
      v396 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v395 + 40))(v395) + 120);
      v397 = *(_QWORD *)(v396 + 32);
      v398 = *(_OWORD *)(v396 + 16);
      *(_OWORD *)__sz = *(_OWORD *)v396;
      *(_OWORD *)&__sz[16] = v398;
      *(_QWORD *)&__sz[32] = v397;
      if (*(double *)v567 == *(double *)__sz
        && *(_DWORD *)&v567[8] == *(_DWORD *)&__sz[8]
        && *(_QWORD *)&v567[16] == *(_QWORD *)&__sz[16]
        && *(_QWORD *)&v567[28] == *(_QWORD *)&__sz[28]
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v567, (const AudioStreamBasicDescription *)__sz, 0, 0))
      {
        goto LABEL_950;
      }
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v399 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v400 = v543;
          if (*((char *)this + 655) < 0)
            v400 = (std::string::size_type *)*v543;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v400;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = this;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v391;
          v401 = v399;
          v402 = "[%s|%p] [WARNING] AudioUnit and DSPGraph formats for input bus %d don't match";
          v403 = 28;
LABEL_894:
          _os_log_impl(&dword_1B5ED0000, v401, OS_LOG_TYPE_DEFAULT, v402, buf, v403);
          v405 = getAUDSPGraphLog(void)::onceToken;
LABEL_896:
          if (*((_BYTE *)this + 656))
          {
            if (v405 != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v406 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              v24 = (unint64_t)v543;
              if (*((char *)this + 655) < 0)
                v24 = *v543;
              CA::StreamDescription::AsString((CA::StreamDescription *)v567, (uint64_t)v570, v407);
              if ((SBYTE7(v571) & 0x80u) == 0)
                v408 = v570;
              else
                v408 = *(uint8_t **)v570;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v24;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v408;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = *(unsigned int *)&v567[12];
              v409 = v406;
              v410 = "[%s|%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              v411 = 42;
LABEL_913:
              _os_log_impl(&dword_1B5ED0000, v409, OS_LOG_TYPE_DEFAULT, v410, buf, v411);
              if (SBYTE7(v571) < 0)
                operator delete(*(void **)v570);
              v415 = getAUDSPGraphLog(void)::onceToken;
LABEL_917:
              if (*((_BYTE *)this + 656))
              {
                if (v415 != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v416 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  v24 = (unint64_t)v543;
                  if (*((char *)this + 655) < 0)
                    v24 = *v543;
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v570, v417);
                  if ((SBYTE7(v571) & 0x80u) == 0)
                    v418 = v570;
                  else
                    v418 = *(uint8_t **)v570;
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = v24;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = v418;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = *(unsigned int *)&__sz[12];
                  v419 = v416;
                  v420 = "[%s|%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  v421 = 42;
LABEL_934:
                  _os_log_impl(&dword_1B5ED0000, v419, OS_LOG_TYPE_DEFAULT, v420, buf, v421);
                  if (SBYTE7(v571) < 0)
                    operator delete(*(void **)v570);
                  v425 = getAUDSPGraphLog(void)::onceToken;
LABEL_938:
                  if (*((_BYTE *)this + 656))
                  {
                    if (v425 != -1)
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                    v426 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_950;
                    v427 = v543;
                    if (*((char *)this + 655) < 0)
                      v427 = (std::string::size_type *)*v543;
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = v427;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = this;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v391;
                    v428 = v426;
                    v429 = "[%s|%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
                    v430 = 28;
                  }
                  else
                  {
                    if (v425 != -1)
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                    v431 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_950;
                    *(_DWORD *)buf = 134218240;
                    *(_QWORD *)&buf[4] = this;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v391;
                    v428 = v431;
                    v429 = "[%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
                    v430 = 18;
                  }
                  _os_log_impl(&dword_1B5ED0000, v428, OS_LOG_TYPE_DEFAULT, v429, buf, v430);
LABEL_950:
                  if (v390 == ++v391)
                    goto LABEL_951;
                  continue;
                }
              }
              else
              {
                if (v415 != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v422 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v570, v423);
                  if ((SBYTE7(v571) & 0x80u) == 0)
                    v424 = v570;
                  else
                    v424 = *(uint8_t **)v570;
                  *(_DWORD *)buf = 134218498;
                  *(_QWORD *)&buf[4] = this;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v424;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = *(unsigned int *)&__sz[12];
                  v419 = v422;
                  v420 = "[%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  v421 = 32;
                  goto LABEL_934;
                }
              }
              v425 = -1;
              goto LABEL_938;
            }
          }
          else
          {
            if (v405 != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v412 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CA::StreamDescription::AsString((CA::StreamDescription *)v567, (uint64_t)v570, v413);
              if ((SBYTE7(v571) & 0x80u) == 0)
                v414 = v570;
              else
                v414 = *(uint8_t **)v570;
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v414;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = *(unsigned int *)&v567[12];
              v409 = v412;
              v410 = "[%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              v411 = 32;
              goto LABEL_913;
            }
          }
          v415 = -1;
          goto LABEL_917;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v404 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v391;
          v401 = v404;
          v402 = "[%p] [WARNING] AudioUnit and DSPGraph formats for input bus %d don't match";
          v403 = 18;
          goto LABEL_894;
        }
      }
      break;
    }
    v405 = -1;
    goto LABEL_896;
  }
LABEL_951:
  v432 = DSPGraph::Graph::numOutputs((DSPGraph::Graph *)*v544);
  if (v541 >= v432)
    v433 = v432;
  else
    v433 = v541;
  if (v433)
  {
    v434 = 0;
    while (2)
    {
      v435 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), v434);
      v436 = *(_OWORD *)(v435 + 96);
      *(_OWORD *)v567 = *(_OWORD *)(v435 + 80);
      *(_OWORD *)&v567[16] = v436;
      *(_QWORD *)&v567[32] = *(_QWORD *)(v435 + 112);
      v437 = DSPGraph::Graph::out((DSPGraph::Graph *)*v544);
      v438 = *(_QWORD *)(v437 + 64);
      if (*(_QWORD *)(v437 + 72) == v438)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(__sz, "in");
        v528 = (_QWORD *)(v437 + 32);
        if (*(char *)(v437 + 55) < 0)
          v528 = (_QWORD *)*v528;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v527, v528, (uint64_t)(*(_QWORD *)(v437 + 72) - *(_QWORD *)(v437 + 64)) >> 5, 0);
        DSPGraph::ThrowException();
        goto LABEL_1149;
      }
      v439 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v438 + 40))(v438) + 120);
      v440 = *(_QWORD *)(v439 + 32);
      v441 = *(_OWORD *)(v439 + 16);
      *(_OWORD *)__sz = *(_OWORD *)v439;
      *(_OWORD *)&__sz[16] = v441;
      *(_QWORD *)&__sz[32] = v440;
      if (*(double *)v567 == *(double *)__sz
        && *(_DWORD *)&v567[8] == *(_DWORD *)&__sz[8]
        && *(_QWORD *)&v567[16] == *(_QWORD *)&__sz[16]
        && *(_QWORD *)&v567[28] == *(_QWORD *)&__sz[28]
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v567, (const AudioStreamBasicDescription *)__sz, 0, 0))
      {
        goto LABEL_1029;
      }
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v442 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v443 = v543;
          if (*((char *)this + 655) < 0)
            v443 = (std::string::size_type *)*v543;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v443;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = this;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v434;
          v444 = v442;
          v445 = "[%s|%p] [WARNING] AudioUnit and DSPGraph formats for output bus %d don't match";
          v446 = 28;
LABEL_973:
          _os_log_impl(&dword_1B5ED0000, v444, OS_LOG_TYPE_DEFAULT, v445, buf, v446);
          v448 = getAUDSPGraphLog(void)::onceToken;
LABEL_975:
          if (*((_BYTE *)this + 656))
          {
            if (v448 != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v449 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              v24 = (unint64_t)v543;
              if (*((char *)this + 655) < 0)
                v24 = *v543;
              CA::StreamDescription::AsString((CA::StreamDescription *)v567, (uint64_t)v570, v450);
              if ((SBYTE7(v571) & 0x80u) == 0)
                v451 = v570;
              else
                v451 = *(uint8_t **)v570;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v24;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v451;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = *(unsigned int *)&v567[12];
              v452 = v449;
              v453 = "[%s|%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              v454 = 42;
LABEL_992:
              _os_log_impl(&dword_1B5ED0000, v452, OS_LOG_TYPE_DEFAULT, v453, buf, v454);
              if (SBYTE7(v571) < 0)
                operator delete(*(void **)v570);
              v458 = getAUDSPGraphLog(void)::onceToken;
LABEL_996:
              if (*((_BYTE *)this + 656))
              {
                if (v458 != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v459 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  v24 = (unint64_t)v543;
                  if (*((char *)this + 655) < 0)
                    v24 = *v543;
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v570, v460);
                  if ((SBYTE7(v571) & 0x80u) == 0)
                    v461 = v570;
                  else
                    v461 = *(uint8_t **)v570;
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = v24;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = v461;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = *(unsigned int *)&__sz[12];
                  v462 = v459;
                  v463 = "[%s|%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  v464 = 42;
LABEL_1013:
                  _os_log_impl(&dword_1B5ED0000, v462, OS_LOG_TYPE_DEFAULT, v463, buf, v464);
                  if (SBYTE7(v571) < 0)
                    operator delete(*(void **)v570);
                  v468 = getAUDSPGraphLog(void)::onceToken;
LABEL_1017:
                  if (*((_BYTE *)this + 656))
                  {
                    if (v468 != -1)
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                    v469 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_1029;
                    v470 = v543;
                    if (*((char *)this + 655) < 0)
                      v470 = (std::string::size_type *)*v543;
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = v470;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = this;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v434;
                    v471 = v469;
                    v472 = "[%s|%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
                    v473 = 28;
                  }
                  else
                  {
                    if (v468 != -1)
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                    v474 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_1029;
                    *(_DWORD *)buf = 134218240;
                    *(_QWORD *)&buf[4] = this;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v434;
                    v471 = v474;
                    v472 = "[%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
                    v473 = 18;
                  }
                  _os_log_impl(&dword_1B5ED0000, v471, OS_LOG_TYPE_DEFAULT, v472, buf, v473);
LABEL_1029:
                  if (v433 == ++v434)
                    goto LABEL_1030;
                  continue;
                }
              }
              else
              {
                if (v458 != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v465 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v570, v466);
                  if ((SBYTE7(v571) & 0x80u) == 0)
                    v467 = v570;
                  else
                    v467 = *(uint8_t **)v570;
                  *(_DWORD *)buf = 134218498;
                  *(_QWORD *)&buf[4] = this;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v467;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = *(unsigned int *)&__sz[12];
                  v462 = v465;
                  v463 = "[%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  v464 = 32;
                  goto LABEL_1013;
                }
              }
              v468 = -1;
              goto LABEL_1017;
            }
          }
          else
          {
            if (v448 != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v455 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CA::StreamDescription::AsString((CA::StreamDescription *)v567, (uint64_t)v570, v456);
              if ((SBYTE7(v571) & 0x80u) == 0)
                v457 = v570;
              else
                v457 = *(uint8_t **)v570;
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v457;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = *(unsigned int *)&v567[12];
              v452 = v455;
              v453 = "[%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              v454 = 32;
              goto LABEL_992;
            }
          }
          v458 = -1;
          goto LABEL_996;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v447 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v434;
          v444 = v447;
          v445 = "[%p] [WARNING] AudioUnit and DSPGraph formats for output bus %d don't match";
          v446 = 18;
          goto LABEL_973;
        }
      }
      break;
    }
    v448 = -1;
    goto LABEL_975;
  }
LABEL_1030:
  if ((v540 & 1) != 0)
  {
    v475 = this;
    if (*((_BYTE *)this + 656))
    {
      v476 = (const std::string::value_type *)v543;
      if (*((char *)this + 655) < 0)
        v476 = (const std::string::value_type *)*v543;
      std::string::__assign_external((std::string *)(*((_QWORD *)this + 92) + 408), v476);
      v475 = this;
    }
    v477 = *((_QWORD *)v475 + 70);
    if (v477)
    {
      if (*((_BYTE *)v475 + 900))
      {
        *((_QWORD *)this + 70) = 0;
        goto LABEL_1038;
      }
    }
    else if (!*((_BYTE *)v475 + 900))
    {
      v516 = operator new();
      MEMORY[0x1BCC94BD0](v516, v544);
      v477 = *((_QWORD *)this + 70);
      *((_QWORD *)this + 70) = v516;
      if (v477)
LABEL_1038:
        (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
    }
    v574 = 0u;
    v575 = 0u;
    memset(buf, 0, sizeof(buf));
    std::vector<DSPGraph::GraphIOData>::vector(v567, v538, buf);
    v478 = (void *)*((_QWORD *)this + 94);
    if (v478)
    {
      *((_QWORD *)this + 95) = v478;
      operator delete(v478);
      *((_QWORD *)this + 94) = 0;
      *((_QWORD *)this + 95) = 0;
      *((_QWORD *)this + 96) = 0;
    }
    *((_OWORD *)this + 47) = *(_OWORD *)v567;
    *((_QWORD *)this + 96) = *(_QWORD *)&v567[16];
    v574 = 0u;
    v575 = 0u;
    memset(buf, 0, sizeof(buf));
    std::vector<DSPGraph::GraphIOData>::vector(v567, v541, buf);
    v479 = (_QWORD *)((char *)this + 776);
    v480 = (void *)*((_QWORD *)this + 97);
    if (v480)
    {
      *((_QWORD *)this + 98) = v480;
      operator delete(v480);
      *v479 = 0;
      *((_QWORD *)this + 98) = 0;
      *((_QWORD *)this + 99) = 0;
    }
    *(_OWORD *)v479 = *(_OWORD *)v567;
    *((_QWORD *)this + 99) = *(_QWORD *)&v567[16];
    std::vector<AudioBufferList *>::resize((char **)this + 106, v538);
    std::vector<AudioBufferList *>::resize((char **)this + 109, v541);
    v380 = 0;
  }
  else
  {
    v380 = 4294956428;
  }
  if (isInternalBuild())
  {
    if ((v481 & 1) == 0
    {
      isDetailedLoggingEnabledViaDefaults(void)::loggingEnabled = CFPreferencesGetAppBooleanValue(CFSTR("enable_audspg_details"), CFSTR("com.apple.coreaudio"), 0) != 0;
    }
    if (isDetailedLoggingEnabledViaDefaults(void)::loggingEnabled)
    {
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v482 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          v483 = v543;
          if (*((char *)this + 655) < 0)
            v483 = (std::string::size_type *)*v543;
          DSPGraph::Graph::getLatencyInSeconds(*((DSPGraph::Graph **)this + 92));
          v484 = *((_QWORD *)this + 92);
          v485 = *(_DWORD *)(v484 + 688);
          LODWORD(v484) = *(_DWORD *)(v484 + 692);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v483;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = this;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v486;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v485;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v484;
          v487 = "[%s|%p] total graph latency : %f, number of frames per slice = %u, sample rate %u";
          v488 = v482;
          v489 = 44;
LABEL_1118:
          _os_log_debug_impl(&dword_1B5ED0000, v488, OS_LOG_TYPE_DEBUG, v487, buf, v489);
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v490 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          DSPGraph::Graph::getLatencyInSeconds(*((DSPGraph::Graph **)this + 92));
          v520 = *((_QWORD *)this + 92);
          v521 = *(_DWORD *)(v520 + 688);
          LODWORD(v520) = *(_DWORD *)(v520 + 692);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v522;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v521;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v520;
          v487 = "[%p] total graph latency : %f, number of frames per slice = %u, sample rate %u";
          v488 = v490;
          v489 = 34;
          goto LABEL_1118;
        }
      }
      v491 = *(_QWORD **)(*v544 + 24);
      if (v491)
      {
        while (2)
        {
          if (*((_BYTE *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v492 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v493 = v543;
              if (*((char *)this + 655) < 0)
                v493 = (std::string::size_type *)*v543;
              v494 = (char *)v491[2];
              v495 = v494 + 32;
              if (v494[55] < 0)
                v495 = (_QWORD *)*v495;
              DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v494);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v493;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v495;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v496;
              v497 = v492;
              v498 = "[%s|%p] latency for box %s : %f";
              v499 = 42;
              goto LABEL_1077;
            }
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1)
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
            v500 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v501 = (char *)v491[2];
              v502 = v501 + 32;
              if (v501[55] < 0)
                v502 = (_QWORD *)*v502;
              DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v501);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v502;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v503;
              v497 = v500;
              v498 = "[%p] latency for box %s : %f";
              v499 = 32;
LABEL_1077:
              _os_log_debug_impl(&dword_1B5ED0000, v497, OS_LOG_TYPE_DEBUG, v498, buf, v499);
            }
          }
          v491 = (_QWORD *)*v491;
          if (!v491)
            break;
          continue;
        }
      }
    }
  }
  if (!v540)
  {
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v506 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return v380;
      if (*((char *)this + 655) < 0)
        v507 = (std::string::size_type *)*v543;
      else
        v507 = v543;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v507;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v380;
      v513 = "[%s|%p] failed to initialize with error %d";
      v514 = v506;
      v515 = 28;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v512 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return v380;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v380;
      v513 = "[%p] failed to initialize with error %d";
      v514 = v512;
      v515 = 18;
    }
    _os_log_error_impl(&dword_1B5ED0000, v514, OS_LOG_TYPE_ERROR, v513, buf, v515);
    return v380;
  }
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v504 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 655) < 0)
        v505 = (std::string::size_type *)*v543;
      else
        v505 = v543;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v505;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      v509 = "[%s|%p] did initialize";
      v510 = v504;
      v511 = 22;
      goto LABEL_1103;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v508 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = this;
      v509 = "[%p] did initialize";
      v510 = v508;
      v511 = 12;
LABEL_1103:
      _os_log_impl(&dword_1B5ED0000, v510, OS_LOG_TYPE_DEFAULT, v509, buf, v511);
    }
  }
  return v380;
}

void sub_1B62EA7A8(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EA7B0);
  _Unwind_Resume(v2);
}

void sub_1B62EA7C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  _Unwind_Exception *v50;

  if (a2)
  {
    if (a50 < 0)
      operator delete(__p);
    if (SLOBYTE(STACK[0x287]) < 0)
      operator delete((void *)STACK[0x270]);
    JUMPOUT(0x1B62EB600);
  }
  _Unwind_Resume(v50);
}

void sub_1B62EA988(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  unint64_t v46;
  unint64_t v47;
  _Unwind_Exception *v48;

  if (a2)
  {
    STACK[0x270] = (unint64_t)&a39;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a45);
    __cxa_begin_catch(a1);
    if (a2 == 4)
    {
      STACK[0x278] = 0;
      STACK[0x270] = 0;
      STACK[0x280] = 0;
      DSPGraph::Interpreter::compileText();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(a35, (uint64_t *)&STACK[0x220]);
      v46 = STACK[0x220];
      STACK[0x220] = 0;
      if (v46)
        (*(void (**)(unint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    else
    {
      STACK[0x278] = 0;
      STACK[0x270] = 0;
      STACK[0x280] = 0;
      DSPGraph::Interpreter::compileText();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(a35, (uint64_t *)&STACK[0x220]);
      v47 = STACK[0x220];
      STACK[0x220] = 0;
      if (v47)
        (*(void (**)(unint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    STACK[0x240] = (unint64_t)&STACK[0x270];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
    *(_BYTE *)(a38 + 898) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1B62E6408);
  }
  _Unwind_Resume(v48);
}

void sub_1B62EACFC(uint64_t a1, int a2)
{
  unint64_t v2;
  _Unwind_Exception *v3;

  if (a2)
  {
    v2 = STACK[0x220];
    STACK[0x220] = 0;
    if (v2)
      (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
    STACK[0x240] = (unint64_t)&STACK[0x270];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
    __cxa_end_catch();
    JUMPOUT(0x1B62EB600);
  }
  _Unwind_Resume(v3);
}

void sub_1B62EAD60(uint64_t a1, int a2)
{
  unint64_t v2;
  _Unwind_Exception *v3;

  if (a2)
  {
    v2 = STACK[0x220];
    STACK[0x220] = 0;
    if (v2)
      (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
    STACK[0x240] = (unint64_t)&STACK[0x270];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
    __cxa_end_catch();
    JUMPOUT(0x1B62EADACLL);
  }
  _Unwind_Resume(v3);
}

void sub_1B62EADB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  _Unwind_Exception *v50;

  if (a2)
  {
    if (a50 < 0)
      operator delete(__p);
    if (SLOBYTE(STACK[0x287]) < 0)
      operator delete((void *)STACK[0x270]);
    JUMPOUT(0x1B62EB610);
  }
  _Unwind_Resume(v50);
}

void sub_1B62EAE64(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EB630);
}

void sub_1B62EAE7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;

  if (a2)
  {
    __cxa_free_exception(v25);
    JUMPOUT(0x1B62EAFC4);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAE98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;
  const void *v27;

  if (a2)
  {
    __cxa_free_exception(v25);
    applesauce::CF::DataRef::~DataRef(&v27);
    JUMPOUT(0x1B62EAFB4);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAEB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;

  if (a2)
  {
    __cxa_free_exception(v25);
    JUMPOUT(0x1B62EAFECLL);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;
  const void *v27;

  if (a2)
  {
    __cxa_free_exception(v25);
    applesauce::CF::StringRef::~StringRef(&v27);
    JUMPOUT(0x1B62EB030);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAEEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;
  void *v27;
  char v28;

  if (a2)
  {
    __cxa_free_exception(v25);
    if (v28 < 0)
      operator delete(v27);
    JUMPOUT(0x1B62EAFE4);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAF0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  _Unwind_Exception *v26;

  if (a2)
  {
    __cxa_free_exception(v25);
    JUMPOUT(0x1B62EB02CLL);
  }
  _Unwind_Resume(v26);
}

void sub_1B62EAF40()
{
  JUMPOUT(0x1B62EAF48);
}

void sub_1B62EAF6C(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef((applesauce::CF::DictionaryRef *)&STACK[0x270]);
    JUMPOUT(0x1B62EB5F8);
  }
  _Unwind_Resume(v2);
}

void sub_1B62EAF80(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EAF8CLL);
  _Unwind_Resume(v2);
}

void sub_1B62EAF98(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EB5FCLL);
}

void sub_1B62EAFA8(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EAFB4);
  _Unwind_Resume(v2);
}

void sub_1B62EAFB8(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EAFC4);
  _Unwind_Resume(v2);
}

void sub_1B62EAFD8(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EAFE4);
  _Unwind_Resume(v2);
}

void sub_1B62EAFF4(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EAFECLL);
}

void sub_1B62EB004(void *a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(v2);
}

void sub_1B62EB020(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EB030);
  _Unwind_Resume(v2);
}

void sub_1B62EB048(uint64_t a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BYTE *v5;
  void *v6;
  const std::system_error *v7;
  NSObject *v8;
  _BYTE *v9;
  const std::exception *v10;
  const std::exception *v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _Unwind_Exception *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  _BYTE v32[12];
  __int16 v33;
  _BYTE *v34;
  char v35;
  _BYTE v36[12];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  _BYTE *v40;

  if (!a2)
    _Unwind_Resume(v25);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  STACK[0x270] = (unint64_t)&STACK[0x240];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  v31 = (void **)&v28;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v31);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v29);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v30);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v32);
  MEMORY[0x1BCC95158](v36);
  if (a2 == 4)
  {
    v3 = __cxa_begin_catch(v25);
    if (*(_BYTE *)(v27 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v4 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v27 + 655) < 0)
          v26 = (_QWORD *)*v26;
        v5 = v35 >= 0 ? v32 : *(_BYTE **)v32;
        *(_DWORD *)v36 = 136315650;
        *(_QWORD *)&v36[4] = v26;
        v37 = 2048;
        v38 = v27;
        v39 = 2080;
        v40 = v5;
        _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", v36, 0x20u);
        if (v35 < 0)
        {
          v6 = *(void **)v32;
LABEL_78:
          operator delete(v6);
        }
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v14 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v22 = v39 >= 0 ? v36 : *(_BYTE **)v36;
        *(_DWORD *)v32 = 134218242;
        *(_QWORD *)&v32[4] = v27;
        v33 = 2080;
        v34 = v22;
        _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", v32, 0x16u);
        if (SHIBYTE(v39) < 0)
        {
          v6 = *(void **)v36;
          goto LABEL_78;
        }
      }
    }
  }
  else if (a2 == 3)
  {
    v7 = (const std::system_error *)__cxa_begin_catch(v25);
    if (*(_BYTE *)(v27 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v8 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v27 + 655) < 0)
          v26 = (_QWORD *)*v26;
        v9 = v35 >= 0 ? v32 : *(_BYTE **)v32;
        *(_DWORD *)v36 = 136315650;
        *(_QWORD *)&v36[4] = v26;
        v37 = 2048;
        v38 = v27;
        v39 = 2080;
        v40 = v9;
        _os_log_error_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::system_error: %s", v36, 0x20u);
        if (v35 < 0)
        {
          v6 = *(void **)v32;
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v19 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v23 = v39 >= 0 ? v36 : *(_BYTE **)v36;
        *(_DWORD *)v32 = 134218242;
        *(_QWORD *)&v32[4] = v27;
        v33 = 2080;
        v34 = v23;
        _os_log_error_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "[%p] caught std::system_error: %s", v32, 0x16u);
        if (SHIBYTE(v39) < 0)
        {
          v6 = *(void **)v36;
          goto LABEL_78;
        }
      }
    }
  }
  else
  {
    v10 = (const std::exception *)__cxa_begin_catch(v25);
    if (a2 != 2)
    {
      if (*(_BYTE *)(v27 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v15 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_62;
        if (*(char *)(v27 + 655) < 0)
          v26 = (_QWORD *)*v26;
        *(_DWORD *)v36 = 136315394;
        *(_QWORD *)&v36[4] = v26;
        v37 = 2048;
        v38 = v27;
        v16 = "[%s|%p] caught unknown exception";
        v17 = v15;
        v18 = 22;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v21 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_62;
        *(_DWORD *)v36 = 134217984;
        *(_QWORD *)&v36[4] = v27;
        v16 = "[%p] caught unknown exception";
        v17 = v21;
        v18 = 12;
      }
      _os_log_error_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, v16, v36, v18);
      goto LABEL_62;
    }
    v11 = v10;
    if (*(_BYTE *)(v27 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v12 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v27 + 655) < 0)
          v26 = (_QWORD *)*v26;
        v13 = v35 >= 0 ? v32 : *(_BYTE **)v32;
        *(_DWORD *)v36 = 136315650;
        *(_QWORD *)&v36[4] = v26;
        v37 = 2048;
        v38 = v27;
        v39 = 2080;
        v40 = v13;
        _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::exception: %s", v36, 0x20u);
        if (v35 < 0)
        {
          v6 = *(void **)v32;
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v20 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v24 = v39 >= 0 ? v36 : *(_BYTE **)v36;
        *(_DWORD *)v32 = 134218242;
        *(_QWORD *)&v32[4] = v27;
        v33 = 2080;
        v34 = v24;
        _os_log_error_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "[%p] caught std::exception: %s", v32, 0x16u);
        if (SHIBYTE(v39) < 0)
        {
          v6 = *(void **)v36;
          goto LABEL_78;
        }
      }
    }
  }
LABEL_62:
  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)(v27 + 736));
  AUDSPGraph::ResetCachedProps((AUDSPGraph *)v27);
  __cxa_end_catch();
  JUMPOUT(0x1B62E89F4);
}

void sub_1B62EB0DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  _Unwind_Exception *v72;

  if (a2)
  {
    if (a72 < 0)
      operator delete(__p);
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
    JUMPOUT(0x1B62EB240);
  }
  _Unwind_Resume(v72);
}

void sub_1B62EB0EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;
  char a73;
  _Unwind_Exception *v73;

  if (a2)
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
    if (a72 < 0)
      operator delete(a67);
    if (a73 < 0)
      JUMPOUT(0x1B62EB1FCLL);
    JUMPOUT(0x1B62EB200);
  }
  _Unwind_Resume(v73);
}

void sub_1B62EB0FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  void *a70;
  char a72;
  uint64_t v72;
  _Unwind_Exception *v73;

  if (a2)
  {
    if (a69 < 0)
      operator delete(__p);
    if (*(char *)(v72 - 121) < 0)
      operator delete(*(void **)(v72 - 144));
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
    if (a72 < 0)
      operator delete(a70);
    JUMPOUT(0x1B62EB1C4);
  }
  _Unwind_Resume(v73);
}

void sub_1B62EB10C(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
  {
    if (SLOBYTE(STACK[0x287]) < 0)
      JUMPOUT(0x1B62EB1FCLL);
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
    JUMPOUT(0x1B62EB240);
  }
  _Unwind_Resume(v2);
}

void sub_1B62EB11C(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
  {
    if (SLOBYTE(STACK[0x237]) < 0)
      operator delete((void *)STACK[0x220]);
    if (SLOBYTE(STACK[0x287]) < 0)
      JUMPOUT(0x1B62EB1FCLL);
    JUMPOUT(0x1B62EB200);
  }
  _Unwind_Resume(v2);
}

void sub_1B62EB148(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EB1B4);
}

void sub_1B62EB158(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EB194);
}

void sub_1B62EB168(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t v69;
  _Unwind_Exception *v70;

  if (a2)
  {
    if (SLOBYTE(STACK[0x237]) < 0)
      operator delete((void *)STACK[0x220]);
    if (a69 < 0)
      operator delete(a64);
    if (*(char *)(v69 - 121) < 0)
      operator delete(*(void **)(v69 - 144));
    JUMPOUT(0x1B62EB1A4);
  }
  _Unwind_Resume(v70);
}

void sub_1B62EB1D4(uint64_t a1, int a2)
{
  uint64_t v2;
  _Unwind_Exception *v3;

  if (a2)
  {
    if (*(char *)(v2 - 121) < 0)
      JUMPOUT(0x1B62EB1ECLL);
    if (SLOBYTE(STACK[0x287]) < 0)
      JUMPOUT(0x1B62EB1FCLL);
    JUMPOUT(0x1B62EB200);
  }
  _Unwind_Resume(v3);
}

void sub_1B62EB214(uint64_t a1, int a2)
{
  if (a2)
  {
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](&STACK[0x220], 0);
    JUMPOUT(0x1B62EB570);
  }
  JUMPOUT(0x1B62EBCF8);
}

void sub_1B62EB234(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EB240);
  _Unwind_Resume(v2);
}

void sub_1B62EB24C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int *v38;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  const char *v46;
  NSObject *v47;
  uint32_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t *v58;
  int v59;
  _Unwind_Exception *v60;

  if (!a2)
    _Unwind_Resume(v60);
  v40 = __cxa_begin_catch(a1);
  if (a2 == 4)
  {
    v41 = (uint64_t)v40;
    if (*(_BYTE *)(a38 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v42 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v43 = (unint64_t)a34;
        if (*(char *)(a38 + 655) < 0)
          v43 = *a34;
        v44 = *v38;
        if (SLOBYTE(STACK[0x257]) >= 0)
          v45 = &STACK[0x240];
        else
          v45 = (unint64_t *)STACK[0x240];
        LODWORD(STACK[0x270]) = 136315906;
        STACK[0x274] = v43;
        LOWORD(STACK[0x27C]) = 2048;
        STACK[0x27E] = a38;
        LOWORD(STACK[0x286]) = 1024;
        LODWORD(STACK[0x288]) = v44;
        LOWORD(STACK[0x28C]) = 2080;
        STACK[0x28E] = (unint64_t)v45;
        v46 = "[%s|%p] failed to set parameter %d on the graph: %s";
        v47 = v42;
        v48 = 38;
        goto LABEL_32;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v55 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v57 = *v38;
        if (SLOBYTE(STACK[0x257]) >= 0)
          v58 = &STACK[0x240];
        else
          v58 = (unint64_t *)STACK[0x240];
        LODWORD(STACK[0x270]) = 134218498;
        STACK[0x274] = a38;
        LOWORD(STACK[0x27C]) = 1024;
        LODWORD(STACK[0x27E]) = v57;
        LOWORD(STACK[0x282]) = 2080;
        STACK[0x284] = (unint64_t)v58;
        v46 = "[%p] failed to set parameter %d on the graph: %s";
        v47 = v55;
        v48 = 28;
LABEL_32:
        _os_log_error_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, v46, (uint8_t *)&STACK[0x270], v48);
        if (SLOBYTE(STACK[0x257]) < 0)
          operator delete((void *)STACK[0x240]);
      }
    }
LABEL_27:
    __cxa_end_catch();
    JUMPOUT(0x1B62E89BCLL);
  }
  if (*(_BYTE *)(a38 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v49 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    v50 = (unint64_t)a34;
    if (*(char *)(a38 + 655) < 0)
      v50 = *a34;
    v51 = *v38;
    LODWORD(STACK[0x270]) = a27;
    STACK[0x274] = v50;
    LOWORD(STACK[0x27C]) = 2048;
    STACK[0x27E] = a38;
    LOWORD(STACK[0x286]) = 1024;
    LODWORD(STACK[0x288]) = v51;
    v52 = "[%s|%p] failed to set parameter %d on the graph: unspecified error";
    v53 = v49;
    v54 = 28;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v56 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    v59 = *v38;
    LODWORD(STACK[0x270]) = 134218240;
    STACK[0x274] = a38;
    LOWORD(STACK[0x27C]) = 1024;
    LODWORD(STACK[0x27E]) = v59;
    v52 = "[%p] failed to set parameter %d on the graph: unspecified error";
    v53 = v56;
    v54 = 18;
  }
  _os_log_error_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, v52, (uint8_t *)&STACK[0x270], v54);
  goto LABEL_27;
}

void sub_1B62EB554(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (!a2)
    _Unwind_Resume(v2);
  JUMPOUT(0x1B62EAFA0);
}

void sub_1B62EB560(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EB570);
  _Unwind_Resume(v2);
}

void sub_1B62EB57C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  _Unwind_Exception *v45;

  if (a2)
  {
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&a45);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&STACK[0x270]);
    JUMPOUT(0x1B62EB5D4);
  }
  _Unwind_Resume(v45);
}

void sub_1B62EB5DC(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x1B62EB5E8);
  _Unwind_Resume(v2);
}

void sub_1B62EBCBC()
{
  _Unwind_Exception *v0;

  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void AUDSPGraph::Cleanup(DSPGraph::Graph **this)
{
  AUDSPGraph *v2;
  uint64_t v3;
  AUDSPGraph *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  DSPGraph::Graph *v9;
  DSPGraph::Graph *v10;
  DSPGraph::Graph *v11;
  DSPGraph::Graph *v12;
  DSPGraph::Graph *v13;
  DSPGraph::Graph *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  uint8_t buf[4];
  AUDSPGraph *v21;
  __int16 v22;
  AUDSPGraph *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (AUDSPGraph *)(this + 79);
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v3 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v2;
      if (*((char *)this + 655) < 0)
        v4 = *(AUDSPGraph **)v2;
      *(_DWORD *)buf = 136315394;
      v21 = v4;
      v22 = 2048;
      v23 = (AUDSPGraph *)this;
      v5 = "[%s|%p] will uninitialize";
      v6 = v3;
      v7 = 22;
      goto LABEL_12;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v8 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v21 = (AUDSPGraph *)this;
      v5 = "[%p] will uninitialize";
      v6 = v8;
      v7 = 12;
LABEL_12:
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  v9 = this[83];
  this[83] = 0;
  if (v9)
    CFRelease(v9);
  v10 = this[84];
  this[84] = 0;
  if (v10)
    CFRelease(v10);
  v11 = this[103];
  this[103] = 0;
  if (v11)
    CFRelease(v11);
  v12 = this[104];
  this[104] = 0;
  if (v12)
    CFRelease(v12);
  v13 = this[105];
  this[105] = 0;
  if (v13)
    CFRelease(v13);
  this[101] = this[100];
  *((_BYTE *)this + 899) = 0;
  v14 = this[92];
  if (v14)
  {
    DSPGraph::Graph::uninitialize(v14);
    DSPGraph::Graph::unconfigure(this[92]);
  }
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v15 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 655) < 0)
        v2 = *(AUDSPGraph **)v2;
      *(_DWORD *)buf = 136315394;
      v21 = v2;
      v22 = 2048;
      v23 = (AUDSPGraph *)this;
      v16 = "[%s|%p] did uninitialize";
      v17 = v15;
      v18 = 22;
      goto LABEL_36;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v19 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v21 = (AUDSPGraph *)this;
      v16 = "[%p] did uninitialize";
      v17 = v19;
      v18 = 12;
LABEL_36:
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
    }
  }
}

void sub_1B62EBFC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1B62EBFF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, int a10, __int16 a11, uint64_t a12, char a13, char a14, __int128 buf, int a16, __int16 a17, __int16 a18, uint64_t a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t *v28;
  const char *v29;
  const std::system_error *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  const std::exception *v34;
  uint64_t v35;
  const std::exception *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  NSObject *v40;
  __int128 *p_buf;
  const char *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  NSObject *v46;
  uint32_t v47;
  __int128 *v48;
  __int128 *v49;
  NSObject *v50;

  switch(a2)
  {
    case 0:
      JUMPOUT(0x1B62EBFECLL);
    case 4:
      v24 = __cxa_begin_catch(a1);
      v25 = *(_QWORD *)(v22 + 2064);
      if (*(_BYTE *)(v19 + 656))
      {
        if (v25 != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v26 = *(NSObject **)(v21 + 2056);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
        v27 = v20;
        if (*(char *)(v19 + 655) < 0)
          v27 = (_QWORD *)*v20;
        if (a12 >= 0)
          v28 = (uint64_t *)&a9;
        else
          v28 = a9;
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = v27;
        WORD6(buf) = 2048;
        *(_QWORD *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v28;
        v29 = "[%s|%p] caught DSPGraph::Exception: %s";
LABEL_35:
        _os_log_error_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(a12) < 0)
        {
          v39 = a9;
LABEL_67:
          operator delete(v39);
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (v25 != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v40 = *(NSObject **)(v21 + 2056);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      if (a18 >= 0)
        p_buf = &buf;
      else
        p_buf = (__int128 *)buf;
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(_QWORD *)((char *)&a10 + 6) = p_buf;
      v42 = "[%p] caught DSPGraph::Exception: %s";
      break;
    case 3:
      v30 = (const std::system_error *)__cxa_begin_catch(a1);
      v31 = *(_QWORD *)(v22 + 2064);
      if (*(_BYTE *)(v19 + 656))
      {
        if (v31 != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v26 = *(NSObject **)(v21 + 2056);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
        v32 = v20;
        if (*(char *)(v19 + 655) < 0)
          v32 = (_QWORD *)*v20;
        if (a12 >= 0)
          v33 = (uint64_t *)&a9;
        else
          v33 = a9;
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = v32;
        WORD6(buf) = 2048;
        *(_QWORD *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v33;
        v29 = "[%s|%p] caught std::system_error: %s";
        goto LABEL_35;
      }
      if (v31 != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v40 = *(NSObject **)(v21 + 2056);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      if (a18 >= 0)
        v48 = &buf;
      else
        v48 = (__int128 *)buf;
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(_QWORD *)((char *)&a10 + 6) = v48;
      v42 = "[%p] caught std::system_error: %s";
      break;
    default:
      v34 = (const std::exception *)__cxa_begin_catch(a1);
      v35 = *(_QWORD *)(v22 + 2064);
      if (a2 != 2)
      {
        if (*(_BYTE *)(v19 + 656))
        {
          if (v35 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v43 = *(NSObject **)(v21 + 2056);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            goto LABEL_71;
          v44 = v20;
          if (*(char *)(v19 + 655) < 0)
            v44 = (_QWORD *)*v20;
          LODWORD(buf) = 136315394;
          *(_QWORD *)((char *)&buf + 4) = v44;
          WORD6(buf) = 2048;
          *(_QWORD *)((char *)&buf + 14) = v19;
          v45 = "[%s|%p] caught unknown exception";
          v46 = v43;
          v47 = 22;
        }
        else
        {
          if (v35 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v50 = *(NSObject **)(v21 + 2056);
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            goto LABEL_71;
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = v19;
          v45 = "[%p] caught unknown exception";
          v46 = v50;
          v47 = 12;
        }
        _os_log_error_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, v47);
        goto LABEL_71;
      }
      v36 = v34;
      if (*(_BYTE *)(v19 + 656))
      {
        if (v35 != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v26 = *(NSObject **)(v21 + 2056);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
        v37 = v20;
        if (*(char *)(v19 + 655) < 0)
          v37 = (_QWORD *)*v20;
        if (a12 >= 0)
          v38 = (uint64_t *)&a9;
        else
          v38 = a9;
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = v37;
        WORD6(buf) = 2048;
        *(_QWORD *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v38;
        v29 = "[%s|%p] caught std::exception: %s";
        goto LABEL_35;
      }
      if (v35 != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v40 = *(NSObject **)(v21 + 2056);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        goto LABEL_71;
      if (a18 >= 0)
        v49 = &buf;
      else
        v49 = (__int128 *)buf;
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(_QWORD *)((char *)&a10 + 6) = v49;
      v42 = "[%p] caught std::exception: %s";
      break;
  }
  _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&a9, 0x16u);
  if (SHIBYTE(a18) < 0)
  {
    v39 = (uint64_t *)buf;
    goto LABEL_67;
  }
LABEL_71:
  __cxa_end_catch();
  JUMPOUT(0x1B62EBE70);
}

uint64_t AUDSPGraph::Reset(AUDSPGraph *this)
{
  DSPGraph::Graph *v1;

  v1 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
  if (v1 && *((_BYTE *)v1 + 762))
    DSPGraph::Graph::reset(v1);
  return 0;
}

uint64_t AUDSPGraph::GetPropertyInfo(AUDSPGraph *this, uint64_t a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  int v11;
  char v12;
  char v13;
  unsigned int v14;
  DSPGraph::Graph *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  AUDSPGraph *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  _BYTE v25[16];
  uint8_t buf[4];
  AUDSPGraph *v27;
  __int16 v28;
  AUDSPGraph *v29;
  __int16 v30;
  _BYTE *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if ((int)a2 > 1735554167)
  {
    if ((int)a2 > 1886548847)
    {
      if ((int)a2 <= 1919247201)
      {
        if ((_DWORD)a2 == 1886548848)
          goto LABEL_34;
        v11 = 1886548853;
        goto LABEL_33;
      }
      if ((_DWORD)a2 == 1919247202)
      {
        v6 = 0;
        v13 = *((_BYTE *)this + 17) ^ 1;
        goto LABEL_30;
      }
      if ((_DWORD)a2 != 1920169063)
      {
        if ((_DWORD)a2 != 1936289382)
          goto LABEL_40;
LABEL_22:
        v6 = 0;
        *a6 = 0;
LABEL_36:
        v14 = 8;
        goto LABEL_37;
      }
    }
    else
    {
      if ((int)a2 <= 1836347500)
      {
        if ((_DWORD)a2 == 1735554168)
          goto LABEL_34;
        v11 = 1835758191;
        goto LABEL_33;
      }
      if ((_DWORD)a2 == 1836347501)
        goto LABEL_34;
      if ((_DWORD)a2 != 1852797026)
      {
        if ((_DWORD)a2 == 1886548592)
        {
          v6 = 0;
          v12 = *((_BYTE *)this + 17) ^ 1;
LABEL_35:
          *a6 = v12;
          goto LABEL_36;
        }
        goto LABEL_40;
      }
    }
LABEL_29:
    v6 = 0;
    v13 = 1;
LABEL_30:
    *a6 = v13;
    v14 = 4;
LABEL_37:
    *a5 = v14;
    return v6;
  }
  if ((int)a2 <= 1685283430)
  {
    if ((int)a2 > 1652060273)
    {
      if ((a2 - 1652060274) >= 2)
      {
        v11 = 1667788397;
        goto LABEL_33;
      }
LABEL_34:
      v6 = 0;
      v12 = 1;
      goto LABEL_35;
    }
    if ((_DWORD)a2 != 3700)
    {
      v11 = 1635087216;
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if ((int)a2 <= 1734504311)
  {
    if ((_DWORD)a2 != 1685283431)
    {
      v11 = 1685287015;
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if ((_DWORD)a2 == 1734504312)
    goto LABEL_22;
  if ((_DWORD)a2 == 1735287149)
    goto LABEL_34;
  v11 = 1735553138;
LABEL_33:
  if ((_DWORD)a2 == v11)
    goto LABEL_34;
LABEL_40:
  v16 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
  if (!v16 || !DSPGraph::Graph::hasProperty(v16))
    return 4294956417;
  v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 92) + 64))(*((_QWORD *)this + 92), a2);
  v6 = v17;
  if (v18)
  {
    *a5 = v17;
    *a6 = BYTE4(v17);
    return 0;
  }
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v19 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v20 = (AUDSPGraph *)((char *)this + 632);
      if (*((char *)this + 655) < 0)
        v20 = *(AUDSPGraph **)v20;
      CAX4CCString::CAX4CCString((CAX4CCString *)v25, a2);
      *(_DWORD *)buf = 136315906;
      v27 = v20;
      v28 = 2048;
      v29 = this;
      v30 = 2080;
      v31 = v25;
      v32 = 1024;
      v33 = v6;
      v21 = "[%s|%p] failed to query property info for property %s (error %d)";
      v22 = v19;
      v23 = 38;
      goto LABEL_55;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v24 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v25, a2);
      *(_DWORD *)buf = 134218498;
      v27 = this;
      v28 = 2080;
      v29 = (AUDSPGraph *)v25;
      v30 = 1024;
      LODWORD(v31) = v6;
      v21 = "[%p] failed to query property info for property %s (error %d)";
      v22 = v24;
      v23 = 28;
LABEL_55:
      _os_log_error_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    }
  }
  return v6;
}

uint64_t AUDSPGraph::GetProperty(AUDSPGraph *this, uint64_t a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  uint64_t v5;
  int v9;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  CFDictionaryRef v15;
  uint64_t *v16;
  CFDictionaryRef v17;
  uint64_t *v18;
  CFTypeRef v19;
  uint64_t **v20;
  const void **v21;
  CFTypeRef v22;
  uint64_t *v23;
  CFTypeRef v24;
  uint64_t **v25;
  const void **v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  CFTypeRef v30;
  uint64_t **v31;
  const void **v32;
  uint64_t v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  CFTypeRef v40;
  uint64_t **v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  CFNumberRef v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t v48;
  CFNumberRef v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t v52;
  CFNumberRef v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t *v57;
  CFTypeRef v58;
  uint64_t **v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  const void ****v68;
  __int128 *v69;
  _QWORD *v70;
  const void ***v71;
  const void **v72;
  __int128 v73;
  __int128 *v74;
  DSPGraph::Graph *v75;
  int v76;
  uint64_t v78;
  _QWORD *v79;
  const char *v80;
  NSObject *v81;
  uint32_t v82;
  uint64_t v83;
  std::runtime_error *exception;
  std::runtime_error *v85;
  std::runtime_error *v86;
  CFTypeRef v87;
  const void ***v88;
  uint64_t *v89;
  uint64_t v90;
  CFTypeRef cf;
  uint64_t v92;
  int v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 *v99;
  _BYTE valuePtr[24];
  __int128 *v101;
  __int128 **v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if ((int)a2 > 1852797025)
  {
    if ((int)a2 <= 1920169062)
    {
      if ((_DWORD)a2 == 1852797026)
      {
        v5 = 0;
        v9 = *((unsigned __int8 *)this + 900);
        goto LABEL_124;
      }
      if ((_DWORD)a2 == 1919247202)
      {
        v5 = 0;
        v9 = *((unsigned __int8 *)this + 528);
        goto LABEL_124;
      }
LABEL_125:
      v75 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
      if (!v75 || !DSPGraph::Graph::hasProperty(v75))
        return 4294956417;
      v94 = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 92) + 64))(*((_QWORD *)this + 92), a2);
      LODWORD(v95) = v76;
      if ((_BYTE)v76)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t ***, CFArrayRef *))(**((_QWORD **)this + 92) + 72))(*((_QWORD *)this + 92), a2, &v94, a5);
        return 0;
      }
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v78 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return v94;
        v79 = (_QWORD *)((char *)this + 632);
        if (*((char *)this + 655) < 0)
          v79 = (_QWORD *)*v79;
        CAX4CCString::CAX4CCString((CAX4CCString *)&v98, a2);
        *(_DWORD *)valuePtr = 136315906;
        *(_QWORD *)&valuePtr[4] = v79;
        *(_WORD *)&valuePtr[12] = 2048;
        *(_QWORD *)&valuePtr[14] = this;
        *(_WORD *)&valuePtr[22] = 2080;
        v101 = &v98;
        LOWORD(v102) = 1024;
        *(_DWORD *)((char *)&v102 + 2) = (_DWORD)v94;
        v80 = "[%s|%p] failed to query property info for property %s (error %d)";
        v81 = v78;
        v82 = 38;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v83 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return v94;
        CAX4CCString::CAX4CCString((CAX4CCString *)&v98, a2);
        *(_DWORD *)valuePtr = 134218498;
        *(_QWORD *)&valuePtr[4] = this;
        *(_WORD *)&valuePtr[12] = 2080;
        *(_QWORD *)&valuePtr[14] = &v98;
        *(_WORD *)&valuePtr[22] = 1024;
        LODWORD(v101) = (_DWORD)v94;
        v80 = "[%p] failed to query property info for property %s (error %d)";
        v81 = v83;
        v82 = 28;
      }
      _os_log_error_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_ERROR, v80, valuePtr, v82);
      return v94;
    }
    if ((_DWORD)a2 == 1920169063)
    {
      v5 = 0;
      v9 = *((unsigned __int8 *)this + 897);
      goto LABEL_124;
    }
    if ((_DWORD)a2 != 1936289382)
      goto LABEL_125;
    v11 = *((_QWORD *)this + 92);
    if (!v11)
      return 4294956446;
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0;
    *(_QWORD *)&v98 = (char *)&v98 + 8;
    v12 = *(uint64_t ***)(v11 + 24);
    if (!v12)
    {
LABEL_130:
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)valuePtr, (const void ***)&v98);
      *a5 = *(CFArrayRef *)valuePtr;
      std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(*((_QWORD **)&v98 + 1));
      return 0;
    }
    while (1)
    {
      v95 = 0;
      v96 = 0;
      v94 = &v95;
      v13 = (*(uint64_t (**)(uint64_t *))(*v12[2] + 216))(v12[2]);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 848);
        if (ABHelperLibraryLoader(void)::once != -1)
          dispatch_once(&ABHelperLibraryLoader(void)::once, &__block_literal_global_198);
        if (ABHelperLibraryLoader(void)::libSym)
          v15 = (CFDictionaryRef)ABHelperLibraryLoader(void)::libSym(v14);
        else
          v15 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v15);
        v18 = (uint64_t *)operator new(0x30uLL);
        *(_QWORD *)valuePtr = v18;
        *(_QWORD *)&valuePtr[8] = &v95;
        valuePtr[16] = 0;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v18 + 4), "AUSpecific");
        v19 = cf;
        if (cf)
          CFRetain(cf);
        v18[5] = (uint64_t)v19;
        valuePtr[16] = 1;
        v20 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v94, &v88, (CFTypeRef *)v18 + 4);
        if (!*v20)
        {
          v21 = (const void **)v88;
          *v18 = 0;
          v18[1] = 0;
          v18[2] = (uint64_t)v21;
          *v20 = v18;
          if (*v94)
          {
            v94 = (uint64_t **)*v94;
            v18 = *v20;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v18);
          ++v96;
          *(_QWORD *)valuePtr = 0;
        }
        std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
        v22 = cf;
        if (!cf)
          goto LABEL_48;
      }
      else
      {
        v16 = v12[2];
        if (ABHelperLibraryLoader(void)::once != -1)
          dispatch_once(&ABHelperLibraryLoader(void)::once, &__block_literal_global_198);
        if (ABHelperLibraryLoader(void)::libSym)
          v17 = (CFDictionaryRef)ABHelperLibraryLoader(void)::libSym(v16);
        else
          v17 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v17);
        v23 = (uint64_t *)operator new(0x30uLL);
        *(_QWORD *)valuePtr = v23;
        *(_QWORD *)&valuePtr[8] = &v95;
        valuePtr[16] = 0;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v23 + 4), "BoxSpecific");
        v24 = cf;
        if (cf)
          CFRetain(cf);
        v23[5] = (uint64_t)v24;
        valuePtr[16] = 1;
        v25 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v94, &v88, (CFTypeRef *)v23 + 4);
        if (!*v25)
        {
          v26 = (const void **)v88;
          *v23 = 0;
          v23[1] = 0;
          v23[2] = (uint64_t)v26;
          *v25 = v23;
          if (*v94)
          {
            v94 = (uint64_t **)*v94;
            v23 = *v25;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v23);
          ++v96;
          *(_QWORD *)valuePtr = 0;
        }
        std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
        v22 = cf;
        if (!cf)
          goto LABEL_48;
      }
      CFRelease(v22);
LABEL_48:
      v27 = v12[2];
      v28 = (char *)(v27 + 4);
      if (*((char *)v27 + 55) < 0)
        v28 = *(char **)v28;
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&cf, (const void ***)&v94);
      v29 = (uint64_t *)operator new(0x30uLL);
      *(_QWORD *)valuePtr = v29;
      *(_QWORD *)&valuePtr[8] = (char *)&v98 + 8;
      valuePtr[16] = 0;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v29 + 4), v28);
      v30 = cf;
      if (cf)
        CFRetain(cf);
      v29[5] = (uint64_t)v30;
      valuePtr[16] = 1;
      v31 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v98, &v88, (CFTypeRef *)v29 + 4);
      if (!*v31)
      {
        v32 = (const void **)v88;
        *v29 = 0;
        v29[1] = 0;
        v29[2] = (uint64_t)v32;
        *v31 = v29;
        if (*(_QWORD *)v98)
        {
          *(_QWORD *)&v98 = *(_QWORD *)v98;
          v29 = *v31;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v98 + 1), v29);
        v99 = (__int128 *)((char *)v99 + 1);
        *(_QWORD *)valuePtr = 0;
      }
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
      if (v30)
        CFRelease(v30);
      std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v95);
      v12 = (uint64_t **)*v12;
      if (!v12)
        goto LABEL_130;
    }
  }
  if ((int)a2 <= 1734504311)
  {
    if ((_DWORD)a2 == 3700)
    {
      v5 = 0;
      v9 = *((unsigned __int8 *)this + 376);
      goto LABEL_124;
    }
    if ((_DWORD)a2 == 1685283431)
    {
      v5 = 0;
      v9 = *((unsigned __int8 *)this + 896);
LABEL_124:
      *(_DWORD *)a5 = v9;
      return v5;
    }
    goto LABEL_125;
  }
  if ((_DWORD)a2 == 1734504312)
  {
    v33 = *((_QWORD *)this + 92);
    if (v33)
    {
      v98 = 0uLL;
      v99 = 0;
      v34 = *(_QWORD **)(v33 + 24);
      if (v34)
      {
        v35 = (const void *)*MEMORY[0x1E0C9AE50];
        v36 = (const void *)*MEMORY[0x1E0C9AE40];
        do
        {
          v95 = 0;
          v96 = 0;
          v94 = &v95;
          v37 = v34[2];
          v38 = (char *)(v37 + 32);
          if (*(char *)(v37 + 55) < 0)
            v38 = *(char **)v38;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v38);
          v39 = (uint64_t *)operator new(0x30uLL);
          *(_QWORD *)valuePtr = v39;
          *(_QWORD *)&valuePtr[8] = &v95;
          valuePtr[16] = 0;
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v39 + 4), "name");
          v40 = cf;
          if (cf)
            CFRetain(cf);
          v39[5] = (uint64_t)v40;
          valuePtr[16] = 1;
          v41 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v94, &v88, (CFTypeRef *)v39 + 4);
          if (!*v41)
          {
            v42 = (const void **)v88;
            *v39 = 0;
            v39[1] = 0;
            v39[2] = (uint64_t)v42;
            *v41 = v39;
            if (*v94)
            {
              v94 = (uint64_t **)*v94;
              v39 = *v41;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v39);
            ++v96;
            *(_QWORD *)valuePtr = 0;
          }
          std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
          if (cf)
            CFRelease(cf);
          v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34[2] + 216))(v34[2]);
          if (v43)
          {
            v44 = v43;
            *(_QWORD *)valuePtr = v35;
            std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>((uint64_t **)&v94, (const void **)valuePtr);
            if (v35)
              CFRelease(v35);
            cf = 0;
            v92 = 0;
            v93 = 0;
            (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v44 + 208))(&cf, v44);
            v89 = 0;
            v90 = 0;
            v88 = (const void ***)&v89;
            *(_DWORD *)valuePtr = (_DWORD)cf;
            v45 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
            v87 = v45;
            if (!v45)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            v46 = (uint64_t *)operator new(0x30uLL);
            *(_QWORD *)valuePtr = v46;
            *(_QWORD *)&valuePtr[8] = &v89;
            valuePtr[16] = 0;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v46 + 4), "componentType");
            CFRetain(v45);
            v46[5] = (uint64_t)v45;
            valuePtr[16] = 1;
            v47 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v88, &v97, (CFTypeRef *)v46 + 4);
            if (!*v47)
            {
              v48 = v97;
              *v46 = 0;
              v46[1] = 0;
              v46[2] = v48;
              *v47 = v46;
              if (*v88)
              {
                v88 = (const void ***)*v88;
                v46 = *v47;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v46);
              ++v90;
              *(_QWORD *)valuePtr = 0;
            }
            std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
            CFRelease(v45);
            *(_DWORD *)valuePtr = HIDWORD(cf);
            v49 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
            v87 = v49;
            if (!v49)
            {
              v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "Could not construct");
            }
            v50 = (uint64_t *)operator new(0x30uLL);
            *(_QWORD *)valuePtr = v50;
            *(_QWORD *)&valuePtr[8] = &v89;
            valuePtr[16] = 0;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v50 + 4), "componentSubType");
            CFRetain(v49);
            v50[5] = (uint64_t)v49;
            valuePtr[16] = 1;
            v51 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v88, &v97, (CFTypeRef *)v50 + 4);
            if (!*v51)
            {
              v52 = v97;
              *v50 = 0;
              v50[1] = 0;
              v50[2] = v52;
              *v51 = v50;
              if (*v88)
              {
                v88 = (const void ***)*v88;
                v50 = *v51;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v50);
              ++v90;
              *(_QWORD *)valuePtr = 0;
            }
            std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
            CFRelease(v49);
            *(_DWORD *)valuePtr = v92;
            v53 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
            v87 = v53;
            if (!v53)
            {
              v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v86, "Could not construct");
            }
            v54 = (uint64_t *)operator new(0x30uLL);
            *(_QWORD *)valuePtr = v54;
            *(_QWORD *)&valuePtr[8] = &v89;
            valuePtr[16] = 0;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v54 + 4), "componentManufacturer");
            CFRetain(v53);
            v54[5] = (uint64_t)v53;
            valuePtr[16] = 1;
            v55 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v88, &v97, (CFTypeRef *)v54 + 4);
            if (!*v55)
            {
              v56 = v97;
              *v54 = 0;
              v54[1] = 0;
              v54[2] = v56;
              *v55 = v54;
              if (*v88)
              {
                v88 = (const void ***)*v88;
                v54 = *v55;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v54);
              ++v90;
              *(_QWORD *)valuePtr = 0;
            }
            std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
            CFRelease(v53);
            applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&v87, (const void ***)&v88);
            v57 = (uint64_t *)operator new(0x30uLL);
            *(_QWORD *)valuePtr = v57;
            *(_QWORD *)&valuePtr[8] = &v95;
            valuePtr[16] = 0;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v57 + 4), "audioComponentDescription");
            v58 = v87;
            if (v87)
              CFRetain(v87);
            v57[5] = (uint64_t)v58;
            valuePtr[16] = 1;
            v59 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v94, &v97, (CFTypeRef *)v57 + 4);
            if (!*v59)
            {
              v60 = v97;
              *v57 = 0;
              v57[1] = 0;
              v57[2] = v60;
              *v59 = v57;
              if (*v94)
              {
                v94 = (uint64_t **)*v94;
                v57 = *v59;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v95, v57);
              ++v96;
              *(_QWORD *)valuePtr = 0;
            }
            std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
            if (v58)
              CFRelease(v58);
            std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v89);
          }
          else
          {
            *(_QWORD *)valuePtr = v36;
            std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>((uint64_t **)&v94, (const void **)valuePtr);
            if (v36)
              CFRelease(v36);
          }
          applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&v88, (const void ***)&v94);
          v61 = (_QWORD *)*((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1) >= (unint64_t)v99)
          {
            v62 = (_QWORD *)v98;
            v63 = (uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 3;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v65 = (uint64_t)v99 - v98;
            if ((uint64_t)((uint64_t)v99 - v98) >> 2 > v64)
              v64 = v65 >> 2;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v66 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            v102 = &v99;
            if (v66)
            {
              v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v66);
              v61 = (_QWORD *)*((_QWORD *)&v98 + 1);
              v62 = (_QWORD *)v98;
            }
            else
            {
              v67 = 0;
            }
            v68 = (const void ****)(v66 + 8 * v63);
            v69 = (__int128 *)(v66 + 8 * v67);
            v101 = v69;
            *v68 = v88;
            v70 = v68 + 1;
            v88 = 0;
            *(_QWORD *)&valuePtr[16] = v68 + 1;
            if (v61 == v62)
            {
              v72 = 0;
            }
            else
            {
              do
              {
                v71 = (const void ***)*--v61;
                *--v68 = v71;
                *v61 = 0;
              }
              while (v61 != v62);
              v70 = *(_QWORD **)&valuePtr[16];
              v69 = v101;
              v72 = (const void **)v88;
            }
            v73 = v98;
            *(_QWORD *)&v98 = v68;
            *((_QWORD *)&v98 + 1) = v70;
            *(_OWORD *)&valuePtr[8] = v73;
            v74 = v99;
            v99 = v69;
            v101 = v74;
            *(_QWORD *)valuePtr = v73;
            std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)valuePtr);
            *((_QWORD *)&v98 + 1) = v70;
            if (v72)
              CFRelease(v72);
          }
          else
          {
            **((_QWORD **)&v98 + 1) = v88;
            *((_QWORD *)&v98 + 1) = v61 + 1;
          }
          std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v95);
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      *a5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v98);
      *(_QWORD *)valuePtr = &v98;
      std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
      return 0;
    }
    return 4294956446;
  }
  if ((_DWORD)a2 != 1835758191)
    goto LABEL_125;
  v10 = (const __CFArray *)*((_QWORD *)this + 124);
  if (v10)
    CFRetain(*((CFTypeRef *)this + 124));
  v5 = 0;
  *a5 = v10;
  return v5;
}

void sub_1B62ED668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,int a26,__int16 a27,uint64_t a28,char a29,char a30,__int128 buf,int a32,__int16 a33,__int16 a34,int *a35)
{
  uint64_t v35;
  unsigned int v36;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  int *v43;
  void *v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  uint32_t v48;
  NSObject *v49;
  BOOL v50;
  uint64_t v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *p_buf;

  if (!a2)
    _Unwind_Resume(exception_object);
  v38 = __cxa_begin_catch(exception_object);
  v39 = (_QWORD *)(v35 + 632);
  if (a2 == 2)
  {
    v40 = (uint64_t)v38;
    if (*(_BYTE *)(v35 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v41 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v42 = (_QWORD *)(v35 + 632);
        if (*(char *)(v35 + 655) < 0)
          v42 = (_QWORD *)*v39;
        if (a28 >= 0)
          v43 = &a24;
        else
          v43 = *(int **)&a24;
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = v42;
        WORD6(buf) = 2048;
        *(_QWORD *)((char *)&buf + 14) = v35;
        a34 = 2080;
        a35 = v43;
        _os_log_error_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", (uint8_t *)&buf, 0x20u);
        if ((SHIBYTE(a28) & 0x80000000) == 0)
          goto LABEL_46;
        v44 = *(void **)&a24;
        goto LABEL_45;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v49 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (a34 >= 0)
          p_buf = &buf;
        else
          p_buf = (__int128 *)buf;
        a24 = 134218242;
        *(_QWORD *)(&a24 + 1) = v35;
        a27 = 2080;
        *(_QWORD *)((char *)&a26 + 6) = p_buf;
        _os_log_error_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", (uint8_t *)&a24, 0x16u);
        if ((SHIBYTE(a34) & 0x80000000) == 0)
          goto LABEL_46;
        v44 = (void *)buf;
LABEL_45:
        operator delete(v44);
LABEL_46:
        v50 = getAUDSPGraphLog(void)::onceToken == -1;
LABEL_25:
        if (*(_BYTE *)(v35 + 656))
        {
          if (!v50)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v51 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(v35 + 655) < 0)
              v39 = (_QWORD *)*v39;
            CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
            LODWORD(buf) = 136315650;
            *(_QWORD *)((char *)&buf + 4) = v39;
            WORD6(buf) = 2048;
            *(_QWORD *)((char *)&buf + 14) = v35;
            a34 = 2080;
            a35 = &a24;
            v52 = "[%s|%p] DSPGraph exception while getting property %s";
            v53 = v51;
            v54 = 32;
            goto LABEL_50;
          }
        }
        else
        {
          if (!v50)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v56 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
            LODWORD(buf) = 134218242;
            *(_QWORD *)((char *)&buf + 4) = v35;
            WORD6(buf) = 2080;
            *(_QWORD *)((char *)&buf + 14) = &a24;
            v52 = "[%p] DSPGraph exception while getting property %s";
            v53 = v56;
            v54 = 22;
LABEL_50:
            _os_log_error_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, v52, (uint8_t *)&buf, v54);
          }
        }
        __cxa_end_catch();
        JUMPOUT(0x1B62ED420);
      }
    }
    v50 = 1;
    goto LABEL_25;
  }
  if (*(_BYTE *)(v35 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v45 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v35 + 655) < 0)
        v39 = (_QWORD *)*v39;
      CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = v39;
      WORD6(buf) = 2048;
      *(_QWORD *)((char *)&buf + 14) = v35;
      a34 = 2080;
      a35 = &a24;
      v46 = "[%s|%p] unknown exception while getting property %s";
      v47 = v45;
      v48 = 32;
      goto LABEL_48;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v55 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
      LODWORD(buf) = 134218242;
      *(_QWORD *)((char *)&buf + 4) = v35;
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = &a24;
      v46 = "[%p] unknown exception while getting property %s";
      v47 = v55;
      v48 = 22;
LABEL_48:
      _os_log_error_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, v46, (uint8_t *)&buf, v48);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B62EC940);
}

uint64_t AUDSPGraph::SetProperty(AUDSPGraph *this, uint64_t a2, int a3, int a4, CFTypeRef *a5, uint64_t a6)
{
  uint64_t v6;
  const __CFDictionary **v12;
  uint64_t v13;
  _BOOL8 *v14;
  const __CFDictionary **v15;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  std::string *p_s1;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  std::mutex *v23;
  uint64_t v24;
  DSPGraph::Graph *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  std::string *v29;
  void *v30;
  CFTypeRef v31;
  __CFArray *v32;
  CFMutableArrayRef v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  std::string::size_type v38;
  char *v39;
  const __CFString **v40;
  int v41;
  void *v42;
  _BYTE *v43;
  size_t v44;
  uint64_t v45;
  char *v46;
  const __CFDictionary **v47;
  const __CFString **v48;
  const __CFDictionary **v49;
  uint64_t v50;
  const __CFDictionary **v51;
  uint64_t v52;
  const void **v53;
  _QWORD *i;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  std::string::size_type size;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  std::string *v62;
  uint64_t v63;
  const __CFString **v64;
  char *v65;
  const __CFString **v66;
  int v67;
  void *v68;
  _BYTE *v69;
  size_t v70;
  uint64_t v71;
  char *v72;
  _BYTE *v73;
  unsigned __int8 v74;
  int v75;
  char *v76;
  uint64_t v77;
  _OWORD *v78;
  _QWORD *v79;
  _BYTE *v80;
  BOOL v81;
  uint64_t v82;
  std::string *v83;
  DSPGraph::Graph *v84;
  uint64_t v85;
  _QWORD *v86;
  const char *v87;
  NSObject *v88;
  uint32_t v89;
  uint64_t v90;
  DSPGraph::Graph *v91;
  __CFArray *v92;
  CFMutableArrayRef Mutable;
  uint64_t v94;
  uint64_t v95;
  __CFArray *v96;
  CFMutableArrayRef v97;
  uint64_t v98;
  uint64_t v99;
  void **p_p;
  uint64_t v101;
  _QWORD *v102;
  const char *v103;
  NSObject *v104;
  uint32_t v105;
  uint64_t v106;
  NSObject *v107;
  _BYTE *v108;
  const __CFDictionary **v109;
  const void **v110;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  const __CFString **v114;
  uint64_t v115;
  std::string *v116;
  void *__p;
  void *v118;
  const void *v119;
  const void *v120;
  void *value;
  CFTypeRef cf[2];
  _BYTE buf[38];
  std::string __s1;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if ((int)a2 <= 1735554167)
  {
    if ((int)a2 > 1667788396)
    {
      if ((int)a2 > 1685287014)
      {
        if ((_DWORD)a2 != 1685287015)
        {
          if ((_DWORD)a2 != 1735287149)
          {
            if ((_DWORD)a2 == 1735553138)
            {
              v6 = 4294956445;
              if (!a5 || (_DWORD)a6 != 8)
                return v6;
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&__p, *a5);
              if (!*((_QWORD *)this + 92))
              {
                v92 = (__CFArray *)*((_QWORD *)this + 131);
                if (!v92)
                {
                  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                  v94 = *((_QWORD *)this + 131);
                  *((_QWORD *)this + 131) = Mutable;
                  *(_QWORD *)buf = v94;
                  applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
                  applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 131));
                  v95 = *((_QWORD *)this + 103);
                  *((_QWORD *)this + 103) = *(_QWORD *)buf;
                  *(_QWORD *)buf = v95;
                  applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
                  v92 = (__CFArray *)*((_QWORD *)this + 131);
                }
                CFArrayAppendValue(v92, __p);
                goto LABEL_283;
              }
              v12 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
              v13 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*v12);
              if (!DSPGraph::Graph::hasProperty(*((DSPGraph::Graph **)this + 92)))
              {
                if (*((_BYTE *)this + 656))
                {
                  if (getAUDSPGraphLog(void)::onceToken != -1)
                    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                  v101 = getAUDSPGraphLog(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                    goto LABEL_283;
                  v102 = (_QWORD *)((char *)this + 632);
                  if (*((char *)this + 655) < 0)
                    v102 = (_QWORD *)*v102;
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = v102;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v13;
                  v103 = "[%s|%p] skipping setting graph property %d.";
                  v104 = v101;
                  v105 = 28;
                }
                else
                {
                  if (getAUDSPGraphLog(void)::onceToken != -1)
                    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                  v111 = getAUDSPGraphLog(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                    goto LABEL_283;
                  *(_DWORD *)buf = 134218240;
                  *(_QWORD *)&buf[4] = this;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v13;
                  v103 = "[%p] skipping setting graph property %d.";
                  v104 = v111;
                  v105 = 18;
                }
                _os_log_debug_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_DEBUG, v103, buf, v105);
LABEL_283:
                v6 = 0;
                p_p = &__p;
LABEL_284:
                applesauce::CF::DictionaryRef::~DictionaryRef((const void **)p_p);
                return v6;
              }
              v14 = applesauce::CF::DictionaryRef::operator->(&__p);
              if (!applesauce::CF::details::has_key<char const(&)[9]>(*v14, "cfobject"))
              {
                v109 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
                applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>(*v109, "data", (applesauce::CF::DataRef *)&__s1);
                v110 = (const void **)applesauce::CF::DataRef::operator->(&__s1);
                applesauce::CF::convert_to<std::vector<unsigned char>,0>(*v110, buf);
                (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 92) + 56))(*((_QWORD *)this + 92), v13, (*(_DWORD *)&buf[8] - *(_DWORD *)buf));
                if (*(_QWORD *)buf)
                {
                  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                  operator delete(*(void **)buf);
                }
                applesauce::CF::DataRef::~DataRef((const void **)&__s1.__r_.__value_.__l.__data_);
                goto LABEL_283;
              }
              cf[0] = 0;
              v15 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
              applesauce::CF::details::find_at_key<applesauce::CF::TypeRef,char const(&)[9]>(buf, *v15);
              v16 = *(const void **)buf;
              applesauce::CF::TypeRef::~TypeRef((const void **)buf);
              cf[0] = v16;
              if (*((_BYTE *)this + 656))
              {
                if (getAUDSPGraphLog(void)::onceToken != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v17 = getAUDSPGraphLog(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                  goto LABEL_282;
                v18 = (_QWORD *)((char *)this + 632);
                if (*((char *)this + 655) < 0)
                  v18 = (_QWORD *)*v18;
                applesauce::CF::details::pretty_print((applesauce::CF::details *)&__s1, (__CFString *)cf[0]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_s1 = &__s1;
                else
                  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = v18;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = this;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v13;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = p_s1;
                v20 = "[%s|%p] setting graph property %d with CF object: %s";
                v21 = v17;
                v22 = 38;
              }
              else
              {
                if (getAUDSPGraphLog(void)::onceToken != -1)
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
                v115 = getAUDSPGraphLog(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                  goto LABEL_282;
                applesauce::CF::details::pretty_print((applesauce::CF::details *)&__s1, (__CFString *)cf[0]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v116 = &__s1;
                else
                  v116 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 134218498;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v13;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v116;
                v20 = "[%p] setting graph property %d with CF object: %s";
                v21 = v115;
                v22 = 28;
              }
              _os_log_debug_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_282:
              (*(void (**)(_QWORD, uint64_t, uint64_t, CFTypeRef *))(**((_QWORD **)this + 92) + 56))(*((_QWORD *)this + 92), v13, 8, cf);
              goto LABEL_283;
            }
            goto LABEL_187;
          }
          v6 = 4294956445;
          if (!a5 || (_DWORD)a6 != 8)
            return v6;
          if (!*((_BYTE *)this + 17))
          {
            applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
            v64 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
            applesauce::CF::convert_to<std::string,0>(*v64, (uint64_t)buf);
            v65 = (char *)this + 632;
LABEL_274:
            std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)v65, (__int128 *)buf);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v83 = &__s1;
LABEL_277:
            applesauce::CF::StringRef::~StringRef((const void **)&v83->__r_.__value_.__l.__data_);
            return 0;
          }
          return 4294956447;
        }
        v6 = 4294956445;
        if (!a5 || (_DWORD)a6 != 8)
          return v6;
        if (*((_BYTE *)this + 17))
          return 4294956447;
        applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
        v39 = (char *)this + 568;
        if (*((_BYTE *)this + 592))
        {
          v66 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
          applesauce::CF::convert_to<std::string,0>(*v66, (uint64_t)buf);
          v67 = buf[23];
          v68 = *(void **)buf;
          if (buf[23] >= 0)
            v69 = buf;
          else
            v69 = *(_BYTE **)buf;
          if (buf[23] >= 0)
            v70 = buf[23];
          else
            v70 = *(_QWORD *)&buf[8];
          if (!*((_BYTE *)this + 592))
            std::__throw_bad_optional_access[abi:ne180100]();
          if (*((char *)this + 591) < 0)
          {
            v72 = (char *)*((_QWORD *)this + 71);
            v71 = *((_QWORD *)this + 72);
          }
          else
          {
            v71 = *((unsigned __int8 *)this + 591);
            v72 = (char *)this + 568;
          }
          v113 = v70 == v71 && memcmp(v69, v72, v70) == 0;
          if (v67 < 0)
            operator delete(v68);
          if (!v113)
          {
            if (_os_feature_enabled_impl() && *((_QWORD *)this + 92))
              AUDSPGraph::ResetCachedProps(this);
            std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 92);
          }
        }
LABEL_273:
        v114 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
        applesauce::CF::convert_to<std::string,0>(*v114, (uint64_t)buf);
        v65 = v39;
        goto LABEL_274;
      }
      if ((_DWORD)a2 == 1667788397)
      {
        v6 = 4294956445;
        if (!a5 || (_DWORD)a6 != 8)
          return v6;
        if (!*((_BYTE *)this + 17))
        {
          CACFDictionary::operator=((uint64_t)this + 688, *a5);
          return 0;
        }
        return 4294956447;
      }
      if ((_DWORD)a2 == 1685283431)
      {
        if ((_DWORD)a6 == 4)
        {
          v6 = 0;
          *((_BYTE *)this + 896) = *(_DWORD *)a5 != 0;
          return v6;
        }
        return 4294956445;
      }
LABEL_187:
      if (a4)
        return 4294956417;
      v84 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
      if (!v84 || !DSPGraph::Graph::hasProperty(v84))
        return 4294956417;
      (*(void (**)(_QWORD, uint64_t, uint64_t, CFTypeRef *))(**((_QWORD **)this + 92) + 56))(*((_QWORD *)this + 92), a2, a6, a5);
      return 0;
    }
    if ((int)a2 <= 1652060273)
    {
      if ((_DWORD)a2 != 3700)
      {
        if ((_DWORD)a2 != 1635087216)
          goto LABEL_187;
        v6 = 4294956445;
        if (!a5 || (_DWORD)a6 != 8)
          return v6;
        v23 = (std::mutex *)((char *)this + 928);
        std::mutex::lock((std::mutex *)((char *)this + 928));
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        v24 = *((_QWORD *)this + 83);
        *((_QWORD *)this + 83) = *(_QWORD *)buf;
        *(_QWORD *)buf = v24;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
        if (_os_feature_enabled_impl())
          applesauce::CF::DictionaryRef::operator=((const void **)this + 134, *((CFTypeRef *)this + 83));
        v25 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
        if (v25)
        {
          v6 = DSPGraph::Graph::setAUStrip(v25, *((const __CFDictionary **)this + 83));
LABEL_206:
          std::mutex::unlock(v23);
          return v6;
        }
LABEL_205:
        v6 = 0;
        goto LABEL_206;
      }
      if ((_DWORD)a6 == 4)
      {
        if (!*((_BYTE *)this + 17))
        {
          v6 = 0;
          *((_BYTE *)this + 376) = *(_DWORD *)a5 != 0;
          return v6;
        }
        return 4294956447;
      }
      return 4294956445;
    }
    if ((_DWORD)a2 != 1652060274)
    {
      if ((_DWORD)a2 == 1652060275)
      {
        v6 = 4294956445;
        if (!a5 || (_DWORD)a6 != 8)
          return v6;
        v31 = *a5;
        v32 = (__CFArray *)*((_QWORD *)this + 133);
        if (!v32)
        {
          v33 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          v34 = *((_QWORD *)this + 133);
          *((_QWORD *)this + 133) = v33;
          *(_QWORD *)buf = v34;
          applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
          applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 133));
          v35 = *((_QWORD *)this + 105);
          *((_QWORD *)this + 105) = *(_QWORD *)buf;
          *(_QWORD *)buf = v35;
          applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
          v32 = (__CFArray *)*((_QWORD *)this + 133);
        }
        CFArrayAppendValue(v32, v31);
        if (*((_QWORD *)this + 92))
          return AUDSPGraph::SetBoxPreset(this, v31);
        return 0;
      }
      goto LABEL_187;
    }
    v6 = 4294956445;
    if (!a5 || (_DWORD)a6 != 8)
      return v6;
    applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&value, *a5);
    v47 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>((applesauce::CF::StringRef *)&v120, *v47);
    v48 = (const __CFString **)applesauce::CF::StringRef::operator->(&v120);
    applesauce::CF::convert_to<std::string,0>(*v48, (uint64_t)&__s1);
    v49 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    v50 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*v49);
    v51 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>(*v51, "data", (applesauce::CF::DataRef *)&v119);
    v52 = *((_QWORD *)this + 92);
    if (v52)
    {
      v53 = (const void **)applesauce::CF::DataRef::operator->(&v119);
      applesauce::CF::convert_to<std::vector<unsigned char>,0>(*v53, &__p);
      for (i = *(_QWORD **)(v52 + 24); i; i = (_QWORD *)*i)
      {
        v55 = i[2];
        v56 = (char *)(v55 + 32);
        if (*(char *)(v55 + 55) < 0)
          v56 = *(char **)v56;
        std::string::basic_string[abi:ne180100]<0>(buf, v56);
        v57 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v59 = buf[23];
        v60 = buf[23];
        if (buf[23] < 0)
          v59 = *(_QWORD *)&buf[8];
        if (size != v59)
          goto LABEL_123;
        if (buf[23] >= 0)
          v61 = buf;
        else
          v61 = *(unsigned __int8 **)buf;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, v61, __s1.__r_.__value_.__l.__size_))
            goto LABEL_123;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v62 = &__s1;
          while (v62->__r_.__value_.__s.__data_[0] == *v61)
          {
            v62 = (std::string *)((char *)v62 + 1);
            ++v61;
            if (!--v57)
              goto LABEL_125;
          }
LABEL_123:
          if (v60 < 0)
            operator delete(*(void **)buf);
          continue;
        }
LABEL_125:
        v63 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)i[2] + 216))(i[2], v61);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (v63)
          (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)i[2] + 312))(i[2], v50, 0, 0, ((_DWORD)v118 - (_DWORD)__p));
      }
      if (__p)
      {
        v118 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v96 = (__CFArray *)*((_QWORD *)this + 132);
      if (!v96)
      {
        v97 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v98 = *((_QWORD *)this + 132);
        *((_QWORD *)this + 132) = v97;
        *(_QWORD *)buf = v98;
        applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
        applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 132));
        v99 = *((_QWORD *)this + 104);
        *((_QWORD *)this + 104) = *(_QWORD *)buf;
        *(_QWORD *)buf = v99;
        applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
        v96 = (__CFArray *)*((_QWORD *)this + 132);
      }
      CFArrayAppendValue(v96, value);
    }
    v6 = 0;
    applesauce::CF::DataRef::~DataRef(&v119);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    applesauce::CF::StringRef::~StringRef(&v120);
    p_p = &value;
    goto LABEL_284;
  }
  if ((int)a2 > 1886548591)
  {
    if ((int)a2 <= 1886548852)
    {
      if ((_DWORD)a2 == 1886548592)
      {
        v6 = 4294956445;
        if (!a5 || (_DWORD)a6 != 8)
          return v6;
        applesauce::CF::StringRef::from_get_noexcept(*a5, buf);
        v82 = *((_QWORD *)this + 85);
        *((_QWORD *)this + 85) = *(_QWORD *)buf;
        *(_QWORD *)buf = v82;
        v83 = (std::string *)buf;
        goto LABEL_277;
      }
      if ((_DWORD)a2 != 1886548848)
        goto LABEL_187;
      v6 = 4294956445;
      if (!a5 || (_DWORD)a6 != 8)
        return v6;
      v23 = (std::mutex *)((char *)this + 928);
      std::mutex::lock((std::mutex *)((char *)this + 928));
      if (*((_QWORD *)this + 127))
      {
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        AUDSPGraph::SubstitutePropertyStripPath((AUDSPGraph *)&__s1, this, (const __CFDictionary **)buf);
        v38 = *((_QWORD *)this + 84);
        *((_QWORD *)this + 84) = __s1.__r_.__value_.__r.__words[0];
        __s1.__r_.__value_.__r.__words[0] = v38;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&__s1.__r_.__value_.__l.__data_);
      }
      else
      {
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        v90 = *((_QWORD *)this + 84);
        *((_QWORD *)this + 84) = *(_QWORD *)buf;
        *(_QWORD *)buf = v90;
      }
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
      if (_os_feature_enabled_impl())
        applesauce::CF::DictionaryRef::operator=((const void **)this + 135, *((CFTypeRef *)this + 84));
      v91 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
      if (v91)
        DSPGraph::Graph::setPropertyStrip(v91, *((const __CFDictionary **)this + 84), *((const __CFString **)this + 85));
      goto LABEL_205;
    }
    if ((_DWORD)a2 != 1886548853)
    {
      if ((_DWORD)a2 == 1919247202)
      {
        if (*((_BYTE *)this + 17))
          return 4294956447;
        if ((_DWORD)a6 == 4)
        {
          v6 = 0;
          *((_BYTE *)this + 528) = *(_DWORD *)a5 != 0;
          return v6;
        }
      }
      else
      {
        if ((_DWORD)a2 != 1920169063)
          goto LABEL_187;
        if ((_DWORD)a6 == 4)
        {
          v6 = 0;
          *((_BYTE *)this + 897) = *(_DWORD *)a5 != 0;
          return v6;
        }
      }
      return 4294956445;
    }
    v6 = 4294956445;
    if (!a5 || (_DWORD)a6 != 8)
      return v6;
    applesauce::CF::convert_to<std::map<std::string,std::string>,0>((uint64_t)buf, *a5);
    if (!*(_QWORD *)&buf[16])
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 126));
      *((_QWORD *)this + 125) = (char *)this + 1008;
      *((_QWORD *)this + 127) = 0;
      *((_QWORD *)this + 126) = 0;
    }
    v73 = *(_BYTE **)buf;
    if (*(_BYTE **)buf != &buf[8])
    {
      do
      {
        if ((v74 & 1) == 0
        {
        }
        memset(&__s1, 0, sizeof(__s1));
        v75 = (char)v73[55];
        if (v75 >= 0)
          v76 = v73 + 32;
        else
          v76 = (char *)*((_QWORD *)v73 + 4);
        if (v75 >= 0)
          v77 = v73[55];
        else
          v77 = *((_QWORD *)v73 + 5);
        __p = &__s1;
        v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 125, (void **)&__s1.__r_.__value_.__l.__data_, (_OWORD **)&__p);
        std::string::operator=((std::string *)((char *)v78 + 56), (const std::string *)(v73 + 56));
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        v79 = (_QWORD *)*((_QWORD *)v73 + 1);
        if (v79)
        {
          do
          {
            v80 = v79;
            v79 = (_QWORD *)*v79;
          }
          while (v79);
        }
        else
        {
          do
          {
            v80 = (_BYTE *)*((_QWORD *)v73 + 2);
            v81 = *(_QWORD *)v80 == (_QWORD)v73;
            v73 = v80;
          }
          while (!v81);
        }
        v73 = v80;
      }
      while (v80 != &buf[8]);
    }
    if (*((_QWORD *)this + 84))
    {
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v85 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_INFO))
          goto LABEL_228;
        v86 = (_QWORD *)((char *)this + 632);
        if (*((char *)this + 655) < 0)
          v86 = (_QWORD *)*v86;
        LODWORD(__s1.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)v86;
        WORD2(__s1.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)this;
        v87 = "[%s|%p] A propstrip has already been set on the graph. Propstrip path substitution will not apply until th"
              "e next kAUDSPGraphProperty_PropertyStrip property set.";
        v88 = v85;
        v89 = 22;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v106 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_INFO))
          goto LABEL_228;
        LODWORD(__s1.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
        v87 = "[%p] A propstrip has already been set on the graph. Propstrip path substitution will not apply until the n"
              "ext kAUDSPGraphProperty_PropertyStrip property set.";
        v88 = v106;
        v89 = 12;
      }
      _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_INFO, v87, (uint8_t *)&__s1, v89);
    }
LABEL_228:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
    return 0;
  }
  if ((int)a2 <= 1836347500)
  {
    if ((_DWORD)a2 == 1735554168)
    {
      v6 = 4294956445;
      if (!a5 || (_DWORD)a6 != 8)
        return v6;
      if (*((_BYTE *)this + 17))
        return 4294956447;
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
      v39 = (char *)this + 600;
      if (*((_BYTE *)this + 624))
      {
        v40 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
        applesauce::CF::convert_to<std::string,0>(*v40, (uint64_t)buf);
        v41 = buf[23];
        v42 = *(void **)buf;
        if (buf[23] >= 0)
          v43 = buf;
        else
          v43 = *(_BYTE **)buf;
        if (buf[23] >= 0)
          v44 = buf[23];
        else
          v44 = *(_QWORD *)&buf[8];
        if (!*((_BYTE *)this + 624))
          std::__throw_bad_optional_access[abi:ne180100]();
        if (*((char *)this + 623) < 0)
        {
          v46 = (char *)*((_QWORD *)this + 75);
          v45 = *((_QWORD *)this + 76);
        }
        else
        {
          v45 = *((unsigned __int8 *)this + 623);
          v46 = (char *)this + 600;
        }
        v112 = v44 == v45 && memcmp(v43, v46, v44) == 0;
        if (v41 < 0)
          operator delete(v42);
        if (!v112)
        {
          if (_os_feature_enabled_impl() && *((_QWORD *)this + 92))
            AUDSPGraph::ResetCachedProps(this);
          std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 92);
        }
      }
      goto LABEL_273;
    }
    if ((_DWORD)a2 != 1835758191)
      goto LABEL_187;
    v6 = 4294956445;
    if (!a5 || (_DWORD)a6 != 8 || !_os_feature_enabled_impl())
      return v6;
    applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
    v26 = *((_QWORD *)this + 124);
    *((_QWORD *)this + 124) = *(_QWORD *)buf;
    *(_QWORD *)buf = v26;
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
    *((_BYTE *)this + 898) = 1;
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v27 = getAUDSPGraphLog(void)::gLog;
      v6 = 0;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        return v6;
      v28 = (_QWORD *)((char *)this + 632);
      if (*((char *)this + 655) < 0)
        v28 = (_QWORD *)*v28;
      applesauce::CF::DictionaryRef::to_description((applesauce::CF::DictionaryRef *)&__s1, *((const void **)this + 124));
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__s1;
      else
        v29 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v29;
      _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEFAULT, "[%s|%p] custom macros set: %s", buf, 0x20u);
      if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v30 = (void *)__s1.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v107 = getAUDSPGraphLog(void)::gLog;
      v6 = 0;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        return v6;
      applesauce::CF::DictionaryRef::to_description((applesauce::CF::DictionaryRef *)buf, *((const void **)this + 124));
      if (buf[23] >= 0)
        v108 = buf;
      else
        v108 = *(_BYTE **)buf;
      LODWORD(__s1.__r_.__value_.__l.__data_) = 134218242;
      *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
      WORD2(__s1.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v108;
      _os_log_impl(&dword_1B5ED0000, v107, OS_LOG_TYPE_DEFAULT, "[%p] custom macros set: %s", (uint8_t *)&__s1, 0x16u);
      if ((buf[23] & 0x80000000) == 0)
        return 0;
      v30 = *(void **)buf;
    }
    operator delete(v30);
    return 0;
  }
  if ((_DWORD)a2 != 1836347501)
  {
    if ((_DWORD)a2 != 1852797026)
      goto LABEL_187;
    if ((_DWORD)a6 != 4)
      return 4294956445;
    v36 = *(_DWORD *)a5;
    *((_BYTE *)this + 900) = *(_DWORD *)a5 != 0;
    if (!*((_QWORD *)this + 92) || !*((_BYTE *)this + 17))
      return 0;
    v37 = *((_QWORD *)this + 70);
    if (v36 || v37)
    {
      v6 = 0;
      if (!v36 || !v37)
        return v6;
      *((_QWORD *)this + 70) = 0;
    }
    else
    {
      std::make_unique[abi:ne180100]<AUProcessingBlock_DSPGraph,std::shared_ptr<DSPGraph::Graph> &>((uint64_t *)buf, (uint64_t)this + 736);
      v37 = *((_QWORD *)this + 70);
      *((_QWORD *)this + 70) = *(_QWORD *)buf;
      if (!v37)
        return 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    return 0;
  }
  v6 = 4294956445;
  if (!a5 || (_DWORD)a6 != 8)
    return v6;
  if (*((_BYTE *)this + 17))
    return 4294956447;
  return AU::DSPGraph::MetaParameterManager::loadMetaParametersFromPlist((AUDSPGraph *)((char *)this + 904), (const __CFDictionary *)*a5);
}

uint64_t AUDSPGraph::GetParameter(AUDSPGraph *this, int a2, int a3, int a4, float *a5)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  if (a3)
    return 4294956430;
  if (a4)
    return 4294956419;
  v7 = *((_QWORD *)this + 92);
  if (!v7)
    return 4294956429;
  v9 = (_DWORD *)*((_QWORD *)this + 113);
  v10 = (_DWORD *)*((_QWORD *)this + 114);
  while (1)
  {
    if (v9 == v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      goto LABEL_13;
    }
    if (*v9 == a2)
      break;
    v9 += 12;
  }
  v11 = v9[1];
LABEL_13:
  result = 0;
  *(_DWORD *)a5 = v11;
  return result;
}

void sub_1B62EFA9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B62EFA90);
}

uint64_t AUDSPGraph::SetParameter(AUDSPGraph *this, unsigned int a2, int a3, int a4, __n128 a5)
{
  float v6;
  unsigned int *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  ausdk::AUElement *Element;

  if (a3)
    return 4294956430;
  if (a4)
    return 4294956419;
  v6 = a5.n128_f32[0];
  if (*((_QWORD *)this + 92))
  {
    AUDSPGraph::SetGraphParameter((uint64_t)this, a2, a5);
  }
  else
  {
    v9 = (unsigned int *)*((_QWORD *)this + 101);
    v10 = *((_QWORD *)this + 102);
    if ((unint64_t)v9 >= v10)
    {
      v12 = *((_QWORD *)this + 100);
      v13 = ((uint64_t)v9 - v12) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v15 = v10 - v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v16);
      v18 = (unsigned int *)&v17[8 * v13];
      v20 = &v17[8 * v19];
      *v18 = a2;
      *((float *)v18 + 1) = v6;
      v11 = (uint64_t *)(v18 + 2);
      v21 = (char *)*((_QWORD *)this + 101);
      v22 = (char *)*((_QWORD *)this + 100);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v18 - 1) = v23;
          v18 -= 2;
        }
        while (v21 != v22);
        v21 = (char *)*((_QWORD *)this + 100);
      }
      *((_QWORD *)this + 100) = v18;
      *((_QWORD *)this + 101) = v11;
      *((_QWORD *)this + 102) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v9 = a2;
      v9[1] = a5.n128_u32[0];
      v11 = (uint64_t *)(v9 + 2);
    }
    *((_QWORD *)this + 101) = v11;
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((_QWORD *)this + 128, *((uint64_t **)this + 100), v11, ((uint64_t)v11 - *((_QWORD *)this + 100)) >> 3);
  }
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, v6, 0);
  return 0;
}

void sub_1B62EFC1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B62EFC00);
}

uint64_t AUDSPGraph::CanScheduleParameters(AUDSPGraph *this)
{
  return 0;
}

uint64_t AUDSPGraph::ProcessMultipleBufferLists(DSPGraph::Graph **this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  DSPGraph::Graph *v12;
  unint64_t v13;
  uint64_t v14;
  AUDSPGraph *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  DSPGraph::Graph *v21;
  unint64_t v22;
  NSObject *v23;
  AUDSPGraph *v24;
  int v25;
  unsigned int v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t Element;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  AUDSPGraph *v38;
  NSObject *v39;
  const char *v40;
  uint32_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  int16x8_t v45;
  AUDSPGraph *v46;
  void **v47;
  NSObject *v48;
  int16x8_t v49;
  uint64_t v50;
  NSObject *v51;
  int16x8_t v52;
  AUDSPGraph *v53;
  void **v54;
  NSObject *v55;
  int16x8_t v56;
  uint64_t v57;
  uint64_t v58;
  AUDSPGraph *v59;
  NSObject *v60;
  const char *v61;
  uint32_t v62;
  uint64_t v63;
  void **v64;
  void **v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  AUDSPGraph *v77;
  NSObject *v78;
  const char *v79;
  uint32_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  int16x8_t v84;
  AUDSPGraph *v85;
  void **v86;
  NSObject *v87;
  int16x8_t v88;
  uint64_t v89;
  NSObject *v90;
  int16x8_t v91;
  AUDSPGraph *v92;
  void **v93;
  NSObject *v94;
  int16x8_t v95;
  uint64_t v96;
  uint64_t v97;
  AUDSPGraph *v98;
  NSObject *v99;
  const char *v100;
  uint32_t v101;
  uint64_t v102;
  void **v103;
  void **v104;
  DSPGraph::Graph *v105;
  unint64_t v106;
  DSPGraph::Graph *v107;
  unint64_t v108;
  uint64_t v110;
  AUDSPGraph *v111;
  const char *v112;
  NSObject *v113;
  uint32_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  AudioBufferList *v118;
  UInt32 v119;
  void **p_mData;
  unsigned int v121;
  uint64_t v122;
  DSPGraph::Graph *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  DSPGraph::Graph *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  DSPGraph::Graph *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  DSPGraph::Graph *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  int v157;
  int v158;
  const char *v159;
  _QWORD *v160;
  const char *v161;
  _QWORD *v162;
  unsigned int v163;
  AUDSPGraph **v164;
  AUDSPGraph **v165;
  AudioStreamBasicDescription v167;
  void *__p[2];
  char v169;
  __int128 v170;
  _BYTE v171[24];
  uint8_t buf[4];
  AUDSPGraph *v173;
  __int16 v174;
  _BYTE v175[10];
  _BYTE v176[18];
  unsigned int v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  if (!this[92])
  {
    if (*((_BYTE *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v14 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956433;
      v15 = (AUDSPGraph *)(this + 79);
      if (*((char *)this + 655) < 0)
        v15 = *(AUDSPGraph **)v15;
      *(_DWORD *)buf = 136315394;
      v173 = v15;
      v174 = 2048;
      *(_QWORD *)v175 = this;
      v16 = "[%s|%p] failed to process because DSPGraph is null";
      v17 = v14;
      v18 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v19 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956433;
      *(_DWORD *)buf = 134217984;
      v173 = (AUDSPGraph *)this;
      v16 = "[%p] failed to process because DSPGraph is null";
      v17 = v19;
      v18 = 12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294956433;
  }
  if (!*((_BYTE *)this + 899))
  {
    v12 = this[15];
    if (v12)
      LODWORD(v13) = (*(uint64_t (**)(DSPGraph::Graph *))(*(_QWORD *)v12 + 24))(v12);
    else
      v13 = (unint64_t)(this[13] - this[12]) >> 3;
    v21 = this[21];
    if (v21)
      LODWORD(v22) = (*(uint64_t (**)(DSPGraph::Graph *))(*(_QWORD *)v21 + 24))(v21);
    else
      v22 = (unint64_t)(this[19] - this[18]) >> 3;
    v163 = a6;
    if (DSPGraph::Graph::numInputs(this[92]) != (_DWORD)v13
      || DSPGraph::Graph::numOutputs(this[92]) != (_DWORD)v22)
    {
      if (*((_BYTE *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v23 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v24 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v24 = *(AUDSPGraph **)v24;
          v25 = DSPGraph::Graph::numInputs(this[92]);
          v26 = DSPGraph::Graph::numOutputs(this[92]);
          *(_DWORD *)buf = 136316418;
          v173 = v24;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)v176 = v13;
          *(_WORD *)&v176[4] = 1024;
          *(_DWORD *)&v176[6] = v22;
          *(_WORD *)&v176[10] = 1024;
          *(_DWORD *)&v176[12] = v25;
          *(_WORD *)&v176[16] = 1024;
          v177 = v26;
          _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match", buf, 0x2Eu);
          a6 = v163;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v27 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v157 = DSPGraph::Graph::numInputs(this[92]);
          v158 = DSPGraph::Graph::numOutputs(this[92]);
          *(_DWORD *)buf = 134219008;
          v173 = (AUDSPGraph *)this;
          v174 = 1024;
          *(_DWORD *)v175 = v13;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v22;
          *(_WORD *)v176 = 1024;
          *(_DWORD *)&v176[2] = v157;
          *(_WORD *)&v176[6] = 1024;
          *(_DWORD *)&v176[8] = v158;
          _os_log_error_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match", buf, 0x24u);
        }
      }
    }
    v28 = DSPGraph::Graph::numInputs(this[92]);
    if (v13 >= v28)
      LODWORD(v13) = v28;
    if ((_DWORD)v13)
    {
      v29 = 0;
      v164 = this + 79;
      do
      {
        Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), v29);
        v31 = *(_OWORD *)(Element + 96);
        v170 = *(_OWORD *)(Element + 80);
        *(_OWORD *)v171 = v31;
        *(_QWORD *)&v171[16] = *(_QWORD *)(Element + 112);
        v32 = DSPGraph::Graph::in(this[92]);
        v33 = *(_QWORD *)(v32 + 88);
        if (*(_QWORD *)(v32 + 96) == v33)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v167, "out");
          v160 = (_QWORD *)(v32 + 32);
          if (*(char *)(v32 + 55) < 0)
            v160 = (_QWORD *)*v160;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v159, v160, (uint64_t)(*(_QWORD *)(v32 + 96) - *(_QWORD *)(v32 + 88)) >> 5, 0);
          DSPGraph::ThrowException();
LABEL_249:
          __break(1u);
        }
        v34 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33) + 120);
        v35 = *(_QWORD *)(v34 + 32);
        v36 = *(_OWORD *)(v34 + 16);
        *(_OWORD *)&v167.mSampleRate = *(_OWORD *)v34;
        *(_OWORD *)&v167.mBytesPerPacket = v36;
        *(_QWORD *)&v167.mBitsPerChannel = v35;
        if (*(double *)&v170 == v167.mSampleRate
          && DWORD2(v170) == v167.mFormatID
          && *(_QWORD *)v171 == *(_QWORD *)&v167.mBytesPerPacket
          && *(_QWORD *)&v171[12] == *(_QWORD *)&v167.mChannelsPerFrame
          && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v170, &v167, 0, 0))
        {
          goto LABEL_94;
        }
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v37 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_53;
          v38 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v38 = *v164;
          *(_DWORD *)buf = 136315650;
          v173 = v38;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)v176 = v29;
          v39 = v37;
          v40 = "[%s|%p] [FATAL] AudioUnit and DSPGraph formats for input bus %d don't match";
          v41 = 28;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v42 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_53:
            v43 = -1;
            goto LABEL_54;
          }
          *(_DWORD *)buf = 134218240;
          v173 = (AUDSPGraph *)this;
          v174 = 1024;
          *(_DWORD *)v175 = v29;
          v39 = v42;
          v40 = "[%p] [FATAL] AudioUnit and DSPGraph formats for input bus %d don't match";
          v41 = 18;
        }
        _os_log_error_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, v40, buf, v41);
        v43 = getAUDSPGraphLog(void)::onceToken;
LABEL_54:
        if (*((_BYTE *)this + 656))
        {
          if (v43 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v44 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_68;
          v46 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v46 = *v164;
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v45);
          v47 = __p;
          if (v169 < 0)
            v47 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          v173 = v46;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(_QWORD *)v176 = v47;
          *(_WORD *)&v176[8] = 2048;
          *(_QWORD *)&v176[10] = HIDWORD(v170);
          _os_log_error_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0)
            operator delete(__p[0]);
          a6 = v163;
        }
        else
        {
          if (v43 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v48 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_68:
            v50 = -1;
            goto LABEL_69;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v49);
          v64 = __p;
          if (v169 < 0)
            v64 = (void **)__p[0];
          *(_DWORD *)buf = 134218498;
          v173 = (AUDSPGraph *)this;
          v174 = 2080;
          *(_QWORD *)v175 = v64;
          *(_WORD *)&v175[8] = 2048;
          *(_QWORD *)v176 = HIDWORD(v170);
          _os_log_error_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0)
            operator delete(__p[0]);
        }
        v50 = getAUDSPGraphLog(void)::onceToken;
LABEL_69:
        if (*((_BYTE *)this + 656))
        {
          if (v50 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v51 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_83;
          v53 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v53 = *v164;
          CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v52);
          v54 = __p;
          if (v169 < 0)
            v54 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          v173 = v53;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(_QWORD *)v176 = v54;
          *(_WORD *)&v176[8] = 2048;
          *(_QWORD *)&v176[10] = v167.mFormatFlags;
          _os_log_error_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0)
            operator delete(__p[0]);
          a6 = v163;
        }
        else
        {
          if (v50 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v55 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_83:
            v57 = -1;
            goto LABEL_84;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v56);
          v65 = __p;
          if (v169 < 0)
            v65 = (void **)__p[0];
          *(_DWORD *)buf = 134218498;
          v173 = (AUDSPGraph *)this;
          v174 = 2080;
          *(_QWORD *)v175 = v65;
          *(_WORD *)&v175[8] = 2048;
          *(_QWORD *)v176 = v167.mFormatFlags;
          _os_log_error_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_ERROR, "[%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0)
            operator delete(__p[0]);
        }
        v57 = getAUDSPGraphLog(void)::onceToken;
LABEL_84:
        if (*((_BYTE *)this + 656))
        {
          if (v57 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v58 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_94;
          v59 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v59 = *v164;
          *(_DWORD *)buf = 136315650;
          v173 = v59;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)v176 = v29;
          v60 = v58;
          v61 = "[%s|%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
          v62 = 28;
        }
        else
        {
          if (v57 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v63 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_94;
          *(_DWORD *)buf = 134218240;
          v173 = (AUDSPGraph *)this;
          v174 = 1024;
          *(_DWORD *)v175 = v29;
          v60 = v63;
          v61 = "[%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
          v62 = 18;
        }
        _os_log_error_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, v61, buf, v62);
LABEL_94:
        ++v29;
      }
      while ((_DWORD)v13 != v29);
    }
    v66 = DSPGraph::Graph::numOutputs(this[92]);
    if (v22 >= v66)
      v67 = v66;
    else
      v67 = v22;
    if (v67)
    {
      v68 = 0;
      v165 = this + 79;
      do
      {
        v69 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), v68);
        v70 = *(_OWORD *)(v69 + 96);
        v170 = *(_OWORD *)(v69 + 80);
        *(_OWORD *)v171 = v70;
        *(_QWORD *)&v171[16] = *(_QWORD *)(v69 + 112);
        v71 = DSPGraph::Graph::out(this[92]);
        v72 = *(_QWORD *)(v71 + 64);
        if (*(_QWORD *)(v71 + 72) == v72)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v167, "in");
          v162 = (_QWORD *)(v71 + 32);
          if (*(char *)(v71 + 55) < 0)
            v162 = (_QWORD *)*v162;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v161, v162, (uint64_t)(*(_QWORD *)(v71 + 72) - *(_QWORD *)(v71 + 64)) >> 5, 0);
          DSPGraph::ThrowException();
          goto LABEL_249;
        }
        v73 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72) + 120);
        v74 = *(_QWORD *)(v73 + 32);
        v75 = *(_OWORD *)(v73 + 16);
        *(_OWORD *)&v167.mSampleRate = *(_OWORD *)v73;
        *(_OWORD *)&v167.mBytesPerPacket = v75;
        *(_QWORD *)&v167.mBitsPerChannel = v74;
        if (*(double *)&v170 == v167.mSampleRate
          && DWORD2(v170) == v167.mFormatID
          && *(_QWORD *)v171 == *(_QWORD *)&v167.mBytesPerPacket
          && *(_QWORD *)&v171[12] == *(_QWORD *)&v167.mChannelsPerFrame
          && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v170, &v167, 0, 0))
        {
          goto LABEL_172;
        }
        if (*((_BYTE *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v76 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_131;
          v77 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v77 = *v165;
          *(_DWORD *)buf = 136315650;
          v173 = v77;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)v176 = v68;
          v78 = v76;
          v79 = "[%s|%p] [FATAL] AudioUnit and DSPGraph formats for output bus %d don't match";
          v80 = 28;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v81 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_131:
            v82 = -1;
            goto LABEL_132;
          }
          *(_DWORD *)buf = 134218240;
          v173 = (AUDSPGraph *)this;
          v174 = 1024;
          *(_DWORD *)v175 = v68;
          v78 = v81;
          v79 = "[%p] [FATAL] AudioUnit and DSPGraph formats for output bus %d don't match";
          v80 = 18;
        }
        _os_log_error_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, v79, buf, v80);
        v82 = getAUDSPGraphLog(void)::onceToken;
LABEL_132:
        if (*((_BYTE *)this + 656))
        {
          if (v82 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v83 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_146;
          v85 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v85 = *v165;
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v84);
          v86 = __p;
          if (v169 < 0)
            v86 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          v173 = v85;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(_QWORD *)v176 = v86;
          *(_WORD *)&v176[8] = 2048;
          *(_QWORD *)&v176[10] = HIDWORD(v170);
          _os_log_error_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0)
            operator delete(__p[0]);
          a6 = v163;
        }
        else
        {
          if (v82 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v87 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_146:
            v89 = -1;
            goto LABEL_147;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v88);
          v103 = __p;
          if (v169 < 0)
            v103 = (void **)__p[0];
          *(_DWORD *)buf = 134218498;
          v173 = (AUDSPGraph *)this;
          v174 = 2080;
          *(_QWORD *)v175 = v103;
          *(_WORD *)&v175[8] = 2048;
          *(_QWORD *)v176 = HIDWORD(v170);
          _os_log_error_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0)
            operator delete(__p[0]);
        }
        v89 = getAUDSPGraphLog(void)::onceToken;
LABEL_147:
        if (*((_BYTE *)this + 656))
        {
          if (v89 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v90 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v92 = (AUDSPGraph *)(this + 79);
            if (*((char *)this + 655) < 0)
              v92 = *v165;
            CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v91);
            v93 = __p;
            if (v169 < 0)
              v93 = (void **)__p[0];
            *(_DWORD *)buf = 136315906;
            v173 = v92;
            v174 = 2048;
            *(_QWORD *)v175 = this;
            *(_WORD *)&v175[8] = 2080;
            *(_QWORD *)v176 = v93;
            *(_WORD *)&v176[8] = 2048;
            *(_QWORD *)&v176[10] = v167.mFormatFlags;
            _os_log_error_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x2Au);
            if (v169 < 0)
              operator delete(__p[0]);
            a6 = v163;
LABEL_185:
            v96 = getAUDSPGraphLog(void)::onceToken;
            goto LABEL_162;
          }
        }
        else
        {
          if (v89 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v94 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v95);
            v104 = __p;
            if (v169 < 0)
              v104 = (void **)__p[0];
            *(_DWORD *)buf = 134218498;
            v173 = (AUDSPGraph *)this;
            v174 = 2080;
            *(_QWORD *)v175 = v104;
            *(_WORD *)&v175[8] = 2048;
            *(_QWORD *)v176 = v167.mFormatFlags;
            _os_log_error_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_ERROR, "[%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x20u);
            if (v169 < 0)
              operator delete(__p[0]);
            goto LABEL_185;
          }
        }
        v96 = -1;
LABEL_162:
        if (*((_BYTE *)this + 656))
        {
          if (v96 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v97 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_172;
          v98 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0)
            v98 = *v165;
          *(_DWORD *)buf = 136315650;
          v173 = v98;
          v174 = 2048;
          *(_QWORD *)v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)v176 = v68;
          v99 = v97;
          v100 = "[%s|%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
          v101 = 28;
        }
        else
        {
          if (v96 != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v102 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_172;
          *(_DWORD *)buf = 134218240;
          v173 = (AUDSPGraph *)this;
          v174 = 1024;
          *(_DWORD *)v175 = v68;
          v99 = v102;
          v100 = "[%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
          v101 = 18;
        }
        _os_log_error_impl(&dword_1B5ED0000, v99, OS_LOG_TYPE_ERROR, v100, buf, v101);
LABEL_172:
        ++v68;
      }
      while (v67 != v68);
    }
    *((_BYTE *)this + 899) = 1;
  }
  v105 = this[15];
  if (v105)
    LODWORD(v106) = (*(uint64_t (**)(DSPGraph::Graph *))(*(_QWORD *)v105 + 24))(v105);
  else
    v106 = (unint64_t)(this[13] - this[12]) >> 3;
  v107 = this[21];
  if (v107)
    LODWORD(v108) = (*(uint64_t (**)(DSPGraph::Graph *))(*(_QWORD *)v107 + 24))(v107);
  else
    v108 = (unint64_t)(this[19] - this[18]) >> 3;
  if ((_DWORD)v106 == a4 && (_DWORD)v108 == a6)
    goto LABEL_209;
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v110 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_209;
    v111 = (AUDSPGraph *)(this + 79);
    if (*((char *)this + 655) < 0)
      v111 = *(AUDSPGraph **)v111;
    *(_DWORD *)buf = 136316418;
    v173 = v111;
    v174 = 2048;
    *(_QWORD *)v175 = this;
    *(_WORD *)&v175[8] = 1024;
    *(_DWORD *)v176 = v106;
    *(_WORD *)&v176[4] = 1024;
    *(_DWORD *)&v176[6] = v108;
    *(_WORD *)&v176[10] = 1024;
    *(_DWORD *)&v176[12] = a4;
    *(_WORD *)&v176[16] = 1024;
    v177 = a6;
    v112 = "[%s|%p] [FATAL] AudioUnit (%d -> %d) and runtime (%d -> %d) I/O bus counts don't match";
    v113 = v110;
    v114 = 46;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v115 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_209;
    *(_DWORD *)buf = 134219008;
    v173 = (AUDSPGraph *)this;
    v174 = 1024;
    *(_DWORD *)v175 = v106;
    *(_WORD *)&v175[4] = 1024;
    *(_DWORD *)&v175[6] = v108;
    *(_WORD *)v176 = 1024;
    *(_DWORD *)&v176[2] = a4;
    *(_WORD *)&v176[6] = 1024;
    *(_DWORD *)&v176[8] = a6;
    v112 = "[%p] [FATAL] AudioUnit (%d -> %d) and runtime (%d -> %d) I/O bus counts don't match";
    v113 = v115;
    v114 = 36;
  }
  _os_log_error_impl(&dword_1B5ED0000, v113, OS_LOG_TYPE_ERROR, v112, buf, v114);
LABEL_209:
  if (*((_BYTE *)this + 897))
  {
    *((_BYTE *)this + 897) = 0;
    DSPGraph::Graph::reset(this[92]);
  }
  if (*((_BYTE *)this + 896))
  {
    if (a6)
    {
      v116 = 0;
      v117 = a6;
      do
      {
        v118 = a7[v116];
        if (v118->mNumberBuffers)
        {
          v119 = 0;
          p_mData = &v118->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v119;
            p_mData += 2;
          }
          while (v119 < v118->mNumberBuffers);
        }
        ++v116;
      }
      while (v116 != v117);
    }
  }
  else
  {
    v121 = a4;
    if (v106 < a4)
      v121 = v106;
    if (v121)
    {
      v122 = 0;
      v123 = this[94];
      do
      {
        v124 = (uint64_t)v123 + v122;
        v125 = *((_OWORD *)this + 17);
        v126 = *((_OWORD *)this + 18);
        v127 = *((_OWORD *)this + 19);
        *(_OWORD *)(v124 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v124 + 40) = v127;
        *(_OWORD *)(v124 + 24) = v126;
        *(_OWORD *)(v124 + 8) = v125;
        v123 = this[94];
        v128 = (uint64_t)v123 + v122;
        *(_DWORD *)(v128 + 4) = *a2;
        v129 = (uint64_t)*a5++;
        *(_QWORD *)(v128 + 72) = v129;
        v122 += 80;
      }
      while (80 * v121 != v122);
    }
    if (v106 > a4)
    {
      v130 = this[94];
      v131 = v106 - (unint64_t)v121;
      v132 = 80 * v121;
      do
      {
        v133 = (uint64_t)v130 + v132;
        v134 = *((_OWORD *)this + 17);
        v135 = *((_OWORD *)this + 18);
        v136 = *((_OWORD *)this + 19);
        *(_OWORD *)(v133 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v133 + 40) = v136;
        *(_OWORD *)(v133 + 24) = v135;
        *(_OWORD *)(v133 + 8) = v134;
        v130 = this[94];
        v137 = (uint64_t)v130 + v132;
        *(_DWORD *)(v137 + 4) = *a2;
        *(_QWORD *)(v137 + 72) = 0;
        v132 += 80;
        --v131;
      }
      while (v131);
    }
    if (v108 >= a6)
      v138 = a6;
    else
      v138 = v108;
    if (v138)
    {
      v139 = 0;
      v140 = this[97];
      do
      {
        v141 = (uint64_t)v140 + v139;
        v142 = *((_OWORD *)this + 17);
        v143 = *((_OWORD *)this + 18);
        v144 = *((_OWORD *)this + 19);
        *(_OWORD *)(v141 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v141 + 40) = v144;
        *(_OWORD *)(v141 + 24) = v143;
        *(_OWORD *)(v141 + 8) = v142;
        v140 = this[97];
        v145 = (uint64_t)v140 + v139;
        *(_DWORD *)(v145 + 4) = *a2;
        v146 = (uint64_t)*a7++;
        *(_QWORD *)(v145 + 72) = v146;
        v139 += 80;
      }
      while (80 * v138 != v139);
    }
    if (v108 > a6)
    {
      v147 = v108;
      v148 = this[97];
      v149 = v147 - v138;
      v150 = 80 * v138;
      do
      {
        v151 = (uint64_t)v148 + v150;
        v152 = *((_OWORD *)this + 17);
        v153 = *((_OWORD *)this + 18);
        v154 = *((_OWORD *)this + 19);
        *(_OWORD *)(v151 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v151 + 40) = v154;
        *(_OWORD *)(v151 + 24) = v153;
        *(_OWORD *)(v151 + 8) = v152;
        v148 = this[97];
        v155 = (uint64_t)v148 + v150;
        *(_DWORD *)(v155 + 4) = *a2;
        *(_QWORD *)(v155 + 72) = 0;
        v150 += 80;
        --v149;
      }
      while (v149);
    }
    ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
    DSPGraph::Graph::preflight();
    DSPGraph::Graph::processMultiple();
  }
  return 0;
}

void sub_1B62F1228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,__int128 buf,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  void *v48;
  NSObject *v49;
  _QWORD *v50;
  __int128 *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  const char *v55;
  uint8_t *v56;
  NSObject *v57;
  uint32_t v58;
  const std::system_error *v59;
  NSObject *v60;
  _QWORD *v61;
  __int128 *v62;
  void *v63;
  NSObject *v64;
  const std::exception *v65;
  _QWORD *v66;
  const std::exception *v67;
  NSObject *v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (!a2)
    _Unwind_Resume(exception_object);
  switch(a2)
  {
    case 5:
      v48 = __cxa_begin_catch(exception_object);
      if (*(_BYTE *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v49 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v50 = (_QWORD *)(v45 + 632);
          if (*(char *)(v45 + 655) < 0)
            v50 = (_QWORD *)*v50;
          v51 = a45 >= 0 ? &buf : (__int128 *)buf;
          *(_DWORD *)(v46 - 160) = 136315650;
          *(_QWORD *)(v46 - 156) = v50;
          *(_WORD *)(v46 - 148) = 2048;
          *(_QWORD *)(v46 - 146) = v45;
          *(_WORD *)(v46 - 138) = 2080;
          *(_QWORD *)(v46 - 136) = v51;
          _os_log_error_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", (uint8_t *)(v46 - 160), 0x20u);
          if (a45 < 0)
          {
            v52 = (void *)buf;
LABEL_78:
            operator delete(v52);
          }
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v64 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v75 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(_QWORD *)(v46 - 160);
          LODWORD(buf) = 134218242;
          *(_QWORD *)((char *)&buf + 4) = v45;
          WORD6(buf) = 2080;
          *(_QWORD *)((char *)&buf + 14) = v75;
          _os_log_error_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", (uint8_t *)&buf, 0x16u);
          if (*(char *)(v46 - 137) < 0)
          {
            v52 = *(void **)(v46 - 160);
            goto LABEL_78;
          }
        }
      }
      __cxa_end_catch();
      JUMPOUT(0x1B62F0F58);
    case 4:
      __cxa_begin_catch(exception_object);
      if (*(_BYTE *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v53 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v54 = (_QWORD *)(v45 + 632);
          if (*(char *)(v45 + 655) < 0)
            v54 = (_QWORD *)*v54;
          *(_DWORD *)(v46 - 160) = 136315394;
          *(_QWORD *)(v46 - 156) = v54;
          *(_WORD *)(v46 - 148) = 2048;
          *(_QWORD *)(v46 - 146) = v45;
          v55 = "[%s|%p] caught CAXException";
          v56 = (uint8_t *)(v46 - 160);
          v57 = v53;
          v58 = 22;
          goto LABEL_92;
        }
LABEL_72:
        __cxa_end_catch();
        JUMPOUT(0x1B62F0F5CLL);
      }
      if (getAUDSPGraphLog(void)::onceToken != -1)
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
      v70 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_72;
      *(_DWORD *)(v46 - 160) = 134217984;
      *(_QWORD *)(v46 - 156) = v45;
      v55 = "[%p] caught CAXException";
      v56 = (uint8_t *)(v46 - 160);
      v57 = v70;
      v58 = 12;
      goto LABEL_92;
    case 3:
      v59 = (const std::system_error *)__cxa_begin_catch(exception_object);
      if (*(_BYTE *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v60 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        v61 = (_QWORD *)(v45 + 632);
        if (*(char *)(v45 + 655) < 0)
          v61 = (_QWORD *)*v61;
        v62 = a45 >= 0 ? &buf : (__int128 *)buf;
        *(_DWORD *)(v46 - 160) = 136315650;
        *(_QWORD *)(v46 - 156) = v61;
        *(_WORD *)(v46 - 148) = 2048;
        *(_QWORD *)(v46 - 146) = v45;
        *(_WORD *)(v46 - 138) = 2080;
        *(_QWORD *)(v46 - 136) = v62;
        _os_log_error_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::system_error: %s", (uint8_t *)(v46 - 160), 0x20u);
        if ((a45 & 0x80000000) == 0)
          goto LABEL_72;
        v63 = (void *)buf;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v72 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        v76 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(_QWORD *)(v46 - 160);
        LODWORD(buf) = 134218242;
        *(_QWORD *)((char *)&buf + 4) = v45;
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v76;
        _os_log_error_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_ERROR, "[%p] caught std::system_error: %s", (uint8_t *)&buf, 0x16u);
        if ((*(char *)(v46 - 137) & 0x80000000) == 0)
          goto LABEL_72;
        v63 = *(void **)(v46 - 160);
      }
      break;
    default:
      v65 = (const std::exception *)__cxa_begin_catch(exception_object);
      v66 = (_QWORD *)(v45 + 632);
      if (a2 != 2)
      {
        if (*(_BYTE *)(v45 + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1)
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
          v71 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(v45 + 655) < 0)
              v66 = (_QWORD *)*v66;
            *(_DWORD *)(v46 - 160) = 136315394;
            *(_QWORD *)(v46 - 156) = v66;
            *(_WORD *)(v46 - 148) = 2048;
            *(_QWORD *)(v46 - 146) = v45;
            v55 = "[%s|%p] caught unknown exception";
            v56 = (uint8_t *)(v46 - 160);
            v57 = v71;
            v58 = 22;
            goto LABEL_92;
          }
          goto LABEL_72;
        }
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v74 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        *(_DWORD *)(v46 - 160) = 134217984;
        *(_QWORD *)(v46 - 156) = v45;
        v55 = "[%p] caught unknown exception";
        v56 = (uint8_t *)(v46 - 160);
        v57 = v74;
        v58 = 12;
LABEL_92:
        _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, v55, v56, v58);
        goto LABEL_72;
      }
      v67 = v65;
      if (*(_BYTE *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v68 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        if (*(char *)(v45 + 655) < 0)
          v66 = (_QWORD *)*v66;
        v69 = a45 >= 0 ? &buf : (__int128 *)buf;
        *(_DWORD *)(v46 - 160) = 136315650;
        *(_QWORD *)(v46 - 156) = v66;
        *(_WORD *)(v46 - 148) = 2048;
        *(_QWORD *)(v46 - 146) = v45;
        *(_WORD *)(v46 - 138) = 2080;
        *(_QWORD *)(v46 - 136) = v69;
        _os_log_error_impl(&dword_1B5ED0000, v68, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::exception: %s", (uint8_t *)(v46 - 160), 0x20u);
        if ((a45 & 0x80000000) == 0)
          goto LABEL_72;
        v63 = (void *)buf;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v73 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_72;
        v77 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(_QWORD *)(v46 - 160);
        LODWORD(buf) = 134218242;
        *(_QWORD *)((char *)&buf + 4) = v45;
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v77;
        _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "[%p] caught std::exception: %s", (uint8_t *)&buf, 0x16u);
        if ((*(char *)(v46 - 137) & 0x80000000) == 0)
          goto LABEL_72;
        v63 = *(void **)(v46 - 160);
      }
      break;
  }
  operator delete(v63);
  goto LABEL_72;
}

uint64_t AUDSPGraph::Render(AUDSPGraph *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v9;
  ausdk::AUInputElement *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t Element;

  v7 = *((_QWORD *)this + 107);
  if (v7 == *((_QWORD *)this + 106))
  {
    v13 = *((_QWORD *)this + 107);
LABEL_7:
    if (*((_QWORD *)this + 110) != *((_QWORD *)this + 109))
    {
      v14 = 0;
      do
      {
        Element = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), v14);
        *(_QWORD *)(*((_QWORD *)this + 109) + 8 * v14++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      }
      while (v14 < (uint64_t)(*((_QWORD *)this + 110) - *((_QWORD *)this + 109)) >> 3);
      v13 = *((_QWORD *)this + 107);
      v7 = *((_QWORD *)this + 106);
    }
    return (*(uint64_t (**)(AUDSPGraph *, unsigned int *, uint64_t, unint64_t))(*(_QWORD *)this + 184))(this, a2, a4, (unint64_t)(v13 - v7) >> 3);
  }
  else
  {
    v9 = 0;
    while (1)
    {
      v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 80), v9);
      result = ausdk::AUInputElement::PullInput(v10, a2, a3, v9, a4);
      if ((_DWORD)result)
        break;
      v12 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 80), v9);
      *(_QWORD *)(*((_QWORD *)this + 106) + 8 * v9++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
      v13 = *((_QWORD *)this + 107);
      v7 = *((_QWORD *)this + 106);
      if (v9 >= (v13 - v7) >> 3)
        goto LABEL_7;
    }
  }
  return result;
}

BOOL AUDSPGraph::BusCountWritable(AUDSPGraph *this, int a2)
{
  return (a2 - 1) < 2;
}

double AUDSPGraph::GetParameterInfo(AUDSPGraph *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  DSPGraph::Graph *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  double result;
  const __CFString *v14;
  char cStr[16];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v5 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
    if (v5)
    {
      v8 = *((_QWORD *)this + 113);
      v9 = *((_QWORD *)this + 114);
      if (v8 != v9)
      {
        v10 = v8 + 48;
        do
        {
          v11 = *(_DWORD *)(v10 - 48);
          v12 = v11 == a3 || v10 == v9;
          v10 += 48;
        }
        while (!v12);
        if (v11 == a3)
          goto LABEL_13;
      }
      if (DSPGraph::Graph::hasParameter(v5))
      {
LABEL_13:
        CAX4CCString::CAX4CCString((CAX4CCString *)cStr, a3);
        v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        if (!v14)
          __assert_rtn("GetParameterInfo", "AUDSPGraph.cpp", 692, "cfStr");
        a4->cfNameString = v14;
        a4->flags |= 0x8000010u;
        CFStringGetCString(v14, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        result = 1.40444709e306;
        *(_QWORD *)&a4->minValue = 0x7F7FFFFF00800000;
        a4->defaultValue = 0.0;
      }
    }
  }
  return result;
}

double AUDSPGraph::GetLatency(AUDSPGraph *this)
{
  DSPGraph::Graph *v1;
  double result;

  v1 = (DSPGraph::Graph *)*((_QWORD *)this + 92);
  if (!v1 || !*((_BYTE *)v1 + 762))
    return 0.0;
  DSPGraph::Graph::getLatencyInSeconds(v1);
  return result;
}

uint64_t AUDSPGraph::SupportsTail(AUDSPGraph *this)
{
  return 1;
}

BOOL AUDSPGraph::StreamFormatWritable(AUDSPGraph *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDSPGraph::SupportedNumChannels(AUDSPGraph *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDSPGraph::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 1;
}

BOOL AUDSPGraph::ValidFormat(AUDSPGraph *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  _QWORD *Scope;
  uint64_t v6;
  uint64_t v7;

  if (a2 - 1 > 1)
    return 0;
  Scope = (_QWORD *)ausdk::AUBase::GetScope(this, a2);
  v6 = Scope[5];
  if (v6)
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  else
    v7 = (Scope[3] - Scope[2]) >> 3;
  return v7 > a3;
}

void `anonymous namespace'::convertExceptionToString(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  uint64_t *v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;
  _BYTE v25[8];
  uint64_t *v26;
  unsigned __int8 v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;
  unsigned __int8 v31[8];
  uint64_t *v32;

  v31[0] = 0;
  v32 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v29, a2 + 72);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v29[0];
  v29[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v30;
  v30 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  v7 = (uint64_t *)*(int *)(a2 + 8);
  v27[0] = 5;
  v28 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "os_status");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  v9 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v27[0];
  v27[0] = v9;
  v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v28;
  v28 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v25, a2 + 16);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  v12 = *(_BYTE *)v11;
  *(_BYTE *)v11 = v25[0];
  v25[0] = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v26;
  v26 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2 + 48);
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  v15 = *(_BYTE *)v14;
  *(_BYTE *)v14 = v23[0];
  v23[0] = v15;
  v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v24;
  v24 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  v17 = (uint64_t *)*(int *)(a2 + 40);
  v21[0] = 5;
  v22 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "line");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v19 = *(_BYTE *)v18;
  *(_BYTE *)v18 = v21[0];
  v21[0] = v19;
  v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v22;
  v22 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v31, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  uint64_t *v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;
  _BYTE v25[8];
  uint64_t *v26;
  unsigned __int8 v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;
  unsigned __int8 v31[8];
  uint64_t *v32;

  v31[0] = 0;
  v32 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v29, a2 + 72);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v29[0];
  v29[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v30;
  v30 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  v7 = (uint64_t *)*(int *)(a2 + 8);
  v27[0] = 5;
  v28 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "os_status");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  v9 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v27[0];
  v27[0] = v9;
  v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v28;
  v28 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v25, a2 + 16);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  v12 = *(_BYTE *)v11;
  *(_BYTE *)v11 = v25[0];
  v25[0] = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v26;
  v26 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2 + 48);
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  v15 = *(_BYTE *)v14;
  *(_BYTE *)v14 = v23[0];
  v23[0] = v15;
  v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v24;
  v24 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  v17 = (uint64_t *)*(int *)(a2 + 40);
  v21[0] = 5;
  v22 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "line");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v19 = *(_BYTE *)v18;
  *(_BYTE *)v18 = v21[0];
  v21[0] = v19;
  v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v22;
  v22 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v31, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char *v7;
  _BYTE v8[8];
  uint64_t *v9;
  unsigned __int8 v10[8];
  uint64_t *v11;

  v10[0] = 0;
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  v7 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v8, &v7);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v8[0];
  v8[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v10, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
}

void `anonymous namespace'::convertExceptionToString(_anonymous_namespace_ *this, const std::system_error *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *val;
  std::error_code *p_ec;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t *v20;
  std::string v21;
  _BYTE v22[8];
  uint64_t *v23;
  _BYTE v24[8];
  uint64_t *v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  _BYTE v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v30[0] = 0;
  v31 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::system_error *))a2->what)(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v28, &v21.__r_.__value_.__l.__data_);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v28[0];
  v28[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v29;
  v29 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
  p_ec = &a2->__ec_;
  val = (uint64_t *)a2->__ec_.__val_;
  v26[0] = 5;
  v27 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v9, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  v11 = *(_BYTE *)v10;
  *(_BYTE *)v10 = v26[0];
  v26[0] = v11;
  v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v27;
  v27 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::error_category *))a2->__ec_.__cat_->name)(a2->__ec_.__cat_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v24, &v21.__r_.__value_.__l.__data_);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v13, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  v15 = *(_BYTE *)v14;
  *(_BYTE *)v14 = v24[0];
  v24[0] = v15;
  v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v25;
  v25 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  std::error_code::message(&v21, p_ec);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v22, (uint64_t)&v21);
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v17, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  v19 = *(_BYTE *)v18;
  *(_BYTE *)v18 = v22[0];
  v22[0] = v19;
  v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v23;
  v23 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v30, 4, 0x20u, 0, 0, this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
}

void `anonymous namespace'::convertExceptionToString(_anonymous_namespace_ *this, const std::exception *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char *v7;
  _BYTE v8[8];
  uint64_t *v9;
  unsigned __int8 v10[8];
  uint64_t *v11;

  v10[0] = 0;
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  v7 = (char *)((uint64_t (*)(const std::exception *))a2->what)(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v8, &v7);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v8[0];
  v8[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v10, 4, 0x20u, 0, 0, this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
}

os_log_t ___Z16getAUDSPGraphLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUDSPGraph");
  getAUDSPGraphLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUDSPGraph::SetGraphParameter(uint64_t this, int a2, __n128 a3)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **i;
  float *v7;
  float *v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t *v16;

  v3 = a3.n128_f32[0];
  v14 = this;
  v15 = caulk::function_ref<void ()(unsigned int,float)>::functor_invoker<AUDSPGraph::SetGraphParameter(unsigned int,float)::$_0>;
  v16 = &v14;
  v4 = *(_QWORD *)(this + 904);
  v5 = *(_QWORD *)(this + 912);
  if (v4 == v5)
    return (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(this + 736) + 40))(*(_QWORD *)(this + 736), a3);
  while (*(_DWORD *)v4 != a2)
  {
    v4 += 48;
    if (v4 == v5)
      return (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(this + 736) + 40))(*(_QWORD *)(this + 736), a3);
  }
  for (i = *(uint64_t ***)(v4 + 24); i; i = (uint64_t **)*i)
  {
    v7 = (float *)i[3];
    v8 = (float *)i[4];
    a3.n128_f32[0] = v3;
    if (v7 != v8)
    {
      if (*v7 >= v3)
      {
        a3.n128_f32[0] = v7[1];
      }
      else if (*(v8 - 2) <= v3)
      {
        a3.n128_f32[0] = *(v8 - 1);
      }
      else
      {
        v9 = ((char *)v8 - (char *)v7) >> 3;
        do
        {
          v10 = v9 >> 1;
          v11 = &v7[2 * (v9 >> 1)];
          v13 = *v11;
          v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 > v3)
            v9 = v10;
          else
            v7 = v12;
        }
        while (v9);
        a3.n128_f32[0] = *(v7 - 1)
                       + (float)((float)((float)(v3 - *(v7 - 2)) * (float)(v7[1] - *(v7 - 1))) / (float)(*v7 - *(v7 - 2)));
      }
    }
    this = ((uint64_t (*)(uint64_t **, _QWORD, __n128))v15)(&v16, *((unsigned int *)i + 4), a3);
  }
  *(float *)(v4 + 4) = v3;
  return this;
}

char *std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v23 = result;
      while (v6 != a3)
      {
        *(_DWORD *)v23 = *(_DWORD *)v6;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        v23 += 8;
        ++v6;
      }
      v17 = (char *)(v23 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6++ + 1);
          result += 8;
        }
        while (v6 != v20);
      }
      v21 = v12;
      while (v20 != a3)
      {
        v22 = *v20++;
        *(_QWORD *)v21 = v22;
        v21 += 8;
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t caulk::function_ref<void ()(unsigned int,float)>::functor_invoker<AUDSPGraph::SetGraphParameter(unsigned int,float)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 736) + 40))(*(_QWORD *)(**(_QWORD **)a1 + 736));
}

void AUDSPGraph::ResetCachedProps(AUDSPGraph *this)
{
  uint64_t v2;
  AUDSPGraph *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  int v13;
  AUDSPGraph *v14;
  __int16 v15;
  AUDSPGraph *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!_os_feature_enabled_impl())
    return;
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v2 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    v3 = (AUDSPGraph *)((char *)this + 632);
    if (*((char *)this + 655) < 0)
      v3 = *(AUDSPGraph **)v3;
    v13 = 136315394;
    v14 = v3;
    v15 = 2048;
    v16 = this;
    v4 = "[%s|%p] Reset cached props";
    v5 = v2;
    v6 = 22;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v7 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    v13 = 134217984;
    v14 = this;
    v4 = "[%p] Reset cached props";
    v5 = v7;
    v6 = 12;
  }
  _os_log_debug_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v13, v6);
LABEL_12:
  *((_QWORD *)this + 129) = *((_QWORD *)this + 128);
  v8 = (const void *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v12)
    CFRelease(v12);
}

void sub_1B62F27E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

const void **applesauce::CF::DictionaryRef::operator=(const void **a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *a1;
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return a1;
}

void AUDSPGraph::SubstitutePropertyStripPath(AUDSPGraph *this, const applesauce::CF::DictionaryRef *a2, const __CFDictionary **a3)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  void ***v5;
  char *v6;
  void **v7;
  const void *v8;
  void ***v9;
  void ***v10;
  uint64_t v11;
  void **v12;
  const __CFString *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *v19;
  const char *v20;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  int v25;
  CFIndex v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *p_s1;
  void *v30;
  std::string *v31;
  CFStringRef v32;
  CFStringRef v33;
  uint64_t v34;
  const void *v35;
  char *v36;
  char *v37;
  BOOL v38;
  CFArrayRef v39;
  CFArrayRef v40;
  void **v41;
  _OWORD *v42;
  void **v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  uint64_t *v47;
  const __CFArray *v48;
  void ***v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *exception;
  std::runtime_error *v54;
  void ***v56;
  const std::ctype<char> *v57;
  uint64_t v58;
  void ***v60;
  std::string __s1;
  void ***v62;
  void ***v63;
  void ***v64;
  void ***v65;
  CFArrayRef v66;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __p;
  std::string v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)CFSTR("Boxes");
  v4 = applesauce::CF::details::at_key<__CFString const*>(v3, (const void **)&__p.__traits_.__loc_.__locale_);
  if (!v4)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not find item");
  }
  applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>((uint64_t *)&v64, v4);
  v5 = v64;
  v56 = v65;
  if (v64 != v65)
  {
    v6 = (char *)a2 + 1008;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Properties");
      v7 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>((uint64_t)v5, (void **)&__p.__traits_.__loc_.__locale_);
      if (SHIBYTE(__p.__traits_.__col_) < 0)
        operator delete(__p.__traits_.__loc_.__locale_);
      v57 = (const std::ctype<char> *)(v5 + 1);
      if (v5 + 1 == (void ***)v7)
        goto LABEL_100;
      v8 = v7[7];
      if (!v8)
      {
        v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v52, "Could not construct");
      }
      v58 = (uint64_t)v5;
      applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>((uint64_t *)&v62, v8);
      v10 = v62;
      v9 = v63;
      v60 = v63;
      while (v10 != v9)
      {
        v11 = 0;
        while (1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, off_1E69D11B8[v11]);
          v12 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>((uint64_t)v10, (void **)&__p.__traits_.__loc_.__locale_);
          if (SHIBYTE(__p.__traits_.__col_) < 0)
            operator delete(__p.__traits_.__loc_.__locale_);
          if (v10 + 1 != (void ***)v12)
            break;
          if (++v11 == 3)
            goto LABEL_85;
        }
        v13 = (const __CFString *)v12[7];
        if (!v13)
        {
          v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v51, "Could not construct");
        }
        applesauce::CF::convert_as<std::string,0>((uint64_t)&v68, v13);
        if (v69)
        {
          v14 = (_QWORD *)*((_QWORD *)a2 + 125);
          if (v14 == (_QWORD *)v6)
          {
LABEL_83:
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
          while (1)
          {
            std::regex_traits<char>::regex_traits(&__p.__traits_);
            memset(&__p.__flags_, 0, 40);
            v15 = *((char *)v14 + 55);
            if (v15 >= 0)
              v16 = (char *)(v14 + 4);
            else
              v16 = (char *)v14[4];
            if (v15 >= 0)
              v17 = *((unsigned __int8 *)v14 + 55);
            else
              v17 = v14[5];
            if (&v16[v17] != (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)&__p, v16, &v16[v17]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
            memset(&__s1, 0, sizeof(__s1));
            size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = &v68;
            else
              v19 = (std::string *)v68.__r_.__value_.__r.__words[0];
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v68.__r_.__value_.__l.__size_;
            if (*((char *)v14 + 79) >= 0)
              v20 = (const char *)(v14 + 7);
            else
              v20 = (const char *)v14[7];
            std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__s1, (char *)v19, (char *)v19 + size, &__p, v20);
            cntrl = __p.__start_.__cntrl_;
            if (__p.__start_.__cntrl_)
            {
              p_shared_owners = &__p.__start_.__cntrl_->__shared_owners_;
              do
                v23 = __ldaxr((unint64_t *)p_shared_owners);
              while (__stlxr(v23 - 1, (unint64_t *)p_shared_owners));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
                std::__shared_weak_count::__release_weak(cntrl);
              }
            }
            std::locale::~locale(&__p.__traits_.__loc_);
            v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            v25 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v26 = __s1.__r_.__value_.__l.__size_;
            v27 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = v68.__r_.__value_.__l.__size_;
            if (v26 != v27)
              goto LABEL_57;
            v28 = (v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v68
                : (std::string *)v68.__r_.__value_.__r.__words[0];
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              break;
            if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == v28->__r_.__value_.__s.__data_[0])
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                v28 = (std::string *)((char *)v28 + 1);
                if (!--v24)
                {
                  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    goto LABEL_76;
                  goto LABEL_74;
                }
              }
LABEL_57:
              if (v25 >= 0)
                v31 = &__s1;
              else
                v31 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              v32 = CFStringCreateWithBytes(0, (const UInt8 *)v31, v26, 0x8000100u, 0);
              v33 = v32;
              if (!v32)
              {
                v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v50, "Could not construct");
              }
              CFRetain(v32);
              std::string::basic_string[abi:ne180100]<0>(&__p, off_1E69D11B8[v11]);
              v34 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v10, &v66, (void **)&__p.__traits_.__loc_.__locale_);
              if (!v34)
                std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
              v35 = *(const void **)(v34 + 56);
              *(_QWORD *)(v34 + 56) = v33;
              if (SHIBYTE(__p.__traits_.__col_) < 0)
              {
                operator delete(__p.__traits_.__loc_.__locale_);
                if (!v35)
                  goto LABEL_67;
              }
              else if (!v35)
              {
LABEL_67:
                CFRelease(v33);
                if (v69)
                {
                  std::string::operator=(&v68, &__s1);
                }
                else
                {
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v68, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
                  else
                    v68 = __s1;
                  v69 = 1;
                }
                if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_76;
LABEL_74:
                v30 = (void *)__s1.__r_.__value_.__r.__words[0];
                goto LABEL_75;
              }
              CFRelease(v35);
              goto LABEL_67;
            }
LABEL_76:
            v36 = (char *)v14[1];
            if (v36)
            {
              do
              {
                v37 = v36;
                v36 = *(char **)v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                v37 = (char *)v14[2];
                v38 = *(_QWORD *)v37 == (_QWORD)v14;
                v14 = v37;
              }
              while (!v38);
            }
            v14 = v37;
            if (v37 == v6)
            {
              if (v69)
                goto LABEL_83;
              goto LABEL_85;
            }
          }
          v30 = (void *)__s1.__r_.__value_.__r.__words[0];
          if (memcmp(__s1.__r_.__value_.__l.__data_, v28, __s1.__r_.__value_.__l.__size_))
            goto LABEL_57;
LABEL_75:
          operator delete(v30);
          goto LABEL_76;
        }
LABEL_85:
        v10 += 3;
        v9 = v60;
      }
      v39 = applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(&v62);
      v40 = v39;
      v5 = (void ***)v58;
      if (v39)
        CFRetain(v39);
      v66 = v40;
      std::string::basic_string[abi:ne180100]<0>(&v68, "Properties");
      v41 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v58, &__s1, (void **)&v68.__r_.__value_.__l.__data_);
      v42 = *v41;
      if (!*v41)
      {
        v43 = v41;
        v42 = operator new(0x40uLL);
        __p.__traits_.__ct_ = v57;
        v42[2] = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        v44 = v68.__r_.__value_.__r.__words[2];
        memset(&v68, 0, sizeof(v68));
        *((_QWORD *)v42 + 6) = v44;
        *((_QWORD *)v42 + 7) = 0;
        LOBYTE(__p.__traits_.__col_) = 1;
        v45 = __s1.__r_.__value_.__r.__words[0];
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
        *((_QWORD *)v42 + 2) = v45;
        *v43 = v42;
        v46 = **(_QWORD **)v58;
        v47 = (uint64_t *)v42;
        if (v46)
        {
          *(_QWORD *)v58 = v46;
          v47 = (uint64_t *)*v43;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v58 + 8), v47);
        ++*(_QWORD *)(v58 + 16);
        __p.__traits_.__loc_.__locale_ = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
      }
      v48 = (const __CFArray *)*((_QWORD *)v42 + 7);
      *((_QWORD *)v42 + 7) = v40;
      v66 = v48;
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      operator delete(v68.__r_.__value_.__l.__data_);
      if (v48)
        goto LABEL_96;
LABEL_97:
      if (v40)
        CFRelease(v40);
      __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v62;
      std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_100:
      v5 += 3;
      if (v5 == v56)
        goto LABEL_101;
    }
    if (!v48)
      goto LABEL_97;
LABEL_96:
    CFRelease(v48);
    goto LABEL_97;
  }
LABEL_101:
  v49 = (void ***)applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(&v64);
  v62 = v49;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v68, "Boxes");
  if (v49)
    CFRetain(v49);
  v68.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v68;
  __p.__traits_.__ct_ = (const std::ctype<char> *)1;
  *(_QWORD *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
  if (v68.__r_.__value_.__l.__size_)
    CFRelease((CFTypeRef)v68.__r_.__value_.__l.__size_);
  if (v68.__r_.__value_.__r.__words[0])
    CFRelease(v68.__r_.__value_.__l.__data_);
  if (v49)
    CFRelease(v49);
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v64;
  std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B62F2FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9, applesauce::CF::DictionaryRef *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,__int128 buf)
{
  void *v30;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  uint64_t v37;
  CFTypeRef v38;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v30);
  __cxa_begin_catch(exception_object);
  if (*(_BYTE *)(a14 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v32 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v33 = (_QWORD *)(a14 + 632);
      if (*(char *)(a14 + 655) < 0)
        v33 = (_QWORD *)*v33;
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = v33;
      WORD6(buf) = 2048;
      *(_QWORD *)((char *)&buf + 14) = a14;
      v34 = "[%s|%p] Skipping propstrip path substitution for ill-formed propstrip";
      v35 = v32;
      v36 = 22;
      goto LABEL_18;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v37 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a14;
      v34 = "[%p] Skipping propstrip path substitution for ill-formed propstrip";
      v35 = v37;
      v36 = 12;
LABEL_18:
      _os_log_error_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&buf, v36);
    }
  }
  v38 = *a9;
  if (*a9)
    CFRetain(*a9);
  applesauce::CF::DictionaryRef::DictionaryRef(a10, v38);
  __cxa_end_catch();
  JUMPOUT(0x1B62F2E98);
}

void sub_1B62F3348()
{
  JUMPOUT(0x1B62F3164);
}

void sub_1B62F3350()
{
  __cxa_end_catch();
  JUMPOUT(0x1B62F3164);
}

void applesauce::CF::convert_to<std::map<std::string,std::string>,0>(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t i;
  uint64_t **v7;
  uint64_t **v8;
  char *v9;
  std::string *v10;
  std::runtime_error *exception;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  __int128 __p;
  uint64_t v19;
  void **values[3];
  void **keys[3];
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  if (!a2 || (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::vector<void const*>::vector(keys, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys[0], (const void **)values[0]);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>((const __CFString *)keys[0][i], (uint64_t)v14);
      applesauce::CF::convert_to<std::string,0>((const __CFString *)values[0][i], (uint64_t)v12);
      *(_OWORD *)v16 = *(_OWORD *)v14;
      v17 = v15;
      v14[1] = 0;
      v15 = 0;
      __p = *(_OWORD *)v12;
      v19 = v13;
      v12[0] = 0;
      v12[1] = 0;
      v13 = 0;
      v14[0] = 0;
      v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v24, v16);
      if (!*v7)
      {
        v8 = v7;
        v9 = (char *)operator new(0x50uLL);
        v22[0] = v9;
        v22[1] = a1 + 8;
        v23 = 0;
        v10 = (std::string *)(v9 + 32);
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          *((_QWORD *)v9 + 6) = v17;
        }
        *(_OWORD *)(v9 + 56) = __p;
        *((_QWORD *)v9 + 9) = v19;
        v19 = 0;
        __p = 0uLL;
        v23 = 1;
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v24, v8, (uint64_t *)v9);
        v22[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
      }
      if (SHIBYTE(v19) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v17) < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      if (SHIBYTE(v15) < 0)
        operator delete(v14[0]);
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
}

void sub_1B62F3594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;

  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *a1)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a1[5]);
  std::locale::~locale(a1);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::value_type *v6;
  std::__wrap_iter<const char *>::iterator_type v8;
  std::string::value_type *v9;
  unsigned __int8 *v10;
  std::string::value_type *i;
  std::__wrap_iter<const char *>::iterator_type v12;
  const char *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  std::string::value_type *v17;
  std::__wrap_iter<const char *>::iterator_type v18;
  std::string::value_type *v19;
  std::__wrap_iter<const char *>::iterator_type v20;
  std::string::value_type *v21;
  std::__wrap_iter<const char *>::iterator_type v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  std::sub_match<std::__wrap_iter<const char *>> *v27;
  BOOL v28;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::string::value_type *v30;
  std::__wrap_iter<const char *> *p_second;
  std::string::value_type *v32;
  std::regex_constants::match_flag_type flags;
  unsigned __int32 v34;
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v36;
  std::__wrap_iter<const char *> *v37;
  char *v38;
  std::sub_match<std::__wrap_iter<const char *>> *v39;
  char v40;
  std::sub_match<std::__wrap_iter<const char *>> *v41;
  char v42;
  size_t v44;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v46;
  std::match_results<const char *> v47;

  v6 = a2;
  v46.__begin_.__i_ = a2;
  v46.__end_.__i_ = a3;
  v46.__pregex_ = a4;
  v46.__flags_ = match_default;
  memset(&v46.__match_.__prefix_, 0, 17);
  memset(&v46.__match_.__suffix_, 0, 17);
  v46.__match_.__ready_ = 0;
  v46.__match_.__position_start_.__i_ = 0;
  memset(&v46.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, a2, a3, (std::match_results<const char *> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v6, (std::sub_match<std::__wrap_iter<const char *>> *)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_)
  {
    __p.__end_.__i_ = __p.__begin_.__i_;
    operator delete((void *)__p.__begin_.__i_);
  }
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v46, &__p))
  {
    v8 = 0;
    v9 = 0;
    v44 = strlen(a5);
    v10 = (unsigned __int8 *)&a5[v44];
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v46, &__p))
      {
        while (v9 != v8)
          std::string::push_back(a1, *v9++);
        goto LABEL_64;
      }
      i = (std::string::value_type *)v46.__match_.__prefix_.first.__i_;
      v12 = v46.__match_.__prefix_.second.__i_;
      while (i != v12)
        std::string::push_back(a1, *i++);
      if (v44)
      {
        v13 = a5;
        do
        {
          v14 = *(unsigned __int8 *)v13;
          if (v14 == 36)
          {
            v15 = (unsigned __int8 *)(v13 + 1);
            if (v13 + 1 == (const char *)v10)
              goto LABEL_42;
            v16 = (char)*v15;
            v14 = *v15;
            if (v16 > 38)
            {
              if (v16 == 39)
              {
                v21 = (std::string::value_type *)v46.__match_.__suffix_.first.__i_;
                v22 = v46.__match_.__suffix_.second.__i_;
                while (v21 != v22)
                  std::string::push_back(a1, *v21++);
                goto LABEL_44;
              }
              if (v16 == 96)
              {
                v19 = (std::string::value_type *)v46.__match_.__prefix_.first.__i_;
                v20 = v46.__match_.__prefix_.second.__i_;
                while (v19 != v20)
                  std::string::push_back(a1, *v19++);
                goto LABEL_44;
              }
LABEL_30:
              if ((v14 - 48) <= 9)
              {
                v23 = *v15 - 48;
                if (v13 + 2 != (const char *)v10)
                {
                  v24 = *((unsigned __int8 *)v13 + 2);
                  v25 = v24 - 48;
                  v26 = v24 + 10 * (int)v23 - 48;
                  if (v25 > 9)
                  {
                    v15 = (unsigned __int8 *)(v13 + 1);
                  }
                  else
                  {
                    v23 = v26;
                    v15 = (unsigned __int8 *)(v13 + 2);
                  }
                }
                v27 = &v46.__match_.__matches_.__begin_[(int)v23];
                v28 = 0xAAAAAAAAAAAAAAABLL
                    * (((char *)v46.__match_.__matches_.__end_ - (char *)v46.__match_.__matches_.__begin_) >> 3) > v23;
                p_unmatched = &v46.__match_.__unmatched_;
                if (v28)
                  p_unmatched = v27;
                v30 = (std::string::value_type *)p_unmatched->first.__i_;
                p_second = &v27->second;
                if (!v28)
                  p_second = &v46.__match_.__unmatched_.second;
                v32 = (std::string::value_type *)p_second->__i_;
                while (v30 != v32)
                  std::string::push_back(a1, *v30++);
                goto LABEL_44;
              }
LABEL_42:
              LOBYTE(v14) = 36;
              goto LABEL_43;
            }
            if (v16 != 36)
            {
              if (v16 == 38)
              {
                v17 = (std::string::value_type *)v46.__match_.__matches_.__begin_->first.__i_;
                v18 = v46.__match_.__matches_.__begin_->second.__i_;
                while (v17 != v18)
                  std::string::push_back(a1, *v17++);
                goto LABEL_44;
              }
              goto LABEL_30;
            }
            ++v13;
          }
LABEL_43:
          std::string::push_back(a1, v14);
          v15 = (unsigned __int8 *)v13;
LABEL_44:
          v13 = (const char *)(v15 + 1);
        }
        while (v15 + 1 != v10);
      }
      v9 = (std::string::value_type *)v46.__match_.__suffix_.first.__i_;
      v8 = v46.__match_.__suffix_.second.__i_;
      flags = v46.__flags_;
      v34 = v46.__flags_ | 0x800;
      v46.__flags_ |= 0x800u;
      begin = v46.__match_.__matches_.__begin_;
      v36 = &v46.__match_.__unmatched_;
      if (v46.__match_.__matches_.__end_ != v46.__match_.__matches_.__begin_)
        v36 = v46.__match_.__matches_.__begin_;
      v37 = &v46.__match_.__matches_.__begin_->second;
      if (v46.__match_.__matches_.__end_ == v46.__match_.__matches_.__begin_)
        v37 = &v46.__match_.__unmatched_.second;
      v38 = (char *)v37->__i_;
      if (v36->first.__i_ != v37->__i_)
        goto LABEL_50;
      v41 = (std::sub_match<std::__wrap_iter<const char *>> *)v46.__end_.__i_;
      if (v46.__end_.__i_ == v38)
      {
LABEL_59:
        if (begin)
        {
          v46.__match_.__matches_.__end_ = begin;
          operator delete(begin);
        }
        v46.__match_.__ready_ = 0;
        memset(&v46.__match_, 0, 41);
        memset(&v46.__match_.__prefix_, 0, 17);
        memset(&v46.__match_.__suffix_, 0, 17);
        v46.__match_.__position_start_.__i_ = 0;
      }
      else
      {
        memset(&v47.__prefix_, 0, 17);
        memset(&v47.__suffix_, 0, 17);
        v47.__ready_ = 0;
        v47.__position_start_ = 0;
        memset(&v47, 0, 41);
        v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v46.__pregex_, v38, (char *)v46.__end_.__i_, &v47, flags | 0x860);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v38, v41, (uint64_t *)&v47, 1);
        if (v47.__matches_.__begin_)
        {
          v47.__matches_.__end_ = v47.__matches_.__begin_;
          operator delete(v47.__matches_.__begin_);
        }
        if ((v42 & 1) == 0)
        {
          ++v38;
          v34 = v46.__flags_;
LABEL_50:
          v46.__flags_ = v34 | 0x80;
          v39 = (std::sub_match<std::__wrap_iter<const char *>> *)v46.__end_.__i_;
          memset(&v47.__prefix_, 0, 17);
          memset(&v47.__suffix_, 0, 17);
          v47.__ready_ = 0;
          v47.__position_start_ = 0;
          memset(&v47, 0, 41);
          v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v46.__pregex_, v38, (char *)v46.__end_.__i_, &v47, v34 | 0x80);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v38, v39, (uint64_t *)&v47, (v34 & 0x800) != 0);
          if (v47.__matches_.__begin_)
          {
            v47.__matches_.__end_ = v47.__matches_.__begin_;
            operator delete(v47.__matches_.__begin_);
          }
          if ((v40 & 1) == 0)
          {
            begin = v46.__match_.__matches_.__begin_;
            goto LABEL_59;
          }
        }
      }
    }
  }
  while (v6 != a3)
    std::string::push_back(a1, *v6++);
LABEL_64:
  if (v46.__match_.__matches_.__begin_)
  {
    v46.__match_.__matches_.__end_ = v46.__match_.__matches_.__begin_;
    operator delete(v46.__match_.__matches_.__begin_);
  }
}

void sub_1B62F3B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(const __CFDictionary *a1)
{
  const __CFNumber *v1;
  std::runtime_error *exception;

  v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[3]>(a1, "ID");
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<unsigned int,0>(v1);
}

void sub_1B62F3BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFTypeRef applesauce::CF::details::find_at_key<applesauce::CF::TypeRef,char const(&)[9]>(_QWORD *a1, const __CFDictionary *a2)
{
  const void *v3;
  const void *v4;
  CFTypeRef result;
  std::runtime_error *exception;

  v3 = applesauce::CF::details::at_key<char const(&)[9]>(a2, "cfobject");
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v4 = v3;
  result = CFRetain(v3);
  *a1 = v4;
  return result;
}

void sub_1B62F3C74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::pretty_print(applesauce::CF::details *this, __CFString *cf)
{
  CFTypeID v4;
  char *v5;
  CFStringRef v6;
  CFStringRef v7;
  const __CFString *v8;

  if (!cf)
  {
    v5 = "(null)";
    goto LABEL_5;
  }
  v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    applesauce::CF::convert_to<std::string,0>(cf, (uint64_t)this);
    return;
  }
  if (v4 == CFArrayGetTypeID())
  {
    v6 = CFCopyDescription(cf);
    v8 = v6;
    applesauce::CF::details::CFString_get_value<true>(v6, (uint64_t)this);
    if (v6)
      CFRelease(v6);
    return;
  }
  if (v4 != CFDictionaryGetTypeID())
  {
    if (v4 != CFBooleanGetTypeID())
    {
      if (v4 == CFNumberGetTypeID())
      {
        applesauce::CF::details::pretty_print((applesauce::CF::details *)cf, this);
      }
      else if (v4 == CFURLGetTypeID())
      {
        applesauce::CF::details::pretty_print(this, (CFURLRef)cf);
      }
      else
      {
        v8 = CFCopyDescription(cf);
        applesauce::CF::details::CFString_get_value<true>(v8, (uint64_t)this);
        applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef((const void **)&v8);
      }
      return;
    }
    if (applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)cf))
      v5 = "1";
    else
      v5 = "0";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(this, v5);
    return;
  }
  v7 = CFCopyDescription(cf);
  v8 = v7;
  applesauce::CF::details::CFString_get_value<true>(v7, (uint64_t)this);
  if (v7)
    CFRelease(v7);
}

void sub_1B62F3E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::DataRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1B62F3E88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>(applesauce::CF::StringRef *a1, const __CFDictionary *a2)
{
  const void *v3;
  const void *v4;
  std::runtime_error *exception;

  v3 = applesauce::CF::details::at_key<char const(&)[7]>(a2, "AUName");
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v4 = v3;
  CFRetain(v3);
  return applesauce::CF::StringRef::StringRef(a1, v4);
}

void sub_1B62F3F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUDSPGraph::SetBoxPreset(AUDSPGraph *this, CFTypeRef cf)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  _QWORD *v8;
  char v9;
  int v10;
  void *v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  _BYTE *v20;
  void *v21;
  NSObject *v22;
  const __CFString **v24;
  _BYTE *v25;
  std::runtime_error *v26;
  std::runtime_error *exception;
  std::runtime_error *v28;
  std::runtime_error *v29;
  CFTypeRef cfa;
  CFTypeRef v31;
  CFTypeRef v32;
  _BYTE buf[12];
  __int16 v34;
  _BYTE *v35;
  char v36;
  _BYTE __p[22];
  __int16 v38;
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v32 = 0;
    goto LABEL_61;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v32, cf);
  if (!v32)
  {
LABEL_61:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_63;
  }
  v4 = applesauce::CF::details::at_key<char const(&)[8]>((const __CFDictionary *)v32, "BoxName");
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
LABEL_63:
  }
  v5 = v4;
  CFRetain(v4);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v31, v5);
  if (!v32)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    goto LABEL_66;
  }
  v6 = applesauce::CF::details::at_key<char const(&)[7]>((const __CFDictionary *)v32, "Preset");
  if (!v6)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not find item");
LABEL_66:
  }
  v7 = v6;
  CFRetain(v6);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, v7);
  v8 = *(_QWORD **)(*((_QWORD *)this + 92) + 24);
  if (!v8)
    goto LABEL_30;
  v9 = 0;
  do
  {
    while (1)
    {
      if (!v31)
      {
        v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v31, (uint64_t)__p);
      v10 = SHIBYTE(v38);
      v11 = *(void **)__p;
      if (v38 >= 0)
        v12 = __p;
      else
        v12 = *(_BYTE **)__p;
      if (v38 >= 0)
        v13 = HIBYTE(v38);
      else
        v13 = *(_QWORD *)&__p[8];
      v14 = (char *)v8[2];
      v15 = v14 + 32;
      if (v14[55] < 0)
        v15 = *(const char **)v15;
      if (v13 != strlen(v15) || memcmp(v12, v15, v13))
      {
        if (v10 < 0)
          operator delete(v11);
        break;
      }
      v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 216))(v14);
      if (SHIBYTE(v38) < 0)
        operator delete(*(void **)__p);
      if (!v16)
        break;
      (*(void (**)(_QWORD, CFTypeRef))(*(_QWORD *)v8[2] + 352))(v8[2], cfa);
      v17 = 0;
      v8 = (_QWORD *)*v8;
      v9 = 1;
      if (!v8)
        goto LABEL_46;
    }
    v8 = (_QWORD *)*v8;
  }
  while (v8);
  if ((v9 & 1) != 0)
  {
    v17 = 0;
    goto LABEL_46;
  }
LABEL_30:
  if (*((_BYTE *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v18 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v19 = (_QWORD *)((char *)this + 632);
      if (*((char *)this + 655) < 0)
        v19 = (_QWORD *)*v19;
      if (!v31)
      {
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v31, (uint64_t)buf);
      v20 = v36 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v19;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = this;
      v38 = 2080;
      v39 = v20;
      _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%p] failed to find %s box inside DSPGraph", __p, 0x20u);
      if (v36 < 0)
      {
        v21 = *(void **)buf;
        goto LABEL_58;
      }
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1)
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
    v22 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v24 = (const __CFString **)applesauce::CF::StringRef::operator->(&v31);
      applesauce::CF::convert_to<std::string,0>(*v24, (uint64_t)__p);
      v25 = v38 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = this;
      v34 = 2080;
      v35 = v25;
      _os_log_error_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "[%p] failed to find %s box inside DSPGraph", buf, 0x16u);
      if (SHIBYTE(v38) < 0)
      {
        v21 = *(void **)__p;
LABEL_58:
        operator delete(v21);
      }
    }
  }
  v17 = 4294956445;
LABEL_46:
  if (cfa)
    CFRelease(cfa);
  if (v31)
    CFRelease(v31);
  if (v32)
    CFRelease(v32);
  return v17;
}

uint64_t std::make_unique[abi:ne180100]<AUProcessingBlock_DSPGraph,std::shared_ptr<DSPGraph::Graph> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = MEMORY[0x1BCC94BD0](v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B62F47E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0xE1C40E9FAB1CALL);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::to_description(applesauce::CF::DictionaryRef *this, const void *a2)
{
  const __CFString *v3;

  v3 = CFCopyDescription(a2);
  applesauce::CF::details::CFString_get_value<true>(v3, (uint64_t)this);
  if (v3)
    CFRelease(v3);
}

void sub_1B62F484C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *applesauce::CF::details::pretty_print(applesauce::CF::details *this, CFURLRef anURL)
{
  const __CFString *v3;

  v3 = CFURLGetString(anURL);
  if (v3)
    return applesauce::CF::convert_to<std::string,0>(v3, (uint64_t)this);
  else
    return std::string::basic_string[abi:ne180100]<0>(this, "(null)");
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1B62F4A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(void ****a1)
{
  void ***v1;
  void ***v2;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  int64x2_t v11;
  unint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  BOOL v17;
  uint64_t **v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  uint64_t **v23;
  void **v24;
  void ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int64x2_t v36;
  unint64_t v37;
  CFArrayRef v38;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  int64x2_t v43;
  _QWORD v44[2];
  uint64_t **v45;
  int64x2_t *v46;
  int64x2_t v47;
  unint64_t v48;
  _QWORD *v49;

  v2 = *a1;
  v1 = a1[1];
  v43 = 0uLL;
  v44[0] = 0;
  if (v1 != v2)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * (v1 - v2);
    if (v4 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v49 = v44;
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v4);
    v7 = (_QWORD *)v43.i64[1];
    v8 = (_QWORD *)v43.i64[0];
    if (v43.i64[1] == v43.i64[0])
    {
      v11 = vdupq_n_s64(v43.u64[1]);
      v9 = v5;
    }
    else
    {
      v9 = v5;
      do
      {
        v10 = *--v7;
        *((_QWORD *)v9 - 1) = v10;
        v9 -= 8;
        *v7 = 0;
      }
      while (v7 != v8);
      v11 = v43;
    }
    v43.i64[0] = (uint64_t)v9;
    v43.i64[1] = (uint64_t)v5;
    v47 = v11;
    v12 = v44[0];
    v44[0] = &v5[8 * v6];
    v48 = v12;
    v46 = (int64x2_t *)v11.i64[0];
    std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v46);
    v2 = *a1;
    v1 = a1[1];
  }
  if (v2 != v1)
  {
    while (1)
    {
      v41 = 0;
      v42 = 0;
      v40 = &v41;
      v13 = *v2;
      if (*v2 != (void **)(v2 + 1))
        break;
LABEL_38:
      v26 = v43.i64[1];
      if (v43.i64[1] >= v44[0])
      {
        v28 = (v43.i64[1] - v43.i64[0]) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v29 = (v44[0] - v43.i64[0]) >> 2;
        if (v29 <= v28 + 1)
          v29 = v28 + 1;
        if (v44[0] - v43.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v49 = v44;
        if (v30)
          v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v30);
        else
          v31 = 0;
        v46 = (int64x2_t *)v30;
        v47.i64[0] = v30 + 8 * v28;
        v47.i64[1] = v47.i64[0];
        v48 = v30 + 8 * v31;
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v47.i64[0], &v40);
        v32 = v47.i64[0];
        v27 = v47.i64[1] + 8;
        v47.i64[1] += 8;
        v33 = (_QWORD *)v43.i64[1];
        v34 = (_QWORD *)v43.i64[0];
        if (v43.i64[1] == v43.i64[0])
        {
          v36 = vdupq_n_s64(v43.u64[1]);
        }
        else
        {
          do
          {
            v35 = *--v33;
            *(_QWORD *)(v32 - 8) = v35;
            v32 -= 8;
            *v33 = 0;
          }
          while (v33 != v34);
          v36 = v43;
          v27 = v47.i64[1];
        }
        v43.i64[0] = v32;
        v43.i64[1] = v27;
        v47 = v36;
        v37 = v44[0];
        v44[0] = v48;
        v48 = v37;
        v46 = (int64x2_t *)v36.i64[0];
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v46);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v43.i64[1], &v40);
        v27 = v26 + 8;
      }
      v43.i64[1] = v27;
      std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v41);
      v2 += 3;
      if (v2 == v1)
        goto LABEL_55;
    }
    while (1)
    {
      v14 = v41;
      if (v40 == &v41)
      {
        v16 = &v41;
        if (!v41)
          goto LABEL_23;
      }
      else
      {
        v15 = &v41;
        if (v41)
        {
          do
          {
            v16 = (uint64_t **)v14;
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
        }
        else
        {
          do
          {
            v16 = (uint64_t **)v15[2];
            v17 = *v16 == (uint64_t *)v15;
            v15 = v16;
          }
          while (v17);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v13 + 4) & 0x80) == 0)
        {
          v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)&v40, &v45, v13 + 4);
          goto LABEL_20;
        }
        if (!v41)
        {
LABEL_23:
          v45 = &v41;
          v18 = &v41;
LABEL_24:
          v19 = (char *)operator new(0x40uLL);
          v46 = (int64x2_t *)v19;
          v47.i64[0] = (uint64_t)&v41;
          v47.i8[8] = 0;
          v20 = (std::string *)(v19 + 32);
          if (*((char *)v13 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v13[4], (std::string::size_type)v13[5]);
          }
          else
          {
            v21 = *((_OWORD *)v13 + 2);
            *((_QWORD *)v19 + 6) = v13[6];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          v22 = v13[7];
          if (v22)
            CFRetain(v13[7]);
          *((_QWORD *)v19 + 7) = v22;
          v47.i8[8] = 1;
          v23 = v45;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = v23;
          *v18 = (uint64_t *)v19;
          if (*v40)
          {
            v40 = (uint64_t **)*v40;
            v19 = (char *)*v18;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, (uint64_t *)v19);
          ++v42;
          v46 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46);
          goto LABEL_32;
        }
      }
      v45 = v16;
      v18 = v16 + 1;
LABEL_20:
      if (!*v18)
        goto LABEL_24;
LABEL_32:
      v24 = (void **)v13[1];
      if (v24)
      {
        do
        {
          v25 = (void ***)v24;
          v24 = (void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (void ***)v13[2];
          v17 = *v25 == v13;
          v13 = (void **)v25;
        }
        while (!v17);
      }
      v13 = (void **)v25;
      if (v25 == v2 + 1)
        goto LABEL_38;
    }
  }
LABEL_55:
  v38 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v43);
  v46 = &v43;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  return v38;
}

void sub_1B62F4E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void **std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>(uint64_t *a1, const void *a2)
{
  CFTypeID TypeID;
  CFIndex Count;
  int v6;
  uint64_t v7;
  CFIndex v8;
  uint64_t v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  CFIndex v12;
  uint64_t i;
  const void *v14;
  void *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t ***v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t ***v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  std::runtime_error *v36;
  std::runtime_error *exception;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t **v40;
  void *__p[2];
  void *v42;
  CFTypeRef cf;
  uint64_t *v44;
  uint64_t v45;
  void *v46[2];
  void *v47;
  void **values[3];
  void **keys[3];
  _QWORD v50[2];
  char v51;
  uint64_t v52;

  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  Count = CFArrayGetCount((CFArrayRef)a2);
  v6 = Count;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v44 = a1 + 2;
    __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)Count);
    __p[1] = __p[0];
    v42 = __p[0];
    cf = (char *)__p[0] + 24 * v7;
    std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(a1, __p);
    std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer((uint64_t)__p);
  }
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = v6;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
      if (!ValueAtIndex || (v11 = CFDictionaryGetTypeID(), v11 != CFGetTypeID(ValueAtIndex)))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Could not convert");
      }
      v12 = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
      v39 = 0;
      v40 = 0;
      v38 = &v39;
      std::vector<void const*>::vector(keys, v12);
      std::vector<void const*>::vector(values, v12);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)ValueAtIndex, (const void **)keys[0], (const void **)values[0]);
      if (v12)
      {
        for (i = 0; i != v12; ++i)
        {
          applesauce::CF::convert_to<std::string,0>((const __CFString *)keys[0][i], (uint64_t)v46);
          v14 = values[0][i];
          if (v14)
            CFRetain(values[0][i]);
          *(_OWORD *)__p = *(_OWORD *)v46;
          v15 = v47;
          v46[1] = 0;
          v47 = 0;
          v45 = 0;
          v46[0] = 0;
          v42 = v15;
          cf = v14;
          v16 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)&v38, &v52, __p);
          if (!*v16)
          {
            v17 = v16;
            v18 = (uint64_t *)operator new(0x40uLL);
            v50[0] = v18;
            v50[1] = &v39;
            v51 = 0;
            v19 = (std::string *)(v18 + 4);
            if (SHIBYTE(v42) < 0)
            {
              std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v18[6] = (uint64_t)v42;
            }
            v18[7] = (uint64_t)cf;
            cf = 0;
            v51 = 1;
            v20 = v52;
            *v18 = 0;
            v18[1] = 0;
            v18[2] = v20;
            *v17 = v18;
            if (*v38)
            {
              v38 = (uint64_t **)*v38;
              v18 = *v17;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v39, v18);
            v40 = (uint64_t **)((char *)v40 + 1);
            v50[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
          }
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v42) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v47) < 0)
            operator delete(v46[0]);
        }
      }
      if (values[0])
      {
        values[1] = values[0];
        operator delete(values[0]);
      }
      if (keys[0])
      {
        keys[1] = keys[0];
        operator delete(keys[0]);
      }
      v21 = (uint64_t ***)a1[1];
      v22 = a1[2];
      if ((unint64_t)v21 >= v22)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - *a1) >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a1) >> 3);
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v27;
        v44 = a1 + 2;
        if (v29)
          v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v29);
        else
          v30 = 0;
        v32 = (uint64_t ***)(v29 + 24 * v26);
        __p[0] = (void *)v29;
        __p[1] = v32;
        cf = (CFTypeRef)(v29 + 24 * v30);
        *v32 = v38;
        v33 = v39;
        v32[1] = (uint64_t **)v39;
        v34 = (uint64_t **)(v32 + 1);
        v35 = v40;
        v32[2] = v40;
        if (v35)
        {
          v33[2] = (uint64_t)v34;
          v38 = &v39;
          v39 = 0;
          v40 = 0;
        }
        else
        {
          *v32 = v34;
        }
        v42 = v32 + 3;
        std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(a1, __p);
        v31 = (_QWORD *)a1[1];
        std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v21 = v38;
        v23 = v39;
        v21[1] = (uint64_t **)v39;
        v24 = (uint64_t **)(v21 + 1);
        v25 = v40;
        v21[2] = v40;
        if (v25)
        {
          v23[2] = (uint64_t)v24;
          v38 = &v39;
          v39 = 0;
          v40 = 0;
        }
        else
        {
          *v21 = v24;
        }
        v31 = v21 + 3;
      }
      a1[1] = (uint64_t)v31;
      std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v39);
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_1B62F5348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;

  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__owns_one_state<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E69AC940;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v16 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v16)
          v17 = v16;
        else
          v17 = (unsigned __int8 *)a3;
        if (v17 == (unsigned __int8 *)a2)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, v17);
        }
        if (v17 != (unsigned __int8 *)a3)
          ++v17;
        while (v17 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v17, 10, a3 - (char *)v17);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v17)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)v17, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v17 = v28;
          else
            v17 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v12 = (_QWORD *)operator new();
          v13 = *(_QWORD *)(a1 + 56);
          v14 = *(_QWORD *)(v13 + 8);
          v12[1] = v14;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v21 = (char *)memchr(v11, 10, a3 - v11);
          if (v21)
            v22 = v21;
          else
            v22 = a3;
          v23 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v22 == v11)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 8);
            v24[1] = v26;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11, v22);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v23);
          if (v22 == a3)
            v11 = v22;
          else
            v11 = v22 + 1;
        }
        break;
      default:
        goto LABEL_52;
    }
    return (unsigned __int8 *)a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_52:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
}

void sub_1B62F58C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == a3)
    return a3;
  while (*v8 == 124)
  {
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
    }
    while (v8 != v14);
    if (v13 == v8)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == (char *)a3)
    return (unsigned __int8 *)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E69ACA08;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E69ACA38;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *first;
  int v20;
  uint64_t v21;
  BOOL v22;
  std::__owns_one_state<char> *v23;
  char *v24;
  std::__node<char> *v25;
  unsigned int v26;
  char *v27;
  char *v28;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (this->__open_count_)
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_34:
      v14 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = *v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    v14 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, v10, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (unsigned __int8 *)&a2[v16];
  }
  if (v14 == (unsigned __int8 *)a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (std::__node<char> *)operator new();
      v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&unk_1E69ACDB0;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
LABEL_33:
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != (unsigned __int8 *)a2 || v14 == (unsigned __int8 *)a3)
    goto LABEL_38;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      v26 = this->__marked_count_;
      ++this->__open_count_;
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      v14 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
      if (v14 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
LABEL_32:
      v25 = v23->__first_;
      *(_QWORD *)v21 = v24 + 16;
      *(_QWORD *)(v21 + 8) = v25;
      *(_BYTE *)(v21 + 16) = v22;
      v23->__first_ = (std::__node<char> *)v21;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void *v12;
  void *v13;
  int v14;
  char *j;
  char *v16;
  unint64_t i;
  int v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  void **v23;
  void **v24;
  std::regex_traits<char>::char_class_type classname;
  char v26;
  char *v27;
  char *v28;
  void **v29;
  void *v30;
  void *v31;
  void **v32;
  int v33;
  void **v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  void **v38;
  uint64_t v39;
  void *v41[2];
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  void *__p[2];
  uint64_t v48;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_140;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_140;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_140;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        v11 = a3;
        goto LABEL_118;
      }
      v10 = *(unsigned __int8 *)v5;
      v11 = (char *)v5;
      if (v10 != 93)
        break;
LABEL_118:
      v5 = (uint64_t)v11;
LABEL_119:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_140:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    v12 = 0;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    v13 = 0;
    v11 = (char *)v5;
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      v14 = *(unsigned __int8 *)(v5 + 1);
      switch(v14)
      {
        case '.':
          v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)v43);
          v13 = (void *)HIBYTE(v44);
          v12 = v43[1];
          break;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_139;
          for (i = 0; ; ++i)
          {
            v16 = (char *)(v5 + i + 2);
            if (*v16 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
              break;
            if (&v8[-v5] == (char *)i)
              goto LABEL_139;
          }
          if (v16 == a3)
LABEL_139:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          v21 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          v22 = (char *)HIBYTE(v48);
          if (v48 >= 0)
            v23 = __p;
          else
            v23 = (void **)__p[0];
          if (v48 < 0)
            v22 = (char *)__p[1];
          (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v23, &v22[(_QWORD)v23]);
          if (v48 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          classname = std::__get_classname((const char *)v24, v21 & 1);
          if (SHIBYTE(v48) < 0)
            operator delete(__p[0]);
          if (!classname)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v26 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_114;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_139;
          for (j = 0; ; ++j)
          {
            v16 = &j[v5 + 2];
            if (*v16 == 61 && j[v5 + 3] == 93)
              break;
            if (&v8[-v5] == j)
              goto LABEL_139;
          }
          if (v16 == a3)
            goto LABEL_139;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(v48) < 0)
          {
            v27 = (char *)__p[1];
            if (!__p[1])
LABEL_141:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v28 = (char *)__p[0];
          }
          else
          {
            v27 = (char *)HIBYTE(v48);
            if (!HIBYTE(v48))
              goto LABEL_141;
            v28 = (char *)__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v28, &v27[(_QWORD)v28], (uint64_t)v45);
          v30 = (void *)HIBYTE(v46);
          if (v46 < 0)
            v30 = v45[1];
          if (v30)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v45);
          }
          else
          {
            v31 = (void *)HIBYTE(v48);
            if (v48 < 0)
              v31 = __p[1];
            if (v31 == (void *)2)
            {
              if (v48 >= 0)
                v38 = __p;
              else
                v38 = (void **)__p[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v38, *((char *)v38 + 1));
            }
            else
            {
              if (v31 != (void *)1)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              if (v48 >= 0)
                v32 = __p;
              else
                v32 = (void **)__p[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v32);
            }
          }
          if (SHIBYTE(v46) < 0)
            operator delete(v45[0]);
          if (SHIBYTE(v48) < 0)
            operator delete(__p[0]);
          v26 = 0;
LABEL_114:
          v5 = (uint64_t)(v16 + 2);
          v36 = v9;
          goto LABEL_115;
        default:
          v12 = 0;
          v13 = 0;
          v11 = (char *)v5;
          break;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if ((char)v13 >= 0)
      v12 = v13;
    if (!v12)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        v18 = *v11;
        if (v18 == 92)
        {
          v19 = v11 + 1;
          if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
            v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v19, a3, (uint64_t *)v43);
          else
            v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v19, (unsigned __int8 *)a3, (uint64_t)v43, v7);
          v11 = v20;
          goto LABEL_80;
        }
      }
      else
      {
        LOBYTE(v18) = *v11;
      }
      if ((char)v13 < 0)
      {
        v29 = (void **)v43[0];
        v43[1] = (void *)1;
      }
      else
      {
        HIBYTE(v44) = 1;
        v29 = v43;
      }
      *(_BYTE *)v29 = v18;
      *((_BYTE *)v29 + 1) = 0;
      ++v11;
    }
LABEL_80:
    if (v11 != a3)
    {
      v33 = *v11;
      if (v33 != 93)
      {
        v35 = v11 + 1;
        if (v11 + 1 != a3 && v33 == 45 && *v35 != 93)
        {
          __p[0] = 0;
          __p[1] = 0;
          v48 = 0;
          v36 = v11 + 2;
          if (v11 + 2 != a3 && *v35 == 91 && *v36 == 46)
          {
            v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)__p);
            goto LABEL_124;
          }
          if ((v5 | 0x40) == 0x40)
          {
            LODWORD(v35) = *v35;
            if ((_DWORD)v35 == 92)
            {
              if ((_DWORD)v5)
                v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, (uint64_t *)__p);
              else
                v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v11 + 2, (unsigned __int8 *)a3, (uint64_t)__p, v7);
LABEL_124:
              v36 = v37;
LABEL_125:
              *(_OWORD *)v45 = *(_OWORD *)v43;
              v39 = v44;
              v43[1] = 0;
              v44 = 0;
              *(_OWORD *)v41 = *(_OWORD *)__p;
              v42 = v48;
              v43[0] = 0;
              __p[1] = 0;
              v48 = 0;
              v46 = v39;
              __p[0] = 0;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v45, (char *)v41);
              if (SHIBYTE(v42) < 0)
                operator delete(v41[0]);
              if (SHIBYTE(v46) < 0)
                operator delete(v45[0]);
              if (SHIBYTE(v48) < 0)
                operator delete(__p[0]);
              v26 = 1;
LABEL_115:
              if (SHIBYTE(v44) < 0)
                operator delete(v43[0]);
              v11 = v36;
              if ((v26 & 1) == 0)
                goto LABEL_119;
              goto LABEL_118;
            }
          }
          else
          {
            LOBYTE(v35) = *v35;
          }
          HIBYTE(v48) = 1;
          LOBYTE(__p[0]) = (_BYTE)v35;
          goto LABEL_125;
        }
      }
    }
    if (SHIBYTE(v44) < 0)
    {
      if (v43[1])
      {
        if (v43[1] == (void *)1)
        {
          v34 = (void **)v43[0];
LABEL_89:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v34);
LABEL_100:
          v26 = 1;
          v36 = v11;
          goto LABEL_115;
        }
        v34 = (void **)v43[0];
LABEL_99:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v34, *((char *)v34 + 1));
        goto LABEL_100;
      }
      operator delete(v43[0]);
    }
    else if (HIBYTE(v44))
    {
      v34 = v43;
      if (HIBYTE(v44) == 1)
        goto LABEL_89;
      goto LABEL_99;
    }
    goto LABEL_118;
  }
  return a2;
}

void sub_1B62F697C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v6;
  int v7;
  int v8;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 != 87)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  std::basic_regex<char>::value_type v13;
  unsigned int v14;
  std::basic_regex<char>::value_type v15;
  __int16 v16;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 10;
          goto LABEL_81;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 13;
          goto LABEL_81;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 9;
          goto LABEL_81;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_91;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_91;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_91;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_91;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_91;
          v12 = -87;
LABEL_37:
          v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_53;
      }
      goto LABEL_81;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_69;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 12;
LABEL_81:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        v6 = 12;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_53:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_69;
      }
LABEL_91:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_91;
    if ((char)v4[1] < 65)
      goto LABEL_91;
    v14 = v4[1];
    if (v14 >= 0x5B && (v14 - 97) > 0x19u)
      goto LABEL_91;
    v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1B62F746C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  std::basic_regex<char> *v30;
  int v31;
  int v32;

  v3 = a2;
  if (a2 == (char *)a3)
    return v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = (unsigned __int8 *)(a2 + 1);
  v8 = *a2;
  if ((a2 + 1 != (char *)a3 || v8 != 36)
    && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_13;
  }
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
  if (v11 == v3)
  {
    if (*v3 == 46)
    {
      v12 = (std::__node<char> *)operator new();
      v13 = a1->__end_;
      first = v13->__first_;
      v12->__vftable = (std::__node<char>_vtbl *)&unk_1E69ACDB0;
      v12[1].__vftable = (std::__node<char>_vtbl *)first;
      v13->__first_ = v12;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_13:
      v11 = v3 + 1;
      goto LABEL_14;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
  }
LABEL_14:
  if (v3 == v11 && v9 != a3 && *v3 == 92)
  {
    if (2 * (v3[1] == 40))
    {
      v15 = (uint64_t)&v3[2 * (v3[1] == 40)];
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v16 = a1->__marked_count_;
      do
      {
        v17 = (unsigned __int8 *)v15;
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v15, a3);
      }
      while (v17 != (unsigned __int8 *)v15);
      if (v17 == a3 || v17 + 1 == a3 || *v17 != 92 || v17[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v11 = (char *)(v17 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v16);
    }
    else
    {
      v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
      v19 = 2;
      if (!v18)
        v19 = 0;
      v11 = &v3[v19];
    }
  }
  if (v11 != v3)
  {
    if (v11 == (char *)a3)
      return (char *)a3;
    v20 = a1->__marked_count_ + 1;
    v21 = *v11;
    if (v21 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v11;
    }
    if (v11 + 1 == (char *)a3 || v21 != 92 || v11[1] != 123)
      return v11;
    v23 = (unsigned __int8 *)(v11 + 2);
    v32 = 0;
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v23, a3, &v32);
    if (v23 == v24)
LABEL_47:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != a3)
    {
      v25 = v24 + 1;
      v26 = *v24;
      if (v26 == 44)
      {
        v31 = -1;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v24 + 1, a3, &v31);
        if (v27 != a3 && v27 + 1 != a3 && *v27 == 92 && v27[1] == 125)
        {
          v29 = v31;
          v28 = v32;
          if (v31 == -1)
          {
            v29 = -1;
          }
          else if (v31 < v32)
          {
            goto LABEL_47;
          }
          v11 = (char *)&v27[2 * (v27[1] == 125)];
          v30 = a1;
LABEL_54:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v20, 1);
          return v11;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        v11 = (char *)(v24 + 2);
        v28 = v32;
        v30 = a1;
        v29 = v32;
        goto LABEL_54;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  std::__owns_one_state<char> **p_end;
  unsigned int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::basic_regex<char> *v45;
  BOOL v46;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v48;
  std::__bracket_expression<char, std::regex_traits<char>> *v49;
  unsigned __int8 *v50;
  std::basic_regex<char> *v51;
  BOOL v52;
  std::basic_regex<char> v54;

  if (a2 == a3)
    return a2;
  v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_33;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_33;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v22);
      v20 = 2;
      return &a2[v20];
    }
    if (v6 != 94)
      goto LABEL_33;
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_22:
    *(_QWORD *)v15 = v19 + 16;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    v20 = 1;
    return &a2[v20];
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_22;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (!v8)
  {
    v8 = *v7 == 63;
    v9 = a2 + 2;
    if (v8 && v9 != a3)
    {
      v11 = (char)*v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = this->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        marked_count = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v54, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v11 != 61)
          goto LABEL_33;
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = this->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        v13 = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v54, 0, this->__marked_count_);
        this->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      v14 = v12 + 1;
      std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__start_);
      std::locale::~locale(&v54.__traits_.__loc_);
      if (v12 + 1 != a2)
        return v14;
    }
  }
LABEL_33:
  p_end = &this->__end_;
  v24 = this->__end_;
  v26 = this->__marked_count_;
  v27 = (char)*a2;
  v28 = *a2;
  if (v27 <= 91)
  {
    v29 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_94;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v30 != a3 && *v30 == 41)
          {
            --this->__open_count_;
            v29 = v30 + 1;
            goto LABEL_91;
          }
LABEL_94:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        v38 = this->__marked_count_;
        ++this->__open_count_;
        v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
        if (v39 == a3)
          goto LABEL_94;
        v40 = v39;
        if (*v39 != 41)
          goto LABEL_94;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v38);
        --this->__open_count_;
        v29 = v40 + 1;
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = *p_end;
        v37 = (*p_end)->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&unk_1E69ACAE0;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        *p_end = (std::__owns_one_state<char> *)(*p_end)->__first_;
        v29 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v29, a3, v24, v26 + 1, this->__marked_count_ + 1);
      default:
        if (v27 == 91)
        {
          v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
          goto LABEL_91;
        }
        if (v27 != 63)
          goto LABEL_56;
        goto LABEL_58;
    }
  }
  v31 = (v27 - 92);
  if (v31 > 0x21)
    goto LABEL_56;
  v29 = a2;
  if (((1 << v31) & 0x300000006) != 0)
    goto LABEL_91;
  if (v31)
  {
    if (v31 == 31)
LABEL_58:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
    v29 = a2 + 1;
    goto LABEL_91;
  }
  v29 = a2;
  if (v28 != 92)
    goto LABEL_91;
  v32 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v33 = *v32;
  v34 = v33 - 48;
  if (v33 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v34);
LABEL_90:
    v29 = a2 + 2;
    goto LABEL_91;
  }
  if ((v33 - 49) <= 8)
  {
    v29 = a2 + 2;
    if (a2 + 2 == a3)
    {
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v41 = *v29;
        if ((v41 - 48) > 9)
          break;
        if (v34 >= 0x19999999)
          goto LABEL_95;
        ++v29;
        v34 = v41 + 10 * v34 - 48;
        if (v29 == a3)
        {
          v29 = a3;
          break;
        }
      }
      if (!v34)
LABEL_95:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v34 > v26)
      goto LABEL_95;
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v34);
    if (v32 != v29)
      goto LABEL_91;
  }
  v42 = (char)*v32;
  if (v42 > 99)
  {
    if (v42 == 119)
    {
      v43 = this;
      v44 = 0;
      goto LABEL_82;
    }
    if (v42 == 115)
    {
      v51 = this;
      v52 = 0;
      goto LABEL_88;
    }
    if (v42 != 100)
      goto LABEL_83;
    v45 = this;
    v46 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
    v48 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v48;
    goto LABEL_90;
  }
  switch(v42)
  {
    case 'D':
      v45 = this;
      v46 = 1;
      goto LABEL_80;
    case 'S':
      v51 = this;
      v52 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v51, v52);
      v48 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      v43 = this;
      v44 = 1;
LABEL_82:
      v49 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
      v49->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v49, 95);
      goto LABEL_90;
  }
LABEL_83:
  v50 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
  if (v32 == v50)
    v29 = a2;
  else
    v29 = v50;
LABEL_91:
  v14 = a2;
  if (v29 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v29, a3, v24, v26 + 1, this->__marked_count_ + 1);
  return v14;
}

void sub_1B62F7E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      v7 = (uint64_t *)(v2 + v5 - 16);
      v8 = *v7;
      *(_QWORD *)(v4 + v5 - 16) = *v7;
      v9 = v4 + v5 - 16;
      v10 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 8) = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *(_QWORD *)(v2 + v5 - 24) = v7;
        *v7 = 0;
        *(_QWORD *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 24) = v9;
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string const,applesauce::CF::TypeRef>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

CFDictionaryRef *std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>(CFDictionaryRef *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  CFStringRef *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  CFDictionaryRef CFDictionaryRef;
  int64x2_t v23;
  _QWORD v24[3];
  void **v25;
  int64x2_t v26;
  void **v27;
  _QWORD *v28;

  v23 = 0uLL;
  v24[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v23, a2[2]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = (CFStringRef *)v23.i64[1];
    do
    {
      if ((unint64_t)v7 >= v24[0])
      {
        v8 = ((uint64_t)v7 - v23.i64[0]) >> 4;
        if ((unint64_t)(v8 + 1) >> 60)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v9 = (v24[0] - v23.i64[0]) >> 3;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if (v24[0] - v23.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v28 = v24;
        if (v10)
          v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v24, v10);
        else
          v11 = 0;
        v25 = v11;
        v26.i64[0] = (uint64_t)&v11[2 * v8];
        v26.i64[1] = v26.i64[0];
        v27 = &v11[2 * v10];
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v26.i64[0], (const UInt8 *)v5 + 32, (const void **)v5 + 7);
        v12 = v26.i64[0];
        v7 = (CFStringRef *)(v26.i64[1] + 16);
        v26.i64[1] += 16;
        v13 = (_QWORD *)v23.i64[1];
        v14 = (_QWORD *)v23.i64[0];
        if (v23.i64[1] == v23.i64[0])
        {
          v16 = vdupq_n_s64(v23.u64[1]);
        }
        else
        {
          do
          {
            v15 = *(v13 - 2);
            v13 -= 2;
            *(_QWORD *)(v12 - 16) = v15;
            v12 -= 16;
            *v13 = 0;
            *(_QWORD *)(v12 + 8) = v13[1];
            v13[1] = 0;
          }
          while (v13 != v14);
          v16 = v23;
          v7 = (CFStringRef *)v26.i64[1];
        }
        v23.i64[0] = v12;
        v23.i64[1] = (uint64_t)v7;
        v26 = v16;
        v17 = (void **)v24[0];
        v24[0] = v27;
        v27 = v17;
        v25 = (void **)v16.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v25);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(v7, (const UInt8 *)v5 + 32, (const void **)v5 + 7);
        v7 += 2;
      }
      v23.i64[1] = (uint64_t)v7;
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v20 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v20);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v23);
  v25 = (void **)&v23;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v25);
  *a1 = CFDictionaryRef;
  return a1;
}

void sub_1B62F817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  const __CFString *v8;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = (const __CFString *)*a3;
  if (v8)
    CFRetain(v8);
  a1[1] = v8;
  return a1;
}

void sub_1B62F8264(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>(uint64_t **a1, const void **a2)
{
  uint64_t **v4;
  uint64_t *v5;
  const void *v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;

  v4 = a1 + 1;
  v5 = (uint64_t *)operator new(0x30uLL);
  v9[0] = v5;
  v9[1] = v4;
  v10 = 0;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v5 + 4), "isAU");
  v6 = *a2;
  if (v6)
    CFRetain(v6);
  v5[5] = (uint64_t)v6;
  v10 = 1;
  v7 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)a1, &v8, (CFTypeRef *)v5 + 4);
  if (!*v7)
  {
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v8, v7, v5);
    v9[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
}

void sub_1B62F8348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = a1 + 40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize(a1 + 16, Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

_QWORD *std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E69AD490;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

__n128 AUDSPGraph::Initialize(void)::$_1::operator()(uint64_t *a1, _QWORD *__s, uint64_t *a3, __n128 a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  char *v22;
  void *v23;
  char *v24;
  __n128 result;
  int v27;
  unsigned int v28;
  __n128 v29;

  v4 = __s;
  v6 = *((unsigned __int8 *)__s + 23);
  v28 = *((_DWORD *)a1 + 3);
  if (*((char *)__s + 23) < 0)
  {
    v7 = (_QWORD *)*__s;
    v8 = __s[1];
  }
  else
  {
    v7 = __s;
    v8 = *((unsigned __int8 *)__s + 23);
  }
  v9 = *a1;
  v10 = *((_DWORD *)a1 + 6);
  v11 = *((_DWORD *)a1 + 7);
  v27 = *((_DWORD *)a1 + 8);
  if (v8 >= 17)
  {
    v12 = (char *)v7 + v8;
    a4.n128_u64[0] = a1[2];
    v29 = a4;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 70, v8 - 16);
      if (!v14)
        break;
      if (*(_QWORD *)v14 == 0x6168436465786946 && *((_QWORD *)v14 + 1) == 0x6E756F436C656E6ELL && v14[16] == 116)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        v17 = v28;
        if ((v6 & 0x80) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
      v13 = v14 + 1;
      v8 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 17);
  }
  v18 = *((_DWORD *)a3 + 3) & 0x20;
  if ((v28 & 0x20) != 0)
  {
    v11 = 1;
  }
  else if (!v11)
  {
    v19 = (v27 + 7) >> 3;
    goto LABEL_25;
  }
  v19 = v10 / v11;
LABEL_25:
  if (v18)
    v20 = 1;
  else
    v20 = *((_DWORD *)a3 + 7);
  v10 = v19 * v20;
  v17 = v18 | v28 & 0xFFFFFFDF;
  a4.n128_u32[1] = 1;
  a4.n128_u32[0] = v19 * v20;
  v29 = a4;
  v11 = *((_DWORD *)a3 + 7);
  if ((v6 & 0x80) != 0)
  {
LABEL_29:
    v21 = v4;
    v4 = (_QWORD *)*v4;
    v6 = v21[1];
  }
LABEL_30:
  if (v6 >= 15)
  {
    v22 = (char *)v4 + v6;
    v23 = v4;
    do
    {
      v24 = (char *)memchr(v23, 70, v6 - 14);
      if (!v24)
        break;
      if (*(_QWORD *)v24 == 0x6D61536465786946 && *(_QWORD *)(v24 + 7) == 0x65746152656C706DLL)
      {
        if (v24 != v22 && v24 - (char *)v4 != -1)
          goto LABEL_42;
        break;
      }
      v23 = v24 + 1;
      v6 = v22 - (_BYTE *)v23;
    }
    while (v22 - (_BYTE *)v23 >= 15);
  }
  v9 = *a3;
LABEL_42:
  *a1 = v9;
  *((_DWORD *)a1 + 3) = v17;
  result = v29;
  a1[2] = v29.n128_u64[0];
  *((_DWORD *)a1 + 6) = v10;
  *((_DWORD *)a1 + 7) = v11;
  return result;
}

uint64_t isInternalBuild(void)
{
  unsigned __int8 v0;

  {
    isInternalBuild(void)::sIsInternalBuild = isInternalBuild(void)::$_0::operator()();
  }
  return isInternalBuild(void)::sIsInternalBuild;
}

void sub_1B62F87B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DSPGraph::GraphIOData>::vector(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = 5 * a2;
    v6 = 80 * a2;
    v7 = operator new(80 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      v9 = a3[3];
      v7[2] = a3[2];
      v7[3] = v9;
      v7[4] = a3[4];
      v10 = a3[1];
      *v7 = *a3;
      v7[1] = v10;
      v7 += 5;
      v6 -= 80;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void std::vector<AudioBufferList *>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B62F8974(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL isInternalBuild(void)::$_0::operator()()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  _BOOL8 v2;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFBooleanGetValue(v0) != 0;
  CFRelease(v1);
  return v2;
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, const UInt8 **a2)
{
  const UInt8 **v4;
  const UInt8 *v5;
  const UInt8 *v6;
  UInt8 *v7;
  const UInt8 **v8;
  BOOL v9;
  CFDictionaryRef CFDictionaryRef;
  void **v11[3];
  void ***v12;

  memset(v11, 0, sizeof(v11));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v11, (unint64_t)a2[2]);
  v6 = *a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != (const UInt8 *)v4)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(v11, v5 + 32, (uint64_t)(v5 + 56));
      v7 = (UInt8 *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = (const UInt8 **)v7;
          v7 = *(UInt8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const UInt8 **)*((_QWORD *)v5 + 2);
          v9 = *v8 == v5;
          v5 = (const UInt8 *)v8;
        }
        while (!v9);
      }
      v5 = (const UInt8 *)v8;
    }
    while (v8 != v4);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v11);
  v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *a1 = CFDictionaryRef;
}

void sub_1B62F8A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B62F8DC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AULoudnessMeter::~AULoudnessMeter(AULoudnessMeter *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AULoudnessMeter::Initialize(AULoudnessMeter *this)
{
  unsigned int v2;

  v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessMeter *)((char *)this + 80), 0) + 108);
  if (v2 < 3 || v2 == *((unsigned __int16 *)this + 900))
    return AUDspLib::Initialize(this);
  else
    return 4294956428;
}

uint64_t AULoudnessMeter::GetParameter(AULoudnessMeter *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v6;
  float Parameter;
  uint64_t result;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  uint64_t v14;

  v6 = *((_QWORD *)this + 66);
  if (!v6)
    return 4294956429;
  switch(a2)
  {
    case 'd':
      DspLib::LoudnessMeter::Algorithm::integratedLoudness((DspLib::LoudnessMeter::Algorithm *)v6);
      break;
    case 'e':
      if (*(_BYTE *)(v6 + 560))
        Parameter = DspLib::amp2dBSafe((DspLib *)v6, *(float *)(v6 + 456), 0.000001);
      else
        Parameter = -120.0;
      break;
    case 'f':
      Parameter = *(float *)(v6 + 452);
      break;
    case 'g':
      v14 = 448;
      if (!*(_BYTE *)(v6 + 561))
        v14 = 564;
      Parameter = *(float *)(v6 + v14);
      break;
    default:
      Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
      Parameter = ausdk::AUElement::GetParameter(Element, a2);
      break;
  }
  result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AULoudnessMeter::GetParameterList(AULoudnessMeter *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t i;

  if (a2)
    return 4294956430;
  *a4 = 9;
  if (!a3)
    return 0;
  for (i = 0; i != 5; ++i)
    a3[i] = DspLib::LoudnessMeter::Parameters::kAUParameters[i];
  result = 0;
  *(_OWORD *)(a3 + 5) = xmmword_1B66A1270;
  return result;
}

uint64_t AULoudnessMeter::GetParameterInfo(AULoudnessMeter *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v4;

  if ((a3 & 0xFFFFFFFC) != 0x64)
    return AUDspLib::GetParameterInfo(this, a2, a3, buffer);
  buffer->unit = kAudioUnitParameterUnit_Decibels;
  *(_QWORD *)&buffer->minValue = 0x42200000C2F00000;
  *(_QWORD *)&buffer->defaultValue = 0x40008000C2F00000;
  switch(a3)
  {
    case 'd':
      v4 = CFSTR("integrated loudness");
      goto LABEL_8;
    case 'e':
      v4 = CFSTR("true peak");
      goto LABEL_8;
    case 'f':
      v4 = CFSTR("momentary loudness");
      goto LABEL_8;
    case 'g':
      v4 = CFSTR("short term loudness");
LABEL_8:
      buffer->cfNameString = v4;
      buffer->flags = 1207992320;
      CFStringGetCString(v4, buffer->name, 52, 0x8000100u);
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t AULoudnessMeter::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = AUDspLib::RestoreState(this, a2);
  if (!(_DWORD)result)
    return AUDspLib::loadDefaultAudioChannelLayout((AUDspLib *)this, (CFDictionaryRef)a2);
  return result;
}

uint64_t AULoudnessMeter::GetParameterValueStrings(AULoudnessMeter *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;

  if (!a4)
    return 0;
  if (*(_DWORD *)(*((_QWORD *)this + 211) + 4 * a3))
    return 4294956418;
  v6 = CFArrayCreate(0, (const void **)&DspLib::LoudnessMeter::Parameters::kStateNames, 4, MEMORY[0x1E0C9B378]);
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t AULoudnessMeter::Version(AULoudnessMeter *this)
{
  return 0x20000;
}

DspLib::LoudnessMeter::Algorithm *AULoudnessMeter::newDspLibAlgorithm(AULoudnessMeter *this)
{
  DspLib::LoudnessMeter::Algorithm *v1;

  v1 = (DspLib::LoudnessMeter::Algorithm *)operator new();
  DspLib::LoudnessMeter::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B62F9174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C4041E411AFLL);
  _Unwind_Resume(a1);
}

void AUSignalCombiner::~AUSignalCombiner(AUSignalCombiner *this)
{
  AUSignalCombiner::~AUSignalCombiner(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E69D1578;
  v10 = (void **)((char *)this + 1584);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v2 = (void *)*((_QWORD *)this + 193);
  if (v2)
  {
    *((_QWORD *)this + 194) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 190);
  if (v3)
  {
    *((_QWORD *)this + 191) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 187);
  if (v4)
  {
    *((_QWORD *)this + 188) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 184);
  if (v5)
  {
    *((_QWORD *)this + 185) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 181);
  if (v6)
  {
    *((_QWORD *)this + 182) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 178);
  if (v7)
  {
    *((_QWORD *)this + 179) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 175);
  if (v8)
  {
    *((_QWORD *)this + 176) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 172);
  if (v9)
  {
    *((_QWORD *)this + 173) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 82));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 79));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 76));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 73));
  ausdk::AUBase::~AUBase(this);
}

void AUSignalCombiner::CreateExtendedElements(int64x2_t *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize(this + 98, (ausdk::AUBase *)this, 4, 8);
  for (i = 0; i != 8; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = this[100].i64[1];
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = this[99].i64[0];
      if (i >= (this[99].i64[1] - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B62F92F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUSignalCombiner::Initialize(AUSignalCombiner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  uint64_t Element;
  uint64_t v11;
  double v12;
  float v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if ((v3 - 21) >= 0xFFFFFFEC && (_DWORD)v5 != 0 && v5 <= 0x15)
  {
    v9 = 0;
    while (1)
    {
      Element = ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), v9);
      if (*(_DWORD *)(Element + 88) != 1718773105)
        break;
      v11 = Element;
      v12 = *(double *)(Element + 80);
      v13 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
      if (v12 != v13 || *(_DWORD *)(v11 + 108) == 0)
        break;
      if ((_DWORD)v3 == ++v9)
      {
        v15 = 0;
        while (1)
        {
          v16 = ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 128), v15);
          if (*(_DWORD *)(v16 + 88) != 1718773105)
            break;
          v17 = v16;
          v18 = *(double *)(v16 + 80);
          v19 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
          if (v18 != v19 || *(_DWORD *)(v17 + 108) > 2u)
            break;
          if ((_DWORD)v5 == ++v15)
          {
            v21 = *((_DWORD *)this + 84);
            *((_DWORD *)this + 133) = v21;
            *((_DWORD *)this + 134) = v21 + 1;
            *((_DWORD *)this + 135) = v3;
            *((_DWORD *)this + 136) = v5;
            v28 = 0;
            std::vector<float *>::assign((char **)this + 172, v3, &v28);
            v28 = 0;
            std::vector<float *>::assign((char **)this + 175, v3, &v28);
            v22 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 178, v22, &v28);
            v23 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 181, v23, &v28);
            v24 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 184, v24, &v28);
            v25 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 187, v25, &v28);
            v26 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 190, v26, &v28);
            v27 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 193, v27, &v28);
            (*(void (**)(AUSignalCombiner *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
            return 0;
          }
        }
        return 4294956428;
      }
    }
  }
  return 4294956428;
}

uint64_t AUSignalCombiner::Reset(AUSignalCombiner *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  unint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;

  *(_OWORD *)((char *)this + 548) = xmmword_1B6627BC0;
  *(_QWORD *)((char *)this + 564) = 1;
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::AUElement::SetParameter(v3, 0xAu, 0.0, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0xBu, 0.0, 0);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 0x33u, 0.0, 0);
  if (*((_DWORD *)this + 135))
  {
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)this + 15);
      if (v12)
      {
        v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 32))(v12, v11);
      }
      else
      {
        v14 = *((_QWORD *)this + 12);
        if (v11 >= (*((_QWORD *)this + 13) - v14) >> 3)
          v13 = 0;
        else
          v13 = *(ausdk::AUElement **)(v14 + 8 * v11);
      }
      ausdk::AUElement::SetParameter(v13, 0x33u, -1.0, 0);
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 135));
  }
  AUSignalCombiner::propagateParameterChanges(this);
  return 0;
}

uint64_t AUSignalCombiner::GetPropertyInfo(AUSignalCombiner *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1001)
  {
    if (a2 != 1002)
    {
      if (a2 == 1003)
      {
        *a6 = 0;
        v8 = 8;
        goto LABEL_13;
      }
      if (a2 != 3700)
        return result;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2 == 21)
  {
LABEL_11:
    *a6 = 1;
    v8 = 4;
    goto LABEL_13;
  }
  if (a2 == 1001)
  {
LABEL_10:
    *a6 = 0;
    v8 = 4 * *((_DWORD *)this + 84) + 4;
LABEL_13:
    result = 0;
    *a5 = v8;
  }
  return result;
}

uint64_t AUSignalCombiner::GetProperty(AUSignalCombiner *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  const void *v5;
  const void *v6;
  uint64_t result;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  CFArrayRef v17;
  const void *v18[5];

  if (a3)
    return 4294956417;
  v18[3] = v5;
  v18[4] = v6;
  result = 4294956417;
  if (a2 <= 1001)
  {
    if (a2 == 21)
    {
      result = 0;
      v10 = *((unsigned __int8 *)this + 528);
LABEL_26:
      *__dst = v10;
      return result;
    }
    if (a2 != 1001)
      return result;
    if (*((_BYTE *)this + 17))
    {
      v11 = *((_DWORD *)this + 133);
      if (v11 == *((_DWORD *)this + 84))
      {
        v12 = __CFADD__(v11, 1);
        v13 = v11 + 1;
        if (!v12)
          memmove(__dst, *((const void **)this + 193), 4 * v13);
        return 0;
      }
    }
    return 4294956446;
  }
  if (a2 != 1002)
  {
    if (a2 != 1003)
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v10 = *((unsigned __int8 *)this + 376);
      goto LABEL_26;
    }
    if (*((_BYTE *)this + 17) && *((_DWORD *)this + 133) == *((_DWORD *)this + 84))
    {
      v17 = applesauce::CF::details::make_CFArrayRef<float,std::__wrap_iter<float const*>>(*((int **)this + 193), *((int **)this + 194));
      v18[0] = 0;
      *(_QWORD *)__dst = v17;
      applesauce::CF::ArrayRef::~ArrayRef(v18);
      return 0;
    }
    return 4294956446;
  }
  if (!*((_BYTE *)this + 17))
    return 4294956446;
  v14 = *((_DWORD *)this + 133);
  if (v14 != *((_DWORD *)this + 84))
    return 4294956446;
  if (v14 == -1)
    return 0;
  v15 = 0;
  v16 = *((_QWORD *)this + 193);
  do
  {
    result = 0;
    __dst[v15] = *(float *)(v16 + 4 * v15);
    ++v15;
  }
  while (v15 < (*((_DWORD *)this + 133) + 1));
  return result;
}

uint64_t AUSignalCombiner::SetProperty(AUSignalCombiner *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_BYTE *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUSignalCombiner::SetParameter(AUSignalCombiner *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  uint64_t **v12;
  char *v13;
  uint64_t result;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3 == 4)
  {
    v13 = (char *)this + 564;
  }
  else
  {
    if (a3 == 1)
    {
      v12 = (uint64_t **)((char *)this + 600);
    }
    else
    {
      if (a3)
        return 4294956418;
      v12 = (uint64_t **)((char *)this + 576);
    }
    if ((*((_BYTE *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(v12[1], a2) + 13) & 0x80) != 0)
      v13 = (char *)this + 556;
    else
      v13 = (char *)this + 548;
  }
  result = 0;
  ++*(_DWORD *)v13;
  return result;
}

uint64_t AUSignalCombiner::CanScheduleParameters(AUSignalCombiner *this)
{
  return 0;
}

uint64_t AUSignalCombiner::ProcessMultipleBufferLists(AUSignalCombiner *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t mNumberBuffers;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  const AudioBufferList *v22;
  void *mData;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  uint64_t v44;
  unint64_t v45;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  float v55;
  vDSP_Length v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  unsigned int v69;
  vDSP_Length v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  vDSP_Length v75;
  uint64_t v76;
  float *v77;
  vDSP_Length v78;
  float *v79;
  vDSP_Length v80;
  float v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  unint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  char *__dst;
  float __B;
  DSPSplitComplex __C;
  DSPSplitComplex __A;

  if (*((_DWORD *)this + 133) != a3)
    return 4294956422;
  if (*((_DWORD *)this + 135) != a4 || *((_DWORD *)this + 136) != a6)
    return 4294956419;
  v10 = 2 * a3;
  if (a6 >= a4)
    v11 = a4;
  else
    v11 = a6;
  if ((_DWORD)v11)
  {
    v12 = 0;
    do
    {
      if (v10)
        memmove(a7[v12]->mBuffers[0].mData, a5[v12]->mBuffers[0].mData, 4 * v10);
      if (!(v12 * 8) && *((_BYTE *)this + 716))
      {
        mNumberBuffers = (*a5)->mNumberBuffers;
        if ((mNumberBuffers & 1) != 0 || (*a7)->mNumberBuffers < 2)
        {
          *((_BYTE *)this + 716) = 0;
        }
        else if (v10)
        {
          memmove(*(void **)&(*a7)[1].mBuffers[0].mNumberChannels, *(const void **)((char *)&(*a5)->mBuffers[0].mData + ((8 * mNumberBuffers) & 0x7FFFFFFF0)), 4 * v10);
        }
      }
      ++v12;
    }
    while (v11 != v12);
    a6 = *((_DWORD *)this + 136);
  }
  if (v11 < a6)
  {
    do
    {
      if (v10)
      {
        memmove(a7[v11]->mBuffers[0].mData, a5[*((_DWORD *)this + 135) - 1]->mBuffers[0].mData, 4 * v10);
        a6 = *((_DWORD *)this + 136);
      }
      ++v11;
    }
    while (v11 < a6);
  }
  vDSP_vfill(&AlgorithmUtils::kZerof, *((float **)this + 193), 1, *((unsigned int *)this + 134));
  if (!*((_BYTE *)this + 528))
  {
    AUSignalCombiner::propagateParameterChanges(this);
    *((_DWORD *)this + 342) = 0;
    if (*((_DWORD *)this + 135))
    {
      v14 = 0;
      v15 = (2 * *((_DWORD *)this + 133));
      v16 = (_DWORD *)((char *)this + 748);
      while (1)
      {
        v17 = *(v16 - 5);
        if (v17 < 0)
          v17 = *((_DWORD *)this + 171);
        *(v16 - 1) = v17;
        v18 = *(v16 - 4);
        if (v18 == 1 || v18 == 2 && *((_BYTE *)this + 677))
          *(v16 - 1) = *((_DWORD *)this + 170);
        v19 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), v14) + 108) - 1;
        v20 = *(v16 - 2);
        if (v19 >= *(v16 - 1))
          v19 = *(v16 - 1);
        *(v16 - 1) = v19;
        if ((v20 & 0x80000000) == 0 && (_DWORD)v15)
        {
          if (*((_DWORD *)this + 136) - 1 < v20)
            v20 = *((_DWORD *)this + 136) - 1;
          memmove(a7[v20]->mBuffers[0].mData, a5[v14]->mBuffers[v19].mData, 4 * v15);
        }
        if ((*v16 & 0x80000000) != 0)
        {
          if (*((_BYTE *)v16 - 12))
          {
LABEL_42:
            v21 = *(v16 - 1);
            *(_QWORD *)(*((_QWORD *)this + 172) + 8 * v14) = a5[v14]->mBuffers[v21].mData;
            v22 = a5[v14];
            if ((v22->mNumberBuffers & 1) != 0)
            {
              mData = 0;
              *((_BYTE *)this + 716) = 0;
            }
            else if (*((_BYTE *)this + 716))
            {
              mData = v22->mBuffers[(v21 + (v22->mNumberBuffers >> 1))].mData;
            }
            else
            {
              mData = 0;
            }
            *(_QWORD *)(*((_QWORD *)this + 175) + 8 * v14) = mData;
            ++*((_DWORD *)this + 342);
            goto LABEL_50;
          }
        }
        else if (*v16)
        {
          goto LABEL_42;
        }
        *(_QWORD *)(*((_QWORD *)this + 172) + 8 * v14) = 0;
        *(_QWORD *)(*((_QWORD *)this + 175) + 8 * v14) = 0;
LABEL_50:
        v24 = *((unsigned int *)this + 173);
        if ((v24 & 0x80000000) == 0 && v14 == v24)
        {
          v25 = *(v16 - 1);
          v26 = *((_QWORD *)this + 201);
          if (v26)
          {
            v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 32))(v26, v25);
          }
          else
          {
            v28 = *((_QWORD *)this + 198);
            if (v25 >= (*((_QWORD *)this + 199) - v28) >> 3)
              v27 = 0;
            else
              v27 = *(ausdk::AUElement **)(v28 + 8 * v25);
          }
          *((float *)this + 302) = ausdk::AUElement::GetParameter(v27, 0);
          v29 = *(v16 - 1);
          v30 = *((_QWORD *)this + 201);
          if (v30)
          {
            v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 32))(v30, v29);
          }
          else
          {
            v32 = *((_QWORD *)this + 198);
            if (v29 >= (*((_QWORD *)this + 199) - v32) >> 3)
              v31 = 0;
            else
              v31 = *(ausdk::AUElement **)(v32 + 8 * v29);
          }
          *((float *)this + 303) = ausdk::AUElement::GetParameter(v31, 1u);
          v33 = *(v16 - 1);
          v34 = *((_QWORD *)this + 201);
          if (v34)
          {
            v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 32))(v34, v33);
          }
          else
          {
            v36 = *((_QWORD *)this + 198);
            if (v33 >= (*((_QWORD *)this + 199) - v36) >> 3)
              v35 = 0;
            else
              v35 = *(ausdk::AUElement **)(v36 + 8 * v33);
          }
          *((float *)this + 304) = ausdk::AUElement::GetParameter(v35, 2u);
          v37 = *(v16 - 1);
          v38 = *((_QWORD *)this + 201);
          if (v38)
          {
            v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 32))(v38, v37);
          }
          else
          {
            v40 = *((_QWORD *)this + 198);
            if (v37 >= (*((_QWORD *)this + 199) - v40) >> 3)
              v39 = 0;
            else
              v39 = *(ausdk::AUElement **)(v40 + 8 * v37);
          }
          *((float *)this + 305) = ausdk::AUElement::GetParameter(v39, 3u);
          v41 = *(v16 - 1);
          v42 = *((_QWORD *)this + 201);
          if (v42)
          {
            v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 32))(v42, v41);
          }
          else
          {
            v44 = *((_QWORD *)this + 198);
            if (v41 >= (*((_QWORD *)this + 199) - v44) >> 3)
              v43 = 0;
            else
              v43 = *(ausdk::AUElement **)(v44 + 8 * v41);
          }
          *((float *)this + 306) = ausdk::AUElement::GetParameter(v43, 4u);
        }
        ++v14;
        v45 = *((unsigned int *)this + 135);
        v16 += 6;
        if (v14 >= v45)
          goto LABEL_83;
      }
    }
    LODWORD(v45) = 0;
LABEL_83:
    if (*((_DWORD *)this + 168) == 1)
    {
      v47 = *((_DWORD *)this + 342);
      if (v47)
      {
        v48 = *((_DWORD *)this + 172);
        if (*((_BYTE *)this + 676) && *((int *)this + 175) >= 0)
          v48 = *((_DWORD *)this + 175);
        v49 = v45 - 1;
        if (v49 >= v48)
          v49 = v48;
        *((_DWORD *)this + 343) = v49;
        v50 = *((_DWORD *)this + 176);
        if ((v50 & 0x80000000) != 0 || !*((_BYTE *)this + 24 * v50 + 736))
          goto LABEL_97;
        *((_DWORD *)this + 177) = *((_DWORD *)this + 178);
        v51 = *((unsigned int *)this + 174);
        if ((v51 & 0x80000000) == 0)
        {
          v52 = *((unsigned int *)this + 133);
          __A.realp = (float *)a5[v51]->mBuffers[*((unsigned int *)this + 6 * v51 + 186)].mData;
          __A.imagp = &__A.realp[v52];
          v53 = (float *)*((_QWORD *)this + 178);
          v54 = *__A.realp;
          v55 = *__A.imagp;
          v56 = *((unsigned int *)this + 134) - 1;
          vDSP_zvmags(&__A, 1, v53, 1, v56);
          *v53 = v54 * v54;
          v53[v56] = v55 * v55;
          LODWORD(__C.realp) = 0;
          vDSP_sve(*((const float **)this + 178), 1, (float *)&__C, *((unsigned int *)this + 134));
          v57 = log10f(*(float *)&__C.realp + 2.2204e-16) * 10.0;
          *((float *)this + 177) = v57;
          v47 = *((_DWORD *)this + 342);
          if (v57 < *((float *)this + 178))
            goto LABEL_95;
        }
        if (*((_BYTE *)this + 677))
        {
LABEL_95:
          v58 = *((int *)this + 176);
          *(_QWORD *)(*((_QWORD *)this + 172) + 8 * v58) = 0;
          *(_QWORD *)(*((_QWORD *)this + 175) + 8 * v58) = 0;
          *((_DWORD *)this + 342) = --v47;
        }
        if (v47)
        {
LABEL_97:
          v59 = (uint64_t)*a7;
          v60 = *((unsigned __int8 *)this + 716);
          if (*((_BYTE *)this + 716))
            __dst = *(char **)(v59 + 32);
          else
            __dst = 0;
          v61 = *(char **)(v59 + 16);
          v62 = *((unsigned int *)this + 173);
          if ((v62 & 0x80000000) == 0)
          {
            v63 = *((_QWORD *)this + 172);
            if (v62 < (*((_QWORD *)this + 173) - v63) >> 3)
            {
              v64 = *(const void **)(v63 + 8 * v62);
              if (v64)
              {
                if (2 * *((_DWORD *)this + 133))
                {
                  memmove(v61, v64, 4 * (2 * *((_DWORD *)this + 133)));
                  v60 = *((unsigned __int8 *)this + 716);
                }
                if (v60 && 2 * *((_DWORD *)this + 133))
                  memmove(__dst, *(const void **)(*((_QWORD *)this + 175) + 8 * *((int *)this + 173)), 4 * (2 * *((_DWORD *)this + 133)));
              }
            }
          }
          v65 = *((_QWORD *)this + 172);
          v66 = *((unsigned int *)this + 133);
          v67 = (float *)&v61[4 * v66];
          v68 = (float *)&__dst[4 * v66];
          v69 = *((_DWORD *)this + 180);
          v70 = *((_DWORD *)this + 181) - v69;
          v71 = *((_QWORD *)this + 173);
          if (v71 != v65)
          {
            v72 = 0;
            v73 = *(_QWORD *)(v65 + 8 * *((unsigned int *)this + 343));
            v74 = 1;
            while (!*(_QWORD *)(v65 + 8 * v72))
            {
LABEL_133:
              if (++v72 >= (unint64_t)((v71 - v65) >> 3))
              {
                v69 = *((_DWORD *)this + 180);
                goto LABEL_135;
              }
            }
            __A.realp = *(float **)(v65 + 8 * v72);
            v75 = *((unsigned int *)this + 133);
            __A.imagp = (float *)(*(_QWORD *)(v65 + 8 * v72) + 4 * v75);
            if (*((_BYTE *)this + 716))
            {
              v76 = *((_QWORD *)this + 175);
              __C.realp = *(float **)(v76 + 8 * v72);
              __C.imagp = (float *)(*(_QWORD *)(v76 + 8 * v72) + 4 * v75);
            }
            vDSP_zvabs(&__A, 1, *((float **)this + 181), 1, v75);
            v77 = (float *)*((_QWORD *)this + 181);
            *v77 = fabsf(*__A.realp);
            v78 = *((unsigned int *)this + 133);
            v77[v78] = fabsf(*__A.imagp);
            if (*((_BYTE *)this + 716))
            {
              vDSP_zvabs(&__C, 1, *((float **)this + 187), 1, v78);
              v79 = (float *)*((_QWORD *)this + 187);
              *v79 = fabsf(*__C.realp);
              v79[*((unsigned int *)this + 133)] = fabsf(*__C.imagp);
            }
            __B = (float)(int)v72;
            v80 = *((unsigned int *)this + 134);
            if ((v74 & 1) != 0)
            {
              memcpy(*((void **)this + 178), *((const void **)this + 181), 4 * v80);
              vDSP_vfill(&__B, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((_BYTE *)this + 716))
                memcpy(*((void **)this + 184), *((const void **)this + 187), 4 * *((unsigned int *)this + 134));
              if (!v73)
                goto LABEL_124;
            }
            else
            {
              vDSP_vmin(*((const float **)this + 181), 1, *((const float **)this + 178), 1, *((float **)this + 178), 1, v80);
              vDSP_vsub(*((const float **)this + 178), 1, *((const float **)this + 181), 1, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vthrsc(*((const float **)this + 190), 1, &AUSignalCombiner::kEpsf, &AUSignalCombiner::kPoint5f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vsadd(*((const float **)this + 190), 1, &AUSignalCombiner::kPoint5f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vmul(*((const float **)this + 190), 1, *((const float **)this + 193), 1, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((_BYTE *)this + 716))
                vDSP_vmul(*((const float **)this + 190), 1, *((const float **)this + 184), 1, *((float **)this + 184), 1, *((unsigned int *)this + 134));
              vDSP_vsadd(*((const float **)this + 190), 1, &AUSignalCombiner::kMinus1f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vabs(*((const float **)this + 190), 1, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vsma(*((const float **)this + 190), 1, &__B, *((const float **)this + 193), 1, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((_BYTE *)this + 716))
                vDSP_vma(*((const float **)this + 190), 1, *((const float **)this + 187), 1, *((const float **)this + 184), 1, *((float **)this + 184), 1, *((unsigned int *)this + 134));
            }
            if (v72 != *((_DWORD *)this + 343))
            {
LABEL_130:
              if ((v74 & 1) != 0)
                v74 = 0;
              v71 = *((_QWORD *)this + 173);
              v65 = *((_QWORD *)this + 172);
              goto LABEL_133;
            }
LABEL_124:
            *((_DWORD *)this + 343) = v72;
            vDSP_vsadd(*((const float **)this + 181), 1, &AUSignalCombiner::kEpsf, *((float **)this + 181), 1, *((unsigned int *)this + 134));
            vDSP_svdiv(&AUSignalCombiner::kOnef, *((const float **)this + 181), 1, *((float **)this + 181), 1, *((unsigned int *)this + 134));
            v81 = *v67;
            vDSP_vmul(&__A.realp[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 181) + 4 * *((unsigned int *)this + 180)), 1, (float *)&v61[4 * *((unsigned int *)this + 180)], 1, v70);
            vDSP_vmul(&__A.imagp[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 181) + 4 * *((unsigned int *)this + 180)), 1, &v67[*((unsigned int *)this + 180)], 1, v70);
            v82 = *((unsigned int *)this + 181);
            if ((_DWORD)v82 == *((_DWORD *)this + 133))
              v81 = *__A.imagp * *(float *)(*((_QWORD *)this + 181) + 4 * v82);
            *v67 = v81;
            if (*((_BYTE *)this + 716))
            {
              vDSP_vsadd(*((const float **)this + 187), 1, &AUSignalCombiner::kEpsf, *((float **)this + 187), 1, *((unsigned int *)this + 134));
              vDSP_svdiv(&AUSignalCombiner::kOnef, *((const float **)this + 187), 1, *((float **)this + 187), 1, *((unsigned int *)this + 134));
              v83 = *v68;
              vDSP_vmul(&__C.realp[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 187) + 4 * *((unsigned int *)this + 180)), 1, (float *)&__dst[4 * *((unsigned int *)this + 180)], 1, v70);
              vDSP_vmul(&__C.imagp[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 187) + 4 * *((unsigned int *)this + 180)), 1, &v68[*((unsigned int *)this + 180)], 1, v70);
              v84 = *((unsigned int *)this + 181);
              if ((_DWORD)v84 == *((_DWORD *)this + 133))
                v83 = *__C.imagp * *(float *)(*((_QWORD *)this + 187) + 4 * v84);
              *v68 = v83;
            }
            goto LABEL_130;
          }
LABEL_135:
          v85 = *v67;
          vDSP_vmul((const float *)&v61[4 * v69], 1, (const float *)(*((_QWORD *)this + 178) + 4 * v69), 1, (float *)&v61[4 * v69], 1, v70);
          vDSP_vmul(&v67[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 178) + 4 * *((unsigned int *)this + 180)), 1, &v67[*((unsigned int *)this + 180)], 1, v70);
          v86 = *((unsigned int *)this + 181);
          v87 = 1.0;
          if ((_DWORD)v86 == *((_DWORD *)this + 133))
            v87 = *(float *)(*((_QWORD *)this + 178) + 4 * v86);
          *v67 = v85 * v87;
          if (*((_BYTE *)this + 716))
          {
            v88 = *v68;
            vDSP_vmul((const float *)&__dst[4 * *((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 184) + 4 * *((unsigned int *)this + 180)), 1, (float *)&__dst[4 * *((unsigned int *)this + 180)], 1, v70);
            vDSP_vmul(&v68[*((unsigned int *)this + 180)], 1, (const float *)(*((_QWORD *)this + 184) + 4 * *((unsigned int *)this + 180)), 1, &v68[*((unsigned int *)this + 180)], 1, v70);
            v89 = *((unsigned int *)this + 181);
            v90 = 1.0;
            if ((_DWORD)v89 == *((_DWORD *)this + 133))
              v90 = *(float *)(*((_QWORD *)this + 184) + 4 * v89);
            *v68 = v88 * v90;
          }
        }
      }
    }
    v91 = *((_QWORD *)this + 9);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
    }
    else
    {
      v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v93)
        v92 = 0;
      else
        v92 = *v93;
    }
    ausdk::AUElement::SetParameter(v92, 0x97u, (float)*((unsigned int *)this + 343), 0);
    v94 = *((_QWORD *)this + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
    }
    else
    {
      v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v96)
        v95 = 0;
      else
        v95 = *v96;
    }
    ausdk::AUElement::SetParameter(v95, 0x9Au, *((float *)this + 177), 0);
    if (*((_DWORD *)this + 135))
    {
      v97 = 0;
      v98 = (unsigned int *)((char *)this + 744);
      do
      {
        v99 = *((_QWORD *)this + 15);
        if (v99)
        {
          v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v99 + 32))(v99, v97);
        }
        else
        {
          v101 = *((_QWORD *)this + 12);
          if (v97 >= (*((_QWORD *)this + 13) - v101) >> 3)
            v100 = 0;
          else
            v100 = *(ausdk::AUElement **)(v101 + 8 * v97);
        }
        v102 = *v98;
        v98 += 6;
        ausdk::AUElement::SetParameter(v100, 0x32u, (float)v102, 0);
        ++v97;
      }
      while (v97 < *((unsigned int *)this + 135));
    }
    v103 = *((_QWORD *)this + 201);
    if (v103)
    {
      v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
    }
    else
    {
      v105 = (ausdk::AUElement **)*((_QWORD *)this + 198);
      if (*((ausdk::AUElement ***)this + 199) == v105)
        v104 = 0;
      else
        v104 = *v105;
    }
    ausdk::AUElement::SetParameter(v104, 0, *((float *)this + 302), 0);
    v106 = *((_QWORD *)this + 201);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 198);
      if (*((ausdk::AUElement ***)this + 199) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    ausdk::AUElement::SetParameter(v107, 1u, *((float *)this + 303), 0);
    v109 = *((_QWORD *)this + 201);
    if (v109)
    {
      v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
    }
    else
    {
      v111 = (ausdk::AUElement **)*((_QWORD *)this + 198);
      if (*((ausdk::AUElement ***)this + 199) == v111)
        v110 = 0;
      else
        v110 = *v111;
    }
    ausdk::AUElement::SetParameter(v110, 2u, *((float *)this + 304), 0);
    v112 = *((_QWORD *)this + 201);
    if (v112)
    {
      v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
    }
    else
    {
      v114 = (ausdk::AUElement **)*((_QWORD *)this + 198);
      if (*((ausdk::AUElement ***)this + 199) == v114)
        v113 = 0;
      else
        v113 = *v114;
    }
    ausdk::AUElement::SetParameter(v113, 3u, *((float *)this + 305), 0);
    v115 = *((_QWORD *)this + 201);
    if (v115)
    {
      v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
    }
    else
    {
      v117 = (ausdk::AUElement **)*((_QWORD *)this + 198);
      if (*((ausdk::AUElement ***)this + 199) == v117)
        v116 = 0;
      else
        v116 = *v117;
    }
    ausdk::AUElement::SetParameter(v116, 4u, *((float *)this + 306), 0);
  }
  return 0;
}

uint64_t AUSignalCombiner::Render(AUSignalCombiner *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  ausdk::AUScope *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUIOElement *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t BufferList;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[10];
  _OWORD v30[10];
  uint64_t v31;
  uint64_t v32;

  v8 = 0;
  v9 = 0;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = (AUSignalCombiner *)((char *)this + 80);
  while (1)
  {
    v11 = *((_QWORD *)this + 15);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v9 >= v12)
      break;
    if (ausdk::AUBase::HasInput(this, v9))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v9, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v8 = 1;
    }
    v9 = (v9 + 1);
  }
  v15 = 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  do
  {
    v16 = *((_QWORD *)this + 21);
    if (v16)
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    else
      v17 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v15 >= v17)
    {
      v19 = 0;
    }
    else
    {
      v18 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 128), v15);
      v19 = ausdk::AUIOElement::PrepareBuffer(v18, a4);
    }
    *((_QWORD *)v30 + v15++) = v19;
  }
  while (v15 != 21);
  if ((v8 & 1) != 0)
    return 0;
  v20 = 0;
  memset(v29, 0, sizeof(v29));
  do
  {
    v21 = *((_QWORD *)this + 15);
    if (v21)
      LODWORD(v22) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    else
      v22 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v20 >= v22)
    {
      BufferList = 0;
    }
    else
    {
      v23 = ausdk::AUScope::SafeGetElement(v10, v20);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v23 + 144));
    }
    *((_QWORD *)v29 + v20++) = BufferList;
  }
  while (v20 != 20);
  v25 = *((_QWORD *)this + 15);
  if (v25)
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  else
    v26 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v27 = *((_QWORD *)this + 21);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  else
    v28 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  return (*(uint64_t (**)(AUSignalCombiner *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)this + 184))(this, a2, a4, v26, v29, v28, v30);
}

BOOL AUSignalCombiner::BusCountWritable(AUSignalCombiner *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUSignalCombiner::SetBusCount(AUSignalCombiner *this, int a2, unsigned int a3)
{
  int64x2_t *v4;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned __int8 v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if (a3 - 1 <= 0x14)
    {
      v4 = (int64x2_t *)((char *)this + 128);
      goto LABEL_7;
    }
    {
      AU::AUSignalCombiner::get_log(void)::ausicm_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUAUSignalCombiner");
    }
    v7 = AU::AUSignalCombiner::get_log(void)::ausicm_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUSignalCombiner::get_log(void)::ausicm_os_log, OS_LOG_TYPE_ERROR))
      return 4294956445;
    v10 = 136315650;
    v11 = "AUSignalCombiner.cpp";
    v12 = 1024;
    v13 = 155;
    v14 = 1024;
    v15 = a3;
    v8 = "%s:%-5d Invalid number (%u) of output buses requested. We only support 1–2 buses.";
    goto LABEL_15;
  }
  if (a2 != 1)
    return 4294956430;
  if (a3 - 1 <= 0x13)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  if ((v6 & 1) == 0)
  {
    {
      AU::AUSignalCombiner::get_log(void)::ausicm_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUAUSignalCombiner");
    }
  }
  v7 = AU::AUSignalCombiner::get_log(void)::ausicm_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUSignalCombiner::get_log(void)::ausicm_os_log, OS_LOG_TYPE_ERROR))
  {
    v10 = 136315650;
    v11 = "AUSignalCombiner.cpp";
    v12 = 1024;
    v13 = 146;
    v14 = 1024;
    v15 = a3;
    v8 = "%s:%-5d Invalid number (%u) of input buses requested. We only support 1 bus.";
LABEL_15:
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 0x18u);
  }
  return 4294956445;
}

uint64_t AUSignalCombiner::GetParameterInfo(AUSignalCombiner *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  char *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t **v14;
  const __CFString *v16;

  if (a2 == 4)
  {
    v6 = (char *)this + 648;
  }
  else if (a2 == 1)
  {
    v6 = (char *)this + 600;
  }
  else
  {
    if (a2)
      return 4294956418;
    v6 = (char *)this + 576;
  }
  v9 = (uint64_t *)*((_QWORD *)v6 + 1);
  v8 = (uint64_t **)(v6 + 8);
  v7 = v9;
  if (!v9)
    return 4294956418;
  v10 = v8;
  v11 = v7;
  do
  {
    v12 = *((_DWORD *)v11 + 8);
    v13 = v12 >= a3;
    if (v12 >= a3)
      v14 = (uint64_t **)v11;
    else
      v14 = (uint64_t **)(v11 + 1);
    if (v13)
      v10 = (uint64_t **)v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || *((_DWORD *)v10 + 8) > a3)
    return 4294956418;
  a4->unit = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(v7, a3) + 2);
  a4->minValue = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 4);
  a4->maxValue = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 5);
  a4->defaultValue = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 6);
  a4->flags = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 3) + 1082130432;
  if (*((int *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 7) >= 1)
  {
    a4->clumpID = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 7);
    a4->flags |= 0x100000u;
  }
  v16 = (const __CFString *)*std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3);
  a4->cfNameString = v16;
  a4->flags |= 0x8000000u;
  CFStringGetCString(v16, a4->name, 52, 0x8000100u);
  return 0;
}

UInt8 *AUSignalCombiner::SaveExtendedScopes(AUSignalCombiner *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSignalCombiner::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    if (*((_BYTE *)this + 17))
    {
      ++*((_DWORD *)this + 137);
      ++*((_DWORD *)this + 139);
      ++*((_DWORD *)this + 141);
    }
  }
  return result;
}

uint64_t AUSignalCombiner::GetParameterValueStrings(AUSignalCombiner *this, int a2, unsigned int a3, const __CFArray **a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  __int128 *v13;
  CFIndex v14;
  uint64_t result;
  const __CFArray *v16;
  __int128 v17;
  const __CFString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v5 = (char *)this + 648;
  }
  else if (a2 == 1)
  {
    v5 = (char *)this + 600;
  }
  else
  {
    if (a2)
      return 4294956418;
    v5 = (char *)this + 576;
  }
  v8 = *((_QWORD *)v5 + 1);
  v6 = v5 + 8;
  v7 = v8;
  if (!v8)
    return 4294956418;
  v9 = v6;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= a3;
    if (v10 >= a3)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = (char *)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((_DWORD *)v9 + 8) > a3)
    return 4294956418;
  if (a2 != 1)
  {
    if (a2)
      return 4294956418;
    if (a4)
    {
      if (!a3)
      {
        v13 = &xmmword_1E69D17B8;
LABEL_31:
        v17 = *v13;
        v14 = 2;
        goto LABEL_32;
      }
      return 4294956418;
    }
    return 0;
  }
  if (!a4)
    return 0;
  if (a3 == 2)
  {
    v13 = &xmmword_1E69D17E0;
    goto LABEL_31;
  }
  if (a3 == 1)
  {
    v17 = xmmword_1E69D17C8;
    v18 = CFSTR("Only Track External Channel During Occlusion");
    v14 = 3;
LABEL_32:
    v16 = CFArrayCreate(0, (const void **)&v17, v14, 0);
    result = 0;
    *a4 = v16;
    return result;
  }
  return 4294956418;
}

uint64_t AUSignalCombiner::CopyClumpName(AUSignalCombiner *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  uint64_t result;
  const __CFString *v7;

  if (a2)
    return 4294956430;
  if ((a3 - 1) > 3)
    return 4294956418;
  v7 = CFStringCreateWithCString(0, off_1E69D17F0[a3 - 1], 0x8000100u);
  result = 0;
  *a5 = v7;
  return result;
}

double AUSignalCombiner::GetLatency(AUSignalCombiner *this)
{
  return 0.0;
}

double AUSignalCombiner::GetTailTime(AUSignalCombiner *this)
{
  return 0.0;
}

uint64_t AUSignalCombiner::SupportsTail(AUSignalCombiner *this)
{
  return 1;
}

BOOL AUSignalCombiner::StreamFormatWritable(AUSignalCombiner *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSignalCombiner::SupportedNumChannels(AUSignalCombiner *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSignalCombiner::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 2;
}

uint64_t AUSignalCombiner::ValidFormat(AUSignalCombiner *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    return 0;
}

uint64_t AUSignalCombiner::GetScopeExtended(AUSignalCombiner *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 1568;
  else
    return 0;
}

void AUSignalCombiner::propagateParameterChanges(AUSignalCombiner *this)
{
  int v2;
  uint64_t v3;
  ausdk::AUElement *v4;
  ausdk::AUElement **v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  float v30;
  float v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  float v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  float v39;
  unsigned int v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  uint64_t v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  uint64_t v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  uint64_t v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  _QWORD *v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  _QWORD *v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  _QWORD *v64;
  unint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  float *v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  uint64_t v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  uint64_t v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  uint64_t v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  uint64_t v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  uint64_t v87;

  v2 = *((_DWORD *)this + 137);
  if (v2 != *((_DWORD *)this + 138))
  {
    *((_DWORD *)this + 138) = v2;
    v3 = *((_QWORD *)this + 9);
    if (v3)
    {
      v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
    }
    else
    {
      v5 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v5)
        v4 = 0;
      else
        v4 = *v5;
    }
    *((_DWORD *)this + 168) = ausdk::AUElement::GetParameter(v4, 0);
    v6 = *((_QWORD *)this + 9);
    if (v6)
    {
      v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
    }
    else
    {
      v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v8)
        v7 = 0;
      else
        v7 = *v8;
    }
    *((_DWORD *)this + 171) = ausdk::AUElement::GetParameter(v7, 0x32u);
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
    }
    else
    {
      v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v11)
        v10 = 0;
      else
        v10 = *v11;
    }
    *((_DWORD *)this + 172) = (int)ausdk::AUElement::GetParameter(v10, 0x96u);
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v14)
        v13 = 0;
      else
        v13 = *v14;
    }
    *((_DWORD *)this + 173) = (int)ausdk::AUElement::GetParameter(v13, 0x64u);
    v15 = *((_QWORD *)this + 9);
    if (v15)
    {
      v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
    }
    else
    {
      v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v17)
        v16 = 0;
      else
        v16 = *v17;
    }
    *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v16, 0x65u);
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    }
    else
    {
      v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v20)
        v19 = 0;
      else
        v19 = *v20;
    }
    *((_DWORD *)this + 175) = (int)ausdk::AUElement::GetParameter(v19, 0x66u);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    *((_DWORD *)this + 176) = (int)ausdk::AUElement::GetParameter(v22, 0x67u);
    v24 = *((_QWORD *)this + 9);
    if (v24)
    {
      v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
    }
    else
    {
      v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v26)
        v25 = 0;
      else
        v25 = *v26;
    }
    *((float *)this + 178) = ausdk::AUElement::GetParameter(v25, 0x9Bu);
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    *((_BYTE *)this + 716) = ausdk::AUElement::GetParameter(v28, 0x9Cu) != 0.0;
    v30 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
    v31 = v30 / (float)((float)*((unsigned int *)this + 133) + (float)*((unsigned int *)this + 133));
    v32 = *((_QWORD *)this + 9);
    if (v32)
    {
      v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
    }
    else
    {
      v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v34)
        v33 = 0;
      else
        v33 = *v34;
    }
    v35 = roundf(fabsf(ausdk::AUElement::GetParameter(v33, 0x98u) / v31));
    if (v35 > (float)*((unsigned int *)this + 133))
      v35 = (float)*((unsigned int *)this + 133);
    *((_DWORD *)this + 180) = (unint64_t)v35;
    v36 = *((_QWORD *)this + 9);
    if (v36)
    {
      v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
    }
    else
    {
      v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v38)
        v37 = 0;
      else
        v37 = *v38;
    }
    v39 = roundf(fabsf(ausdk::AUElement::GetParameter(v37, 0x99u) / v31));
    if (v39 > (float)*((unsigned int *)this + 133))
      v39 = (float)*((unsigned int *)this + 133);
    *((_DWORD *)this + 181) = (unint64_t)v39;
    v40 = (unint64_t)v39 - 1;
    if (v40 >= *((_DWORD *)this + 180))
      v40 = *((_DWORD *)this + 180);
    *((_DWORD *)this + 180) = v40;
    if (*((_DWORD *)this + 135))
    {
      v41 = 0;
      v42 = (_DWORD *)((char *)this + 740);
      do
      {
        v43 = *((_QWORD *)this + 15);
        if (v43)
        {
          v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 32))(v43, v41);
        }
        else
        {
          v45 = *((_QWORD *)this + 12);
          if (v41 >= (*((_QWORD *)this + 13) - v45) >> 3)
            v44 = 0;
          else
            v44 = *(ausdk::AUElement **)(v45 + 8 * v41);
        }
        *(v42 - 3) = (int)ausdk::AUElement::GetParameter(v44, 0);
        v46 = *((_QWORD *)this + 15);
        if (v46)
        {
          v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 32))(v46, v41);
        }
        else
        {
          v48 = *((_QWORD *)this + 12);
          if (v41 >= (*((_QWORD *)this + 13) - v48) >> 3)
            v47 = 0;
          else
            v47 = *(ausdk::AUElement **)(v48 + 8 * v41);
        }
        *(v42 - 2) = ausdk::AUElement::GetParameter(v47, 1u);
        v49 = *((_QWORD *)this + 15);
        if (v49)
        {
          v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 32))(v49, v41);
        }
        else
        {
          v51 = *((_QWORD *)this + 12);
          if (v41 >= (*((_QWORD *)this + 13) - v51) >> 3)
            v50 = 0;
          else
            v50 = *(ausdk::AUElement **)(v51 + 8 * v41);
        }
        *((_BYTE *)v42 - 4) = ausdk::AUElement::GetParameter(v50, 2u) != 0.0;
        v52 = *((_QWORD *)this + 15);
        if (v52)
        {
          v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v52 + 32))(v52, v41);
        }
        else
        {
          v54 = *((_QWORD *)this + 12);
          if (v41 >= (*((_QWORD *)this + 13) - v54) >> 3)
            v53 = 0;
          else
            v53 = *(ausdk::AUElement **)(v54 + 8 * v41);
        }
        *v42 = (int)ausdk::AUElement::GetParameter(v53, 3u);
        v42 += 6;
        ++v41;
      }
      while (v41 < *((unsigned int *)this + 135));
    }
  }
  v55 = *((_DWORD *)this + 139);
  if (v55 != *((_DWORD *)this + 140))
  {
    *((_DWORD *)this + 140) = v55;
    v56 = *((_QWORD *)this + 9);
    if (v56)
    {
      v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
    }
    else
    {
      v58 = (_QWORD *)*((_QWORD *)this + 6);
      v57 = *((_QWORD **)this + 7) == v58 ? 0 : (ausdk::AUElement *)*v58;
    }
    *((_BYTE *)this + 676) = ausdk::AUElement::GetParameter(v57, 0xAu) != 0.0;
    v59 = *((_QWORD *)this + 9);
    if (v59)
    {
      v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
    }
    else
    {
      v61 = (_QWORD *)*((_QWORD *)this + 6);
      v60 = *((_QWORD **)this + 7) == v61 ? 0 : (ausdk::AUElement *)*v61;
    }
    *((_BYTE *)this + 677) = ausdk::AUElement::GetParameter(v60, 0xBu) != 0.0;
    v62 = *((_QWORD *)this + 9);
    if (v62)
    {
      v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
    }
    else
    {
      v64 = (_QWORD *)*((_QWORD *)this + 6);
      v63 = *((_QWORD **)this + 7) == v64 ? 0 : (ausdk::AUElement *)*v64;
    }
    *((_DWORD *)this + 170) = ausdk::AUElement::GetParameter(v63, 0x33u);
    if (*((_DWORD *)this + 135))
    {
      v65 = 0;
      v66 = (_DWORD *)((char *)this + 748);
      do
      {
        v67 = *((_QWORD *)this + 15);
        if (v67)
        {
          v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 32))(v67, v65);
        }
        else
        {
          v69 = *((_QWORD *)this + 12);
          if (v65 >= (*((_QWORD *)this + 13) - v69) >> 3)
            v68 = 0;
          else
            v68 = *(ausdk::AUElement **)(v69 + 8 * v65);
        }
        *v66 = (int)ausdk::AUElement::GetParameter(v68, 0x33u);
        v66 += 6;
        ++v65;
      }
      while (v65 < *((unsigned int *)this + 135));
    }
  }
  v70 = *((_DWORD *)this + 141);
  if (v70 != *((_DWORD *)this + 142))
  {
    v71 = 0;
    *((_DWORD *)this + 142) = v70;
    v72 = (float *)((char *)this + 1224);
    do
    {
      v73 = *((_QWORD *)this + 201);
      if (v73)
      {
        v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 32))(v73, v71);
      }
      else
      {
        v75 = *((_QWORD *)this + 198);
        if (v71 >= (*((_QWORD *)this + 199) - v75) >> 3)
          v74 = 0;
        else
          v74 = *(ausdk::AUElement **)(v75 + 8 * v71);
      }
      *(v72 - 4) = ausdk::AUElement::GetParameter(v74, 0);
      v76 = *((_QWORD *)this + 201);
      if (v76)
      {
        v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 32))(v76, v71);
      }
      else
      {
        v78 = *((_QWORD *)this + 198);
        if (v71 >= (*((_QWORD *)this + 199) - v78) >> 3)
          v77 = 0;
        else
          v77 = *(ausdk::AUElement **)(v78 + 8 * v71);
      }
      *(v72 - 3) = ausdk::AUElement::GetParameter(v77, 1u);
      v79 = *((_QWORD *)this + 201);
      if (v79)
      {
        v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 32))(v79, v71);
      }
      else
      {
        v81 = *((_QWORD *)this + 198);
        if (v71 >= (*((_QWORD *)this + 199) - v81) >> 3)
          v80 = 0;
        else
          v80 = *(ausdk::AUElement **)(v81 + 8 * v71);
      }
      *(v72 - 2) = ausdk::AUElement::GetParameter(v80, 2u);
      v82 = *((_QWORD *)this + 201);
      if (v82)
      {
        v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v82 + 32))(v82, v71);
      }
      else
      {
        v84 = *((_QWORD *)this + 198);
        if (v71 >= (*((_QWORD *)this + 199) - v84) >> 3)
          v83 = 0;
        else
          v83 = *(ausdk::AUElement **)(v84 + 8 * v71);
      }
      *(v72 - 1) = ausdk::AUElement::GetParameter(v83, 3u);
      v85 = *((_QWORD *)this + 201);
      if (v85)
      {
        v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 32))(v85, v71);
      }
      else
      {
        v87 = *((_QWORD *)this + 198);
        if (v71 >= (*((_QWORD *)this + 199) - v87) >> 3)
          v86 = 0;
        else
          v86 = *(ausdk::AUElement **)(v87 + 8 * v71);
      }
      *v72 = ausdk::AUElement::GetParameter(v86, 4u);
      v72 += 5;
      ++v71;
    }
    while (v71 != 8);
  }
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float,std::__wrap_iter<float const*>>(int *a1, int *a2)
{
  int *v3;
  CFNumberRef *v4;
  CFArrayRef v5;
  uint64_t *v7;
  CFNumberRef *v8;
  unint64_t v9;
  void **v10;

  v3 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v7, a2 - a1);
  if (v3 != a2)
  {
    v4 = v8;
    do
    {
      if ((unint64_t)v4 >= v9)
        v4 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>((uint64_t *)&v7, v3);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(v4++, v3);
      v8 = v4;
      ++v3;
    }
    while (v3 != a2);
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v7);
  v10 = (void **)&v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v5;
}

void sub_1B62FB88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(uint64_t **a1, int32x2_t *a2)
{
  int32x2_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int32 v7;
  float32x2_t v8;
  uint64_t **v9;
  unsigned __int32 v10;

  v4 = (int32x2_t *)operator new(0x48uLL);
  v5 = a1 + 1;
  v6 = a1[1];
  v7 = a2->i32[0];
  v4[4].i32[0] = a2->i32[0];
  v4[5] = a2[1];
  v8 = vcvt_f32_s32(a2[3]);
  v4[6] = a2[2];
  v4[7] = (int32x2_t)v8;
  *(float *)v4[8].i32 = (float)a2[4].i32[0];
  v4[8].i32[1] = a2[4].i32[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v7 >= v10)
          break;
        v6 = *v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= v7)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v5 = v9 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v4);
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v9, v5, (uint64_t *)v4);
  }
}

void PassThroughSpatializer::~PassThroughSpatializer(PassThroughSpatializer *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69D1820;
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  Spatializer::~Spatializer(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69D1820;
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t PassThroughSpatializer::initialize(PassThroughSpatializer *this, float a2, unsigned int a3, int a4)
{
  double v7;
  double v8;
  double v9;
  float v10;
  unint64_t v11;
  int v13;
  int v14;
  int v15;

  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v7 = a2 * 0.001953125 * 0.0219999999;
  if (v7 >= 2.22507386e-308)
    v8 = -6.90775528 / v7;
  else
    v8 = -INFINITY;
  v9 = exp(v8);
  if (v8 < -708.4)
    v9 = 0.0;
  v10 = v9;
  *((float *)this + 83) = v10;
  *((_DWORD *)this + 5) = (float)(a2 * 0.044);
  v15 = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &v15);
  v14 = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &v14);
  *((_WORD *)this + 8) = 257;
  v11 = (uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2;
  v13 = 1065353216;
  std::vector<float>::assign((char **)this + 42, v11, &v13);
  return 0;
}

uint64_t PassThroughSpatializer::processAccumulating(PassThroughSpatializer *this, const float *__A, float **a3, unsigned int a4, float *const *a5, unsigned int a6, vDSP_Length __N, float a8, IR::ComplexDataCircBuffer *a9)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  float v16;
  vDSP_Length v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t result;
  NSObject *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  __int128 *p_Step;
  std::string v30;
  std::string __Start;
  __int128 __Step;
  int64_t v33;
  uint8_t buf[4];
  __int128 *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 16))
  {
    if (a4)
    {
      v11 = __N;
      v14 = 0;
      v15 = 0;
      v16 = (float)__N;
      v17 = __N;
      v18 = 4 * a4;
      do
      {
        if (*((_BYTE *)this + 132))
          v19 = *(float *)(*((_QWORD *)this + 17) + v14) * a8;
        else
          v19 = 0.0;
        if (*((_BYTE *)this + 17))
        {
          v20 = *((_QWORD *)this + 42);
          v21 = (float *)(v20 + 4 * v15);
        }
        else
        {
          v20 = *((_QWORD *)this + 42);
          if (*((unsigned __int8 *)this + 132) != *((unsigned __int8 *)this + 268))
            goto LABEL_14;
          v21 = (float *)(v20 + v14);
          v22 = *(float *)(v20 + v14);
          if (v22 != v19 && vabds_f32(v22, v19) >= 0.0001)
          {
            if (*((_DWORD *)this + 81))
            {
LABEL_14:
              if (v11)
                goto LABEL_15;
            }
            else
            {
              v19 = v19 + (float)((float)(v22 - v19) * *((float *)this + 83));
              if (v11)
              {
LABEL_15:
                LODWORD(__Step) = 0;
                *(float *)&__Step = (float)(v19 - *(float *)(v20 + v14)) / v16;
                LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
                LODWORD(__Start.__r_.__value_.__l.__data_) = *(_DWORD *)(v20 + v14);
                vDSP_vrampmuladd(__A, 1, (float *)&__Start, (const float *)&__Step, *a3, 1, v17);
                v20 = *((_QWORD *)this + 42);
              }
            }
            *(float *)(v20 + v14) = v19;
            goto LABEL_17;
          }
        }
        *v21 = v19;
        vDSP_vsma(__A, 1, (const float *)(v20 + v14), *a3, 1, *a3, 1, v17);
LABEL_17:
        ++v15;
        v14 += 4;
        ++a3;
      }
      while (v18 != v14);
    }
    result = 0;
    *((_BYTE *)this + 17) = 0;
    *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v24 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "PassThroughSpatializer");
      v25 = std::string::append(&v30, "::", 2uLL);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __Start.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Start.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&__Start, "processAccumulating", 0x13uLL);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v33 = v27->__r_.__value_.__r.__words[2];
      __Step = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      p_Step = &__Step;
      if (v33 < 0)
        p_Step = (__int128 *)__Step;
      *(_DWORD *)buf = 136315138;
      v35 = p_Step;
      _os_log_debug_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)__Step);
      if (SHIBYTE(__Start.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__Start.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    return 4294956429;
  }
  return result;
}

void sub_1B62FBF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t MixViterbiProd::createCProdArray(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;

  v4 = (a2 - result) >> 2;
  if ((int)v4 < 1)
  {
    v6 = 1;
  }
  else
  {
    v5 = ((unint64_t)(a2 - result) >> 2) + 1;
    v6 = 1;
    do
    {
      v7 = (v5 - 2);
      *(_DWORD *)(a3 + 4 * v7) = v6;
      if (v4 <= v7)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v6 *= *(_DWORD *)(result + 4 * v7);
      --v5;
    }
    while (v5 > 1);
  }
  *a4 = v6;
  return result;
}

uint64_t MixViterbiProd::fullToTopLayerAddr(uint64_t this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_DWORD **)(this + 112);
  v7 = *(_DWORD **)(this + 136);
  if (v6 != v7)
  {
    v8 = a2 % *(_DWORD *)(this + 80);
    v9 = a3;
    do
    {
      if (v9 == a4)
      {
        v10 = v8;
      }
      else
      {
        v10 = v8 % *v6;
        LODWORD(v8) = v8 / *v6;
      }
      *v9++ = v8;
      ++v6;
      v8 = v10;
    }
    while (v6 != v7);
  }
  if (*(_DWORD *)(this + 92))
  {
    v11 = 0;
    v12 = *(_QWORD *)(this + 24);
    do
    {
      a5[v11] = a3[v11] / *(_DWORD *)(v12 + 4 * v11);
      ++v11;
    }
    while (v11 < *(_DWORD *)(this + 92));
  }
  v13 = *(int **)(this + 96);
  v14 = *(int **)(this + 120);
  *a6 = 0;
  if (v13 != v14)
  {
    v15 = 0;
    do
    {
      v17 = *a5++;
      v16 = v17;
      v18 = *v13++;
      v15 += v18 * v16;
      *a6 = v15;
    }
    while (v13 != v14);
  }
  return this;
}

uint64_t MixViterbiProd::MixViterbiProd(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int *v30;
  int *v31;
  _DWORD *v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  BOOL v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  std::bad_alloc *exception;
  std::bad_alloc *v141;
  unsigned int v142;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 84) = a4;
  *(_DWORD *)(a1 + 88) = a9;
  *(_DWORD *)(a1 + 92) = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = a6;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 160) = a7;
  *(_QWORD *)(a1 + 168) = a8;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  v17 = 1;
  *(_BYTE *)(a1 + 220) = 1;
  *(_QWORD *)(a1 + 224) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  v19 = *(int **)a1;
  v18 = *(int **)(a1 + 8);
  v20 = (uint64_t)v18 - *(_QWORD *)a1;
  if (v18 != *(int **)a1)
  {
    v22 = *v19;
    v21 = v19 + 1;
    v17 = v22;
    while (v21 != v18)
    {
      v23 = *v21++;
      v17 *= v23;
    }
  }
  *(_DWORD *)(a1 + 72) = v17;
  v25 = *(int **)(a1 + 24);
  v24 = *(int **)(a1 + 32);
  if (v24 == v25)
  {
    v26 = 1;
  }
  else
  {
    v28 = *v25;
    v27 = v25 + 1;
    v26 = v28;
    while (v27 != v24)
    {
      v29 = *v27++;
      v26 *= v29;
    }
  }
  *(_DWORD *)(a1 + 76) = v26;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 48), v20 >> 2);
  v30 = *(int **)a1;
  v31 = *(int **)(a1 + 8);
  if (*(int **)a1 != v31)
  {
    v32 = *(_DWORD **)(a1 + 48);
    v33 = *(int **)(a1 + 24);
    do
    {
      v35 = *v30++;
      v34 = v35;
      v36 = *v33++;
      *v32++ = v36 * v34;
    }
    while (v30 != v31);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 76) * *(_DWORD *)(a1 + 72);
  v37 = *(unsigned int *)(a1 + 92);
  v38 = malloc_type_malloc(4 * v37, 0x2C8E6D5CuLL);
  v39 = v38;
  if ((_DWORD)v37)
    v40 = v38 == 0;
  else
    v40 = 0;
  if (v40)
    goto LABEL_64;
  bzero(v38, 4 * v37);
  *(_QWORD *)(a1 + 96) = v39;
  v41 = *(unsigned int *)(a1 + 92);
  v42 = malloc_type_malloc(4 * v41, 0x2C8E6D5CuLL);
  v43 = v42;
  if ((_DWORD)v41)
  {
    if (!v42)
      goto LABEL_64;
  }
  bzero(v42, 4 * v41);
  *(_QWORD *)(a1 + 104) = v43;
  v44 = *(unsigned int *)(a1 + 92);
  v45 = malloc_type_malloc(4 * v44, 0x2C8E6D5CuLL);
  v46 = v45;
  if ((_DWORD)v44)
  {
    if (!v45)
      goto LABEL_64;
  }
  bzero(v45, 4 * v44);
  *(_QWORD *)(a1 + 112) = v46;
  v47 = (_QWORD *)operator new();
  v48 = (*(_DWORD *)(a1 + 88) * *(_DWORD *)(a1 + 72) + 1);
  v49 = (void *)operator new[]();
  bzero(v49, 4 * v48);
  *v47 = v49;
  v47[1] = v48;
  bzero(v49, 4 * (int)v48);
  *(_QWORD *)(a1 + 176) = v47;
  v50 = (_QWORD *)operator new();
  v51 = (*(_DWORD *)(a1 + 88) + 1);
  v52 = (void *)operator new[]();
  bzero(v52, 4 * v51);
  *v50 = v52;
  v50[1] = v51;
  bzero(v52, 4 * (int)v51);
  *(_QWORD *)(a1 + 184) = v50;
  v53 = operator new();
  MRRingBuffer<DataTimeStamp>::MRRingBuffer(v53, *(_DWORD *)(a1 + 88) + 1);
  *(_QWORD *)(a1 + 192) = v53;
  v54 = (_QWORD *)operator new();
  v55 = (*(_DWORD *)(a1 + 88) * *(_DWORD *)(a1 + 72) + 1);
  v56 = (void *)operator new[]();
  bzero(v56, 4 * v55);
  *v54 = v56;
  v54[1] = v55;
  bzero(v56, 4 * (int)v55);
  *(_QWORD *)(a1 + 200) = v54;
  v57 = operator new();
  v58 = *(_DWORD *)(a1 + 88) * *(_DWORD *)(a1 + 72) + 1;
  v59 = (void *)operator new[]();
  bzero(v59, 4 * v58);
  *(_QWORD *)v57 = v59;
  *(_DWORD *)(v57 + 8) = v58;
  *(_DWORD *)(v57 + 12) = 0;
  bzero(v59, 4 * v58);
  *(_QWORD *)(a1 + 208) = v57;
  v60 = *(unsigned int *)(a1 + 72);
  v61 = malloc_type_malloc(4 * v60, 0x2C8E6D5CuLL);
  v62 = v61;
  if ((_DWORD)v60)
  {
    if (!v61)
      goto LABEL_64;
  }
  bzero(v61, 4 * v60);
  *(_QWORD *)(a1 + 240) = v62;
  v63 = (*(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 72));
  v64 = malloc_type_malloc(4 * v63, 0x2C8E6D5CuLL);
  v65 = v64;
  if ((_DWORD)v63)
  {
    if (!v64)
      goto LABEL_64;
  }
  bzero(v64, 4 * v63);
  *(_QWORD *)(a1 + 248) = v65;
  v66 = (*(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 84));
  v67 = malloc_type_malloc(4 * v66, 0x2C8E6D5CuLL);
  v68 = v67;
  if ((_DWORD)v66)
  {
    if (!v67)
      goto LABEL_64;
  }
  bzero(v67, 4 * v66);
  *(_QWORD *)(a1 + 256) = v68;
  v69 = (*(_DWORD *)(a1 + 84) * *(_DWORD *)(a1 + 84) * *(_DWORD *)(a1 + 80));
  v70 = malloc_type_malloc(4 * v69, 0x2C8E6D5CuLL);
  v71 = v70;
  if ((_DWORD)v69)
  {
    if (!v70)
      goto LABEL_64;
  }
  bzero(v70, 4 * v69);
  *(_QWORD *)(a1 + 264) = v71;
  v72 = *(unsigned int *)(a1 + 80);
  v73 = malloc_type_malloc(4 * v72, 0x2C8E6D5CuLL);
  v74 = v73;
  if ((_DWORD)v72)
  {
    if (!v73)
      goto LABEL_64;
  }
  bzero(v73, 4 * v72);
  *(_QWORD *)(a1 + 272) = v74;
  v75 = *(unsigned int *)(a1 + 80);
  v76 = malloc_type_malloc(4 * v75, 0x2C8E6D5CuLL);
  v77 = v76;
  if ((_DWORD)v75)
  {
    if (!v76)
      goto LABEL_64;
  }
  bzero(v76, 4 * v75);
  *(_QWORD *)(a1 + 280) = v77;
  v78 = (*(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 80));
  v79 = malloc_type_malloc(4 * v78, 0x2C8E6D5CuLL);
  v80 = v79;
  if ((_DWORD)v78)
  {
    if (!v79)
      goto LABEL_64;
  }
  bzero(v79, 4 * v78);
  *(_QWORD *)(a1 + 288) = v80;
  v81 = *(unsigned int *)(a1 + 72);
  v82 = malloc_type_malloc(4 * v81, 0x2C8E6D5CuLL);
  v83 = v82;
  if ((_DWORD)v81)
  {
    if (!v82)
      goto LABEL_64;
  }
  bzero(v82, 4 * v81);
  *(_QWORD *)(a1 + 296) = v83;
  v84 = *(unsigned int *)(a1 + 80);
  v85 = malloc_type_malloc(4 * v84, 0x2C8E6D5CuLL);
  v86 = v85;
  if ((_DWORD)v84)
  {
    if (!v85)
      goto LABEL_64;
  }
  bzero(v85, 4 * v84);
  *(_QWORD *)(a1 + 304) = v86;
  v87 = (*(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 72));
  v88 = malloc_type_malloc(4 * v87, 0x2C8E6D5CuLL);
  v89 = v88;
  if ((_DWORD)v87)
  {
    if (!v88)
      goto LABEL_64;
  }
  bzero(v88, 4 * v87);
  *(_QWORD *)(a1 + 312) = v89;
  v90 = *(unsigned int *)(a1 + 72);
  v91 = malloc_type_malloc(4 * v90, 0x2C8E6D5CuLL);
  v92 = v91;
  if ((_DWORD)v90)
  {
    if (!v91)
      goto LABEL_64;
  }
  bzero(v91, 4 * v90);
  *(_QWORD *)(a1 + 320) = v92;
  v93 = *(unsigned int *)(a1 + 72);
  v94 = malloc_type_malloc(4 * v93, 0x2C8E6D5CuLL);
  v95 = v94;
  if ((_DWORD)v93)
  {
    if (!v94)
      goto LABEL_64;
  }
  bzero(v94, 4 * v93);
  *(_QWORD *)(a1 + 328) = v95;
  v96 = *(unsigned int *)(a1 + 72);
  v97 = malloc_type_malloc(4 * v96, 0x2C8E6D5CuLL);
  v98 = v97;
  if ((_DWORD)v96)
  {
    if (!v97)
      goto LABEL_64;
  }
  bzero(v97, 4 * v96);
  *(_QWORD *)(a1 + 336) = v98;
  v99 = *(unsigned int *)(a1 + 92);
  v100 = malloc_type_malloc(4 * v99, 0x2C8E6D5CuLL);
  v101 = v100;
  if ((_DWORD)v99)
  {
    if (!v100)
      goto LABEL_64;
  }
  bzero(v100, 4 * v99);
  *(_QWORD *)(a1 + 344) = v101;
  v102 = *(unsigned int *)(a1 + 92);
  v103 = malloc_type_malloc(4 * v102, 0x2C8E6D5CuLL);
  v104 = v103;
  if ((_DWORD)v102)
  {
    if (!v103)
      goto LABEL_64;
  }
  bzero(v103, 4 * v102);
  *(_QWORD *)(a1 + 360) = v104;
  v105 = *(unsigned int *)(a1 + 92);
  v106 = malloc_type_malloc(4 * v105, 0x2C8E6D5CuLL);
  v107 = v106;
  if ((_DWORD)v105)
  {
    if (!v106)
      goto LABEL_64;
  }
  bzero(v106, 4 * v105);
  *(_QWORD *)(a1 + 368) = v107;
  v108 = *(unsigned int *)(a1 + 92);
  v109 = malloc_type_malloc(4 * v108, 0x2C8E6D5CuLL);
  v110 = v109;
  if ((_DWORD)v108)
  {
    if (!v109)
    {
LABEL_64:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v141 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v109, 4 * v108);
  *(_QWORD *)(a1 + 384) = v110;
  v111 = (_QWORD *)operator new();
  v112 = *(unsigned int *)(a1 + 80);
  v113 = *(unsigned int *)(a1 + 84);
  *v111 = v112;
  v111[1] = v112 * (unint64_t)v112;
  v111[2] = v113;
  *(_QWORD *)(a1 + 392) = v111;
  v114 = (_QWORD *)operator new();
  v115 = *(unsigned int *)(a1 + 72);
  v116 = *(unsigned int *)(a1 + 84);
  *v114 = v115;
  v114[1] = v115 * (unint64_t)v115;
  v114[2] = v116;
  *(_QWORD *)(a1 + 400) = v114;
  v117 = *(unsigned int *)(a1 + 92);
  v118 = *(_QWORD *)(a1 + 96);
  v119 = *(_QWORD *)(a1 + 104) + 4 * v117;
  *(_QWORD *)(a1 + 120) = v118 + 4 * v117;
  *(_QWORD *)(a1 + 128) = v119;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 112) + 4 * v117;
  MixViterbiProd::createCProdArray(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v118, (int *)(a1 + 72));
  MixViterbiProd::createCProdArray(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 104), (int *)(a1 + 76));
  MixViterbiProd::createCProdArray(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 112), (int *)(a1 + 80));
  v120 = *(unsigned int **)(a1 + 344);
  v121 = *(unsigned int *)(a1 + 92);
  v122 = &v120[v121 - 1];
  *(_QWORD *)(a1 + 352) = v122;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 368) + 4 * v121 - 4;
  if (*(_DWORD *)(a1 + 80))
  {
    v123 = 0;
    v124 = *(_QWORD *)(a1 + 160);
    v125 = *(_QWORD *)(a1 + 168);
    v126 = *(_QWORD *)(a1 + 256);
    v127 = *(_QWORD *)(a1 + 264);
    v128 = *(unsigned int **)(a1 + 360);
    do
    {
      v142 = 0;
      MixViterbiProd::fullToTopLayerAddr(a1, v123, v120, v122, v128, &v142);
      v129 = *(_DWORD *)(a1 + 80);
      v130 = *(unsigned int *)(a1 + 84);
      if ((_DWORD)v130)
      {
        v131 = 0;
        v132 = *(_DWORD *)(a1 + 72);
        v133 = v142;
        v134 = v142;
        v135 = v123;
        do
        {
          *(_DWORD *)(v126 + 4 * (v123 + v129 * (_DWORD)v131)) = *(_DWORD *)(v124 + 4 * (v133 + v132 * (_DWORD)v131));
          v136 = v134;
          v137 = v135;
          v138 = v130;
          do
          {
            *(_DWORD *)(v127 + 4 * v137) = *(_DWORD *)(v125 + 4 * v136);
            v137 += v129;
            v136 += v132;
            --v138;
          }
          while (v138);
          ++v131;
          v135 += v130 * v129;
          v134 += v130 * v132;
        }
        while (v131 != v130);
      }
      ++v123;
    }
    while (v123 < v129);
  }
  return a1;
}

void sub_1B62FC9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;

  MEMORY[0x1BCC95CEC](v12, 0x1080C40FC6463CFLL);
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 56) = v14;
    operator delete(v14);
  }
  v15 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

double MixViterbiProd::Initialize(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  vDSP_Length *v6;
  float *v7;
  uint64_t v8;
  vDSP_Length *v9;
  float *v10;
  void *v11;
  double result;
  float __C;

  ++*(_DWORD *)(a1 + 236);
  vDSP_mmov(*(const float **)(a1 + 144), *(float **)(a1 + 272), **(_QWORD **)(a1 + 392), 1uLL, **(_QWORD **)(a1 + 392), **(_QWORD **)(a1 + 392));
  v6 = *(vDSP_Length **)(a1 + 392);
  v7 = *(float **)(a1 + 280);
  v8 = a2;
  vDSP_vmul(*(const float **)(a1 + 272), 1, (const float *)(*(_QWORD *)(a1 + 256) + 4 * *v6 * a2), 1, v7, 1, *v6);
  __C = 0.0;
  vDSP_sve(v7, 1, &__C, *v6);
  __C = 1.0 / __C;
  vDSP_vsmul(v7, 1, &__C, v7, 1, *v6);
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 272), *(float **)(a1 + 240), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 280), *(float **)(a1 + 296), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  v9 = *(vDSP_Length **)(a1 + 400);
  v10 = *(float **)(a1 + 320);
  v11 = *(void **)(a1 + 336);
  vDSP_vmul(*(const float **)(a1 + 240), 1, (const float *)(*(_QWORD *)(a1 + 160) + 4 * *v9 * v8), 1, v10, 1, *v9);
  ViterbiOdep::normalizeLik(v9, v10);
  bzero(v11, 4 * *v9);
  *(_QWORD *)&result = MixViterbiProd::prepareForNextIter(a1, a3).u64[0];
  return result;
}

float MixViterbiProd::marginalizeStateDist(MixViterbiProd *this, const float *a2, float *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  float result;
  unint64_t v13;
  unsigned int v14;

  bzero(a3, 4 * *((unsigned int *)this + 18));
  if (*((_DWORD *)this + 20))
  {
    v13 = 0;
    do
    {
      v14 = 0;
      MixViterbiProd::fullToTopLayerAddr((uint64_t)this, v13, a4, a6, a5, &v14);
      result = a2[v13] + a3[v14];
      a3[v14] = result;
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 20));
  }
  return result;
}

int8x16_t MixViterbiProd::prepareForNextIter(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  BOOL v41;
  int v42;
  int8x16_t result;

  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(char **)(a1 + 336);
  v6 = *(_DWORD *)(a1 + 72);
  v7 = *(_DWORD *)(v4 + 8);
  v8 = *(int *)(v4 + 12);
  if (v7 < v6)
    v6 = *(_DWORD *)(v4 + 8);
  v9 = v8 + v6;
  v10 = v8 + v6 - v7;
  if (v10 < 0)
  {
    memcpy((void *)(*(_QWORD *)v4 + 4 * v8), v5, 4 * v6);
  }
  else
  {
    v11 = v7 - v8;
    memcpy((void *)(*(_QWORD *)v4 + 4 * v8), v5, 4 * (v7 - (int)v8));
    memcpy(*(void **)v4, &v5[4 * v11], 4 * v10);
    v9 = v10;
  }
  *(_DWORD *)(v4 + 12) = v9;
  v12 = *(_QWORD *)(a1 + 200);
  v13 = *(_QWORD *)(a1 + 320);
  v14 = *(_DWORD *)(a1 + 72);
  v15 = *(_DWORD *)(v12 + 8);
  v16 = *(int *)(v12 + 12);
  if (v15 < v14)
    v14 = *(_DWORD *)(v12 + 8);
  v17 = v16 + v14;
  v18 = v16 + v14 - v15;
  if (v18 < 0)
  {
    memcpy((void *)(*(_QWORD *)v12 + 4 * v16), *(const void **)(a1 + 320), 4 * v14);
  }
  else
  {
    v19 = v15 - v16;
    memcpy((void *)(*(_QWORD *)v12 + 4 * v16), *(const void **)(a1 + 320), 4 * (v15 - (int)v16));
    memcpy(*(void **)v12, (const void *)(v13 + 4 * v19), 4 * v18);
    v17 = v18;
  }
  *(_DWORD *)(v12 + 12) = v17;
  v20 = *(_QWORD *)(a1 + 208);
  v21 = *(_QWORD *)(a1 + 296);
  v22 = *(_DWORD *)(a1 + 72);
  v23 = *(_DWORD *)(v20 + 8);
  v24 = *(int *)(v20 + 12);
  if (v23 < v22)
    v22 = *(_DWORD *)(v20 + 8);
  v25 = v24 + v22;
  v26 = v24 + v22 - v23;
  if (v26 < 0)
  {
    memcpy((void *)(*(_QWORD *)v20 + 4 * v24), *(const void **)(a1 + 296), 4 * v22);
  }
  else
  {
    v27 = v23 - v24;
    memcpy((void *)(*(_QWORD *)v20 + 4 * v24), *(const void **)(a1 + 296), 4 * (v23 - (int)v24));
    memcpy(*(void **)v20, (const void *)(v21 + 4 * v27), 4 * v26);
    v25 = v26;
  }
  *(_DWORD *)(v20 + 12) = v25;
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_DWORD *)(v28 + 8);
  v30 = *(int *)(v28 + 12);
  *(_OWORD *)(*(_QWORD *)v28 + 16 * v30) = *a2;
  *(_DWORD *)(v28 + 12) = ((int)v30 + 1) % v29;
  --*(_DWORD *)(a1 + 216);
  if (*(_DWORD *)(a1 + 236) < 2u)
    goto LABEL_28;
  v31 = *(_DWORD *)(a1 + 72);
  if (v31 <= 0)
    goto LABEL_27;
  v32 = 0;
  v33 = *(uint64_t **)(a1 + 176);
  v34 = *v33;
  v35 = *((_DWORD *)v33 + 2);
  v36 = v31 - 1;
  v37 = v35 - *((_DWORD *)v33 + 3);
  v38 = 1;
  do
  {
    v39 = v38 | (v32 == *(_DWORD *)(v34 + 4 * (v35 + ~((v37 + v36) % v35))));
    if ((v38 & 1) != 0)
      v32 = *(_DWORD *)(v34 + 4 * (v35 + ~((v37 + v36) % v35)));
    v41 = v36-- != 0;
    if ((v39 & 1) == 0)
      break;
    v38 = 0;
  }
  while (v41);
  if ((v39 & 1) != 0)
  {
LABEL_27:
    *(_BYTE *)(a1 + 232) = 0;
    v42 = -1;
  }
  else
  {
LABEL_28:
    v42 = *(_DWORD *)(a1 + 224) - 1;
  }
  *(_DWORD *)(a1 + 224) = v42;
  result = vextq_s8(*(int8x16_t *)(a1 + 320), *(int8x16_t *)(a1 + 320), 8uLL);
  *(int8x16_t *)(a1 + 320) = result;
  return result;
}

double MixViterbiProd::Update(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  vDSP_Length *v7;
  const float *v8;
  float *v9;
  float *v10;
  vDSP_Length v11;
  vDSP_Length v12;
  const float *v13;
  float *v14;
  vDSP_Length v15;
  vDSP_Length v16;
  vDSP_Length *v17;
  float *v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  vDSP_Length *v40;
  const float *v41;
  uint64_t v42;
  float *v43;
  float *v44;
  uint64_t v45;
  vDSP_Length v46;
  vDSP_Length v47;
  const float *v48;
  float *v49;
  vDSP_Length v50;
  vDSP_Length v51;
  float *v52;
  _OWORD *v53;
  uint64_t v54;
  double result;
  uint64_t v56;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  vDSP_Length __C;

  ++*(_DWORD *)(a1 + 236);
  v7 = *(vDSP_Length **)(a1 + 392);
  v8 = *(const float **)(a1 + 152);
  v9 = *(float **)(a1 + 272);
  v10 = *(float **)(a1 + 288);
  v11 = *v7;
  if (*v7)
  {
    v12 = 0;
    v13 = *(const float **)(a1 + 280);
    v14 = *(float **)(a1 + 288);
    do
    {
      vDSP_mmov(v13, v14, v11, 1uLL, v11, v11);
      v11 = *v7;
      v14 += *v7;
      ++v12;
    }
    while (v12 < *v7);
  }
  vDSP_vmul(v8, 1, v10, 1, v10, 1, v7[1]);
  v15 = *v7;
  if (*v7)
  {
    v16 = 0;
    do
    {
      vDSP_sve(v10, 1, v9++, v15);
      v15 = *v7;
      v10 += *v7;
      ++v16;
    }
    while (v16 < *v7);
  }
  v17 = *(vDSP_Length **)(a1 + 392);
  v18 = *(float **)(a1 + 280);
  v56 = a3;
  v58 = a2;
  vDSP_vmul(*(const float **)(a1 + 272), 1, (const float *)(*(_QWORD *)(a1 + 264) + 4 * (v17[2] * a3 + a2) * *v17), 1, v18, 1, *v17);
  LODWORD(__C) = 0;
  vDSP_sve(v18, 1, (float *)&__C, *v17);
  *(float *)&__C = 1.0 / *(float *)&__C;
  vDSP_vsmul(v18, 1, (const float *)&__C, v18, 1, *v17);
  v19 = *(_QWORD *)(a1 + 288);
  v20 = *(void **)(a1 + 248);
  v60 = *(unsigned int **)(a1 + 352);
  v61 = *(unsigned int **)(a1 + 344);
  v21 = *(unsigned int **)(a1 + 368);
  v59 = *(unsigned int **)(a1 + 360);
  v23 = *(unsigned int **)(a1 + 376);
  v22 = *(unsigned int **)(a1 + 384);
  bzero(v20, 4 * (*(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 72)));
  if (*(_DWORD *)(a1 + 80))
  {
    v24 = 0;
    v25 = 0;
    do
    {
      LODWORD(__C) = 0;
      MixViterbiProd::fullToTopLayerAddr(a1, v24, v61, v60, v59, (unsigned int *)&__C);
      v26 = *(_DWORD *)(a1 + 80);
      if (!v26)
        break;
      v27 = 0;
      v28 = __C * *(_DWORD *)(a1 + 72);
      do
      {
        v29 = *(float *)(v19 + 4 * (v25 + v27));
        if (v29 > 0.0)
        {
          v62 = 0;
          MixViterbiProd::fullToTopLayerAddr(a1, v27, v21, v23, v22, &v62);
          *((float *)v20 + v62 + v28) = v29 + *((float *)v20 + v62 + v28);
          v26 = *(_DWORD *)(a1 + 80);
        }
        ++v27;
      }
      while (v27 < v26);
      v25 += v27;
      ++v24;
    }
    while (v24 < v26);
  }
  v30 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v30)
  {
    v31 = *(_QWORD *)(a1 + 248);
    v32 = v31 + 4 * v30;
    v33 = v30 * v30;
    v34 = 4 * (v30 * v30);
    v35 = 4 * v30;
    do
    {
      if (v33)
      {
        v36 = 0;
        v37 = 0.0;
        do
        {
          v37 = v37 + *(float *)(v31 + v36);
          v36 += v35;
        }
        while (v34 != v36);
        v38 = 0;
        v39 = 1.0 / (v37 + 2.2204e-16);
        do
        {
          *(float *)(v31 + v38) = *(float *)(v31 + v38) * v39;
          v38 += v35;
        }
        while (v34 != v38);
      }
      v31 += 4;
    }
    while (v31 != v32);
  }
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 280), *(float **)(a1 + 296), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  v40 = *(vDSP_Length **)(a1 + 400);
  v41 = *(const float **)(a1 + 248);
  v42 = *(_QWORD *)(a1 + 168);
  v44 = *(float **)(a1 + 312);
  v43 = *(float **)(a1 + 320);
  v45 = *(_QWORD *)(a1 + 336);
  v46 = *v40;
  if (*v40)
  {
    v47 = 0;
    v48 = *(const float **)(a1 + 328);
    v49 = *(float **)(a1 + 312);
    do
    {
      vDSP_mmov(v48, v49, v46, 1uLL, v46, v46);
      v46 = *v40;
      v49 += *v40;
      ++v47;
    }
    while (v47 < *v40);
  }
  vDSP_vmul(v41, 1, v44, 1, v44, 1, v40[1]);
  v50 = *v40;
  if (*v40)
  {
    v51 = 0;
    v52 = v43;
    v54 = v56;
    v53 = a4;
    do
    {
      __C = 0;
      vDSP_maxvi(v44, 1, v52, &__C, v50);
      v50 = *v40;
      v44 += *v40;
      ++v52;
      *(_DWORD *)(v45 + 4 * v51++) = __C;
    }
    while (v51 < v50);
  }
  else
  {
    v54 = v56;
    v53 = a4;
  }
  vDSP_vmul((const float *)(v42 + 4 * (v58 + v40[2] * v54) * v50), 1, v43, 1, v43, 1, v50);
  ViterbiOdep::normalizeLik(v40, v43);
  *(_QWORD *)&result = MixViterbiProd::prepareForNextIter(a1, v53).u64[0];
  return result;
}

void MixViterbiProd::decodeRaw(uint64_t a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this)
{
  int v4;
  unint64_t v6;
  std::vector<unsigned int>::pointer begin;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  vDSP_Length v15;
  float __C;

  v4 = __sz;
  this->__end_ = this->__begin_;
  std::vector<unsigned int>::resize(this, __sz);
  __C = 0.0;
  v15 = 0;
  vDSP_maxvi(*(const float **)(a1 + 328), 1, &__C, &v15, *(unsigned int *)(a1 + 72));
  v6 = (v4 - 1);
  begin = this->__begin_;
  v8 = this->__end_ - this->__begin_;
  if (v8 <= v6)
    goto LABEL_10;
  v9 = v15;
  begin[v6] = v15;
  if (v4 - 2 >= 0)
  {
    v10 = -*(_DWORD *)(a1 + 72);
    v11 = *(uint64_t **)(a1 + 176);
    v12 = *v11;
    while (1)
    {
      v13 = v10 + v9;
      v14 = v13 < 0
          ? *((_DWORD *)v11 + 2) + ~((*((_DWORD *)v11 + 2) - v13 + ~*((_DWORD *)v11 + 3)) % *((_DWORD *)v11 + 2))
          : (*((_DWORD *)v11 + 3) + v13) % *((_DWORD *)v11 + 2);
      v6 = (v6 - 1);
      if (v8 <= v6)
        break;
      v10 -= *(_DWORD *)(a1 + 72);
      v9 = *(_DWORD *)(v12 + 4 * v14);
      begin[v6] = v9;
      if ((int)v6 <= 0)
        return;
    }
LABEL_10:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
}

void MixViterbiProd::convertRawStateSequenceToProd(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1] - *a2;
  v7 = (v6 >> 2);
  std::vector<std::vector<unsigned int>>::resize(a3, v7);
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v8 = 0;
    v9 = 4 * (*(_DWORD *)(a1 + 72) - 1);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v8
        || (std::vector<unsigned int>::resize((std::vector<unsigned int> *)(*a3 + 24 * v8), *(unsigned int *)(a1 + 92)),
            0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v8))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      v11 = *a3 + 24 * v8;
      v10 = *(_DWORD **)v11;
      if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11 || v8 >= (uint64_t)(a2[1] - *a2) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v12 = *(_DWORD **)(a1 + 96);
      v13 = *(_DWORD **)(a1 + 120);
      if (v12 != v13)
      {
        v14 = (*(_DWORD *)(*a2 + 4 * v8) % *(_DWORD *)(a1 + 72));
        v15 = v9;
        do
        {
          if (v15)
          {
            v16 = v14 % *v12;
            LODWORD(v14) = v14 / *v12;
          }
          else
          {
            v16 = v14;
          }
          *v10++ = v14;
          ++v12;
          v15 -= 4;
          v14 = v16;
        }
        while (v12 != v13);
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void MixViterbiProd::retrieveTimeStamps(uint64_t a1, int a2, int a3, char **a4)
{
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  std::vector<std::span<float,18446744073709551615ul>>::resize(a4, (a3 - a2 + 1));
  if (a3 >= a2)
  {
    v8 = *a4;
    v9 = *(_QWORD *)(a1 + 192);
    v10 = a2 - 1;
    do
    {
      *(double *)v8 = MRRingBuffer<DataTimeStamp>::GetSample(v9, v10);
      *((_QWORD *)v8 + 1) = v11;
      v8 += 16;
      ++v10;
    }
    while (a3 != v10);
  }
}

void MixViterbiProd::updateDecode(uint64_t a1, _QWORD *a2, char **a3, int a4)
{
  int v5;
  std::vector<unsigned int>::size_type v6;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v11;

  v5 = *(_DWORD *)(a1 + 216);
  v6 = (a4 - v5);
  if (a4 - v5 >= 0)
  {
    memset(&v11, 0, sizeof(v11));
    MixViterbiProd::decodeRaw(a1, -v5, &v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned int>::resize(&__p, v6);
    MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(a1, &v11.__begin_, &__p, v6);
    MixViterbiProd::convertRawStateSequenceToProd(a1, &__p, a2);
    MixViterbiProd::retrieveTimeStamps(a1, *(_DWORD *)(a1 + 216) + 1, a4, a3);
    *(_DWORD *)(a1 + 216) = a4;
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v11.__begin_)
    {
      v11.__end_ = v11.__begin_;
      operator delete(v11.__begin_);
    }
  }
  *(_BYTE *)(a1 + 220) = 0;
}

void sub_1B62FD67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(uint64_t a1, unsigned int **a2, std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  std::vector<unsigned int>::resize(this, __sz);
  begin = this->__begin_;
  end = this->__end_;
  if (this->__begin_ != end)
  {
    v9 = *a2;
    v10 = *(uint64_t **)(a1 + 184);
    v11 = *v10;
    do
    {
      *begin++ = *v9;
      v12 = *v9++;
      *(_DWORD *)(v11 + 4 * *((int *)v10 + 3)) = v12;
      *((_DWORD *)v10 + 3) = (*((_DWORD *)v10 + 3) + 1) % *((_DWORD *)v10 + 2);
    }
    while (begin != end);
  }
}

BOOL MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent(MixViterbiProd *this, double a2, int *a3)
{
  int v5;
  int v6;
  _BOOL8 v7;
  int v8;
  uint64_t v9;
  int v10;
  double v11;

  v5 = *((_DWORD *)this + 59);
  if (v5 >= *((_DWORD *)this + 22))
    v5 = *((_DWORD *)this + 22);
  v6 = -v5;
  if (!*((_BYTE *)this + 220) && *((_DWORD *)this + 54) > v6)
    v6 = *((_DWORD *)this + 54);
  v7 = 0;
  *a3 = 0;
  if (v6 < 0)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 24);
    while (1)
    {
      v10 = v8 - 1;
      MRRingBuffer<DataTimeStamp>::GetSample(v9, v8 - 1);
      v7 = v11 <= a2;
      if (v11 <= a2)
        break;
      *a3 = v8--;
      if (v10 <= v6)
        return 0;
    }
  }
  return v7;
}

_DWORD *MixViterbiProd::decodeRaw_Post(uint64_t a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this, uint64_t *a4)
{
  int v6;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _DWORD *result;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  vDSP_Length v18;
  float __C;

  v6 = __sz;
  this->__end_ = this->__begin_;
  v8 = __sz;
  std::vector<unsigned int>::resize(this, __sz);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a4);
  std::vector<std::vector<float>>::resize(a4, v8);
  __C = 0.0;
  v18 = 0;
  vDSP_maxvi(*(const float **)(a1 + 328), 1, &__C, &v18, *(unsigned int *)(a1 + 72));
  v9 = (v6 - 1);
  if (v9 >= this->__end_ - this->__begin_)
LABEL_14:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v10 = v18;
  this->__begin_[v9] = v18;
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9)
    goto LABEL_13;
  v11 = *(_DWORD *)(a1 + 72);
  std::vector<float>::resize(*a4 + 24 * v9, v11);
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9)
    goto LABEL_13;
  v12 = -v11;
  result = MixViterbiProd::copyFloat32RingBufToVector(*(_DWORD **)(*a4 + 24 * v9), *(uint64_t **)(a1 + 208), v12, *(_DWORD *)(a1 + 72));
  if (v6 - 2 >= 0)
  {
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 176);
      v15 = v12 + v10;
      v16 = (int)(v12 + v10) < 0
          ? *(_DWORD *)(v14 + 8) + ~((int)(*(_DWORD *)(v14 + 8) - v15 + ~*(_DWORD *)(v14 + 12)) % *(_DWORD *)(v14 + 8))
          : (int)(*(_DWORD *)(v14 + 12) + v15) % *(_DWORD *)(v14 + 8);
      v9 = (v9 - 1);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9)
        break;
      v10 = *(_DWORD *)(*(_QWORD *)v14 + 4 * v16);
      v17 = *(_DWORD *)(a1 + 72);
      std::vector<float>::resize(*a4 + 24 * v9, v17);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9)
        break;
      v12 -= v17;
      result = MixViterbiProd::copyFloat32RingBufToVector(*(_DWORD **)(*a4 + 24 * v9), *(uint64_t **)(a1 + 208), v12, *(_DWORD *)(a1 + 72));
      if (v9 >= this->__end_ - this->__begin_)
        goto LABEL_14;
      this->__begin_[v9] = v10;
      if ((int)v9 <= 0)
        return result;
    }
LABEL_13:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

_DWORD *MixViterbiProd::copyFloat32RingBufToVector(_DWORD *result, uint64_t *a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;

  if (a4)
  {
    v4 = *a2;
    v5 = ~a3;
    do
    {
      if (a3 < 0)
        v6 = *((_DWORD *)a2 + 2) + ~((v5 + *((_DWORD *)a2 + 2) - *((_DWORD *)a2 + 3)) % *((_DWORD *)a2 + 2));
      else
        v6 = (a3 + *((_DWORD *)a2 + 3)) % *((_DWORD *)a2 + 2);
      *result++ = *(_DWORD *)(v4 + 4 * v6);
      --v5;
      ++a3;
      --a4;
    }
    while (a4);
  }
  return result;
}

void MixViterbiProd::updateDecode_Post(uint64_t a1, _QWORD *a2, char **a3, uint64_t *a4, int a5)
{
  int v6;
  std::vector<unsigned int>::size_type v7;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  std::vector<unsigned int> v16;
  uint64_t v17[3];
  std::vector<unsigned int> __p;
  void **v19;

  v6 = *(_DWORD *)(a1 + 216);
  v7 = (a5 - v6);
  if (a5 - v6 >= 0)
  {
    memset(&__p, 0, sizeof(__p));
    memset(v17, 0, sizeof(v17));
    MixViterbiProd::decodeRaw_Post(a1, -v6, &__p, v17);
    memset(&v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    std::vector<unsigned int>::resize(&v16, v7);
    std::vector<std::vector<float>>::resize(a4, v7);
    MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(a1, &__p.__begin_, &v16, v7);
    std::vector<std::vector<float>>::resize(a4, v7);
    v13 = (char *)*a4;
    v12 = (char *)a4[1];
    if ((char *)*a4 != v12)
    {
      v14 = v17[0];
      do
      {
        if (v13 != (char *)v14)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v13, *(char **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
          v12 = (char *)a4[1];
        }
        v14 += 24;
        v13 += 24;
      }
      while (v13 != v12);
    }
    MixViterbiProd::convertRawStateSequenceToProd(a1, &v16, a2);
    MixViterbiProd::retrieveTimeStamps(a1, *(_DWORD *)(a1 + 216) + 1, a5, a3);
    *(_DWORD *)(a1 + 216) = a5;
    v19 = (void **)v15;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
    v16.__begin_ = (std::vector<unsigned int>::pointer)v17;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  *(_BYTE *)(a1 + 220) = 0;
}

void sub_1B62FDBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a13 = &a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id createDescriptionFromAudioStreamBasicDescription(const AudioStreamBasicDescription *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[9];
  _QWORD v14[11];

  v14[9] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1->mSampleRate, CFSTR("SampleRate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v2;
  v13[1] = CFSTR("AudioFormatID");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mFormatID);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v14[1] = v3;
  v13[2] = CFSTR("AudioFormatFlags");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mFormatFlags);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14[2] = v4;
  v13[3] = CFSTR("BytesPerPacket");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mBytesPerPacket);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14[3] = v5;
  v13[4] = CFSTR("FramesPerPacket");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mFramesPerPacket);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14[4] = v6;
  v13[5] = CFSTR("BytesPerFrame");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mBytesPerFrame);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14[5] = v7;
  v13[6] = CFSTR("ChannelsPerFrame");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mChannelsPerFrame);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14[6] = v8;
  v13[7] = CFSTR("BitsPerChannel");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mBitsPerChannel);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14[7] = v9;
  v13[8] = CFSTR("Reserved");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->mReserved);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[8] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1B62FDE00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t fromInt(unsigned int *a1, unsigned int *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
}

uint64_t fromInt64(_QWORD *a1, unsigned int *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a1);
}

uint64_t fromUInt32(unsigned int *a1, unsigned int *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *a1);
}

uint64_t fromFloat32(_DWORD *a1, unsigned int *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
}

uint64_t fromFloat64(double *a1, unsigned int *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *a1);
}

id fromCFDataRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromCFArrayRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromInt64Array(uint64_t *a1, unsigned int *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 >= 8)
  {
    v5 = v3 >> 3;
    do
    {
      v6 = *a1++;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v7);

      --v5;
    }
    while (v5);
  }
  return v4;
}

void sub_1B62FDF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id fromUInt32Array(unsigned int *a1, unsigned int *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  unsigned int v6;
  void *v7;

  v3 = *a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 >= 4)
  {
    v5 = v3 >> 2;
    do
    {
      v6 = *a1++;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v7);

      --v5;
    }
    while (v5);
  }
  return v4;
}

void sub_1B62FE014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id fromCFStringRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromFloat32Array(_DWORD *a1, unsigned int *a2)
{
  unint64_t v3;
  void *v4;
  double v5;
  unint64_t v6;
  void *v7;

  v3 = *a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 >= 4)
  {
    v6 = v3 >> 2;
    do
    {
      LODWORD(v5) = *a1;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v7);

      ++a1;
      --v6;
    }
    while (v6);
  }
  return v4;
}

void sub_1B62FE0C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id fromFloat64Array(double *a1, unsigned int *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v3 = *a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 >= 8)
  {
    v5 = v3 >> 3;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

      ++a1;
      --v5;
    }
    while (v5);
  }
  return v4;
}

void sub_1B62FE164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id fromCFNumberRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromAUChannelInfo(__int16 *a1, unsigned int *a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7[0] = CFSTR("InChannels");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = CFSTR("OutChannels");
  v8[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1B62FE258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id fromAUFreqRespBin(double *a1, unsigned int *a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7[0] = CFSTR("Frequency");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = CFSTR("Magnitude");
  v8[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1B62FE34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id fromCFDictionaryRef(id *a1, unsigned int *a2)
{
  id v2;
  id v3;
  void *v4;

  v2 = *a1;
  if (objc_msgSend(*a1, "count") == 1)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = v2;
  }
  v4 = v3;

  return v4;
}

void sub_1B62FE3C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id fromAudioChannelLayout(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  _DWORD *v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[4];
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[5];

  v28[3] = *MEMORY[0x1E0C80C00];
  v21[0] = CFSTR("AudioChannelLayoutTag");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *a1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v18;
  v21[1] = CFSTR("AudioChannelBitmap");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[1]);
  v23 = objc_claimAutoreleasedReturnValue();
  v21[2] = CFSTR("NumberChannelDescriptions");
  v16 = (void *)v23;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[2]);
  v24 = objc_claimAutoreleasedReturnValue();
  v21[3] = CFSTR("AudioChannelDescriptions");
  v17 = (void *)v24;
  v19 = (void *)objc_opt_new();
  if (a1[2])
  {
    v2 = 0;
    v3 = a1 + 7;
    do
    {
      v27[0] = CFSTR("AudioChannelLabel");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(v3 - 4));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v28[0] = v4;
      v27[1] = CFSTR("AudioChannelFlags");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(v3 - 3));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v28[1] = v5;
      v27[2] = CFSTR("Coordinates");
      LODWORD(v6) = *(v3 - 2);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v7;
      LODWORD(v8) = *(v3 - 1);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v26[1] = v9;
      LODWORD(v10) = *v3;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v26[2] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v28[2] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v19, "addObject:", v13);
      ++v2;
      v3 += 5;
    }
    while (v2 < a1[2]);
  }
  v25 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, v21, 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1B62FE658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id fromAUOneChannelNS_VADTheshParams(unsigned int *a1, unsigned int *a2, double a3)
{
  void *v4;
  double v5;
  void *v6;
  void *v7;
  double v8;
  _DWORD *v9;
  void *v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD v16[5];
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  v16[0] = CFSTR("ThresholdMultiplier");
  LODWORD(a3) = *a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v4;
  v16[1] = CFSTR("ThresholdMultiplierPower");
  LODWORD(v5) = a1[1];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = v6;
  v16[2] = CFSTR("NumLUTPoints");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[2]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17[2] = v7;
  v16[3] = CFSTR("ThresholdMultiplierLUTx");
  v9 = (_DWORD *)*((_QWORD *)a1 + 2);
  if (v9)
  {
    LODWORD(v8) = *v9;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[3] = v10;
  v16[4] = CFSTR("ThresholdMultiplierLUTy");
  v12 = *((_QWORD *)a1 + 2);
  if (v12)
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[4] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1B62FE8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id fromAUOneChannelNSV4_VADTheshParams(unsigned int *a1, unsigned int *a2, double a3)
{
  void *v4;
  double v5;
  void *v6;
  void *v7;
  double v8;
  _DWORD *v9;
  void *v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD v16[5];
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  v16[0] = CFSTR("ThresholdMultiplier");
  LODWORD(a3) = *a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v4;
  v16[1] = CFSTR("ThresholdMultiplierPower");
  LODWORD(v5) = a1[1];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = v6;
  v16[2] = CFSTR("NumLUTPoints");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[2]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17[2] = v7;
  v16[3] = CFSTR("ThresholdMultiplierLUTx");
  v9 = (_DWORD *)*((_QWORD *)a1 + 2);
  if (v9)
  {
    LODWORD(v8) = *v9;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[3] = v10;
  v16[4] = CFSTR("ThresholdMultiplierLUTy");
  v12 = *((_QWORD *)a1 + 2);
  if (v12)
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[4] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1B62FEABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void getValueTypeFunctionCastMap(void)
{
  unsigned __int8 v0;

  {
    qword_1EF1368E8 = 0;
    qword_1EF1368E0 = 0;
    getValueTypeFunctionCastMap(void)::gMap = (uint64_t)&qword_1EF1368E0;
  }
  if (getValueTypeFunctionCastMap(void)::onceToken != -1)
    dispatch_once(&getValueTypeFunctionCastMap(void)::onceToken, &__block_literal_global_7502);
}

uint64_t *std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  v5 = (uint64_t **)&qword_1EF1368E0;
  v6 = qword_1EF1368E0;
  if (qword_1EF1368E0)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v6;
        v8 = *(_DWORD *)(v6 + 32);
        if (v8 <= (int)result)
          break;
        v6 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= (int)result)
        break;
      v6 = v7[1];
      if (!v6)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = &qword_1EF1368E0;
LABEL_9:
    v9 = operator new(0x48uLL);
    v9[5] = &off_1E69D1A10;
    *((_DWORD *)v9 + 8) = a2;
    v9[6] = a3;
    v9[8] = v9 + 5;
    return std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v7, v5, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  v5 = (uint64_t **)&qword_1EF1368E0;
  v6 = qword_1EF1368E0;
  if (qword_1EF1368E0)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v6;
        v8 = *(_DWORD *)(v6 + 32);
        if (v8 <= (int)result)
          break;
        v6 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= (int)result)
        break;
      v6 = v7[1];
      if (!v6)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = &qword_1EF1368E0;
LABEL_9:
    v9 = operator new(0x48uLL);
    v9[5] = &off_1E69D1A58;
    *((_DWORD *)v9 + 8) = a2;
    v9[6] = a3;
    v9[8] = v9 + 5;
    return std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v7, v5, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  v5 = (uint64_t **)&qword_1EF1368E0;
  v6 = qword_1EF1368E0;
  if (qword_1EF1368E0)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v6;
        v8 = *(_DWORD *)(v6 + 32);
        if (v8 <= (int)result)
          break;
        v6 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= (int)result)
        break;
      v6 = v7[1];
      if (!v6)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = &qword_1EF1368E0;
LABEL_9:
    v9 = operator new(0x48uLL);
    v9[5] = &off_1E69D1AA0;
    *((_DWORD *)v9 + 8) = a2;
    v9[6] = a3;
    v9[8] = v9 + 5;
    return std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v7, v5, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)getValueTypeFunctionCastMap(void)::gMap)
  {
    getValueTypeFunctionCastMap(void)::gMap = *(_QWORD *)getValueTypeFunctionCastMap(void)::gMap;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF1368E0, a3);
  ++qword_1EF1368E8;
  return result;
}

void std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69D1B30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69D1B30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69D1AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69D1AE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69D1AA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69D1AA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69D1A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69D1A58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69D1A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69D1A10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void ___Z23getAUGenericPropertyMapv_block_invoke()
{
  _DWORD *v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t **v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  id v10;
  int v11;

  v10 = CFSTR("Latency");
  v11 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xCu, (uint64_t)&v10);

  v10 = CFSTR("TailTime");
  v11 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x14u, (uint64_t)&v10);

  v10 = CFSTR("SampleRate");
  v11 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 2u, (uint64_t)&v10);

  v10 = CFSTR("SupportsMPE");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x3Au, (uint64_t)&v10);

  v10 = CFSTR("StreamFormat");
  v11 = 5;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 8u, (uint64_t)&v10);

  v10 = CFSTR("ElementCount");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xBu, (uint64_t)&v10);

  v10 = CFSTR("BypassEffect");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x15u, (uint64_t)&v10);

  v10 = CFSTR("RenderQuality");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x1Au, (uint64_t)&v10);

  v10 = CFSTR("OfflineRender");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x25u, (uint64_t)&v10);

  v10 = CFSTR("LastRenderError");
  v11 = 0;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x16u, (uint64_t)&v10);

  v10 = CFSTR("ContextName");
  v11 = 15;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x19u, (uint64_t)&v10);

  v10 = CFSTR("AudioChannelLayout");
  v11 = 7;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x13u, (uint64_t)&v10);

  v10 = CFSTR("InPlaceProcessing");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x1Du, (uint64_t)&v10);

  v0 = operator new(0x38uLL);
  v0[8] = 3700;
  *((_QWORD *)v0 + 5) = CFSTR("UsesFixedBlockSize");
  v0[12] = 1;
  v1 = (uint64_t **)&qword_1EF136908;
  v2 = qword_1EF136908;
  if (qword_1EF136908)
  {
    while (1)
    {
      while (1)
      {
        v3 = (uint64_t *)v2;
        v4 = *(_DWORD *)(v2 + 32);
        if (v4 < 0xE75)
          break;
        v2 = *v3;
        v5 = (uint64_t **)v3;
        if (!*v3)
          goto LABEL_9;
      }
      if (v4 == 3700)
        break;
      v2 = v3[1];
      if (!v2)
      {
        v5 = (uint64_t **)(v3 + 1);
        goto LABEL_9;
      }
    }
    operator delete(v0);
  }
  else
  {
    v5 = (uint64_t **)&qword_1EF136908;
    v3 = &qword_1EF136908;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&getAUGenericPropertyMap(void)::gMap, (uint64_t)v3, v5, (uint64_t *)v0);
  }
  v10 = CFSTR("ShouldAllocateBuffer");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x33u, (uint64_t)&v10);

  v10 = CFSTR("FrequencyResponse");
  v11 = 8;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x34u, (uint64_t)&v10);

  v10 = CFSTR("MaximumFramesPerSlice");
  v11 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xEu, (uint64_t)&v10);

  v10 = CFSTR("SupportedNumChannels");
  v11 = 6;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xDu, (uint64_t)&v10);

  v6 = operator new(0x38uLL);
  v6[8] = 6625;
  *((_QWORD *)v6 + 5) = CFSTR("DspLibExcludeChannelMask");
  v6[12] = 1;
  v7 = qword_1EF136908;
  if (qword_1EF136908)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v7;
        v9 = *(_DWORD *)(v7 + 32);
        if (v9 >> 1 < 0xCF1)
          break;
        v7 = *v8;
        v1 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_19;
      }
      if (v9 == 6625)
        break;
      v7 = v8[1];
      if (!v7)
      {
        v1 = (uint64_t **)(v8 + 1);
        goto LABEL_19;
      }
    }
    operator delete(v6);
  }
  else
  {
    v8 = &qword_1EF136908;
LABEL_19:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&getAUGenericPropertyMap(void)::gMap, (uint64_t)v8, v1, (uint64_t *)v6);
  }
  v10 = CFSTR("SupportedChannelLayoutTags");
  v11 = 17;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x20u, (uint64_t)&v10);

}

void sub_1B62FF794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  void *v9;
  uint64_t **v10;
  unsigned int v11;

  v6 = operator new(0x38uLL);
  v7 = a1 + 1;
  v8 = a1[1];
  v6[8] = a2;
  v9 = *(void **)a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)v6 + 5) = v9;
  v6[12] = *(_DWORD *)(a3 + 8);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2)
          break;
        v8 = *v10;
        v7 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= a2)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v7 = v10 + 1;
        goto LABEL_9;
      }
    }

    operator delete(v6);
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v10, v7, (uint64_t *)v6);
  }
}

void getAUEffectSubTypePropertyMap(void)
{
  unsigned __int8 v0;

  {
    qword_1EF136938 = 0;
    qword_1EF136930 = 0;
    getAUEffectSubTypePropertyMap(void)::gMap = (uint64_t)&qword_1EF136930;
  }
  if (getAUEffectSubTypePropertyMap(void)::onceToken != -1)
    dispatch_once(&getAUEffectSubTypePropertyMap(void)::onceToken, &__block_literal_global_139);
}

void ___Z29getAUEffectSubTypePropertyMapv_block_invoke()
{
  uint64_t i;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD **v3;
  char *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD **v30;
  _QWORD *v31[2];
  _QWORD **v32;
  _QWORD *v33[2];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD **v38;
  _QWORD *v39[2];
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD **v50;
  _QWORD *v51[2];
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[3];
  _QWORD **v55;
  _QWORD *v56[2];
  _QWORD **v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  __CFString *v61;
  int v62;
  uint64_t v63;
  __CFString *v64;
  int v65;
  uint64_t v66;
  __CFString *v67;
  int v68;
  uint64_t v69;
  __CFString *v70;
  int v71;
  uint64_t v72;
  __CFString *v73;
  int v74;
  int v75;
  const __CFString *v76;
  int v77;
  int v78;
  const __CFString *v79;
  int v80;
  int v81;
  const __CFString *v82;
  int v83;
  int v84;
  const __CFString *v85;
  int v86;
  int v87;
  const __CFString *v88;
  int v89;
  int v90;
  const __CFString *v91;
  int v92;
  int v93;
  const __CFString *v94;
  int v95;
  int v96;
  const __CFString *v97;
  int v98;
  int v99;
  const __CFString *v100;
  int v101;
  int v102;
  const __CFString *v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  LODWORD(v72) = 2200;
  v73 = CFSTR("NumberOfBands");
  v74 = 1;
  v75 = 2201;
  v76 = CFSTR("MaxNumberOfBands");
  v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v57, (int *)&v72, 2);
  for (i = 32; i != -16; i -= 24)

  v1 = operator new(0x40uLL);
  v2 = v58;
  v3 = v57;
  v1[6] = v58;
  v4 = (char *)(v1 + 6);
  *((_DWORD *)v1 + 8) = 1851942257;
  v1[5] = v3;
  v5 = v59;
  v1[7] = v59;
  if (v5)
  {
    v2[2] = v4;
    v57 = &v58;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v1[5] = v4;
  }
  v6 = (uint64_t **)&qword_1EF136930;
  v7 = qword_1EF136930;
  if (qword_1EF136930)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v7;
        v9 = *(_DWORD *)(v7 + 32);
        if (v9 <= 0x6E626571)
          break;
        v7 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v9 == 1851942257)
        break;
      v7 = v8[1];
      if (!v7)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_14;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v2);
    operator delete(v1);
  }
  else
  {
    v8 = &qword_1EF136930;
LABEL_14:
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v8, v6, v1);
  }
  v56[1] = 0;
  v56[0] = 0;
  v55 = v56;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6C656335u, &v55);
  LODWORD(v72) = 4521;
  v73 = CFSTR("UseVideoMode");
  v74 = 1;
  v75 = 4522;
  v76 = CFSTR("UseV1Mode");
  v77 = 1;
  v78 = 4523;
  v79 = CFSTR("VADModeThresholdParams");
  v80 = 10;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v54, (int *)&v72, 3);
  for (j = 56; j != -16; j -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F6E7334u, v54);
  LODWORD(v72) = 64001;
  v73 = CFSTR("DeesserMode");
  v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v53, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64656573u, v53);
  LODWORD(v72) = 4521;
  v73 = CFSTR("UseVideoMode");
  v74 = 1;
  v75 = 4523;
  v76 = CFSTR("UseVADMode");
  v77 = 1;
  v78 = 4525;
  v79 = CFSTR("VADModeThresholdParams");
  v80 = 9;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v52, (int *)&v72, 3);
  for (k = 56; k != -16; k -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F636E73u, v52);
  v51[1] = 0;
  v51[0] = 0;
  v50 = v51;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D636563u, &v50);
  LODWORD(v72) = 64001;
  v73 = CFSTR("AllowLookAhead");
  v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v49, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766C6332u, v49);
  LODWORD(v72) = 3701;
  v73 = CFSTR("TransformSize");
  v74 = 1;
  v75 = 3704;
  v76 = CFSTR("AuxVectorEnable");
  v77 = 1;
  v78 = 3709;
  v79 = CFSTR("ReverseMicChannelFlag");
  v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v48, (int *)&v72, 3);
  for (m = 56; m != -16; m -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x62656D32u, v48);
  LODWORD(v72) = 3701;
  v73 = CFSTR("TransformSize");
  v74 = 1;
  v75 = 3704;
  v76 = CFSTR("AuxVectorEnable");
  v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v47, (int *)&v72, 2);
  for (n = 32; n != -16; n -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x626D6E66u, v47);
  LODWORD(v72) = 4503;
  v73 = CFSTR("ReportedLatency");
  v74 = 12;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v46, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x66697266u, v46);
  LODWORD(v72) = 5200;
  v73 = CFSTR("NoiseSpectrumEstimate");
  v74 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v45, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F636E65u, v45);
  LODWORD(v72) = 2200;
  v73 = CFSTR("NumberOfBands");
  v74 = 1;
  v75 = 2201;
  v76 = CFSTR("MaxNumberOfBands");
  v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v44, (int *)&v72, 2);
  for (ii = 32; ii != -16; ii -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D626571u, v44);
  LODWORD(v72) = 64002;
  v73 = CFSTR("ShadingMode");
  v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v43, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x726F7368u, v43);
  LODWORD(v72) = 64002;
  v73 = CFSTR("GainsDB");
  v74 = 19;
  v75 = 64003;
  v76 = CFSTR("Gains");
  v77 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v42, (int *)&v72, 2);
  for (jj = 32; jj != -16; jj -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6678676Eu, v42);
  LODWORD(v72) = 64001;
  v73 = CFSTR("ForThermalProtection");
  v74 = 1;
  v75 = 64002;
  v76 = CFSTR("ForNonCLTMHaptics");
  v77 = 1;
  v78 = 64003;
  v79 = CFSTR("AttenuationActiveState");
  v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v41, (int *)&v72, 3);
  for (kk = 56; kk != -16; kk -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766F6C69u, v41);
  LODWORD(v72) = 64001;
  v73 = CFSTR("ForThermalProtection");
  v74 = 1;
  v75 = 64002;
  v76 = CFSTR("ForNonCLTMHaptics");
  v77 = 1;
  v78 = 64003;
  v79 = CFSTR("AttenuationActiveState");
  v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v40, (int *)&v72, 3);
  for (mm = 56; mm != -16; mm -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766F6C69u, v40);
  v39[0] = 0;
  v39[1] = 0;
  v38 = v39;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x61787463u, &v38);
  LODWORD(v72) = 1668179559;
  v73 = CFSTR("ConfigPlist");
  v74 = 16;
  v75 = 1718186611;
  v76 = CFSTR("FIRMatrices");
  v77 = 13;
  v78 = 1717924720;
  v79 = CFSTR("SetParameters");
  v80 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v37, (int *)&v72, 3);
  for (nn = 56; nn != -16; nn -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x66697265u, v37);
  LODWORD(v72) = 1667788397;
  v73 = CFSTR("IOChannelNames");
  v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v36, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x70636872u, v36);
  LODWORD(v72) = 8900;
  v73 = CFSTR("BQPlist");
  v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v35, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6C6F7564u, v35);
  LODWORD(v72) = 3699;
  v73 = CFSTR("NeuralNetSPPMask");
  v74 = 19;
  v75 = 36999;
  v76 = CFSTR("NeuralNetSPPPostMask");
  v77 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v34, (int *)&v72, 2);
  for (i1 = 32; i1 != -16; i1 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6E6E7370u, v34);
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x776E646Bu, &v32);
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64727662u, &v30);
  LODWORD(v72) = 1885566051;
  v73 = CFSTR("ParameterChangeTimeConstant");
  v74 = 3;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v29, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73637479u, v29);
  LODWORD(v72) = 6611;
  v73 = CFSTR("DspLibPeakPowerGuardAdmittanceFilterCoefficients");
  v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v28, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x61707067u, v28);
  LODWORD(v72) = 8808;
  v73 = CFSTR("AlgoOrder");
  v74 = 12;
  v75 = 1668179559;
  v76 = CFSTR("ConfigPlist");
  v77 = 16;
  v78 = 8801;
  v79 = CFSTR("SpksInRows");
  v80 = 13;
  v81 = 8802;
  v82 = CFSTR("SpksOffset");
  v83 = 13;
  v84 = 8800;
  v85 = CFSTR("BeamComp");
  v86 = 13;
  v87 = 8803;
  v88 = CFSTR("BeamFIR");
  v89 = 13;
  v90 = 8804;
  v91 = CFSTR("ModalFIR");
  v92 = 13;
  v93 = 8805;
  v94 = CFSTR("EQBiQuad");
  v95 = 13;
  v96 = 8806;
  v97 = CFSTR("DriverBQ");
  v98 = 13;
  v99 = 8807;
  v100 = CFSTR("CongifPlistVersion");
  v101 = 15;
  v102 = 8809;
  v103 = CFSTR("BeamDescriptions");
  v104 = 13;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v27, (int *)&v72, 11);
  for (i2 = 248; i2 != -16; i2 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x63726361u, v27);
  LODWORD(v72) = 1003;
  v73 = CFSTR("ChannelSplitMode");
  v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v26, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73656E73u, v26);
  LODWORD(v72) = 1936483181;
  v73 = CFSTR("ChannelMap");
  v74 = 17;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v25, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x636C736Cu, v25);
  LODWORD(v72) = 64001;
  v73 = CFSTR("TransducerCalibration");
  v74 = 13;
  v75 = 64002;
  v76 = CFSTR("VPMode");
  v77 = 1;
  v78 = 64004;
  v79 = CFSTR("EnableClosedLoop");
  v80 = 1;
  v81 = 64005;
  v82 = CFSTR("SpeakerInputDataSourceOrder");
  v83 = 17;
  v84 = 64006;
  v85 = CFSTR("IgnoreChannelTelemetry");
  v86 = 17;
  v87 = 64007;
  v88 = CFSTR("ThermalStateOverride");
  v89 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v24, (int *)&v72, 6);
  for (i3 = 128; i3 != -16; i3 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73707033u, v24);
  LODWORD(v72) = 64003;
  v73 = CFSTR("MaxNumBands");
  v74 = 1;
  v75 = 64004;
  v76 = CFSTR("CrossoverOrder");
  v77 = 1;
  v78 = 64005;
  v79 = CFSTR("PrioritizeLatency");
  v80 = 1;
  v81 = 64006;
  v82 = CFSTR("AllowLookahead");
  v83 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v23, (int *)&v72, 4);
  for (i4 = 80; i4 != -16; i4 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D647032u, v23);
  LODWORD(v69) = 64002;
  v70 = CFSTR("InitialGainDB");
  v71 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v72, (int *)&v69, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x706C7567u, &v72);
  LODWORD(v66) = 1936289382;
  v67 = CFSTR("StateInformation");
  v68 = 13;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v69, (int *)&v66, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64737067u, &v69);
  LODWORD(v63) = 64001;
  v64 = CFSTR("VolumeMap");
  v65 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v66, (int *)&v63, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73706C6Du, &v66);
  v60 = 4501;
  v61 = CFSTR("Algorithm");
  v62 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v63, &v60, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x62737332u, &v63);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v64);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v67);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v70);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v73);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v23[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v24[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v25[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v26[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v27[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v28[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v29[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v31[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v33[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v34[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v35[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v36[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v37[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v39[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v40[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v41[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v42[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v43[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v44[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v45[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v46[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v47[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v48[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v49[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v51[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v52[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v53[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)v54[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v56[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v58);
}

void sub_1B63007E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,_QWORD *a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,uint64_t a41,_QWORD *a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,uint64_t a47,_QWORD *a48,uint64_t a49,uint64_t a50,_QWORD *a51,uint64_t a52,uint64_t a53,_QWORD *a54,uint64_t a55,uint64_t a56,_QWORD *a57,uint64_t a58,uint64_t a59,_QWORD *a60,uint64_t a61,uint64_t a62,_QWORD *a63)
{
  _QWORD *a66;
  _QWORD *a69;
  _QWORD *a72;

  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x300]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x318]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x330]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x348]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a12);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a15);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a18);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a21);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a24);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a27);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a30);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a33);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a36);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a39);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a42);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a45);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a48);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a51);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a54);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a57);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a60);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a63);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a66);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a69);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a72);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x210]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x228]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x240]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x258]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x270]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x288]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x2A0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x2B8]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((_QWORD *)STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void sub_1B6300944()
{

  JUMPOUT(0x1B630084CLL);
}

void sub_1B6300954()
{
  JUMPOUT(0x1B630084CLL);
}

void sub_1B630095C()
{
  uint64_t v0;
  uint64_t i;

  for (i = 80; i != -16; i -= 24)

  JUMPOUT(0x1B6300854);
}

void sub_1B630097C()
{
  JUMPOUT(0x1B6300854);
}

void sub_1B6300984()
{
  uint64_t v0;
  uint64_t i;

  for (i = 128; i != -16; i -= 24)

  JUMPOUT(0x1B630085CLL);
}

void sub_1B63009A4()
{
  JUMPOUT(0x1B630085CLL);
}

void sub_1B63009AC()
{

  JUMPOUT(0x1B6300864);
}

void sub_1B63009BC()
{
  JUMPOUT(0x1B6300864);
}

void sub_1B63009C4()
{

  JUMPOUT(0x1B630086CLL);
}

void sub_1B63009D4()
{
  JUMPOUT(0x1B630086CLL);
}

void sub_1B63009DC()
{
  uint64_t v0;
  uint64_t i;

  for (i = 248; i != -16; i -= 24)

  JUMPOUT(0x1B6300874);
}

void sub_1B63009FC()
{
  JUMPOUT(0x1B6300874);
}

void sub_1B6300A04()
{

  JUMPOUT(0x1B630087CLL);
}

void sub_1B6300A14()
{
  JUMPOUT(0x1B630087CLL);
}

void sub_1B6300A1C()
{

  JUMPOUT(0x1B6300884);
}

void sub_1B6300A2C()
{
  JUMPOUT(0x1B6300884);
}

void sub_1B6300A34()
{
  JUMPOUT(0x1B630088CLL);
}

void sub_1B6300A3C()
{
  JUMPOUT(0x1B6300894);
}

void sub_1B6300A44()
{
  uint64_t v0;
  uint64_t i;

  for (i = 32; i != -16; i -= 24)

  JUMPOUT(0x1B630089CLL);
}

void sub_1B6300A64()
{
  JUMPOUT(0x1B630089CLL);
}

void sub_1B6300A6C()
{

  JUMPOUT(0x1B63008A4);
}

void sub_1B6300A7C()
{
  JUMPOUT(0x1B63008A4);
}

void sub_1B6300A84()
{

  JUMPOUT(0x1B63008ACLL);
}

void sub_1B6300A94()
{
  JUMPOUT(0x1B63008ACLL);
}

void sub_1B6300A9C()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B63008B4);
}

void sub_1B6300ABC()
{
  JUMPOUT(0x1B63008B4);
}

void sub_1B6300AC4()
{
  JUMPOUT(0x1B63008BCLL);
}

void sub_1B6300ACC()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B63008C4);
}

void sub_1B6300AEC()
{
  JUMPOUT(0x1B63008C4);
}

void sub_1B6300AF4()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B63008CCLL);
}

void sub_1B6300B14()
{
  JUMPOUT(0x1B63008CCLL);
}

void sub_1B6300B1C()
{
  uint64_t v0;
  uint64_t i;

  for (i = 32; i != -16; i -= 24)

  JUMPOUT(0x1B63008D4);
}

void sub_1B6300B3C()
{
  JUMPOUT(0x1B63008D4);
}

void sub_1B6300B44()
{

  JUMPOUT(0x1B63008DCLL);
}

void sub_1B6300B54()
{
  JUMPOUT(0x1B63008DCLL);
}

void sub_1B6300B5C()
{
  uint64_t v0;
  uint64_t i;

  for (i = 32; i != -16; i -= 24)

  JUMPOUT(0x1B63008E4);
}

void sub_1B6300B7C()
{
  JUMPOUT(0x1B63008E4);
}

void sub_1B6300B84()
{

  JUMPOUT(0x1B63008ECLL);
}

void sub_1B6300B94()
{
  JUMPOUT(0x1B63008ECLL);
}

void sub_1B6300B9C()
{

  JUMPOUT(0x1B63008F4);
}

void sub_1B6300BAC()
{
  JUMPOUT(0x1B63008F4);
}

void sub_1B6300BB4()
{
  uint64_t v0;
  uint64_t i;

  for (i = 32; i != -16; i -= 24)

  JUMPOUT(0x1B63008FCLL);
}

void sub_1B6300BD4()
{
  JUMPOUT(0x1B63008FCLL);
}

void sub_1B6300BDC()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B6300904);
}

void sub_1B6300BFC()
{
  JUMPOUT(0x1B6300904);
}

void sub_1B6300C04()
{

  JUMPOUT(0x1B630090CLL);
}

void sub_1B6300C14()
{
  JUMPOUT(0x1B630090CLL);
}

void sub_1B6300C1C()
{
  JUMPOUT(0x1B6300914);
}

void sub_1B6300C24()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B630091CLL);
}

void sub_1B6300C44()
{
  JUMPOUT(0x1B630091CLL);
}

void sub_1B6300C4C()
{

  JUMPOUT(0x1B6300924);
}

void sub_1B6300C5C()
{
  JUMPOUT(0x1B6300924);
}

void sub_1B6300C64()
{
  uint64_t v0;
  uint64_t i;

  for (i = 56; i != -16; i -= 24)

  JUMPOUT(0x1B630092CLL);
}

void sub_1B6300C84()
{
  JUMPOUT(0x1B630092CLL);
}

void sub_1B6300C8C()
{
  JUMPOUT(0x1B6300934);
}

void sub_1B6300C94()
{
  uint64_t v0;
  uint64_t i;

  for (i = 32; i != -16; i -= 24)

  JUMPOUT(0x1B630093CLL);
}

uint64_t std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  _DWORD *v16;
  unsigned int v17;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[6 * a3];
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = v4;
      if (v8 == v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        v14 = (uint64_t **)(v6 ? v9 : v4);
        v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        v14 = (uint64_t **)v4;
        v15 = (uint64_t **)v4;
        if (v6)
        {
          v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v6;
              v17 = *((_DWORD *)v6 + 8);
              if (v13 >= v17)
                break;
              v6 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v17 >= v13)
              break;
            v15 = v14 + 1;
            v6 = v14[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x38uLL);
        v16[8] = *v5;
        *((_QWORD *)v16 + 5) = *((id *)v5 + 1);
        v16[12] = v5[4];
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      v5 += 6;
      if (v5 == v7)
        break;
      v8 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
    }
  }
  return a1;
}

void sub_1B6300E14(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)getAUEffectSubTypePropertyMap(void)::gMap)
  {
    getAUEffectSubTypePropertyMap(void)::gMap = *(_QWORD *)getAUEffectSubTypePropertyMap(void)::gMap;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF136930, a3);
  ++qword_1EF136938;
  return result;
}

void std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(unsigned int a1, _QWORD *a2)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;

  v4 = operator new(0x40uLL);
  v4[8] = a1;
  v6 = a2 + 1;
  v5 = (_QWORD *)a2[1];
  *((_QWORD *)v4 + 5) = *a2;
  *((_QWORD *)v4 + 6) = v5;
  v7 = (char *)(v4 + 12);
  v8 = a2[2];
  *((_QWORD *)v4 + 7) = v8;
  if (v8)
  {
    v5[2] = v7;
    *a2 = v6;
    *v6 = 0;
    a2[2] = 0;
  }
  else
  {
    *((_QWORD *)v4 + 5) = v7;
  }
  v9 = (uint64_t **)&qword_1EF136930;
  v10 = qword_1EF136930;
  if (qword_1EF136930)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t *)v10;
        v12 = *(_DWORD *)(v10 + 32);
        if (v12 <= a1)
          break;
        v10 = *v11;
        v9 = (uint64_t **)v11;
        if (!*v11)
          goto LABEL_12;
      }
      if (v12 >= a1)
        break;
      v10 = v11[1];
      if (!v10)
      {
        v9 = (uint64_t **)(v11 + 1);
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v5);
    operator delete(v4);
  }
  else
  {
    v11 = &qword_1EF136930;
LABEL_12:
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v11, v9, (uint64_t *)v4);
  }
}

void std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void ___Z24getBoxGenericPropertyMapv_block_invoke()
{
  id v0;
  int v1;

  v0 = CFSTR("SampleRate");
  v1 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 2u, (uint64_t)&v0);

  v0 = CFSTR("StreamFormat");
  v1 = 5;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 8u, (uint64_t)&v0);

  v0 = CFSTR("ElementCount");
  v1 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0xBu, (uint64_t)&v0);

  v0 = CFSTR("Latency");
  v1 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0xCu, (uint64_t)&v0);

  v0 = CFSTR("TailTime");
  v1 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x14u, (uint64_t)&v0);

  v0 = CFSTR("BypassEffect");
  v1 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x15u, (uint64_t)&v0);

  v0 = CFSTR("InPlaceProcessing");
  v1 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x1Du, (uint64_t)&v0);

  v0 = CFSTR("NickName");
  v1 = 15;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x36u, (uint64_t)&v0);

}

void sub_1B6301130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void getBoxSpecificPropertyMap(void)
{
  unsigned __int8 v0;

  {
    qword_1EF136988 = 0;
    qword_1EF136980 = 0;
    getBoxSpecificPropertyMap(void)::gMap = (uint64_t)&qword_1EF136980;
  }
  if (getBoxSpecificPropertyMap(void)::onceToken != -1)
    dispatch_once(&getBoxSpecificPropertyMap(void)::onceToken, &__block_literal_global_251);
}

void ___Z25getBoxSpecificPropertyMapv_block_invoke()
{
  uint64_t i;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t j;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t k;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t **v33;
  char *v34;
  __CFString *v35;
  __CFString **v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  void *v45;
  __CFString *v46;
  __CFString **v47;
  __CFString **v48;
  unsigned int isa;
  __CFString *v50;
  char *v51;
  __CFString *v52;
  __CFString **v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t **v60;
  char *v61;
  __CFString *v62;
  __CFString **v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD **v76;
  _QWORD *v77;
  uint64_t v78;
  int v79;
  __CFString *v80;
  int v81;
  __CFString **v82;
  __CFString *v83;
  uint64_t v84;
  __CFString **v85;
  __CFString *v86;
  uint64_t v87;
  __CFString **v88;
  __CFString *v89;
  uint64_t v90;
  int v91;
  const __CFString *v92;
  int v93;
  int v94;
  const __CFString *v95;
  int v96;
  int v97;
  const __CFString *v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  LODWORD(v88) = 0;
  v89 = CFSTR("EnableDetailedLogging");
  LODWORD(v90) = 1;
  v91 = 1;
  v92 = CFSTR("LogSamplingThreshold");
  v93 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v76, (int *)&v88, 2);
  for (i = 4; i != -2; i -= 3)

  v1 = operator new(0x40uLL);
  v3 = v76;
  v2 = v77;
  v1[6] = v77;
  v4 = v1 + 6;
  v1[4] = "NonFiniteProtectionBox";
  v1[5] = v3;
  v5 = v78;
  v1[7] = v78;
  if (v5)
  {
    v2[2] = v4;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v1[5] = v4;
  }
  v6 = (uint64_t **)&qword_1EF136980;
  v7 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v8 = v1[4];
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t *)v7;
        v10 = *(_QWORD *)(v7 + 32);
        if (v8 >= v10)
          break;
        v7 = *v9;
        v11 = (uint64_t **)v9;
        if (!*v9)
          goto LABEL_15;
      }
      if (v10 >= v8)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v11 = (uint64_t **)(v9 + 1);
        goto LABEL_15;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v2);
    operator delete(v1);
  }
  else
  {
    v11 = (uint64_t **)&qword_1EF136980;
    v9 = &qword_1EF136980;
LABEL_15:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v9, v11, v1);
  }
  LODWORD(v88) = 3014;
  v89 = CFSTR("SampleRateConverterComplexity");
  LODWORD(v90) = 1;
  v91 = 26;
  v92 = CFSTR("RenderQuality");
  v93 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v73, (int *)&v88, 2);
  for (j = 4; j != -2; j -= 3)

  v13 = operator new(0x40uLL);
  v15 = v73;
  v14 = v74;
  v13[6] = v74;
  v16 = v13 + 6;
  v13[4] = "src";
  v13[5] = v15;
  v17 = v75;
  v13[7] = v75;
  if (v17)
  {
    v14[2] = v16;
    v73 = &v74;
    v74 = 0;
    v75 = 0;
  }
  else
  {
    v13[5] = v16;
  }
  v18 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v19 = v13[4];
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t *)v18;
        v21 = *(_QWORD *)(v18 + 32);
        if (v19 >= v21)
          break;
        v18 = *v20;
        v22 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_31;
      }
      if (v21 >= v19)
        break;
      v18 = v20[1];
      if (!v18)
      {
        v22 = (uint64_t **)(v20 + 1);
        goto LABEL_31;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v14);
    operator delete(v13);
  }
  else
  {
    v22 = (uint64_t **)&qword_1EF136980;
    v20 = &qword_1EF136980;
LABEL_31:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v20, v22, v13);
  }
  LODWORD(v88) = 0;
  v89 = CFSTR("RefIndex");
  LODWORD(v90) = 0;
  v91 = 1;
  v92 = CFSTR("SpacedOmniLeftIndex");
  v93 = 0;
  v94 = 2;
  v95 = CFSTR("SpacedOmniRightIndex");
  v96 = 0;
  v97 = 3;
  v98 = CFSTR("LinearSpatialFirstIndex");
  v99 = 0;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v70, (int *)&v88, 4);
  for (k = 10; k != -2; k -= 3)

  v24 = operator new(0x40uLL);
  v26 = v70;
  v25 = v71;
  v24[6] = v71;
  v27 = v24 + 6;
  v24[4] = "SCMicSelectionBox";
  v24[5] = v26;
  v28 = v72;
  v24[7] = v72;
  if (v28)
  {
    v25[2] = v27;
    v70 = &v71;
    v71 = 0;
    v72 = 0;
  }
  else
  {
    v24[5] = v27;
  }
  v29 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v30 = v24[4];
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t *)v29;
        v32 = *(_QWORD *)(v29 + 32);
        if (v30 >= v32)
          break;
        v29 = *v31;
        v33 = (uint64_t **)v31;
        if (!*v31)
          goto LABEL_47;
      }
      if (v32 >= v30)
        break;
      v29 = v31[1];
      if (!v29)
      {
        v33 = (uint64_t **)(v31 + 1);
        goto LABEL_47;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v25);
    operator delete(v24);
  }
  else
  {
    v33 = (uint64_t **)&qword_1EF136980;
    v31 = &qword_1EF136980;
LABEL_47:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v31, v33, v24);
  }
  LODWORD(v85) = 3098;
  v86 = CFSTR("ParameterChangeSmoothingTime");
  LODWORD(v87) = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v88, (int *)&v85, 1);

  v34 = (char *)operator new(0x40uLL);
  v36 = v88;
  v35 = v89;
  *((_QWORD *)v34 + 6) = v89;
  v37 = v34 + 48;
  *((_QWORD *)v34 + 4) = "GainBox";
  *((_QWORD *)v34 + 5) = v36;
  v38 = v90;
  *((_QWORD *)v34 + 7) = v90;
  if (v38)
  {
    v35->data = v37;
    v88 = &v89;
    v89 = 0;
    v90 = 0;
  }
  else
  {
    *((_QWORD *)v34 + 5) = v37;
  }
  v39 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v40 = *((_QWORD *)v34 + 4);
    while (1)
    {
      while (1)
      {
        v41 = (uint64_t *)v39;
        v42 = *(_QWORD *)(v39 + 32);
        if (v40 >= v42)
          break;
        v39 = *v41;
        v43 = (uint64_t **)v41;
        if (!*v41)
          goto LABEL_61;
      }
      if (v42 >= v40)
        break;
      v39 = v41[1];
      if (!v39)
      {
        v43 = (uint64_t **)(v41 + 1);
        goto LABEL_61;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v35);
    operator delete(v34);
  }
  else
  {
    v43 = (uint64_t **)&qword_1EF136980;
    v41 = &qword_1EF136980;
LABEL_61:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v41, v43, (uint64_t *)v34);
  }
  LODWORD(v82) = 100;
  v83 = CFSTR("NumPropVectors");
  LODWORD(v84) = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v85, (int *)&v82, 1);

  v44 = 0;
  do
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PropVector%u"), v44, v70);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v86;
    v47 = &v86;
    v48 = &v86;
    if (v86)
    {
      while (1)
      {
        while (1)
        {
          v48 = (__CFString **)v46;
          isa = v46[1].isa;
          if (v44 >= isa)
            break;
          v46 = *v48;
          v47 = v48;
          if (!*v48)
            goto LABEL_71;
        }
        if (isa >= v44)
          break;
        v46 = v48[1];
        if (!v46)
        {
          v47 = v48 + 1;
          goto LABEL_71;
        }
      }
    }
    else
    {
LABEL_71:
      v50 = (__CFString *)operator new(0x38uLL);
      LODWORD(v50[1].isa) = v44;
      v50[1].info = (uint64_t)v45;
      LODWORD(v50[1].data) = 19;
      v50->isa = 0;
      v50->info = 0;
      v50->data = (char *)v48;
      *v47 = v50;
      if (*v85)
      {
        v85 = (__CFString **)*v85;
        v50 = *v47;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v86, (uint64_t *)v50);
      v45 = 0;
      ++v87;
    }

    v44 = (v44 + 1);
  }
  while ((_DWORD)v44 != 100);
  v51 = (char *)operator new(0x40uLL);
  v53 = v85;
  v52 = v86;
  *((_QWORD *)v51 + 6) = v86;
  v54 = v51 + 48;
  *((_QWORD *)v51 + 4) = "VectorGainBox";
  *((_QWORD *)v51 + 5) = v53;
  v55 = v87;
  *((_QWORD *)v51 + 7) = v87;
  if (v55)
  {
    v52->data = v54;
    v85 = &v86;
    v86 = 0;
    v87 = 0;
  }
  else
  {
    *((_QWORD *)v51 + 5) = v54;
  }
  v56 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v57 = *((_QWORD *)v51 + 4);
    while (1)
    {
      while (1)
      {
        v58 = (uint64_t *)v56;
        v59 = *(_QWORD *)(v56 + 32);
        if (v57 >= v59)
          break;
        v56 = *v58;
        v60 = (uint64_t **)v58;
        if (!*v58)
          goto LABEL_87;
      }
      if (v59 >= v57)
        break;
      v56 = v58[1];
      if (!v56)
      {
        v60 = (uint64_t **)(v58 + 1);
        goto LABEL_87;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v52);
    operator delete(v51);
  }
  else
  {
    v60 = (uint64_t **)&qword_1EF136980;
    v58 = &qword_1EF136980;
LABEL_87:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v58, v60, (uint64_t *)v51);
  }
  v79 = 64000;
  v80 = CFSTR("MaxDelayFrames");
  v81 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v82, &v79, 1);

  v61 = (char *)operator new(0x40uLL);
  v63 = v82;
  v62 = v83;
  *((_QWORD *)v61 + 6) = v83;
  v64 = v61 + 48;
  *((_QWORD *)v61 + 4) = "DelayBox";
  *((_QWORD *)v61 + 5) = v63;
  v65 = v84;
  *((_QWORD *)v61 + 7) = v84;
  if (v65)
  {
    v62->data = v64;
    v82 = &v83;
    v83 = 0;
    v84 = 0;
  }
  else
  {
    *((_QWORD *)v61 + 5) = v64;
  }
  v66 = qword_1EF136980;
  if (qword_1EF136980)
  {
    v67 = *((_QWORD *)v61 + 4);
    while (1)
    {
      while (1)
      {
        v68 = (uint64_t *)v66;
        v69 = *(_QWORD *)(v66 + 32);
        if (v67 >= v69)
          break;
        v66 = *v68;
        v6 = (uint64_t **)v68;
        if (!*v68)
          goto LABEL_101;
      }
      if (v69 >= v67)
        break;
      v66 = v68[1];
      if (!v66)
      {
        v6 = (uint64_t **)(v68 + 1);
        goto LABEL_101;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v62);
    operator delete(v61);
  }
  else
  {
    v68 = &qword_1EF136980;
LABEL_101:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v68, v6, (uint64_t *)v61);
  }
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v83);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v86);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v89);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v71);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v74);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v77);
}

void sub_1B6301968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28,_QWORD *a29)
{
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a23);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a26);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a29);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a11);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a14);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a17);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)getBoxSpecificPropertyMap(void)::gMap)
  {
    getBoxSpecificPropertyMap(void)::gMap = *(_QWORD *)getBoxSpecificPropertyMap(void)::gMap;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF136980, a3);
  ++qword_1EF136988;
  return result;
}

void addGenericAuPropToDescription(NSMutableDictionary *a1, OpaqueAudioComponentInstance *a2, AudioUnitScope *a3, AudioUnitElement *a4)
{
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  AudioUnitPropertyID v10;
  id v11;
  uint64_t PropertyInfo;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  NSMutableDictionary *v23;
  Boolean outWritable;
  UInt32 outDataSize;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = a1;
  outDataSize = 0;
  outWritable = 1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  {
    qword_1EF136910 = 0;
    qword_1EF136908 = 0;
    getAUGenericPropertyMap(void)::gMap = (uint64_t)&qword_1EF136908;
  }
  if (getAUGenericPropertyMap(void)::onceToken != -1)
    dispatch_once(&getAUGenericPropertyMap(void)::onceToken, &__block_literal_global_100);
  v9 = getAUGenericPropertyMap(void)::gMap;
  if ((uint64_t *)getAUGenericPropertyMap(void)::gMap != &qword_1EF136908)
  {
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = *(id *)(v9 + 40);
      PropertyInfo = AudioUnitGetPropertyInfo(a2, v10, *a3, *a4, &outDataSize, &outWritable);
      if (!(_DWORD)PropertyInfo)
      {
        MEMORY[0x1E0C80A78](PropertyInfo);
        v14 = (char *)&v22 - ((v13 + 15) & 0x1FFFFFFF0);
        if (!AudioUnitGetProperty(a2, v10, *a3, *a4, v14, &outDataSize))
        {
          getValueTypeFunctionCastMap();
          v15 = std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)qword_1EF136908, v10);
          v16 = std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(*((_DWORD *)v15 + 2));
          std::function<objc_object * ()(void *,unsigned int *)>::operator()(*(_QWORD *)(v16 + 24), (uint64_t)v14, (uint64_t)&outDataSize);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = (id)*std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)qword_1EF136908, v10);
          objc_msgSend(v7, "setObject:forKey:", v17, v18);

        }
      }

      v19 = *(uint64_t **)(v9 + 8);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = *(uint64_t **)(v9 + 16);
          v21 = *v20 == v9;
          v9 = (uint64_t)v20;
        }
        while (!v21);
      }
      v9 = (uint64_t)v20;
    }
    while (v20 != &qword_1EF136908);
  }
  -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v7, CFSTR("Generic"));

}

void sub_1B6301D38(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

uint64_t std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(int a1)
{
  uint64_t v1;
  int v2;

  v1 = qword_1EF1368E0;
  if (!qword_1EF1368E0)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1)
        break;
      v1 = *(_QWORD *)v1;
      if (!v1)
        goto LABEL_8;
    }
    if (v2 >= a1)
      return v1 + 40;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      goto LABEL_8;
  }
}

id std::function<objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

void addSubTypeSpecificAuPropToDescription(NSMutableDictionary *a1, OpaqueAudioComponentInstance *a2, unsigned int *a3, AudioUnitScope *a4, AudioUnitElement *a5)
{
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t **v17;
  AudioUnitPropertyID v18;
  uint64_t *v19;
  uint64_t PropertyInfo;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t v30;
  NSMutableDictionary *v31;
  Boolean outWritable;
  UInt32 outDataSize;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31 = a1;
  outDataSize = 0;
  outWritable = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  getAUEffectSubTypePropertyMap();
  v10 = qword_1EF136930;
  if (!qword_1EF136930)
  {
LABEL_7:
    objc_msgSend(v9, "setObject:forKey:", CFSTR("EitherNoSubtypePropertiesElseNeedsToBeAdded"), CFSTR("SubtypeSpecificPropertiesUnavailable"));
    goto LABEL_8;
  }
  v11 = *a3;
  while (1)
  {
    v12 = *(_DWORD *)(v10 + 32);
    if (v11 >= v12)
      break;
LABEL_6:
    v10 = *(_QWORD *)v10;
    if (!v10)
      goto LABEL_7;
  }
  if (v12 < v11)
  {
    v10 += 8;
    goto LABEL_6;
  }
  getAUEffectSubTypePropertyMap();
  v13 = qword_1EF136930;
  if (!qword_1EF136930)
LABEL_16:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v14 = *a3;
  while (1)
  {
    while (1)
    {
      v15 = *(_DWORD *)(v13 + 32);
      if (v14 >= v15)
        break;
      v13 = *(_QWORD *)v13;
      if (!v13)
        goto LABEL_16;
    }
    if (v15 >= v14)
      break;
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_16;
  }
  v16 = *(uint64_t ***)(v13 + 40);
  v17 = (uint64_t **)(v13 + 48);
  if (v16 != (uint64_t **)(v13 + 48))
  {
    do
    {
      v18 = *((_DWORD *)v16 + 8);
      v19 = v16[5];
      PropertyInfo = AudioUnitGetPropertyInfo(a2, v18, *a4, *a5, &outDataSize, &outWritable);
      if ((_DWORD)PropertyInfo)
        v21 = 1;
      else
        v21 = outDataSize == 0;
      if (!v21)
      {
        MEMORY[0x1E0C80A78](PropertyInfo);
        v23 = (char *)&v30 - ((v22 + 15) & 0x1FFFFFFF0);
        if (!AudioUnitGetProperty(a2, v18, *a4, *a5, v23, &outDataSize))
        {
          getValueTypeFunctionCastMap();
          v24 = std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v17, v18);
          v25 = std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(*((_DWORD *)v24 + 2));
          std::function<objc_object * ()(void *,unsigned int *)>::operator()(*(_QWORD *)(v25 + 24), (uint64_t)v23, (uint64_t)&outDataSize);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = (id)*std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v17, v18);
          objc_msgSend(v9, "setObject:forKey:", v26, v27);

        }
      }

      v28 = v16[1];
      if (v28)
      {
        do
        {
          v29 = (uint64_t **)v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t **)v16[2];
          v21 = *v29 == (uint64_t *)v16;
          v16 = v29;
        }
        while (!v21);
      }
      v16 = v29;
    }
    while (v29 != v17);
  }
LABEL_8:
  -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v9, CFSTR("SubTypeSpecific"));

}

void sub_1B63020A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Unwind_Resume(a1);
}

uint64_t AUSM::Properties::Properties(uint64_t a1, uint64_t a2, int a3, int a4, __int128 *a5)
{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = &off_1E69E0768;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  return a1;
}

uint64_t *AUSM::Properties::addPropertyMapEntry<unsigned int>(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4, int a5, int a6, char a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unsigned int v22;
  uint64_t **v23;
  _DWORD *v24;

  v17 = (_QWORD *)operator new();
  AUSM::AtomicProperty<unsigned int>::AtomicProperty((uint64_t)v17, a3, a5, a6, a7, a4);
  v20 = *(uint64_t **)(a1 + 48);
  v19 = (uint64_t **)(a1 + 48);
  v18 = v20;
  *v17 = off_1E69D5780;
  v17[7] = a8;
  v17[8] = a9;
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v18;
        v22 = *((_DWORD *)v18 + 8);
        if (v22 <= a2)
          break;
        v18 = *v21;
        v23 = v21;
        if (!*v21)
          goto LABEL_9;
      }
      if (v22 >= a2)
        return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
      v18 = v21[1];
      if (!v18)
      {
        v23 = v21 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v23 = v19;
    v21 = v19;
LABEL_9:
    v24 = operator new(0x30uLL);
    v24[8] = a2;
    *((_QWORD *)v24 + 5) = v17;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v19 - 1, (uint64_t)v21, v23, (uint64_t *)v24);
  }
}

void sub_1B6302298(_Unwind_Exception *a1)
{
  uint64_t v1;

  AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<unsigned int>(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4, int a5, int a6, char a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t **v20;
  _DWORD *v21;

  v14 = operator new();
  AUSM::AtomicProperty<unsigned int>::AtomicProperty(v14, a3, a5, a6, a7, a4);
  v17 = *(uint64_t **)(a1 + 48);
  v16 = (uint64_t **)(a1 + 48);
  v15 = v17;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v15;
        v19 = *((_DWORD *)v15 + 8);
        if (v19 <= a2)
          break;
        v15 = *v18;
        v20 = v18;
        if (!*v18)
          goto LABEL_9;
      }
      if (v19 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v18[1];
      if (!v15)
      {
        v20 = v18 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v20 = v16;
    v18 = v16;
LABEL_9:
    v21 = operator new(0x30uLL);
    v21[8] = a2;
    *((_QWORD *)v21 + 5) = v14;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v16 - 1, (uint64_t)v18, v20, (uint64_t *)v21);
  }
}

void sub_1B63023D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<AUSM::DistanceParameters>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t **v15;
  _DWORD *v16;

  v8 = operator new();
  *(_QWORD *)v8 = off_1E69E0820;
  *(_QWORD *)(v8 + 8) = 1;
  *(_BYTE *)(v8 + 16) = a4;
  v9 = (std::string *)(v8 + 24);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)v8 = off_1E69D5B40;
  *(_QWORD *)(v8 + 48) = a2;
  v12 = *(uint64_t **)(a1 + 48);
  v11 = (uint64_t **)(a1 + 48);
  v10 = v12;
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v10;
        v14 = *((_DWORD *)v10 + 8);
        if (v14 < 0xBC3)
          break;
        v10 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_12;
      }
      if (v14 == 3010)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v10 = v13[1];
      if (!v10)
      {
        v15 = v13 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v15 = v11;
    v13 = v11;
LABEL_12:
    v16 = operator new(0x30uLL);
    v16[8] = 3010;
    *((_QWORD *)v16 + 5) = v8;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v11 - 1, (uint64_t)v13, v15, (uint64_t *)v16);
  }
}

void sub_1B6302544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Properties::addPropertyMapEntry<unsigned int>(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4, int a5, int a6, char a7)
{
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;

  v14 = operator new();
  AUSM::AtomicProperty<BOOL>::AtomicProperty(v14, a3, a5, a6, a7, a4);
  v16 = a2;
  v17 = v14;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::unique_ptr<AUSM::AtomicProperty<BOOL>>>>((uint64_t *)(a1 + 40), a2, (uint64_t)&v16);
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void sub_1B6302644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void AUSM::Properties::addCFURLAndCStringPropertyMapEntry(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const void **a5, char a6)
{
  size_t v12;
  void **v13;
  const void *v14;
  uint64_t v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t **v20;
  _DWORD *v21;
  size_t v22;
  void **v23;
  const void *v24;
  void *__p[2];
  uint64_t v26;

  if (*((char *)a5 + 23) >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 6);
  if (v26 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*((char *)a5 + 23) >= 0)
      v14 = a5;
    else
      v14 = *a5;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, " CFURL");
  v15 = operator new();
  *(_QWORD *)v15 = off_1E69E0820;
  *(_QWORD *)(v15 + 8) = 1;
  *(_BYTE *)(v15 + 16) = 0;
  v16 = (std::string *)(v15 + 24);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v15 + 40) = v26;
  }
  *(_QWORD *)v15 = off_1E69D5690;
  *(_QWORD *)(v15 + 48) = a4;
  v17 = *(uint64_t **)(a1 + 48);
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v17;
        v19 = *((_DWORD *)v17 + 8);
        if (v19 <= a2)
          break;
        v17 = *v18;
        v20 = v18;
        if (!*v18)
          goto LABEL_22;
      }
      if (v19 >= a2)
        break;
      v17 = v18[1];
      if (!v17)
      {
        v20 = v18 + 1;
        goto LABEL_22;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v20 = (uint64_t **)(a1 + 48);
    v18 = (uint64_t **)(a1 + 48);
LABEL_22:
    v21 = operator new(0x30uLL);
    v21[8] = a2;
    *((_QWORD *)v21 + 5) = v15;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v18, v20, (uint64_t *)v21);
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (*((char *)a5 + 23) >= 0)
    v22 = *((unsigned __int8 *)a5 + 23);
  else
    v22 = (size_t)a5[1];
  v23 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 8);
  if (v26 < 0)
    v23 = (void **)__p[0];
  if (v22)
  {
    if (*((char *)a5 + 23) >= 0)
      v24 = a5;
    else
      v24 = *a5;
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, " CString");
  AUSM::Properties::addPropertyMapEntry<char [],(decltype(nullptr))0>(a1, a3, a4, (uint64_t)__p, a6);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
}

void sub_1B63028EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1BCC95CEC](v14, 0x10B3C403C7774E2);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

void AUSM::Properties::~Properties(AUSM::Properties *this)
{
  *(_QWORD *)this = &off_1E69E0768;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((_QWORD **)this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::PropertyDescriptor::setWritable(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t AUSM::PropertyDescriptor::isWritable(AUSM::PropertyDescriptor *this, int a2)
{
  int v2;
  unsigned int v3;

  v2 = *((_DWORD *)this + 2);
  v3 = a2 ^ 1;
  if (v2 != 2)
    v3 = 0;
  if (v2 == 1)
    return 1;
  else
    return v3;
}

uint64_t AUSM::PropertyDescriptor::getName(AUSM::PropertyDescriptor *this)
{
  return (uint64_t)this + 24;
}

void AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6302C0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

uint64_t AUSM::PropertyDescriptor::hasValueRange(AUSM::PropertyDescriptor *this)
{
  return 0;
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

void AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6302E10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<char [],(decltype(nullptr))0>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t **v17;
  _DWORD *v18;

  v10 = operator new();
  *(_QWORD *)v10 = off_1E69E0820;
  *(_QWORD *)(v10 + 8) = 1;
  *(_BYTE *)(v10 + 16) = a5;
  v11 = (std::string *)(v10 + 24);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)v10 = off_1E69D5708;
  *(_QWORD *)(v10 + 48) = a3;
  v14 = *(uint64_t **)(a1 + 48);
  v13 = (uint64_t **)(a1 + 48);
  v12 = v14;
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v12;
        v16 = *((_DWORD *)v12 + 8);
        if (v16 <= a2)
          break;
        v12 = *v15;
        v17 = v15;
        if (!*v15)
          goto LABEL_12;
      }
      if (v16 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v12 = v15[1];
      if (!v12)
      {
        v17 = v15 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v17 = v13;
    v15 = v13;
LABEL_12:
    v18 = operator new(0x30uLL);
    v18[8] = a2;
    *((_QWORD *)v18 + 5) = v10;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v13 - 1, (uint64_t)v15, v17, (uint64_t *)v18);
  }
}

void sub_1B6302F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

void AUSM::CFURLPropertyCStringInterface::~CFURLPropertyCStringInterface(void **this)
{
  *this = off_1E69E0820;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_1E69E0820;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::CFURLPropertyCStringInterface::getDataSizeBytes(AUSM::CFURLPropertyCStringInterface *this)
{
  CFURLRef v1;
  CFStringRef v2;
  int v3;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p;
  int v8;
  unsigned __int8 v9;
  CFURLRef v10;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v10, *((_QWORD *)this + 6));
  v1 = v10;
  if (!v10)
    return 1;
  v2 = CFURLCopyFileSystemPath(v10, kCFURLPOSIXPathStyle);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v2);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&__p);
  if ((char)v9 < 0)
  {
    v3 = v8;
    operator delete(__p);
  }
  else
  {
    v3 = v9;
  }
  if (cf)
    CFRelease(cf);
  CFRelease(v1);
  return (v3 + 1);
}

void sub_1B63030F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;
  uint64_t v11;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::URLRef::~URLRef((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFURLPropertyCStringInterface::getData(AUSM::CFURLPropertyCStringInterface *this, char *a2)
{
  CFURLRef v3;
  CFStringRef v4;
  char *v5;
  std::runtime_error *exception;
  CFTypeRef cf;
  char __src[8];
  char v10;
  CFURLRef anURL;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((_QWORD *)this + 6));
  v3 = anURL;
  if (anURL)
  {
    v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)__src);
    if (v10 < 0)
    {
      v5 = *(char **)__src;
      strcpy(a2, *(const char **)__src);
      operator delete(v5);
    }
    else
    {
      strcpy(a2, __src);
    }
    if (cf)
      CFRelease(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1B6303218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14)
{
  void *v14;

  __cxa_free_exception(v14);
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::URLRef::~URLRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFURLPropertyCStringInterface::setData(AUSM::CFURLPropertyCStringInterface *this, _BYTE *a2, size_t __len, char a4)
{
  int v4;
  uint64_t v6;
  std::string *p_dst;
  std::string::size_type v8;
  char v9;
  std::string::size_type size;
  std::string::size_type v11;
  int64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v17;
  std::string::size_type v18;
  const void *v19;
  CFURLRef v20;
  CFURLRef v21;
  const void *v22;
  BOOL v23;
  NSObject *v24;
  CFTypeRef v25;
  uint64_t v26;
  const __CFURL **v28;
  const __CFString **v29;
  std::string *v30;
  std::runtime_error *exception;
  std::runtime_error *v32;
  const void *v33;
  const void *v34;
  CFURLRef relativeURL;
  CFTypeRef cf;
  stat v37;
  std::string __dst;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 2);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  cf = 0;
  if (__len > 1 || a2 && (_DWORD)__len == 1 && *a2)
  {
    p_dst = &__dst;
    std::string::basic_string[abi:ne180100](&__dst, a2, __len);
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    size = __dst.__r_.__value_.__l.__size_;
    v11 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v12 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v12 >= 7)
    {
      v13 = (std::string *)((char *)p_dst + v12);
      v14 = p_dst;
      do
      {
        v15 = (std::string *)memchr(v14, 102, v12 - 6);
        if (!v15)
          break;
        if (LODWORD(v15->__r_.__value_.__l.__data_) == 1701603686
          && *(_DWORD *)((char *)v15->__r_.__value_.__r.__words + 3) == 791624293)
        {
          if (v15 != v13 && v15 == p_dst)
          {
            std::string::erase(&__dst, 0, 7uLL);
            v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            size = __dst.__r_.__value_.__l.__size_;
            v11 = __dst.__r_.__value_.__r.__words[0];
            v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          break;
        }
        v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
        v12 = (char *)v13 - (char *)v14;
      }
      while ((char *)v13 - (char *)v14 >= 7);
    }
    if (v9 >= 0)
      v17 = &__dst;
    else
      v17 = (std::string *)v11;
    if (v9 >= 0)
      v18 = v8;
    else
      v18 = size;
    v19 = (const void *)MEMORY[0x1BCC94900](0, v17, v18, 0, 0);
    if (!v19)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    cf = v19;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&relativeURL, *((_QWORD *)this + 6));
  if (!cf)
  {
    if (!relativeURL)
      return 2;
    goto LABEL_57;
  }
  if (!CFURLGetFileSystemRepresentation((CFURLRef)cf, 1u, (UInt8 *)&__dst, 1024)
    || stat((const char *)&__dst, &v37)
    || (v37.st_mode & 0xF000) == 0x4000)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v24 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v28 = (const __CFURL **)applesauce::CF::URLRef::operator->(&cf);
      applesauce::CF::URLRef_proxy::get_filesystem_path((applesauce::CF::URLRef_proxy *)&v34, *v28);
      v29 = (const __CFString **)applesauce::CF::StringRef::operator->(&v34);
      applesauce::CF::convert_to<std::string,0>(*v29, (uint64_t)&__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__dst;
      else
        v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v37.st_dev = 136315394;
      *(_QWORD *)&v37.st_mode = "setData";
      WORD2(v37.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v37.st_ino + 6) = (__darwin_ino64_t)v30;
      _os_log_error_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "CFURLPropertyCStringInterface::%s: file %s not found", (uint8_t *)&v37, 0x16u);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      applesauce::CF::StringRef::~StringRef(&v34);
    }
    v6 = 7;
    goto LABEL_61;
  }
  if (!relativeURL)
    goto LABEL_67;
  if (!cf)
  {
LABEL_57:
    v25 = 0;
    v26 = *((_QWORD *)this + 6);
LABEL_58:
    v33 = v25;
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::store(v26, &v33);
    if (v25)
      CFRelease(v25);
    v6 = 1;
    goto LABEL_61;
  }
  v20 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&__dst, v20);
  if (!cf)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  v21 = CFURLCopyAbsoluteURL((CFURLRef)cf);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v37, v21);
  v22 = *(const void **)&v37.st_dev;
  v23 = (__dst.__r_.__value_.__r.__words[0] | *(_QWORD *)&v37.st_dev) == 0;
  if (__dst.__r_.__value_.__r.__words[0] && *(_QWORD *)&v37.st_dev)
  {
    v23 = CFEqual(__dst.__r_.__value_.__l.__data_, *(CFTypeRef *)&v37.st_dev) != 0;
    v22 = *(const void **)&v37.st_dev;
  }
  if (v22)
    CFRelease(v22);
  if (__dst.__r_.__value_.__r.__words[0])
    CFRelease(__dst.__r_.__value_.__l.__data_);
  if (!v23)
  {
LABEL_67:
    v25 = cf;
    v26 = *((_QWORD *)this + 6);
    if (cf)
      CFRetain(cf);
    goto LABEL_58;
  }
  v6 = 2;
LABEL_61:
  if (relativeURL)
    CFRelease(relativeURL);
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_1B630368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AUSM::CFURLPropertyCStringInterface::createCF(AUSM::CFURLPropertyCStringInterface *this@<X0>, _QWORD *a2@<X8>)
{
  CFURLRef v3;
  CFStringRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;
  CFURLRef anURL;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((_QWORD *)this + 6));
  v3 = anURL;
  if (anURL)
  {
    v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    v5 = cf;
    if (cf)
    {
      CFRetain(cf);
      v6 = cf;
      *a2 = v5;
      if (v6)
        CFRelease(v6);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1B6303898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

void AUSM::CFURLPropertyCStringInterface::printValue(AUSM::CFURLPropertyCStringInterface *this@<X0>, _QWORD *a2@<X8>)
{
  CFURLRef v3;
  CFStringRef v4;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFURLRef anURL;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((_QWORD *)this + 6));
  v3 = anURL;
  if (anURL)
  {
    v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)a2);
    if (cf)
      CFRelease(cf);
    CFRelease(v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "[empty]");
  }
}

void sub_1B6303968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::URLRef::~URLRef(&a10);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::URLRef::operator=(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *applesauce::CF::URLRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1B6303A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::URLRef_proxy::get_filesystem_path(applesauce::CF::URLRef_proxy *this, const __CFURL *a2)
{
  CFStringRef v3;

  v3 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  return applesauce::CF::StringRef::StringRef(this, v3);
}

uint64_t AUSM::CFProperty<__CFURL const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::CFProperty<__CFURL const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::CFProperty<__CFURL const*>::getDataSizeBytes()
{
  return 8;
}

uint64_t AUSM::CFProperty<__CFURL const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1B6303B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFURL const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  int v4;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  CFURLRef v10;
  CFURLRef v11;
  const void *v12;
  BOOL v13;
  NSObject *v14;
  CFURLRef v15;
  uint64_t v16;
  const __CFURL **v18;
  const __CFString **v19;
  UInt8 *v20;
  std::runtime_error *exception;
  CFURLRef v22;
  const void *v23;
  CFURLRef relativeURL;
  CFURLRef url;
  stat v26;
  UInt8 buffer[8];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (v8 && (CFRetain(v8), v9 = CFGetTypeID(v8), v9 != CFURLGetTypeID()))
  {
    url = 0;
    CFRelease(v8);
  }
  else
  {
    url = (CFURLRef)v8;
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&relativeURL, *(_QWORD *)(a1 + 48));
  if (!url)
  {
    if (!relativeURL)
      return 2;
    goto LABEL_33;
  }
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)
    || stat((const char *)buffer, &v26)
    || (v26.st_mode & 0xF000) == 0x4000)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v14 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v18 = (const __CFURL **)applesauce::CF::URLRef::operator->(&url);
      applesauce::CF::URLRef_proxy::get_filesystem_path((applesauce::CF::URLRef_proxy *)&v23, *v18);
      v19 = (const __CFString **)applesauce::CF::StringRef::operator->(&v23);
      applesauce::CF::convert_to<std::string,0>(*v19, (uint64_t)buffer);
      if (v28 >= 0)
        v20 = buffer;
      else
        v20 = *(UInt8 **)buffer;
      v26.st_dev = 136315394;
      *(_QWORD *)&v26.st_mode = "setData";
      WORD2(v26.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v26.st_ino + 6) = (__darwin_ino64_t)v20;
      _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "CFProperty::%s: file %s not found", (uint8_t *)&v26, 0x16u);
      if (v28 < 0)
        operator delete(*(void **)buffer);
      applesauce::CF::StringRef::~StringRef(&v23);
    }
    v7 = 7;
    goto LABEL_37;
  }
  if (!relativeURL)
    goto LABEL_43;
  if (!url)
  {
LABEL_33:
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 48);
LABEL_34:
    v22 = v15;
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::store(v16, (const void **)&v22);
    if (v15)
      CFRelease(v15);
    v7 = 1;
    goto LABEL_37;
  }
  v10 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)buffer, v10);
  if (!url)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v11 = CFURLCopyAbsoluteURL(url);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v26, v11);
  v12 = *(const void **)&v26.st_dev;
  v13 = (*(_QWORD *)buffer | *(_QWORD *)&v26.st_dev) == 0;
  if (*(_QWORD *)buffer && *(_QWORD *)&v26.st_dev)
  {
    v13 = CFEqual(*(CFTypeRef *)buffer, *(CFTypeRef *)&v26.st_dev) != 0;
    v12 = *(const void **)&v26.st_dev;
  }
  if (v12)
    CFRelease(v12);
  if (*(_QWORD *)buffer)
    CFRelease(*(CFTypeRef *)buffer);
  if (!v13)
  {
LABEL_43:
    v15 = url;
    v16 = *(_QWORD *)(a1 + 48);
    if (url)
      CFRetain(url);
    goto LABEL_34;
  }
  v7 = 2;
LABEL_37:
  if (relativeURL)
    CFRelease(relativeURL);
  if (url)
    CFRelease(url);
  return v7;
}

void sub_1B6303EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AUSM::CFProperty<__CFURL const*>::createCF(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void AUSM::CFProperty<__CFURL const*>::printValue(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFURLRef v3;
  CFStringRef v4;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFURLRef anURL;

  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *(_QWORD *)(a1 + 48));
  v3 = anURL;
  if (anURL)
  {
    v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)a2);
    if (cf)
      CFRelease(cf);
    CFRelease(v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "[empty]");
  }
}

void sub_1B630405C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::URLRef::~URLRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicProperty<BOOL>::AtomicProperty(uint64_t a1, uint64_t a2, int a3, int a4, char a5, __int128 *a6)
{
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = off_1E69E0820;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 16) = a5;
  v8 = (std::string *)(a1 + 24);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v9 = *a6;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)a1 = off_1E69D57F8;
  *(_QWORD *)(a1 + 48) = a2;
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::unique_ptr<AUSM::AtomicProperty<BOOL>>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[8] = *(_DWORD *)a3;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *((_QWORD *)v9 + 5) = v10;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t AUSM::AtomicProperty<BOOL>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<BOOL>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<BOOL>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<BOOL>::getData(uint64_t a1, int *a2)
{
  unsigned __int8 v2;

  v2 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  *a2 = v2 & 1;
  return 0;
}

uint64_t AUSM::AtomicProperty<BOOL>::setData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  int v4;
  _BOOL4 v8;
  unsigned __int8 v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2 != 0;
  v9 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  if (v8 == (v9 & 1))
    return 2;
  atomic_store(*a2 != 0, *(unsigned __int8 **)(a1 + 48));
  return 1;
}

void AUSM::AtomicProperty<BOOL>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned __int8 v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  v3 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  valuePtr = v3 & 1;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6304394(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *AUSM::AtomicProperty<BOOL>::printValue@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v2;
  char *v3;

  v2 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  if ((v2 & 1) != 0)
    v3 = "true";
  else
    v3 = "false";
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::getDataSizeBytes()
{
  return 12;
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::getData(uint64_t a1, uint64_t a2)
{
  unsigned __int128 *v2;
  unsigned __int128 v3;

  v2 = *(unsigned __int128 **)(a1 + 48);
  do
    v3 = __ldaxp(v2);
  while (__stlxp(v3, v2));
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = DWORD2(v3);
  return 0;
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4;
  float v8;
  float v9;
  float v10;
  unsigned __int128 *v11;
  unsigned __int128 v12;
  unsigned __int128 *v15;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = *(unsigned __int128 **)(a1 + 48);
  do
    v12 = __ldaxp(v11);
  while (__stlxp(v12, v11));
  if (v8 == *(float *)&v12 && v9 == *((float *)&v12 + 1) && v10 == *((float *)&v12 + 2))
    return 2;
  v15 = *(unsigned __int128 **)(a1 + 48);
  do
    __ldaxp(v15);
  while (__stlxp(__PAIR128__(LODWORD(v10), LODWORD(v8) | ((unint64_t)LODWORD(v9) << 32)), v15));
  return 1;
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::createCF(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  CFDataRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;
  UInt8 bytes[8];
  int v10;

  v10 = 0;
  *(_QWORD *)bytes = 0;
  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  *(_QWORD *)bytes = v4;
  v10 = DWORD2(v4);
  v5 = CFDataCreate(0, bytes, 12);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v5);
  v6 = cf;
  if (cf)
  {
    CFRetain(cf);
    v7 = cf;
    *a2 = v6;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::printValue(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  std::to_string(&v20, *(float *)&v4);
  v5 = std::string::insert(&v20, 0, "ReferenceDistance = ", 0x14uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v21, ", MaxDistance = ", 0x10uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v19, *((float *)&v4 + 1));
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v19;
  else
    v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v22, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, ", MaxAttenuation = ", 0x13uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, *((float *)&v4 + 2));
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v16 = v18.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
  *a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1B63047CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::AtomicProperty<unsigned int>::AtomicProperty(uint64_t a1, uint64_t a2, int a3, int a4, char a5, __int128 *a6)
{
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = off_1E69E0820;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 16) = a5;
  v8 = (std::string *)(a1 + 24);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v9 = *a6;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)a1 = off_1E69E07A8;
  *(_QWORD *)(a1 + 48) = a2;
  return a1;
}

uint64_t AUSM::AtomicProperty<unsigned int>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<unsigned int>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<unsigned int>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<unsigned int>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<unsigned int>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

void AUSM::AtomicProperty<unsigned int>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6304AAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<unsigned int>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::hasValueRange()
{
  return 1;
}

void AUsubMAEC::dualEC::~dualEC(AUsubMAEC::dualEC *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 4) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 5) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 6) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 7) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 8);
  if (v7)
  {
    free(v7);
    *((_QWORD *)this + 8) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    free(v8);
    *((_QWORD *)this + 9) = 0;
  }
}

void AUsubMAEC::dualEC::initDualEC(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  __int128 v5;
  float v6;
  unsigned int v7;
  unsigned int v8;
  float32x2_t v9;
  float32x2_t v10;
  uint32x2_t v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  uint32x2_t v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  void *v24;
  void *v25;
  size_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  std::bad_alloc *exception;
  std::bad_alloc *v44;

  *(_DWORD *)(a1 + 180) = a2[12];
  *(_DWORD *)(a1 + 184) = a2[2];
  *(_DWORD *)(a1 + 192) = a2[6];
  LODWORD(a4) = a2[7];
  *(_DWORD *)(a1 + 196) = LODWORD(a4);
  *(_DWORD *)(a1 + 200) = a2[13];
  *(_DWORD *)(a1 + 204) = a2[14];
  *(_DWORD *)(a1 + 188) = a2[15];
  *(_OWORD *)(a1 + 112) = xmmword_1B66A1EF0;
  *(_DWORD *)(a1 + 128) = 1138819072;
  *(_DWORD *)(a1 + 152) = 1101004800;
  *(_QWORD *)(a1 + 172) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 92) = v5;
  if (*(float *)&a4 <= 0.0)
  {
    v16 = (uint32x2_t)0x100000001;
    v8 = 1;
    v7 = 5;
    v20 = (uint32x2_t)0x100000001;
    goto LABEL_13;
  }
  v6 = floorf(500.0 / *(float *)&a4);
  if (v6 <= 1.0)
    v6 = 1.0;
  v7 = v6;
  *(_DWORD *)(a1 + 88) = v6;
  v8 = a2[13];
  if (v8 > v6)
  {
    v7 = v8 + 1;
    *(_DWORD *)(a1 + 88) = v8 + 1;
  }
  v9 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
  v10 = vrndm_f32(vdiv_f32((float32x2_t)0x42C8000041A00000, v9));
  __asm { FMOV            V4.2S, #1.0 }
  v16 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32(_D4, v10), (int8x8_t)_D4, (int8x8_t)v10));
  v17 = vdiv_f32((float32x2_t)0x41A0000043480000, v9);
  v18 = floorf(450.0 / *(float *)&a4);
  if (v18 <= 1.0)
    v18 = 1.0;
  if (v8 <= v18)
    v8 = v18;
  v19 = vrndm_f32(v17);
  v20 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32(_D4, v19), (int8x8_t)_D4, (int8x8_t)v19));
  if (v7 < 5)
  {
    v7 = 5;
LABEL_13:
    *(_DWORD *)(a1 + 88) = v7;
    goto LABEL_14;
  }
  if (v7 >= 0x51)
  {
    v7 = 80;
    goto LABEL_13;
  }
LABEL_14:
  v21 = v20.i32[0];
  if (v20.i32[0] >= v7)
    v21 = v7;
  v22 = v20.u32[1];
  if (v20.i32[1] >= v7)
    v22 = v7;
  *(_DWORD *)(a1 + 108) = v22;
  *(uint32x2_t *)(a1 + 92) = vmin_u32(v16, (uint32x2_t)vdup_n_s32(v7));
  if (v8 >= v7 + 1)
    v8 = v7 + 1;
  *(_DWORD *)(a1 + 100) = v21;
  *(_DWORD *)(a1 + 104) = v8;
  if (v8 > v7)
    v7 = v8;
  v23 = 4 * v7;
  v24 = malloc_type_malloc(v23, 0x2C8E6D5CuLL);
  if (!v24)
    goto LABEL_41;
  v25 = v24;
  bzero(v24, v23);
  *(_QWORD *)(a1 + 48) = v25;
  memset_pattern16(v25, &unk_1B66A2BB0, v23);
  v26 = (4 * *(_DWORD *)(a1 + 88));
  v27 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v28 = v27;
  if ((_DWORD)v26)
  {
    if (!v27)
      goto LABEL_41;
  }
  bzero(v27, v26);
  *(_QWORD *)(a1 + 56) = v28;
  v29 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v30 = v29;
  if ((_DWORD)v26)
  {
    if (!v29)
      goto LABEL_41;
  }
  bzero(v29, v26);
  *(_QWORD *)(a1 + 64) = v30;
  v31 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v32 = v31;
  if ((_DWORD)v26)
  {
    if (!v31)
      goto LABEL_41;
  }
  bzero(v31, v26);
  *(_QWORD *)(a1 + 72) = v32;
  v33 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v34 = v33;
  if ((_DWORD)v26)
  {
    if (!v33)
      goto LABEL_41;
  }
  bzero(v33, v26);
  *(_QWORD *)(a1 + 24) = v34;
  v35 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v36 = v35;
  if ((_DWORD)v26)
  {
    if (!v35)
      goto LABEL_41;
  }
  bzero(v35, v26);
  *(_QWORD *)(a1 + 32) = v36;
  v37 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  v38 = v37;
  if ((_DWORD)v26)
  {
    if (!v37)
    {
LABEL_41:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v44 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v37, v26);
  *(_QWORD *)(a1 + 40) = v38;
  v39 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v39)
  {
    v40 = *(_DWORD **)(a1 + 56);
    v41 = *(_DWORD **)(a1 + 64);
    v42 = *(_DWORD **)(a1 + 72);
    do
    {
      *v40++ = 1;
      *v41++ = 1;
      *v42++ = 1;
      --v39;
    }
    while (v39);
  }
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_1B66A0DC0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(float *)(a1 + 132) = __exp10f(-3.5);
  *(_QWORD *)(a1 + 136) = 0xBF0000003E4CCCCDLL;
  *(_DWORD *)(a1 + 144) = -1061158912;
  *(float *)(a1 + 148) = __exp10f(-9.0);
}

void AUsubMAEC::dualEC::dualECProcess(AUsubMAEC::dualEC *this, AUsubMAEC::myFilter *a2, AUsubMAEC::myFilter *a3, AUsubMAEC::Kalman *a4, AUsubMAEC::Kalman *a5, AUsubMAEC::learnRate *a6, AUsubMAEC::learnRate *a7, void **a8, const void **a9, BOOL a10)
{
  float v16;
  int v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  float v49;
  _DWORD *v50;
  _BOOL4 v51;
  _DWORD *v52;
  int v53;
  int v54;
  int *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  AUsubMAEC::Kalman *v60;
  size_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  int *v65;
  int v66;
  uint64_t v67;
  AUsubMAEC::Kalman *v68;
  AUsubMAEC::Kalman *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  float *v77;
  float v78;
  int v79;
  void *v80;
  _DWORD *v81;
  int v82;
  int v83;
  int v84;
  int *v85;
  uint64_t v86;
  int v87;
  AUsubMAEC::myFilter *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int v94;
  float __C;

  __C = 0.0;
  *((_DWORD *)this + 44) = 0;
  *((_DWORD *)this + 39) = 1;
  *(_QWORD *)this = a8;
  *((_DWORD *)this + 4) = 0;
  if (*((_DWORD *)this + 43) == 1)
  {
    *(_QWORD *)((char *)this + 172) = 0x100000000;
    **((_DWORD **)this + 7) = 1;
    *((_DWORD *)this + 4) = 2;
    v16 = 0.0;
    v17 = 0;
    v18 = 0.0;
    v19 = 0.0;
    goto LABEL_65;
  }
  v90 = *((float *)a6 + 23);
  v21 = *((float *)a7 + 22);
  v22 = *((float *)a7 + 23);
  v94 = *((_DWORD *)a7 + 21);
  v89 = *((float *)a6 + 22);
  v91 = *((float *)a6 + 20);
  v23 = *((float *)this + 33);
  v92 = log10f(v23 + (float)((float)(v89 + 1.0e-13) / (float)(v91 + 0.000000001))) * 10.0;
  v93 = v21;
  v24 = log10f(v23 + (float)((float)(v21 + 1.0e-13) / (float)(v91 + 0.000000001))) * 10.0;
  v25 = log10f(v23 + (float)((float)(v89 + 1.0e-13) / (float)(v90 + 0.000000001))) * 10.0;
  v16 = v22;
  v26 = log10f(v23 + (float)((float)(v21 + 1.0e-13) / (float)(v22 + 0.000000001))) * 10.0;
  if (v26 <= v25)
  {
    v27 = v26;
    v28 = v27;
  }
  else
  {
    v28 = v25;
  }
  v29 = *((_DWORD *)this + 22);
  v30 = v29 - 1;
  if (v29 == 1)
  {
    v36 = (float *)*((_QWORD *)this + 4);
    v41 = (float *)*((_QWORD *)this + 5);
    v35 = (float *)*((_QWORD *)this + 3);
  }
  else
  {
    v31 = 0;
    v33 = *((_QWORD *)this + 8);
    v32 = *((_QWORD *)this + 9);
    v34 = v32 + 4 * v30;
    v35 = (float *)*((_QWORD *)this + 3);
    v36 = (float *)*((_QWORD *)this + 4);
    v37 = *((_QWORD *)this + 6);
    v38 = *((_QWORD *)this + 7);
    v39 = v33 + 4 * v30;
    v40 = v38 + 4 * v30;
    v41 = (float *)*((_QWORD *)this + 5);
    v42 = v29 - 2;
    v43 = v30 - 1;
    v44 = v37 + 4 * v30;
    v45 = &v41[v30];
    v46 = &v36[v30];
    v47 = &v35[v30];
    do
    {
      v47[v31] = v35[(v42 + v31)];
      v46[v31] = v36[(v42 + v31)];
      v45[v31] = v41[(v42 + v31)];
      *(_DWORD *)(v44 + 4 * v31) = *(_DWORD *)(v37 + 4 * (v42 + v31));
      *(_DWORD *)(v40 + 4 * v31) = *(_DWORD *)(v38 + 4 * (v42 + v31));
      *(_DWORD *)(v39 + 4 * v31) = *(_DWORD *)(v33 + 4 * (v42 + v31));
      *(_DWORD *)(v34 + 4 * v31) = *(_DWORD *)(v32 + 4 * (v42 + v31));
    }
    while (v43 + (_DWORD)v31--);
  }
  v17 = v94;
  *v36 = v92;
  *v41 = v28;
  v49 = v92 - v24;
  *v35 = v92 - v24;
  *((_QWORD *)this + 20) = 0;
  v19 = v90 / (float)*((int *)this + 46);
  if ((float)((float)(v92 - v24) + *((float *)this + 34)) >= 0.0 && v19 >= *((float *)this + 37))
  {
    v50 = (_DWORD *)*((_QWORD *)this + 6);
    *v50 = 0;
  }
  else
  {
    v50 = (_DWORD *)*((_QWORD *)this + 6);
    *v50 = 1;
  }
  if (v91 * 4.0 < v89 && (float)(v19 * 10.0) >= *((float *)this + 37))
  {
    *v50 = 1;
    *((_QWORD *)this + 20) = 0x100000001;
    bzero(v50, 4 * *((unsigned int *)this + 26));
    v49 = **((float **)this + 3);
  }
  v51 = v49 < *((float *)this + 35) && **((float **)this + 4) < -10.0;
  v52 = (_DWORD *)*((_QWORD *)this + 8);
  **((_DWORD **)this + 7) = v51;
  *v52 = v92 > v24;
  **((_DWORD **)this + 9) = **((float **)this + 5) < *((float *)this + 36);
  v53 = *((_DWORD *)this + 26);
  v18 = v93;
  if (v53 > *((_DWORD *)this + 22))
    goto LABEL_36;
  if (v53 < 1)
    goto LABEL_28;
  v54 = 0;
  v55 = (int *)*((_QWORD *)this + 6);
  v56 = *((unsigned int *)this + 26);
  do
  {
    v57 = *v55++;
    v54 += v57;
    --v56;
  }
  while (v56);
  if (v54)
  {
    v58 = *((_DWORD *)this + 21);
  }
  else
  {
LABEL_28:
    v58 = *((_DWORD *)this + 21);
    if (v58 > 1)
      goto LABEL_33;
  }
  if (v58 < v53)
  {
    v59 = *((_DWORD *)this + 40);
    if (v59 != 1)
      goto LABEL_37;
    if (a10)
      goto LABEL_32;
LABEL_34:
    v60 = a4;
    AUsubMAEC::dualEC::copyLmsFilter((int *)this, a2, a3);
    goto LABEL_35;
  }
LABEL_33:
  *((_QWORD *)this + 20) = 0x100000001;
  if (!a10)
    goto LABEL_34;
LABEL_32:
  v60 = a4;
  AUsubMAEC::dualEC::copyKalmanFilter(this, (uint64_t)a4, a5);
LABEL_35:
  *(_QWORD *)this = a9;
  v61 = 4 * *((_DWORD *)this + 48);
  memcpy(a8[6], a9[6], v61);
  memcpy(a8[7], a9[7], v61);
  *((_QWORD *)a6 + 14) = *((_QWORD *)a7 + 14);
  memcpy(*((void **)a6 + 1), *((const void **)a7 + 1), 4 * *((int *)this + 48));
  memcpy(*((void **)a6 + 2), *((const void **)a7 + 2), 4 * *((int *)this + 48));
  *((_DWORD *)a6 + 21) = v94;
  *((float *)a6 + 22) = v93;
  *((float *)a6 + 23) = v22;
  **((_DWORD **)this + 6) = 1;
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 39) = 1;
  *((_DWORD *)this + 4) = 1;
  a4 = v60;
LABEL_36:
  v59 = *((_DWORD *)this + 40);
LABEL_37:
  if (v59)
    goto LABEL_65;
  v62 = (int *)*((_QWORD *)this + 7);
  v63 = *((unsigned int *)this + 24);
  if ((int)v63 < 1)
  {
    v64 = 0;
  }
  else
  {
    v64 = 0;
    v65 = (int *)*((_QWORD *)this + 7);
    do
    {
      v66 = *v65++;
      v64 += v66;
      --v63;
    }
    while (v63);
  }
  v67 = *((unsigned int *)this + 25);
  v88 = a2;
  v68 = a5;
  v69 = a4;
  v70 = 0;
  if ((int)v67 >= 1)
  {
    do
    {
      v71 = *v62++;
      v70 += v71;
      --v67;
    }
    while (v67);
  }
  v72 = *((unsigned int *)this + 27);
  if ((int)v72 < 1)
  {
    v73 = 0;
  }
  else
  {
    v73 = 0;
    v74 = (int *)*((_QWORD *)this + 9);
    do
    {
      v75 = *v74++;
      v73 += v75;
      --v72;
    }
    while (v72);
  }
  if (*((int *)this + 42) > 2)
  {
    v76 = 0;
  }
  else
  {
    vDSP_maxv(*((const float **)this + 3), 1, &__C, *((unsigned int *)this + 23));
    v76 = __C < -10.0;
  }
  v77 = (float *)*((_QWORD *)this + 4);
  v78 = v77[1];
  if (*v77 >= v78 && ((v78 >= v77[2]) & ~v76) != 0)
  {
    a4 = v69;
  }
  else
  {
    if (v64 == *((_DWORD *)this + 24) && v73 == *((_DWORD *)this + 27))
    {
      if ((float)((float)v70 * 1.5) > (float)*((unsigned int *)this + 25))
        LOBYTE(v76) = 1;
      a4 = v69;
      if ((v76 & 1) == 0)
        goto LABEL_64;
LABEL_62:
      *((_DWORD *)this + 44) = 1;
      a5 = v68;
      a2 = v88;
      goto LABEL_66;
    }
    a4 = v69;
    if (v76)
      goto LABEL_62;
  }
LABEL_64:
  a5 = v68;
  a2 = v88;
LABEL_65:
  v79 = *((_DWORD *)this + 44);
  if (v79 != 1)
  {
    ++*((_DWORD *)this + 20);
    if (v79)
      goto LABEL_83;
    goto LABEL_74;
  }
LABEL_66:
  *((_DWORD *)this + 20) = 0;
  if (a10)
    AUsubMAEC::dualEC::copyKalmanFilter(this, (uint64_t)a5, a4);
  else
    AUsubMAEC::dualEC::copyLmsFilter((int *)this, a3, a2);
  *((_QWORD *)a7 + 14) = *((_QWORD *)a6 + 14);
  memcpy(*((void **)a7 + 1), *((const void **)a6 + 1), 4 * *((int *)this + 48));
  memcpy(*((void **)a7 + 2), *((const void **)a6 + 2), 4 * *((int *)this + 48));
  v80 = (void *)*((_QWORD *)this + 7);
  **((_DWORD **)this + 6) = 0;
  bzero(v80, 4 * *((unsigned int *)this + 25));
  v81 = (_DWORD *)*((_QWORD *)this + 9);
  **((_DWORD **)this + 8) = 0;
  *v81 = 0;
  v82 = *((_DWORD *)this + 42);
  if (v82 <= 4)
    *((_DWORD *)this + 42) = v82 + 1;
  *((_DWORD *)this + 4) = 2;
  if (!*((_DWORD *)this + 44))
  {
LABEL_74:
    v83 = *((_DWORD *)this + 23);
    if (v83 < 1)
    {
      v84 = 0;
    }
    else
    {
      v84 = 0;
      v85 = (int *)*((_QWORD *)this + 8);
      v86 = *((unsigned int *)this + 23);
      do
      {
        v87 = *v85++;
        v84 += v87;
        --v86;
      }
      while (v86);
    }
    if (v84 == v83)
    {
      *(_QWORD *)this = a9;
      *((float *)a6 + 22) = v18;
      *((float *)a6 + 23) = v16;
      *((_DWORD *)a6 + 21) = v17;
      *((_DWORD *)this + 4) = 3;
      if (v19 >= *((float *)this + 37))
        ++*((_DWORD *)this + 21);
    }
    else
    {
      *((_DWORD *)this + 21) = 0;
    }
  }
LABEL_83:
  *((_QWORD *)this + 1) = a6;
}

int *AUsubMAEC::dualEC::copyLmsFilter(int *result, _QWORD *a2, _QWORD *a3)
{
  int *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;

  if (result[45] >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = result[48];
    v8 = 4 * result[50] * v7;
    v9 = 4 * v7 * result[51];
    do
    {
      memcpy(*(void **)(*a2 + 8 * v6), *(const void **)(*a3 + 8 * v6), v8);
      result = (int *)memcpy(*(void **)(a2[1] + 8 * v6), *(const void **)(a3[1] + 8 * v6), v8);
      if (v5[51])
      {
        memcpy(*(void **)(a2[2] + 8 * v6), *(const void **)(a3[2] + 8 * v6), v9);
        memcpy(*(void **)(a2[3] + 8 * v6), *(const void **)(a3[3] + 8 * v6), v9);
        memcpy(*(void **)(a2[4] + 8 * v6), *(const void **)(a3[4] + 8 * v6), v9);
        result = (int *)memcpy(*(void **)(a2[5] + 8 * v6), *(const void **)(a3[5] + 8 * v6), v9);
      }
      ++v6;
    }
    while (v6 < v5[45]);
  }
  return result;
}

_DWORD *AUsubMAEC::dualEC::copyKalmanFilter(_DWORD *result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  if ((int)result[48] >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = 4 * result[47];
    v8 = 4 * *(_DWORD *)(a2 + 140);
    do
    {
      memcpy(*(void **)(*(_QWORD *)(a2 + 16) + 8 * v6), *(const void **)(a3[2] + 8 * v6), v7);
      memcpy(*(void **)(*(_QWORD *)(a2 + 24) + 8 * v6), *(const void **)(a3[3] + 8 * v6), v7);
      memcpy(*(void **)(*(_QWORD *)(a2 + 32) + 8 * v6), *(const void **)(a3[4] + 8 * v6), v8);
      result = memcpy(*(void **)(*(_QWORD *)(a2 + 40) + 8 * v6), *(const void **)(a3[5] + 8 * v6), v8);
      ++v6;
    }
    while (v6 < (int)v5[48]);
  }
  return result;
}

void AU::FTSpatialAC::GetMessenger(AU::FTSpatialAC *this)
{
  unsigned __int8 v1;
  caulk::concurrent::messenger *v2;
  uint64_t v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v3 = caulk::concurrent::messenger::shared_logging_priority(v2);
      MEMORY[0x1BCC94FFC](&AU::FTSpatialAC::GetMessenger(void)::sMessenger, 0, v3);
    }
  }
}

void sub_1B6305980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TTYSignalTracker::Gain(uint64_t this, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;

  v2 = fabsf(a2);
  v3 = *(float *)this;
  switch(*(_DWORD *)(this + 48))
  {
    case 0:
      v4 = *(float *)(this + 8);
      if (v2 > v3)
      {
        *(_QWORD *)(this + 44) = 0x100000000;
        *(float *)(this + 20) = v4;
      }
      break;
    case 1:
      v4 = *(float *)(this + 20) + (float)(*(float *)(this + 24) * (float)*(unsigned int *)(this + 44));
      v5 = *(float *)(this + 12);
      if (v4 >= v5)
      {
        *(_QWORD *)(this + 44) = 0x200000000;
        goto LABEL_15;
      }
      break;
    case 2:
      v4 = *(float *)(this + 12);
      if (v2 < *(float *)(this + 4))
      {
        v6 = 0x300000000;
        goto LABEL_12;
      }
      break;
    case 3:
      v4 = *(float *)(this + 16);
      if (*(_DWORD *)(this + 44) > *(_DWORD *)(this + 36))
      {
        *(_QWORD *)(this + 44) = 0x400000000;
        *(float *)(this + 20) = v4;
      }
      if (v2 > v3)
      {
        v6 = 0x200000000;
LABEL_12:
        *(_QWORD *)(this + 44) = v6;
      }
      break;
    case 4:
      v4 = *(float *)(this + 20) + (float)(*(float *)(this + 28) * (float)*(unsigned int *)(this + 44));
      v5 = *(float *)(this + 8);
      if (v4 <= v5)
      {
        *(_DWORD *)(this + 44) = 0;
        *(_DWORD *)(this + 48) = 0;
LABEL_15:
        v4 = v5;
      }
      break;
    default:
      v4 = 0.0;
      break;
  }
  ++*(_DWORD *)(this + 44);
  *(float *)(this + 16) = v4;
  return this;
}

void MicIssueDetectorCore::~MicIssueDetectorCore(MicIssueDetectorCore *this)
{
  MicIssueDetectorCore::~MicIssueDetectorCore(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E69D1C68;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t MicIssueDetectorCore::initialize(uint64_t result, int a2, unsigned int a3, float a4)
{
  *(_DWORD *)(result + 76) = a2;
  *(_DWORD *)(result + 80) = (float)((float)((a2 - 1) * a2) * 0.5);
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = 2 * a3;
  *(_DWORD *)(result + 72) = a3 + 1;
  *(float *)(result + 56) = a4;
  *(float *)(result + 60) = a4 / (float)a3;
  return result;
}

uint64_t MicIssueDetectorCore::setGlobalParameter(uint64_t this, unsigned int a2, float a3)
{
  *(float *)(*(_QWORD *)(this + 8) + 4 * a2) = a3;
  return this;
}

uint64_t MicIssueDetectorCore::setPartParameter(uint64_t this, unsigned int a2, unsigned int a3, float a4)
{
  *(float *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 24 * a3) + 4 * a2) = a4;
  return this;
}

float MicIssueDetectorCore::getGlobalParameter(MicIssueDetectorCore *this, unsigned int a2)
{
  return *(float *)(*((_QWORD *)this + 1) + 4 * a2);
}

float MicIssueDetectorCore::getPartParameter(MicIssueDetectorCore *this, unsigned int a2, unsigned int a3)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24 * a3) + 4 * a2);
}

void *MicIssueDetectorCore::process(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, void **a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  void *result;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;

  v12 = *a2;
  v13 = a2[1];
  if (v13 == *a2)
  {
    v12 = a2[1];
  }
  else
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_BYTE **)(v12 + v16);
      v19 = *(_BYTE **)(v12 + v16 + 8);
      if (v19 != v18)
      {
        memmove(*(void **)(*a3 + v16), v18, v19 - v18);
        v12 = *a2;
        v13 = a2[1];
      }
      ++v17;
      v16 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3) > v17);
  }
  result = *(void **)a4;
  if (*(_DWORD *)(a1 + 68) == (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
  {
    v21 = *(_BYTE **)(v12 + 24);
    v22 = *(_BYTE **)(v12 + 32);
    if (v22 != v21)
      result = memmove(result, v21, v22 - v21);
  }
  v24 = *a5;
  v23 = a5[1];
  if (v23 != *a5)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = *(_BYTE **)(v24 + v25);
      v28 = *(_BYTE **)(v24 + v25 + 8);
      if (v28 != v27)
      {
        result = memmove(*(void **)(*a6 + v25), v27, v28 - v27);
        v24 = *a5;
        v23 = a5[1];
      }
      ++v26;
      v25 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3) > v26);
    v29 = *(_QWORD *)(v24 + 8);
    if (v29 != *(_QWORD *)v24)
      return memmove(*a7, *(const void **)v24, v29 - *(_QWORD *)v24);
  }
  return result;
}

uint64_t MicIssueDetectorCore::getSuppressionGains(MicIssueDetectorCore *this)
{
  return (uint64_t)this + 88;
}

void AUSpatialMixerV2InputElement::~AUSpatialMixerV2InputElement(AUSpatialMixerV2InputElement *this)
{
  AUSpatialMixerV2InputElement::~AUSpatialMixerV2InputElement(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _BYTE v22[12];
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D1CD0;
  *((_QWORD *)this + 26) = &unk_1E69D1D78;
  AUSpatialMixerV2InputElement::Cleanup(this);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v2 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v21 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v21 = (_QWORD *)*v21;
    *(_DWORD *)v22 = 136315394;
    *(_QWORD *)&v22[4] = v21;
    v23 = 2080;
    v24 = "~AUSpatialMixerV2InputElement";
    _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Destructed", v22, 0x16u);
  }
  if (*((char *)this + 1975) < 0)
    operator delete(*((void **)this + 244));
  v3 = (void *)*((_QWORD *)this + 237);
  if (v3)
  {
    *((_QWORD *)this + 238) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v4)
    MEMORY[0x1BCC95CEC](v4, 0x1000C40E0EAB150);
  v5 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v5)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v5);
  v6 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v6)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v6);
  *(_QWORD *)v22 = (char *)this + 1648;
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *(_QWORD *)v22 = (char *)this + 1616;
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v7 = (void *)*((_QWORD *)this + 196);
  if (v7)
  {
    *((_QWORD *)this + 197) = v7;
    operator delete(v7);
  }
  std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 195, 0);
  v8 = (void *)*((_QWORD *)this + 192);
  if (v8)
  {
    *((_QWORD *)this + 193) = v8;
    operator delete(v8);
  }
  v9 = (const void *)*((_QWORD *)this + 183);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 182);
  if (v10)
    CFRelease(v10);
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)this + 163, 0);
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100]((AUSM::MatrixMix **)this + 162, 0);
  *((_QWORD *)this + 132) = &off_1E69D1D98;
  std::mutex::~mutex((std::mutex *)((char *)this + 1192));
  v11 = (const void *)*((_QWORD *)this + 148);
  if (v11)
    CFRelease(v11);
  *((_QWORD *)this + 132) = &off_1E69E0768;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((_QWORD **)this + 138));
  if (*((char *)this + 1087) < 0)
    operator delete(*((void **)this + 133));
  IR::IRDataAttributes::~IRDataAttributes((AUSpatialMixerV2InputElement *)((char *)this + 888));
  IR::IRDataAttributes::~IRDataAttributes((AUSpatialMixerV2InputElement *)((char *)this + 736));
  v12 = (void *)*((_QWORD *)this + 49);
  if (v12)
  {
    *((_QWORD *)this + 50) = v12;
    operator delete(v12);
  }
  v13 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v13)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v13);
  v14 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v14)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v14);
  v15 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v15)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v15);
  v16 = (void *)*((_QWORD *)this + 41);
  if (v16)
  {
    *((_QWORD *)this + 42) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 38);
  if (v17)
  {
    *((_QWORD *)this + 39) = v17;
    operator delete(v17);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  *(_QWORD *)v22 = (char *)this + 248;
  std::vector<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v18 = (void *)*((_QWORD *)this + 28);
  if (v18)
  {
    *((_QWORD *)this + 29) = v18;
    operator delete(v18);
  }
  *(_QWORD *)this = off_1E69ED7C0;
  v19 = (_QWORD *)*((_QWORD *)this + 19);
  if (v19)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v19);
    *((_QWORD *)this + 19) = 0;
  }
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 36) = 0;
  v20 = (void *)*((_QWORD *)this + 15);
  if (v20)
  {
    *((_QWORD *)this + 16) = v20;
    operator delete(v20);
  }
  ausdk::AUElement::~AUElement((const void **)this);
}

uint64_t AUSpatialMixerV2InputElement::GetNumberOfParameters(AUSpatialMixerV2InputElement *this)
{
  return 11;
}

double AUSpatialMixerV2InputElement::GetParameterList(AUSpatialMixerV2InputElement *this, unsigned int *a2)
{
  double result;

  *(_OWORD *)a2 = xmmword_1B6626920;
  *((_OWORD *)a2 + 1) = xmmword_1B66A0770;
  *(_QWORD *)&result = 0xA00000008;
  *((_QWORD *)a2 + 4) = 0xA00000008;
  a2[10] = 11;
  return result;
}

uint64_t AUSpatialMixerV2InputElement::SetStreamFormat(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2)
{
  NSObject *v4;
  _QWORD *v5;
  int16x8_t v6;
  void **v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  _QWORD *v17;
  NSObject *v18;
  _QWORD *v19;
  _BYTE *v20;
  int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  NSObject *v25;
  _QWORD *v26;
  int v27;
  const char *v28;
  _QWORD *v30;
  Float64 v31;
  _QWORD *v32;
  int v33;
  unsigned int *v34;
  void *__p[2];
  char v36;
  _BYTE v37[40];
  _BYTE buf[12];
  __int16 v39;
  const char *v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v4 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(int16x8_t *)&a2->mChannelDescriptions[0].mChannelFlags;
    *(_OWORD *)v37 = *(_OWORD *)&a2->mChannelLayoutTag;
    *(int16x8_t *)&v37[16] = v6;
    *(_QWORD *)&v37[32] = *(_QWORD *)&a2[1].mChannelLayoutTag;
    CA::StreamDescription::AsString((CA::StreamDescription *)v37, (uint64_t)__p, v6);
    if (v36 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v5;
    v39 = 2080;
    v40 = "SetStreamFormat";
    v41 = 2080;
    v42 = v7;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting stream format: %s", buf, 0x20u);
    if (v36 < 0)
      operator delete(__p[0]);
  }
  if (*(double *)&a2->mChannelLayoutTag > 0.0)
  {
    __p[0] = (char *)this + 704;
    __p[1] = (char *)this + 720;
    std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 704, (uint64_t)this + 720);
    v8 = *((_DWORD *)this + 27);
    v9 = atomic_load((unsigned int *)this + 282);
    v10 = AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v9);
    ausdk::AUIOElement::SetStreamFormat(this, a2);
    (*(void (**)(AUSpatialMixerV2InputElement *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
    if (*((_QWORD *)this + 86))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 704);
      AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
      AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(this);
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 704);
    }
    v11 = *((_DWORD *)this + 27);
    if (v11 == v8)
    {
      v12 = 0;
LABEL_54:
      (*(void (**)(AUSpatialMixerV2InputElement *))(*(_QWORD *)this + 120))(this);
      std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)__p);
      return v12;
    }
    v14 = v11 - 1;
    if ((v11 - 1) < 0x10 && ((0x89FFu >> v14) & 1) != 0)
      v15 = dword_1B66397E0[v14];
    else
      v15 = v11 | 0x930000;
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v34, v15);
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v17 = (_QWORD *)*v17;
      *(_DWORD *)v37 = 136315394;
      *(_QWORD *)&v37[4] = v17;
      *(_WORD *)&v37[12] = 2080;
      *(_QWORD *)&v37[14] = "SetStreamFormat";
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Number of channels in stream format changed", v37, 0x16u);
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    }
    v18 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v19 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v19 = (_QWORD *)*v19;
      GetStringFromAudioChannelLayoutTag(buf, v34[4]);
      if (v41 >= 0)
        v20 = buf;
      else
        v20 = *(_BYTE **)buf;
      v21 = *((_DWORD *)this + 27);
      *(_DWORD *)v37 = 136315906;
      *(_QWORD *)&v37[4] = v19;
      *(_WORD *)&v37[12] = 2080;
      *(_QWORD *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 2080;
      *(_QWORD *)&v37[24] = v20;
      *(_WORD *)&v37[32] = 1024;
      *(_DWORD *)&v37[34] = v21;
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting default audio channel layout tag = %s for %u channels", v37, 0x26u);
      if (SHIBYTE(v41) < 0)
        operator delete(*(void **)buf);
    }
    v22 = atomic_load((unsigned __int8 *)this + 680);
    if (((v22 & 1) != 0 || (v23 = atomic_load((unsigned __int8 *)this + 681), (v23 & 1) != 0))
      && (v24 = atomic_load((unsigned int *)this + 282),
          AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v24) || v10))
    {
      ausdk::AUIOElement::SetAudioChannelLayout(this, (AudioChannelLayout *)(v34 + 4));
      atomic_store(v34[4], (unsigned int *)this + 261);
      *((_BYTE *)this + 1040) = 1;
      v12 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
      if (!(_DWORD)v12)
        goto LABEL_53;
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v25 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_53;
      v26 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v26 = (_QWORD *)*v26;
      v27 = *((_DWORD *)this + 27);
      *(_DWORD *)v37 = 136315906;
      *(_QWORD *)&v37[4] = v26;
      *(_WORD *)&v37[12] = 2080;
      *(_QWORD *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 1024;
      *(_DWORD *)&v37[24] = v27;
      *(_WORD *)&v37[28] = 1024;
      *(_DWORD *)&v37[30] = v12;
      v28 = "[%s|%s] Could not initialize channel processors after number of channels in a stream changed to %u: error = %d";
    }
    else
    {
      v12 = (*(uint64_t (**)(AUSpatialMixerV2InputElement *, unsigned int *))(*(_QWORD *)this + 88))(this, v34 + 4);
      if (!(_DWORD)v12)
        goto LABEL_53;
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v25 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_53;
      v32 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v32 = (_QWORD *)*v32;
      v33 = *((_DWORD *)this + 27);
      *(_DWORD *)v37 = 136315906;
      *(_QWORD *)&v37[4] = v32;
      *(_WORD *)&v37[12] = 2080;
      *(_QWORD *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 1024;
      *(_DWORD *)&v37[24] = v33;
      *(_WORD *)&v37[28] = 1024;
      *(_DWORD *)&v37[30] = v12;
      v28 = "[%s|%s] Could not set default channel layout after number of channels in a stream changed to %u: error = %d";
    }
    _os_log_error_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, v28, v37, 0x22u);
LABEL_53:
    *((_BYTE *)this + 1041) = 0;
    CAAudioChannelLayout::~CAAudioChannelLayout(&v34);
    goto LABEL_54;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v13 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v30 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v30 = (_QWORD *)*v30;
    v31 = *(double *)&a2->mChannelLayoutTag;
    *(_DWORD *)v37 = 136315650;
    *(_QWORD *)&v37[4] = v30;
    *(_WORD *)&v37[12] = 2080;
    *(_QWORD *)&v37[14] = "SetStreamFormat";
    *(_WORD *)&v37[22] = 2048;
    *(Float64 *)&v37[24] = v31;
    _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set the stream format: invalid samplerate %f", v37, 0x20u);
  }
  return 4294967246;
}

void sub_1B63063AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)&a9);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL ausdk::AUInputElement::NeedsBufferSpace(ausdk::AUInputElement *this)
{
  return *((_DWORD *)this + 43) == 2;
}

uint64_t AUSpatialMixerV2InputElement::SetAudioChannelLayout(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2)
{
  return AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(this, a2, 0);
}

uint64_t AUSpatialMixerV2InputElement::Initialize(AUSpatialMixerV2InputElement *this)
{
  const AudioChannelLayout *v2;
  NSObject *v3;
  const AudioChannelLayout *v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  void **v10;
  int v11;
  _QWORD *v13;
  int v14;
  int v15;
  void *__p[2];
  char v17;
  unsigned int *v18;
  uint64_t v19[2];
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _BYTE v25[10];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  (*(void (**)(AUSpatialMixerV2InputElement *))(*(_QWORD *)this + 128))(this);
  v19[0] = (uint64_t)this + 720;
  v19[1] = (uint64_t)this + 704;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
  atomic_store(1u, (unsigned __int8 *)this + 681);
  atomic_store(1u, (unsigned __int8 *)this + 352);
  AUSpatialMixerV2InputElement::UpdateOutputType(this);
  AUSpatialMixerV2InputElement::UpdateParametricProcessor(this);
  if (!*((_BYTE *)this + 1040))
    goto LABEL_7;
  if (ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v2) != *((_DWORD *)this + 27))
  {
    *((_BYTE *)this + 1040) = 0;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v3 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v13 = (_QWORD *)*v13;
      v14 = ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v4);
      v15 = *((_DWORD *)this + 27);
      *(_DWORD *)buf = 136315906;
      v21 = v13;
      v22 = 2080;
      v23 = "Initialize";
      v24 = 1024;
      *(_DWORD *)v25 = v14;
      *(_WORD *)&v25[4] = 1024;
      *(_DWORD *)&v25[6] = v15;
      _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels = %u in AudioChannelLayout does not match number of channels = %u in stream format.", buf, 0x22u);
    }
  }
  if (!*((_BYTE *)this + 1040))
  {
LABEL_7:
    v5 = *((_DWORD *)this + 27);
    v6 = v5 - 1;
    if ((v5 - 1) < 0x10 && ((0x89FFu >> v6) & 1) != 0)
      v7 = dword_1B66397E0[v6];
    else
      v7 = v5 | 0x930000;
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v18, v7);
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v8 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v9 = (_QWORD *)*v9;
      GetStringFromAudioChannelLayoutTag(__p, v18[4]);
      if (v17 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      v11 = *((_DWORD *)this + 27);
      *(_DWORD *)buf = 136315906;
      v21 = v9;
      v22 = 2080;
      v23 = "Initialize";
      v24 = 2080;
      *(_QWORD *)v25 = v10;
      *(_WORD *)&v25[8] = 1024;
      v26 = v11;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting default audio channel layout tag = %s for %u channels", buf, 0x26u);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    (*(void (**)(AUSpatialMixerV2InputElement *, unsigned int *))(*(_QWORD *)this + 88))(this, v18 + 4);
    *((_BYTE *)this + 1041) = 0;
    CAAudioChannelLayout::~CAAudioChannelLayout(&v18);
  }
  AUSM::InputGeometry::update((AUSpatialMixerV2InputElement *)((char *)this + 1680), (simd_quatf *)1);
  AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
  AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(this);
  atomic_store(1u, (unsigned __int8 *)this + 696);
  atomic_store(1u, (unsigned __int8 *)this + 680);
  atomic_store(0, (unsigned __int8 *)this + 681);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v19);
  return 0;
}

void sub_1B6306724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, unsigned int *);
  CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)va);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::Reset(AUSpatialMixerV2InputElement *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  AUSpatialMixerV2ChannelProcessor **v5;
  AUSpatialMixerV2ChannelProcessor **v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v2 = (char *)this + 704;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 704);
  v3 = *((_QWORD *)this + 28);
  v4 = *((_QWORD *)this + 29);
  while (v3 != v4)
  {
    *(_QWORD *)(v3 + 4) = 0;
    *(_QWORD *)(v3 + 20) = 0;
    v3 += 28;
  }
  v5 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
  v6 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
  while (v5 != v6)
    AUSpatialMixerV2ChannelProcessor::reset(*v5++);
  v7 = *((_QWORD *)this + 206);
  if (*((_QWORD *)this + 207) != v7)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      IR::FixedIntegerDelay::reset(*(IR::FixedIntegerDelay **)(v7 + 8 * v8));
      v8 = v9;
      v7 = *((_QWORD *)this + 206);
      ++v9;
    }
    while (v8 < (*((_QWORD *)this + 207) - v7) >> 3);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
  return 0;
}

void sub_1B6306804(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::Cleanup(AUSpatialMixerV2InputElement *this)
{
  AUSpatialMixerV2ChannelProcessor **i;
  AUSpatialMixerV2ChannelProcessor **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10[2];

  v10[0] = (uint64_t)this + 720;
  v10[1] = (uint64_t)this + 704;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
  AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
  atomic_store(0, (unsigned __int8 *)this + 680);
  *((_QWORD *)this + 29) = *((_QWORD *)this + 28);
  v3 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
  for (i = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
        i != v3;
        std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](i))
  {
    --i;
  }
  *((_QWORD *)this + 32) = v3;
  v4 = *((_QWORD *)this + 162);
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v4 + 72);
  *(_BYTE *)(v4 + 64) = 0;
  AUSpatialMixerV2InputElement::DestroyParametricProcessors((ParametricProcessor **)this);
  v5 = (_QWORD *)*((_QWORD *)this + 206);
  v6 = (_QWORD *)*((_QWORD *)this + 207);
  while (v6 != v5)
  {
    v8 = (_QWORD *)*--v6;
    v7 = v8;
    *v6 = 0;
    if (v8)
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v7);
  }
  *((_QWORD *)this + 207) = v5;
  atomic_store(0, (unsigned int *)this + 410);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v10);
  return 0;
}

void sub_1B63068F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::PropertyChanged(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  NSObject *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  unsigned int v36;
  AudioChannelLayout *v37;
  uint64_t v38;
  unsigned __int8 v39;
  double v40;
  ausdk::AUChannelLayout *v41;
  const AudioChannelLayout *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  AUSpatialMixerV2 *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  NSObject *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  IR::FixedIntegerDelay *v66;
  _QWORD *v67;
  NSObject *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  unsigned int v74;
  AudioChannelLayout v75;
  char *v76;
  void *__p[3];
  int v78;
  uint64_t v79;

  v3 = 0;
  v79 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 3199)
  {
    if ((int)a2 > 3009)
    {
      switch((int)a2)
      {
        case 3100:
          AUSpatialMixerV2InputElement::UpdateOutputType(this);
          return 0;
        case 3101:
        case 3102:
        case 3104:
        case 3105:
        case 3107:
          return v3;
        case 3103:
          AUSpatialMixerV2InputElement::UpdatePointSourceInHeadMode(this);
          return 0;
        case 3106:
          goto LABEL_22;
        case 3108:
        case 3109:
          goto LABEL_46;
        default:
          if ((_DWORD)a2 == 3010 || (_DWORD)a2 == 3013)
          {
            v3 = 0;
            v22 = (unsigned __int8 *)this + 1922;
LABEL_81:
            atomic_store(1u, v22);
          }
          break;
      }
      return v3;
    }
    if ((int)a2 > 3002)
    {
      if ((_DWORD)a2 == 3003)
      {
        v4 = (unsigned __int8 *)this + 1922;
LABEL_45:
        atomic_store(1u, v4);
LABEL_46:
        AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, a2);
        return 0;
      }
      if ((_DWORD)a2 != 3005)
        return v3;
LABEL_22:
      v8 = atomic_load((unsigned __int8 *)this + 680);
      if ((v8 & 1) != 0 || (v9 = atomic_load((unsigned __int8 *)this + 681), (v9 & 1) != 0))
LABEL_32:
        AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
    }
    else if ((_DWORD)a2 == 1005)
    {
LABEL_25:
      v10 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 85));
      if ((v10 & 1) == 0)
      {
        v11 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 86));
        if ((v11 & 1) == 0)
          AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
      }
    }
    else
    {
      if ((_DWORD)a2 != 3000)
        return v3;
      AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(this);
    }
    return 0;
  }
  if ((int)a2 <= 4599)
  {
    switch((int)a2)
    {
      case 3200:
      case 3201:
        AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, a2);
        AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
        v16 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
        if (v16 != 1)
          return 0;
        goto LABEL_36;
      case 3202:
      case 3203:
        AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, a2);
        atomic_store(1u, (unsigned __int8 *)this + 1921);
        v17 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
        if (v17 != 2)
          return 0;
LABEL_36:
        v18 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
        if (v18 == 3)
        {
          v19 = atomic_load((unsigned int *)this + 282);
          if (v19 == 7)
          {
            v20 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
            if (v20 == 2)
            {
              v21 = atomic_load((unsigned int *)this + 261);
              AUSpatialMixerV2InputElement::InitializeParametricProcessor(this, v21);
            }
          }
        }
        return 0;
      case 3204:
      case 3205:
      case 3269:
        v4 = (unsigned __int8 *)this + 1921;
        goto LABEL_45;
      case 3210:
      case 3211:
      case 3212:
      case 3213:
      case 3214:
      case 3217:
      case 3218:
      case 3219:
      case 3228:
      case 3229:
      case 3274:
      case 3275:
      case 3279:
        goto LABEL_46;
      case 3220:
        v3 = 0;
        v36 = atomic_load((unsigned int *)this + 318);
        if (*((_BYTE *)this + 1041) || v36 > 0xFFFEFFFF)
          return v3;
        std::vector<AudioChannelLayout>::vector(__p, 1uLL);
        v37 = (AudioChannelLayout *)__p[0];
        *((_DWORD *)__p[0] + 1) = 0;
        v37->mNumberChannelDescriptions = 0;
        v37->mChannelLayoutTag = v36;
        AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(this, v37, 1);
LABEL_77:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return 0;
      case 3221:
      case 3222:
        AUSpatialMixerV2InputElement::UpdateParametricProcessor(this);
        return 0;
      case 3224:
        atomic_store(1u, (unsigned __int8 *)this + 1921);
        a2 = 3224;
        goto LABEL_46;
      case 3227:
        v29 = atomic_load((unsigned int *)this + 315);
        memset(__p, 0, sizeof(__p));
        AUSM::ExclusionZone::getPreset(v29, __p);
        AUSpatialMixerV2InputElement::SetExclusionZones((uint64_t)this, (uint64_t)__p);
        atomic_store(1u, (unsigned __int8 *)this + 1921);
        goto LABEL_77;
      case 3230:
        v30 = atomic_load((unsigned __int8 *)this + 680);
        if ((v30 & 1) == 0)
        {
          v31 = atomic_load((unsigned __int8 *)this + 681);
          if ((v31 & 1) == 0)
            return 0;
        }
        v32 = atomic_load((unsigned int *)this + 261);
        if (!ChannelLayoutTagIsSupportedHOA(v32))
          return 0;
        if (*((_DWORD *)this + 27) != 4)
          return 0;
        v33 = atomic_load((unsigned int *)this + 284);
        if (v33 != 3)
          return 0;
        v34 = atomic_load((unsigned int *)this + 282);
        if (v34 != 7)
          return 0;
        *(_QWORD *)&v75.mChannelLayoutTag = (char *)this + 720;
        *(_QWORD *)&v75.mNumberChannelDescriptions = (char *)this + 704;
        std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
        v3 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
        if ((_DWORD)v3)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v35 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v72 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v72 = (_QWORD *)*v72;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = v72;
            WORD2(__p[1]) = 2080;
            *(void **)((char *)&__p[1] + 6) = "PropertyChanged";
            HIWORD(__p[2]) = 1024;
            v78 = v3;
            _os_log_error_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "[%s|%s] Reinitialization of channel processors failed: err = %d", (uint8_t *)__p, 0x1Cu);
          }
        }
        std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&v75);
        return v3;
      case 3236:
        v24 = atomic_load((unsigned __int8 *)this + 681);
        if ((v24 & 1) == 0)
        {
          v25 = atomic_load((unsigned __int8 *)this + 680);
          if ((v25 & 1) == 0)
            return 0;
        }
        v26 = atomic_load((unsigned __int8 *)this + 1264);
        if ((v26 & 1) == 0)
        {
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 1600);
          if (*((_QWORD *)this + 195))
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v27 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v69 = (_QWORD *)((char *)this + 1952);
              if (*((char *)this + 1975) < 0)
                v69 = (_QWORD *)*v69;
              LODWORD(__p[0]) = 136315394;
              *(void **)((char *)__p + 4) = v69;
              WORD2(__p[1]) = 2080;
              *(void **)((char *)&__p[1] + 6) = "PropertyChanged";
              _os_log_debug_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Deleting upmixer", (uint8_t *)__p, 0x16u);
            }
            std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 195, 0);
            std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100]((_QWORD *)this + 202, *((_QWORD **)this + 202));
          }
          caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 1600);
          return 0;
        }
        *(_QWORD *)&v75.mChannelDescriptions[0].mCoordinates[1] = (char *)this + 720;
        v76 = (char *)this + 1600;
        std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 1600);
        v40 = *((double *)this + 10);
        v41 = (ausdk::AUChannelLayout *)*((_QWORD *)this + 15);
        v43 = ausdk::AUChannelLayout::NumberChannels(v41, v42);
        GetChannelLayoutChannelLabels(&v75, (int *)v41);
        v44 = *(_QWORD *)&v75.mChannelLayoutTag;
        if (*(_QWORD *)&v75.mNumberChannelDescriptions != *(_QWORD *)&v75.mChannelLayoutTag)
        {
          v45 = 0;
          v46 = 0;
          v47 = (uint64_t)(*(_QWORD *)&v75.mNumberChannelDescriptions - *(_QWORD *)&v75.mChannelLayoutTag) >> 2;
          while (1)
          {
            v48 = *(_DWORD *)(v44 + 4 * v45);
            if (v48 == 3)
              break;
            if (v48 == 2)
            {
              v49 = (_DWORD *)(*((_QWORD *)this + 196) + 4);
              goto LABEL_92;
            }
            if (v48 == 1)
            {
              v49 = (_DWORD *)*((_QWORD *)this + 196);
LABEL_92:
              *v49 = v45;
              ++v46;
            }
            if (v47 <= ++v45)
              goto LABEL_96;
          }
          v49 = (_DWORD *)(*((_QWORD *)this + 196) + 8);
          goto LABEL_92;
        }
        v46 = 0;
LABEL_96:
        atomic_store(v46 == 3, (unsigned __int8 *)this + 1592);
        v50 = atomic_load((unsigned __int8 *)this + 1592);
        if ((v50 & 1) != 0)
        {
          if (!*((_QWORD *)this + 195) || (v51 = atomic_load((unsigned __int8 *)this + 681), (v51 & 1) != 0))
          {
            v52 = (AUSpatialMixerV2 *)*((_QWORD *)this + 27);
            v53 = *((_DWORD *)v52 + 84);
            v54 = AUSpatialMixerV2::MaxFramesForInputSampleRate(v52, v40);
            if (v54 >= v53)
              v55 = v53;
            else
              v55 = v54;
            v73 = v55;
            HIDWORD(v56) = -286331153 * v55;
            LODWORD(v56) = -286331153 * v55;
            if ((v56 >> 5) >= 0x888889)
              v57 = 2048;
            else
              v57 = 1920;
            v74 = v57;
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v58 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v70 = (_QWORD *)((char *)this + 1952);
              if (*((char *)this + 1975) < 0)
                v70 = (_QWORD *)*v70;
              LODWORD(__p[0]) = 136315650;
              *(void **)((char *)__p + 4) = v70;
              WORD2(__p[1]) = 2080;
              *(void **)((char *)&__p[1] + 6) = "PropertyChanged";
              HIWORD(__p[2]) = 1024;
              v78 = v57;
              _os_log_debug_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "[%s|%s] Creating upmixer with FFT size %u", (uint8_t *)__p, 0x1Cu);
            }
            std::make_unique[abi:ne180100]<ScottyLite,unsigned int &,unsigned int &,std::string &>((uint64_t *)__p, &v74, &v73, (uint64_t)this + 1952);
            v59 = __p[0];
            __p[0] = 0;
            std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 195, (uint64_t)v59);
            std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)__p, 0);
            std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100]((_QWORD *)this + 202, *((_QWORD **)this + 202));
          }
          if (*(_BYTE *)(*((_QWORD *)this + 195) + 756))
          {
            v60 = (_QWORD *)((char *)this + 1616);
            std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)this + 1616, (v43 - 2));
            v61 = *((_QWORD *)this + 203);
            v62 = *((_QWORD *)this + 202);
            if (v61 != v62)
            {
              v63 = 0;
              v64 = *(_DWORD *)(*((_QWORD *)this + 195) + 748);
              v65 = 1;
              do
              {
                if (!*(_QWORD *)(v62 + 8 * v63))
                {
                  v66 = (IR::FixedIntegerDelay *)operator new();
                  IR::FixedIntegerDelay::FixedIntegerDelay(v66, v64, 1);
                  v67 = *(_QWORD **)(*v60 + 8 * v63);
                  *(_QWORD *)(*v60 + 8 * v63) = v66;
                  if (v67)
                    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v67);
                  v61 = *((_QWORD *)this + 203);
                  v62 = *((_QWORD *)this + 202);
                }
                v63 = v65++;
              }
              while (v63 < (v61 - v62) >> 3);
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v68 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              v71 = (_QWORD *)((char *)this + 1952);
              if (*((char *)this + 1975) < 0)
                v71 = (_QWORD *)*v71;
              LODWORD(__p[0]) = 136315394;
              *(void **)((char *)__p + 4) = v71;
              WORD2(__p[1]) = 2080;
              *(void **)((char *)&__p[1] + 6) = "PropertyChanged";
              _os_log_error_impl(&dword_1B5ED0000, v68, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR, Upmixer did not initialize properly", (uint8_t *)__p, 0x16u);
            }
            std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 195, 0);
            std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100]((_QWORD *)this + 202, *((_QWORD **)this + 202));
          }
        }
        if (*(_QWORD *)&v75.mChannelLayoutTag)
        {
          *(_QWORD *)&v75.mNumberChannelDescriptions = *(_QWORD *)&v75.mChannelLayoutTag;
          operator delete(*(void **)&v75.mChannelLayoutTag);
        }
        std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&v75.mChannelDescriptions[0].mCoordinates[1]);
        break;
      case 3242:
        v3 = 0;
        atomic_store(1u, (unsigned __int8 *)this + 1921);
        v28 = (unsigned __int8 *)this + 1922;
        goto LABEL_80;
      case 3255:
        v3 = 0;
        v22 = (unsigned __int8 *)this + 1921;
        goto LABEL_81;
      case 3256:
      case 3257:
        v12 = atomic_load((unsigned __int8 *)this + 680);
        if ((v12 & 1) != 0 || (v13 = atomic_load((unsigned __int8 *)this + 681), (v13 & 1) != 0))
        {
          v14 = atomic_load((unsigned int *)this + 261);
          if (ChannelLayoutTagIsSupportedHOA(v14))
          {
            v15 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
            if (v15 == 1)
              goto LABEL_32;
          }
        }
        return 0;
      case 3267:
        goto LABEL_25;
      case 3276:
      case 3281:
      case 3282:
        v5 = atomic_load((unsigned __int8 *)this + 680);
        if ((v5 & 1) == 0)
        {
          v6 = atomic_load((unsigned __int8 *)this + 681);
          if ((v6 & 1) == 0)
            return 0;
        }
        v7 = atomic_load((unsigned int *)this + 261);
        if (!ChannelLayoutTagIsSupportedHOA(v7))
          return 0;
        goto LABEL_32;
      case 3278:
        v3 = 0;
        v28 = (unsigned __int8 *)this + 1921;
LABEL_80:
        atomic_store(1u, v28);
        v22 = (unsigned __int8 *)this + 696;
        goto LABEL_81;
      case 3286:
        v38 = *((_QWORD *)this + 162);
        v39 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 2564));
        AUSM::MatrixMix::setHOAPowerSavingMode(v38, v39 & 1);
        return 0;
      case 3289:
        *(_BYTE *)(*((_QWORD *)this + 34) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
        v3 = 0;
        *(_BYTE *)(*((_QWORD *)this + 36) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
        return v3;
      default:
        return v3;
    }
    return 0;
  }
  if ((_DWORD)a2 == 4600 || (_DWORD)a2 == 5003 || (_DWORD)a2 == 5684)
    goto LABEL_46;
  return v3;
}

void sub_1B63072A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16)
{
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::PropertyObserverIsInitialized(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 680);
  return v1 & 1;
}

uint64_t `non-virtual thunk to'AUSpatialMixerV2InputElement::PropertyChanged(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  return AUSpatialMixerV2InputElement::PropertyChanged((AUSpatialMixerV2InputElement *)((char *)this - 208), a2);
}

uint64_t `non-virtual thunk to'AUSpatialMixerV2InputElement::PropertyObserverIsInitialized(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 472);
  return v1 & 1;
}

BOOL AUSpatialMixerV2InputElement::IsUsingOBHD(AUSpatialMixerV2InputElement *this)
{
  unsigned int v1;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  _BOOL8 result;
  int v8;

  v1 = atomic_load((unsigned int *)this + 282);
  if (v1 != 7)
    return 0;
  v3 = atomic_load((unsigned int *)this + 284);
  if (v3 != 3)
    return 0;
  v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
  if (v4 != 1)
  {
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
    if (v5 != 2)
      return 0;
  }
  v6 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 1506));
  if ((v6 & 1) == 0)
    return 0;
  v8 = atomic_load((unsigned int *)this + 261);
  result = ChannelLayoutTagIsSupportedHOA(v8);
  if ((_DWORD)result)
    return *((_DWORD *)this + 27) > 4u;
  return result;
}

uint64_t AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(AUSpatialMixerV2InputElement *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  IR::FixedIntegerDelay *v5;

  v2 = (char *)this + 704;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 704);
  v4 = *((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 32);
  while (v4 != v3)
  {
    v5 = *(IR::FixedIntegerDelay **)(*(_QWORD *)v4 + 864);
    if (v5)
      IR::FixedIntegerDelay::reset(v5);
    v4 += 8;
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
}

uint64_t AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  AUSpatialMixerV2ChannelProcessor **v8;
  AUSpatialMixerV2ChannelProcessor **v9;
  AUSpatialMixerV2ChannelProcessor *v10;
  int v11;

  v1 = atomic_load((unsigned __int8 *)this + 680);
  if ((v1 & 1) == 0)
    return 0;
  v3 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
  if (v3 == 1 || !v3 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u)
    return 0;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v5 = atomic_load((unsigned int *)this + 282);
  if (AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v5))
    v6 = *((unsigned int *)this + 27);
  else
    v6 = 1;
  v7 = atomic_load((unsigned int *)this + 261);
  if (ChannelLayoutTagIsSupportedHOA(v7) || v6 != (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3)
  {
    v4 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 34) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
    *(_BYTE *)(*((_QWORD *)this + 36) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
    AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
    v8 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
    v9 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
    if (v8 == v9)
    {
      v4 = 0;
    }
    else
    {
      do
      {
        v10 = *v8;
        v11 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
        v4 = AUSpatialMixerV2ChannelProcessor::initializeSpatializer(v10, v5, v11);
        AUSpatialMixerV2ChannelProcessor::reset(*v8++);
      }
      while (v8 != v9);
    }
    AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
    if (!(_DWORD)v4)
    {
      AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
      v4 = 0;
    }
  }
  AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(this);
  atomic_store(1u, (unsigned __int8 *)this + 1921);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 720);
  return v4;
}

void sub_1B6307760(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::UpdateOutputType(AUSpatialMixerV2InputElement *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  NSObject *v9;
  _QWORD *v10;
  const char *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
  v3 = atomic_load((unsigned int *)this + 282);
  if (v3 != 7
    || (v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80)), v4 == 1)
    || !v4 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u
    || (v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72)), v5 == 5))
  {
    *(_BYTE *)(*((_QWORD *)this + 34) + 40) = 0;
    *(_BYTE *)(*((_QWORD *)this + 36) + 40) = 0;
    goto LABEL_7;
  }
  v6 = atomic_load((unsigned __int8 *)this + 680);
  if (((v6 & 1) != 0 || (v7 = atomic_load((unsigned __int8 *)this + 681), (v7 & 1) != 0))
    && (v8 = atomic_load((unsigned int *)this + 261), ChannelLayoutTagIsSupportedHOA(v8)))
  {
    if (AUSpatialMixerV2InputElement::InitializeChannelProcessors(this))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v9 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v10 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v10 = (_QWORD *)*v10;
        v13 = 136315650;
        v14 = v10;
        v15 = 2080;
        v16 = "UpdateOutputType";
        v17 = 1024;
        v18 = v2;
        v11 = "[%s|%s] could not initialize the channel processors with output type %u";
LABEL_25:
        _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0x1Cu);
      }
    }
  }
  else if (AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(this))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v9 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v12 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v12 = (_QWORD *)*v12;
      v13 = 136315650;
      v14 = v12;
      v15 = 2080;
      v16 = "UpdateOutputType";
      v17 = 1024;
      v18 = v2;
      v11 = "[%s|%s] could not set the spatialization algorithm with output type %u";
      goto LABEL_25;
    }
  }
LABEL_7:
  atomic_store(1u, (unsigned __int8 *)this + 1921);
}

uint64_t AUSpatialMixerV2InputElement::InitializeChannelProcessors(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t Element;
  double v8;
  uint64_t v9;
  const AudioChannelLayout *v10;
  const AudioChannelLayout *v11;
  Float64 mSampleRate;
  int **v13;
  BOOL IsSupportedHOA;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  AUSpatialMixerV2ChannelProcessor **v19;
  unint64_t v20;
  AUSpatialMixerV2ChannelProcessor **v21;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  Spatializer *v43;
  uint64_t v44;
  uint64_t v45;
  const __CFNumber *v46;
  uint64_t v47;
  float v48;
  Spatializer *v49;
  uint64_t v50;
  uint64_t v51;
  Spatializer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  size_t v58;
  std::string *v59;
  const void *v60;
  std::string *v61;
  std::string::size_type size;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  char v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int64x2_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  char *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  _BOOL4 v115;
  UInt32 v116;
  float v117;
  char *v118;
  uint64_t v119;
  uint64_t v121;
  __int16 v122;
  IR::DynamicIRProcessor *v124;
  unsigned __int8 v125;
  const AudioChannelLayout *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t *v130;
  uint64_t *i;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  int v141;
  int v142;
  UInt32 v143;
  uint64_t *v144;
  int v145;
  uint64_t v146;
  void *__p[3];
  uint64_t v148[3];
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::string v152;
  std::string v153;
  std::string v154;
  CFTypeRef v155;
  AudioStreamBasicDescription v156;
  _QWORD v157[2];
  AudioStreamBasicDescription buf;
  CFTypeRef v159;
  CFTypeRef v160;
  CFTypeRef cf;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)this + 680);
  if ((v2 & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)this + 681);
    if ((v3 & 1) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v4 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v140 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v140 = (_QWORD *)*v140;
        LODWORD(buf.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = v140;
        LOWORD(buf.mFormatFlags) = 2080;
        *(_QWORD *)((char *)&buf.mFormatFlags + 2) = "InitializeChannelProcessors";
        _os_log_debug_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "[%s|%s] Initialize channel processors called before the input element is initialized", (uint8_t *)&buf, 0x16u);
      }
      return 0;
    }
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v138 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v138 = (_QWORD *)*v138;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = v138;
    LOWORD(buf.mFormatFlags) = 2080;
    *(_QWORD *)((char *)&buf.mFormatFlags + 2) = "InitializeChannelProcessors";
    _os_log_debug_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "[%s|%s] Initializing channel processors", (uint8_t *)&buf, 0x16u);
  }
  v148[0] = (uint64_t)this + 720;
  v148[1] = (uint64_t)this + 704;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
  v8 = *(double *)(Element + 80);
  v142 = *(_DWORD *)(Element + 108);
  v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)__p, (const ausdk::AUChannelLayout *)(v9 + 120));
  if (!ausdk::AUChannelLayout::NumberChannels((ausdk::AUChannelLayout *)__p[0], v10))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v15 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v139 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v139 = (_QWORD *)*v139;
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = v139;
      LOWORD(buf.mFormatFlags) = 2080;
      *(_QWORD *)((char *)&buf.mFormatFlags + 2) = "InitializeChannelProcessors";
      _os_log_error_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid output channel layout, unable to initialize channel processors", (uint8_t *)&buf, 0x16u);
    }
    v5 = 4294956445;
    goto LABEL_206;
  }
  v141 = *(_DWORD *)(*((_QWORD *)this + 27) + 336);
  if (!ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v11))
  {
    v143 = 1;
    goto LABEL_22;
  }
  AUSpatialMixerV2InputElement::CreateMatrixMix((AUSpatialMixerV2InputElement *)&buf, (uint64_t)this);
  mSampleRate = buf.mSampleRate;
  if (*(_QWORD *)&buf.mSampleRate)
  {
    v13 = (int **)*((_QWORD *)this + 162);
    IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(*v13[1]);
    *((Float64 *)this + 162) = mSampleRate;
    *(_QWORD *)&buf.mSampleRate = v13;
    if (IsSupportedHOA || ChannelLayoutTagIsSupportedHOA(**(_DWORD **)(*(_QWORD *)&mSampleRate + 8)))
    {
      AUSpatialMixerV2InputElement::UpdateOBHDParameters(this);
      mSampleRate = *((double *)this + 162);
    }
    v143 = *(_DWORD *)(*(_QWORD *)&mSampleRate + 60);
    AUSM::MatrixMix::~MatrixMix((AUSM::MatrixMix *)v13);
    MEMORY[0x1BCC95CEC]();
LABEL_22:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v17 = (_QWORD *)*v17;
      LODWORD(buf.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = v17;
      LOWORD(buf.mFormatFlags) = 2080;
      *(_QWORD *)((char *)&buf.mFormatFlags + 2) = "InitializeChannelProcessors";
      HIWORD(buf.mFramesPerPacket) = 1024;
      buf.mBytesPerFrame = v143;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing %u channel processors", (uint8_t *)&buf, 0x1Cu);
    }
    v18 = *((_QWORD *)this + 31);
    v19 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
    v20 = ((uint64_t)v19 - v18) >> 3;
    if (v20 == v143)
      goto LABEL_162;
    if (v20 <= v143)
    {
      if (v20 < v143)
      {
        __asm { FMOV            V11.2S, #1.0 }
        do
        {
          if (v143 > v20)
          {
            do
            {
              v27 = operator new();
              v28 = v27;
              v29 = *((_QWORD *)this + 34);
              v30 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
              v150 = v29;
              v151 = v30;
              if (v30)
              {
                p_shared_owners = (unint64_t *)&v30->__shared_owners_;
                do
                  v32 = __ldxr(p_shared_owners);
                while (__stxr(v32 + 1, p_shared_owners));
              }
              v33 = *((_QWORD *)this + 36);
              v34 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
              v148[2] = v33;
              v149 = v34;
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              v37 = *((_DWORD *)this + 171);
              *(_QWORD *)v27 = &off_1E69D1E18;
              *(_OWORD *)(v27 + 8) = 0u;
              *(_OWORD *)(v27 + 88) = 0u;
              *(_OWORD *)(v27 + 24) = 0u;
              *(_OWORD *)(v27 + 40) = 0u;
              *(_OWORD *)(v27 + 56) = 0u;
              *(_OWORD *)(v27 + 65) = 0u;
              *(_OWORD *)(v27 + 104) = 0u;
              *(_OWORD *)(v27 + 120) = 0u;
              *(_OWORD *)(v27 + 136) = 0u;
              *(_OWORD *)(v27 + 152) = 0u;
              IR::IRDataAttributes::IRDataAttributes(v27 + 168, 0, 0, 0, 0.0);
              IR::IRDataAttributes::IRDataAttributes(v28 + 320, 0, 0, 0, 0.0);
              *(_QWORD *)(v28 + 472) = 0x300000000;
              v144 = (uint64_t *)(v28 + 480);
              *(_OWORD *)(v28 + 480) = 0u;
              *(_OWORD *)(v28 + 496) = 0u;
              std::vector<AudioChannelLayout>::vector((_QWORD *)(v28 + 512), 1uLL);
              v38 = *(_QWORD *)(v28 + 512);
              *(_QWORD *)v38 = 0;
              *(_DWORD *)(v38 + 8) = 0;
              *(_BYTE *)(v28 + 536) = 1;
              *(_DWORD *)(v28 + 540) = 0;
              *(_QWORD *)(v28 + 544) = 0;
              *(_DWORD *)(v28 + 552) = 1065353216;
              *(_BYTE *)(v28 + 564) = 0;
              *(_QWORD *)(v28 + 556) = 0;
              *(_BYTE *)(v28 + 576) = 0;
              *(_QWORD *)(v28 + 568) = 0;
              *(_BYTE *)(v28 + 588) = 0;
              *(_QWORD *)(v28 + 580) = 0;
              *(_QWORD *)(v28 + 592) = 1109393408;
              *(_DWORD *)(v28 + 600) = 0;
              *(_QWORD *)(v28 + 608) = 0;
              *(_BYTE *)(v28 + 616) = 0;
              *(_OWORD *)(v28 + 624) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 640) = 0;
              *(_DWORD *)(v28 + 644) = 0;
              *(_OWORD *)(v28 + 656) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 672) = xmmword_1B66A0780;
              *(_QWORD *)(v28 + 696) = 0;
              *(_QWORD *)(v28 + 688) = 0;
              *(_BYTE *)(v28 + 704) = 0;
              *(_OWORD *)(v28 + 720) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 736) = _D11;
              *(_DWORD *)(v28 + 744) = 1065353216;
              caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v28 + 752));
              *(_BYTE *)(v28 + 768) = 0;
              caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v28 + 772));
              caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v28 + 776));
              *(_DWORD *)(v28 + 780) = -1;
              *(_QWORD *)(v28 + 784) = 0x101010100000000;
              *(_BYTE *)(v28 + 792) = 0;
              *(_QWORD *)(v28 + 800) = 0;
              *(_QWORD *)(v28 + 808) = MEMORY[0x1E0C8BFE0];
              *(_QWORD *)(v28 + 848) = 0;
              *(_DWORD *)(v28 + 856) = 0;
              *(_QWORD *)(v28 + 864) = 0;
              *(_QWORD *)(v28 + 816) = 0;
              *(_QWORD *)(v28 + 832) = 0;
              *(_QWORD *)(v28 + 824) = 0;
              *(_BYTE *)(v28 + 840) = 0;
              *(_QWORD *)(v28 + 872) = (char *)this + 1056;
              *(_DWORD *)(v28 + 880) = v37;
              *(_DWORD *)(v28 + 884) = v20;
              *(_QWORD *)(v28 + 888) = 0;
              *(_QWORD *)(v28 + 904) = 0;
              *(_QWORD *)(v28 + 896) = 0;
              *(_QWORD *)(v28 + 912) = v29;
              *(_QWORD *)(v28 + 920) = v30;
              if (v30)
              {
                v39 = (unint64_t *)&v30->__shared_owners_;
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
              *(_QWORD *)(v28 + 928) = v33;
              *(_QWORD *)(v28 + 936) = v34;
              if (v34)
              {
                v41 = (unint64_t *)&v34->__shared_owners_;
                do
                  v42 = __ldxr(v41);
                while (__stxr(v42 + 1, v41));
              }
              *(_DWORD *)(v28 + 944) = 1065353216;
              *(_QWORD *)(v28 + 960) = (char *)this + 1680;
              *(_QWORD *)(v28 + 968) = *((_QWORD *)this + 212);
              *(_OWORD *)(v28 + 976) = xmmword_1B6629CB0;
              *(_QWORD *)(v28 + 992) = 0;
              *(_QWORD *)(v28 + 1000) = 0xFFFFFFFF00000001;
              *(_OWORD *)(v28 + 1008) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1024) = 0;
              *(_DWORD *)(v28 + 1028) = 0;
              *(_OWORD *)(v28 + 1040) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 1056) = xmmword_1B66A0780;
              *(_QWORD *)(v28 + 1080) = 0;
              *(_QWORD *)(v28 + 1072) = 0;
              *(_BYTE *)(v28 + 1088) = 0;
              *(_OWORD *)(v28 + 1104) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 1120) = _D11;
              *(_DWORD *)(v28 + 1128) = 1065353216;
              *(_OWORD *)(v28 + 1136) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1152) = 0;
              *(_DWORD *)(v28 + 1156) = 0;
              *(_OWORD *)(v28 + 1168) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 1184) = xmmword_1B66A0780;
              *(_QWORD *)(v28 + 1208) = 0;
              *(_QWORD *)(v28 + 1200) = 0;
              *(_BYTE *)(v28 + 1216) = 0;
              *(_OWORD *)(v28 + 1232) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 1248) = _D11;
              *(_DWORD *)(v28 + 1256) = 1065353216;
              *(_OWORD *)(v28 + 1264) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1280) = 0;
              *(_DWORD *)(v28 + 1284) = 0;
              *(_OWORD *)(v28 + 1296) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 1312) = xmmword_1B66A0780;
              *(_QWORD *)(v28 + 1328) = 0;
              *(_QWORD *)(v28 + 1336) = 0;
              *(_BYTE *)(v28 + 1344) = 0;
              *(_OWORD *)(v28 + 1360) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 1376) = _D11;
              *(_DWORD *)(v28 + 1384) = 1065353216;
              *(_OWORD *)(v28 + 1392) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1408) = 0;
              *(_DWORD *)(v28 + 1412) = 0;
              *(_OWORD *)(v28 + 1424) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 1440) = xmmword_1B66A0780;
              *(_QWORD *)(v28 + 1464) = 0;
              *(_QWORD *)(v28 + 1456) = 0;
              *(_BYTE *)(v28 + 1472) = 0;
              *(_OWORD *)(v28 + 1488) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 1504) = _D11;
              *(_DWORD *)(v28 + 1512) = 1065353216;
              *(_OWORD *)(v28 + 1520) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1536) = 0;
              *(_DWORD *)(v28 + 1540) = 0;
              *(_OWORD *)(v28 + 1552) = xmmword_1B66A0780;
              *(_OWORD *)(v28 + 1568) = xmmword_1B66A0780;
              *(_BYTE *)(v28 + 1600) = 0;
              *(_QWORD *)(v28 + 1584) = 0;
              *(_QWORD *)(v28 + 1592) = 0;
              *(_OWORD *)(v28 + 1616) = xmmword_1B66282F0;
              *(_QWORD *)(v28 + 1632) = _D11;
              *(_DWORD *)(v28 + 1640) = 1065353216;
              *(_BYTE *)(v28 + 1648) = 0;
              *(_DWORD *)(v28 + 1668) = -1;
              *(_QWORD *)(v28 + 1652) = -1;
              *(_QWORD *)(v28 + 1660) = -1;
              *(_BYTE *)(v28 + 1680) = 0;
              v43 = (Spatializer *)operator new();
              Spatializer::Spatializer(v43);
              v44 = *v144;
              *v144 = v45;
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v155, *(_QWORD *)(*(_QWORD *)(v28 + 872) + 232) + 2056);
              if (v155)
              {
                v46 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>((CFDictionaryRef)v155, (const void *)kOptionalFeatureMaxPropagationDelayMs);
                if (v46)
                {
                  v47 = applesauce::CF::convert_as<float,0>(v46);
                  v48 = *(float *)&v47;
                  if ((v47 & 0xFF00000000) == 0)
                    v48 = 40.0;
                }
                else
                {
                  v48 = 40.0;
                }
                *(float *)(v28 + 592) = v48;
              }
              if (*(_BYTE *)(*(_QWORD *)(v28 + 968) + 456))
              {
                v49 = (Spatializer *)operator new();
                Spatializer::Spatializer(v49);
                v50 = *(_QWORD *)(v28 + 488);
                *(_QWORD *)(v28 + 488) = v51;
                if (v50)
                  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
                v52 = (Spatializer *)operator new();
                Spatializer::Spatializer(v52);
                v53 = *(_QWORD *)(v28 + 496);
                *(_QWORD *)(v28 + 496) = v54;
                if (v53)
                  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
              }
              if (*(_BYTE *)(*(_QWORD *)(v28 + 968) + 457))
              {
                IR::IRDataAttributes::IRDataAttributes((uint64_t)&buf, 0, 128, 1, 0.0);
                v55 = operator new();
                *(_OWORD *)&v156.mSampleRate = 0uLL;
                IR::DynamicIRProcessor::DynamicIRProcessor(v55, (uint64_t)&buf, 0, 0, 0, &v156, 0.0);
                v56 = *(uint64_t **)(v28 + 136);
                *(_QWORD *)(v28 + 136) = v55;
                if (v56)
                  std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v56);
                if (cf)
                  CFRelease(cf);
                if (v160)
                  CFRelease(v160);
                if (v159)
                  CFRelease(v159);
                if (*(_QWORD *)&buf.mSampleRate)
                  CFRelease(*(CFTypeRef *)&buf.mSampleRate);
              }
              v57 = *(_QWORD *)(*(_QWORD *)(v28 + 872) + 232);
              if (*(char *)(v57 + 31) >= 0)
                v58 = *(unsigned __int8 *)(v57 + 31);
              else
                v58 = *(_QWORD *)(v57 + 16);
              std::string::basic_string[abi:ne180100]((uint64_t)&v154, v58 + 15);
              if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v59 = &v154;
              else
                v59 = (std::string *)v154.__r_.__value_.__r.__words[0];
              if (v58)
              {
                if (*(char *)(v57 + 31) >= 0)
                  v60 = (const void *)(v57 + 8);
                else
                  v60 = *(const void **)(v57 + 8);
                memmove(v59, v60, v58);
              }
              strcpy((char *)v59 + v58, "|InputElement #");
              std::to_string(&v153, v37);
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v61 = &v153;
              else
                v61 = (std::string *)v153.__r_.__value_.__r.__words[0];
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
              else
                size = v153.__r_.__value_.__l.__size_;
              v63 = std::string::append(&v154, (const std::string::value_type *)v61, size);
              v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
              *(_QWORD *)&v156.mBytesPerPacket = *((_QWORD *)&v63->__r_.__value_.__l + 2);
              *(_OWORD *)&v156.mSampleRate = v64;
              v63->__r_.__value_.__l.__size_ = 0;
              v63->__r_.__value_.__r.__words[2] = 0;
              v63->__r_.__value_.__r.__words[0] = 0;
              v65 = std::string::append((std::string *)&v156, "|Processor #", 0xCuLL);
              v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              *(_QWORD *)&buf.mBytesPerPacket = *((_QWORD *)&v65->__r_.__value_.__l + 2);
              *(_OWORD *)&buf.mSampleRate = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v152, v20);
              if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v67 = &v152;
              else
                v67 = (std::string *)v152.__r_.__value_.__r.__words[0];
              if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v68 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
              else
                v68 = v152.__r_.__value_.__l.__size_;
              v69 = std::string::append((std::string *)&buf, (const std::string::value_type *)v67, v68);
              v70 = v69->__r_.__value_.__r.__words[0];
              v157[0] = v69->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v157 + 7) = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
              v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
              v69->__r_.__value_.__l.__size_ = 0;
              v69->__r_.__value_.__r.__words[2] = 0;
              v69->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(v28 + 911) < 0)
                operator delete(*(void **)(v28 + 888));
              *(_QWORD *)(v28 + 888) = v70;
              *(_QWORD *)(v28 + 896) = v157[0];
              *(_QWORD *)(v28 + 903) = *(_QWORD *)((char *)v157 + 7);
              *(_BYTE *)(v28 + 911) = v71;
              if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v152.__r_.__value_.__l.__data_);
              if (SHIBYTE(buf.mFramesPerPacket) < 0)
                operator delete(*(void **)&buf.mSampleRate);
              if (SHIBYTE(v156.mFramesPerPacket) < 0)
                operator delete(*(void **)&v156.mSampleRate);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
              if (v155)
                CFRelease(v155);
              v146 = v28;
              v72 = v149;
              if (v149)
              {
                v73 = (unint64_t *)&v149->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = v151;
              if (v151)
              {
                v76 = (unint64_t *)&v151->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              v79 = (uint64_t *)*((_QWORD *)this + 32);
              v78 = *((_QWORD *)this + 33);
              if ((unint64_t)v79 >= v78)
              {
                v80 = *((_QWORD *)this + 31);
                v81 = ((uint64_t)v79 - v80) >> 3;
                v82 = v81 + 1;
                if ((unint64_t)(v81 + 1) >> 61)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v83 = v78 - v80;
                if (v83 >> 2 > v82)
                  v82 = v83 >> 2;
                if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                  v84 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v84 = v82;
                *(_QWORD *)&buf.mBitsPerChannel = (char *)this + 264;
                if (v84)
                  v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v84);
                else
                  v85 = 0;
                v86 = (uint64_t *)(v84 + 8 * v81);
                v87 = v84 + 8 * v85;
                *(_QWORD *)&buf.mBytesPerFrame = v87;
                *v86 = v146;
                v88 = v86 + 1;
                *(_QWORD *)&buf.mBytesPerPacket = v86 + 1;
                v90 = (_QWORD *)*((_QWORD *)this + 31);
                v89 = (_QWORD *)*((_QWORD *)this + 32);
                if (v89 == v90)
                {
                  v92 = vdupq_n_s64((unint64_t)v89);
                }
                else
                {
                  do
                  {
                    v91 = *--v89;
                    *v89 = 0;
                    *--v86 = v91;
                  }
                  while (v89 != v90);
                  v92 = *(int64x2_t *)((char *)this + 248);
                  v88 = *(_QWORD **)&buf.mBytesPerPacket;
                  v87 = *(_QWORD *)&buf.mBytesPerFrame;
                }
                *((_QWORD *)this + 31) = v86;
                *((_QWORD *)this + 32) = v88;
                *(int64x2_t *)&buf.mFormatID = v92;
                v93 = *((_QWORD *)this + 33);
                *((_QWORD *)this + 33) = v87;
                *(_QWORD *)&buf.mBytesPerFrame = v93;
                *(_QWORD *)&buf.mSampleRate = v92.i64[0];
                std::__split_buffer<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::~__split_buffer((uint64_t)&buf);
                *((_QWORD *)this + 32) = v88;
              }
              else
              {
                *v79 = v146;
                *((_QWORD *)this + 32) = v79 + 1;
              }
              LODWORD(v20) = v20 + 1;
            }
            while ((_DWORD)v20 != v143);
            v18 = *((_QWORD *)this + 31);
            v19 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
          }
          v20 = ((uint64_t)v19 - v18) >> 3;
        }
        while (v20 < v143);
      }
    }
    else
    {
      v21 = (AUSpatialMixerV2ChannelProcessor **)(v18 + 8 * v143);
      while (v19 != v21)
        std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](--v19);
      *((_QWORD *)this + 32) = v21;
    }
    v95 = (char *)*((_QWORD *)this + 28);
    v94 = (char *)*((_QWORD *)this + 29);
    v96 = 0x6DB6DB6DB6DB6DB7 * ((v94 - v95) >> 2);
    v97 = v143 - v96;
    if (v143 <= v96)
    {
      if (v143 >= v96)
      {
LABEL_162:
        AUSpatialMixerV2InputElement::UpdateChannelLayout(this, 0);
        v108 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
        if (v108 == 1
          || !v108 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u
          || (v109 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72)), v109 == 5))
        {
          v110 = 5;
        }
        else
        {
          v110 = atomic_load((unsigned int *)this + 282);
        }
        v111 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
        if (*((_QWORD *)this + 32) == *((_QWORD *)this + 31))
        {
          v5 = 0;
        }
        else
        {
          v112 = 0;
          v113 = 0;
          v114 = *(_DWORD *)(*((_QWORD *)this + 162) + 196);
          v115 = v114 != 0;
          v145 = v114;
          v116 = v143 - v114;
          v117 = v8;
          do
          {
            v118 = (char *)&kAllPassFilterLengthsForReverbSend
                 + 12 * v113
                 + 12 * (*((_DWORD *)this + 171) - 25 * ((*((_DWORD *)this + 171) + v113) / 0x19));
            memset(&v154, 0, sizeof(v154));
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v154, v118, (uint64_t)(v118 + 12), 3uLL);
            AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(*(_QWORD **)(*((_QWORD *)this + 31) + 8 * v112), (uint64_t *)&v154);
            v119 = *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v112);
            AUSM::InputGeometry::getExclusionZones((AUSM::InputGeometry *)&buf, (uint64_t)this + 1680);
            AUSpatialMixerV2ChannelProcessor::setExclusionZones(v119, (uint64_t)&buf);
            if (*(_QWORD *)&buf.mSampleRate)
            {
              *(Float64 *)&buf.mFormatID = buf.mSampleRate;
              operator delete(*(void **)&buf.mSampleRate);
            }
            if (*((_QWORD *)this + 163))
              AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(*(AUSpatialMixerV2ChannelProcessor **)(*((_QWORD *)this + 31) + 8 * v112), *((_DWORD *)this + 332));
            if (v113 < v116 && v115)
            {
              v121 = *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v112);
              v122 = 1;
            }
            else
            {
              v121 = *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v112);
              if (v145 && v113 >= v116)
                v122 = 256;
              else
                v122 = 257;
            }
            *(_WORD *)(v121 + 790) = v122;
            *(float *)(v121 + 540) = v117;
            *(_DWORD *)(v121 + 544) = v142;
            ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v121 + 512), (const ausdk::AUChannelLayout *)__p);
            *(_DWORD *)(v121 + 548) = v141;
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3003);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3219);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3200);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3202);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3212);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3204);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 4600);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3279);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 5003);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3108);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3109);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3210);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3274);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3217);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3228);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3214);
            (**(void (***)(uint64_t, uint64_t))v121)(v121, 3224);
            caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v121 + 772));
            buf.mSampleRate = v117;
            *(_OWORD *)&buf.mFormatID = xmmword_1B6626900;
            *(_OWORD *)&buf.mBytesPerFrame = xmmword_1B6626910;
            AUSpatialMixerV2OcclusionFilter::initialize((IIRFilterFloat32 **)(v121 + 112), &buf);
            v156.mSampleRate = v117;
            *(_OWORD *)&v156.mFormatID = xmmword_1B6626900;
            *(_OWORD *)&v156.mBytesPerFrame = xmmword_1B6626910;
            AUSpatialMixerV2OcclusionFilter::initialize((IIRFilterFloat32 **)(v121 + 88), &v156);
            AUSM::ChannelGeometry::update((float32x4_t **)(v121 + 960), (simd_quatf *)1);
            caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v121 + 772));
            if (atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v121 + 872) + 232) + 2476)))
              __asm { BR              X9 }
            v124 = *(IR::DynamicIRProcessor **)(v121 + 136);
            if (v124)
              IR::DynamicIRProcessor::initialize(v124, *(float *)(v121 + 540), *(unsigned int *)(v121 + 548));
            v5 = AUSpatialMixerV2ChannelProcessor::initializeSpatializer((AUSpatialMixerV2ChannelProcessor *)v121, v110, v111);
            AUSpatialMixerV2ChannelProcessor::setDelay((float *)v121, *(float *)(v121 + 596));
            v125 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v121 + 872) + 120));
            if ((v125 & 1) != 0)
              AUSpatialMixerV2ChannelProcessor::initializePropagationDelay((AUSpatialMixerV2ChannelProcessor *)v121);
            atomic_store(1u, (unsigned __int8 *)(v121 + 840));
            if (v154.__r_.__value_.__r.__words[0])
            {
              v154.__r_.__value_.__l.__size_ = v154.__r_.__value_.__r.__words[0];
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            v112 = ++v113;
          }
          while (v113 < (unint64_t)((uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3));
        }
        AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
        v127 = *((_QWORD *)this + 28);
        v128 = *((_QWORD *)this + 29);
        while (v127 != v128)
        {
          *(_QWORD *)(v127 + 4) = 0;
          *(_QWORD *)(v127 + 20) = 0;
          v127 += 28;
        }
        v129 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 160));
        v130 = (uint64_t *)*((_QWORD *)this + 31);
        for (i = (uint64_t *)*((_QWORD *)this + 32); v130 != i; ++v130)
        {
          AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes(*v130, (uint64_t)this + 736, (v129 & 1) == 0, 1, 0);
          AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes(*v130, (uint64_t)this + 888, (v129 & 1) == 0, 0, 1);
        }
        if (ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v126))
        {
          v132 = atomic_load((unsigned int *)this + 261);
          if (ChannelLayoutTagIsSupportedHOA(v132))
          {
            v133 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
            if (v133 == 3)
            {
              v134 = atomic_load((unsigned int *)this + 282);
              if (v134 == 7)
              {
                v135 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
                if (v135 == 2)
                {
                  v136 = atomic_load((unsigned int *)this + 261);
                  AUSpatialMixerV2InputElement::InitializeParametricProcessor(this, v136);
                }
              }
            }
          }
        }
        atomic_store(1u, (unsigned __int8 *)this + 696);
        atomic_store(1u, (unsigned __int8 *)this + 1921);
        goto LABEL_206;
      }
      v106 = &v95[28 * v143];
    }
    else
    {
      v98 = *((_QWORD *)this + 30);
      if (0x6DB6DB6DB6DB6DB7 * ((v98 - (uint64_t)v94) >> 2) < v97)
      {
        v99 = 0xDB6DB6DB6DB6DB6ELL * ((v98 - (uint64_t)v95) >> 2);
        if (v99 <= v143)
          v99 = v143;
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v98 - (uint64_t)v95) >> 2)) >= 0x492492492492492)
          v100 = 0x924924924924924;
        else
          v100 = v99;
        if (v100 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v101 = (char *)operator new(28 * v100);
        v102 = &v101[4 * ((v94 - v95) >> 2)];
        v103 = 28 * v143 - 4 * ((v94 - v95) >> 2);
        v104 = v102;
        do
        {
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = 0;
          *((_DWORD *)v104 + 6) = 0;
          *((_QWORD *)v104 + 2) = 0;
          v104 += 28;
          v103 -= 28;
        }
        while (v103);
        if (v94 != v95)
        {
          do
          {
            v105 = *(_OWORD *)(v94 - 28);
            *((_OWORD *)v102 - 1) = *((_OWORD *)v94 - 1);
            *(_OWORD *)(v102 - 28) = v105;
            v102 -= 28;
            v94 -= 28;
          }
          while (v94 != v95);
          v94 = (char *)*((_QWORD *)this + 28);
        }
        *((_QWORD *)this + 28) = v102;
        *((_QWORD *)this + 29) = &v101[28 * v143];
        *((_QWORD *)this + 30) = &v101[28 * v100];
        if (v94)
          operator delete(v94);
        goto LABEL_162;
      }
      v106 = &v94[28 * v97];
      v107 = 28 * v143 - 4 * ((v94 - v95) >> 2);
      do
      {
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
        *((_DWORD *)v94 + 6) = 0;
        *((_QWORD *)v94 + 2) = 0;
        v94 += 28;
        v107 -= 28;
      }
      while (v107);
    }
    *((_QWORD *)this + 29) = v106;
    goto LABEL_162;
  }
  v5 = 4294956428;
LABEL_206:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v148);
  return v5;
}

void sub_1B6308E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IR::IRDataAttributes *a13, IR::IRDataAttributes *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::UpdatePointSourceInHeadMode(AUSpatialMixerV2InputElement *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;

  v2 = atomic_load((unsigned int *)this + 282);
  result = AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v2);
  if ((_DWORD)result)
    v4 = *((unsigned int *)this + 27);
  else
    v4 = 1;
  v5 = atomic_load((unsigned __int8 *)this + 680);
  if ((v5 & 1) != 0 || (v6 = atomic_load((unsigned __int8 *)this + 681), (v6 & 1) != 0))
  {
    v7 = atomic_load((unsigned int *)this + 261);
    if (ChannelLayoutTagIsSupportedHOA(v7) || v4 == (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3)
      return AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
    else
      return AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2, int a3)
{
  char *v6;
  UInt32 mChannelLayoutTag;
  uint8x8_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  std::string *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  void **v20;
  UInt32 v21;
  uint64_t Property;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  std::string *v26;
  NSObject *v27;
  _QWORD *v28;
  std::string *v29;
  NSObject *v30;
  _QWORD *v31;
  std::string *v32;
  NSObject *v33;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  int v41;
  _BOOL4 IsSupportedHOA;
  unsigned __int8 v43;
  unsigned __int8 v44;
  int v45;
  char v46;
  _QWORD *v47;
  _QWORD *v48;
  std::string *v49;
  _QWORD *v50;
  std::string *v51;
  void *__p[2];
  char v53;
  std::string v54;
  _BYTE v55[22];
  __int16 v56;
  _BYTE v57[18];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  if (a2->mChannelLayoutTag == 0x10000)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2->mChannelBitmap);
    v8.i16[0] = vaddlv_u8(v8);
    mChannelLayoutTag = v8.i32[0];
  }
  else if (a2->mChannelLayoutTag)
  {
    mChannelLayoutTag = (unsigned __int16)a2->mChannelLayoutTag;
  }
  else
  {
    mChannelLayoutTag = a2->mNumberChannelDescriptions;
  }
  v9 = atomic_load((unsigned __int8 *)this + 680);
  if ((v9 & 1) == 0)
  {
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 608))(*((_QWORD *)this + 27)) & 1) == 0
      && *((_DWORD *)this + 27) != mChannelLayoutTag
      && (a3 & 1) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v10 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v50 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v50 = (_QWORD *)*v50;
        GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v54;
        else
          v51 = (std::string *)v54.__r_.__value_.__r.__words[0];
        *(_DWORD *)v55 = 136315906;
        *(_QWORD *)&v55[4] = v50;
        *(_WORD *)&v55[12] = 2080;
        *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
        v56 = 1024;
        *(_DWORD *)v57 = mChannelLayoutTag;
        *(_WORD *)&v57[4] = 2080;
        *(_QWORD *)&v57[6] = v51;
        _os_log_error_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels %u in requested audio channel layout %s is different than in the stream format.", v55, 0x26u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      }
      v11 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        goto LABEL_79;
      v12 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v12 = (_QWORD *)*v12;
      PrintAudioChannelLayout(&v54, *((int **)this + 15));
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v54;
      else
        v13 = (std::string *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
    goto LABEL_20;
  }
  if (*((_DWORD *)this + 27) == mChannelLayoutTag)
  {
LABEL_20:
    if (a2->mChannelLayoutTag >= 0xFFFF0000)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v14 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_79;
      v15 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v15 = (_QWORD *)*v15;
      GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
      v16 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      v17 = v54.__r_.__value_.__r.__words[0];
      v18 = atomic_load((unsigned int *)this + 261);
      GetStringFromAudioChannelLayoutTag(__p, v18);
      v19 = &v54;
      if (v16 < 0)
        v19 = (std::string *)v17;
      if (v53 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      *(_DWORD *)v55 = 136315906;
      *(_QWORD *)&v55[4] = v15;
      *(_WORD *)&v55[12] = 2080;
      *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
      v56 = 2080;
      *(_QWORD *)v57 = v19;
      *(_WORD *)&v57[8] = 2080;
      *(_QWORD *)&v57[10] = v20;
      _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to set audio channel layout %s. Current audio channel layout tag = %s", v55, 0x2Au);
      if (v53 < 0)
        operator delete(__p[0]);
      goto LABEL_77;
    }
    v21 = 20 * a2->mNumberChannelDescriptions + 12;
    LODWORD(__p[0]) = 4;
    Property = AudioFormatGetProperty(0x7661636Cu, v21, a2, (UInt32 *)__p, 0);
    if ((_DWORD)Property)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v23 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v47 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v47 = (_QWORD *)*v47;
        *(_DWORD *)v55 = 136315650;
        *(_QWORD *)&v55[4] = v47;
        *(_WORD *)&v55[12] = 2080;
        *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
        v56 = 1024;
        *(_DWORD *)v57 = Property;
        _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid audio channel layout: AudioFormatGetProperty returned error %d", v55, 0x1Cu);
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      }
      v24 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v25 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v25 = (_QWORD *)*v25;
        PrintAudioChannelLayout(&v54, *((int **)this + 15));
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v54;
        else
          v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
        *(_DWORD *)v55 = 136315650;
        *(_QWORD *)&v55[4] = v25;
        *(_WORD *)&v55[12] = 2080;
        *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
        v56 = 2080;
        *(_QWORD *)v57 = v26;
        _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (!a2->mChannelLayoutTag)
        goto LABEL_118;
      v35 = 20 * a2->mNumberChannelDescriptions + 12;
      v36 = (v35 & 0x1C) == 0;
      v37 = v35 >> 5;
      v38 = v36 ? v37 : v37 + 1;
      std::vector<AudioChannelLayout>::vector(v55, v38);
      memcpy(*(void **)v55, a2, 20 * a2->mNumberChannelDescriptions + 12);
      v39 = *(void **)v55;
      v40 = ausdk::ACL::operator==(*(int **)v55, *((_DWORD **)this + 15));
      *(_QWORD *)&v55[8] = v39;
      operator delete(v39);
      if (!v40)
      {
LABEL_118:
        v41 = atomic_load((unsigned int *)this + 261);
        IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v41);
        ausdk::AUIOElement::ForceSetAudioChannelLayout(this, a2);
        atomic_store(a2->mChannelLayoutTag, (unsigned int *)this + 261);
        v43 = atomic_load((unsigned __int8 *)this + 680);
        if ((v43 & 1) != 0 || (v44 = atomic_load((unsigned __int8 *)this + 681), (v44 & 1) != 0))
        {
          v45 = atomic_load((unsigned int *)this + 261);
          if (ChannelLayoutTagIsSupportedHOA(v45) || IsSupportedHOA)
          {
            AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
          }
          else
          {
            *(_BYTE *)(*((_QWORD *)this + 34) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
            *(_BYTE *)(*((_QWORD *)this + 36) + 40) = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
            AUSpatialMixerV2InputElement::UpdateChannelLayout(this, 1);
          }
        }
      }
      *((_BYTE *)this + 1040) = 1;
      v46 = a3 ^ 1;
      if (*((_BYTE *)this + 1041))
        v46 = 1;
      *((_BYTE *)this + 1041) = v46;
    }
    goto LABEL_80;
  }
  if (!a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v33 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v48 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v48 = (_QWORD *)*v48;
      GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v54;
      else
        v49 = (std::string *)v54.__r_.__value_.__r.__words[0];
      *(_DWORD *)v55 = 136315906;
      *(_QWORD *)&v55[4] = v48;
      *(_WORD *)&v55[12] = 2080;
      *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
      v56 = 1024;
      *(_DWORD *)v57 = mChannelLayoutTag;
      *(_WORD *)&v57[4] = 2080;
      *(_QWORD *)&v57[6] = v49;
      _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels %u in requested audio channel layout %s is different than in the stream format.", v55, 0x26u);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    }
    v11 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      goto LABEL_79;
    v12 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v12 = (_QWORD *)*v12;
    PrintAudioChannelLayout(&v54, *((int **)this + 15));
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v54;
    else
      v13 = (std::string *)v54.__r_.__value_.__r.__words[0];
LABEL_76:
    *(_DWORD *)v55 = 136315650;
    *(_QWORD *)&v55[4] = v12;
    *(_WORD *)&v55[12] = 2080;
    *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
    v56 = 2080;
    *(_QWORD *)v57 = v13;
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
LABEL_77:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
LABEL_79:
    Property = 4294956445;
    goto LABEL_80;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v27 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v28 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v28 = (_QWORD *)*v28;
    GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v54;
    else
      v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
    *(_DWORD *)v55 = 136315906;
    *(_QWORD *)&v55[4] = v28;
    *(_WORD *)&v55[12] = 2080;
    *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
    v56 = 1024;
    *(_DWORD *)v57 = mChannelLayoutTag;
    *(_WORD *)&v57[4] = 2080;
    *(_QWORD *)&v57[6] = v29;
    _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEFAULT, "[%s|%s] Number of channels %u in requested audio channel layout is different than in stream format. Default audio channel layout tag %s from preset is ignored.", v55, 0x26u);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  }
  v30 = getAUSMV2Log(void)::gLog;
  Property = 0;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v31 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v31 = (_QWORD *)*v31;
    PrintAudioChannelLayout(&v54, *((int **)this + 15));
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v54;
    else
      v32 = (std::string *)v54.__r_.__value_.__r.__words[0];
    *(_DWORD *)v55 = 136315650;
    *(_QWORD *)&v55[4] = v31;
    *(_WORD *)&v55[12] = 2080;
    *(_QWORD *)&v55[14] = "SetAudioChannelLayoutPrivate";
    v56 = 2080;
    *(_QWORD *)v57 = v32;
    _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    Property = 0;
  }
LABEL_80:
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
  return Property;
}

void sub_1B6309DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v17);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::UpdateParametricProcessor(AUSpatialMixerV2InputElement *this)
{
  const __CFDictionary *v2;
  const __CFNumber *v3;
  float v4;
  float v5;
  uint64_t v6;
  const __CFNumber *v7;
  float v8;
  float v9;
  uint64_t v10;
  const __CFNumber *v11;
  float v12;
  float v13;
  uint64_t v14;
  const __CFNumber *v15;
  float v16;
  int v17;
  uint64_t v18;
  const __CFNumber *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  AUSpatialMixerV2ChannelProcessor **v23;
  AUSpatialMixerV2ChannelProcessor **v24;
  const __CFNumber *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  CFTypeRef v32;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *((_QWORD *)this + 161) + 1528);
  v2 = (const __CFDictionary *)cf;
  if (!cf)
  {
    atomic_store(1u, (unsigned __int8 *)this + 1921);
    return;
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[5]>(v2, "CDDR");
  if (((unint64_t)v3 & 0xFF00000000) != 0)
  {
    v4 = 1.0;
    if (*(float *)&v3 <= 1.0)
      v4 = *(float *)&v3;
    v5 = 0.0;
    if (*(float *)&v3 >= 0.0)
      v5 = v4;
    *((float *)this + 359) = v5;
    v6 = *((_QWORD *)this + 163);
    if (v6)
      *(float *)(v6 + 124) = v5;
  }
  v7 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[16]>(v2, "SharpeningLimit");
  if (((unint64_t)v7 & 0xFF00000000) != 0)
  {
    v8 = 24000.0;
    if (*(float *)&v7 <= 24000.0)
      v8 = *(float *)&v7;
    v9 = 0.0;
    if (*(float *)&v7 >= 0.0)
      v9 = v8;
    *((float *)this + 329) = v9;
    v10 = *((_QWORD *)this + 163);
    if (v10)
      *(float *)(v10 + 4) = v9;
    if (v9 <= 0.0)
      AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
  }
  v11 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[19]>(v2, "DecorrelationLimit");
  if (((unint64_t)v11 & 0xFF00000000) != 0)
  {
    v12 = 20000.0;
    if (*(float *)&v11 <= 20000.0)
      v12 = *(float *)&v11;
    if (*(float *)&v11 >= -1.0)
      v13 = v12;
    else
      v13 = -1.0;
    *((float *)this + 330) = v13;
    v14 = *((_QWORD *)this + 163);
    if (v14)
      *(float *)(v14 + 8) = v13;
  }
  v15 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>(v2, "AnalysisType");
  if (((unint64_t)v15 & 0xFF00000000) == 0)
    goto LABEL_32;
  v16 = 5.0;
  if (*(float *)&v15 <= 5.0)
    v16 = *(float *)&v15;
  if (*(float *)&v15 < 0.0)
    v16 = 0.0;
  if (*((_DWORD *)this + 360) != llroundf(v16))
  {
    *((_DWORD *)this + 360) = (int)*(float *)&v15;
    v18 = *((_QWORD *)this + 163);
    if (v18)
      *(_DWORD *)(v18 + 128) = (int)*(float *)&v15;
    v17 = 1;
  }
  else
  {
LABEL_32:
    v17 = 0;
  }
  v19 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>(v2, "FrameSize");
  if (v19)
  {
    v20 = applesauce::CF::convert_as<unsigned int,0>(v19);
    if ((v20 & 0xFF00000000) != 0)
    {
      v21 = v20 >= 0x800 ? 2048 : v20;
      v22 = v21 <= 0x40 ? 64 : v21;
      if (*((_DWORD *)this + 332) != v22)
      {
        *((_DWORD *)this + 332) = v22;
        if (*((_QWORD *)this + 163))
        {
          v23 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
          v24 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
          while (v23 != v24)
            AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(*v23++, v22);
        }
        v17 = 1;
      }
    }
  }
  v25 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[8]>(v2, "HopSize");
  if (v25)
  {
    v26 = applesauce::CF::convert_as<unsigned int,0>(v25);
    if ((v26 & 0xFF00000000) != 0)
    {
      if (v26 >= 0x800)
        v27 = 2048;
      else
        v27 = v26;
      if (v27 <= 0x40)
        v27 = 64;
      if (*((_DWORD *)this + 333) != v27)
      {
        *((_DWORD *)this + 333) = v27;
        goto LABEL_62;
      }
    }
  }
  if (v17)
  {
    v27 = *((_DWORD *)this + 333);
LABEL_62:
    *((_DWORD *)this + 336) = *((_DWORD *)this + 332) / (int)v27;
    v28 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
    if (v28 == 3)
    {
      v29 = atomic_load((unsigned int *)this + 282);
      if (v29 == 7)
      {
        v30 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
        if (v30 == 2)
        {
          v31 = atomic_load((unsigned int *)this + 261);
          AUSpatialMixerV2InputElement::InitializeParametricProcessor(this, v31);
        }
      }
    }
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 720);
  v32 = cf;
  atomic_store(1u, (unsigned __int8 *)this + 1921);
  if (v32)
    CFRelease(v32);
}

void sub_1B630A120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  char *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  _QWORD *v8;
  _QWORD *v9;

  v4 = (char *)this + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v5 = atomic_load((unsigned __int8 *)this + 680);
  if ((v5 & 1) != 0 || (v6 = atomic_load((unsigned __int8 *)this + 681), (v6 & 1) != 0))
  {
    v9 = (_QWORD *)*((_QWORD *)this + 31);
    v8 = (_QWORD *)*((_QWORD *)this + 32);
    while (v9 != v8)
    {
      (**(void (***)(_QWORD, uint64_t))*v9)(*v9, a2);
      ++v9;
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v4);
}

void sub_1B630A1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(AUSpatialMixerV2InputElement *this)
{
  char *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  _QWORD *v6;
  CFDictionaryRef CFDictionaryRef;
  uint64_t v8;
  const void *v9;
  const void *v10;
  CFStringRef v11;
  NSObject *v12;
  _QWORD *v13;
  void **v14;
  int v15;
  char *v16;
  char *v17;
  CFDictionaryRef v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::runtime_error *v25;
  _QWORD v26[2];
  CFDictionaryRef valuePtr;
  void *__p[2];
  char v29;
  CFURLRef anURL[6];
  int v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf;
  char v35;
  _BYTE buf[12];
  __int16 v37;
  const char *v38;
  __int16 v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  atomic_store(0, (unsigned __int8 *)this + 1976);
  v2 = (char *)this + 704;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 704);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  if (*((uint64_t **)this + 32) != v3)
  {
    if (*v3)
    {
      AUSpatialMixerV2ChannelProcessor::getLoadedSpatializerIRDataAttributes((AUSpatialMixerV2ChannelProcessor *)anURL, *v3);
      if (v35)
      {
        v4 = v31;
        if (v31)
        {
          atomic_store(1u, (unsigned __int8 *)this + 1976);
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v5 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            v6 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v6 = (_QWORD *)*v6;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v6;
            v37 = 2080;
            v38 = "SetIsUsingPersonalizedHRTF";
            v39 = 1024;
            LODWORD(v40[0]) = v4;
            _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_HRIR: Personalized HRIR type %u is loaded.", buf, 0x1Cu);
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)buf, "hrir_category");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&buf[8], "personal");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)&v38 + 2), "hrir_type");
          LODWORD(valuePtr) = v4;
          v40[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v40[0])
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          __p[0] = buf;
          __p[1] = (void *)2;
          CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)__p);
          v8 = 0;
          v26[0] = CFDictionaryRef;
          do
          {
            v9 = (const void *)v40[v8];
            if (v9)
              CFRelease(v9);
            v10 = *(const char **)((char *)&v38 + v8 * 8 + 2);
            if (v10)
              CFRelease(v10);
            v8 -= 2;
          }
          while (v8 != -4);
          if (AudioStatisticsLibraryLoader(void)::once != -1)
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_7715);
          if (AudioStatisticsLibraryLoader(void)::libSym)
            AudioStatisticsLibraryLoader(void)::libSym(CFDictionaryRef, 268435457, 5);
          if (CFDictionaryRef)
            CFRelease(CFDictionaryRef);
        }
        else
        {
          if (!anURL[0])
          {
            v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v24, "Could not construct");
          }
          v11 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v11);
          if (!*(_QWORD *)buf)
          {
            v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v25, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(*(const __CFString **)buf, (uint64_t)__p);
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v12 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            v13 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v13 = (_QWORD *)*v13;
            v14 = __p;
            if (v29 < 0)
              v14 = (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v13;
            v37 = 2080;
            v38 = "SetIsUsingPersonalizedHRTF";
            v39 = 2080;
            v40[0] = v14;
            _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_HRIR: Generic HRIR is loaded from %s.", buf, 0x20u);
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)buf, "hrir_category");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&buf[8], "generic");
          v15 = v29;
          v16 = (char *)__p[0];
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)&v38 + 2), "hrir_source");
          if (v15 >= 0)
            v17 = (char *)__p;
          else
            v17 = v16;
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v40, v17);
          v26[0] = buf;
          v26[1] = 2;
          v18 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v26);
          v19 = 0;
          valuePtr = v18;
          do
          {
            v20 = (const void *)v40[v19];
            if (v20)
              CFRelease(v20);
            v21 = *(const char **)((char *)&v38 + v19 * 8 + 2);
            if (v21)
              CFRelease(v21);
            v19 -= 2;
          }
          while (v19 != -4);
          if (AudioStatisticsLibraryLoader(void)::once != -1)
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_7715);
          if (AudioStatisticsLibraryLoader(void)::libSym)
            AudioStatisticsLibraryLoader(void)::libSym(v18, 268435457, 5);
          if (v18)
            CFRelease(v18);
          if (v29 < 0)
            operator delete(__p[0]);
        }
        if (v35)
        {
          if (cf)
            CFRelease(cf);
          if (v33)
            CFRelease(v33);
          if (v32)
            CFRelease(v32);
          if (anURL[0])
            CFRelease(anURL[0]);
        }
      }
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
}

void sub_1B630A70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v38;
  uint64_t v39;

  __cxa_free_exception(v38);
  applesauce::CF::StringRef::~StringRef((const void **)(v39 - 96));
  if (a37)
    IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a18);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v37);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::InitializeParametricProcessor(AUSpatialMixerV2InputElement *this, int a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  CFTypeRef v9;
  CFTypeRef v10;
  void *v11;
  const void *v12;
  int v13;
  float v14;
  uint64_t Element;
  const AudioChannelLayout *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  NSObject *v25;
  uint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  NSObject *v32;
  _QWORD *v33;
  NSObject *v34;
  NSObject *v35;
  const void *v36;
  CFTypeRef v37;
  const void *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const AudioChannelLayout *v44;
  int v45;
  _OWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t i;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  afSTFTWrapper *v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  ParametricProcessor *v124;
  AUSpatialMixerV2ChannelProcessor **v125;
  AUSpatialMixerV2ChannelProcessor **v126;
  _QWORD *v127;
  void **v128;
  _QWORD *v129;
  _QWORD *v130;
  unsigned int v131;
  int v132;
  uint64_t v133[2];
  CFTypeRef v134;
  _BYTE *v135;
  uint64_t v136;
  CFTypeRef v137;
  CFTypeRef v138;
  CFTypeRef v139;
  AudioChannelLayout v140;
  uint64_t v141;
  CFTypeRef v142;
  CFTypeRef v143;
  CFTypeRef v144;
  CFTypeRef v145;
  CFTypeRef v146;
  CFTypeRef cf;
  int v148;
  AudioChannelLayout v149;
  void *v150;
  void *v151;
  uint64_t v152;
  void *v153[3];
  void *v154[2];
  char v155;
  void *v156;
  _BYTE *v157;
  uint64_t v158;
  const void *v159;
  uint64_t v160;
  _BYTE buf[40];
  void *__p;
  void *v163;
  uint8_t v164[8];
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)this + 680);
  if ((v4 & 1) != 0 || (v5 = atomic_load((unsigned __int8 *)this + 681), (v5 & 1) != 0))
  {
    v6 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
    if (v6 != 2 && (v7 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88)), v7 == 3)
      || (unsigned __int16)a2 != 4
      || *((_QWORD *)this + 31) == *((_QWORD *)this + 32))
    {
      if (*((_QWORD *)this + 163))
      {
        *(_QWORD *)buf = (char *)this + 720;
        *(_QWORD *)&buf[8] = (char *)this + 704;
        std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
        AUSpatialMixerV2InputElement::DestroyParametricProcessors((ParametricProcessor **)this);
        std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)buf);
      }
    }
    else
    {
      v8 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
      AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *((_QWORD *)this + 161) + 320);
      v9 = cf;
      if (cf)
      {
        CFRetain(cf);
        v10 = v9;
      }
      else
      {
        IR::getPresetDataAttributes();
        v10 = v143;
        v143 = 0;
      }
      v11 = (void *)*((_QWORD *)this + 183);
      *((_QWORD *)this + 183) = v10;
      if (v11)
        CFRelease(v11);
      if (!v9)
      {
        if (v146)
          CFRelease(v146);
        if (v145)
          CFRelease(v145);
        if (v144)
          CFRelease(v144);
        v11 = (void *)v143;
        if (v143)
          CFRelease(v143);
      }
      if (v8 == 2)
      {
        IR::IRDataLoader::instance((IR::IRDataLoader *)v11);
        v12 = (const void *)*((_QWORD *)this + 183);
        if (v12)
          CFRetain(*((CFTypeRef *)this + 183));
        v142 = v12;
        v13 = IR::IRDataLoader::fileExists();
        if (v12)
          CFRelease(v12);
        if (v13)
          v8 = 2;
        else
          v8 = 3;
      }
      v14 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0) + 80);
      *((float *)this + 331) = v14;
      *((_DWORD *)this + 361) = v8;
      *((_DWORD *)this + 337) = 4;
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
      *((_DWORD *)this + 338) = ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)(Element + 120), v16);
      v17 = **(_DWORD **)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0) + 120);
      v18 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
      ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v140.mChannelDescriptions[0].mCoordinates[1], (const ausdk::AUChannelLayout *)(v18 + 120));
      ausdk::AUChannelLayout::CopyStorage((AUSpatialMixerV2InputElement *)((char *)this + 1536), (const ausdk::AUChannelLayout *)&v140.mChannelDescriptions[0].mCoordinates[1]);
      if ((v17 & 0xFFFEFFFF) == 0)
      {
        v157 = 0;
        v156 = 0;
        v158 = 0;
        v134 = 0;
        v135 = 0;
        v136 = 0;
        *(_QWORD *)v164 = 0;
        v165 = 0;
        v166 = 0;
        GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)buf, *(float **)&v140.mChannelDescriptions[0].mCoordinates[1]);
        *(_QWORD *)&v149.mChannelLayoutTag = &v156;
        *(_QWORD *)&v149.mNumberChannelDescriptions = &v134;
        *(_QWORD *)&v149.mChannelDescriptions[0].mChannelFlags = v164;
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>((void ***)&v149, (uint64_t)buf);
        if (__p)
        {
          v163 = __p;
          operator delete(__p);
        }
        if (*(_QWORD *)&buf[24])
        {
          *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
          operator delete(*(void **)&buf[24]);
        }
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        GetChannelLayoutChannelLabels(&v149, *(int **)&v140.mChannelDescriptions[0].mCoordinates[1]);
        v19 = (v157 - (_BYTE *)v156) >> 2;
        if (v19 != (v135 - (_BYTE *)v134) >> 2)
          goto LABEL_54;
        if (v19 != ((uint64_t)v165 - *(_QWORD *)v164) >> 2)
          goto LABEL_54;
        v20 = *(void **)&v149.mChannelLayoutTag;
        if (v19 != (uint64_t)(*(_QWORD *)&v149.mNumberChannelDescriptions - *(_QWORD *)&v149.mChannelLayoutTag) >> 2)
          goto LABEL_54;
        if (v157 == v156)
        {
          v19 = 0;
          v22 = 0;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = *(_DWORD *)(*(_QWORD *)&v149.mChannelLayoutTag + 4 * v21);
            v24 = v23 > 0x3E || ((0x4000002000000010uLL >> v23) & 1) == 0;
            if (!v24 || *(float *)(*(_QWORD *)v164 + 4 * v21) == 0.0)
              ++v22;
            ++v21;
          }
          while (v19 > v21);
        }
        if (v19 == v22)
        {
LABEL_54:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v25 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v127 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v127 = (_QWORD *)*v127;
            GetStringFromAudioChannelLayoutTag(v154, v17);
            if (v155 >= 0)
              v128 = v154;
            else
              v128 = (void **)v154[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v127;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "InitializeParametricProcessor";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v17;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = v128;
            _os_log_error_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid layout for output channel layout tag = %u (%s); Defaulting to stereo",
              buf,
              0x26u);
            if (v155 < 0)
              operator delete(v154[0]);
          }
          *((_DWORD *)this + 338) = 2;
          std::vector<AudioChannelLayout>::vector(buf, 1uLL);
          v26 = *(_QWORD *)buf;
          **(_QWORD **)buf = 6619138;
          *(_DWORD *)(v26 + 8) = 0;
          ausdk::AUChannelLayout::CopyStorage((AUSpatialMixerV2InputElement *)((char *)this + 1536), (const ausdk::AUChannelLayout *)buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v20 = *(void **)&v149.mChannelLayoutTag;
        }
        if (v20)
        {
          *(_QWORD *)&v149.mNumberChannelDescriptions = v20;
          operator delete(v20);
        }
        if (*(_QWORD *)v164)
        {
          v165 = *(void **)v164;
          operator delete(*(void **)v164);
        }
        if (v134)
        {
          v135 = v134;
          operator delete((void *)v134);
        }
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
      }
      GetChannelLayoutChannelLabels(&v140, *((int **)this + 192));
      v27 = *(unsigned int **)&v140.mChannelLayoutTag;
      if (*(_QWORD *)&v140.mNumberChannelDescriptions != *(_QWORD *)&v140.mChannelLayoutTag)
      {
        v28 = (uint64_t)(*(_QWORD *)&v140.mNumberChannelDescriptions - *(_QWORD *)&v140.mChannelLayoutTag) >> 2;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v29 = *v27++;
          v30 = (0x4000002000000010uLL >> v29) & 1;
          if (v29 <= 0x3E && v30 != 0)
            --*((_DWORD *)this + 338);
          --v28;
        }
        while (v28);
      }
      switch(v8)
      {
        case 1u:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v35 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v130 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v130 = (_QWORD *)*v130;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v130;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "InitializeParametricProcessor";
            _os_log_debug_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in Headphone Rendering Mode", buf, 0x16u);
          }
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(buf, *((_QWORD *)this + 161) + 248);
          v36 = *(const void **)buf;
          if (*(_QWORD *)buf)
          {
            CFRetain(*(CFTypeRef *)buf);
            v37 = v36;
          }
          else
          {
            IR::getPresetDataAttributes();
            v37 = v134;
            v134 = 0;
          }
          v38 = (const void *)*((_QWORD *)this + 182);
          *((_QWORD *)this + 182) = v37;
          if (v38)
            CFRelease(v38);
          if (!v36)
          {
            if (v139)
              CFRelease(v139);
            if (v138)
              CFRelease(v138);
            if (v137)
              CFRelease(v137);
            if (v134)
              CFRelease(v134);
          }
          v39 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2488));
          *((_DWORD *)this + 362) = v39;
          *((_DWORD *)this + 338) = 2;
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          break;
        case 2u:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v34 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v129 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v129 = (_QWORD *)*v129;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v129;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "InitializeParametricProcessor";
            _os_log_debug_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in BuiltInSpeakers Rendering Mode", buf, 0x16u);
          }
          *((_DWORD *)this + 338) = 2;
          break;
        case 3u:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v32 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v33 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v33 = (_QWORD *)*v33;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "InitializeParametricProcessor";
            _os_log_debug_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in External Speakers Rendering Mode", buf, 0x16u);
          }
          break;
      }
      v133[0] = (uint64_t)this + 720;
      v133[1] = (uint64_t)this + 704;
      std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
      v40 = operator new();
      ParametricProcessor::ParametricProcessor((ParametricProcessor *)v40, (AUSpatialMixerV2InputElement *)((char *)this + 1312));
      v42 = *((_QWORD *)this + 31);
      v41 = *((_QWORD *)this + 32);
      v43 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
      if ((a2 & 0xFFFF0000) == 0xBE0000)
        v45 = 1;
      else
        v45 = 2 * ((a2 & 0xFFFF0000) != 12517376);
      v131 = ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)(v43 + 120), v44);
      v132 = *(_DWORD *)(*((_QWORD *)this + 27) + 336);
      *(_DWORD *)(v40 + 356) = v45;
      HOA::HOA((uint64_t)&v156, 1u, *(_DWORD *)(v40 + 216));
      std::vector<float>::vector(v154, 4uLL);
      std::vector<float>::vector(v153, 4uLL);
      if (v154[0])
      {
        v46 = v153[0];
        if (v153[0])
        {
          *(_OWORD *)v154[0] = xmmword_1B66A2BD0;
          *v46 = xmmword_1B66A2BE0;
        }
      }
      HOA::createSphericalGridDecoder((unsigned int *)&v156);
      v150 = 0;
      v151 = 0;
      v152 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v150, v159, v160, (v160 - (uint64_t)v159) >> 2);
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)v164, 4, *(int *)(v40 + 60));
      v47 = 0;
      v48 = 0;
      v49 = (unint64_t)(v41 - v42) >> 3;
      LODWORD(v50) = *(_DWORD *)(v40 + 60);
      v51 = v50;
      do
      {
        if (v51)
        {
          v52 = 0;
          do
          {
            v53 = *(_DWORD *)((char *)v150 + 4 * v52 + v47);
            *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v164, v52++, v48) = v53;
            v50 = *(int *)(v40 + 60);
          }
          while (v52 < v50);
          v51 = *(_DWORD *)(v40 + 60);
        }
        ++v48;
        v47 += 16;
      }
      while (v48 != 4);
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v149, (int)v50, (int)v50);
      bzero(buf, 0x220uLL);
      MoorePenrose::setMandN((MoorePenrose *)buf, 4uLL, *(int *)(v40 + 60));
      MoorePenrose::pseudoInverse((MoorePenrose *)buf, (CLiteMatrix *)&v149, (const CLiteMatrix *)v164);
      v54 = 4 * *(int *)(v40 + 60);
      v148 = 0;
      std::vector<float>::assign((char **)(v40 + 4336), v54, &v148);
      if (*(_DWORD *)(v40 + 60))
      {
        v55 = 0;
        do
        {
          for (i = 0; i != 4; ++i)
          {
            v57 = (_DWORD *)CLiteMatrix::Get((CLiteMatrix *)&v149, v55, i);
            v58 = *(int *)(v40 + 60);
            *(_DWORD *)(*(_QWORD *)(v40 + 4336) + 4 * (i + v55 * v58)) = *v57;
          }
          ++v55;
        }
        while (v55 < v58);
      }
      MoorePenrose::~MoorePenrose((MoorePenrose *)buf);
      if (*(_QWORD *)&v149.mChannelDescriptions[0].mChannelFlags)
      {
        *(_QWORD *)&v149.mChannelDescriptions[0].mCoordinates[1] = *(_QWORD *)&v149.mChannelDescriptions[0].mChannelFlags;
        operator delete(*(void **)&v149.mChannelDescriptions[0].mChannelFlags);
      }
      if (v166)
      {
        v167 = v166;
        operator delete(v166);
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      if (v153[0])
      {
        v153[1] = v153[0];
        operator delete(v153[0]);
      }
      if (v154[0])
      {
        v154[1] = v154[0];
        operator delete(v154[0]);
      }
      HOA::~HOA((HOA *)&v156);
      v59 = *(_DWORD *)(v40 + 40);
      v60 = *(_QWORD *)(v40 + 4256);
      v61 = *(_QWORD *)(v40 + 4248);
      v62 = (afSTFTWrapper *)operator new();
      afSTFTWrapper::afSTFTWrapper(v62, *(_DWORD *)(v40 + 36), v59 + ((unint64_t)(v60 - v61) >> 2), *(_DWORD *)(v40 + 20), *(_DWORD *)(v40 + 32), *(_BYTE *)(v40 + 24), *(unsigned __int8 *)(v40 + 25));
      v63 = *(_QWORD *)(v40 + 432);
      *(_QWORD *)(v40 + 432) = v62;
      if (v63)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        v62 = *(afSTFTWrapper **)(v40 + 432);
      }
      *(_DWORD *)(v40 + 28) = *((_DWORD *)v62 + 2);
      *(_DWORD *)(v40 + 44) = v49;
      v64 = *(_DWORD *)(v40 + 16) + v132;
      *(_DWORD *)(v40 + 392) = v64;
      *(_DWORD *)buf = 0;
      std::vector<float>::assign((char **)(v40 + 248), (v64 * v49), buf);
      v65 = *(unsigned int *)(v40 + 392);
      LODWORD(v156) = 0;
      std::vector<float>::vector(buf, v65, &v156);
      std::vector<std::vector<float>>::assign((uint64_t *)(v40 + 272), v131, (uint64_t)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v66 = *(int *)(v40 + 16);
      LODWORD(v156) = 0;
      std::vector<float>::vector(buf, v66, &v156);
      std::vector<std::vector<float>>::resize((uint64_t *)(v40 + 320), v131, (uint64_t)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v67 = operator new();
      v68 = v67;
      v69 = *(_DWORD *)(v40 + 36);
      v70 = 0x40000000;
      do
      {
        v71 = v70;
        v70 >>= 2;
      }
      while (v71 > v69);
      v72 = 0;
      if (v71)
      {
        do
        {
          v73 = v71 + v72;
          v74 = 2 * v71;
          if (v69 < v71 + v72)
          {
            v73 = 0;
            v74 = 0;
          }
          v69 -= v73;
          v72 = (v74 + v72) >> 1;
          v75 = v71 > 3;
          v71 >>= 2;
        }
        while (v75);
      }
      HOA::RotationMatrix::RotationMatrix(v67, v72 - 1, 0, 0);
      v76 = *(_QWORD *)(v40 + 416);
      *(_QWORD *)(v40 + 416) = v68;
      if (v76)
        std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v76);
      v77 = *(int *)(v40 + 36) * (uint64_t)*(int *)(v40 + 16);
      *(_DWORD *)buf = 0;
      std::vector<float>::assign((char **)(v40 + 360), v77, buf);
      v78 = *(int *)(v40 + 36) * (uint64_t)*(int *)(v40 + 16);
      *(_DWORD *)buf = 0;
      std::vector<float>::assign((char **)(v40 + 296), v78, buf);
      v79 = *(int *)(v40 + 40);
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 456) = *(_OWORD *)buf;
      v80 = *(void **)(v40 + 472);
      if (v80)
      {
        *(_QWORD *)(v40 + 480) = v80;
        operator delete(v80);
      }
      *(_OWORD *)(v40 + 472) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 488) = *(_QWORD *)&buf[32];
      CLiteMatrix::Eye((CLiteMatrix *)buf, v79);
      *(_OWORD *)(v40 + 496) = *(_OWORD *)buf;
      v81 = *(void **)(v40 + 512);
      if (v81)
      {
        *(_QWORD *)(v40 + 520) = v81;
        operator delete(v81);
      }
      *(_OWORD *)(v40 + 512) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 528) = *(_QWORD *)&buf[32];
      std::vector<float>::vector(buf, v79);
      v82 = *(void **)(v40 + 536);
      if (v82)
      {
        *(_QWORD *)(v40 + 544) = v82;
        operator delete(v82);
      }
      *(_OWORD *)(v40 + 536) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 552) = *(_QWORD *)&buf[16];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 560) = *(_OWORD *)buf;
      v83 = *(void **)(v40 + 576);
      if (v83)
      {
        *(_QWORD *)(v40 + 584) = v83;
        operator delete(v83);
      }
      *(_OWORD *)(v40 + 576) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 592) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 600) = *(_OWORD *)buf;
      v84 = *(void **)(v40 + 616);
      if (v84)
      {
        *(_QWORD *)(v40 + 624) = v84;
        operator delete(v84);
      }
      *(_OWORD *)(v40 + 616) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 632) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 640) = *(_OWORD *)buf;
      v85 = *(void **)(v40 + 656);
      if (v85)
      {
        *(_QWORD *)(v40 + 664) = v85;
        operator delete(v85);
      }
      *(_OWORD *)(v40 + 656) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 672) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 680) = *(_OWORD *)buf;
      v86 = *(void **)(v40 + 696);
      if (v86)
      {
        *(_QWORD *)(v40 + 704) = v86;
        operator delete(v86);
      }
      *(_OWORD *)(v40 + 696) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 712) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 720) = *(_OWORD *)buf;
      v87 = *(void **)(v40 + 736);
      if (v87)
      {
        *(_QWORD *)(v40 + 744) = v87;
        operator delete(v87);
      }
      *(_OWORD *)(v40 + 736) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 752) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 760) = *(_OWORD *)buf;
      v88 = *(void **)(v40 + 776);
      if (v88)
      {
        *(_QWORD *)(v40 + 784) = v88;
        operator delete(v88);
      }
      *(_OWORD *)(v40 + 776) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 792) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 800) = *(_OWORD *)buf;
      v89 = *(void **)(v40 + 816);
      if (v89)
      {
        *(_QWORD *)(v40 + 824) = v89;
        operator delete(v89);
      }
      *(_OWORD *)(v40 + 816) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 832) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 840) = *(_OWORD *)buf;
      v90 = *(void **)(v40 + 856);
      if (v90)
      {
        *(_QWORD *)(v40 + 864) = v90;
        operator delete(v90);
      }
      *(_OWORD *)(v40 + 856) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 872) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 880) = *(_OWORD *)buf;
      v91 = *(void **)(v40 + 896);
      if (v91)
      {
        *(_QWORD *)(v40 + 904) = v91;
        operator delete(v91);
      }
      *(_OWORD *)(v40 + 896) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 912) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 960) = *(_OWORD *)buf;
      v92 = *(void **)(v40 + 976);
      if (v92)
      {
        *(_QWORD *)(v40 + 984) = v92;
        operator delete(v92);
      }
      *(_OWORD *)(v40 + 976) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 992) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1000) = *(_OWORD *)buf;
      v93 = *(void **)(v40 + 1016);
      if (v93)
      {
        *(_QWORD *)(v40 + 1024) = v93;
        operator delete(v93);
      }
      *(_OWORD *)(v40 + 1016) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1032) = *(_QWORD *)&buf[32];
      std::vector<float>::vector(buf, v79);
      v94 = *(void **)(v40 + 1040);
      if (v94)
      {
        *(_QWORD *)(v40 + 1048) = v94;
        operator delete(v94);
      }
      *(_OWORD *)(v40 + 1040) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 1056) = *(_QWORD *)&buf[16];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1064) = *(_OWORD *)buf;
      v95 = *(void **)(v40 + 1080);
      if (v95)
      {
        *(_QWORD *)(v40 + 1088) = v95;
        operator delete(v95);
      }
      *(_OWORD *)(v40 + 1080) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1096) = *(_QWORD *)&buf[32];
      std::vector<float>::vector(buf, v79);
      v96 = *(void **)(v40 + 1104);
      if (v96)
      {
        *(_QWORD *)(v40 + 1112) = v96;
        operator delete(v96);
      }
      *(_OWORD *)(v40 + 1104) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 1120) = *(_QWORD *)&buf[16];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1128) = *(_OWORD *)buf;
      v97 = *(void **)(v40 + 1144);
      if (v97)
      {
        *(_QWORD *)(v40 + 1152) = v97;
        operator delete(v97);
      }
      *(_OWORD *)(v40 + 1144) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1160) = *(_QWORD *)&buf[32];
      std::vector<float>::vector(buf, v79);
      v98 = *(void **)(v40 + 1168);
      if (v98)
      {
        *(_QWORD *)(v40 + 1176) = v98;
        operator delete(v98);
      }
      *(_OWORD *)(v40 + 1168) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 1184) = *(_QWORD *)&buf[16];
      std::vector<float>::vector(buf, v79);
      v99 = *(void **)(v40 + 1192);
      if (v99)
      {
        *(_QWORD *)(v40 + 1200) = v99;
        operator delete(v99);
      }
      *(_OWORD *)(v40 + 1192) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 1208) = *(_QWORD *)&buf[16];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1216) = *(_OWORD *)buf;
      v100 = *(void **)(v40 + 1232);
      if (v100)
      {
        *(_QWORD *)(v40 + 1240) = v100;
        operator delete(v100);
      }
      *(_OWORD *)(v40 + 1232) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1248) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1256) = *(_OWORD *)buf;
      v101 = *(void **)(v40 + 1272);
      if (v101)
      {
        *(_QWORD *)(v40 + 1280) = v101;
        operator delete(v101);
      }
      *(_OWORD *)(v40 + 1272) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1288) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1296) = *(_OWORD *)buf;
      v102 = *(void **)(v40 + 1312);
      if (v102)
      {
        *(_QWORD *)(v40 + 1320) = v102;
        operator delete(v102);
      }
      *(_OWORD *)(v40 + 1312) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1328) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1336) = *(_OWORD *)buf;
      v103 = *(void **)(v40 + 1352);
      if (v103)
      {
        *(_QWORD *)(v40 + 1360) = v103;
        operator delete(v103);
      }
      *(_OWORD *)(v40 + 1352) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1368) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1376) = *(_OWORD *)buf;
      v104 = *(void **)(v40 + 1392);
      if (v104)
      {
        *(_QWORD *)(v40 + 1400) = v104;
        operator delete(v104);
      }
      *(_OWORD *)(v40 + 1392) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1408) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1416) = *(_OWORD *)buf;
      v105 = *(void **)(v40 + 1432);
      if (v105)
      {
        *(_QWORD *)(v40 + 1440) = v105;
        operator delete(v105);
      }
      *(_OWORD *)(v40 + 1432) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1448) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1456) = *(_OWORD *)buf;
      v106 = *(void **)(v40 + 1472);
      if (v106)
      {
        *(_QWORD *)(v40 + 1480) = v106;
        operator delete(v106);
      }
      *(_OWORD *)(v40 + 1472) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1488) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1496) = *(_OWORD *)buf;
      v107 = *(void **)(v40 + 1512);
      if (v107)
      {
        *(_QWORD *)(v40 + 1520) = v107;
        operator delete(v107);
      }
      *(_OWORD *)(v40 + 1512) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1528) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1536) = *(_OWORD *)buf;
      v108 = *(void **)(v40 + 1552);
      if (v108)
      {
        *(_QWORD *)(v40 + 1560) = v108;
        operator delete(v108);
      }
      *(_OWORD *)(v40 + 1552) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1568) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1576) = *(_OWORD *)buf;
      v109 = *(void **)(v40 + 1592);
      if (v109)
      {
        *(_QWORD *)(v40 + 1600) = v109;
        operator delete(v109);
      }
      *(_OWORD *)(v40 + 1592) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1608) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1616) = *(_OWORD *)buf;
      v110 = *(void **)(v40 + 1632);
      if (v110)
      {
        *(_QWORD *)(v40 + 1640) = v110;
        operator delete(v110);
      }
      *(_OWORD *)(v40 + 1632) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1648) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1656) = *(_OWORD *)buf;
      v111 = *(void **)(v40 + 1672);
      if (v111)
      {
        *(_QWORD *)(v40 + 1680) = v111;
        operator delete(v111);
      }
      *(_OWORD *)(v40 + 1672) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1688) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1696) = *(_OWORD *)buf;
      v112 = *(void **)(v40 + 1712);
      if (v112)
      {
        *(_QWORD *)(v40 + 1720) = v112;
        operator delete(v112);
      }
      *(_OWORD *)(v40 + 1712) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1728) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1736) = *(_OWORD *)buf;
      v113 = *(void **)(v40 + 1752);
      if (v113)
      {
        *(_QWORD *)(v40 + 1760) = v113;
        operator delete(v113);
      }
      *(_OWORD *)(v40 + 1752) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1768) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1776) = *(_OWORD *)buf;
      v114 = *(void **)(v40 + 1792);
      if (v114)
      {
        *(_QWORD *)(v40 + 1800) = v114;
        operator delete(v114);
      }
      *(_OWORD *)(v40 + 1792) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1808) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1816) = *(_OWORD *)buf;
      v115 = *(void **)(v40 + 1832);
      if (v115)
      {
        *(_QWORD *)(v40 + 1840) = v115;
        operator delete(v115);
      }
      *(_OWORD *)(v40 + 1832) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1848) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1856) = *(_OWORD *)buf;
      v116 = *(void **)(v40 + 1872);
      if (v116)
      {
        *(_QWORD *)(v40 + 1880) = v116;
        operator delete(v116);
      }
      *(_OWORD *)(v40 + 1872) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1888) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1896) = *(_OWORD *)buf;
      v117 = *(void **)(v40 + 1912);
      if (v117)
      {
        *(_QWORD *)(v40 + 1920) = v117;
        operator delete(v117);
      }
      *(_OWORD *)(v40 + 1912) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1928) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1936) = *(_OWORD *)buf;
      v118 = *(void **)(v40 + 1952);
      if (v118)
      {
        *(_QWORD *)(v40 + 1960) = v118;
        operator delete(v118);
      }
      *(_OWORD *)(v40 + 1952) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 1968) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 1976) = *(_OWORD *)buf;
      v119 = *(void **)(v40 + 1992);
      if (v119)
      {
        *(_QWORD *)(v40 + 2000) = v119;
        operator delete(v119);
      }
      *(_OWORD *)(v40 + 1992) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 2008) = *(_QWORD *)&buf[32];
      CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v79, v79);
      *(_OWORD *)(v40 + 2016) = *(_OWORD *)buf;
      v120 = *(void **)(v40 + 2032);
      if (v120)
      {
        *(_QWORD *)(v40 + 2040) = v120;
        operator delete(v120);
      }
      *(_OWORD *)(v40 + 2032) = *(_OWORD *)&buf[16];
      *(_QWORD *)(v40 + 2048) = *(_QWORD *)&buf[32];
      std::vector<float>::vector(buf, v79);
      v121 = *(void **)(v40 + 2056);
      if (v121)
      {
        *(_QWORD *)(v40 + 2064) = v121;
        operator delete(v121);
      }
      *(_OWORD *)(v40 + 2056) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 2072) = *(_QWORD *)&buf[16];
      std::vector<float>::vector(buf, v79);
      v122 = *(void **)(v40 + 2080);
      if (v122)
      {
        *(_QWORD *)(v40 + 2088) = v122;
        operator delete(v122);
      }
      *(_OWORD *)(v40 + 2080) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 2096) = *(_QWORD *)&buf[16];
      std::vector<float>::vector(buf, v79);
      v123 = *(void **)(v40 + 2104);
      if (v123)
      {
        *(_QWORD *)(v40 + 2112) = v123;
        operator delete(v123);
      }
      *(_OWORD *)(v40 + 2104) = *(_OWORD *)buf;
      *(_QWORD *)(v40 + 2120) = *(_QWORD *)&buf[16];
      MatrixDecompositions::setMandN((MatrixDecompositions *)(v40 + 2128), v79, v79);
      *(_DWORD *)(v40 + 388) = 0;
      *(_QWORD *)(v40 + 344) = 0;
      *(_DWORD *)(v40 + 352) = *(_DWORD *)(v40 + 16);
      v124 = (ParametricProcessor *)*((_QWORD *)this + 163);
      *((_QWORD *)this + 163) = v40;
      if (v124)
      {
        ParametricProcessor::~ParametricProcessor(v124);
        MEMORY[0x1BCC95CEC]();
      }
      v125 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
      v126 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
      while (v125 != v126)
        AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(*v125++, *((_DWORD *)this + 332));
      std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v133);
      if (*(_QWORD *)&v140.mChannelLayoutTag)
      {
        *(_QWORD *)&v140.mNumberChannelDescriptions = *(_QWORD *)&v140.mChannelLayoutTag;
        operator delete(*(void **)&v140.mChannelLayoutTag);
      }
      if (*(_QWORD *)&v140.mChannelDescriptions[0].mCoordinates[1])
      {
        v141 = *(_QWORD *)&v140.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v140.mChannelDescriptions[0].mCoordinates[1]);
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t AUSpatialMixerV2::MaxFramesForInputSampleRate(AUSpatialMixerV2 *this, double a2)
{
  double v4;
  uint64_t result;

  v4 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
  result = *((unsigned int *)this + 84);
  if (v4 != a2)
    return ((double)result * a2 / v4 + 15.0) & 0xFFFFFFF0;
  return result;
}

void std::make_unique[abi:ne180100]<ScottyLite,unsigned int &,unsigned int &,std::string &>(uint64_t *a1, unsigned int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64x2_t v21;
  uint64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float v31;
  float v32;
  NSObject *v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  NSObject *v46;
  uint64_t v47;
  uint64_t j;
  uint64_t k;
  uint64_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  int64x2_t v53;
  uint64x2_t v54;
  float64x2_t __x;
  long double v56;
  int32x2_t v57;
  int64x2_t v58;
  std::string v59;
  MultiRadixRealFFT *v60;
  uint8_t buf[4];
  uint64_t v62;
  __int16 v63;
  const char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = *a2;
  v10 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v59 = *(std::string *)a4;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  v11 = v8 + 616;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(_OWORD *)(v8 + 696) = 0u;
  *(_OWORD *)(v8 + 712) = 0u;
  *(_OWORD *)(v8 + 728) = 0u;
  *(_QWORD *)(v8 + 744) = 0x80000000400;
  *(_DWORD *)(v8 + 752) = v10;
  *(_BYTE *)(v8 + 756) = 0;
  v12 = (_OWORD *)(v8 + 760);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 760), v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else
  {
    *v12 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *(_QWORD *)(v8 + 776) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
  }
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v13 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v14 = v8 + 760;
    if (*(char *)(v8 + 783) < 0)
      v14 = *(_QWORD *)v12;
    *(_DWORD *)buf = 136315394;
    v62 = v14;
    v63 = 2080;
    v64 = "ScottyLite";
    _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "[%s|%s] Constructing", buf, 0x16u);
    v15 = getScottyLog(void)::onceToken;
  }
  else
  {
    v15 = -1;
  }
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_DWORD *)(v8 + 748) = v9;
  *(_DWORD *)(v8 + 744) = v9 >> 1;
  if (v15 != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v16 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v17 = v8 + 760;
    if (*(char *)(v8 + 783) < 0)
      v17 = *(_QWORD *)v12;
    *(_DWORD *)buf = 136315394;
    v62 = v17;
    v63 = 2080;
    v64 = "Initialize";
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing ScottyLite", buf, 0x16u);
  }
  v50 = (uint64_t *)(v8 + 760);
  *(_BYTE *)(v8 + 756) = 0;
  std::vector<float>::resize(v8, *(unsigned int *)(v8 + 748));
  v18 = *(_QWORD *)v8;
  v19 = *(unsigned int *)(v8 + 748);
  if (*(_QWORD *)v8 && (_DWORD)v19)
  {
    v20 = 0;
    v54 = (uint64x2_t)vdupq_n_s64(v19 - 1);
    v21 = (uint64x2_t)xmmword_1B6626830;
    __asm { FMOV            V0.2D, #-0.5 }
    v52 = _Q0;
    v53 = vdupq_n_s64(2uLL);
    __asm { FMOV            V0.2D, #0.5 }
    v51 = _Q0;
    do
    {
      v57 = vmovn_s64((int64x2_t)vcgeq_u64(v54, v21));
      v58 = (int64x2_t)v21;
      v28.i64[0] = v20;
      v28.i64[1] = (v20 + 1);
      __x = vmulq_n_f64(vcvtq_f64_u64(v28), 6.28318531 / (double)v19);
      v56 = cos(__x.f64[1]);
      v29.f64[0] = cos(__x.f64[0]);
      v29.f64[1] = v56;
      v30 = vsqrtq_f64(vmlaq_f64(v51, v52, v29));
      if ((v57.i8[0] & 1) != 0)
      {
        v31 = v30.f64[0];
        *(float *)(v18 + 4 * v20) = v31;
      }
      if ((v57.i8[4] & 1) != 0)
      {
        v32 = v30.f64[1];
        *(float *)(v18 + 4 * v20 + 4) = v32;
      }
      v20 += 2;
      v21 = (uint64x2_t)vaddq_s64(v58, v53);
    }
    while (((v19 + 1) & 0x1FFFFFFFELL) != v20);
  }
  v60 = 0;
  if (MultiRadixRealFFT_Create(v19, &v60))
  {
    ScottyLite::UnInitialize((ScottyLite *)v8);
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v33 = getScottyLog(void)::gLog;
    v34 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR);
    v35 = v8 + 760;
    if (v34)
    {
      if (*(char *)(v8 + 783) < 0)
        v35 = *v50;
      *(_DWORD *)buf = 136315394;
      v62 = v35;
      v63 = 2080;
      v64 = "Initialize";
      _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "[%s|%s] Error in initialization", buf, 0x16u);
    }
  }
  else
  {
    v36 = *(_QWORD *)(v8 + 464);
    *(_QWORD *)(v8 + 464) = v60;
    if (v36)
      MultiRadixFFT_Dispose(v36);
    std::vector<float>::resize(v8 + 440, *(unsigned int *)(v8 + 748));
    std::vector<float>::resize(v8 + 24, *(unsigned int *)(v8 + 748));
    std::vector<float>::resize(v8 + 616, *(unsigned int *)(v8 + 748));
    std::vector<float>::resize(v8 + 48, *(unsigned int *)(v8 + 748));
    std::vector<float>::resize(v8 + 640, *(unsigned int *)(v8 + 748));
    v37 = 0;
    v38 = v8 + 664;
    v39 = 568;
    do
    {
      std::vector<float>::resize(v8 + v37 + 72, *(unsigned int *)(v8 + 748));
      std::vector<float>::resize(v8 + v37 + 288, *(unsigned int *)(v8 + 744));
      std::vector<float>::resize(v8 + v37 + 360, *(unsigned int *)(v8 + 744));
      v40 = *(_QWORD *)(v8 + v37 + 360);
      v41 = (_QWORD *)(v8 + v39);
      *v41 = *(_QWORD *)(v8 + v37 + 288);
      v41[1] = v40;
      v42 = *(_DWORD *)(v8 + 752);
      if (v42 <= *(_DWORD *)(v8 + 744))
        v42 = *(_DWORD *)(v8 + 744);
      std::vector<float>::resize(v8 + v37 + 664, 2 * v42);
      v37 += 24;
      v39 += 16;
    }
    while (v37 != 72);
    v43 = 0;
    v44 = v8 + 144;
    do
    {
      std::vector<float>::resize(v44 + v43, *(unsigned int *)(v8 + 744));
      v43 += 24;
    }
    while (v43 != 144);
    for (i = 0; i != 96; i += 24)
      std::vector<double>::resize(v8 + 472 + i, *(unsigned int *)(v8 + 744));
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v46 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v47 = v8 + 760;
      if (*(char *)(v8 + 783) < 0)
        v47 = *v50;
      *(_DWORD *)buf = 136315394;
      v62 = v47;
      v63 = 2080;
      v64 = "Reset";
      _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting ScottyLite", buf, 0x16u);
    }
    vDSP_vclr(*(float **)(v8 + 24), 1, *(unsigned int *)(v8 + 748));
    vDSP_vclr(*(float **)(v8 + 48), 1, *(unsigned int *)(v8 + 748));
    for (j = 0; j != 72; j += 24)
    {
      vDSP_vclr(*(float **)(v8 + j + 72), 1, *(unsigned int *)(v8 + 748));
      vDSP_vclr(*(float **)(v8 + j + 288), 1, *(unsigned int *)(v8 + 744));
      vDSP_vclr(*(float **)(v8 + j + 360), 1, *(unsigned int *)(v8 + 744));
    }
    vDSP_vclr((float *)(v8 + 432), 1, 2uLL);
    vDSP_vclr(*(float **)(v8 + 440), 1, *(unsigned int *)(v8 + 748));
    for (k = 0; k != 144; k += 24)
      vDSP_vclr(*(float **)(v44 + k), 1, *(unsigned int *)(v8 + 744));
    do
    {
      vDSP_vclr(*(float **)v11, 1, (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2);
      v11 += 24;
    }
    while (v11 != v38);
    do
    {
      vDSP_vclr(*(float **)v38, 1, (uint64_t)(*(_QWORD *)(v38 + 8) - *(_QWORD *)v38) >> 2);
      v38 += 24;
    }
    while (v38 != v8 + 736);
    *(_DWORD *)(v8 + 736) = 0;
    *(_DWORD *)(v8 + 740) = *(_DWORD *)(v8 + 744);
    *(_BYTE *)(v8 + 756) = 1;
  }
  *a1 = v8;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_1B630CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  ScottyLite::STFT_state_t *v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;

  v37 = 0;
  while (1)
  {
    v38 = *(void **)(v34 + v37 + 712);
    if (v38)
    {
      *(_QWORD *)(v34 + v37 + 720) = v38;
      operator delete(v38);
    }
    v37 -= 24;
    if (v37 == -72)
    {
      v39 = 0;
      while (1)
      {
        v40 = *(void **)(v34 + v39 + 640);
        if (v40)
        {
          *(_QWORD *)(v34 + v39 + 648) = v40;
          operator delete(v40);
        }
        v39 -= 24;
        if (v39 == -48)
        {
          v41 = 0;
          while (1)
          {
            v42 = *(void **)(v34 + v41 + 544);
            if (v42)
            {
              *(_QWORD *)(v34 + v41 + 552) = v42;
              operator delete(v42);
            }
            v41 -= 24;
            if (v41 == -96)
            {
              v43 = *(_QWORD *)(v34 + 464);
              *(_QWORD *)(v34 + 464) = 0;
              if (v43)
                MultiRadixFFT_Dispose(v43);
              ScottyLite::STFT_state_t::~STFT_state_t(v35);
              v44 = *(void **)v34;
              if (*(_QWORD *)v34)
              {
                *(_QWORD *)(v34 + 8) = v44;
                operator delete(v44);
              }
              if (a34 < 0)
                operator delete(__p);
              MEMORY[0x1BCC95CEC](v34, 0x1092C40F99F0848);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

uint64_t *std::unique_ptr<ScottyLite>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v3 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v2 + 760);
      if (*(char *)(v2 + 783) < 0)
        v4 = (_QWORD *)*v4;
      v13 = 136315394;
      v14 = v4;
      v15 = 2080;
      v16 = "~ScottyLite";
      _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "[%s|%s] Destructing", (uint8_t *)&v13, 0x16u);
    }
    ScottyLite::UnInitialize((ScottyLite *)v2);
    if (*(char *)(v2 + 783) < 0)
      operator delete(*(void **)(v2 + 760));
    v5 = 0;
    while (1)
    {
      v6 = *(void **)(v2 + v5 + 712);
      if (v6)
      {
        *(_QWORD *)(v2 + v5 + 720) = v6;
        operator delete(v6);
      }
      v5 -= 24;
      if (v5 == -72)
      {
        v7 = 0;
        while (1)
        {
          v8 = *(void **)(v2 + v7 + 640);
          if (v8)
          {
            *(_QWORD *)(v2 + v7 + 648) = v8;
            operator delete(v8);
          }
          v7 -= 24;
          if (v7 == -48)
          {
            v9 = 0;
            while (1)
            {
              v10 = *(void **)(v2 + v9 + 544);
              if (v10)
              {
                *(_QWORD *)(v2 + v9 + 552) = v10;
                operator delete(v10);
              }
              v9 -= 24;
              if (v9 == -96)
              {
                v11 = *(_QWORD *)(v2 + 464);
                *(_QWORD *)(v2 + 464) = 0;
                if (v11)
                  MultiRadixFFT_Dispose(v11);
                ScottyLite::STFT_state_t::~STFT_state_t((ScottyLite::STFT_state_t *)(v2 + 24));
                v12 = *(void **)v2;
                if (*(_QWORD *)v2)
                {
                  *(_QWORD *)(v2 + 8) = v12;
                  operator delete(v12);
                }
                JUMPOUT(0x1BCC95CECLL);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B630CD50(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = result;
  v3 = (_QWORD *)result[1];
  while (v3 != a2)
  {
    v4 = (_QWORD *)*--v3;
    result = v4;
    *v3 = 0;
    if (v4)
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](result);
  }
  v2[1] = a2;
  return result;
}

void std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 > v5)
  {
    v6 = a2 - v5;
    v7 = *(_QWORD *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*(void **)(a1 + 8), 8 * v6);
      *(_QWORD *)(a1 + 8) = &v3[v6];
      return;
    }
    if (a2 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = v7 - (_QWORD)v4;
    v9 = v8 >> 2;
    if (v8 >> 2 <= a2)
      v9 = a2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(8 * v10);
    v12 = &v11[8 * v5];
    v13 = &v11[8 * v10];
    bzero(v12, 8 * v6);
    v14 = &v12[8 * v6];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v15 = *--v3;
        *v3 = 0;
        *((_QWORD *)v12 - 1) = v15;
        v12 -= 8;
      }
      while (v3 != v4);
      v16 = *(_QWORD **)a1;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
      if (v3 != v16)
      {
        do
        {
          v18 = (_QWORD *)*--v3;
          v17 = v18;
          *v3 = 0;
          if (v18)
            std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v17);
        }
        while (v3 != v16);
        v3 = v16;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v19 = &v4[a2];
    while (v3 != v19)
    {
      v21 = (_QWORD *)*--v3;
      v20 = v21;
      *v3 = 0;
      if (v21)
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v20);
    }
    *(_QWORD *)(a1 + 8) = v19;
  }
}

ParametricProcessor *AUSpatialMixerV2InputElement::DestroyParametricProcessors(ParametricProcessor **this)
{
  ParametricProcessor *result;
  ParametricProcessor *v3;
  ParametricProcessor *v4;

  result = std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](this + 163, 0);
  v4 = this[31];
  v3 = this[32];
  while (v4 != v3)
  {
    result = *(ParametricProcessor **)(*(_QWORD *)v4 + 864);
    *(_QWORD *)(*(_QWORD *)v4 + 864) = 0;
    if (result)
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](result);
    v4 = (ParametricProcessor *)((char *)v4 + 8);
  }
  return result;
}

void ParametricProcessor::~ParametricProcessor(ParametricProcessor *this)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  const void *v113;
  const void *v114;
  void **v115;

  v2 = (void *)*((_QWORD *)this + 1071);
  if (v2)
  {
    *((_QWORD *)this + 1072) = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 1070);
  *((_QWORD *)this + 1070) = 0;
  if (v3)
    std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](v3);
  v4 = (void *)*((_QWORD *)this + 1067);
  if (v4)
  {
    *((_QWORD *)this + 1068) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1064);
  if (v5)
  {
    *((_QWORD *)this + 1065) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1059);
  if (v6)
  {
    *((_QWORD *)this + 1060) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1054);
  if (v7)
  {
    *((_QWORD *)this + 1055) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1049);
  if (v8)
  {
    *((_QWORD *)this + 1050) = v8;
    operator delete(v8);
  }
  v115 = (void **)((char *)this + 8352);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 8328);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 8304);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 8280);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v9 = (void *)*((_QWORD *)this + 1032);
  if (v9)
  {
    *((_QWORD *)this + 1033) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1027);
  if (v10)
  {
    *((_QWORD *)this + 1028) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 1022);
  if (v11)
  {
    *((_QWORD *)this + 1023) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 1017);
  if (v12)
  {
    *((_QWORD *)this + 1018) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 1012);
  if (v13)
  {
    *((_QWORD *)this + 1013) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 1007);
  if (v14)
  {
    *((_QWORD *)this + 1008) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 1002);
  if (v15)
  {
    *((_QWORD *)this + 1003) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 997);
  if (v16)
  {
    *((_QWORD *)this + 998) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 992);
  if (v17)
  {
    *((_QWORD *)this + 993) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 987);
  if (v18)
  {
    *((_QWORD *)this + 988) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 982);
  if (v19)
  {
    *((_QWORD *)this + 983) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 977);
  if (v20)
  {
    *((_QWORD *)this + 978) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 972);
  if (v21)
  {
    *((_QWORD *)this + 973) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 967);
  if (v22)
  {
    *((_QWORD *)this + 968) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 962);
  if (v23)
  {
    *((_QWORD *)this + 963) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 957);
  if (v24)
  {
    *((_QWORD *)this + 958) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 952);
  if (v25)
  {
    *((_QWORD *)this + 953) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 947);
  if (v26)
  {
    *((_QWORD *)this + 948) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 942);
  if (v27)
  {
    *((_QWORD *)this + 943) = v27;
    operator delete(v27);
  }
  v115 = (void **)((char *)this + 7496);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 7472);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v28 = (void *)*((_QWORD *)this + 931);
  if (v28)
  {
    *((_QWORD *)this + 932) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 926);
  if (v29)
  {
    *((_QWORD *)this + 927) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 921);
  if (v30)
  {
    *((_QWORD *)this + 922) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 916);
  if (v31)
  {
    *((_QWORD *)this + 917) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 911);
  if (v32)
  {
    *((_QWORD *)this + 912) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 906);
  if (v33)
  {
    *((_QWORD *)this + 907) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 901);
  if (v34)
  {
    *((_QWORD *)this + 902) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 896);
  if (v35)
  {
    *((_QWORD *)this + 897) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 891);
  if (v36)
  {
    *((_QWORD *)this + 892) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 886);
  if (v37)
  {
    *((_QWORD *)this + 887) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 881);
  if (v38)
  {
    *((_QWORD *)this + 882) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 876);
  if (v39)
  {
    *((_QWORD *)this + 877) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 871);
  if (v40)
  {
    *((_QWORD *)this + 872) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 866);
  if (v41)
  {
    *((_QWORD *)this + 867) = v41;
    operator delete(v41);
  }
  v115 = (void **)((char *)this + 6904);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v42 = (void *)*((_QWORD *)this + 860);
  if (v42)
  {
    *((_QWORD *)this + 861) = v42;
    operator delete(v42);
  }
  v115 = (void **)((char *)this + 6840);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6816);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6792);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6768);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v43 = (void *)*((_QWORD *)this + 843);
  if (v43)
  {
    *((_QWORD *)this + 844) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 838);
  if (v44)
  {
    *((_QWORD *)this + 839) = v44;
    operator delete(v44);
  }
  v115 = (void **)((char *)this + 6664);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6640);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6616);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v115 = (void **)((char *)this + 6592);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v45 = (void *)*((_QWORD *)this + 821);
  if (v45)
  {
    *((_QWORD *)this + 822) = v45;
    operator delete(v45);
  }
  v115 = (void **)((char *)this + 6528);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v46 = (void *)*((_QWORD *)this + 813);
  if (v46)
  {
    *((_QWORD *)this + 814) = v46;
    operator delete(v46);
  }
  v115 = (void **)((char *)this + 6464);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v47 = (void *)*((_QWORD *)this + 805);
  if (v47)
  {
    *((_QWORD *)this + 806) = v47;
    operator delete(v47);
  }
  v48 = (void *)*((_QWORD *)this + 800);
  if (v48)
  {
    *((_QWORD *)this + 801) = v48;
    operator delete(v48);
  }
  v49 = (void *)*((_QWORD *)this + 795);
  if (v49)
  {
    *((_QWORD *)this + 796) = v49;
    operator delete(v49);
  }
  v50 = (void *)*((_QWORD *)this + 790);
  if (v50)
  {
    *((_QWORD *)this + 791) = v50;
    operator delete(v50);
  }
  v51 = (void *)*((_QWORD *)this + 787);
  if (v51)
  {
    *((_QWORD *)this + 788) = v51;
    operator delete(v51);
  }
  v52 = (void *)*((_QWORD *)this + 782);
  if (v52)
  {
    *((_QWORD *)this + 783) = v52;
    operator delete(v52);
  }
  v53 = (void *)*((_QWORD *)this + 777);
  if (v53)
  {
    *((_QWORD *)this + 778) = v53;
    operator delete(v53);
  }
  v54 = (void *)*((_QWORD *)this + 772);
  if (v54)
  {
    *((_QWORD *)this + 773) = v54;
    operator delete(v54);
  }
  v55 = (void *)*((_QWORD *)this + 767);
  if (v55)
  {
    *((_QWORD *)this + 768) = v55;
    operator delete(v55);
  }
  v56 = (void *)*((_QWORD *)this + 762);
  if (v56)
  {
    *((_QWORD *)this + 763) = v56;
    operator delete(v56);
  }
  v57 = (void *)*((_QWORD *)this + 757);
  if (v57)
  {
    *((_QWORD *)this + 758) = v57;
    operator delete(v57);
  }
  v58 = (void *)*((_QWORD *)this + 752);
  if (v58)
  {
    *((_QWORD *)this + 753) = v58;
    operator delete(v58);
  }
  v59 = (void *)*((_QWORD *)this + 747);
  if (v59)
  {
    *((_QWORD *)this + 748) = v59;
    operator delete(v59);
  }
  v60 = (void *)*((_QWORD *)this + 742);
  if (v60)
  {
    *((_QWORD *)this + 743) = v60;
    operator delete(v60);
  }
  v61 = (void *)*((_QWORD *)this + 737);
  if (v61)
  {
    *((_QWORD *)this + 738) = v61;
    operator delete(v61);
  }
  v62 = (void *)*((_QWORD *)this + 732);
  if (v62)
  {
    *((_QWORD *)this + 733) = v62;
    operator delete(v62);
  }
  v63 = (void *)*((_QWORD *)this + 727);
  if (v63)
  {
    *((_QWORD *)this + 728) = v63;
    operator delete(v63);
  }
  v64 = (void *)*((_QWORD *)this + 722);
  if (v64)
  {
    *((_QWORD *)this + 723) = v64;
    operator delete(v64);
  }
  v65 = (void *)*((_QWORD *)this + 717);
  if (v65)
  {
    *((_QWORD *)this + 718) = v65;
    operator delete(v65);
  }
  v115 = (void **)((char *)this + 5696);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  v66 = (void *)*((_QWORD *)this + 709);
  if (v66)
  {
    *((_QWORD *)this + 710) = v66;
    operator delete(v66);
  }
  v67 = (void *)*((_QWORD *)this + 704);
  if (v67)
  {
    *((_QWORD *)this + 705) = v67;
    operator delete(v67);
  }
  v68 = (void *)*((_QWORD *)this + 699);
  if (v68)
  {
    *((_QWORD *)this + 700) = v68;
    operator delete(v68);
  }
  v69 = (void *)*((_QWORD *)this + 694);
  if (v69)
  {
    *((_QWORD *)this + 695) = v69;
    operator delete(v69);
  }
  v70 = (void *)*((_QWORD *)this + 689);
  if (v70)
  {
    *((_QWORD *)this + 690) = v70;
    operator delete(v70);
  }
  v71 = (void *)*((_QWORD *)this + 684);
  if (v71)
  {
    *((_QWORD *)this + 685) = v71;
    operator delete(v71);
  }
  v72 = (void *)*((_QWORD *)this + 679);
  if (v72)
  {
    *((_QWORD *)this + 680) = v72;
    operator delete(v72);
  }
  v73 = (void *)*((_QWORD *)this + 674);
  if (v73)
  {
    *((_QWORD *)this + 675) = v73;
    operator delete(v73);
  }
  v74 = (void *)*((_QWORD *)this + 669);
  if (v74)
  {
    *((_QWORD *)this + 670) = v74;
    operator delete(v74);
  }
  v115 = (void **)((char *)this + 5312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  v75 = (void *)*((_QWORD *)this + 660);
  if (v75)
  {
    *((_QWORD *)this + 661) = v75;
    operator delete(v75);
  }
  v76 = (void *)*((_QWORD *)this + 656);
  if (v76)
  {
    *((_QWORD *)this + 657) = v76;
    operator delete(v76);
  }
  v77 = (void *)*((_QWORD *)this + 653);
  if (v77)
  {
    *((_QWORD *)this + 654) = v77;
    operator delete(v77);
  }
  v78 = (void *)*((_QWORD *)this + 650);
  if (v78)
  {
    *((_QWORD *)this + 651) = v78;
    operator delete(v78);
  }
  v79 = (void *)*((_QWORD *)this + 647);
  if (v79)
  {
    *((_QWORD *)this + 648) = v79;
    operator delete(v79);
  }
  v80 = (void *)*((_QWORD *)this + 642);
  if (v80)
  {
    *((_QWORD *)this + 643) = v80;
    operator delete(v80);
  }
  v81 = (void *)*((_QWORD *)this + 637);
  if (v81)
  {
    *((_QWORD *)this + 638) = v81;
    operator delete(v81);
  }
  v82 = (void *)*((_QWORD *)this + 632);
  if (v82)
  {
    *((_QWORD *)this + 633) = v82;
    operator delete(v82);
  }
  v83 = (void *)*((_QWORD *)this + 627);
  if (v83)
  {
    *((_QWORD *)this + 628) = v83;
    operator delete(v83);
  }
  v84 = (void *)*((_QWORD *)this + 624);
  if (v84)
  {
    *((_QWORD *)this + 625) = v84;
    operator delete(v84);
  }
  v85 = (void *)*((_QWORD *)this + 621);
  if (v85)
  {
    *((_QWORD *)this + 622) = v85;
    operator delete(v85);
  }
  v86 = (void *)*((_QWORD *)this + 618);
  if (v86)
  {
    *((_QWORD *)this + 619) = v86;
    operator delete(v86);
  }
  v87 = (void *)*((_QWORD *)this + 613);
  if (v87)
  {
    *((_QWORD *)this + 614) = v87;
    operator delete(v87);
  }
  v88 = (void *)*((_QWORD *)this + 608);
  if (v88)
  {
    *((_QWORD *)this + 609) = v88;
    operator delete(v88);
  }
  v89 = (void *)*((_QWORD *)this + 603);
  if (v89)
  {
    *((_QWORD *)this + 604) = v89;
    operator delete(v89);
  }
  v90 = (void *)*((_QWORD *)this + 598);
  if (v90)
  {
    *((_QWORD *)this + 599) = v90;
    operator delete(v90);
  }
  v91 = (void *)*((_QWORD *)this + 593);
  if (v91)
  {
    *((_QWORD *)this + 594) = v91;
    operator delete(v91);
  }
  v92 = (void *)*((_QWORD *)this + 590);
  if (v92)
  {
    *((_QWORD *)this + 591) = v92;
    operator delete(v92);
  }
  v93 = (void *)*((_QWORD *)this + 587);
  if (v93)
  {
    *((_QWORD *)this + 588) = v93;
    operator delete(v93);
  }
  v94 = (void *)*((_QWORD *)this + 584);
  if (v94)
  {
    *((_QWORD *)this + 585) = v94;
    operator delete(v94);
  }
  v95 = (void *)*((_QWORD *)this + 581);
  if (v95)
  {
    *((_QWORD *)this + 582) = v95;
    operator delete(v95);
  }
  v96 = (void *)*((_QWORD *)this + 578);
  if (v96)
  {
    *((_QWORD *)this + 579) = v96;
    operator delete(v96);
  }
  v97 = (void *)*((_QWORD *)this + 573);
  if (v97)
  {
    *((_QWORD *)this + 574) = v97;
    operator delete(v97);
  }
  v98 = (void *)*((_QWORD *)this + 568);
  if (v98)
  {
    *((_QWORD *)this + 569) = v98;
    operator delete(v98);
  }
  v99 = (void *)*((_QWORD *)this + 563);
  if (v99)
  {
    *((_QWORD *)this + 564) = v99;
    operator delete(v99);
  }
  v100 = (void *)*((_QWORD *)this + 558);
  if (v100)
  {
    *((_QWORD *)this + 559) = v100;
    operator delete(v100);
  }
  v101 = (void *)*((_QWORD *)this + 553);
  if (v101)
  {
    *((_QWORD *)this + 554) = v101;
    operator delete(v101);
  }
  v102 = (void *)*((_QWORD *)this + 550);
  if (v102)
  {
    *((_QWORD *)this + 551) = v102;
    operator delete(v102);
  }
  ParametricProcessor::parsData::~parsData((ParametricProcessor *)((char *)this + 3008));
  v103 = (void *)*((_QWORD *)this + 373);
  if (v103)
  {
    *((_QWORD *)this + 374) = v103;
    operator delete(v103);
  }
  v104 = (void *)*((_QWORD *)this + 368);
  if (v104)
  {
    *((_QWORD *)this + 369) = v104;
    operator delete(v104);
  }
  v105 = (void *)*((_QWORD *)this + 363);
  if (v105)
  {
    *((_QWORD *)this + 364) = v105;
    operator delete(v105);
  }
  v106 = (void *)*((_QWORD *)this + 358);
  if (v106)
  {
    *((_QWORD *)this + 359) = v106;
    operator delete(v106);
  }
  MatrixDecompositions::~MatrixDecompositions((ParametricProcessor *)((char *)this + 2488));
  covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter((ParametricProcessor *)((char *)this + 456));
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)this + 56, 0);
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)this + 55, 0);
  v107 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 53, 0);
  v108 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v108)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v108);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 51, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 50, 0);
  v109 = (void *)*((_QWORD *)this + 45);
  if (v109)
  {
    *((_QWORD *)this + 46) = v109;
    operator delete(v109);
  }
  v115 = (void **)((char *)this + 320);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  v110 = (void *)*((_QWORD *)this + 37);
  if (v110)
  {
    *((_QWORD *)this + 38) = v110;
    operator delete(v110);
  }
  v115 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  v111 = (void *)*((_QWORD *)this + 31);
  if (v111)
  {
    *((_QWORD *)this + 32) = v111;
    operator delete(v111);
  }
  v112 = (void *)*((_QWORD *)this + 28);
  if (v112)
  {
    *((_QWORD *)this + 29) = v112;
    operator delete(v112);
  }
  v113 = (const void *)*((_QWORD *)this + 19);
  if (v113)
    CFRelease(v113);
  v114 = (const void *)*((_QWORD *)this + 18);
  if (v114)
    CFRelease(v114);
}

ParametricProcessor *std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](ParametricProcessor **a1, ParametricProcessor *a2)
{
  ParametricProcessor *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ParametricProcessor::~ParametricProcessor(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t AUSpatialMixerV2ChannelProcessor::getLoadedSpatializerIRDataAttributes(AUSpatialMixerV2ChannelProcessor *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;

  v6 = a2 + 772;
  v7 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a2 + 772));
  v4 = *(_QWORD *)(a2 + 480);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 280))(v4);
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 152) = 0;
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
}

void sub_1B630D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[16]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[16]>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

void AUSpatialMixerV2InputElement::UpdateChannelLayout(AUSpatialMixerV2InputElement *this, int a2)
{
  NSObject *v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  BOOL IsSupportedHOA;
  uint64_t v10;
  float *v11;
  float *i;
  float v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int8 v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  _QWORD *v29;
  std::string *v30;
  AudioChannelLayout v31;
  uint64_t v32;
  std::string v33;
  AudioChannelLayout v34;
  uint64_t v35;
  void *__p;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v4 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v29 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v29 = (_QWORD *)*v29;
    PrintAudioChannelLayout(&v33, *((int **)this + 15));
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v33;
    else
      v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v34.mChannelLayoutTag = 136315650;
    *(_QWORD *)&v34.mChannelBitmap = v29;
    LOWORD(v34.mChannelDescriptions[0].mChannelLabel) = 2080;
    *(_QWORD *)((char *)&v34.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateChannelLayout";
    HIWORD(v34.mChannelDescriptions[0].mCoordinates[0]) = 2080;
    *(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1] = v30;
    _os_log_debug_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "[%s|%s] Updating audio channel layout %s", (uint8_t *)&v34, 0x20u);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (!a2)
    goto LABEL_13;
  AUSpatialMixerV2InputElement::CreateMatrixMix((AUSpatialMixerV2InputElement *)&v33, (uint64_t)this);
  v5 = v33.__r_.__value_.__r.__words[0];
  if (v33.__r_.__value_.__r.__words[0])
  {
    *(_QWORD *)&v34.mChannelLayoutTag = (char *)this + 720;
    *(_QWORD *)&v34.mNumberChannelDescriptions = (char *)this + 704;
    std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 720, (uint64_t)this + 704);
    v6 = *(unsigned int *)(v5 + 60);
    v7 = (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3;
    if (v7 == v6)
    {
      v8 = *((_QWORD *)this + 162);
      IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(**(_DWORD **)(v8 + 8));
      *((_QWORD *)this + 162) = v5;
      v33.__r_.__value_.__r.__words[0] = v8;
      if (IsSupportedHOA || ChannelLayoutTagIsSupportedHOA(**(_DWORD **)(v5 + 8)))
        AUSpatialMixerV2InputElement::UpdateOBHDParameters(this);
      std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&v34);
      v5 = v8;
    }
    else
    {
      AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
      std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&v34);
    }
    AUSM::MatrixMix::~MatrixMix((AUSM::MatrixMix *)v5);
    MEMORY[0x1BCC95CEC]();
    if (v7 == v6)
    {
LABEL_13:
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
      std::vector<AUSMChannelParameters>::vector(&v33, *(unsigned int *)(*((_QWORD *)this + 162) + 60));
      v10 = *((_QWORD *)this + 162);
      if (ChannelLayoutTagIsSupportedHOA(**(_DWORD **)(v10 + 8)))
      {
        if (&v33 != (std::string *)(v10 + 72))
          std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>((char *)&v33, *(char **)(v10 + 72), *(_QWORD *)(v10 + 80), (uint64_t)(*(_QWORD *)(v10 + 80) - *(_QWORD *)(v10 + 72)) >> 5);
        atomic_store(1u, (unsigned __int8 *)this + 1920);
LABEL_45:
        v23 = atomic_load((unsigned __int8 *)this + 1264);
        if ((v23 & 1) != 0)
          (*(void (**)(AUSpatialMixerV2InputElement *, uint64_t))(*(_QWORD *)this + 136))(this, 3236);
        v24 = (uint64_t *)*((_QWORD *)this + 31);
        v25 = (uint64_t *)*((_QWORD *)this + 32);
        if (v25 - v24 == (uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 5)
        {
          if (v25 != v24)
          {
            v26 = 0;
            v27 = 1;
            do
            {
              AUSpatialMixerV2ChannelProcessor::setChannelParameters(v24[v26], v33.__r_.__value_.__r.__words[0] + 32 * v26);
              v26 = v27;
              v24 = (uint64_t *)*((_QWORD *)this + 31);
              ++v27;
            }
            while (v26 < (uint64_t)(*((_QWORD *)this + 32) - (_QWORD)v24) >> 3);
          }
        }
        else
        {
          *(_OWORD *)&v34.mChannelLayoutTag = xmmword_1B6629CB0;
          *(_QWORD *)&v34.mChannelDescriptions[0].mChannelFlags = 0;
          *(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1] = 0x64000100000001;
          while (v24 != v25)
            AUSpatialMixerV2ChannelProcessor::setChannelParameters(*v24++, (uint64_t)&v34);
        }
        AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
        v28 = atomic_load((unsigned __int8 *)this + 680);
        if ((v28 & 1) != 0)
          AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(this);
        atomic_store(1u, (unsigned __int8 *)this + 696);
        if (v33.__r_.__value_.__r.__words[0])
        {
          v33.__r_.__value_.__l.__size_ = v33.__r_.__value_.__r.__words[0];
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 720);
        return;
      }
      ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v31.mChannelDescriptions[0].mCoordinates[1], (const ausdk::AUChannelLayout *)(v10 + 32));
      GetChannelLayoutSphericalCoordinates(&v34, *(float **)&v31.mChannelDescriptions[0].mCoordinates[1]);
      v11 = *(float **)&v34.mChannelLayoutTag;
      for (i = *(float **)&v34.mNumberChannelDescriptions; v11 != i; ++v11)
      {
        v13 = remainderf(*v11, 360.0);
        if (v13 == -180.0)
          v13 = 180.0;
        *v11 = v13;
      }
      v14 = atomic_load((unsigned int *)this + 261);
      if (v14 == 6553601)
        *(_DWORD *)__p = 1065353216;
      if ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 5 != (uint64_t)(*(_QWORD *)&v34.mNumberChannelDescriptions - *(_QWORD *)&v34.mChannelLayoutTag) >> 2)
      {
        v15 = atomic_load((unsigned int *)this + 284);
        if (v15 == 2)
        {
          v31.mChannelLayoutTag = 0;
          std::vector<float>::assign((char **)&v34, (uint64_t)(*(_QWORD *)&v34.mNumberChannelDescriptions - *(_QWORD *)&v34.mChannelLayoutTag) >> 2, &v31);
          v31.mChannelLayoutTag = 0;
          std::vector<float>::assign((char **)&v34.mChannelDescriptions[0].mCoordinates[1], (v35 - *(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1]) >> 2, &v31);
          v31.mChannelLayoutTag = 1065353216;
          std::vector<float>::assign((char **)&__p, (v37 - (_BYTE *)__p) >> 2, &v31);
        }
      }
      GetChannelLayoutChannelLabels(&v31, *(int **)&v31.mChannelDescriptions[0].mCoordinates[1]);
      v16 = *(_QWORD *)&v34.mChannelLayoutTag;
      v17 = *(_DWORD **)&v31.mChannelLayoutTag;
      v18 = (char *)__p;
      if ((uint64_t)(*(_QWORD *)&v31.mNumberChannelDescriptions - *(_QWORD *)&v31.mChannelLayoutTag) >> 2 >= (unint64_t)((uint64_t)(*(_QWORD *)&v34.mNumberChannelDescriptions - *(_QWORD *)&v34.mChannelLayoutTag) >> 2))
        v19 = (uint64_t)(*(_QWORD *)&v34.mNumberChannelDescriptions - *(_QWORD *)&v34.mChannelLayoutTag) >> 2;
      else
        v19 = (uint64_t)(*(_QWORD *)&v31.mNumberChannelDescriptions - *(_QWORD *)&v31.mChannelLayoutTag) >> 2;
      if ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 5 < v19)
        v19 = (uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 5;
      if (v19)
      {
        v20 = 0;
        v21 = *(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1];
        v22 = (_DWORD *)(v33.__r_.__value_.__r.__words[0] + 20);
        do
        {
          *(v22 - 5) = *(_DWORD *)(v16 + 4 * v20);
          *(v22 - 4) = *(_DWORD *)(v21 + 4 * v20);
          *(v22 - 3) = *(_DWORD *)&v18[4 * v20];
          *((_QWORD *)v22 - 1) = 1065353216;
          *v22 = 0;
          v22[1] = 1;
          v22[2] = v17[v20++];
          v22 += 8;
        }
        while (v19 > v20);
        atomic_store(0, (unsigned __int8 *)this + 1920);
      }
      else
      {
        atomic_store(0, (unsigned __int8 *)this + 1920);
        if (!v17)
        {
LABEL_37:
          if (v18)
          {
            v37 = v18;
            operator delete(v18);
          }
          if (*(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1])
          {
            v35 = *(_QWORD *)&v34.mChannelDescriptions[0].mCoordinates[1];
            operator delete(*(void **)&v34.mChannelDescriptions[0].mCoordinates[1]);
          }
          if (*(_QWORD *)&v34.mChannelLayoutTag)
          {
            *(_QWORD *)&v34.mNumberChannelDescriptions = *(_QWORD *)&v34.mChannelLayoutTag;
            operator delete(*(void **)&v34.mChannelLayoutTag);
          }
          if (*(_QWORD *)&v31.mChannelDescriptions[0].mCoordinates[1])
          {
            v32 = *(_QWORD *)&v31.mChannelDescriptions[0].mCoordinates[1];
            operator delete(*(void **)&v31.mChannelDescriptions[0].mCoordinates[1]);
          }
          goto LABEL_45;
        }
      }
      *(_QWORD *)&v31.mNumberChannelDescriptions = v17;
      operator delete(v17);
      v18 = (char *)__p;
      goto LABEL_37;
    }
  }
}

void sub_1B630E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  AUSM::ABLBuffer::~ABLBuffer((AUSM::ABLBuffer *)&a19);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v19);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::CreateMatrixMix(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  std::string *p_p;
  CFIndex size;
  CFURLRef v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  double v27;
  CFTypeRef v28;
  uint64_t v29;
  const ausdk::AUChannelLayout *v30;
  int **v31;
  const AudioChannelLayout *v32;
  const AudioChannelLayout *v33;
  int v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  _OWORD *v38;
  float v39;
  _DWORD *v40;
  uint64_t v41;
  NSObject *v42;
  int v43;
  int v44;
  NSObject *v45;
  BOOL IsSupportedHOA;
  char v47;
  char v48;
  NSObject *v49;
  _QWORD *v50;
  ausdk::AUChannelLayout *v51;
  int v52;
  unint64_t v53;
  int Property;
  _BOOL4 v55;
  _QWORD *v56;
  int MatrixMixOutputType;
  _QWORD *v58;
  std::runtime_error *exception;
  unsigned int v60;
  _BYTE v61[21];
  void *v62[4];
  uint64_t v63;
  CFTypeRef cf;
  _BYTE v65[21];
  UInt32 ioPropertyDataSize[2];
  std::string __p;
  int v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2480));
  v5 = v4 == 1;
  v6 = atomic_load((unsigned int *)(a2 + 1128));
  v7 = atomic_load((unsigned int *)(a2 + 1044));
  if (!ChannelLayoutTagIsSupportedHOA(v7))
    goto LABEL_11;
  if ((v6 & 0xFFFFFFFB) == 2 || v6 == 7 && (v9 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 88)), v9 != 3))
  {
    v8 = 1;
    goto LABEL_12;
  }
  v10 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2480));
  if (v10 == 2
    && (v11 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1688) + 80)), v11 == 3)
    && (v12 = atomic_load((unsigned int *)(a2 + 1128)), v12 == 7)
    && (v13 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2480)), v13 == 2))
  {
    v8 = *(_DWORD *)(a2 + 108) == 4;
  }
  else
  {
LABEL_11:
    v8 = 0;
  }
LABEL_12:
  LOBYTE(v63) = v8;
  v14 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2548));
  HIDWORD(v63) = v14;
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(a2 + 1288) + 1112);
  if (!cf)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/System/Library/Audio/Tunings/Generic/AU/neural_transcoder/aumx-3dem-appl-nt.plist");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v17 = CFURLCreateWithBytes(0, (const UInt8 *)p_p, size, 0, 0);
    if (!v17)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    cf = v17;
  }
  v65[0] = v5;
  v18 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2552));
  v19 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2556));
  *(_DWORD *)&v65[4] = v18;
  *(_DWORD *)&v65[8] = v19;
  v20 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2560));
  v21 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 1288) + 2568));
  *(_DWORD *)&v65[12] = v20;
  *(_DWORD *)&v65[16] = v21;
  LOBYTE(v21) = atomic_load((unsigned __int8 *)(*(_QWORD *)(a2 + 1288) + 2564));
  v65[20] = v21 & 1;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v22 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v56 = (_QWORD *)(a2 + 1952);
    if (*(char *)(a2 + 1975) < 0)
      v56 = (_QWORD *)*v56;
    MatrixMixOutputType = AUSpatialMixerV2InputElement::GetMatrixMixOutputType((AUSpatialMixerV2InputElement *)a2);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"CreateMatrixMix";
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
    v68 = MatrixMixOutputType;
    _os_log_debug_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] output type: %u", (uint8_t *)&__p, 0x1Cu);
  }
  v23 = (_DWORD *)operator new();
  if (*(char *)(a2 + 1975) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 1952), *(_QWORD *)(a2 + 1960));
  else
    __p = *(std::string *)(a2 + 1952);
  AUSM::MatrixMix::MatrixMix((uint64_t)v23, (const void **)&__p.__r_.__value_.__l.__data_);
  v62[3] = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  AUSpatialMixerV2InputElement::GetMatrixMixOutputLayout((AUSpatialMixerV2InputElement *)v62, a2);
  v24 = AUSpatialMixerV2InputElement::GetMatrixMixOutputType((AUSpatialMixerV2InputElement *)a2);
  v60 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(a2 + 216) + 128), 0) + 108);
  v25 = *(_QWORD *)(a2 + 216);
  v26 = *(_DWORD *)(v25 + 336);
  v27 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v25 + 128), 0) + 80);
  v29 = v63;
  v28 = cf;
  if (cf)
    CFRetain(cf);
  v30 = (const ausdk::AUChannelLayout *)(a2 + 120);
  *(_OWORD *)v61 = *(_OWORD *)v65;
  *(_QWORD *)&v61[13] = *(_QWORD *)&v65[13];
  *((_BYTE *)v23 + 64) = 0;
  v31 = (int **)(v23 + 2);
  ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v23 + 2), v30);
  ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v23 + 8), (const ausdk::AUChannelLayout *)v62);
  *v23 = v24;
  v23[14] = ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)v30, v32);
  v23[36] = HIDWORD(v29);
  *((_BYTE *)v23 + 160) = v61[0];
  v23[48] = *(_DWORD *)&v61[4];
  *((_QWORD *)v23 + 25) = *(_QWORD *)&v61[8];
  v23[53] = *(_DWORD *)&v61[16];
  *((_BYTE *)v23 + 217) = v61[20];
  *((_BYTE *)v23 + 216) = v61[20];
  if (!v61[0])
    goto LABEL_61;
  v34 = **v31;
  if (!ChannelLayoutTagIsSupportedHOA(v34) || (unsigned __int16)v34 != 4)
    goto LABEL_61;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v35 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v58 = v23 + 42;
    if (*((char *)v23 + 191) < 0)
      v58 = (_QWORD *)*v58;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"initialize";
    _os_log_debug_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "[%s|%s] Neural network being loaded...", (uint8_t *)&__p, 0x16u);
  }
  v36 = **((_DWORD **)v23 + 1);
  v37 = operator new();
  if (v28)
    CFRetain(v28);
  v38 = v23 + 42;
  *(_QWORD *)ioPropertyDataSize = v28;
  if (*((char *)v23 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v23 + 21), *((_QWORD *)v23 + 22));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v38;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 23);
  }
  v39 = v27;
  NeuralTranscoder::NeuralTranscoder(v37, (CFURLRef *)ioPropertyDataSize, v36, v26, (uint64_t)&__p, v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v28)
      goto LABEL_49;
    goto LABEL_48;
  }
  if (v28)
LABEL_48:
    CFRelease(v28);
LABEL_49:
  v40 = v23 + 38;
  std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100]((uint64_t *)v23 + 19, v37);
  v41 = *((_QWORD *)v23 + 19);
  if (v41 && *(_BYTE *)(v41 + 124) && *(_DWORD *)(v41 + 56) == 4)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v42 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v23 + 191) < 0)
        v38 = *(_OWORD **)v38;
      v43 = *(_DWORD *)(*(_QWORD *)v40 + 56);
      v44 = *(_DWORD *)(*(_QWORD *)v40 + 64);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"initialize";
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
      v68 = v43;
      v69 = 1024;
      v70 = v44;
      _os_log_debug_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEBUG, "[%s|%s] Neural transcoder loaded with %u inputs and %u outputs", (uint8_t *)&__p, 0x22u);
    }
    goto LABEL_62;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v45 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v23 + 191) < 0)
      v38 = *(_OWORD **)v38;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"initialize";
    _os_log_error_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_ERROR, "[%s|%s] Could not load neural transcoder", (uint8_t *)&__p, 0x16u);
  }
LABEL_61:
  *((_BYTE *)v23 + 160) = 0;
LABEL_62:
  *((_QWORD *)v23 + 13) = *((_QWORD *)v23 + 12);
  *((_QWORD *)v23 + 16) = *((_QWORD *)v23 + 15);
  *((_QWORD *)v23 + 10) = *((_QWORD *)v23 + 9);
  switch(*v23)
  {
    case 0:
      *((_BYTE *)v23 + 65) = 0;
      v23[15] = v23[14];
      if (ausdk::ACL::operator==(*((int **)v23 + 4), *((_DWORD **)v23 + 1)))
        goto LABEL_85;
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v49 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        goto LABEL_78;
      v50 = v23 + 42;
      if (*((char *)v23 + 191) < 0)
        v50 = (_QWORD *)*v50;
      goto LABEL_108;
    case 1:
      *((_BYTE *)v23 + 65) = 1;
      v51 = (ausdk::AUChannelLayout *)*((_QWORD *)v23 + 4);
      v52 = ausdk::AUChannelLayout::NumberChannels(v51, v33);
      v23[15] = v52;
      __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v23 + 1);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      v53 = (v23[14] * v52);
      ioPropertyDataSize[0] = 0;
      std::vector<float>::assign((char **)v23 + 12, v53, ioPropertyDataSize);
      ioPropertyDataSize[0] = 4 * v23[14] * v23[15];
      Property = AudioFormatGetProperty(0x6D6D6170u, 0x10u, &__p, ioPropertyDataSize, *((void **)v23 + 12));
      goto LABEL_82;
    case 2:
      *((_BYTE *)v23 + 65) = 1;
      v23[15] = 1;
      if (!ausdk::ACL::operator==(*((int **)v23 + 4), *((_DWORD **)v23 + 1)))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v49 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          v50 = v23 + 42;
          if (*((char *)v23 + 191) < 0)
            v50 = (_QWORD *)*v50;
LABEL_108:
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"initialize";
          _os_log_debug_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEBUG, "[%s|%s] Invalid output layout is defined for MatrixMix, resetting output layout = input layout", (uint8_t *)&__p, 0x16u);
        }
LABEL_78:
        ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v23 + 8), (const ausdk::AUChannelLayout *)(v23 + 2));
      }
      goto LABEL_85;
    case 3:
      if (ChannelLayoutTagIsSupportedHOA(**v31))
      {
        v47 = 1;
LABEL_81:
        *((_BYTE *)v23 + 65) = v47;
        Property = AUSM::MatrixMix::createHOADecoders((AUSM::MatrixMix *)v23, v29 != 0, v60);
LABEL_82:
        if (Property)
        {
          v48 = 0;
          *((_QWORD *)v23 + 13) = *((_QWORD *)v23 + 12);
          *((_QWORD *)v23 + 16) = *((_QWORD *)v23 + 15);
          *((_QWORD *)v23 + 10) = *((_QWORD *)v23 + 9);
          if (!v28)
            goto LABEL_88;
          goto LABEL_87;
        }
LABEL_85:
        v48 = 1;
        *((_BYTE *)v23 + 64) = 1;
LABEL_86:
        if (v28)
LABEL_87:
          CFRelease(v28);
      }
      else
      {
        v48 = 0;
        if (v28)
          goto LABEL_87;
      }
LABEL_88:
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      if ((v48 & 1) == 0)
      {
        AUSM::MatrixMix::~MatrixMix((AUSM::MatrixMix *)v23);
        MEMORY[0x1BCC95CEC]();
        v23 = 0;
      }
      *(_QWORD *)this = v23;
      if (cf)
        CFRelease(cf);
      return;
    case 4:
    case 5:
      IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(**v31);
      v47 = 0;
      v48 = 0;
      if (!IsSupportedHOA)
        goto LABEL_86;
      goto LABEL_81;
    case 6:
      v55 = ChannelLayoutTagIsSupportedHOA(**v31);
      v47 = 0;
      v48 = 0;
      if (v55)
        goto LABEL_81;
      goto LABEL_86;
    default:
      goto LABEL_85;
  }
}

void sub_1B630EB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, AUSM::MatrixMix *a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  applesauce::CF::URLRef::~URLRef(&a26);
  MEMORY[0x1BCC95CEC](v32, 0x10B2C4040308816);
  AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct((AUSM::MatrixMixHOAParamsStruct *)&a10);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100](&a18, 0);
  AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct((AUSM::MatrixMixHOAParamsStruct *)&a19);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::UpdateOBHDParameters(AUSpatialMixerV2InputElement *this)
{
  _BOOL4 IsUsingOBHD;
  BOOL v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  HOA::RotationMatrix *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;

  IsUsingOBHD = AUSpatialMixerV2InputElement::IsUsingOBHD(this);
  if (IsUsingOBHD)
  {
    v3 = IsUsingOBHD;
    v4 = *((_QWORD *)this + 162);
    v5 = *(unsigned __int8 *)(v4 + 160);
    atomic_store(1u, (unsigned __int8 *)this + 352);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(&v53, *(const void **)(v4 + 72), *(_QWORD *)(v4 + 80), (uint64_t)(*(_QWORD *)(v4 + 80) - *(_QWORD *)(v4 + 72)) >> 5);
    v6 = v53;
    v7 = (v54 - (uint64_t)v53) >> 5;
    v8 = v7;
    std::vector<float>::resize((uint64_t)this + 304, v7);
    std::vector<float>::resize((uint64_t)this + 328, v7);
    if ((_DWORD)v7)
    {
      v9 = (_DWORD *)*((_QWORD *)this + 38);
      v10 = (_DWORD *)*((_QWORD *)this + 41);
      v11 = v6 + 1;
      do
      {
        *v9++ = *(v11 - 1);
        v12 = *v11;
        v11 += 8;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
    v13 = *((_QWORD *)this + 34);
    *(_BYTE *)(v13 + 40) = v3;
    *(_DWORD *)(v13 + 24) = v7;
    if (v5)
    {
      v14 = *((_QWORD *)this + 162);
      v15 = *(_QWORD *)(v14 + 152);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 64);
      *(_DWORD *)(v13 + 28) = v15;
      *(_DWORD *)(v13 + 32) = 0;
      v16 = v7 - *(_DWORD *)(v14 + 196);
    }
    else
    {
      *(_DWORD *)(v13 + 28) = *((_DWORD *)this + 27);
      *(_DWORD *)(v13 + 32) = 0;
      v14 = *((_QWORD *)this + 162);
      v16 = v7;
    }
    *(_DWORD *)(v13 + 36) = v16;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 96);
    v17 = *((_QWORD *)this + 38);
    *(_QWORD *)v13 = v17;
    v18 = *((_QWORD *)this + 41);
    *(_QWORD *)(v13 + 8) = v18;
    *(_BYTE *)(v13 + 41) = 1;
    v19 = *((_QWORD *)this + 36);
    *(_BYTE *)(v19 + 40) = v3;
    *(_DWORD *)(v19 + 24) = v7;
    if (v5)
    {
      v20 = *((_QWORD *)this + 162);
      v21 = *(_QWORD *)(v20 + 152);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 64);
      *(_DWORD *)(v19 + 28) = v21;
      v22 = *(_DWORD *)(v20 + 196);
      *(_DWORD *)(v19 + 32) = v7 - v22;
      LODWORD(v7) = v22;
    }
    else
    {
      *(_DWORD *)(v19 + 28) = *((_DWORD *)this + 27);
      *(_DWORD *)(v19 + 32) = 0;
      v20 = *((_QWORD *)this + 162);
    }
    *(_DWORD *)(v19 + 36) = v7;
    v23 = *(_QWORD *)(v20 + 96);
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 16) = v23;
    *(_QWORD *)v19 = v17;
    *(_BYTE *)(v19 + 41) = 1;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 34) + 40) = 0;
    *(_BYTE *)(*((_QWORD *)this + 36) + 40) = 0;
  }
  v24 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 1506));
  if ((v24 & 1) != 0)
  {
    v28 = *((_QWORD *)this + 162);
    if (*(_BYTE *)(v28 + 160))
    {
      v29 = *(_QWORD *)(v28 + 152);
      if (v29)
        v30 = *(_DWORD *)(v29 + 64);
      else
        v30 = 0;
      v33 = operator new();
      v31 = (HOA::RotationMatrix *)v33;
      v34 = atomic_load((unsigned int *)this + 261);
      v35 = v34 & 0xFFFF0000;
      v36 = 0x40000000;
      do
      {
        v37 = v36;
        v36 >>= 2;
      }
      while (v37 > v30);
      if (v35 == 12451840)
        v38 = 1;
      else
        v38 = 2 * (v35 != 12517376);
      if (v37)
      {
        v39 = 0;
        do
        {
          v40 = v37 + v39;
          v41 = 2 * v37;
          if (v30 < v37 + v39)
          {
            v40 = 0;
            v41 = 0;
          }
          v30 -= v40;
          v39 = (v41 + v39) >> 1;
          v42 = v37 > 3;
          v37 >>= 2;
        }
        while (v42);
        v43 = v39 - 1;
      }
      else
      {
        v43 = -1;
      }
      HOA::RotationMatrix::RotationMatrix(v33, v43, v38, 0);
    }
    else
    {
      v31 = (HOA::RotationMatrix *)operator new();
      v32 = atomic_load((unsigned int *)this + 261);
      HOA::RotationMatrix::RotationMatrix(v31, v32, 0);
    }
    v44 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v31;
    if (v44)
      std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v44);
    v45 = *(_QWORD *)(*((_QWORD *)this + 45) + 32) - *(_QWORD *)(*((_QWORD *)this + 45) + 24);
    if (v45 <= 0x10)
      v46 = 1;
    else
      v46 = v45 >> 4;
    v47 = v46 * v46;
    v48 = (_QWORD *)operator new();
    v49 = (v47 * v47);
    LODWORD(v53) = 0;
    std::vector<float>::vector(v48, v49, &v53);
    v50 = *((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = v48;
    if (v50)
      std::default_delete<std::vector<float>>::operator()[abi:ne180100](v50);
    v51 = (_QWORD *)operator new();
    LODWORD(v53) = 0;
    std::vector<float>::vector(v51, v49, &v53);
    v52 = *((_QWORD *)this + 47);
    *((_QWORD *)this + 47) = v51;
    if (v52)
      std::default_delete<std::vector<float>>::operator()[abi:ne180100](v52);
    HOA::RotationMatrix::setIdentity(*((float ***)this + 45));
    return HOA::RotationMatrix::toRegularMatrix(*((_QWORD *)this + 45), **((char ***)this + 46), (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 46) + 8) - **((_QWORD **)this + 46)) >> 2);
  }
  else
  {
    v25 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v25)
      std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v25);
    v26 = *((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v26)
      std::default_delete<std::vector<float>>::operator()[abi:ne180100](v26);
    result = *((_QWORD *)this + 47);
    *((_QWORD *)this + 47) = 0;
    if (result)
      std::default_delete<std::vector<float>>::operator()[abi:ne180100](result);
  }
  return result;
}

void sub_1B630F01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10A0C40B42DDE52);
  _Unwind_Resume(a1);
}

void AUSM::MatrixMix::~MatrixMix(AUSM::MatrixMix *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

AUSM::MatrixMix *std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100](AUSM::MatrixMix **a1, AUSM::MatrixMix *a2)
{
  AUSM::MatrixMix *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AUSM::MatrixMix::~MatrixMix(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

char *std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t AUSpatialMixerV2InputElement::UpdateBypassMatrix(AUSpatialMixerV2InputElement *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t Element;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const AudioChannelLayout *v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUChannelLayout *v15;
  const AudioChannelLayout *v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  AUSpatialMixerV2ChannelProcessor **v23;
  AUSpatialMixerV2ChannelProcessor **v24;
  NSObject *v25;
  _QWORD *v26;
  int v27;
  AUSpatialMixerV2ChannelProcessor **v28;
  AUSpatialMixerV2ChannelProcessor **i;
  NSObject *v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  float v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  NSObject *v46;
  uint64_t v47;
  unsigned int *v48;
  float *v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  OSStatus Property;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  float *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  float v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE v105[12];
  UInt32 v106;
  AudioChannelLayout v107;
  __int128 v108;
  uint64_t inSpecifier;
  uint64_t v110;
  _BYTE ioPropertyDataSize[12];
  __int16 v112;
  const char *v113;
  AudioChannelLayout v114;
  _BYTE buf[24];
  int v116;
  __int16 v117;
  const char *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v3 = *((_QWORD *)this + 162);
  if (*(_BYTE *)(v3 + 160))
  {
    v4 = *(_QWORD *)(v3 + 152);
    if (v4)
      v5 = *(_DWORD *)(v4 + 64);
    else
      v5 = 0;
  }
  else
  {
    v5 = *((_DWORD *)this + 27);
  }
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
  v7 = *(unsigned int *)(Element + 108);
  if (*((_QWORD *)this + 32) - *((_QWORD *)this + 31) <= 8uLL)
    v8 = 1;
  else
    v8 = v5;
  v9 = atomic_load((unsigned int *)this + 282);
  if (v9 - 3 < 2
    || v9 - 8 < 2
    || v9 == 7 && (v10 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88)), v10 == 3))
  {
    v11 = *(_DWORD *)(Element + 108);
  }
  else
  {
    v11 = 2;
  }
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v107.mChannelDescriptions[0].mCoordinates[1], (AUSpatialMixerV2InputElement *)((char *)this + 120));
  if (ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)&v107.mChannelDescriptions[0].mCoordinates[1], v12))
  {
    if ((_DWORD)v8 == 1)
    {
      std::vector<AudioChannelLayout>::vector(buf, 1uLL);
      v13 = *(_QWORD *)buf;
      **(_QWORD **)buf = 6553601;
      *(_DWORD *)(v13 + 8) = 0;
      if (*(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1])
      {
        *(_QWORD *)&v108 = *(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v107.mChannelDescriptions[0].mCoordinates[1]);
        v13 = *(_QWORD *)buf;
      }
      *(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1] = v13;
      v108 = *(_OWORD *)&buf[8];
    }
    v107.mChannelLayoutTag = 0;
    std::vector<float>::vector(buf, (v8 * v7), &v107);
    GetChannelLayoutChannelLabels(&v107, *(int **)&v107.mChannelDescriptions[0].mCoordinates[1]);
    v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0);
    v15 = *(ausdk::AUChannelLayout **)(v14 + 120);
    if (!ausdk::AUChannelLayout::NumberChannels(v15, v16))
    {
      v28 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
      for (i = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32); v28 != i; ++v28)
        AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*v28, 0, 0);
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v30 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v31 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v31 = (_QWORD *)*v31;
        v114.mChannelLayoutTag = 136315394;
        *(_QWORD *)&v114.mChannelBitmap = v31;
        LOWORD(v114.mChannelDescriptions[0].mChannelLabel) = 2080;
        *(_QWORD *)((char *)&v114.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateBypassMatrix";
        _os_log_debug_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "[%s|%s] unexpected invalid output layout", (uint8_t *)&v114, 0x16u);
      }
      goto LABEL_158;
    }
    GetChannelLayoutChannelLabels(&v114, (int *)v15);
    v17 = *(unsigned int **)&v114.mChannelLayoutTag;
    if (*(_QWORD *)&v114.mChannelLayoutTag == *(_QWORD *)&v114.mNumberChannelDescriptions)
    {
      v18 = 0;
    }
    else
    {
      v18 = 0;
      do
      {
        v20 = *v17++;
        v19 = v20;
        if ((((0x4000002000000010uLL >> v20) & 1) == 0 || v19 > 0x3E) && v19 != 45)
          ++v18;
      }
      while (v17 != *(unsigned int **)&v114.mNumberChannelDescriptions);
    }
    if (v11 >= v18)
      v32 = v18;
    else
      v32 = v11;
    if (v32 <= 1)
      v32 = 1;
    if ((_DWORD)v8 == 1 && v11 == 2)
    {
      if ((v33 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80)), v33 == 1)
        || !v33 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u
        || (v34 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72)), v34 == 5))
      {
        __asm { FMOV            V0.2S, #1.0 }
        **(_QWORD **)buf = _D0;
        goto LABEL_146;
      }
    }
    v39 = sqrtf(1.0 / (float)v32);
    v40 = *(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1];
    if (ChannelLayoutTagIsSupportedHOA(**(_DWORD **)&v107.mChannelDescriptions[0].mCoordinates[1]))
    {
      v41 = *((_QWORD *)this + 162);
      v42 = *(char **)(v41 + 120);
      v43 = *(_QWORD *)(v41 + 128);
      v44 = (_BYTE *)(v41 + 120);
      v45 = (v43 - (uint64_t)v42) >> 2;
      if (v45 == (_DWORD)v7 * v5)
      {
        if (buf != v44)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(buf, v42, v43, v45);
        goto LABEL_146;
      }
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v46 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        if (!v11)
          goto LABEL_146;
        goto LABEL_74;
      }
      v87 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v87 = (_QWORD *)*v87;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = v87;
      v112 = 2080;
      v113 = "UpdateBypassMatrix";
      _os_log_debug_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "[%s|%s] Setting HOA bypass matrix for W passthrough", ioPropertyDataSize, 0x16u);
      if (v11)
      {
LABEL_74:
        v47 = v11;
        v48 = *(unsigned int **)&v114.mChannelLayoutTag;
        v49 = *(float **)buf;
        do
        {
          v50 = *v48++;
          v51 = (v50 < 0x3FuLL) & (0x4000002000000010uLL >> v50);
          if (v50 == 45)
            v51 = 1;
          if (v51)
            v52 = 0.0;
          else
            v52 = v39;
          *v49++ = v52;
          --v47;
        }
        while (v47);
      }
LABEL_146:
      v97 = atomic_load((unsigned int *)this + 282);
      if (v97 == 8)
      {
        v98 = *(_QWORD *)buf;
        if ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >= 1)
          bzero(*(void **)buf, 4 * (((*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2) - (*(_QWORD *)&buf[8] - *(_QWORD *)buf > 3uLL)) + 4);
        if (!(_DWORD)v8)
          goto LABEL_156;
        v99 = 0;
        v100 = v8;
        do
        {
          *(_DWORD *)(v98 + 4 * v99) = 1065353216;
          v99 += v7;
          --v100;
        }
        while (v100);
      }
      if ((_DWORD)v8)
      {
        v101 = 0;
        v102 = 0;
        do
        {
          v103 = *((_QWORD *)this + 31);
          if (v102 >= (*((_QWORD *)this + 32) - v103) >> 3)
            break;
          AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*(AUSpatialMixerV2ChannelProcessor **)(v103 + 8 * v102++), (float *)(*(_QWORD *)buf + 4 * v101), v7);
          v101 += v7;
        }
        while (v8 != v102);
      }
LABEL_156:
      if (*(_QWORD *)&v114.mChannelLayoutTag)
      {
        *(_QWORD *)&v114.mNumberChannelDescriptions = *(_QWORD *)&v114.mChannelLayoutTag;
        operator delete(*(void **)&v114.mChannelLayoutTag);
      }
LABEL_158:
      if (*(_QWORD *)&v107.mChannelLayoutTag)
      {
        *(_QWORD *)&v107.mNumberChannelDescriptions = *(_QWORD *)&v107.mChannelLayoutTag;
        operator delete(*(void **)&v107.mChannelLayoutTag);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      goto LABEL_162;
    }
    inSpecifier = v40;
    v110 = 0;
    if (v11 < 3)
    {
      CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)ioPropertyDataSize, 6619138);
      v110 = *(_QWORD *)ioPropertyDataSize + 16;
      v106 = 8 * v8;
      MEMORY[0x1E0C80A78](v53);
      v55 = &v105[-v54];
      Property = AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, &v106, &v105[-v54]);
      if ((_DWORD)v8)
      {
        v57 = 0;
        v58 = *(_QWORD *)buf;
        v59 = 1;
        do
        {
          *(_DWORD *)(v58 + 4 * (v59 - 1)) = *(_DWORD *)&v55[4 * v57];
          *(_DWORD *)(v58 + 4 * v59) = *(_DWORD *)&v55[4 * (v57 + 1)];
          v57 += 2;
          v59 += v7;
        }
        while (2 * v8 != v57);
      }
      CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)ioPropertyDataSize);
      if (!Property)
        goto LABEL_97;
    }
    else
    {
      v110 = *(_QWORD *)(v14 + 120);
      *(_DWORD *)ioPropertyDataSize = 4 * v8 * v7;
      if (!AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, (UInt32 *)ioPropertyDataSize, *(void **)buf))
      {
LABEL_97:
        v64 = atomic_load((unsigned int *)this + 282);
        if (v64 == 7)
        {
          v65 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
          if (v65 != 1 && (v65 || *(_DWORD *)(*((_QWORD *)this + 210) + 108) <= 1u))
          {
            v66 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72));
            if (v66 != 5)
            {
              v67 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
              if (v67 == 3)
              {
                v75 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
                if (v75 == 3
                  || (v88 = atomic_load((unsigned int *)this + 282), v88 == 7)
                  && (v89 = atomic_load((unsigned int *)this + 284), v89 == 2)
                  && (v90 = atomic_load((unsigned int *)this + 293), v90 == 1))
                {
                  if ((uint64_t)(*(_QWORD *)&v114.mNumberChannelDescriptions - *(_QWORD *)&v114.mChannelLayoutTag) >> 2 == v18)
                  {
                    v76 = *(_QWORD *)&v107.mChannelLayoutTag;
                    if (*(_QWORD *)&v107.mNumberChannelDescriptions != *(_QWORD *)&v107.mChannelLayoutTag)
                    {
                      v77 = 0;
                      v78 = 0;
                      v79 = *(_QWORD *)buf;
                      v80 = (uint64_t)(*(_QWORD *)&v107.mNumberChannelDescriptions - *(_QWORD *)&v107.mChannelLayoutTag) >> 2;
                      do
                      {
                        v81 = *(_DWORD *)(v76 + 4 * v78);
                        if (v81 <= 0x3E && ((0x4000002000000010uLL >> v81) & 1) != 0 && (_DWORD)v7 != 0)
                        {
                          v84 = v77;
                          v85 = v7;
                          do
                          {
                            *(float *)(v79 + 4 * v84++) = v39;
                            --v85;
                          }
                          while (v85);
                        }
                        v78 = (v78 + 1);
                        v77 += v7;
                      }
                      while (v80 > v78);
                    }
                  }
                }
                else if ((_DWORD)v7)
                {
                  v91 = *(unsigned int **)&v114.mChannelLayoutTag;
                  v92 = *(float **)buf;
                  v93 = v7;
                  do
                  {
                    v94 = *v91++;
                    v95 = (v94 < 0x3FuLL) & (0x4000002000000010uLL >> v94);
                    if (v94 == 45)
                      v95 = 1;
                    if (v95)
                      v96 = 0.0;
                    else
                      v96 = v39;
                    *v92++ = v96;
                    --v93;
                  }
                  while (v93);
                }
              }
              else if (v67 == 1)
              {
                v68 = *(_QWORD *)&v107.mChannelLayoutTag;
                if (*(_QWORD *)&v107.mNumberChannelDescriptions != *(_QWORD *)&v107.mChannelLayoutTag)
                {
                  v69 = 0;
                  v70 = *(_QWORD *)buf;
                  v71 = (uint64_t)(*(_QWORD *)&v107.mNumberChannelDescriptions - *(_QWORD *)&v107.mChannelLayoutTag) >> 2;
                  v72 = 1;
                  do
                  {
                    v73 = *(_DWORD *)(v68 + 4 * v69);
                    if (v73 <= 0x3E && ((0x4000002000000010uLL >> v73) & 1) != 0)
                    {
                      *(_DWORD *)(v70 + 4 * (v72 - 1)) = 1060439283;
                      *(_DWORD *)(v70 + 4 * v72) = 1060439283;
                    }
                    ++v69;
                    v72 += v7;
                  }
                  while (v71 > v69);
                }
              }
            }
          }
        }
        goto LABEL_146;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v60 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v86 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v86 = (_QWORD *)*v86;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = v86;
      v112 = 2080;
      v113 = "UpdateBypassMatrix";
      _os_log_debug_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Standard bypass matrix not available; reverting to a diagonal matrix",
        ioPropertyDataSize,
        0x16u);
    }
    v61 = *(_QWORD *)buf;
    if ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >= 1)
      bzero(*(void **)buf, 4 * (((*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2) - (*(_QWORD *)&buf[8] - *(_QWORD *)buf > 3uLL)) + 4);
    if (v8 >= v11)
      v62 = v11;
    else
      v62 = v8;
    if ((_DWORD)v62)
    {
      v63 = 0;
      do
      {
        *(_DWORD *)(v61 + 4 * v63) = 1065353216;
        v63 += v7 + 1;
        --v62;
      }
      while (v62);
    }
    goto LABEL_97;
  }
  v23 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 31);
  v24 = (AUSpatialMixerV2ChannelProcessor **)*((_QWORD *)this + 32);
  while (v23 != v24)
    AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*v23++, 0, 0);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v25 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v26 = (_QWORD *)((char *)this + 1952);
    if (*((char *)this + 1975) < 0)
      v26 = (_QWORD *)*v26;
    v27 = **(_DWORD **)&v107.mChannelDescriptions[0].mCoordinates[1];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "UpdateBypassMatrix";
    *(_WORD *)&buf[22] = 1024;
    v116 = v27;
    v117 = 2080;
    v118 = "UpdateBypassMatrix";
    _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid input channel layout %d in %s", buf, 0x26u);
  }
LABEL_162:
  if (*(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1])
  {
    *(_QWORD *)&v108 = *(_QWORD *)&v107.mChannelDescriptions[0].mCoordinates[1];
    operator delete(*(void **)&v107.mChannelDescriptions[0].mCoordinates[1]);
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
}

void sub_1B630FCE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = *(void **)(v2 - 192);
  if (v4)
  {
    *(_QWORD *)(v2 - 184) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 288);
  if (v5)
  {
    *(_QWORD *)(v2 - 280) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v2 - 160);
  if (v6)
  {
    *(_QWORD *)(v2 - 152) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 - 264);
  if (v7)
  {
    *(_QWORD *)(v2 - 256) = v7;
    operator delete(v7);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(AUSpatialMixerV2InputElement *this)
{
  unsigned int v2;
  unsigned int UncompensatedLatencyFrames;
  unsigned int v4;
  NSObject *v5;
  _BOOL4 v6;
  _QWORD *v7;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  _DWORD **v12;
  unint64_t v13;
  uint64_t v14;
  IR::FixedIntegerDelay *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v22[12];
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned int *)(*((_QWORD *)this + 27) + 15088));
  UncompensatedLatencyFrames = AUSpatialMixerV2InputElement::GetUncompensatedLatencyFrames(this);
  v4 = v2 - UncompensatedLatencyFrames;
  if (v2 < UncompensatedLatencyFrames)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v5 = getAUSMV2Log(void)::gLog;
    v6 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    v4 = 0;
    if (v6)
    {
      v7 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)v22 = 136315394;
      *(_QWORD *)&v22[4] = v7;
      v23 = 2080;
      v24 = "UpdateAlignmentDelayLines";
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "[%s|%s] Input latency exceeds AU latency calculated at initialization time. The additional latency is not going to be aligned.", v22, 0x16u);
      v4 = 0;
    }
  }
  atomic_store(v4, (unsigned int *)this + 410);
  *(_QWORD *)v22 = (char *)this + 704;
  v22[8] = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 704);
  if (atomic_load((unsigned int *)this + 410))
  {
    v9 = atomic_load((unsigned int *)this + 410);
    v10 = vcvtad_u64_f64(*((double *)this + 10)* (double)v9/ *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 27) + 128), 0) + 80));
    v11 = *((unsigned int *)this + 27);
    v12 = (_DWORD **)*((_QWORD *)this + 206);
    if (v11 > (uint64_t)(*((_QWORD *)this + 207) - (_QWORD)v12) >> 3 || **v12 != v10)
    {
      std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)this + 1648, v11);
      if (*((_DWORD *)this + 27))
      {
        v13 = 0;
        do
        {
          v14 = *((_QWORD *)this + 206);
          v15 = (IR::FixedIntegerDelay *)operator new();
          IR::FixedIntegerDelay::FixedIntegerDelay(v15, v10, 1);
          v16 = *(_QWORD **)(v14 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v15;
          if (v16)
            std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v16);
          ++v13;
        }
        while (v13 < *((unsigned int *)this + 27));
      }
    }
  }
  else
  {
    v17 = (_QWORD *)*((_QWORD *)this + 207);
    v18 = (_QWORD *)*((_QWORD *)this + 206);
    if (v17 != v18)
    {
      do
      {
        v20 = (_QWORD *)*--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v19);
      }
      while (v17 != v18);
      *((_QWORD *)this + 207) = v18;
    }
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v22);
}

void sub_1B630FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::GetUncompensatedLatencyFrames(AUSpatialMixerV2InputElement *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  int v23;

  if (*((_QWORD *)this + 163))
  {
    if (*((float *)this + 329) != 0.0)
    {
      v2 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
      if (v2 == 3)
      {
        v3 = atomic_load((unsigned int *)this + 282);
        if (v3 == 7)
        {
          v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 2480));
          if (v4 == 2)
            return *((unsigned int *)this + 332);
        }
      }
    }
  }
  v6 = (char *)this + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v8 = *((_QWORD *)this + 31);
  v7 = *((_QWORD *)this + 32);
  if (v7 == v8)
  {
    v10 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)v8 + 480);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 304))(v9);
      v7 = *((_QWORD *)this + 32);
    }
    else
    {
      v10 = 0;
    }
    while (1)
    {
      v8 += 8;
      if (v8 == v7)
        break;
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 480);
      if (v11)
      {
        LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 304))(v11);
        v7 = *((_QWORD *)this + 32);
      }
      if (v11 > v10)
        v10 = v11;
    }
    v12 = atomic_load((unsigned __int8 *)this + 1264);
    if ((v12 & 1) != 0)
    {
      v13 = *((_QWORD *)this + 195);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 756))
          v10 += *(_DWORD *)(v13 + 748);
      }
    }
  }
  v14 = *((_QWORD *)this + 162);
  if (*(_BYTE *)(v14 + 160))
  {
    v15 = *(_QWORD *)(v14 + 152);
    if (*(_BYTE *)(v15 + 216) && *(_BYTE *)(v15 + 232))
    {
      v16 = *(_DWORD *)(v15 + 104);
      v17 = *(_DWORD *)(v15 + 108);
      v18 = *(float *)(v15 + 240);
      v19 = *(float *)(v15 + 244);
      AudioSampleRateConverterGetLatency();
      v21 = v20;
      AudioSampleRateConverterGetLatency();
      *(float *)&v22 = v21 + v22;
      v23 = (float)((float)(*(float *)(v15 + 240) * *(float *)&v22)
                                + (float)((float)((float)(v17 + v16) / v19) * v18));
    }
    else
    {
      v23 = *(_DWORD *)(v15 + 108) + *(_DWORD *)(v15 + 104);
    }
  }
  else
  {
    v23 = 0;
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
  return v23 + v10;
}

void sub_1B63101EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6310268(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2InputElement::GetMatrixMixOutputType(AUSpatialMixerV2InputElement *this)
{
  int v2;
  _BOOL4 IsSupportedHOA;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  ausdk::AUChannelLayout *v10;
  const AudioChannelLayout *v11;
  int v12;
  ausdk::AUChannelLayout *v13[3];

  v2 = atomic_load((unsigned int *)this + 261);
  IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v2);
  v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
  if (IsSupportedHOA)
  {
    if (v4 == 1 || !v4 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u)
      return 5;
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72));
    if (v5 == 5)
    {
      return 5;
    }
    else
    {
      v9 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
      if (v9 == 3)
      {
        if (AUSpatialMixerV2InputElement::IsUsingOBHD(this))
          return 5;
        else
          return 3;
      }
      else
      {
        return 6;
      }
    }
  }
  else
  {
    if (v4 == 1
      || !v4 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u
      || (v7 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72)), v7 == 5))
    {
      v8 = 5;
    }
    else
    {
      v8 = atomic_load((unsigned int *)this + 282);
    }
    if (AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v8))
    {
      AUSpatialMixerV2InputElement::GetMatrixMixOutputLayout((AUSpatialMixerV2InputElement *)v13, (uint64_t)this);
      v10 = v13[0];
      v12 = ausdk::AUChannelLayout::NumberChannels(v13[0], v11);
      v13[1] = v10;
      operator delete(v10);
      return *((_DWORD *)this + 27) != v12;
    }
    else
    {
      return 2 * (*((_DWORD *)this + 27) != 1);
    }
  }
}

ausdk::AUChannelLayout *AUSpatialMixerV2InputElement::GetMatrixMixOutputLayout(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t Element;
  int v4;
  unsigned int v5;
  unsigned int v6;
  ausdk::AUChannelLayout *result;
  uint64_t v8;

  Element = a2;
  v4 = atomic_load((unsigned int *)(a2 + 1044));
  if (ChannelLayoutTagIsSupportedHOA(v4))
  {
    v5 = atomic_load((unsigned int *)(Element + 1128));
    if (v5 - 3 >= 2 && v5 - 8 >= 2)
    {
      if (v5 != 7 || (v6 = atomic_load((unsigned int *)(*(_QWORD *)(Element + 1288) + 88)), v6 != 3))
      {
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(Element + 216) + 128), 0) + 108) >= 3u)
        {
          result = (ausdk::AUChannelLayout *)std::vector<AudioChannelLayout>::vector(this, 1uLL);
          v8 = *(_QWORD *)this;
          *(_QWORD *)v8 = 6619138;
          *(_DWORD *)(v8 + 8) = 0;
          return result;
        }
      }
    }
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(Element + 216) + 128), 0);
  }
  return ausdk::AUChannelLayout::AUChannelLayout(this, (const ausdk::AUChannelLayout *)(Element + 120));
}

void AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct(AUSM::MatrixMixHOAParamsStruct *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

BOOL AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(AUSpatialMixerV2InputElement *this, int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  if (*((_DWORD *)this + 27) >= 2u)
  {
    v3 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
    if (v3 == 1 || !v3 && *(_DWORD *)(*((_QWORD *)this + 210) + 108) > 1u)
      return 1;
    v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 72));
    if (v4 == 5)
      return 1;
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
    if (v5 == 3)
      return 1;
    if (a2 == 7)
    {
      v7 = atomic_load((unsigned int *)this + 284);
      if (v7 == 2)
      {
        v8 = atomic_load((unsigned int *)this + 293);
        if (v8 == 1)
        {
          v9 = atomic_load((unsigned int *)this + 261);
          if (!ChannelLayoutTagIsSupportedHOA(v9))
            return 1;
        }
      }
    }
  }
  v10 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
  if (v10 != 3)
    return 0;
  v11 = atomic_load((unsigned int *)this + 261);
  return ChannelLayoutTagIsSupportedHOA(v11);
}

uint64_t std::__split_buffer<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100]((AUSpatialMixerV2ChannelProcessor **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AUSpatialMixerV2ChannelProcessor::~AUSpatialMixerV2ChannelProcessor(AUSpatialMixerV2ChannelProcessor *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void **v17;

  *(_QWORD *)this = &off_1E69D1E18;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 928);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 912);
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  v2 = (_QWORD *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v2)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v2);
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 106, 0);
  v3 = (void *)*((_QWORD *)this + 102);
  if (v3)
  {
    *((_QWORD *)this + 103) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v4)
    (*((void (**)(void))this + 101))();
  v5 = (_QWORD *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v5)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v5);
  v6 = (void *)*((_QWORD *)this + 64);
  if (v6)
  {
    *((_QWORD *)this + 65) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  IR::IRDataAttributes::~IRDataAttributes((AUSpatialMixerV2ChannelProcessor *)((char *)this + 320));
  IR::IRDataAttributes::~IRDataAttributes((AUSpatialMixerV2ChannelProcessor *)((char *)this + 168));
  v10 = (uint64_t *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v10)
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v10);
  v11 = (uint64_t *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v11)
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v11);
  v12 = (uint64_t *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v12);
  v13 = (uint64_t *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v13)
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v13);
  v14 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  for (i = 56; i != -16; i -= 24)
  {
    v17 = (void **)((char *)this + i);
    std::vector<std::unique_ptr<AllPassComb>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

AUSpatialMixerV2ChannelProcessor *std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](AUSpatialMixerV2ChannelProcessor **a1)
{
  AUSpatialMixerV2ChannelProcessor *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    AUSpatialMixerV2ChannelProcessor::~AUSpatialMixerV2ChannelProcessor(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::DisposeInputCaptureFile(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 688))
  {
    v1 = this;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v2 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(v1 + 1952);
      if (*(char *)(v1 + 1975) < 0)
        v3 = (_QWORD *)*v3;
      v4 = 136315394;
      v5 = v3;
      v6 = 2080;
      v7 = "DisposeInputCaptureFile";
      _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Disposing input capture file", (uint8_t *)&v4, 0x16u);
    }
    this = ExtAudioFileDispose(*(ExtAudioFileRef *)(v1 + 688));
    *(_QWORD *)(v1 + 688) = 0;
  }
  return this;
}

void AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(AUSpatialMixerV2InputElement *this)
{
  NSObject *v2;
  CATimeUtilities *AppBooleanValue;
  BOOL v4;
  uint64_t v5;
  unint64_t CurrentGregorianDate;
  _QWORD *v7;
  double v8;
  const __CFAllocator *v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  CFStringRef v13;
  NSObject *v14;
  _QWORD *v15;
  Float64 mSampleRate;
  CFURLRef v17;
  ExtAudioFileRef *v18;
  __int128 v19;
  OSStatus v20;
  NSObject *v21;
  _QWORD *v22;
  NSObject *v23;
  _QWORD *v24;
  OSStatus v25;
  NSObject *v26;
  int16x8_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  std::runtime_error *exception;
  void *v32[2];
  char v33;
  AudioStreamBasicDescription __p;
  CFURLRef inURL;
  CFStringRef filePath;
  void *v37[2];
  char v38;
  Boolean keyExistsAndHasValidFormat;
  uint8_t v40[4];
  _QWORD *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  OSStatus v45;
  __int16 v46;
  void **v47;
  _BYTE buf[32];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 86))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v2 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v28 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v28 = (_QWORD *)*v28;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "CreateInputCaptureFileIfNecessary";
      _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Inconsistent behaviour: there was already an input capture file! Disposing of it.", buf, 0x16u);
    }
    AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
  }
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = (CATimeUtilities *)CFPreferencesGetAppBooleanValue(CFSTR("ausm_capture_all"), CFSTR("com.apple.coreaudio"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v4 = (_DWORD)AppBooleanValue == 0;
  else
    v4 = 1;
  if (!v4
    || (keyExistsAndHasValidFormat = 0,
        AppBooleanValue = (CATimeUtilities *)CFPreferencesGetAppBooleanValue(CFSTR("ausm_capture_input"), CFSTR("com.apple.coreaudio"), &keyExistsAndHasValidFormat), keyExistsAndHasValidFormat)&& (_DWORD)AppBooleanValue)
  {
    v5 = *((_QWORD *)this + 161);
    if (*(char *)(v5 + 2543) < 0)
    {
      if (*(_QWORD *)(v5 + 2528))
      {
LABEL_15:
        CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(AppBooleanValue);
        v7 = (_QWORD *)(v5 + 2520);
        caulk::make_string((caulk *)"%d%02d%02d.%02d%02d%02d", (uint64_t)v37, CurrentGregorianDate, ((int)(CurrentGregorianDate >> 8) >> 24), ((int)(CurrentGregorianDate >> 16) >> 24), ((int)(CurrentGregorianDate >> 24) >> 24), (SHIDWORD(CurrentGregorianDate) >> 24), (int)v8);
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (*(char *)(v5 + 2543) < 0)
          v7 = (_QWORD *)*v7;
        v10 = *((_QWORD *)this + 161);
        v11 = (_QWORD *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0)
          v11 = (_QWORD *)*v11;
        v12 = v37;
        if (v38 < 0)
          v12 = (void **)v37[0];
        v13 = CFStringCreateWithFormat(v9, 0, CFSTR("%s/ausm_%s_input_%u_%s_%u.caf"), v7, v11, *((unsigned int *)this + 171), v12, AUSpatialMixerV2InputElement::mCaptureFileNumber);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&filePath, v13);
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v14 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v15 = (_QWORD *)((char *)this + 1952);
          if (*((char *)this + 1975) < 0)
            v15 = (_QWORD *)*v15;
          if (!filePath)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(filePath, (uint64_t)&__p);
          if ((__p.mFramesPerPacket & 0x80000000) == 0)
            mSampleRate = COERCE_DOUBLE(&__p);
          else
            mSampleRate = __p.mSampleRate;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "CreateInputCaptureFileIfNecessary";
          *(_WORD *)&buf[22] = 2080;
          *(Float64 *)&buf[24] = mSampleRate;
          _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "[%s|%s] Capture file: %s", buf, 0x20u);
          if (SHIBYTE(__p.mFramesPerPacket) < 0)
            operator delete(*(void **)&__p.mSampleRate);
        }
        v17 = CFURLCreateWithFileSystemPath(v9, filePath, kCFURLPOSIXPathStyle, 0);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&inURL, v17);
        v18 = (ExtAudioFileRef *)((char *)this + 688);
        v19 = *((_OWORD *)this + 6);
        *(_OWORD *)buf = *((_OWORD *)this + 5);
        *(_OWORD *)&buf[16] = v19;
        v49 = *((_QWORD *)this + 14);
        if (*(_DWORD *)&buf[8] == 1885564203)
          *(_DWORD *)&buf[8] = 1819304813;
        __p.mSampleRate = *(Float64 *)buf;
        *(_QWORD *)&__p.mFormatID = 0x96C70636DLL;
        __p.mBytesPerPacket = 4 * *(_DWORD *)&buf[28];
        __p.mFramesPerPacket = 1;
        __p.mBytesPerFrame = 4 * *(_DWORD *)&buf[28];
        __p.mChannelsPerFrame = *(_DWORD *)&buf[28];
        *(_QWORD *)&__p.mBitsPerChannel = 32;
        v20 = ExtAudioFileCreateWithURL(inURL, 0x63616666u, &__p, 0, 1u, (ExtAudioFileRef *)this + 86);
        if (v20)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v21 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v22 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v22 = (_QWORD *)*v22;
            *(_DWORD *)v40 = 136315650;
            v41 = v22;
            v42 = 2080;
            v43 = "CreateInputCaptureFileIfNecessary";
            v44 = 1024;
            v45 = v20;
            _os_log_error_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (ExtAudioFileCreateWithURL returned %d)", v40, 0x1Cu);
          }
        }
        else
        {
          v25 = ExtAudioFileSetProperty(*v18, 0x63666D74u, 0x28u, buf);
          if (!v25)
          {
LABEL_54:
            ++AUSpatialMixerV2InputElement::mCaptureFileNumber;
            if (inURL)
              CFRelease(inURL);
            if (filePath)
              CFRelease(filePath);
            if (v38 < 0)
              operator delete(v37[0]);
            return;
          }
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v26 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v29 = (_QWORD *)((char *)this + 1952);
            if (*((char *)this + 1975) < 0)
              v29 = (_QWORD *)*v29;
            CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)v32, v27);
            if (v33 >= 0)
              v30 = v32;
            else
              v30 = (void **)v32[0];
            *(_DWORD *)v40 = 136315906;
            v41 = v29;
            v42 = 2080;
            v43 = "CreateInputCaptureFileIfNecessary";
            v44 = 1024;
            v45 = v25;
            v46 = 2080;
            v47 = v30;
            _os_log_error_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (ExtAudioFileSetProperty with kExtAudioFileProperty_ClientDataFormat returned %d; format was %s)",
              v40,
              0x26u);
            if (v33 < 0)
              operator delete(v32[0]);
          }
          ExtAudioFileDispose(*v18);
        }
        *v18 = 0;
        goto LABEL_54;
      }
    }
    else if (*(_BYTE *)(v5 + 2543))
    {
      goto LABEL_15;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v23 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v24 = (_QWORD *)((char *)this + 1952);
      if (*((char *)this + 1975) < 0)
        v24 = (_QWORD *)*v24;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "CreateInputCaptureFileIfNecessary";
      _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (no capture dir path available)", buf, 0x16u);
    }
  }
}

void sub_1B6310F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,const void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  __cxa_free_exception(v31);
  applesauce::CF::StringRef::~StringRef(&a25);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B63112C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  AUSpatialMixerV2ChannelProcessor **v2;
  AUSpatialMixerV2ChannelProcessor **v4;
  void *v5;

  v1 = *a1;
  v2 = (AUSpatialMixerV2ChannelProcessor **)**a1;
  if (v2)
  {
    v4 = (AUSpatialMixerV2ChannelProcessor **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<IR::OptimizedBinauralHOADecodingParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D1E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::OptimizedBinauralHOADecodingParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D1E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void AUSpatialMixerV2InputElement::GetParametricProcessorParams(AUSpatialMixerV2InputElement *this, _DWORD *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  int v12;
  _QWORD v13[2];
  int valuePtr;
  _BYTE v15[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  _BYTE v24[8];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v15, "CDDR");
  valuePtr = a2[359];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v12 = a2[360];
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],unsigned int>((applesauce::CF::TypeRef *)&v17, "AnalysisType", &v12);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v18, "SharpeningLimit");
  valuePtr = a2[329];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v20, "DecorrelationLimit");
  valuePtr = a2[330];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v22, "FrameSize");
  valuePtr = a2[332];
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v24, "HopSize");
  valuePtr = a2[333];
  v25[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v25[0])
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  v13[0] = v15;
  v13[1] = 6;
  v4 = 0;
  *(_QWORD *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
  do
  {
    v5 = (const void *)v25[v4];
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)&v24[v4 * 8];
    if (v6)
      CFRelease(v6);
    v4 -= 2;
  }
  while (v4 != -12);
}

void sub_1B63116F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, CFTypeRef a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef a19, uint64_t a20,CFTypeRef a21,uint64_t a22,CFTypeRef a23,uint64_t a24,CFTypeRef cf)
{
  const void **v25;

  if (cf)
    CFRelease(cf);
  applesauce::CF::TypeRef::~TypeRef(v25);
  do
  {
    v25 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v25);
  }
  while (v25 != (const void **)&a14);
  _Unwind_Resume(a1);
}

BOOL AUSpatialMixerV2InputElement::MustProcessPostProcReverb(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v11;

  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 86));
  if ((v2 & 1) != 0 && (v3 = atomic_load((unsigned int *)this + 282), v3 == 7))
  {
    v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
    v5 = v4 == 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = atomic_load((unsigned int *)this + 282);
  v7 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
  v8 = atomic_load((unsigned int *)this + 317);
  AUSM::GlobalProperties::hasXTCIR(*((AUSM::GlobalProperties **)this + 161));
  if (v6 != 7 || v7 != 1 || v8 > 3)
  {
    if (!v5)
      return 0;
  }
  else if (((0xEu >> (v8 & 0xF)) & 1) == 0)
  {
    return 0;
  }
  v11 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
  if (v11 == 1)
    return 0;
  return v11 || *(_DWORD *)(*((_QWORD *)this + 210) + 108) < 2u;
}

BOOL AUSpatialMixerV2InputElement::MustProcessInternalReverb(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v8;

  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 85));
  v3 = atomic_load((unsigned int *)this + 282);
  v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 161) + 88));
  v5 = atomic_load((unsigned int *)this + 317);
  AUSM::GlobalProperties::hasXTCIR(*((AUSM::GlobalProperties **)this + 161));
  if (v3 == 7 && v4 == 1)
  {
    if (v5 < 4 || (v2 & 1) == 0)
      return 0;
  }
  else if ((v2 & 1) == 0)
  {
    return 0;
  }
  v8 = atomic_load((unsigned int *)(*((_QWORD *)this + 211) + 80));
  if (v8 == 1)
    return 0;
  return v8 || *(_DWORD *)(*((_QWORD *)this + 210) + 108) < 2u;
}

uint64_t AUSpatialMixerV2InputElement::ResetReverbProcessors(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD **i;
  _QWORD *v7;
  char *v9;
  char v10;

  v4 = a1 + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1 + 720);
  v5 = *(_QWORD ***)(a1 + 248);
  for (i = *(_QWORD ***)(a1 + 256); v5 != i; ++v5)
  {
    v7 = *v5;
    if (*v5)
    {
      v9 = (char *)v7 + 772;
      v10 = 1;
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)v7 + 772));
      AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(v7, a2);
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v4);
}

void sub_1B6311A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataAttributes::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)a2;
  if (!(*(_QWORD *)a1 | v4))
    return 1;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  result = 0;
  if (v3)
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      if (v4)
      {
        result = applesauce::CF::operator==(v3, v4);
        if ((_DWORD)result)
        {
          v7 = *(_QWORD *)(a1 + 64);
          v8 = *(_QWORD *)(a2 + 64);
          if (v7)
          {
            if (!v8)
              return 0;
            result = applesauce::CF::operator==(v7, v8);
            if (!(_DWORD)result)
              return result;
          }
          else if (v8)
          {
            return 0;
          }
          if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
            && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
            && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
            && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
          {
            v9 = *(_QWORD *)(a1 + 88);
            v10 = *(_QWORD *)(a2 + 88);
            if (v9)
            {
              if (v10)
              {
                result = applesauce::CF::operator==(v9, v10);
                if (!(_DWORD)result)
                  return result;
                goto LABEL_28;
              }
            }
            else if (!v10)
            {
LABEL_28:
              if (*(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
                && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
                && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
                && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
                && *(float *)(a1 + 116) == *(float *)(a2 + 116)
                && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
                && *(float *)(a1 + 136) == *(float *)(a2 + 136)
                && *(float *)(a1 + 140) == *(float *)(a2 + 140)
                && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144)
                && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
              {
                return *(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120);
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL applesauce::CF::operator==(unint64_t cf1, unint64_t a2)
{
  _BOOL8 result;

  result = (cf1 | a2) == 0;
  if (cf1)
  {
    if (a2)
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::GetHeadTrackedEarlyReflectionsFilterParams(int *a1, uint64_t a2, int a3)
{
  _QWORD **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  _BYTE v23[28];

  v22 = a2 + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 720);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  a1[6] = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = *(_QWORD ***)(a2 + 248);
  if (v6 != *(_QWORD ***)(a2 + 256))
  {
    AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams((uint64_t)v23, *v6, a3);
    *(_OWORD *)a1 = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)&v23[12];
    v7 = *(_QWORD *)(a2 + 248);
    if ((unint64_t)(*(_QWORD *)(a2 + 256) - v7) >= 9)
    {
      v8 = *a1;
      v9 = a1[1];
      v10 = a1[2];
      v11 = a1[3];
      v12 = 1;
      v14 = a1[4];
      v13 = a1[5];
      do
      {
        AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams((uint64_t)v23, *(_QWORD **)(v7 + 8 * v12), a3);
        v15 = *(_DWORD *)&v23[4];
        if (*(_DWORD *)&v23[4] > v9)
        {
          a1[1] = *(_DWORD *)&v23[4];
          v9 = v15;
        }
        v16 = *(_DWORD *)&v23[8];
        if (*(_DWORD *)&v23[8] > v10)
        {
          a1[2] = *(_DWORD *)&v23[8];
          v10 = v16;
        }
        v17 = *(_DWORD *)&v23[12];
        if (*(_DWORD *)&v23[12] > v11)
        {
          a1[3] = *(_DWORD *)&v23[12];
          v11 = v17;
        }
        v18 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 > v8)
        {
          *a1 = *(_DWORD *)v23;
          v8 = v18;
        }
        v19 = *(_DWORD *)&v23[16];
        if (*(_DWORD *)&v23[16] > v14)
        {
          a1[4] = *(_DWORD *)&v23[16];
          v14 = v19;
        }
        v20 = *(_DWORD *)&v23[20];
        if (*(_DWORD *)&v23[20] > v13)
        {
          a1[5] = *(_DWORD *)&v23[20];
          v13 = v20;
        }
        ++v12;
        v7 = *(_QWORD *)(a2 + 248);
      }
      while (v12 < (*(_QWORD *)(a2 + 256) - v7) >> 3);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v22);
}

void sub_1B6311E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetEnableForChannel(AUSpatialMixerV2InputElement *this, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;

  v6 = (char *)this + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 720);
  v7 = *((_QWORD *)this + 31);
  if (a3 < (unint64_t)((*((_QWORD *)this + 32) - v7) >> 3))
    AUSpatialMixerV2ChannelProcessor::setEnable(*(AUSpatialMixerV2ChannelProcessor **)(v7 + 8 * a3), a2);
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
}

void sub_1B6311EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 AUSpatialMixerV2InputElement::GetChannelParameters(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  __n128 v28;
  __n128 result;
  __n128 v30;
  __int128 v31;
  int v32;

  v3 = atomic_load((unsigned __int8 *)(a2 + 680));
  if ((v3 & 1) != 0)
  {
    v6 = a2 + 720;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 720);
    v7 = *(uint64_t **)(a2 + 248);
    v8 = *(uint64_t **)(a2 + 256);
    if (v7 == v8)
    {
      v4 = 0;
      v30 = 0u;
    }
    else
    {
      v4 = 0;
      v30 = 0u;
      do
      {
        v9 = *v7;
        v32 = *(_DWORD *)(*v7 + 1004);
        v31 = *(_OWORD *)(*v7 + 988);
        v10 = *(float *)(*v7 + 1140);
        v11 = *(float *)(*v7 + 1136);
        v12 = atan2f(v10, v11) * 57.296;
        v13 = *(float *)(v9 + 1144);
        v14 = hypotf(v11, v10);
        v15 = atan2f(-v13, v14) * 57.296;
        v16 = sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v13 * v13));
        v17 = v30.n128_u64[1];
        if (v30.n128_u64[1] >= v4)
        {
          v19 = (void *)v30.n128_u64[0];
          v20 = (uint64_t)(v30.n128_u64[1] - v30.n128_u64[0]) >> 5;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v4 - v30.n128_u64[0]) >> 4 > v21)
            v21 = (uint64_t)(v4 - v30.n128_u64[0]) >> 4;
          if (v4 - v30.n128_u64[0] >= 0x7FFFFFFFFFFFFFE0)
            v22 = 0x7FFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v22);
          else
            v23 = 0;
          v24 = v22 + 32 * v20;
          *(float *)v24 = v12;
          *(float *)(v24 + 4) = v15;
          *(float *)(v24 + 8) = v16;
          *(_OWORD *)(v24 + 12) = v31;
          *(_DWORD *)(v24 + 28) = v32;
          if (v30.n128_u64[1] == v30.n128_u64[0])
          {
            v27 = v22 + 32 * v20;
          }
          else
          {
            v25 = v22 + 32 * v20;
            do
            {
              v26 = *(_OWORD *)(v17 - 16);
              v27 = v25 - 32;
              *(_OWORD *)(v25 - 32) = *(_OWORD *)(v17 - 32);
              *(_OWORD *)(v25 - 16) = v26;
              v17 -= 32;
              v25 -= 32;
            }
            while (v17 != v30.n128_u64[0]);
          }
          v4 = v22 + 32 * v23;
          v18 = v24 + 32;
          v30.n128_u64[0] = v27;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(float *)v30.n128_u64[1] = v12;
          *(float *)(v30.n128_u64[1] + 4) = v15;
          *(float *)(v30.n128_u64[1] + 8) = v16;
          *(_DWORD *)(v30.n128_u64[1] + 28) = v32;
          *(_OWORD *)(v30.n128_u64[1] + 12) = v31;
          v18 = v30.n128_u64[1] + 32;
        }
        v28.n128_u64[0] = v30.n128_u64[0];
        v28.n128_u64[1] = v18;
        v30 = v28;
        ++v7;
      }
      while (v7 != v8);
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v6);
  }
  else
  {
    v4 = 0;
    v30 = 0u;
  }
  result = v30;
  *(__n128 *)this = v30;
  *((_QWORD *)this + 2) = v4;
  return result;
}

void sub_1B6312120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2InputElement::GetGeometry(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  __n128 **v3;
  __n128 *v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  const simd_quatf *v10;
  CFDictionaryRef CFDictionaryRef;
  uint64_t j;
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t n;
  const void *v17;
  const void *v18;
  const simd_quatf *v19;
  uint64_t k;
  const void *v21;
  const void *v22;
  uint64_t m;
  const void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  CFDictionaryRef *v33;
  unint64_t v34;
  _QWORD *v35;
  const __CFDictionary *v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v41;
  __n128 **i;
  __int128 v43;
  unint64_t v44;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  void ***v50;
  uint64_t v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  void **v60;
  __int128 v61;
  unint64_t v62;
  _QWORD v63[2];
  _BYTE v64[16];
  _BYTE v65[16];
  _BYTE v66[16];
  _BYTE v67[16];
  _BYTE v68[16];
  _BYTE v69[16];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v41 = a2 + 720;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 720);
  v43 = 0uLL;
  v44 = 0;
  v3 = *(__n128 ***)(a2 + 248);
  for (i = *(__n128 ***)(a2 + 256); v3 != i; ++v3)
  {
    v4 = *v3;
    v60 = (void **)&(*v3)[47];
    LOBYTE(v61) = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)v60);
    v5 = v4[43];
    v6 = v4[45];
    v7 = v4[46];
    v57 = v4[44];
    v58 = v6;
    v59 = v7;
    v8 = v4[40];
    v52 = v4[39];
    v53 = v8;
    v9 = v4[42];
    v54 = v4[41];
    v55 = v9;
    v56 = v5;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v60);
    if (v53.n128_u8[0] && v57.n128_u8[0])
    {
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v49, v52.n128_f64[0], v52.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v60, "SourcePosition", &v49);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v48, v56.n128_f64[0], v56.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v61 + 8), "SourceSize", &v48);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v59);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],float const&>((applesauce::CF::TypeRef *)v64, &v59.n128_i32[1]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],float const&>((applesauce::CF::TypeRef *)v65, &v59.n128_i32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>((applesauce::CF::TypeRef *)v66, &v53.n128_i32[1]);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v47, v54.n128_f64[0], v54.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v67, &v47);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v46, v55.n128_f64[0], v55.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v68, &v46);
      AUSM::ObjectParameters::createArray((AUSM::ObjectParameters *)&cf, v10, v58);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v69, &cf);
      v50 = &v60;
      v51 = 9;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v50);
      for (j = 0; j != -144; j -= 16)
      {
        v13 = *(const void **)&v69[j + 8];
        if (v13)
          CFRelease(v13);
        v14 = *(const void **)&v69[j];
        if (v14)
          CFRelease(v14);
      }
      if (cf)
        CFRelease(cf);
      if (v46)
        CFRelease(v46);
      if (v47)
        CFRelease(v47);
      if (v48)
        CFRelease(v48);
      v15 = v49;
      if (!v49)
        goto LABEL_58;
    }
    else if (v53.n128_f32[1] <= 0.0)
    {
      if (v57.n128_u8[0])
      {
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v49, v52.n128_f64[0], v52.n128_f32[2]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v60, "SourcePosition", &v49);
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v48, v56.n128_f64[0], v56.n128_f32[2]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v61 + 8), "SourceSize", &v48);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v59);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],float const&>((applesauce::CF::TypeRef *)v64, &v59.n128_i32[1]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],float const&>((applesauce::CF::TypeRef *)v65, &v59.n128_i32[2]);
        AUSM::ObjectParameters::createArray((AUSM::ObjectParameters *)&v47, v19, v58);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v66, &v47);
        v50 = &v60;
        v51 = 6;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v50);
        for (k = 0; k != -96; k -= 16)
        {
          v21 = *(const void **)&v66[k + 8];
          if (v21)
            CFRelease(v21);
          v22 = *(const void **)&v66[k];
          if (v22)
            CFRelease(v22);
        }
        if (v47)
          CFRelease(v47);
        if (v48)
          CFRelease(v48);
        v15 = v49;
        if (!v49)
          goto LABEL_58;
      }
      else
      {
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v49, v52.n128_f64[0], v52.n128_f32[2]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v60, "SourcePosition", &v49);
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v48, v56.n128_f64[0], v56.n128_f32[2]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v61 + 8), "SourceSize", &v48);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v59);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],float const&>((applesauce::CF::TypeRef *)v64, &v59.n128_i32[1]);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],float const&>((applesauce::CF::TypeRef *)v65, &v59.n128_i32[2]);
        v50 = &v60;
        v51 = 5;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v50);
        for (m = 0; m != -80; m -= 16)
        {
          v24 = *(const void **)&v65[m + 8];
          if (v24)
            CFRelease(v24);
          v25 = *(const void **)&v65[m];
          if (v25)
            CFRelease(v25);
        }
        if (v48)
          CFRelease(v48);
        v15 = v49;
        if (!v49)
          goto LABEL_58;
      }
    }
    else
    {
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v49, v52.n128_f64[0], v52.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v60, "SourcePosition", &v49);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v48, v56.n128_f64[0], v56.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v61 + 8), "SourceSize", &v48);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v59);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],float const&>((applesauce::CF::TypeRef *)v64, &v59.n128_i32[1]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],float const&>((applesauce::CF::TypeRef *)v65, &v59.n128_i32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>((applesauce::CF::TypeRef *)v66, &v53.n128_i32[1]);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v47, v54.n128_f64[0], v54.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v67, &v47);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v46, v55.n128_f64[0], v55.n128_f32[2]);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v68, &v46);
      v50 = &v60;
      v51 = 8;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v50);
      for (n = 0; n != -128; n -= 16)
      {
        v17 = *(const void **)&v68[n + 8];
        if (v17)
          CFRelease(v17);
        v18 = *(const void **)&v68[n];
        if (v18)
          CFRelease(v18);
      }
      if (v46)
        CFRelease(v46);
      if (v47)
        CFRelease(v47);
      if (v48)
        CFRelease(v48);
      v15 = v49;
      if (!v49)
        goto LABEL_58;
    }
    CFRelease(v15);
LABEL_58:
    v26 = (_QWORD *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) >= v44)
    {
      v27 = (_QWORD *)v43;
      v28 = (uint64_t)(*((_QWORD *)&v43 + 1) - v43) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v30 = v44 - v43;
      if ((uint64_t)(v44 - v43) >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v63[0] = &v44;
      if (v31)
      {
        v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v31);
        v26 = (_QWORD *)*((_QWORD *)&v43 + 1);
        v27 = (_QWORD *)v43;
      }
      else
      {
        v32 = 0;
      }
      v33 = (CFDictionaryRef *)(v31 + 8 * v28);
      v34 = v31 + 8 * v32;
      v62 = v34;
      *v33 = CFDictionaryRef;
      v35 = v33 + 1;
      *((_QWORD *)&v61 + 1) = v33 + 1;
      if (v26 != v27)
      {
        do
        {
          v36 = (const __CFDictionary *)*--v26;
          *--v33 = v36;
          *v26 = 0;
        }
        while (v26 != v27);
        v35 = (_QWORD *)*((_QWORD *)&v61 + 1);
        v34 = v62;
      }
      v37 = v43;
      *(_QWORD *)&v43 = v33;
      v61 = v37;
      v38 = v44;
      v44 = v34;
      v62 = v38;
      v60 = (void **)v37;
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v60);
      *((_QWORD *)&v43 + 1) = v35;
    }
    else
    {
      **((_QWORD **)&v43 + 1) = CFDictionaryRef;
      *((_QWORD *)&v43 + 1) = v26 + 1;
    }
  }
  *(_QWORD *)this = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v43);
  v60 = (void **)&v43;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v60);
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v41);
}

void sub_1B6312838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef cf,CFTypeRef a33,uint64_t a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AUSM::ObjectParameters::createArray(CFArrayRef *a1, double a2, float a3)
{
  float *v6;
  void *__p;
  void *v8;
  char *v9;

  v6 = (float *)operator new(0xCuLL);
  v8 = v6 + 3;
  v9 = (char *)(v6 + 3);
  *(double *)v6 = a2;
  v6[2] = a3;
  __p = v6;
  *a1 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1B6312DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  CFNumberRef v4;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, "SceneDistanceGainLin");
  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6312EA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  CFNumberRef v4;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, "GainLin");
  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6312F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  CFNumberRef v4;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, "DRRLin");
  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6313040(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  CFNumberRef v4;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, "Divergence");
  valuePtr = *a2;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6313110(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  const void *v4;

  applesauce::CF::TypeRef::TypeRef(a1, "DivergenceLeftPosition");
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)a1 + 1) = v4;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  const void *v4;

  applesauce::CF::TypeRef::TypeRef(a1, "DivergenceRightPosition");
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)a1 + 1) = v4;
  return a1;
}

void AUSM::ObjectParameters::createArray(AUSM::ObjectParameters *this, const simd_quatf *a2, __n128 a3)
{
  __n128 *v4;
  void *__p;
  __n128 *v7;
  __n128 *v8;

  v4 = (__n128 *)operator new(0x10uLL);
  __p = v4;
  *v4 = a3;
  v7 = v4 + 1;
  v8 = v4 + 1;
  *(_QWORD *)this = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  if (__p)
  {
    v7 = (__n128 *)__p;
    operator delete(__p);
  }
}

void sub_1B6313238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  const void *v4;

  applesauce::CF::TypeRef::TypeRef(a1, "SourceOrientation");
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)a1 + 1) = v4;
  return a1;
}

uint64_t AUSpatialMixerV2InputElement::PullSharedInput(AUSpatialMixerV2InputElement *this, AudioBufferList *ioData, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, uint64_t a5, uint64_t inNumberFrames)
{
  int v6;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  NSObject *v15;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 43);
  if (!v6)
    return 4294956420;
  if (v6 == 1)
    v10 = AudioUnitRender(*((AudioUnit *)this + 24), ioActionFlags, inTimeStamp, *((_DWORD *)this + 50), inNumberFrames, ioData);
  else
    v10 = (*((uint64_t (**)(_QWORD, AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))this
           + 22))(*((_QWORD *)this + 23), ioActionFlags, inTimeStamp, a5, inNumberFrames, ioData);
  if (*((_DWORD *)this + 43))
    v11 = v10;
  else
    v11 = 4294956420;
  if (*((_QWORD *)this + 86))
  {
    v12 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 161) + 84));
    v13 = (v12 & 1) != 0
        ? MEMORY[0x1E0CFF680](*((_QWORD *)this + 86), inNumberFrames, ioData)
        : MEMORY[0x1E0CFF688](*((_QWORD *)this + 86), inNumberFrames, ioData);
    if (v13)
    {
      v14 = v13;
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v15 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v17 = (_QWORD *)((char *)this + 1952);
        if (*((char *)this + 1975) < 0)
          v17 = (_QWORD *)*v17;
        v18 = 136315650;
        v19 = v17;
        v20 = 2080;
        v21 = "PullSharedInput";
        v22 = 1024;
        v23 = v14;
        _os_log_debug_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "[%s|%s] Error writing input data to file, %d", (uint8_t *)&v18, 0x1Cu);
      }
    }
  }
  return v11;
}

uint64_t AUSpatialMixerV2InputElement::Process(uint64_t a1, AudioUnitRenderActionFlags *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, unsigned int a10)
{
  uint64_t jj;
  int v13;
  double v14;
  double v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  AUSM *v23;
  float **v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  float v29;
  float v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  DSPSplitComplex *v41;
  AudioBufferList *p_A;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 v46;
  int v47;
  double v48;
  float Parameter;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  unint64_t v54;
  float v55;
  float v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  AUSpatialMixerV2 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  float v74;
  uint64_t v75;
  unsigned int v76;
  double v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  double v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  int v96;
  float v97;
  uint64_t v98;
  _OWORD *v99;
  int v100;
  int v101;
  double v102;
  unint64_t v103;
  unint64_t v104;
  double v105;
  double v106;
  __int128 v107;
  __int128 v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int *BufferList;
  unsigned int *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t (*v120)(_QWORD, vDSP_Length, unsigned int *);
  int v121;
  NSObject *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float **v173;
  unint64_t v174;
  int v175;
  int v176;
  float *v177;
  _WORD *v178;
  uint64_t v179;
  _BYTE *v180;
  vDSP_Length v181;
  UInt32 v182;
  float *v184;
  float *v185;
  int v186;
  _WORD *v187;
  _WORD *v188;
  _WORD *v189;
  vDSP_Length v190;
  UInt32 v191;
  unsigned int *v192;
  AudioConverterRef *v193;
  unsigned int *v194;
  uint64_t v195;
  IR::FixedIntegerDelay *v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  int v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  CLiteMatrix *v203;
  CLiteMatrix *v204;
  void *v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  float v218;
  char v219;
  char v220;
  float v221;
  MultiRadixRealFFT *v222;
  uint64_t v223;
  float *v224;
  _DWORD *v225;
  vDSP_Length v226;
  uint64_t v227;
  float *v228;
  float *v229;
  float *v230;
  const DSPSplitComplex *v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t i;
  uint64_t v236;
  uint64_t v237;
  MultiRadixRealFFT *v238;
  uint64_t v239;
  char v240;
  char v241;
  uint64_t v242;
  const void *v243;
  uint64_t v244;
  const void **v245;
  char *v246;
  char *v247;
  unsigned int v248;
  BOOL v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  _DWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  BOOL v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  float *v270;
  uint64_t v271;
  uint64_t v272;
  float *v273;
  unsigned int v274;
  uint64_t v275;
  float v276;
  int v277;
  float v278;
  uint64_t v279;
  float *v280;
  float *v281;
  float v282;
  float v283;
  BOOL v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  float *v288;
  float *v289;
  float *v290;
  float *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  float *v295;
  float *v296;
  int v297;
  float *v298;
  uint64_t v299;
  float v300;
  int v301;
  float v302;
  uint64_t v303;
  uint64_t v304;
  float *v305;
  int v306;
  uint64_t v307;
  ausdk::AUElement ***v308;
  unsigned __int8 v309;
  NSObject *v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned int v313;
  float v315;
  float v316;
  unsigned __int8 v317;
  float v318;
  float v319;
  unsigned __int8 v320;
  float v321;
  float *v323;
  float *v324;
  unsigned int *v325;
  uint64_t v326;
  uint64_t *v327;
  float *realp;
  const vDSP_biquad_SetupStruct *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  float v334;
  NSObject *v335;
  _QWORD *v336;
  IR::DelayLine *v337;
  int v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  int v342;
  float v343;
  float v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  unsigned __int8 *v348;
  uint64_t v349;
  int v350;
  float v351;
  IR::FixedIntegerDelay *v352;
  unsigned int v353;
  uint64_t v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  unsigned __int8 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unsigned int v366;
  uint64_t v367;
  IR::FixedIntegerDelay *v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  unsigned __int8 v373;
  uint64_t v374;
  uint64_t v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  unsigned __int8 v384;
  unsigned __int8 v385;
  unsigned int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  float v392;
  float *v393;
  float *v394;
  vDSP_Length v395;
  float v396;
  float v397;
  vDSP_Length v398;
  float *v399;
  float v400;
  unsigned int v401;
  uint64_t v402;
  unsigned __int8 v403;
  float v404;
  unsigned int v405;
  int *v406;
  int v407;
  int v408;
  float v409;
  float v410;
  float v411;
  float v412;
  int v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  unsigned int v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  CLiteMatrix *v423;
  float v424;
  CLiteMatrix *v425;
  int v426;
  uint64_t j;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  CLiteMatrix *v438;
  uint64_t v439;
  void *v440;
  const void *v441;
  void *v442;
  void *v443;
  const void *v444;
  CLiteMatrix *v445;
  CLiteMatrix *v446;
  CLiteMatrix *v447;
  CLiteMatrix *v448;
  int v449;
  vDSP_Length *v450;
  CLiteMatrix *v451;
  CLiteMatrix *v452;
  float v453;
  float v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  CLiteMatrix *v459;
  unint64_t k;
  float v461;
  CLiteMatrix *v462;
  const float **v463;
  _QWORD *v464;
  CLiteMatrix *v465;
  CLiteMatrix *v466;
  unint64_t v467;
  int v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  int v473;
  int *v474;
  int v475;
  _DWORD *v476;
  unint64_t v477;
  int v478;
  unint64_t v479;
  int v480;
  int *v481;
  int v482;
  _DWORD *v483;
  unint64_t v484;
  unint64_t v485;
  int v486;
  int *v487;
  int v488;
  _DWORD *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  CLiteMatrix *v494;
  void *v495;
  const void *v496;
  void *v497;
  const void *v498;
  void *v499;
  const void *v500;
  void *v501;
  const void *v502;
  CLiteMatrix *v503;
  void *v504;
  const void *v505;
  void *v506;
  const void *v507;
  void *v508;
  const void *v509;
  void *v510;
  const void *v511;
  CLiteMatrix *v512;
  CLiteMatrix *v513;
  CLiteMatrix *v514;
  void *v515;
  void *v516;
  CLiteMatrix *v517;
  CLiteMatrix *v518;
  int64_t v519;
  float v520;
  float v521;
  float *v522;
  float v523;
  float *v524;
  float v525;
  float *v526;
  int v527;
  void *v528;
  const void *v529;
  void *v530;
  void *v531;
  const void *v532;
  int v533;
  unint64_t v534;
  int v535;
  uint64_t v536;
  int *v537;
  int *v538;
  uint64_t v539;
  int v540;
  unint64_t v541;
  int v542;
  int v543;
  int *v544;
  int v545;
  _DWORD *v546;
  CLiteMatrix *v547;
  uint64_t v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  unint64_t m;
  uint64_t v559;
  unint64_t n;
  _DWORD *v561;
  uint64_t v562;
  _DWORD *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  char v570;
  float *v571;
  float v572;
  float v573;
  char v574;
  float v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  _DWORD *v579;
  _DWORD *v580;
  uint64_t v581;
  const void *v582;
  int v583;
  uint64_t v584;
  int v585;
  int v586;
  int v587;
  int ii;
  int v589;
  float *v590;
  int v591;
  int v592;
  int v593;
  int v594;
  float v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  UInt32 mNumberBuffers;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  unsigned int v603;
  int v604;
  unsigned int v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unsigned int v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  void **v615;
  void **v616;
  unsigned __int8 v617;
  unsigned int v618;
  uint64_t v619;
  _QWORD *SampleDataPtrs;
  uint64_t v621;
  uint64_t *v622;
  uint64_t *v623;
  uint64_t v624;
  int v625;
  int v626;
  const char *v627;
  const char *v628;
  uint64_t v629;
  _QWORD *v631;
  double v632;
  uint64_t v633;
  uint64_t v634;
  float **v635;
  int v636;
  ausdk::AUBufferList *v637;
  _OWORD *v638;
  _OWORD *v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int v642;
  float v643;
  IR::ComplexDataCircBuffer *v644;
  unsigned int v646;
  uint64_t *v649;
  _QWORD *v650;
  const float **v653;
  int v654;
  _BOOL4 v655;
  unsigned int v656[2];
  uint64_t v657;
  unsigned int v658;
  uint64_t *v659;
  covarianceBasedAdaptiveFilter *v660;
  CLiteMatrix *v662;
  CLiteMatrix *v663;
  vDSP_Length __N;
  uint64_t v665;
  CLiteMatrix *v666;
  CLiteMatrix *v667;
  CLiteMatrix *v668;
  const CLiteMatrix *v669;
  CLiteMatrix *v670;
  CLiteMatrix *v671;
  CLiteMatrix *v672;
  CLiteMatrix *v673;
  CLiteMatrix *v674;
  uint64_t v675;
  uint64_t v676;
  CLiteMatrix *v677;
  CLiteMatrix *v678;
  CLiteMatrix *v679;
  CLiteMatrix *v680;
  CLiteMatrix *v681;
  vDSP_Length *v682;
  vDSP_Length *v683;
  DSPSplitComplex *v684;
  DSPSplitComplex *v685;
  DSPSplitComplex *v686;
  DSPSplitComplex *__B;
  unsigned int __Ba;
  DSPSplitComplex *__Bb;
  int v690;
  unsigned int v691;
  CLiteMatrix *v692;
  unsigned int v693;
  float v694;
  CLiteMatrix *v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  float v701;
  float __Step;
  float v703;
  float **v704;
  char v705;
  uint64_t v706;
  char v707;
  AudioBufferList __A;
  DSPSplitComplex v709;
  float *__Start;
  unsigned int v711;
  unsigned int v712;
  float v713;
  float v714;
  AudioTimeStamp inTimeStamp;
  AudioBufferList __C;
  const float **p_Start;
  unsigned int *v718;
  float ***v719;
  DSPSplitComplex *v720;
  float *v721;
  uint64_t v722;

  jj = a1;
  v722 = *MEMORY[0x1E0C80C00];
  v706 = a1 + 704;
  v13 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1 + 704);
  v707 = v13;
  if (!v13)
    goto LABEL_57;
  v14 = *(double *)(jj + 80);
  v642 = *(_DWORD *)(jj + 104);
  *(_QWORD *)v656 = *(unsigned int *)(jj + 108);
  v15 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(jj + 216) + 128), 0) + 80);
  if (*(_BYTE *)(*(_QWORD *)(jj + 288) + 40))
  {
    v16 = atomic_load((unsigned __int8 *)(jj + 352));
    if ((v16 & 1) != 0)
    {
      atomic_store(0, (unsigned __int8 *)(jj + 352));
      v17 = *(_QWORD *)(jj + 1296);
      if (*(_BYTE *)(v17 + 160))
      {
        v18 = *(_QWORD *)(v17 + 152);
        if (v18)
          LODWORD(v18) = *(_DWORD *)(v18 + 64);
      }
      else
      {
        LODWORD(v18) = 0;
      }
      v19 = v18;
      if (v18 < (unint64_t)((uint64_t)(*(_QWORD *)(jj + 256) - *(_QWORD *)(jj + 248)) >> 3))
      {
        v20 = 0;
        v21 = v18 + 1;
        do
        {
          __C.mNumberBuffers = 1065353216;
          vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)(jj + 288) + 16)+ 4 * (*(_DWORD *)(*(_QWORD *)(jj + 288) + 24) * v20)+ 4 * *(unsigned int *)(*(_QWORD *)(jj + 288) + 32)), 1, (float *)&__C.mNumberBuffers, *(unsigned int *)(*(_QWORD *)(jj + 288) + 36));
          v22 = *(_QWORD *)(jj + 248);
          *(_DWORD *)(*(_QWORD *)(v22 + 8 * v19) + 944) = __C.mNumberBuffers;
          v19 = (v21 + v20++);
        }
        while (v19 < (*(_QWORD *)(jj + 256) - v22) >> 3);
      }
    }
  }
  v23 = (AUSM *)AUSM::InputGeometry::update((AUSM::InputGeometry *)(jj + 1680), 0);
  if ((_DWORD)v23)
  {
    v24 = *(float ***)(jj + 360);
    if (v24)
    {
      v25 = *(float32x4_t *)(jj + 1824);
      v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B66A1F00);
      v27 = (int8x16_t)vmulq_f32(v26, v26);
      if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))) <= 0.00000011921)
      {
        HOA::RotationMatrix::setIdentity(*(float ***)(jj + 360));
        v31 = 0;
      }
      else
      {
        v28 = AUSM::auCoordQuaternionToEuler(v23, v25);
        HOA::RotationMatrix::setRotationMatrixYPR(v24, v28, v29, v30);
        v31 = 1;
      }
      *(_BYTE *)(jj + 385) = v31;
      HOA::RotationMatrix::toRegularMatrix(*(_QWORD *)(jj + 360), **(char ***)(jj + 376), (uint64_t)(*(_QWORD *)(*(_QWORD *)(jj + 376) + 8) - **(_QWORD **)(jj + 376)) >> 2);
      *(_BYTE *)(jj + 384) = 1;
    }
  }
  v32 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1288) + 2480));
  if (v32 == 2
    && *(_QWORD *)(jj + 1304)
    && *(float *)(jj + 1316) != 0.0
    && (v33 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1688) + 80)), v33 == 3)
    && (v34 = atomic_load((unsigned int *)(jj + 1128)), v34 == 7))
  {
    v35 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1288) + 2480));
    v36 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1688) + 80));
    if (v36 == 3 && v35 == 2)
    {
      if (*(_BYTE *)(*(_QWORD *)(jj + 1288) + 2544)
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(jj + 1688) + 232) + 2544))
      {
        v37 = 0;
      }
      else
      {
        v629 = *(_QWORD *)(jj + 1696);
        if (atomic_load((unsigned int *)(v629 + 408)))
          v37 = 1;
        else
          v37 = *(_DWORD *)(v629 + 412) != 0;
      }
      v38 = *(_QWORD *)(jj + 1304);
      *(_BYTE *)(v38 + 212) = v37;
      v39 = *(uint64_t **)(jj + 248);
      v40 = (*(_QWORD *)(jj + 256) - (_QWORD)v39) >> 3;
      if (v40 >= 4)
        v40 = 4;
      else
        v40 = v40;
      if ((_DWORD)v40)
      {
        v41 = &v709;
        p_A = &__A;
        do
        {
          v43 = *v39++;
          v44 = *(_QWORD *)(v43 + 480);
          v45 = *(_DWORD *)(v44 + 52);
          p_A->mNumberBuffers = *(_DWORD *)(v44 + 48);
          p_A = (AudioBufferList *)((char *)p_A + 4);
          LODWORD(v41->realp) = v45;
          v41 = (DSPSplitComplex *)((char *)v41 + 4);
          --v40;
        }
        while (v40);
      }
      vDSP_vsmul((const float *)&__A.mNumberBuffers, 1, &AUSM::kDeg2Rad, (float *)&__C.mNumberBuffers, 1, 4uLL);
      vDSP_vsmul((const float *)&v709, 1, &AUSM::kDeg2Rad, (float *)&inTimeStamp, 1, 4uLL);
      HOA::sphericalHarmonics((HOA *)&__C, (const float *)&inTimeStamp, (const float *)4, *(_QWORD *)(v38 + 4336), (float *)1);
    }
  }
  else
  {
    atomic_load((unsigned int *)(*(_QWORD *)(jj + 1688) + 80));
  }
  v46 = atomic_load((unsigned __int8 *)(jj + 696));
  if ((v46 & 1) != 0)
  {
    *(_QWORD *)&__C.mNumberBuffers = jj + 720;
    v47 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(jj + 720);
    v48 = v14;
    LOBYTE(__C.mBuffers[0].mNumberChannels) = v47;
    if (v47)
    {
      atomic_store(0, (unsigned __int8 *)(jj + 696));
      Parameter = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 0xAu);
      v50 = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 0xBu);
      v51 = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 5u);
      v52 = *(_QWORD *)(jj + 248);
      if (*(_QWORD *)(jj + 256) != v52)
      {
        v53 = v51;
        v54 = 0;
        v55 = 0.0;
        if (Parameter <= 0.0)
          v56 = Parameter;
        else
          v56 = 0.0;
        if (Parameter < -100.0)
          v56 = -100.0;
        v57 = LODWORD(v56);
        if (v50 <= 0.0)
          v55 = v50;
        if (v50 < -100.0)
          v55 = -100.0;
        v58 = LODWORD(v55);
        v59 = 1;
        do
        {
          atomic_store(v57, (unsigned int *)(*(_QWORD *)(v52 + 8 * v54) + 104));
          atomic_store(v58, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(jj + 248) + 8 * v54) + 128));
          AUSpatialMixerV2ChannelProcessor::setEnable(*(AUSpatialMixerV2ChannelProcessor **)(*(_QWORD *)(jj + 248) + 8 * v54), v53 != 0.0);
          v54 = v59;
          v52 = *(_QWORD *)(jj + 248);
          ++v59;
        }
        while (v54 < (*(_QWORD *)(jj + 256) - v52) >> 3);
      }
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&__C);
    v14 = v48;
  }
  v60 = *(uint64_t **)(jj + 248);
  v61 = *(uint64_t **)(jj + 256);
  if (v60 == v61)
  {
LABEL_57:
    *a2 |= 0x10u;
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v706);
  }
  while (1)
  {
    v62 = *v60;
    if (*(_BYTE *)(*v60 + 788) || *(_BYTE *)(v62 + 789))
      break;
    if ((*(_QWORD *)(v62 + 144) || *(_QWORD *)(v62 + 152)) && *(_DWORD *)(v62 + 780) < *(_DWORD *)(v62 + 784))
      break;
    if (++v60 == v61)
      goto LABEL_57;
  }
  v659 = (uint64_t *)(a4 + 224);
  if (*(_QWORD *)v656 <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 232) - *(_QWORD *)(a4 + 224)) >> 5))
  {
    v64 = *(AUSpatialMixerV2 **)(jj + 216);
    v65 = *((_DWORD *)v64 + 84);
    v66 = AUSpatialMixerV2::MaxFramesForInputSampleRate(v64, v14);
    if (v66 >= v65)
      v67 = v65;
    else
      v67 = v66;
    v640 = v67;
    v68 = *(_QWORD *)(jj + 216);
    if (*(_BYTE *)(v68 + 540) && *(_DWORD *)(v68 + 536) == 1)
    {
      v654 = 0;
      v69 = 1.0;
    }
    else
    {
      v70 = v14 / v15 * ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 4u);
      v69 = v70;
      if (v70 != 1.0)
      {
        v71 = *(_QWORD *)(jj + 224);
        v72 = *(_QWORD *)(jj + 232);
        if (v71 != v72)
        {
          v73 = vcvtms_s32_f32(v70);
          v74 = v70 - (float)(int)floorf(v70);
          v75 = *(_QWORD *)(jj + 224);
          do
          {
            if (*(float *)v75 != v70)
            {
              *(_DWORD *)(v75 + 12) = v73;
              *(float *)(v75 + 16) = v74;
              *(float *)v75 = v70;
            }
            v75 += 28;
          }
          while (v75 != v72);
        }
        v76 = vcvtps_u32_f32((float)(*(float *)(v71 + 8) + (float)*(int *)(v71 + 4)) + (float)((float)a10 * *(float *)v71));
        v654 = 1;
        goto LABEL_75;
      }
      v654 = 0;
    }
    v76 = a10;
LABEL_75:
    v77 = 1.0 / v69;
    *(double *)(jj + 656) = v77;
    v78 = *(_OWORD *)(jj + 496);
    *(_OWORD *)(jj + 544) = *(_OWORD *)(jj + 480);
    *(_OWORD *)(jj + 560) = v78;
    v79 = *(_OWORD *)(jj + 528);
    *(_OWORD *)(jj + 576) = *(_OWORD *)(jj + 512);
    *(_OWORD *)(jj + 592) = v79;
    *(_QWORD *)(jj + 624) = *(_QWORD *)(jj + 608);
    v80 = *a3;
    v81 = a3[1];
    v82 = a3[3];
    *(_OWORD *)(jj + 512) = a3[2];
    *(_OWORD *)(jj + 528) = v82;
    *(_OWORD *)(jj + 480) = v80;
    *(_OWORD *)(jj + 496) = v81;
    if (!*(_BYTE *)(jj + 635))
    {
      if (*(_BYTE *)(jj + 664))
      {
        v83 = *(_DWORD *)(jj + 536);
        if ((v83 & 2) == 0 && (*(_BYTE *)(jj + 600) & 2) != 0)
        {
          v84 = 1.0;
          if ((v83 & 4) != 0)
            v84 = *(double *)(jj + 496);
          *(_QWORD *)(jj + 488) = *(_QWORD *)(jj + 552)
                                + (unint64_t)(v84
                                                   * ((*(double *)(jj + 480) - *(double *)(jj + 544))
                                                    * 24000000.0)
                                                   / v15);
          *(_DWORD *)(jj + 536) = v83 | 2;
        }
      }
      if (v77 != 1.0)
      {
        v85 = *(_DWORD *)(jj + 536);
        if ((v85 & 4) != 0)
        {
          *(double *)(jj + 496) = *(double *)(jj + 496) * v77;
        }
        else
        {
          *(double *)(jj + 496) = v77;
          *(_DWORD *)(jj + 536) = v85 | 4;
        }
      }
      if (*(_BYTE *)(jj + 672))
      {
        *(_BYTE *)(jj + 672) = 0;
        *(_BYTE *)(jj + 634) = 0;
        *(_QWORD *)(jj + 648) = 0;
        if (!*(_BYTE *)(jj + 632))
        {
          v86 = 640;
          if (!*(_BYTE *)(jj + 633))
            v86 = 480;
          v87 = *(_QWORD *)(jj + v86);
          *(_QWORD *)(jj + 608) = v87;
          *(_QWORD *)(jj + 624) = v87;
        }
      }
      else
      {
        v88 = *(double *)(jj + 480);
        v89 = *(double *)(jj + 616);
        *(_BYTE *)(jj + 634) = v88 != v89;
        v90 = v88 - v89;
        if (v90 < 0.0)
          v90 = 0.0;
        *(double *)(jj + 648) = v90;
      }
      *(double *)(jj + 616) = *(double *)(jj + 480) + (double)a10;
    }
    v638 = (_OWORD *)(jj + 416);
    v639 = (_OWORD *)(jj + 480);
    v91 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1288) + 2480));
    v632 = v14;
    if (v91 == 2
      && *(_QWORD *)(jj + 1304)
      && *(float *)(jj + 1316) != 0.0
      && (v92 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1688) + 80)), v92 == 3)
      && (v93 = atomic_load((unsigned int *)(jj + 1128)), v93 == 7))
    {
      v94 = atomic_load((unsigned int *)(*(_QWORD *)(jj + 1288) + 2480));
      v655 = v94 == 2;
    }
    else
    {
      v655 = 0;
    }
    v646 = 0;
    v650 = (_QWORD *)(a4 + 64);
    v637 = (ausdk::AUBufferList *)(jj + 144);
    v634 = jj + 512;
    v635 = (float **)(jj + 1600);
    v633 = jj + 448;
    v631 = (_QWORD *)(jj + 1952);
    v644 = (IR::ComplexDataCircBuffer *)(a4 + 776);
    if (a5)
      v95 = a7 == 0;
    else
      v95 = 1;
    v96 = !v95;
    v636 = v96;
    v97 = -1.0;
    v657 = jj;
    v643 = a9;
    while (1)
    {
      v641 = v76;
      if (v640 >= v76)
        v98 = v76;
      else
        v98 = v640;
      v99 = v639;
      if (*(_BYTE *)(jj + 635))
        goto LABEL_131;
      v100 = 1;
      *(_DWORD *)(jj + 472) = 1;
      v101 = *(_DWORD *)(jj + 536);
      if ((v101 & 4) != 0)
      {
        v100 = 5;
        *(_DWORD *)(jj + 472) = 5;
        v102 = *(double *)(jj + 496);
        *(double *)(jj + 432) = v102;
        if ((v101 & 2) != 0)
        {
LABEL_115:
          v100 |= 2u;
          *(_DWORD *)(jj + 472) = v100;
          v103 = *(_QWORD *)(jj + 488);
          v104 = *(_QWORD *)(jj + 424);
          if (v104 <= v103)
            v104 = *(_QWORD *)(jj + 488);
          *(_QWORD *)(jj + 424) = v104;
          if (*(_BYTE *)(jj + 664) && *(_BYTE *)(jj + 634) && (*(_BYTE *)(jj + 600) & 2) != 0)
          {
            v105 = *(double *)(jj + 416)
                 + floor(v632 / v102 * ((double)(v103 - *(_QWORD *)(jj + 552)) * 0.0000000416666667) + 0.5);
            *(_BYTE *)(jj + 634) = 0;
          }
          else
          {
            v105 = *(double *)(jj + 608);
            if (!*(_BYTE *)(jj + 664))
              goto LABEL_124;
          }
          goto LABEL_127;
        }
      }
      else
      {
        v102 = 1.0;
        if ((v101 & 2) != 0)
          goto LABEL_115;
      }
      v105 = *(double *)(jj + 608);
      if (!*(_BYTE *)(jj + 664))
      {
LABEL_124:
        v106 = *(double *)(jj + 648);
        if (v106 != 0.0)
        {
          v105 = v105 + floor(v106 / *(double *)(jj + 656) + 0.5);
          *(_QWORD *)(jj + 648) = 0;
        }
      }
LABEL_127:
      *(double *)(jj + 416) = v105;
      *(double *)(jj + 608) = v105 + (double)v98;
      if ((v101 & 8) != 0)
      {
        v100 |= 8u;
        *(_DWORD *)(jj + 472) = v100;
        *(_QWORD *)(jj + 440) = *(_QWORD *)(jj + 504);
      }
      v99 = v638;
      if ((v101 & 0x10) != 0)
      {
        *(_DWORD *)(jj + 472) = v100 | 0x10;
        *(_OWORD *)v633 = *(_OWORD *)v634;
        *(_QWORD *)(v633 + 16) = *(_QWORD *)(v634 + 16);
        v99 = v638;
      }
LABEL_131:
      v107 = v99[1];
      *(_OWORD *)&inTimeStamp.mSampleTime = *v99;
      *(_OWORD *)&inTimeStamp.mRateScalar = v107;
      v108 = v99[3];
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = v99[2];
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v108;
      v109 = AUSM::ABLBuffer::setupBufferList((AUSM::ABLBuffer *)(a4 + 248), v656[0], (*(_DWORD *)(jj + 92) & 0x20) == 0, v98, v642);
      *a2 &= ~0x10u;
      v110 = *(_QWORD *)(jj + 216);
      __N = v98;
      if (*(_BYTE *)(v110 + 540) && *(_DWORD *)(v110 + 536) == 1)
      {
        BufferList = (unsigned int *)ausdk::AUBufferList::GetBufferList(v637);
        v112 = BufferList;
        if (*v109 >= *BufferList)
          v113 = *BufferList;
        else
          v113 = *v109;
        if ((_DWORD)v113)
        {
          v114 = BufferList + 4;
          v115 = v109 + 4;
          do
          {
            if (*((_DWORD *)v115 - 2) != *((_DWORD *)v114 - 2))
              __assert_rtn("CopyFromBufferList", "AUSpatialMixerV2InputElement.cpp", 2065, "dst.mNumberChannels == src.mNumberChannels");
            v117 = (void *)*v115;
            v115 += 2;
            v116 = v117;
            v118 = *v114;
            v114 += 2;
            memcpy(v116, (const void *)(v118 + v646 * v642), __N * v642);
            --v113;
          }
          while (v113);
        }
        jj = v657;
        if (*(_QWORD *)(v657 + 688))
        {
          v119 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v657 + 1288) + 84));
          v95 = (v119 & 1) == 0;
          v120 = (uint64_t (*)(_QWORD, vDSP_Length, unsigned int *))MEMORY[0x1E0CFF680];
          if (v95)
            v120 = (uint64_t (*)(_QWORD, vDSP_Length, unsigned int *))MEMORY[0x1E0CFF688];
          v121 = v120(*(_QWORD *)(v657 + 688), __N, v112);
          if (v121)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v122 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v123 = v631;
              if (*(char *)(v657 + 1975) < 0)
                v123 = (_QWORD *)*v631;
              __C.mNumberBuffers = 136315650;
              *(_QWORD *)(&__C.mNumberBuffers + 1) = v123;
              LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
              *(_QWORD *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "CopyFromBufferList";
              HIWORD(__C.mBuffers[0].mData) = 1024;
              LODWORD(p_Start) = v121;
              _os_log_debug_impl(&dword_1B5ED0000, v122, OS_LOG_TYPE_DEBUG, "[%s|%s] Error writing input data to file, %d", (uint8_t *)&__C, 0x1Cu);
            }
          }
        }
      }
      else if (AUSpatialMixerV2InputElement::PullSharedInput((AUSpatialMixerV2InputElement *)jj, (AudioBufferList *)v109, a2, &inTimeStamp, *(unsigned int *)(jj + 684), v98))
      {
        goto LABEL_773;
      }
      v124 = *(_QWORD *)(a4 + 328);
      v125 = *(_QWORD *)(a4 + 336);
      if (*(_BYTE *)(jj + 1844))
      {
        v126 = v125 - v124;
        v127 = (_QWORD *)a7;
        v128 = (_QWORD *)a6;
        v129 = (_QWORD *)a5;
        v130 = v646;
        if (((v125 - v124) & 0x7FFFFFFF8) != 0)
        {
          v131 = 0;
          v132 = v126 >> 3;
          v133 = (v126 >> 3);
          v134 = v132 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(a4 + 352) + 8 * v131++) = *(_QWORD *)(*(_QWORD *)(a4 + 328)
                                                                        + 8 * v134--)
                                                            + 4 * v646;
          while (v133 != v131);
        }
        v135 = *(_QWORD *)(a4 + 496) - *(_QWORD *)(a4 + 488);
        if ((v135 & 0x7FFFFFFF8) != 0)
        {
          v136 = 0;
          v137 = v135 >> 3;
          v138 = (v135 >> 3);
          v139 = v137 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(a4 + 512) + 8 * v136++) = *(_QWORD *)(*(_QWORD *)(a4 + 488)
                                                                        + 8 * v139--)
                                                            + 4 * v646;
          while (v138 != v136);
        }
        v140 = *(_QWORD *)(a4 + 592) - *(_QWORD *)(a4 + 584);
        if ((v140 & 0x7FFFFFFF8) != 0)
        {
          v141 = 0;
          v142 = v140 >> 3;
          v143 = (v140 >> 3);
          v144 = v142 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(a4 + 608) + 8 * v141++) = *(_QWORD *)(*(_QWORD *)(a4 + 584)
                                                                        + 8 * v144--)
                                                            + 4 * v646;
          while (v143 != v141);
        }
        v145 = *(_QWORD *)(a4 + 688) - *(_QWORD *)(a4 + 680);
        if ((v145 & 0x7FFFFFFF8) != 0)
        {
          v146 = 0;
          v147 = v145 >> 3;
          v148 = (v145 >> 3);
          v149 = v147 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(a4 + 704) + 8 * v146++) = *(_QWORD *)(*(_QWORD *)(a4 + 680)
                                                                        + 8 * v149--)
                                                            + 4 * v646;
          while (v148 != v146);
        }
        v150 = *(_QWORD *)(a4 + 400) - *(_QWORD *)(a4 + 392);
        if ((v150 & 0x7FFFFFFF8) != 0)
        {
          v151 = 0;
          v152 = v150 >> 3;
          v153 = (v150 >> 3);
          v154 = v152 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(a4 + 416) + 8 * v151++) = *(_QWORD *)(*(_QWORD *)(a4 + 392)
                                                                        + 8 * v154--)
                                                            + 4 * v646;
          while (v153 != v151);
        }
      }
      else
      {
        v127 = (_QWORD *)a7;
        v128 = (_QWORD *)a6;
        v129 = (_QWORD *)a5;
        v130 = v646;
        if (v125 != v124)
        {
          v155 = 0;
          v156 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a4 + 352) + 8 * v155) = *(_QWORD *)(v124 + 8 * v155) + 4 * v646;
            v155 = v156;
            v124 = *(_QWORD *)(a4 + 328);
            ++v156;
          }
          while (v155 < (*(_QWORD *)(a4 + 336) - v124) >> 3);
        }
        v157 = *(_QWORD *)(a4 + 488);
        if (*(_QWORD *)(a4 + 496) != v157)
        {
          v158 = 0;
          v159 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a4 + 512) + 8 * v158) = *(_QWORD *)(v157 + 8 * v158) + 4 * v646;
            v158 = v159;
            v157 = *(_QWORD *)(a4 + 488);
            ++v159;
          }
          while (v158 < (*(_QWORD *)(a4 + 496) - v157) >> 3);
        }
        v160 = *(_QWORD *)(a4 + 584);
        if (*(_QWORD *)(a4 + 592) != v160)
        {
          v161 = 0;
          v162 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a4 + 608) + 8 * v161) = *(_QWORD *)(v160 + 8 * v161) + 4 * v646;
            v161 = v162;
            v160 = *(_QWORD *)(a4 + 584);
            ++v162;
          }
          while (v161 < (*(_QWORD *)(a4 + 592) - v160) >> 3);
        }
        v163 = *(_QWORD *)(a4 + 680);
        if (*(_QWORD *)(a4 + 688) != v163)
        {
          v164 = 0;
          v165 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a4 + 704) + 8 * v164) = *(_QWORD *)(v163 + 8 * v164) + 4 * v646;
            v164 = v165;
            v163 = *(_QWORD *)(a4 + 680);
            ++v165;
          }
          while (v164 < (*(_QWORD *)(a4 + 688) - v163) >> 3);
        }
        v166 = *(_QWORD *)(a4 + 392);
        if (*(_QWORD *)(a4 + 400) != v166)
        {
          v167 = 0;
          v168 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a4 + 416) + 8 * v167) = *(_QWORD *)(v166 + 8 * v167) + 4 * v646;
            v167 = v168;
            v166 = *(_QWORD *)(a4 + 392);
            ++v168;
          }
          while (v167 < (*(_QWORD *)(a4 + 400) - v166) >> 3);
        }
      }
      if (v129)
        v129[4] = *v129 + 4 * v130;
      if (v128)
        v128[4] = *v128 + 4 * v130;
      if (v127)
        v127[4] = *v127 + 4 * v130;
      if (v656[0])
      {
        v169 = 0;
        v170 = 0;
        v171 = 0;
        do
        {
          v172 = *v659;
          v173 = (float **)(*v659 + 32 * v171);
          v174 = *(unsigned int *)(v657 + 108);
          if (v174 <= v171 || (*(_BYTE *)a2 & 0x10) != 0)
          {
            vDSP_vclr(*v173, 1, __N);
          }
          else
          {
            v175 = *(_DWORD *)(v657 + 92);
            if ((v175 & 1) != 0)
            {
              if ((_DWORD)v174 != 1 && (*(_DWORD *)(v657 + 92) & 0x20) == 0)
              {
                if ((_DWORD)__N)
                {
                  v184 = *v173;
                  v185 = (float *)(*((_QWORD *)v109 + 2) + v170);
                  v186 = __N;
                  do
                  {
                    *v184++ = *v185;
                    v185 += v174;
                    --v186;
                  }
                  while (v186);
                }
              }
              else
              {
                memcpy(*v173, *(const void **)&v109[4 * v171 + 4], 4 * __N);
              }
              goto LABEL_225;
            }
            v176 = *(_DWORD *)(v657 + 112) >> 3;
            __C.mNumberBuffers = 1;
            __C.mBuffers[0].mNumberChannels = 1;
            __A.mNumberBuffers = 1;
            __A.mBuffers[0].mNumberChannels = 1;
            v177 = *v173;
            __A.mBuffers[0].mData = *v173;
            __A.mBuffers[0].mDataByteSize = 4 * __N;
            if (v176 == 2)
            {
              if ((_DWORD)v174 == 1 || (v175 & 0x20) != 0)
              {
                v194 = &v109[4 * v171];
                __C.mBuffers[0].mData = (void *)*((_QWORD *)v194 + 2);
                v191 = v194[3];
              }
              else
              {
                v187 = (_WORD *)*v650;
                if ((_DWORD)__N)
                {
                  v188 = (_WORD *)(*((_QWORD *)v109 + 2) + v169);
                  v189 = (_WORD *)*v650;
                  v190 = __N;
                  do
                  {
                    *v189++ = *v188;
                    v188 += v174;
                    --v190;
                  }
                  while (v190);
                }
                __C.mBuffers[0].mData = v187;
                v191 = 2 * __N;
              }
              __C.mBuffers[0].mDataByteSize = v191;
              v193 = (AudioConverterRef *)(*(_QWORD *)(v657 + 216) + 3136);
LABEL_224:
              AudioConverterConvertComplexBuffer(*v193, __N, &__C, &__A);
LABEL_225:
              v195 = *(_QWORD *)(v657 + 1648);
              if (v174 <= (*(_QWORD *)(v657 + 1656) - v195) >> 3)
              {
                v196 = *(IR::FixedIntegerDelay **)(v195 + 8 * v171);
                if (v196)
                  IR::FixedIntegerDelay::process(v196, *v173, *v173, __N);
              }
              __C.mNumberBuffers = 0;
              vDSP_svesq(*v173, 1, (float *)&__C.mNumberBuffers, __N);
              *(_BYTE *)(v172 + 32 * v171 + 24) = *(float *)&__C.mNumberBuffers == 0.0;
              goto LABEL_229;
            }
            if (v176 == 1)
            {
              if ((_DWORD)v174 == 1 || (v175 & 0x20) != 0)
              {
                v192 = &v109[4 * v171];
                __C.mBuffers[0].mData = (void *)*((_QWORD *)v192 + 2);
                v182 = v192[3];
              }
              else
              {
                v178 = (_WORD *)*v650;
                if ((_DWORD)__N)
                {
                  v179 = *((_QWORD *)v109 + 2);
                  v180 = (_BYTE *)*v650;
                  v181 = __N;
                  do
                  {
                    *v180++ = *(_BYTE *)(v179 + v171);
                    v179 += v174;
                    --v181;
                  }
                  while (v181);
                }
                __C.mBuffers[0].mData = v178;
                v182 = __N;
              }
              __C.mBuffers[0].mDataByteSize = v182;
              v193 = (AudioConverterRef *)(*(_QWORD *)(v657 + 216) + 3128);
              goto LABEL_224;
            }
            vDSP_vclr(v177, 1, __N);
          }
          *(_BYTE *)(v172 + 32 * v171 + 24) = 1;
LABEL_229:
          ++v171;
          v170 += 4;
          v169 += 2;
        }
        while (v171 != *(_QWORD *)v656);
      }
      jj = v657;
      v197 = atomic_load((unsigned __int8 *)(v657 + 1264));
      if ((v197 & 1) != 0)
      {
        v198 = atomic_load((unsigned __int8 *)(v657 + 1592));
        if ((v198 & 1) != 0)
        {
          v704 = v635;
          v199 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)v635);
          v705 = v199;
          if (v199)
          {
            v200 = *(_QWORD *)(v657 + 1560);
            if (v200)
            {
              if (*(_BYTE *)(v200 + 756))
              {
                v201 = *(unsigned int **)(v657 + 1568);
                v202 = *(_QWORD *)(a4 + 224);
                v203 = *(CLiteMatrix **)(v202 + 32 * *v201);
                *(_QWORD *)&__C.mNumberBuffers = v203;
                v204 = *(CLiteMatrix **)(v202 + 32 * v201[1]);
                v205 = *(void **)(a4 + 96);
                *(_QWORD *)&__C.mBuffers[0].mNumberChannels = v204;
                __C.mBuffers[0].mData = v205;
                v206 = *(_DWORD *)(v200 + 752);
                if (v206 >= __N)
                  v207 = __N;
                else
                  v207 = v206;
                if ((_DWORD)v207)
                {
                  v697 = v200 + 616;
                  v208 = v200 + 568;
                  __B = (DSPSplitComplex *)(v200 + 584);
                  v684 = (DSPSplitComplex *)(v200 + 600);
                  LODWORD(v209) = *(_DWORD *)(v200 + 744);
                  v210 = v200 + 24;
                  v211 = *(_DWORD *)(v200 + 736);
                  v212 = v207;
                  v681 = (CLiteMatrix *)v207;
                  v679 = v203;
                  v677 = v204;
                  do
                  {
                    if (v212 < v209)
                      LODWORD(v209) = v212;
                    v693 = v212;
                    v213 = v207 - v212;
                    memcpy((void *)(*(_QWORD *)(v200 + 616) + 4 * v211), (char *)v203 + 4 * (v207 - v212), 4 * v209);
                    memcpy((void *)(*(_QWORD *)(v200 + 640) + 4 * *(unsigned int *)(v200 + 736)), (char *)v204 + 4 * v213, 4 * v209);
                    v214 = v209;
                    v211 = *(_DWORD *)(v200 + 736) + v209;
                    *(_DWORD *)(v200 + 736) = v211;
                    v209 = *(unsigned int *)(v200 + 744);
                    if (v211 >= v209)
                    {
                      v690 = v214;
                      v215 = 0;
                      v216 = *(_DWORD *)(v200 + 748);
                      v217 = (v216 - v209);
                      v218 = 1.0 / (float)(2 * v216);
                      v219 = 1;
                      do
                      {
                        v220 = v219;
                        memcpy(*(void **)(v210 + 24 * v215), (const void *)(*(_QWORD *)(v210 + 24 * v215) + 4 * v209), 4 * v217);
                        memcpy((void *)(*(_QWORD *)(v210 + 24 * v215) + 4 * v217), *(const void **)(v697 + 24 * v215), 4 * v209);
                        vDSP_vmul(*(const float **)(v210 + 24 * v215), 1, *(const float **)v200, 1, *(float **)(v200 + 440), 1, *(unsigned int *)(v200 + 748));
                        vDSP_ctoz(*(const DSPComplex **)(v200 + 440), 2, (const DSPSplitComplex *)(v208 + 16 * v215), 1, *(unsigned int *)(v200 + 744));
                        v222 = *(MultiRadixRealFFT **)(v200 + 464);
                        if (v222)
                          MultiRadixRealFFT::RealInPlaceTransform(v222, (DSPSplitComplex *)(v208 + 16 * v215), 1, v221);
                        *(float *)&__A.mNumberBuffers = v218;
                        vDSP_vsmul(*(const float **)(v208 + 16 * v215), 1, (const float *)&__A.mNumberBuffers, *(float **)(v208 + 16 * v215), 1, *(unsigned int *)(v200 + 744));
                        v223 = v208 + 16 * v215;
                        v224 = *(float **)(v223 + 8);
                        v223 += 8;
                        vDSP_vsmul(v224, 1, (const float *)&__A.mNumberBuffers, v224, 1, *(unsigned int *)(v200 + 744));
                        v219 = 0;
                        v225 = *(_DWORD **)v223;
                        *(_DWORD *)(v200 + 432 + 4 * v215) = **(_DWORD **)v223;
                        *v225 = 0;
                        v215 = 1;
                      }
                      while ((v220 & 1) != 0);
                      v226 = *(unsigned int *)(v200 + 744);
                      v227 = *(_QWORD *)(v200 + 168);
                      *(_QWORD *)&__A.mNumberBuffers = *(_QWORD *)(v200 + 144);
                      *(_QWORD *)&__A.mBuffers[0].mNumberChannels = v227;
                      v228 = *(float **)(v200 + 216);
                      v709.realp = *(float **)(v200 + 192);
                      v709.imagp = v228;
                      v229 = *(float **)(v200 + 240);
                      v230 = *(float **)(v200 + 264);
                      v231 = (const DSPSplitComplex *)(v200 + 600);
                      vDSP_zvadd((const DSPSplitComplex *)(v200 + 568), 1, __B, 1, v684, 1, v226);
                      vDSP_zvmul(v231, 1, v231, 1, &v709, 1, v226, 1);
                      LODWORD(__Start) = -1518338048;
                      vDSP_viclip(v709.realp, 1, (const float *)&__Start, &kEPS, v709.realp, 1, v226);
                      vDSP_zvmul((const DSPSplitComplex *)(v200 + 568), 1, __B, 1, (const DSPSplitComplex *)&__A, 1, v226, 1);
                      vDSP_zvdiv(&v709, 1, (const DSPSplitComplex *)&__A, 1, (const DSPSplitComplex *)&__A, 1, v226);
                      vDSP_zvneg((const DSPSplitComplex *)&__A, 1, (const DSPSplitComplex *)&__A, 1, v226);
                      v714 = 0.25;
                      vDSP_vsadd(*(const float **)&__A.mNumberBuffers, 1, &v714, *(float **)&__A.mNumberBuffers, 1, v226);
                      ScottySTFTUpmixer::complexSquareRootDouble((const float **)&__A, &v709.realp, v226, (double **)(v200 + 472));
                      v713 = 0.5;
                      vDSP_vsadd(v709.realp, 1, &v713, *(float **)&__A.mNumberBuffers, 1, v226);
                      vDSP_zvabs((const DSPSplitComplex *)&__A, 1, v229, 1, v226);
                      vDSP_zvneg(&v709, 1, (const DSPSplitComplex *)&__A, 1, v226);
                      vDSP_vsadd(*(const float **)&__A.mNumberBuffers, 1, &v713, *(float **)&__A.mNumberBuffers, 1, v226);
                      vDSP_zvabs((const DSPSplitComplex *)&__A, 1, v230, 1, v226);
                      vDSP_vmin(v229, 1, v230, 1, v229, 1, v226);
                      ScottySTFTUpmixer::inphaseICC((const DSPSplitComplex *)(v200 + 568), __B, *(DSPSplitComplex **)&__A.mBuffers[0].mNumberChannels, *(float **)&__A.mNumberBuffers, (float *)v226);
                      vDSP_vmul(v229, 1, *(const float **)&__A.mNumberBuffers, 1, v229, 1, v226);
                      vDSP_zrvmul(v231, 1, v229, 1, v231, 1, v226);
                      vDSP_zvsub((const DSPSplitComplex *)(v200 + 568), 1, v684, 1, (const DSPSplitComplex *)(v200 + 568), 1, v226);
                      vDSP_zvsub(__B, 1, v684, 1, __B, 1, v226);
                      v712 = 1068827891;
                      vDSP_vsmul(v231->realp, 1, (const float *)&v712, v231->realp, 1, v226);
                      vDSP_vsmul(*(const float **)(v200 + 608), 1, (const float *)&v712, *(float **)(v200 + 608), 1, v226);
                      v233 = 0;
                      v234 = 0;
                      for (i = 0; i != 3; ++i)
                      {
                        v236 = *(unsigned int *)(v200 + 740);
                        v237 = *(_QWORD *)(v200 + v233 + 664);
                        if ((i & 0xFFFFFFFE) == 0)
                        {
                          v232 = *(float *)(v200 + 4 * i + 432);
                          **(float **)(v200 + v234 + 576) = v232;
                        }
                        v238 = *(MultiRadixRealFFT **)(v200 + 464);
                        if (v238)
                          MultiRadixRealFFT::RealInPlaceTransform(v238, (DSPSplitComplex *)(v200 + v234 + 568), -1, v232);
                        vDSP_ztoc((const DSPSplitComplex *)(v200 + v234 + 568), 1, *(DSPComplex **)(v200 + 440), 2, *(unsigned int *)(v200 + 744));
                        __A.mNumberBuffers = 0x40000000;
                        vDSP_vsmul(*(const float **)(v200 + 440), 1, (const float *)&__A.mNumberBuffers, *(float **)(v200 + 440), 1, *(unsigned int *)(v200 + 748));
                        vDSP_vmul(*(const float **)(v200 + 440), 1, *(const float **)v200, 1, *(float **)(v200 + 440), 1, *(unsigned int *)(v200 + 748));
                        vDSP_vadd(*(const float **)(v200 + 440), 1, (const float *)(*(_QWORD *)(v200 + v233 + 72) + 4 * *(unsigned int *)(v200 + 744)), 1, *(float **)(v200 + 440), 1, (*(_DWORD *)(v200 + 748) - *(_DWORD *)(v200 + 744)));
                        memcpy(*(void **)(v200 + v233 + 72), *(const void **)(v200 + 440), 4 * *(unsigned int *)(v200 + 748));
                        memcpy((void *)(v237 + 4 * v236), *(const void **)(v200 + v233 + 72), 4 * *(unsigned int *)(v200 + 744));
                        v234 += 16;
                        v233 += 24;
                      }
                      v239 = 0;
                      v240 = 1;
                      v204 = v677;
                      do
                      {
                        v241 = v240;
                        v242 = v697 + 24 * v239;
                        v243 = (const void *)(*(_QWORD *)v242 + 4 * *(unsigned int *)(v200 + 744));
                        memmove(*(void **)v242, v243, (*(_QWORD *)(v242 + 8) - (_QWORD)v243) & 0xFFFFFFFFFFFFFFFCLL);
                        v240 = 0;
                        v239 = 1;
                      }
                      while ((v241 & 1) != 0);
                      LODWORD(v209) = *(_DWORD *)(v200 + 744);
                      v211 = *(_DWORD *)(v200 + 736) - v209;
                      *(_DWORD *)(v200 + 736) = v211;
                      *(_DWORD *)(v200 + 740) += v209;
                      jj = v657;
                      v207 = (unint64_t)v681;
                      v203 = v679;
                      v214 = v690;
                    }
                    v212 = v693 - v214;
                  }
                  while (v693 != v214);
                }
                v244 = 0;
                v245 = (const void **)(v200 + 664);
                do
                {
                  memcpy(*(void **)((char *)&__C.mNumberBuffers + v244), *v245, 4 * v207);
                  v246 = (char *)*v245;
                  v247 = (char *)v245[1];
                  v245 += 3;
                  memmove(v246, &v246[4 * v207], (unint64_t)&v247[-4 * v207 - (_QWORD)v246] & 0xFFFFFFFFFFFFFFFCLL);
                  v244 += 8;
                }
                while (v244 != 24);
                v248 = *(_DWORD *)(v200 + 740);
                v249 = v248 >= v207;
                v250 = v248 - v207;
                if (v249)
                  *(_DWORD *)(v200 + 740) = v250;
                if (v656[0])
                {
                  v251 = 0;
                  v252 = 0;
                  v253 = 24;
                  do
                  {
                    v254 = *(_DWORD **)(jj + 1568);
                    if (v251 != *v254 && v251 != v254[1])
                    {
                      v255 = *(_QWORD *)(jj + 1616);
                      if (v252 < (unint64_t)((*(_QWORD *)(jj + 1624) - v255) >> 3))
                      {
                        IR::FixedIntegerDelay::process(*(IR::FixedIntegerDelay **)(v255 + 8 * v252++), *(float **)(*v659 + v253 - 24), *(float **)(*v659 + v253 - 24), __N);
                        v254 = *(_DWORD **)(jj + 1568);
                      }
                    }
                    v256 = v254[2];
                    v257 = *v659;
                    if (v251 == v256)
                    {
                      vDSP_vadd(*(const float **)(v257 + v253 - 24), 1, *(const float **)(a4 + 96), 1, *(float **)(v257 + v253 - 24), 1, __N);
                      v257 = *v659;
                    }
                    __A.mNumberBuffers = 0;
                    vDSP_svesq(*(const float **)(v257 + v253 - 24), 1, (float *)&__A.mNumberBuffers, __N);
                    *(_BYTE *)(*v659 + v253) = *(float *)&__A.mNumberBuffers == 0.0;
                    ++v251;
                    v253 += 32;
                  }
                  while (*(_QWORD *)v656 != v251);
                }
              }
            }
          }
          std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v704);
        }
      }
      v258 = *(_QWORD *)(jj + 1296);
      if (*(_BYTE *)(v258 + 160))
        NeuralTranscoder::process(*(_QWORD ***)(v258 + 152), v659, __N);
      v703 = 1.0 / (float)__N;
      __Step = -v703;
      v259 = *(_QWORD *)(jj + 272);
      v260 = *(unsigned __int8 *)(v259 + 40);
      if (v260 != *(unsigned __int8 *)(*(_QWORD *)(jj + 288) + 40))
        __assert_rtn("Process", "AUSpatialMixerV2InputElement.cpp", 2396, "mParamsOBHDPtr_direct->usesOBHD == mParamsOBHDPtr_reverb->usesOBHD");
      v658 = a10 - v646;
      v261 = *(_QWORD *)(jj + 256);
      if (v261 != *(_QWORD *)(jj + 248))
      {
        v262 = 0;
        v263 = 0;
        v264 = *(_DWORD *)(v259 + 28);
        v691 = v264;
        while (1)
        {
          if (*(_BYTE *)(*(_QWORD *)(jj + 272) + 40))
          {
            if (*(_BYTE *)(jj + 384))
            {
              if (AUSM::MatrixMix::process(*(int **)(jj + 1296), (const void ***)v659, v263, (uint64_t)v650, __N, **(_QWORD **)(jj + 368), v264))
              {
                v625 = 2404;
                goto LABEL_795;
              }
              if (AUSM::MatrixMix::process(*(int **)(jj + 1296), (const void ***)v659, v263, a4 + 32, __N, **(_QWORD **)(jj + 376), v264))
              {
                v625 = 2408;
                goto LABEL_795;
              }
              __C.mNumberBuffers = 0;
              __A.mNumberBuffers = 1065353216;
              vDSP_vrampmul(*(const float **)(a4 + 64), 1, (float *)&__A.mNumberBuffers, &__Step, *(float **)a4, 1, __N);
              vDSP_vrampmuladd(*(const float **)(a4 + 32), 1, (float *)&__C.mNumberBuffers, &v703, *(float **)a4, 1, __N);
              v265 = !*(_BYTE *)(a4 + 88) || *(_BYTE *)(a4 + 56) == 0;
              v266 = !v265;
              *(_BYTE *)(a4 + 24) = v266;
            }
            else
            {
              if (*(_BYTE *)(jj + 385))
              {
                v267 = **(_QWORD **)(jj + 368);
                v268 = v264;
              }
              else
              {
                v267 = 0;
                v268 = 0;
              }
              if (AUSM::MatrixMix::process(*(int **)(jj + 1296), (const void ***)v659, v263, a4, __N, v267, v268))
              {
                v625 = 2421;
LABEL_795:
                __assert_rtn("Process", "AUSpatialMixerV2InputElement.cpp", v625, "locErr == noErr");
              }
            }
          }
          else if (AUSM::MatrixMix::process(*(int **)(jj + 1296), (const void ***)v659, v263, a4, __N, 0, 0))
          {
            v625 = 2425;
            goto LABEL_795;
          }
          if (!v654)
          {
            v292 = a4;
            goto LABEL_344;
          }
          v269 = *(_QWORD *)(jj + 224);
          v270 = *(float **)a4;
          v271 = v269 + 28 * v262;
          v274 = *(_DWORD *)(v271 + 4);
          v272 = v271 + 4;
          v273 = (float *)v274;
          v275 = *(_QWORD *)(a4 + 32);
          v276 = *(float *)(v272 + 4);
          v277 = *(_DWORD *)(v272 + 8);
          v278 = *(float *)(v272 + 12);
          v279 = v269 + 28 * v262;
          v280 = (float *)(v279 + 20);
          v281 = (float *)(v279 + 24);
          if (!v274)
          {
            v280 = (float *)(v269 + 28 * v262 + 24);
            v281 = *(float **)a4;
          }
          if ((int)v273 >= 1)
          {
            v280 = &v270[(_DWORD)v273 - 1];
            v281 = &v270[(_QWORD)v273];
          }
          v282 = *v281;
          v283 = *v280;
          v284 = (int)v273 >= (int)__N || (int)v658 <= 0;
          v285 = !v284;
          if (v277)
          {
            if (v285)
            {
              v286 = 0;
              v287 = v269 + 28 * v262;
              v288 = (float *)(v287 + 20);
              v289 = (float *)(v287 + 24);
              while (1)
              {
                *(float *)(v275 + 4 * v286++) = v283 + (float)(v276 * (float)(v282 - v283));
                LODWORD(v273) = (_DWORD)v273 + v277;
                v276 = v278 + v276;
                if (v276 >= 1.0)
                {
                  v276 = v276 + v97;
                  LODWORD(v273) = (_DWORD)v273 + 1;
                }
                if ((int)v273 < 1)
                {
                  if ((_DWORD)v273)
                    v290 = v288;
                  else
                    v290 = v289;
                  if ((_DWORD)v273)
                    v291 = v289;
                  else
                    v291 = v270;
                }
                else
                {
                  if ((int)v273 >= (int)__N)
                  {
                    v658 = v286;
                    goto LABEL_338;
                  }
                  v290 = &v270[(_DWORD)v273 - 1];
                  v291 = &v270[v273];
                }
                v282 = *v291;
                v283 = *v290;
                if (v658 == v286)
                  goto LABEL_338;
              }
            }
LABEL_337:
            v658 = 0;
            goto LABEL_338;
          }
          if (!v285)
            goto LABEL_337;
          v293 = 0;
          v294 = v269 + 28 * v262;
          v295 = (float *)(v294 + 20);
          v296 = (float *)(v294 + 24);
          while (1)
          {
            *(float *)(v275 + 4 * v293++) = v283 + (float)(v276 * (float)(v282 - v283));
            v276 = v278 + v276;
            if (v276 >= 1.0)
              break;
LABEL_335:
            if (v658 == v293)
              goto LABEL_338;
          }
          v297 = (_DWORD)v273 + 1;
          v276 = v276 + v97;
          if ((v273 & 0x80000000) != 0)
            break;
          if (v297 < (int)__N)
          {
            v298 = &v270[v273];
            v273 = &v270[v297];
LABEL_334:
            v283 = *v298;
            v282 = *v273;
            LODWORD(v273) = v297;
            goto LABEL_335;
          }
          LODWORD(v273) = (_DWORD)v273 + 1;
          v658 = v293;
LABEL_338:
          if (__N >= 2)
          {
            v299 = v269 + 28 * v262;
            *(float *)(v299 + 20) = v270[(__N - 2)];
            v300 = v270[(__N - 1)];
            goto LABEL_342;
          }
          if ((_DWORD)__N == 1)
          {
            v299 = v269 + 28 * v262;
            *(_DWORD *)(v299 + 20) = *(_DWORD *)(v299 + 24);
            v300 = *v270;
LABEL_342:
            *(float *)(v299 + 24) = v300;
          }
          *(_DWORD *)v272 = (_DWORD)v273 - __N;
          *(float *)(v272 + 4) = v276;
          *(_BYTE *)(a4 + 56) = *(_BYTE *)(a4 + 24);
          v292 = a4 + 32;
LABEL_344:
          v701 = 0.0;
          v301 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**(_QWORD **)(jj + 216) + 144))(*(_QWORD *)(jj + 216), 9, 0, 0, &v701);
          v302 = 1.0;
          if (!v301)
            v302 = __exp10f(v701 * 0.05);
          v701 = v302;
          v303 = *(_QWORD *)(*(_QWORD *)(jj + 248) + 8 * v262);
          if (v655 && (v304 = *(_QWORD *)(jj + 1304), *(_DWORD *)(v304 + 44) > v263))
            v305 = (float *)(*(_QWORD *)(v304 + 248) + 4 * (*(_DWORD *)(v304 + 344) + *(_DWORD *)(v304 + 392) * v263));
          else
            v305 = 0;
          v713 = v302;
          v712 = v658;
          *(_QWORD *)&__A.mNumberBuffers = v303 + 772;
          v306 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v303 + 772));
          LOBYTE(__A.mBuffers[0].mNumberChannels) = v306;
          if (!v306)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v310 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v311 = (_QWORD *)(v303 + 888);
              if (*(char *)(v303 + 911) < 0)
                v311 = (_QWORD *)*v311;
              __C.mNumberBuffers = 136315394;
              *(_QWORD *)(&__C.mNumberBuffers + 1) = v311;
              LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
              *(_QWORD *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "processAccumulating";
              _os_log_debug_impl(&dword_1B5ED0000, v310, OS_LOG_TYPE_DEBUG, "[%s|%s] Channel processing dropped because the spatializer is locked", (uint8_t *)&__C, 0x16u);
            }
            goto LABEL_578;
          }
          v307 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v303 + 872) + 232) + 2476));
          v308 = (ausdk::AUElement ***)(v303 + 960);
          if (AUSM::ChannelGeometry::update((float32x4_t **)(v303 + 960), 0))
          {
            AUSpatialMixerV2ChannelProcessor::updateSpatializationParameters((AUSpatialMixerV2ChannelProcessor *)v303);
            if ((_DWORD)v307)
              atomic_store(1u, (unsigned __int8 *)(v303 + 768));
          }
          v309 = atomic_load((unsigned __int8 *)(v303 + 768));
          if ((v309 & 1) != 0)
            __asm { BR              X8 }
          if (*(_BYTE *)(v292 + 24)
            || (float)(*(float *)(v303 + 1636) * a9) == 0.0
            || !*(_BYTE *)(v303 + 788) && !*(_BYTE *)(v303 + 789))
          {
            v312 = *(_QWORD *)(v303 + 912);
            if ((!*(_BYTE *)(v312 + 40) || !*(_BYTE *)(v312 + 41)) && *(_DWORD *)(v303 + 780) > *(_DWORD *)(v303 + 784))
            {
              v313 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v303 + 872) + 232) + 1184));
              if (!v313 || v712 != 0)
              {
                if (v305)
                  vDSP_vclr(v305, 1, v712);
                goto LABEL_578;
              }
            }
          }
          v315 = *(float *)(v303 + 1636) * a9;
          v316 = v315 * *(float *)(*(_QWORD *)(v303 + 968) + 488);
          v317 = atomic_load((unsigned __int8 *)(v303 + 792));
          if ((v317 & 1) != 0)
            v315 = v315 * 3.1623;
          v694 = v315;
          if ((v317 & 1) != 0)
            v318 = v316 * 3.1623;
          else
            v318 = v316;
          if ((v317 & 1) != 0)
            v319 = (float)(v316 * *(float *)(v303 + 1632)) * 3.1623;
          else
            v319 = v316 * *(float *)(v303 + 1632);
          v320 = atomic_load((unsigned __int8 *)(v303 + 1680));
          if ((v320 & 1) != 0)
          {
            v321 = COERCE_FLOAT(atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v303 + 872) + 232) + 2416)));
            v319 = v319 * __exp10f(v321 * 0.05);
          }
          if (*(_DWORD *)(v303 + 780) > *(_DWORD *)(v303 + 784)
            && !atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v303 + 872) + 232) + 1184)))
          {
            v345 = *(_QWORD **)(v303 + 144);
            if (v345 && *v345)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v345 + 192))(*v345, 1);
            v346 = *(_QWORD **)(v303 + 152);
            if (v346 && *v346)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v346 + 192))(*v346, 1);
            v347 = *(_QWORD **)(v303 + 160);
            if (v347 && *v347)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v347 + 192))(*v347, 1);
            v348 = *(unsigned __int8 **)(v303 + 136);
            if (v348)
            {
              v349 = *(_QWORD *)v348;
              if (*(_QWORD *)v348
                || (v373 = atomic_load(v348 + 232), (v373 & 1) != 0) && (v349 = **(_QWORD **)(v303 + 136)) != 0)
              {
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v349 + 192))(v349, 1);
              }
            }
            v374 = *(_QWORD *)(v303 + 480);
            if (v374)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v374 + 264))(v374);
              v375 = *(_QWORD *)(v303 + 488);
              if (v375)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v375 + 264))(v375);
                (*(void (**)(_QWORD))(**(_QWORD **)(v303 + 496) + 264))(*(_QWORD *)(v303 + 496));
              }
            }
            if (*(float *)(v303 + 556) > 0.0 || *(float *)(v303 + 568) > 0.0)
            {
              v376 = 1.0;
              v377 = 0.0;
              v378 = 0.0;
              v379 = 1.0;
              if (a5)
              {
                v378 = AUSpatialMixerV2ChannelProcessor::calculateWetDryGains(v303, 1, v318);
                v379 = v380;
              }
              if (a6)
              {
                v377 = AUSpatialMixerV2ChannelProcessor::calculateWetDryGains(v303, 0, v694);
                v376 = v381;
              }
              *(float *)(v303 + 552) = v379 * v376;
              v382 = *(float *)(v303 + 556);
              if (v382 > 0.0)
              {
                v382 = v376 * v378;
                *(float *)(v303 + 556) = v376 * v378;
              }
              v383 = *(float *)(v303 + 568);
              if (v383 > 0.0)
              {
                v383 = v379 * v377;
                *(float *)(v303 + 568) = v379 * v377;
              }
              a9 = v643;
              v97 = -1.0;
              if (v382 > 0.0 && v383 > 0.0)
                *(float *)(v303 + 580) = v378 * v377;
            }
          }
          v323 = *(float **)(a4 + 128);
          v709.realp = *(float **)(a4 + 152);
          v324 = *(float **)(a4 + 176);
          v704 = *(float ***)(a4 + 200);
          v325 = (unsigned int *)(a4 + 380);
          v696 = *(unsigned __int8 *)(*(_QWORD *)(v303 + 960) + 77);
          if (!*(_BYTE *)(*(_QWORD *)(v303 + 960) + 77))
            v325 = (unsigned int *)(a4 + 444);
          v326 = *v325;
          v327 = (uint64_t *)(a4 + 352);
          if (!*(_BYTE *)(*(_QWORD *)(v303 + 960) + 77))
            v327 = (uint64_t *)(a4 + 416);
          v698 = *v327;
          realp = *(float **)v292;
          v711 = 0;
          v329 = *(const vDSP_biquad_SetupStruct **)(v303 + 800);
          if (v329)
          {
            vDSP_biquad(v329, *(float **)(v303 + 816), realp, 1, v323, 1, v712);
            v711 += 500;
            realp = v323;
          }
          v330 = *(unsigned int *)(v303 + 856);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v303 + 480) + 200))(*(_QWORD *)(v303 + 480), v330);
          v331 = *(_QWORD *)(v303 + 488);
          if (v331)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v331 + 200))(v331, v330);
          v332 = *(_QWORD *)(v303 + 496);
          if (v332)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v332 + 200))(v332, v330);
          v333 = atomic_load((unsigned int *)(*v308)[1] + 20);
          if (v333 != 1)
          {
            v334 = v319;
            if (v333 || *((_DWORD *)**v308 + 27) <= 1u)
            {
              v337 = *(IR::DelayLine **)(v303 + 848);
              __Ba = v326;
              if (v337)
              {
                if (*((_DWORD *)*v308 + 16) == 4)
                  goto LABEL_413;
                v338 = *(_DWORD *)(v303 + 472);
                v339 = *(_DWORD *)(v303 + 476);
                AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*(_QWORD *)(v303 + 872) + 232));
                if (v338 != 7 || v339 != 1)
                {
                  v337 = *(IR::DelayLine **)(v303 + 848);
LABEL_413:
                  *(_QWORD *)&__C.mNumberBuffers = v709.realp;
                  IR::DelayLine::process(v337, realp, (float **)&__C, v712);
                  v340 = *(_QWORD *)(v303 + 848);
                  if (!*(_DWORD *)(v340 + 8))
                    __assert_rtn("getLatestDelay", "DelayLine.cpp", 433, "inTapIdx < mNumTaps");
                  v341 = *(_DWORD *)(v340 + 4);
                  if (v341 > 7)
                    goto LABEL_489;
                  v342 = 1 << v341;
                  if ((v342 & 0xE0) != 0)
                  {
                    v351 = **(float **)(v340 + 48) - (float)*(unsigned int *)(v340 + 132);
                  }
                  else if ((v342 & 0xA) != 0)
                  {
                    v343 = **(float **)(v340 + 48);
                    v344 = -2.0;
LABEL_434:
                    v351 = v343 + v344;
                  }
                  else
                  {
                    if ((v342 & 0x14) != 0)
                    {
                      v343 = **(float **)(v340 + 48);
                      v344 = -3.0;
                      goto LABEL_434;
                    }
LABEL_489:
                    v351 = **(float **)(v340 + 48);
                  }
                  v711 = (float)(v351 + (float)v711);
                  realp = v709.realp;
                }
              }
              v352 = *(IR::FixedIntegerDelay **)(v303 + 608);
              if (v352)
              {
                IR::FixedIntegerDelay::process(v352, realp, v323, v712);
                v711 += **(_DWORD **)(v303 + 608);
                v353 = v712;
              }
              else
              {
                v353 = v712;
                if (realp != v323)
                  memcpy(v323, realp, 4 * v712);
              }
              AUSpatialMixerV2OcclusionFilter::processInplace((AUSpatialMixerV2OcclusionFilter *)(v303 + 88), v323, v353);
              v711 += *(_DWORD *)(v303 + 108);
              if (!(a5 | a6))
              {
                if (*(_BYTE *)(v303 + 791))
                {
                  *(_QWORD *)(v303 + 552) = 1065353216;
                  *(_DWORD *)(v303 + 568) = 0;
                  *(_DWORD *)(v303 + 580) = 0;
                }
                goto LABEL_512;
              }
              v354 = a6;
              if (!*(_BYTE *)(v303 + 791))
                goto LABEL_512;
              v355 = 1.0;
              v356 = 0.0;
              v357 = 0.0;
              v358 = 1.0;
              if (a5)
              {
                v357 = AUSpatialMixerV2ChannelProcessor::calculateWetDryGains(v303, 1, v318);
                v358 = v359;
              }
              if (a6)
              {
                v356 = AUSpatialMixerV2ChannelProcessor::calculateWetDryGains(v303, 0, v694);
                v355 = v360;
              }
              v361 = atomic_load((unsigned __int8 *)(v303 + 80));
              if ((v361 & 1) != 0)
              {
                v362 = *(_QWORD *)(v303 + 8);
                v363 = *(_QWORD *)(v303 + 16);
                if (v362 != v363)
                {
                  v364 = 0;
                  v365 = (v363 - v362) >> 3;
                  v366 = v711;
                  do
                  {
                    v367 = *(_QWORD *)(v362 + 8 * v364);
                    if (v367)
                    {
                      v366 += *(_DWORD *)(v367 + 60);
                      v711 = v366;
                    }
                    ++v364;
                  }
                  while (v365 > v364);
                }
              }
              __Start = v323;
              if (v305)
              {
                v368 = *(IR::FixedIntegerDelay **)(v303 + 864);
                if (v368)
                {
                  IR::FixedIntegerDelay::process(v368, v323, v324, v712);
                  __Start = v324;
                }
              }
              if (a6 && (v369 = *(_QWORD *)(v303 + 152)) != 0)
              {
                if (*(_QWORD *)v369)
                {
                  v370 = 1;
                  if (!a5)
                  {
                    v371 = 0;
                    goto LABEL_493;
                  }
LABEL_464:
                  v372 = *(_QWORD *)(v303 + 144);
                  if (v372)
                  {
                    if (*(_QWORD *)v372)
                    {
                      v371 = 1;
                      goto LABEL_493;
                    }
                    v385 = atomic_load((unsigned __int8 *)(v372 + 232));
                    v371 = v385 & 1;
                  }
                  else
                  {
                    v371 = 0;
                  }
                  if (((v370 | v371) & 1) != 0)
                  {
LABEL_493:
                    *(_QWORD *)&__C.mNumberBuffers = v303;
                    *(_QWORD *)&__C.mBuffers[0].mNumberChannels = v292;
                    __C.mBuffers[0].mData = &v711;
                    p_Start = (const float **)&__Start;
                    v718 = &v712;
                    v719 = &v704;
                    v720 = &v709;
                    v721 = &v713;
                    v386 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v371, 1u, (int8x16_t **)(v303 + 144), a4 + 488, (IR::ComplexDataCircBuffer *)(a4 + 784), a5, v303 + 556, v355 * v357);
                    v387 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v370, 0, (int8x16_t **)(v303 + 152), a4 + 584, (IR::ComplexDataCircBuffer *)(a4 + 792), v354, v303 + 568, v358 * v356);
                    if (a7)
                      v388 = v370;
                    else
                      v388 = 0;
                    v389 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v371 & v388, 2u, (int8x16_t **)(v303 + 160), a4 + 680, (IR::ComplexDataCircBuffer *)(a4 + 800), a7, v303 + 580, v357 * v356);
                    if (v386 <= v387)
                      v390 = v387;
                    else
                      v390 = v386;
                    if (v390 <= v389)
                      v390 = v389;
                    v711 += v390;
                    goto LABEL_502;
                  }
                  AUSpatialMixerV2ChannelProcessor::processReverbSend(v303, __Start, a5, v712, 1u, v709.realp, 0, v355 * v357);
LABEL_527:
                  if (a6)
                  {
                    AUSpatialMixerV2ChannelProcessor::processReverbSend(v303, __Start, a6, v712, 0, v709.realp, 0, v358 * v356);
                    if (v636)
                      AUSpatialMixerV2ChannelProcessor::processReverbSend(v303, __Start, a7, v712, 2u, v709.realp, 0, v357 * v356);
                  }
LABEL_502:
                  v391 = v712;
                  v392 = v358 * v355;
                  v393 = (float *)(v303 + 552);
                  if (*(_BYTE *)(v303 + 536))
                  {
                    *v393 = v392;
                    v394 = v323;
                  }
                  else
                  {
                    v394 = v323;
                    if (*v393 != v392)
                    {
                      if (v712 >= 0x100)
                        v395 = 256;
                      else
                        v395 = v712;
                      *(float *)&__C.mNumberBuffers = (float)(v392 - *v393) / (float)v395;
                      vDSP_vrampmul(v323, 1, (float *)(v303 + 552), (const float *)&__C.mNumberBuffers, v323, 1, v395);
                      *v393 = v392;
                      v391 -= v395;
                      v394 = &v323[v395];
                    }
                  }
                  if (v391)
                    vDSP_vsmul(v394, 1, (const float *)(v303 + 552), v394, 1, v391);
                  a9 = v643;
                  v97 = -1.0;
                  v334 = v319;
LABEL_512:
                  if (!*(_BYTE *)(v303 + 790))
                  {
                    v401 = v711;
                    if (v305)
                      goto LABEL_544;
                    goto LABEL_569;
                  }
                  if (a8
                    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v303 + 480) + 104))(*(_QWORD *)(v303 + 480)) & 1) == 0)
                  {
                    v396 = ausdk::AUElement::GetParameter(**v308, 0x21u);
                    v397 = v334 * sqrtf(v396);
                    v398 = v712;
                    *(float *)&__C.mNumberBuffers = v397;
                    v399 = *(float **)(a8 + 32);
                    if (*(_BYTE *)(v303 + 536))
                    {
                      *(float *)(v303 + 600) = v397;
                      v400 = v397;
                    }
                    else
                    {
                      v400 = *(float *)(v303 + 600);
                    }
                    if (v400 == v397)
                    {
                      if (v397 > 0.0)
                      {
                        if (*(_BYTE *)(a8 + 24))
                          vDSP_vsmul(v323, 1, (const float *)&__C.mNumberBuffers, v399, 1, v398);
                        else
                          vDSP_vsma(v323, 1, (const float *)&__C.mNumberBuffers, v399, 1, v399, 1, v398);
                        goto LABEL_532;
                      }
                    }
                    else
                    {
                      *(float *)&__Start = v400;
                      v714 = (float)(v397 - v400) / (float)v398;
                      if (*(_BYTE *)(a8 + 24))
                        vDSP_vrampmul(v323, 1, (float *)&__Start, &v714, v399, 1, v398);
                      else
                        vDSP_vrampmuladd(v323, 1, (float *)&__Start, &v714, v399, 1, v398);
LABEL_532:
                      *(_BYTE *)(a8 + 24) = 0;
                      v397 = *(float *)&__C.mNumberBuffers;
                    }
                    *(float *)(v303 + 600) = v397;
                    v334 = v334 * sqrtf(1.0 - v396);
                  }
                  AUSpatialMixerV2OcclusionFilter::processInplace((AUSpatialMixerV2OcclusionFilter *)(v303 + 112), v323, v712);
                  v711 += *(_DWORD *)(v303 + 132);
                  v402 = *(_QWORD *)(v303 + 136);
                  if (v402)
                  {
                    if (*(_QWORD *)v402)
                      goto LABEL_538;
                    v403 = atomic_load((unsigned __int8 *)(v402 + 232));
                    if ((v403 & 1) != 0)
                    {
                      v402 = *(_QWORD *)(v303 + 136);
LABEL_538:
                      v404 = 3000.0;
                      if (*(_DWORD *)(v303 + 856))
                        v404 = v97;
                      *(float *)(v402 + 16) = v404;
                      IR::DynamicIRProcessor::processInternal((int8x16_t *)v402, v323, (const float **)&v709.realp, 1, v712, 1.0, v704, 0, 0);
                      v323 = v709.realp;
                      v405 = atomic_load((unsigned int *)(*(_QWORD *)(v303 + 136) + 244));
                      v711 += v405;
                    }
                  }
                  if (v305)
                  {
                    memcpy(v305, v323, 4 * v712);
                    goto LABEL_543;
                  }
                  v408 = *(_DWORD *)(v303 + 472);
                  if (v408 != 9)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(v303 + 968) + 456))
                    {
                      if (*((_DWORD *)*v308 + 16) == 4
                        || (v414 = *(_DWORD *)(v303 + 476),
                            AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*(_QWORD *)(v303 + 872) + 232)),
                            v408 != 7)
                        || v414 != 1)
                      {
                        v409 = *(float *)(v303 + 504);
                        if (v409 > 0.0 || *(float *)(v303 + 508) > 0.0)
                        {
                          v410 = 1.0 / (float)(v409 + 1.0);
                          if (!(*(unsigned int (**)(_QWORD, float *, uint64_t, _QWORD, float **, _QWORD, _QWORD, IR::ComplexDataCircBuffer *, float))(**(_QWORD **)(v303 + 480) + 272))(*(_QWORD *)(v303 + 480), v323, v698, __Ba, v704, __Ba, v712, v644, (float)(v334 * (float)(1.0 - v409)) * v410))
                          {
                            if (!v696)
                              *(_BYTE *)(a4 + 440) = 0;
                            v411 = v410 * (float)(v334 * *(float *)(v303 + 504));
                            if (!(*(unsigned int (**)(_QWORD, float *, uint64_t, _QWORD, float **, _QWORD, _QWORD, _QWORD, float))(**(_QWORD **)(v303 + 488) + 272))(*(_QWORD *)(v303 + 488), v323, v698, __Ba, v704, __Ba, v712, 0, v411))(*(void (**)(_QWORD, float *, uint64_t, _QWORD, float **, _QWORD, _QWORD, _QWORD, float))(**(_QWORD **)(v303 + 496) + 272))(*(_QWORD *)(v303 + 496), v323, v698, __Ba, v704, __Ba, v712, 0, v411);
                          }
                          v412 = *(float *)(v303 + 504);
                          if (v412 == 0.0)
                          {
                            v413 = *(_DWORD *)(v303 + 472);
                            if (v413 != 4 && (v413 != 7 || *(_DWORD *)(v303 + 476) != 3))
                            {
                              (*(void (**)(_QWORD))(**(_QWORD **)(v303 + 488) + 264))(*(_QWORD *)(v303 + 488));
                              (*(void (**)(_QWORD))(**(_QWORD **)(v303 + 496) + 264))(*(_QWORD *)(v303 + 496));
                              v412 = *(float *)(v303 + 504);
                            }
                          }
                          *(float *)(v303 + 508) = v412;
LABEL_568:
                          v401 = v711;
LABEL_569:
                          v407 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v303 + 480) + 312))(*(_QWORD *)(v303 + 480));
                          goto LABEL_570;
                        }
                      }
                    }
                  }
                  v350 = (*(uint64_t (**)(_QWORD, float *, uint64_t, _QWORD, float **, _QWORD, _QWORD, IR::ComplexDataCircBuffer *, float))(**(_QWORD **)(v303 + 480) + 272))(*(_QWORD *)(v303 + 480), v323, v698, __Ba, v704, __Ba, v712, v644, v334);
LABEL_565:
                  if (!v696 && !v350)
                    *(_BYTE *)(a4 + 440) = 0;
                  goto LABEL_568;
                }
                v384 = atomic_load((unsigned __int8 *)(v369 + 232));
                v370 = v384 & 1;
              }
              else
              {
                v370 = 0;
              }
              if (a5)
                goto LABEL_464;
              if (v370)
              {
                v371 = 0;
                v370 = 1;
                v354 = a6;
                goto LABEL_493;
              }
              goto LABEL_527;
            }
          }
          if (!v305)
          {
            v350 = (*(uint64_t (**)(_QWORD, float *, uint64_t, uint64_t, float **, uint64_t, _QWORD, IR::ComplexDataCircBuffer *, float))(**(_QWORD **)(v303 + 480) + 272))(*(_QWORD *)(v303 + 480), realp, v698, v326, v704, v326, v712, v644, v318);
            goto LABEL_565;
          }
          vDSP_vclr(v305, 1, v712);
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v335 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            v336 = (_QWORD *)(v303 + 888);
            if (*(char *)(v303 + 911) < 0)
              v336 = (_QWORD *)*v336;
            __C.mNumberBuffers = 136315394;
            *(_QWORD *)(&__C.mNumberBuffers + 1) = v336;
            LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
            *(_QWORD *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "processAccumulating";
            _os_log_debug_impl(&dword_1B5ED0000, v335, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric processing is enabled with bypass source mode. Input is set to zero.", (uint8_t *)&__C, 0x16u);
          }
LABEL_543:
          v401 = v711;
LABEL_544:
          v406 = *(int **)(v303 + 864);
          if (!v406)
            goto LABEL_569;
          v407 = *v406;
LABEL_570:
          *(_DWORD *)(v303 + 784) = v407 + v401;
          if (!*(_BYTE *)(v292 + 24) && (*(_BYTE *)(v303 + 788) || *(_BYTE *)(v303 + 789)))
          {
            v416 = 0;
          }
          else
          {
            v415 = *(_DWORD *)(v303 + 780);
            v249 = __CFADD__(v415, v712);
            v416 = v415 + v712;
            if (v249)
              v416 = -1;
          }
          *(_DWORD *)(v303 + 780) = v416;
          *(_BYTE *)(a4 + 376) = 0;
          *(_BYTE *)(v303 + 536) = 0;
          std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&__A);
          jj = v657;
          v264 = v691;
LABEL_578:
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__A);
          v261 = *(_QWORD *)(jj + 248);
          v262 = ++v263;
          if (v263 >= (unint64_t)((*(_QWORD *)(jj + 256) - v261) >> 3))
          {
            v259 = *(_QWORD *)(jj + 272);
            v260 = *(unsigned __int8 *)(v259 + 40);
            goto LABEL_580;
          }
        }
        if ((_DWORD)v273 == -1)
          v273 = v270;
        else
          v273 = v296;
        if (v297)
          v298 = v295;
        else
          v298 = v296;
        goto LABEL_334;
      }
LABEL_580:
      if (v260 && *(_BYTE *)(jj + 384))
      {
        *(int8x16_t *)(jj + 368) = vextq_s8(*(int8x16_t *)(jj + 368), *(int8x16_t *)(jj + 368), 8uLL);
        *(_BYTE *)(jj + 384) = 0;
      }
      *(_BYTE *)(v259 + 41) = 0;
      *(_BYTE *)(*(_QWORD *)(jj + 288) + 41) = 0;
      v417 = *(_QWORD *)(jj + 1296);
      if (*(_DWORD *)(v417 + 204))
      {
        v418 = *(_DWORD *)(v417 + 220);
        if (v418)
        {
          v249 = v418 >= __N;
          v419 = v418 - __N;
          if (!v249)
            v419 = 0;
          *(_DWORD *)(v417 + 220) = v419;
        }
        else
        {
          v420 = *(unsigned __int8 *)(v417 + 217);
          if (*(unsigned __int8 *)(v417 + 216) != v420)
          {
            *(_DWORD *)(v417 + 220) = *(_DWORD *)(v417 + 212);
            *(_BYTE *)(v417 + 216) = v420;
          }
        }
      }
      if (v655)
      {
        v421 = *(_QWORD *)(jj + 1304);
        v422 = *(_DWORD *)(v421 + 344) + v658;
        *(_DWORD *)(v421 + 344) = v422;
        if (v422 >= *(_DWORD *)(v421 + 16))
        {
          v660 = (covarianceBasedAdaptiveFilter *)(v421 + 456);
          v649 = (uint64_t *)(v421 + 7472);
          v423 = (CLiteMatrix *)(v421 + 7560);
          v666 = (CLiteMatrix *)(v421 + 7600);
          v663 = (CLiteMatrix *)(v421 + 7720);
          v667 = (CLiteMatrix *)(v421 + 8080);
          v662 = (CLiteMatrix *)(v421 + 8200);
          v653 = (const float **)(v421 + 8240);
          v424 = (float)((float)(*(float *)(*(_QWORD *)v261 + 1636)
                               * *(float *)(*(_QWORD *)(*(_QWORD *)v261 + 968) + 488))
                       * *(float *)(*(_QWORD *)v261 + 1632))
               * a9;
          v425 = (CLiteMatrix *)(v421 + 8496);
          v683 = (vDSP_Length *)(v421 + 3008);
          v674 = (CLiteMatrix *)(v421 + 7072);
          v682 = (vDSP_Length *)(v421 + 3048);
          __Bb = (DSPSplitComplex *)(v421 + 7112);
          v695 = (CLiteMatrix *)(v421 + 7392);
          v692 = (CLiteMatrix *)(v421 + 7432);
          v678 = (CLiteMatrix *)(v421 + 7272);
          v669 = (const CLiteMatrix *)(v421 + 7680);
          v673 = (CLiteMatrix *)(v421 + 7312);
          v668 = (CLiteMatrix *)(v421 + 7920);
          v680 = (CLiteMatrix *)(v421 + 7152);
          v672 = (CLiteMatrix *)(v421 + 7352);
          while (1)
          {
            v665 = *(unsigned int *)(v421 + 348);
            *(float *)&__A.mNumberBuffers = v424;
            vDSP_vclr(*(float **)(v421 + 360), 1, (uint64_t)(*(_QWORD *)(v421 + 368) - *(_QWORD *)(v421 + 360)) >> 2);
            v426 = 0;
            for (j = 0; j != 16; j += 4)
            {
              vDSP_mmul((const float *)(*(_QWORD *)(v421 + 4336) + j), 4, (const float *)(*(_QWORD *)(v421 + 248) + 4 * (*(_DWORD *)(v421 + 392) * v426)), 1, *(float **)(v421 + 296), 1, *(int *)(v421 + 36), *(int *)(v421 + 16), 1uLL);
              vDSP_vadd(*(const float **)(v421 + 296), 1, *(const float **)(v421 + 360), 1, *(float **)(v421 + 360), 1, *(int *)(v421 + 36) * (uint64_t)*(int *)(v421 + 16));
              ++v426;
            }
            v428 = *(_QWORD *)(v421 + 360);
            if (*(_BYTE *)(v421 + 384) && !*(_BYTE *)(v421 + 212))
            {
              HOA::RotationMatrix::applyLeft(*(_QWORD *)(v421 + 416), *(_QWORD *)(v421 + 360), (*(_QWORD *)(v421 + 368) - v428) >> 2, *(_QWORD *)(v421 + 296), (uint64_t)(*(_QWORD *)(v421 + 304) - *(_QWORD *)(v421 + 296)) >> 2, *(unsigned int *)(v421 + 16));
              v428 = *(_QWORD *)(v421 + 296);
            }
            v429 = *(unint64_t **)(v421 + 432);
            v430 = v429[3];
            if (v429[2] * v430 * v429[4] != *(_DWORD *)(v421 + 36) * *(_DWORD *)(v421 + 16))
            {
              v626 = 59;
              v627 = "fltbAnalysisSerializedVector";
              v628 = "inVectorSize == mnHops * mhopSize * mnInputs";
              goto LABEL_791;
            }
            if (v430)
            {
              LODWORD(v431) = 0;
              do
              {
                v432 = v431;
                v433 = v429[4];
                if (v433)
                {
                  v434 = 0;
                  v435 = v429[2];
                  v436 = v428 + 4 * v435 * v432;
                  v437 = 4 * v430 * v435;
                  do
                  {
                    *(_QWORD *)(v429[7] + 8 * v434++) = v436;
                    v436 += v437;
                  }
                  while (v433 > v434);
                }
                afSTFTWrapper::fltbAnalysisOneHop(v429, v432);
                v431 = (v432 + 1);
                v430 = v429[3];
              }
              while (v430 > v431);
            }
            v438 = (CLiteMatrix *)(v421 + 7760);
            if (v649 != (uint64_t *)(v429 + 23))
              std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>(v649, v429[23], v429[24], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v429[24] - v429[23]) >> 3));
            if (*(_DWORD *)(v421 + 28))
            {
              v439 = 0;
              while (1)
              {
                v440 = (void *)CLiteMatrix::Get(v423, 0, 0);
                v441 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7472) + 40 * v439), 0, 0);
                memcpy(v440, v441, 4 * *(int *)(v421 + 32) * (uint64_t)*(int *)(v421 + 36));
                CLiteMatrix::Get(v423, 0, 0);
                v443 = v442;
                CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7472) + 40 * v439), 0, 0);
                memcpy(v443, v444, 4 * *(int *)(v421 + 32) * (uint64_t)*(int *)(v421 + 36));
                CLiteMatrix::SetWithConjugateTranposeOfOther(v666, v423);
                v445 = (CLiteMatrix *)(v421 + 7680);
                CLiteMatrix::MatrixMultiply((vDSP_Length *)v423, v666, v668, v446);
                ParametricProcessor::covarianceMatrixSmoothing((const float **)v668, (const float **)(v421 + 7960), v447, *(float *)(v421 + 116));
                v449 = *(_DWORD *)(v421 + 132);
                if (v449 == 3)
                  break;
                if (v449 == 2 || v449 == 1)
                {
                  v450 = (vDSP_Length *)(*(_QWORD *)(v421 + 3944) + 40 * v439);
LABEL_614:
                  CLiteMatrix::MatrixMultiply(v450, v423, v669, v448);
                }
                v699 = v439;
                if (*(_BYTE *)(v421 + 188))
                {
                  CLiteMatrix::SetWithConjugateTranposeOfOther(v663, v669);
                  CLiteMatrix::MatrixMultiply((vDSP_Length *)v669, v663, v667, v451);
                  ParametricProcessor::covarianceMatrixSmoothing((const float **)v667, (const float **)(v421 + 8120), v452, *(float *)(v421 + 116));
                  v453 = *(float *)(*(_QWORD *)(v421 + 3088) + 4 * v439);
                  v454 = *(float *)(v421 + 8);
                  if (v453 < v454)
                  {
                    if ((*(_DWORD *)(v421 + 132) - 1) <= 2)
                    {
                      ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v421, v662, v668, v423, v439);
                      ParametricProcessor::covarianceMatrixSmoothing((const float **)v662, v653, v462, *(float *)(v421 + 116));
                    }
                    covarianceBasedAdaptiveFilter::calculateSharpeningFilter(v660, (CLiteMatrix *)(*(_QWORD *)(v421 + 8280) + 40 * v439), (const float **)(v421 + 8376), v667, v662, 0, *(float *)(v421 + 120));
                    v463 = (const float **)(v421 + 8416);
                    v464 = (_QWORD *)(v421 + 8304);
                    v465 = (CLiteMatrix *)(v421 + 8160);
                    v466 = (CLiteMatrix *)(v421 + 8376);
                    if (*(_DWORD *)(v421 + 40))
                    {
                      v467 = 0;
                      do
                      {
                        v468 = *(_DWORD *)CLiteMatrix::Get(v667, v467, v467);
                        *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v421 + 8160), v467, v467) = v468;
                        ++v467;
                      }
                      while (v467 < *(int *)(v421 + 40));
                      v463 = (const float **)(v421 + 8416);
                      v464 = (_QWORD *)(v421 + 8304);
                      v465 = (CLiteMatrix *)(v421 + 8160);
                      v466 = (CLiteMatrix *)(v421 + 8376);
                      v425 = (CLiteMatrix *)(v421 + 8496);
                    }
                  }
                  else
                  {
                    if (v453 > *(float *)(v421 + 4))
                    {
                      v455 = *(_QWORD *)(v421 + 8280);
                      if (*(_DWORD *)(v421 + 60))
                      {
                        v456 = 0;
                        do
                        {
                          *(float *)(v421 + 5304) = *(float *)CLiteMatrix::Get(v668, v456, v456)
                                                  + *(float *)(v421 + 5304);
                          ++v456;
                        }
                        while (v456 < *(int *)(v421 + 60));
                      }
                      LODWORD(v457) = *(_DWORD *)(v421 + 40);
                      if ((_DWORD)v457)
                      {
                        v458 = 0;
                        v459 = (CLiteMatrix *)(v455 + 40 * v699);
                        do
                        {
                          *(float *)(v421 + 5308) = *(float *)CLiteMatrix::Get(v667, v458, v458)
                                                  + *(float *)(v421 + 5308);
                          ++v458;
                          v457 = *(int *)(v421 + 40);
                        }
                        while (v458 < v457);
                        v445 = (CLiteMatrix *)(v421 + 7680);
                        if ((_DWORD)v457)
                        {
                          for (k = 0; k < v457; ++k)
                          {
                            v461 = sqrtf((float)((float)(*(float *)(v421 + 5304)* (float)(1.0 / (float)(*(float *)(v421 + 5308) + 0.00000011921)))* (float)(int)v457)/ (float)*(int *)(v421 + 60));
                            *(float *)CLiteMatrix::Get(v459, k, k) = v461;
                            v457 = *(int *)(v421 + 40);
                          }
                          goto LABEL_637;
                        }
LABEL_636:
                        LODWORD(v457) = *(_DWORD *)(v421 + 40);
                      }
                      else
                      {
                        v445 = (CLiteMatrix *)(v421 + 7680);
                      }
LABEL_637:
                      if (*(float *)(v421 + 8) <= 0.0)
                      {
                        v439 = v699;
                      }
                      else
                      {
                        v439 = v699;
                        if ((_DWORD)v457)
                        {
                          v469 = 0;
                          LODWORD(v470) = *(_DWORD *)(v421 + 32);
                          LODWORD(v471) = v470;
                          do
                          {
                            if ((_DWORD)v471)
                            {
                              v472 = 1;
                              do
                              {
                                v473 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v469, (unint64_t)(float)((float)(v472+ *(_DWORD *)(v421 + 184)* (uint64_t)(int)v471)- *(float *)(*(_QWORD *)(*(_QWORD *)(v421 + 5312) + 24 * v469)+ 4 * (int)v699)));
                                *(_DWORD *)CLiteMatrix::Get(v438, v469, v472 - 1) = v473;
                                CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v469, (unint64_t)(float)((float)(v472+ *(_DWORD *)(v421 + 32)* (uint64_t)*(int *)(v421 + 184))- *(float *)(*(_QWORD *)(*(_QWORD *)(v421 + 5312) + 24 * v469)+ 4 * (int)v699)));
                                v475 = *v474;
                                CLiteMatrix::Get(v438, v469, v472 - 1);
                                *v476 = v475;
                                v471 = *(int *)(v421 + 32);
                                v249 = v472++ >= v471;
                              }
                              while (!v249);
                              LODWORD(v457) = *(_DWORD *)(v421 + 40);
                              LODWORD(v470) = *(_DWORD *)(v421 + 32);
                              v425 = (CLiteMatrix *)(v421 + 8496);
                              v445 = (CLiteMatrix *)(v421 + 7680);
                              v439 = v699;
                            }
                            ++v469;
                          }
                          while (v469 < (int)v457);
                          if ((_DWORD)v457)
                          {
                            v477 = 0;
                            v478 = *(_DWORD *)(v421 + 184);
                            do
                            {
                              if ((_DWORD)v470 * v478)
                              {
                                v479 = 0;
                                do
                                {
                                  v480 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v477, v479 + (int)v470);
                                  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v477, v479) = v480;
                                  CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v477, v479 + *(int *)(v421 + 32));
                                  v482 = *v481;
                                  CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v477, v479);
                                  *v483 = v482;
                                  ++v479;
                                  v478 = *(_DWORD *)(v421 + 184);
                                  LODWORD(v470) = *(_DWORD *)(v421 + 32);
                                }
                                while (v479 < (int)v470 * v478);
                                LODWORD(v457) = *(_DWORD *)(v421 + 40);
                                v439 = v699;
                              }
                              ++v477;
                            }
                            while (v477 < (int)v457);
                            if ((_DWORD)v457)
                            {
                              v484 = 0;
                              do
                              {
                                if ((_DWORD)v470)
                                {
                                  v485 = 0;
                                  do
                                  {
                                    v486 = *(_DWORD *)CLiteMatrix::Get(v445, v484, v485);
                                    *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v484, v485 + *(int *)(v421 + 32) * (uint64_t)*(int *)(v421 + 184)) = v486;
                                    CLiteMatrix::Get(v445, v484, v485);
                                    v488 = *v487;
                                    CLiteMatrix::Get((CLiteMatrix *)(v421 + 5336), v484, v485 + *(int *)(v421 + 32) * (uint64_t)*(int *)(v421 + 184));
                                    *v489 = v488;
                                    ++v485;
                                    v470 = *(int *)(v421 + 32);
                                  }
                                  while (v485 < v470);
                                  LODWORD(v457) = *(_DWORD *)(v421 + 40);
                                  v439 = v699;
                                }
                                ++v484;
                              }
                              while (v484 < (int)v457);
                            }
                          }
                        }
                      }
                      v490 = *(_QWORD *)(v421 + 8280);
                      v491 = 5 * v439;
                      v492 = *(_QWORD *)(v421 + 8328);
                      if ((_DWORD)v457)
                      {
                        v493 = 0;
                        v685 = (DSPSplitComplex *)(v490 + 8 * v491);
                        v494 = (CLiteMatrix *)(v492 + 8 * v491);
                        v670 = (CLiteMatrix *)(*(_QWORD *)(v421 + 8352) + 8 * v491);
                        v671 = (CLiteMatrix *)(*(_QWORD *)(v421 + 8304) + 8 * v491);
                        v675 = v491;
                        do
                        {
                          v495 = *(void **)(v421 + 7008);
                          v496 = (const void *)CLiteMatrix::Get((CLiteMatrix *)v685, v493, 0);
                          memcpy(v495, v496, 4 * *(int *)(v421 + 40));
                          v497 = (void *)(*(_QWORD *)(v421 + 7008)
                                        + 4 * ((uint64_t)(*(_QWORD *)(v421 + 7016) - *(_QWORD *)(v421 + 7008)) >> 3));
                          CLiteMatrix::Get((CLiteMatrix *)v685, v493, 0);
                          memcpy(v497, v498, 4 * *(int *)(v421 + 40));
                          v499 = *(void **)(v421 + 7048);
                          v500 = (const void *)CLiteMatrix::Get(v494, v493, 0);
                          memcpy(v499, v500, 4 * *(int *)(v421 + 40));
                          v501 = (void *)(*(_QWORD *)(v421 + 7048)
                                        + 4 * ((uint64_t)(*(_QWORD *)(v421 + 7056) - *(_QWORD *)(v421 + 7048)) >> 3));
                          CLiteMatrix::Get(v494, v493, 0);
                          memcpy(v501, v502, 4 * *(int *)(v421 + 40));
                          if (*(float *)(v421 + 8) >= 0.0)
                          {
                            v504 = *(void **)(v421 + 7208);
                            v505 = (const void *)CLiteMatrix::Get(v671, v493, 0);
                            memcpy(v504, v505, 4 * *(int *)(v421 + 40));
                            v506 = (void *)(*(_QWORD *)(v421 + 7208)
                                          + 4 * ((uint64_t)(*(_QWORD *)(v421 + 7216) - *(_QWORD *)(v421 + 7208)) >> 3));
                            CLiteMatrix::Get(v671, v493, 0);
                            memcpy(v506, v507, 4 * *(int *)(v421 + 40));
                            v508 = *(void **)(v421 + 7248);
                            v509 = (const void *)CLiteMatrix::Get(v670, v493, 0);
                            memcpy(v508, v509, 4 * *(int *)(v421 + 40));
                            v510 = (void *)(*(_QWORD *)(v421 + 7248)
                                          + 4 * ((uint64_t)(*(_QWORD *)(v421 + 7256) - *(_QWORD *)(v421 + 7248)) >> 3));
                            CLiteMatrix::Get(v670, v493, 0);
                            memcpy(v510, v511, 4 * *(int *)(v421 + 40));
                          }
                          CLiteMatrix::MatrixMultiply(v683, (const CLiteMatrix *)(v421 + 6992), v674, v503);
                          CLiteMatrix::MatrixMultiply(v682, (const CLiteMatrix *)(v421 + 7032), (const CLiteMatrix *)__Bb, v512);
                          CLiteMatrix::operator+=((uint64_t)v674, (uint64_t)__Bb);
                          CLiteMatrix::SetWithTranposeOfOther(v695, v674);
                          CLiteMatrix::ElementwiseMultiply(v695, v445, v692, (CLiteMatrix *)1);
                          CLiteMatrix::SumRows(v692, v680, v513);
                          if (*(float *)(v421 + 8) >= 0.0)
                          {
                            CLiteMatrix::MatrixMultiply(v683, (const CLiteMatrix *)(v421 + 7192), v678, v514);
                            CLiteMatrix::MatrixMultiply(v682, (const CLiteMatrix *)(v421 + 7232), v673, v517);
                            CLiteMatrix::operator+=((uint64_t)v678, (uint64_t)v673);
                            CLiteMatrix::SetWithTranposeOfOther(v695, v678);
                            CLiteMatrix::ElementwiseMultiply(v695, (const CLiteMatrix *)(v421 + 7760), v692, (CLiteMatrix *)1);
                            CLiteMatrix::SumRows(v692, v672, v518);
                            if (*(int *)(v421 + 32) >= 1)
                            {
                              v519 = 0;
                              do
                              {
                                v520 = *(float *)CLiteMatrix::Get(v680, 0, v519);
                                v521 = v520 + *(float *)CLiteMatrix::Get(v672, 0, v519);
                                *(float *)CLiteMatrix::Get(v425, v493, v519) = v521;
                                CLiteMatrix::Get(v680, 0, v519);
                                v523 = *v522;
                                CLiteMatrix::Get(v672, 0, v519);
                                v525 = v523 + *v524;
                                CLiteMatrix::Get(v425, v493, v519);
                                *v526 = v525;
                                ++v519;
                              }
                              while (v519 < *(int *)(v421 + 32));
                            }
                          }
                          else
                          {
                            v515 = (void *)CLiteMatrix::Get(v425, v493, 0);
                            memcpy(v515, *(const void **)(v421 + 7168), 4 * *(int *)(v421 + 32));
                            CLiteMatrix::Get(v425, v493, 0);
                            memcpy(v516, (const void *)(*(_QWORD *)(v421 + 7168)+ 4 * ((uint64_t)(*(_QWORD *)(v421 + 7176) - *(_QWORD *)(v421 + 7168)) >> 3)), 4 * *(int *)(v421 + 32));
                          }
                          ++v493;
                          v491 = v675;
                        }
                        while (v493 < *(int *)(v421 + 40));
                        v492 = *(_QWORD *)(v421 + 8328);
                        v490 = *(_QWORD *)(v421 + 8280);
                        v423 = (CLiteMatrix *)(v421 + 7560);
                        v438 = (CLiteMatrix *)(v421 + 7760);
                        v439 = v699;
                      }
                      CLiteMatrix::SetWithOther(v492 + 8 * v491, (uint64_t *)(v490 + 8 * v491));
                      CLiteMatrix::SetWithOther(*(_QWORD *)(v421 + 8352) + 40 * v439, (uint64_t *)(*(_QWORD *)(v421 + 8304) + 40 * v439));
                      __C.mNumberBuffers = *(_DWORD *)(v421 + 208);
                      vDSP_vsmul(*(const float **)(v421 + 8512), 1, (const float *)&__C.mNumberBuffers, *(float **)(v421 + 8512), 1, (uint64_t)(*(_QWORD *)(v421 + 8520) - *(_QWORD *)(v421 + 8512)) >> 2);
                      goto LABEL_674;
                    }
                    v464 = (_QWORD *)(v421 + 8280);
                    v463 = (const float **)(v421 + 8376);
                    v465 = (CLiteMatrix *)(v421 + 8080);
                    v466 = (CLiteMatrix *)(v421 + 8200);
                    if ((*(_DWORD *)(v421 + 132) - 1) <= 2)
                    {
                      ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v421, v662, v668, v423, v439);
                      ParametricProcessor::covarianceMatrixSmoothing((const float **)v662, v653, v547, *(float *)(v421 + 116));
                      v464 = (_QWORD *)(v421 + 8280);
                      v463 = (const float **)(v421 + 8376);
                      v465 = (CLiteMatrix *)(v421 + 8080);
                      v466 = (CLiteMatrix *)(v421 + 8200);
                    }
                  }
                  covarianceBasedAdaptiveFilter::calculateSharpeningFilter(v660, (CLiteMatrix *)(*v464 + 40 * v439), v463, v465, v466, v453 >= v454, *(float *)(v421 + 120));
                  goto LABEL_636;
                }
                ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v421, v662, v668, v423, v439);
                CLiteMatrix::SetWithOther((uint64_t)v425, (uint64_t *)(v421 + 6000));
LABEL_674:
                v527 = *(_DWORD *)(v421 + 132);
                if ((v527 - 1) >= 2)
                {
                  if (v527 == 3)
                  {
                    v533 = *(_DWORD *)(v421 + 32);
                    if (v533)
                    {
                      v534 = 0;
                      v535 = *(_DWORD *)(v421 + 40);
                      v536 = *(_QWORD *)(v421 + 4256);
                      v537 = *(int **)(v421 + 4248);
                      v538 = v537;
                      do
                      {
                        v539 = (v536 - (uint64_t)v538) >> 2;
                        if (v539 + v535)
                        {
                          v540 = 0;
                          v541 = 0;
                          do
                          {
                            if (v539)
                            {
                              while (1)
                              {
                                v542 = *v538++;
                                if (v541 == v542)
                                  break;
                                if (!--v539)
                                  goto LABEL_684;
                              }
                              ++v540;
                            }
                            else
                            {
LABEL_684:
                              v543 = *(_DWORD *)CLiteMatrix::Get(v425, v541 - v540, v534);
                              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * v699), v541, v534) = v543;
                              v438 = (CLiteMatrix *)(v421 + 7760);
                              CLiteMatrix::Get(v425, v541 - v540, v534);
                              v545 = *v544;
                              CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * v699), v541, v534);
                              *v546 = v545;
                              v535 = *(_DWORD *)(v421 + 40);
                              v536 = *(_QWORD *)(v421 + 4256);
                              v537 = *(int **)(v421 + 4248);
                            }
                            ++v541;
                            v539 = (v536 - (uint64_t)v537) >> 2;
                            v538 = v537;
                          }
                          while (v541 < v539 + v535);
                          v533 = *(_DWORD *)(v421 + 32);
                          v538 = v537;
                          v439 = v699;
                        }
                        ++v534;
                      }
                      while (v534 < v533);
                    }
                  }
                }
                else
                {
                  v528 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * v439), 0, 0);
                  v529 = (const void *)CLiteMatrix::Get(v425, 0, 0);
                  memcpy(v528, v529, 4* *(int *)(v421 + 32)* (*(int *)(v421 + 40) + ((*(_QWORD *)(v421 + 4256) - *(_QWORD *)(v421 + 4248)) >> 2)));
                  CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * v439), 0, 0);
                  v531 = v530;
                  CLiteMatrix::Get(v425, 0, 0);
                  memcpy(v531, v532, 4* *(int *)(v421 + 32)* (*(int *)(v421 + 40) + ((*(_QWORD *)(v421 + 4256) - *(_QWORD *)(v421 + 4248)) >> 2)));
                }
                if (++v439 >= (unint64_t)*(int *)(v421 + 28))
                  goto LABEL_694;
              }
              v450 = *(vDSP_Length **)(v421 + 3944);
              goto LABEL_614;
            }
LABEL_694:
            v548 = *(_QWORD *)(v421 + 432);
            v549 = *(unint64_t **)(v421 + 7496);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v421 + 7504) - (_QWORD)v549) >> 3) != *(_DWORD *)(v548 + 8))
            {
              v626 = 113;
              v627 = "fltbSynthesisVector";
              v628 = "outputMatrix.size()==mnumBands";
              goto LABEL_791;
            }
            v550 = *v549;
            if (*v549 != *(_QWORD *)(v548 + 40))
            {
              v626 = 114;
              v627 = "fltbSynthesisVector";
              v628 = "outputMatrix[0].NumRows()==mnOutputs";
              goto LABEL_791;
            }
            v551 = v549[1];
            if (v551 != *(_QWORD *)(v548 + 24))
              break;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v421 + 280) - *(_QWORD *)(v421 + 272)) >> 3) < v550)
            {
              v626 = 116;
              v627 = "fltbSynthesisVector";
              v628 = "ioTD.size() >= mnOutputs";
LABEL_791:
              __assert_rtn(v627, "afSTFTWrapper.cpp", v626, v628);
            }
            if (v551)
            {
              v552 = 0;
              do
              {
                v553 = *(_QWORD *)(v548 + 40);
                if (v553)
                {
                  v554 = 0;
                  v555 = 0;
                  v556 = v665 + *(_QWORD *)(v548 + 16) * v552;
                  do
                  {
                    *(_QWORD *)(*(_QWORD *)(v548 + 56) + 8 * v555++) = *(_QWORD *)(*(_QWORD *)(v421 + 272) + v554)
                                                                     + 4 * v556;
                    v554 += 24;
                  }
                  while (v553 != v555);
                }
                v676 = v552;
                v557 = *(_DWORD *)(v548 + 8);
                if (v557)
                {
                  for (m = 0; m < v557; ++m)
                  {
                    if (v553)
                    {
                      v559 = 0;
                      for (n = 0; n < v553; ++n)
                      {
                        v561 = (_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * m), n, (int)v676);
                        v562 = *(_QWORD *)(v548 + 136);
                        if (n >= (*(_QWORD *)(v548 + 144) - v562) >> 4
                          || (*(_DWORD *)(*(_QWORD *)(v562 + v559) + 4 * m) = *v561,
                              CLiteMatrix::Get((CLiteMatrix *)(*(_QWORD *)(v421 + 7496) + 40 * m), n, (int)v676),
                              v564 = *(_QWORD *)(v548 + 136),
                              n >= (*(_QWORD *)(v548 + 144) - v564) >> 4))
                        {
                          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
                        }
                        *(_DWORD *)(*(_QWORD *)(v564 + v559 + 8) + 4 * m) = *v563;
                        v553 = *(_QWORD *)(v548 + 40);
                        v559 += 16;
                      }
                      v557 = *(_DWORD *)(v548 + 8);
                    }
                  }
                }
                v565 = *(_QWORD *)(v548 + 80);
                v700 = *(_QWORD *)(v548 + 136);
                v686 = *(DSPSplitComplex **)(v548 + 56);
                if (*(_DWORD *)(v565 + 112))
                {
                  v566 = *(_QWORD *)(v565 + 104);
                  if (*(int *)(v566 + 4) >= 1)
                  {
                    v567 = 0;
                    do
                    {
                      v568 = v700 + 16 * v567;
                      v569 = v568 + 8;
                      v570 = 1;
                      do
                      {
                        v571 = (float *)(*(_QWORD *)v568 + 20);
                        v572 = *v571;
                        v573 = *(float *)(*(_QWORD *)v568 + 12) + *(float *)(*(_QWORD *)v568 + 16);
                        v574 = v570;
                        *(v571 - 4) = *(float *)(*(_QWORD *)v568 + 4) + *(float *)(*(_QWORD *)v568 + 8);
                        *(v571 - 3) = v573;
                        v575 = v571[2] + v571[3];
                        *(v571 - 2) = v572 + v571[1];
                        *(v571 - 1) = v575;
                        memmove(v571, v571 + 4, 4 * *(int *)(v566 + 8) - 16);
                        v570 = 0;
                        v568 = v569;
                      }
                      while ((v574 & 1) != 0);
                      ++v567;
                    }
                    while (v567 < *(int *)(v566 + 4));
                  }
                }
                if (*(int *)(v565 + 4) >= 1)
                {
                  v576 = 0;
                  do
                  {
                    v577 = *(_DWORD *)(v565 + 32);
                    v578 = v700 + 16 * v576;
                    v579 = *(_DWORD **)v578;
                    v580 = *(_DWORD **)(v565 + 72);
                    *v580 = **(_DWORD **)v578;
                    v581 = *(int *)(v565 + 12);
                    v580[v581] = v579[v581];
                    v582 = (const void *)(*(_QWORD *)(v578 + 8) + 4);
                    memcpy(v580 + 1, v579 + 1, 4 * v581 - 4);
                    memcpy(&v580[v581 + 1], v582, 4 * *(int *)(v565 + 12) - 4);
                    if (*(_DWORD *)(v565 + 24) == 1)
                    {
                      v583 = *(_DWORD *)(v565 + 12);
                      if (v583 > 1)
                      {
                        v584 = 1;
                        do
                        {
                          *(float *)&v580[v584] = -*(float *)&v580[v584];
                          *(float *)&v580[v581 + v584] = -*(float *)&v580[v581 + v584];
                          v584 += 2;
                        }
                        while ((int)v584 < v583);
                      }
                    }
                    vtRunFFT(*(_QWORD *)(v565 + 96), -1);
                    vDSP_vclr((float *)(*(_QWORD *)(*(_QWORD *)(v565 + 80) + 8 * v576) + 4 * *(_DWORD *)(v565 + 12) * v577), 1, *(int *)(v565 + 12));
                    v585 = *(_DWORD *)(v565 + 36);
                    if (v577 + 1 < v585)
                      v586 = v577 + 1;
                    else
                      v586 = 0;
                    if (v585 >= 1)
                    {
                      v587 = 0;
                      for (ii = 0; ii < v592; ++ii)
                      {
                        v589 = *(_DWORD *)(v565 + 12);
                        if (v587)
                          v591 = *(_DWORD *)(v565 + 12);
                        else
                          v591 = 0;
                        v587 ^= 1u;
                        v590 = (float *)(*(_QWORD *)(*(_QWORD *)(v565 + 80) + 8 * v576) + 4 * v589 * v586);
                        vDSP_vma((const float *)(*(_QWORD *)(v565 + 48) + 4 * v589 * ii), 1, (const float *)(*(_QWORD *)(v565 + 64) + 4 * v591), 1, v590, 1, v590, 1, *(int *)(v565 + 12));
                        v592 = *(_DWORD *)(v565 + 36);
                        if (v586 + 1 < v592)
                          ++v586;
                        else
                          v586 = 0;
                      }
                    }
                    memcpy(*((void **)&v686->realp + v576), (const void *)(*(_QWORD *)(*(_QWORD *)(v565 + 80) + 8 * v576) + 4* *(_DWORD *)(v565 + 12)* v586), 4 * *(int *)(v565 + 12));
                    ++v576;
                  }
                  while (v576 < *(int *)(v565 + 4));
                }
                v593 = *(_DWORD *)(v565 + 32);
                if (v593 + 1 < *(_DWORD *)(v565 + 36))
                  v594 = v593 + 1;
                else
                  v594 = 0;
                *(_DWORD *)(v565 + 32) = v594;
                v552 = v676 + 1;
                v423 = (CLiteMatrix *)(v421 + 7560);
                v425 = (CLiteMatrix *)(v421 + 8496);
              }
              while (*(_QWORD *)(v548 + 24) > (unint64_t)(v676 + 1));
            }
            v595 = *(float *)(v421 + 388);
            if (v595 == v424 || v595 == 0.0)
            {
              v600 = *(_QWORD *)(v421 + 272);
              mNumberBuffers = LODWORD(v424);
              if (*(_QWORD *)(v421 + 280) != v600)
              {
                v601 = 0;
                v602 = 1;
                do
                {
                  vDSP_vsmul((const float *)(*(_QWORD *)(v600 + 24 * v601) + 4 * v665), 1, (const float *)&__A.mNumberBuffers, (float *)(*(_QWORD *)(v600 + 24 * v601) + 4 * v665), 1, *(int *)(v421 + 16));
                  v601 = v602;
                  v600 = *(_QWORD *)(v421 + 272);
                  v284 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v421 + 280) - v600) >> 3) > v602++;
                }
                while (v284);
                mNumberBuffers = __A.mNumberBuffers;
              }
            }
            else
            {
              *(float *)&__C.mNumberBuffers = (float)(v424 - v595) / (float)*(int *)(v421 + 16);
              v596 = *(_QWORD *)(v421 + 272);
              if (*(_QWORD *)(v421 + 280) != v596)
              {
                v597 = 0;
                v598 = 1;
                do
                {
                  LODWORD(v709.realp) = *(_DWORD *)(v421 + 388);
                  vDSP_vrampmul((const float *)(*(_QWORD *)(v596 + 24 * v597) + 4 * v665), 1, (float *)&v709, (const float *)&__C.mNumberBuffers, (float *)(*(_QWORD *)(v596 + 24 * v597) + 4 * v665), 1, *(int *)(v421 + 16));
                  v597 = v598;
                  v596 = *(_QWORD *)(v421 + 272);
                  v284 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v421 + 280) - v596) >> 3) > v598++;
                }
                while (v284);
              }
              mNumberBuffers = LODWORD(v424);
            }
            *(_DWORD *)(v421 + 388) = mNumberBuffers;
            v603 = *(_DWORD *)(v421 + 16);
            v604 = *(_DWORD *)(v421 + 344);
            *(_DWORD *)(v421 + 348) += v603;
            v605 = v604 - v603;
            *(_DWORD *)(v421 + 344) = v605;
            if (v605 && *(_DWORD *)(v421 + 44))
            {
              v606 = 0;
              do
              {
                memmove((void *)(*(_QWORD *)(v421 + 248) + 4 * *(_DWORD *)(v421 + 392) * v606), (const void *)(*(_QWORD *)(v421 + 248)+ 4 * (*(_DWORD *)(v421 + 16) + *(_DWORD *)(v421 + 392) * v606)), 4 * *(unsigned int *)(v421 + 344));
                ++v606;
              }
              while (v606 < *(_DWORD *)(v421 + 44));
              v605 = *(_DWORD *)(v421 + 344);
              v603 = *(_DWORD *)(v421 + 16);
            }
            if (v605 < v603)
              goto LABEL_757;
          }
          v626 = 115;
          v627 = "fltbSynthesisVector";
          v628 = "outputMatrix[0].NumCols()==mnHops";
          goto LABEL_791;
        }
LABEL_757:
        v607 = *(unsigned int *)(v421 + 352);
        if (v607 >= v658)
        {
          *(_DWORD *)(v421 + 352) = v607 - v658;
          v615 = *(void ***)(a4 + 328);
          v616 = *(void ***)(a4 + 336);
          for (jj = v657; v615 != v616; ++v615)
          {
            if (*v615)
              bzero(*v615, 4 * v658);
          }
          *(_BYTE *)(a4 + 376) = 1;
        }
        else
        {
          v608 = v658 - v607;
          *(_DWORD *)(v421 + 348) -= v608;
          v609 = *(_QWORD *)(a4 + 328);
          if (*(_QWORD *)(a4 + 336) != v609)
          {
            v610 = 0;
            v611 = 1;
            do
            {
              *(_QWORD *)(*(_QWORD *)(a4 + 352) + 8 * v610) = *(_QWORD *)(v609 + 8 * v610) + 4 * v607;
              v610 = v611;
              v609 = *(_QWORD *)(a4 + 328);
              ++v611;
            }
            while (v610 < (*(_QWORD *)(a4 + 336) - v609) >> 3);
          }
          if (*(_DWORD *)(a4 + 380))
          {
            v612 = 0;
            v613 = 0;
            v614 = *(_QWORD *)(a4 + 352);
            do
            {
              memcpy(*(void **)(v614 + 8 * v613), *(const void **)(*(_QWORD *)(v421 + 272) + v612), 4 * v608);
              memmove(*(void **)(*(_QWORD *)(v421 + 272) + v612), (const void *)(*(_QWORD *)(*(_QWORD *)(v421 + 272) + v612) + 4 * v608), 4 * *(unsigned int *)(v421 + 348));
              ++v613;
              v612 += 24;
            }
            while (v613 < *(unsigned int *)(a4 + 380));
          }
          *(_DWORD *)(v421 + 352) = 0;
          jj = v657;
        }
      }
      v646 += v658;
      v76 = v641 - __N;
      if (v641 == (_DWORD)__N)
      {
LABEL_773:
        if (*(_BYTE *)(*(_QWORD *)(jj + 272) + 40))
        {
          v617 = atomic_load((unsigned __int8 *)(*(_QWORD *)(jj + 1288) + 162));
          if ((v617 & 1) != 0)
          {
            if (IR::ComplexDataCircBuffer::isInitialized(v644))
            {
              v618 = 0;
              v619 = *(_QWORD *)(a4 + 328);
              while (1)
              {
                SampleDataPtrs = (_QWORD *)IR::ComplexDataCircBuffer::getSampleDataPtrs(v644);
                if (v618 >= (unint64_t)((uint64_t)(SampleDataPtrs[1] - *SampleDataPtrs) >> 3))
                  break;
                v621 = *(_QWORD *)(v619 + 8 * v618);
                *(_QWORD *)(*(_QWORD *)IR::ComplexDataCircBuffer::getSampleDataPtrs(v644) + 8 * v618++) = v621;
              }
              IR::ComplexDataCircBuffer::inverseFFTOverlapAdd(v644);
            }
          }
        }
        v622 = *(uint64_t **)(jj + 248);
        v623 = *(uint64_t **)(jj + 256);
        while (v622 != v623)
        {
          v624 = *v622++;
          *(_BYTE *)(v624 + 789) = *(_BYTE *)(v624 + 788);
        }
        return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v706);
      }
    }
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v706);
}

void sub_1B6317920(_Unwind_Exception *a1)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void AUBeamNF::~AUBeamNF(AUBeamNF *this)
{
  AUBeamNF::~AUBeamNF(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  const void *v3;
  _BYTE v4[12];
  __int16 v5;
  int v6;
  __int16 v7;
  AUBeamNF *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D1E70;
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v4 = 136315650;
          *(_QWORD *)&v4[4] = "AUBeamNF.cpp";
          v5 = 1024;
          v6 = 372;
          v7 = 2048;
          v8 = this;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::~AUBeamNF (%p)", v4, 0x1Cu);
        }
      }
    }
  }
  (*(void (**)(AUBeamNF *))(*(_QWORD *)this + 64))(this);
  v3 = (const void *)*((_QWORD *)this + 78);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)v4 = (char *)this + 592;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  ausdk::AUBase::~AUBase(this);
}

const void **AUBeamNF::CreateExtendedElements(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ausdk::AUScope::Initialize(this + 36, (ausdk::AUBase *)this, 4, 2);
  v2 = this[38].i64[1];
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (uint64_t *)this[37].i64[0];
    if ((uint64_t *)this[37].i64[1] == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v3 + 72), CFSTR("Front Beam Settings"));
  v5 = this[38].i64[1];
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 1);
  }
  else
  {
    v7 = this[37].i64[0];
    if ((unint64_t)(this[37].i64[1] - v7) < 9)
      v6 = 0;
    else
      v6 = *(_QWORD *)(v7 + 8);
  }
  return ausdk::Owned<__CFString const*>::operator=((const void **)(v6 + 72), CFSTR("Back Beam Settings"));
}

uint64_t AUBeamNF::Initialize(AUBeamNF *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t Element;
  int16x8_t v7;
  NSObject *v8;
  uint64_t v9;
  int16x8_t v10;
  NSObject *v11;
  uint64_t v12;
  int16x8_t v13;
  double v14;
  int v15;
  unsigned int v16;
  const __CFDictionary *v17;
  int v18;
  Beamformer_BeamNF::CmhBEAM *v19;
  NSObject *v20;
  const __CFNumber *Value;
  NSObject *v23;
  Beamformer_BeamNF::CmhBEAM2NOpt *v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  int32x2_t *v28;
  uint64_t v29;
  NSObject *v30;
  BlockProcessor *v31;
  double v32;
  double v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  os_log_type_t v40;
  uint32_t v41;
  int v42;
  int v43;
  Beamformer_BeamNF::CmhBEAM2NOpt *v44;
  int v45;
  int v46;
  NSObject *v47;
  __int32 valuePtr;
  unsigned int v49;
  _BYTE v50[40];
  __int16 v51;
  int v52;
  uint8_t v53[4];
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint8_t *v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  AUBeamNF *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          v60 = "AUBeamNF.cpp";
          v61 = 1024;
          v62 = 412;
          v63 = 2048;
          v64 = this;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::Initialize (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  if (*((_BYTE *)this + 17))
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v3 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return 4294956447;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v60 = "AUBeamNF.cpp";
      v61 = 1024;
      v62 = 416;
      _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Initialized", buf, 0x12u);
    }
    return 4294956447;
  }
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_27;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    Element = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
    v7 = *(int16x8_t *)(Element + 96);
    *(_OWORD *)v50 = *(_OWORD *)(Element + 80);
    *(int16x8_t *)&v50[16] = v7;
    *(_QWORD *)&v50[32] = *(_QWORD *)(Element + 112);
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v50, (char *)buf, *(double *)v50, v7);
    *(_DWORD *)v53 = 136315650;
    v54 = "AUBeamNF.cpp";
    v55 = 1024;
    v56 = 422;
    v57 = 2080;
    v58 = buf;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: input stream format: %s", v53, 0x1Cu);
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  }
LABEL_27:
  if (AUBeamNFLogScope(void)::scope)
  {
    v8 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_34;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0);
    v10 = *(int16x8_t *)(v9 + 96);
    *(_OWORD *)v50 = *(_OWORD *)(v9 + 80);
    *(int16x8_t *)&v50[16] = v10;
    *(_QWORD *)&v50[32] = *(_QWORD *)(v9 + 112);
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v50, (char *)buf, *(double *)v50, v10);
    *(_DWORD *)v53 = 136315650;
    v54 = "AUBeamNF.cpp";
    v55 = 1024;
    v56 = 423;
    v57 = 2080;
    v58 = buf;
    _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: output stream 0 format: %s", v53, 0x1Cu);
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  }
LABEL_34:
  if (AUBeamNFLogScope(void)::scope)
  {
    v11 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_40;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v12 = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 1u);
    v13 = *(int16x8_t *)(v12 + 96);
    *(_OWORD *)v50 = *(_OWORD *)(v12 + 80);
    *(int16x8_t *)&v50[16] = v13;
    *(_QWORD *)&v50[32] = *(_QWORD *)(v12 + 112);
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v50, (char *)buf, *(double *)v50, v13);
    *(_DWORD *)v53 = 136315650;
    v54 = "AUBeamNF.cpp";
    v55 = 1024;
    v56 = 424;
    v57 = 2080;
    v58 = buf;
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: output stream 1 format: %s", v53, 0x1Cu);
  }
LABEL_40:
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 108) != 2)
    return 4294956428;
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0) + 108) != 1)
    return 4294956428;
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 1u) + 108) != 1)
    return 4294956428;
  v14 = *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
  if (v14 != *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0) + 80))
    return 4294956428;
  v15 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 88);
  if (v15 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0) + 88))
    return 4294956428;
  *(_DWORD *)v53 = 2;
  v16 = *((_DWORD *)this + 133);
  valuePtr = 20;
  v49 = v16;
  v17 = (const __CFDictionary *)*((_QWORD *)this + 78);
  if (v17
    && !CFDictionaryGetValue(v17, CFSTR("diffr"))
    && CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), CFSTR("mic_spacing")))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), CFSTR("mic_spacing"));
    if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
    {
      if (AUBeamNFLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
      if (AUBeamNFLogScope(void)::scope)
      {
        v34 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
          return 4294956421;
      }
      else
      {
        v34 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        return 4294956421;
      *(_DWORD *)v50 = 136315394;
      *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 451;
      v35 = "%25s:%-5d AUBeamNF Error: Converting mic spacing from tuning file";
      v39 = v34;
      v40 = OS_LOG_TYPE_DEBUG;
LABEL_142:
      v41 = 18;
      goto LABEL_143;
    }
    if ((valuePtr - 46) <= 0xFFFFFFDB)
    {
      if (AUBeamNFLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
      if (AUBeamNFLogScope(void)::scope)
      {
        v23 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
          return 4294956421;
      }
      else
      {
        v23 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v50 = 136315650;
        *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
        *(_WORD *)&v50[12] = 1024;
        *(_DWORD *)&v50[14] = 456;
        *(_WORD *)&v50[18] = 1024;
        *(_DWORD *)&v50[20] = valuePtr;
        v35 = "%25s:%-5d AUBeamNF Error: Invalid mic spacing %d";
        v39 = v23;
        v40 = OS_LOG_TYPE_DEBUG;
        v41 = 24;
LABEL_143:
        _os_log_impl(&dword_1B5ED0000, v39, v40, v35, v50, v41);
      }
      return 4294956421;
    }
  }
  v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 88);
  if (v18 != 1718773105)
  {
    if (v18 == 1819304813 && *((_BYTE *)this + 552))
    {
      v19 = (Beamformer_BeamNF::CmhBEAM *)operator new();
      Beamformer_BeamNF::CmhBEAM::CmhBEAM(v19);
      *((_QWORD *)this + 70) = v19;
      if (AUBeamNFLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
      if (AUBeamNFLogScope(void)::scope)
      {
        v20 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        {
LABEL_75:
          v28 = (int32x2_t *)*((_QWORD *)this + 70);
          v29 = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
          if (Beamformer_BeamNF::CmhBEAM::initialize(v28, (int)*(double *)(v29 + 80), valuePtr, *((_DWORD *)this + 133)))
          {
            if (AUBeamNFLogScope(void)::once != -1)
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
            if (AUBeamNFLogScope(void)::scope)
            {
              v30 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                return 4294956421;
            }
            else
            {
              v30 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              return 4294956421;
            *(_DWORD *)v50 = 136315394;
            *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
            *(_WORD *)&v50[12] = 1024;
            *(_DWORD *)&v50[14] = 473;
            v35 = "%25s:%-5d AUBeamNF: Error: Failed initializing BeamNF object";
            goto LABEL_141;
          }
          v31 = (BlockProcessor *)operator new();
          BlockProcessor::BlockProcessor(v31, 1, (const unsigned int *)v53, 2, &v49, 256, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUBeamNF::BlockProcessClassFunc, this);
          *((_QWORD *)this + 71) = v31;
          goto LABEL_124;
        }
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
        v27 = *((_DWORD *)this + 133);
        *(_DWORD *)v50 = 136316162;
        *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
        *(_WORD *)&v50[12] = 1024;
        *(_DWORD *)&v50[14] = 471;
        *(_WORD *)&v50[18] = 2048;
        *(_QWORD *)&v50[20] = v26;
        *(_WORD *)&v50[28] = 1024;
        *(_DWORD *)&v50[30] = 256;
        *(_WORD *)&v50[34] = 1024;
        *(_DWORD *)&v50[36] = v27;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initialize Beam object with: sample rate = %f, optimal frame size = %d, number of beams = %d", v50, 0x28u);
      }
      goto LABEL_75;
    }
    return 4294956428;
  }
  if (*((_BYTE *)this + 552))
    return 4294956428;
  if (!*((_BYTE *)this + 376))
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v36 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v50 = 136315394;
      *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 488;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: AUBeamNFN should have property kAudioUnitProperty_UsesFixedBlockSize set to 1 before initialize", v50, 0x12u);
    }
    return 4294956445;
  }
  v24 = (Beamformer_BeamNF::CmhBEAM2NOpt *)operator new();
  Beamformer_BeamNF::CmhBEAM2NOpt::CmhBEAM2NOpt(v24);
  *((_QWORD *)this + 70) = v24;
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    v25 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_113;
  }
  else
  {
    v25 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v37 = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
    if (*((_BYTE *)this + 540))
    {
      v38 = *((_DWORD *)this + 134);
    }
    else if (*((_BYTE *)this + 376))
    {
      v38 = 2 * *((_DWORD *)this + 84);
    }
    else
    {
      v38 = 480;
    }
    v42 = *((_DWORD *)this + 84);
    v43 = *((_DWORD *)this + 133);
    *(_DWORD *)v50 = 136316418;
    *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
    *(_WORD *)&v50[12] = 1024;
    *(_DWORD *)&v50[14] = 494;
    *(_WORD *)&v50[18] = 2048;
    *(_QWORD *)&v50[20] = v37;
    *(_WORD *)&v50[28] = 1024;
    *(_DWORD *)&v50[30] = v38;
    *(_WORD *)&v50[34] = 1024;
    *(_DWORD *)&v50[36] = v42;
    v51 = 1024;
    v52 = v43;
    _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initialize BeamNFN object with: sample rate = %f, transform size = %d, frame size = %d, number of beams = %d", v50, 0x2Eu);
  }
LABEL_113:
  v44 = (Beamformer_BeamNF::CmhBEAM2NOpt *)*((_QWORD *)this + 70);
  v45 = (int)*(double *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
  if (*((_BYTE *)this + 540))
  {
    v46 = *((_DWORD *)this + 134);
  }
  else if (*((_BYTE *)this + 376))
  {
    v46 = 2 * *((_DWORD *)this + 84);
  }
  else
  {
    v46 = 480;
  }
  if (Beamformer_BeamNF::CmhBEAM2NOpt::initialize(v44, v45, v46, *((_DWORD *)this + 84), valuePtr, *((_DWORD *)this + 133)))
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v30 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v30 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      return 4294956421;
    *(_DWORD *)v50 = 136315394;
    *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
    *(_WORD *)&v50[12] = 1024;
    *(_DWORD *)&v50[14] = 496;
    v35 = "%25s:%-5d AUBeamNF: Error: Failed initializing Beam2N object";
LABEL_141:
    v39 = v30;
    v40 = OS_LOG_TYPE_ERROR;
    goto LABEL_142;
  }
LABEL_124:
  v5 = AUBeamNF::SetDiffractionFilterAndPostEQ(this, v32, v33);
  if ((_DWORD)v5)
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v47 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return v5;
    }
    else
    {
      v47 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v50 = 136315394;
      *(_QWORD *)&v50[4] = "AUBeamNF.cpp";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 508;
      _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Failed setting diffraction filter and post EQ", v50, 0x12u);
    }
  }
  else
  {
    *((_DWORD *)this + 137) = *((_DWORD *)this + 136);
    AUBeamNF::ApplyParameterValues(this);
    if (*((_BYTE *)this + 637))
      AUBeamNF::DumpDiffractionFilter((_BOOL8)this);
    if (*((_BYTE *)this + 638))
      AUBeamNF::DumpPostEQ((_BOOL8)this);
    return 0;
  }
  return v5;
}

void sub_1B63187C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

void AUBeamNF::Cleanup(AUBeamNF *this)
{
  NSObject *v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  AUBeamNF *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          v22 = 136315650;
          v23 = "AUBeamNF.cpp";
          v24 = 1024;
          v25 = 382;
          v26 = 2048;
          v27 = this;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::Cleanup (%p)", (uint8_t *)&v22, 0x1Cu);
        }
      }
    }
  }
  v3 = (char *)this + 560;
  v4 = *((_QWORD *)this + 70);
  if (!*((_BYTE *)this + 552))
  {
    if (!v4)
      return;
    Beamformer_BeamNF::CmhBEAM2NOpt::~CmhBEAM2NOpt(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70));
    goto LABEL_50;
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 124))
    {
      if (*(_QWORD *)(v4 + 56))
      {
        v5 = *(_DWORD *)v4;
        if (*(int *)v4 >= 1)
        {
          v6 = 0;
          do
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
            if (v7)
            {
              MEMORY[0x1BCC95CC8](v7, 0x1000C8052888210);
              v5 = *(_DWORD *)v4;
            }
            ++v6;
          }
          while (v6 < v5);
        }
      }
      if (*(_QWORD *)(v4 + 64))
      {
        v8 = *(_DWORD *)(v4 + 8);
        if (v8 >= 1)
        {
          for (i = 0; i < v8; ++i)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * i);
            if (v10)
            {
              MEMORY[0x1BCC95CC8](v10, 0x1000C8052888210);
              v8 = *(_DWORD *)(v4 + 8);
            }
          }
        }
      }
      if (*(_QWORD *)(v4 + 72))
      {
        v11 = *(_DWORD *)(v4 + 4);
        if (v11 >= 1)
        {
          for (j = 0; j < v11; ++j)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8 * j);
            if (v13)
            {
              MEMORY[0x1BCC95CC8](v13, 0x1000C8052888210);
              v11 = *(_DWORD *)(v4 + 4);
            }
          }
        }
      }
    }
    v14 = *(_QWORD *)(v4 + 56);
    if (v14)
      MEMORY[0x1BCC95CC8](v14, 0x80C80B8603338);
    *(_QWORD *)(v4 + 56) = 0;
    v15 = *(_QWORD *)(v4 + 64);
    if (v15)
      MEMORY[0x1BCC95CC8](v15, 0x80C80B8603338);
    *(_QWORD *)(v4 + 64) = 0;
    v16 = *(_QWORD *)(v4 + 72);
    if (v16)
      MEMORY[0x1BCC95CC8](v16, 0x80C80B8603338);
    *(_QWORD *)(v4 + 72) = 0;
    v17 = *(_QWORD *)(v4 + 80);
    if (v17)
      MEMORY[0x1BCC95CC8](v17, 0x1000C8052888210);
    v18 = *(_QWORD *)(v4 + 32);
    if (v18)
      MEMORY[0x1BCC95CC8](v18, 0x80C80B8603338);
    v19 = *(_QWORD *)(v4 + 40);
    if (v19)
      MEMORY[0x1BCC95CC8](v19, 0x80C80B8603338);
    v20 = *(_QWORD *)(v4 + 48);
    if (v20)
      MEMORY[0x1BCC95CC8](v20, 0x80C80B8603338);
    CmhBEAMprocOpt::deallocate_memory((_DWORD *)(v4 + 88));
    LPFilterBank::~LPFilterBank((LPFilterBank *)(v4 + 1512));
    if (*(_DWORD *)(v4 + 1176))
      Cns::deallocate_memory(v4 + 1176);
    Beamformer_BeamNF::CmhBEAM2NOpt::~CmhBEAM2NOpt((Beamformer_BeamNF::CmhBEAM2NOpt *)(v4 + 272));
    MEMORY[0x1BCC95CEC](v4, 0x10F0C40FCF92710);
    *(_QWORD *)v3 = 0;
  }
  v21 = *((_QWORD *)this + 71);
  if (v21)
  {
    v3 = (char *)this + 568;
    BlockBuffer::~BlockBuffer((BlockBuffer *)(v21 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)v21);
LABEL_50:
    MEMORY[0x1BCC95CEC]();
    *(_QWORD *)v3 = 0;
  }
}

uint64_t AUBeamNF::GetPropertyInfo(AUBeamNF *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 3700:
      goto LABEL_11;
    case 3701:
    case 3704:
      if (*((_BYTE *)this + 552))
        return 4294956417;
      goto LABEL_11;
    case 3702:
    case 3703:
      if (*((_BYTE *)this + 552))
        return 4294956417;
      if (!*((_QWORD *)this + 70))
        return 4294956429;
      *a6 = 0;
      if (!*((_BYTE *)this + 540))
      {
        if (!*((_BYTE *)this + 376))
        {
          v9 = 480;
          goto LABEL_27;
        }
        v10 = *((_DWORD *)this + 84);
        if ((v10 & 0x7FFFFFFF) != 0)
        {
          v9 = 2 * v10;
          goto LABEL_27;
        }
LABEL_23:
        v8 = 0;
        goto LABEL_28;
      }
      v9 = *((_DWORD *)this + 134);
      if (v9 <= 1)
        goto LABEL_23;
LABEL_27:
      v8 = ((2 * v9) & 0xFFFFFFFC) - 4;
LABEL_28:
      result = 0;
      *a5 = v8;
      return result;
    case 3705:
    case 3706:
    case 3707:
    case 3708:
      if (*((_BYTE *)this + 552))
        return 4294956417;
      if (!*((_QWORD *)this + 70))
        return 4294956429;
      *a6 = 0;
      if (*((_BYTE *)this + 540))
      {
        v7 = *((_DWORD *)this + 134);
      }
      else if (*((_BYTE *)this + 376))
      {
        v7 = 2 * *((_DWORD *)this + 84);
      }
      else
      {
        v7 = 480;
      }
      v8 = 4 * v7;
      goto LABEL_28;
    default:
      if (a2 != 21)
        return 4294956417;
LABEL_11:
      *a6 = 1;
      v8 = 4;
      goto LABEL_28;
  }
}

uint64_t AUBeamNF::GetProperty(AUBeamNF *this, int a2, int a3, unsigned int a4, int *__dst)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;

  if (!a3)
  {
    switch(a2)
    {
      case 3700:
        v5 = 0;
        v7 = *((unsigned __int8 *)this + 376);
        goto LABEL_66;
      case 3701:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        if (*((_BYTE *)this + 540))
        {
          v7 = *((_DWORD *)this + 134);
        }
        else if (*((_BYTE *)this + 376))
        {
          v7 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          v7 = 480;
        }
        v5 = 0;
        goto LABEL_66;
      case 3702:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v9 = *((_QWORD *)this + 70);
        if (!v9)
          return 4294956429;
        v10 = *((_DWORD *)this + 133);
        if (v10 == 2)
        {
          v30 = *(unsigned int *)(v9 + 8);
          v31 = *(_QWORD *)(v9 + 440);
          if ((int)v30 < 1)
          {
            v36 = 0;
          }
          else
          {
            v32 = 0;
            v33 = 0;
            v34 = (int *)(v31 + 108);
            do
            {
              v35 = *v34;
              v34 += 34;
              if (v35 == 1)
                v33 = v32;
              ++v32;
            }
            while (v30 != v32);
            v36 = v33;
          }
          if (!*(_DWORD *)(v31 + 136 * v36 + 108))
            return 4294956446;
        }
        else if (v10 == 1)
        {
          v11 = *(_DWORD *)(v9 + 8);
          if (v11 >= 1)
            v11 = 1;
          if (!*(_DWORD *)(*(_QWORD *)(v9 + 440) + 136 * v11 - 28))
            return 4294956446;
        }
        v37 = *((unsigned __int8 *)this + 540);
        if (*((_BYTE *)this + 540))
        {
          v41 = *((_DWORD *)this + 134);
        }
        else
        {
          if (!*((_BYTE *)this + 376))
            goto LABEL_84;
          v41 = 2 * *((_DWORD *)this + 84);
        }
        if (v41 < 2)
          return 0;
LABEL_84:
        v39 = *(_QWORD *)(v9 + 440);
        v40 = *(_DWORD *)(v9 + 8);
        if (v40 >= 1)
          v40 = 1;
LABEL_86:
        v24 = *(const void **)(v39 + 136 * v40 - 16);
        if (v37)
        {
          v42 = *((_DWORD *)this + 134);
        }
        else if (*((_BYTE *)this + 376))
        {
          v42 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          v42 = 480;
        }
        v29 = (v42 >> 1) - 1;
LABEL_92:
        memcpy(__dst, v24, 4 * v29);
        return 0;
      case 3703:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v12 = *((_QWORD *)this + 70);
        if (!v12)
          return 4294956429;
        v13 = *((_DWORD *)this + 133);
        if (v13 == 1)
          return 4294956417;
        if (v13 == 2)
        {
          v14 = *(unsigned int *)(v12 + 8);
          v15 = *(_QWORD *)(v12 + 440);
          if ((int)v14 < 1)
          {
            v20 = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
            v18 = (int *)(v15 + 108);
            do
            {
              v19 = *v18;
              v18 += 34;
              if (v19 == 1)
                v17 = v16;
              ++v16;
            }
            while (v14 != v16);
            v20 = v17;
          }
          if (!*(_DWORD *)(v15 + 136 * v20 + 108))
            return 4294956446;
        }
        v37 = *((unsigned __int8 *)this + 540);
        if (*((_BYTE *)this + 540))
        {
          v38 = *((_DWORD *)this + 134);
        }
        else
        {
          if (!*((_BYTE *)this + 376))
            goto LABEL_74;
          v38 = 2 * *((_DWORD *)this + 84);
        }
        if (v38 < 2)
          return 0;
LABEL_74:
        v39 = *(_QWORD *)(v12 + 440);
        v40 = *(_DWORD *)(v12 + 8);
        if (v40 >= 2)
          v40 = 2;
        goto LABEL_86;
      case 3704:
        v5 = *((unsigned __int8 *)this + 552);
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v7 = *((_DWORD *)this + 158);
LABEL_66:
        *__dst = v7;
        return v5;
      case 3705:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v21 = *((_QWORD *)this + 70);
        if (!v21)
          return 4294956429;
        v22 = *(const void ***)(v21 + 816);
        goto LABEL_36;
      case 3706:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v23 = *((_QWORD *)this + 70);
        if (!v23)
          return 4294956429;
        v22 = *(const void ***)(v23 + 824);
LABEL_36:
        v24 = *v22;
        goto LABEL_50;
      case 3707:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v25 = *((_QWORD *)this + 70);
        if (!v25)
          return 4294956429;
        if (*((_DWORD *)this + 133) == 1)
          return 4294956417;
        v26 = *(_QWORD *)(v25 + 816);
        goto LABEL_46;
      case 3708:
        if (*((_BYTE *)this + 552))
          return 4294956417;
        v25 = *((_QWORD *)this + 70);
        if (!v25)
          return 4294956429;
        if (*((_DWORD *)this + 133) == 1)
          return 4294956417;
        v26 = *(_QWORD *)(v25 + 824);
LABEL_46:
        v27 = *(_DWORD *)(v25 + 8);
        if (v27 > 2)
          v28 = 1;
        else
          v28 = v27 - 1;
        v24 = *(const void **)(v26 + 8 * v28);
LABEL_50:
        if (*((_BYTE *)this + 540))
        {
          v29 = *((_DWORD *)this + 134);
        }
        else if (*((_BYTE *)this + 376))
        {
          v29 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          v29 = 480;
        }
        goto LABEL_92;
      default:
        if (a2 != 21)
          return 4294956417;
        v8 = (*(uint64_t (**)(AUBeamNF *))(*(_QWORD *)this + 576))(this);
        v5 = 0;
        *__dst = v8;
        return v5;
    }
  }
  return 4294956417;
}

uint64_t AUBeamNF::SetProperty(AUBeamNF *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 3700:
      if (a6 < 4)
        goto LABEL_20;
      result = 0;
      *((_BYTE *)this + 376) = *a5;
      break;
    case 3701:
      if (*((_BYTE *)this + 552))
        goto LABEL_18;
      if (a6 < 4)
        goto LABEL_20;
      result = 0;
      *((_DWORD *)this + 134) = *(_DWORD *)a5;
      *((_BYTE *)this + 540) = 1;
      break;
    case 3702:
    case 3703:
    case 3705:
    case 3706:
    case 3707:
    case 3708:
      if (*((_BYTE *)this + 552))
        result = 4294956417;
      else
        result = 4294956431;
      break;
    case 3704:
      if (*((_BYTE *)this + 552))
        goto LABEL_18;
      if (a6 < 4)
        goto LABEL_20;
      result = 0;
      *((_DWORD *)this + 158) = *(_DWORD *)a5 != 0;
      goto LABEL_22;
    default:
      if (a2 == 21)
      {
        if (a6 < 4)
        {
LABEL_20:
          result = 4294956445;
        }
        else
        {
          v8 = *(_DWORD *)a5;
          v9 = *(_DWORD *)a5 != 0;
          if (v9 != (*(unsigned int (**)(AUBeamNF *))(*(_QWORD *)this + 576))(this))
            *((_DWORD *)this + 132) = v8 != 0;
          result = 0;
LABEL_22:
          ++*((_DWORD *)this + 136);
        }
      }
      else
      {
LABEL_18:
        result = 4294956417;
      }
      break;
  }
  return result;
}

uint64_t AUBeamNF::SetParameter(AUBeamNF *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  NSObject *v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  uint64_t result;
  uint64_t v14;
  ausdk::AUElement *v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  ausdk::AUElement **v21;
  ausdk::AUElement **v22;
  float v23;
  float v24;
  uint64_t v25;
  double v26;
  double v27;
  CmhMicCheck *v28;
  uint64_t v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  NSObject *v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  _BOOL4 v149;
  int v150;
  double v151;
  double v152;
  int v153;
  float *v154;
  float *v155;
  float *v156;
  float *v157;
  float *v158;
  float *v159;
  unsigned int v160;
  _DWORD *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  int v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  int v177;
  double v178;
  double v179;
  _BOOL4 v180;
  int v181;
  double v182;
  double v183;
  int v184;
  double v185;
  double v186;
  Beamformer_BeamNF::CmhBEAM *v187;
  double v188;
  double v189;
  int v190;
  int *v191;
  float *v192;
  float *v193;
  float *v194;
  float *v195;
  float *v196;
  float *v197;
  float *v198;
  float *v199;
  float *v200;
  float *v201;
  float *v202;
  double v203;
  double v204;
  uint64_t v205;
  double v206;
  double v207;
  double v208;
  double v209;
  unsigned int v210;
  float Parameter;
  uint64_t v212;
  ausdk::AUElement *v213;
  uint64_t v214;
  float v215;
  uint64_t v216;
  ausdk::AUElement *v217;
  uint64_t v218;
  float v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t Element;
  double v223;
  double v224;
  unsigned int v225;
  CmhBEAM2NOpt *v226;
  unint64_t v227;
  float *v228;
  unint64_t v229;
  double v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  _BOOL4 v246;
  float v247;
  _BYTE buf[18];
  __int16 v249;
  AUBeamNF *v250;
  __int16 v251;
  unsigned int v252;
  __int16 v253;
  int v254;
  __int16 v255;
  int v256;
  __int16 v257;
  double v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v247 = a5;
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1048;
          v249 = 2048;
          v250 = this;
          v251 = 1024;
          v252 = a2;
          v253 = 1024;
          v254 = a3;
          v255 = 1024;
          v256 = a4;
          v257 = 2048;
          v258 = a5;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetParameter (%p): id = %d, scope=%d, element=%d, inValue = %f", buf, 0x38u);
        }
      }
    }
  }
  v246 = 0;
  if (a3 == 4)
  {
    result = 4294956418;
    switch(a2)
    {
      case 1u:
        v30 = *((_QWORD *)this + 77);
        if (v30)
        {
          v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, a4);
        }
        else
        {
          v107 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v107) >> 3))
            v31 = 0;
          else
            v31 = *(ausdk::AUElement **)(v107 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v31, 1u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v145 = v247;
        v246 = v247 != 0.0;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 3, (CmhBEAM2NOpt *)&v246, v145, v146);
          return 0;
        }
        result = 0;
        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 856) + 44) = v247 != 0.0;
        return result;
      case 2u:
        v60 = *((_QWORD *)this + 77);
        if (v60)
        {
          v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, a4);
        }
        else
        {
          v122 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v122) >> 3))
            v61 = 0;
          else
            v61 = *(ausdk::AUElement **)(v122 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v61, 2u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v171 = v247;
        v246 = v247 != 0.0;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 66, (CmhBEAM2NOpt *)&v246, v171, v172);
          return 0;
        }
        result = 0;
        *(_DWORD *)(*((_QWORD *)this + 70) + 240) = v247 != 0.0;
        return result;
      case 3u:
        v32 = *((_QWORD *)this + 77);
        if (v32)
        {
          v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, a4);
        }
        else
        {
          v108 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v108) >> 3))
            v33 = 0;
          else
            v33 = *(ausdk::AUElement **)(v108 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v33, 3u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v147 = v247;
        v149 = v247 != 0.0;
        v246 = v149;
        v150 = *((_DWORD *)this + 133);
        if (*((_BYTE *)this + 552))
        {
          if (v150 == 1)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 68, (CmhBEAM2NOpt *)&v246, v147, v148);
          }
          else if (v150 == 2)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 4, (CmhBEAM2NOpt *)&v246, v147, v148);
          }
          return 0;
        }
        if (v150 == 1)
        {
          result = 0;
          *(_DWORD *)(*((_QWORD *)this + 70) + 260) = v149;
        }
        else
        {
          if (v150 != 2)
            return 0;
          result = 0;
          v232 = *((_QWORD *)this + 70);
          *(_DWORD *)(v232 + 260) = v149;
          *(_DWORD *)(v232 + 264) = v149;
        }
        return result;
      case 4u:
        v62 = *((_QWORD *)this + 77);
        if (v62)
        {
          v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(v62, a4);
        }
        else
        {
          v123 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v123) >> 3))
            v63 = 0;
          else
            v63 = *(ausdk::AUElement **)(v123 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v63, 4u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v173 = v247;
        v246 = v247 != 0.0;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 5, (CmhBEAM2NOpt *)&v246, v173, v174);
          return 0;
        }
        result = 0;
        *(_DWORD *)(*((_QWORD *)this + 70) + 376) = v247 != 0.0;
        return result;
      case 5u:
        v64 = *((_QWORD *)this + 77);
        if (v64)
        {
          v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, a4);
        }
        else
        {
          v124 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v124) >> 3))
            v65 = 0;
          else
            v65 = *(ausdk::AUElement **)(v124 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v65, 5u, v247, 0);
        if (!*((_QWORD *)this + 70) || !*((_BYTE *)this + 552))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v175 = v247;
        v246 = v247 != 0.0;
        v177 = *((_DWORD *)this + 133);
        if (v177 == 1)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 70, (CmhBEAM2NOpt *)&v246, v175, v176);
        }
        else if (v177 == 2)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 6, (CmhBEAM2NOpt *)&v246, v175, v176);
        }
        return 0;
      case 6u:
        v34 = *((_QWORD *)this + 77);
        if (v34)
        {
          v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 32))(v34, a4);
        }
        else
        {
          v109 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v109) >> 3))
            v35 = 0;
          else
            v35 = *(ausdk::AUElement **)(v109 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v35, 6u, v247, 0);
        if (!*((_QWORD *)this + 70) || !*((_BYTE *)this + 552))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v153 = *((_DWORD *)this + 133);
        if (v153 == 1)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 72, (CmhBEAM2NOpt *)&v247, v151, v152);
        }
        else if (v153 == 2)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 7, (CmhBEAM2NOpt *)&v247, v151, v152);
        }
        return 0;
      case 7u:
        v66 = *((_QWORD *)this + 77);
        if (v66)
        {
          v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 32))(v66, a4);
        }
        else
        {
          v125 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v125) >> 3))
            v67 = 0;
          else
            v67 = *(ausdk::AUElement **)(v125 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v67, 7u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v178 = v247;
        v180 = v247 != 0.0;
        v246 = v180;
        v181 = *((_DWORD *)this + 133);
        if (*((_BYTE *)this + 552))
        {
          if (v181 == 1)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 74, (CmhBEAM2NOpt *)&v246, v178, v179);
          }
          else if (v181 == 2)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 39, (CmhBEAM2NOpt *)&v246, v178, v179);
          }
          return 0;
        }
        if (v181 == 1)
        {
          result = 0;
          v242 = *((_QWORD *)this + 70);
          v243 = *(_DWORD *)(v242 + 8);
          if (v243 >= 1)
            v243 = 1;
          *(_DWORD *)(*(_QWORD *)(v242 + 440) + 136 * v243 - 28) = v180;
          return result;
        }
        if (v181 == 2)
        {
          v233 = *((_QWORD *)this + 70);
          v234 = *(_QWORD *)(v233 + 440);
          *(_DWORD *)(v234 + 108) = v180;
          if (*(int *)(v233 + 8) >= 2)
          {
            result = 0;
            *(_DWORD *)(v234 + 244) = v180;
            return result;
          }
        }
        return 0;
      case 8u:
        v68 = *((_QWORD *)this + 77);
        if (v68)
        {
          v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 32))(v68, a4);
        }
        else
        {
          v126 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v126) >> 3))
            v69 = 0;
          else
            v69 = *(ausdk::AUElement **)(v126 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v69, 8u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v184 = *((_DWORD *)this + 133);
        if (*((_BYTE *)this + 552))
        {
          if (v184 == 1)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 76, (CmhBEAM2NOpt *)&v247, v182, v183);
          }
          else if (v184 == 2)
          {
            Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 42, (CmhBEAM2NOpt *)&v247, v182, v183);
          }
          return 0;
        }
        if (v184 == 1)
        {
          result = 0;
          v244 = *((_QWORD *)this + 70);
          v245 = *(_DWORD *)(v244 + 8);
          if (v245 >= 1)
            v245 = 1;
          *(float *)(*(_QWORD *)(v244 + 440) + 136 * v245 - 24) = v247;
          return result;
        }
        if (v184 == 2)
        {
          v235 = *((_QWORD *)this + 70);
          v236 = v247;
          v237 = *(_QWORD *)(v235 + 440);
          *(float *)(v237 + 112) = v247;
          if (*(int *)(v235 + 8) >= 2)
          {
            result = 0;
            *(float *)(v237 + 248) = v236;
            return result;
          }
        }
        return 0;
      case 9u:
        v70 = *((_QWORD *)this + 77);
        if (v70)
        {
          v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 32))(v70, a4);
        }
        else
        {
          v127 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v127) >> 3))
            v71 = 0;
          else
            v71 = *(ausdk::AUElement **)(v127 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v71, 9u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v187 = (Beamformer_BeamNF::CmhBEAM *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
          Beamformer_BeamNF::CmhBEAM::setParameter(v187, 35, (CmhBEAM2NOpt *)&v247, v185, v186);
        else
          CmhBEAM2NOpt::setWNG(v187, v247);
        return 0;
      case 0xAu:
      case 0x26u:
      case 0x27u:
        v14 = *((_QWORD *)this + 77);
        if (v14)
        {
          v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a4);
        }
        else
        {
          v29 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v29) >> 3))
            v15 = 0;
          else
            v15 = *(ausdk::AUElement **)(v29 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v15, a2, v247, 0);
        if (AUBeamNFLogScope(void)::once != -1)
          dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
        if (AUBeamNFLogScope(void)::scope)
        {
          if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
          {
            v104 = *(NSObject **)AUBeamNFLogScope(void)::scope;
            if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1595;
                v249 = 2048;
                v250 = this;
                _os_log_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetBetaVector (%p)", buf, 0x1Cu);
              }
            }
          }
        }
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v105 = *((_QWORD *)this + 77);
        if (v105)
        {
          v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 32))(v105, a4);
        }
        else
        {
          v144 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v144) >> 3))
            v106 = 0;
          else
            v106 = *(ausdk::AUElement **)(v144 + 8 * a4);
        }
        Parameter = ausdk::AUElement::GetParameter(v106, 0xAu);
        v212 = *((_QWORD *)this + 77);
        if (v212)
        {
          v213 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v212 + 32))(v212, a4);
        }
        else
        {
          v214 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v214) >> 3))
            v213 = 0;
          else
            v213 = *(ausdk::AUElement **)(v214 + 8 * a4);
        }
        v215 = ausdk::AUElement::GetParameter(v213, 0x27u);
        v216 = *((_QWORD *)this + 77);
        if (v216)
        {
          v217 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 32))(v216, a4);
        }
        else
        {
          v218 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v218) >> 3))
            v217 = 0;
          else
            v217 = *(ausdk::AUElement **)(v218 + 8 * a4);
        }
        v219 = ausdk::AUElement::GetParameter(v217, 0x26u);
        v220 = *((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          v221 = *(unsigned int *)(v220 + 140);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          std::valarray<float>::resize((uint64_t)buf, v221, Parameter);
          Element = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
          v223 = (float)(2 * v221 - 2);
          v224 = v219 / *(double *)(Element + 80) * v223;
          v225 = v224;
          v226 = *(CmhBEAM2NOpt **)buf;
          if (v221 > v224)
          {
            v227 = v221 - v225;
            v228 = (float *)(*(_QWORD *)buf + 4 * v225);
            do
            {
              *v228++ = v215;
              --v227;
            }
            while (v227);
          }
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 46, v226, v224, v223);
        }
        else
        {
          v229 = *(unsigned int *)(v220 + 28);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          std::valarray<float>::resize((uint64_t)buf, v229, Parameter);
          v230 = v219 / *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
          if (*((_BYTE *)this + 540))
          {
            v231 = *((_DWORD *)this + 134);
          }
          else if (*((_BYTE *)this + 376))
          {
            v231 = 2 * *((_DWORD *)this + 84);
          }
          else
          {
            v231 = 480;
          }
          v241 = (v230 * (float)v231);
          v226 = *(CmhBEAM2NOpt **)buf;
          if (v229 > v241)
          {
            do
              *((float *)v226 + v241++) = v215;
            while (v229 != v241);
            Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(*((_QWORD *)this + 70), (float *)v226);
            goto LABEL_479;
          }
          Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(*((_QWORD *)this + 70), *(float **)buf);
        }
        if (!v226)
          return 0;
LABEL_479:
        operator delete(v226);
        return 0;
      case 0xBu:
        v72 = *((_QWORD *)this + 77);
        if (v72)
        {
          v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 32))(v72, a4);
        }
        else
        {
          v128 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v128) >> 3))
            v73 = 0;
          else
            v73 = *(ausdk::AUElement **)(v128 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v73, 0xBu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v188 = v247;
        v190 = llroundf(v247);
        v246 = v190;
        v191 = (int *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 78, (CmhBEAM2NOpt *)&v246, v188, v189);
          return 0;
        }
        result = 0;
        v238 = (int)(float)((float)((float)v190 / (float)v191[3]) * (float)v191[4]);
        v191[8] = v190;
        v239 = v191[6] - 1;
        if (v239 >= v238)
          v239 = v238;
        v191[64] = v239;
        return result;
      case 0xDu:
        v36 = *((_QWORD *)this + 77);
        if (v36)
        {
          v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, a4);
        }
        else
        {
          v110 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v110) >> 3))
            v37 = 0;
          else
            v37 = *(ausdk::AUElement **)(v110 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v37, 0xDu, v247, 0);
        return 0;
      case 0xEu:
        v74 = *((_QWORD *)this + 77);
        if (v74)
        {
          v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 32))(v74, a4);
        }
        else
        {
          v129 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v129) >> 3))
            v75 = 0;
          else
            v75 = *(ausdk::AUElement **)(v129 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v75, 0xEu, v247, 0);
        return 0;
      case 0xFu:
        v76 = *((_QWORD *)this + 77);
        if (v76)
        {
          v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 32))(v76, a4);
        }
        else
        {
          v130 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v130) >> 3))
            v77 = 0;
          else
            v77 = *(ausdk::AUElement **)(v130 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v77, 0xFu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v192 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v192, 83, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v192 + 124);
        *(float *)&v26 = v247;
        v192[134] = v247;
        goto LABEL_45;
      case 0x10u:
        v78 = *((_QWORD *)this + 77);
        if (v78)
        {
          v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 32))(v78, a4);
        }
        else
        {
          v131 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v131) >> 3))
            v79 = 0;
          else
            v79 = *(ausdk::AUElement **)(v131 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v79, 0x10u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v193 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v193, 84, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v193 + 124);
        *(float *)&v26 = v247;
        v193[135] = v247;
        goto LABEL_45;
      case 0x11u:
        v80 = *((_QWORD *)this + 77);
        if (v80)
        {
          v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 32))(v80, a4);
        }
        else
        {
          v132 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v132) >> 3))
            v81 = 0;
          else
            v81 = *(ausdk::AUElement **)(v132 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v81, 0x11u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v194 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v194, 85, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v194 + 124);
        *(float *)&v26 = v247;
        v194[136] = v247;
        goto LABEL_45;
      case 0x12u:
        v38 = *((_QWORD *)this + 77);
        if (v38)
        {
          v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, a4);
        }
        else
        {
          v111 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v111) >> 3))
            v39 = 0;
          else
            v39 = *(ausdk::AUElement **)(v111 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v39, 0x12u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v154 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v154, 86, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v154 + 124);
        *(float *)&v26 = v247;
        v154[137] = v247;
        goto LABEL_45;
      case 0x13u:
        v82 = *((_QWORD *)this + 77);
        if (v82)
        {
          v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 32))(v82, a4);
        }
        else
        {
          v133 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v133) >> 3))
            v83 = 0;
          else
            v83 = *(ausdk::AUElement **)(v133 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v83, 0x13u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v195 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v195, 87, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v195 + 124);
        *(float *)&v26 = v247;
        v195[138] = v247;
        goto LABEL_45;
      case 0x14u:
        v84 = *((_QWORD *)this + 77);
        if (v84)
        {
          v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 32))(v84, a4);
        }
        else
        {
          v134 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v134) >> 3))
            v85 = 0;
          else
            v85 = *(ausdk::AUElement **)(v134 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v85, 0x14u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v196 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v196, 88, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v196 + 124);
        *(float *)&v26 = v247;
        v196[139] = v247;
        goto LABEL_45;
      case 0x15u:
        v40 = *((_QWORD *)this + 77);
        if (v40)
        {
          v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 32))(v40, a4);
        }
        else
        {
          v112 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v112) >> 3))
            v41 = 0;
          else
            v41 = *(ausdk::AUElement **)(v112 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v41, 0x15u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v155 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v155, 89, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v155 + 124);
        *(float *)&v26 = v247;
        v155[140] = v247;
        goto LABEL_45;
      case 0x16u:
        v86 = *((_QWORD *)this + 77);
        if (v86)
        {
          v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 32))(v86, a4);
        }
        else
        {
          v135 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v135) >> 3))
            v87 = 0;
          else
            v87 = *(ausdk::AUElement **)(v135 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v87, 0x16u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v197 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v197, 90, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v197 + 124);
        *(float *)&v26 = v247;
        v197[141] = v247;
        goto LABEL_45;
      case 0x17u:
        v42 = *((_QWORD *)this + 77);
        if (v42)
        {
          v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, a4);
        }
        else
        {
          v113 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v113) >> 3))
            v43 = 0;
          else
            v43 = *(ausdk::AUElement **)(v113 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v43, 0x17u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v156 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v156, 91, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v156 + 124);
        *(float *)&v26 = v247;
        v156[142] = v247;
        goto LABEL_45;
      case 0x18u:
        v88 = *((_QWORD *)this + 77);
        if (v88)
        {
          v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 32))(v88, a4);
        }
        else
        {
          v136 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v136) >> 3))
            v89 = 0;
          else
            v89 = *(ausdk::AUElement **)(v136 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v89, 0x18u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v198 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v198, 92, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v198 + 124);
        *(float *)&v26 = v247;
        v198[143] = v247;
        goto LABEL_45;
      case 0x19u:
        v44 = *((_QWORD *)this + 77);
        if (v44)
        {
          v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, a4);
        }
        else
        {
          v114 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v114) >> 3))
            v45 = 0;
          else
            v45 = *(ausdk::AUElement **)(v114 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v45, 0x19u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v157 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v157, 93, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v157 + 124);
        *(float *)&v26 = v247;
        v157[144] = v247;
        goto LABEL_45;
      case 0x1Au:
        v46 = *((_QWORD *)this + 77);
        if (v46)
        {
          v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 32))(v46, a4);
        }
        else
        {
          v115 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v115) >> 3))
            v47 = 0;
          else
            v47 = *(ausdk::AUElement **)(v115 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v47, 0x1Au, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v158 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v158, 94, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v158 + 124);
        *(float *)&v26 = v247;
        v158[145] = v247;
        goto LABEL_45;
      case 0x1Bu:
        v90 = *((_QWORD *)this + 77);
        if (v90)
        {
          v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 32))(v90, a4);
        }
        else
        {
          v137 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v137) >> 3))
            v91 = 0;
          else
            v91 = *(ausdk::AUElement **)(v137 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v91, 0x1Bu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v199 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v199, 95, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v199 + 124);
        *(float *)&v26 = v247;
        v199[146] = v247;
        goto LABEL_45;
      case 0x1Cu:
        v48 = *((_QWORD *)this + 77);
        if (v48)
        {
          v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, a4);
        }
        else
        {
          v116 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v116) >> 3))
            v49 = 0;
          else
            v49 = *(ausdk::AUElement **)(v116 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v49, 0x1Cu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v159 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v159, 96, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v159 + 124);
        *(float *)&v26 = v247;
        v159[147] = v247;
        goto LABEL_45;
      case 0x1Du:
        v92 = *((_QWORD *)this + 77);
        if (v92)
        {
          v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 32))(v92, a4);
        }
        else
        {
          v138 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v138) >> 3))
            v93 = 0;
          else
            v93 = *(ausdk::AUElement **)(v138 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v93, 0x1Du, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v200 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v200, 97, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v200 + 124);
        *(float *)&v26 = v247;
        v200[148] = v247;
        goto LABEL_45;
      case 0x1Eu:
        v94 = *((_QWORD *)this + 77);
        if (v94)
        {
          v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 32))(v94, a4);
        }
        else
        {
          v139 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v139) >> 3))
            v95 = 0;
          else
            v95 = *(ausdk::AUElement **)(v139 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v95, 0x1Eu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v201 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v201, 98, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v201 + 124);
        *(float *)&v26 = v247;
        v201[149] = v247;
        goto LABEL_45;
      case 0x1Fu:
        v96 = *((_QWORD *)this + 77);
        if (v96)
        {
          v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 32))(v96, a4);
        }
        else
        {
          v140 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v140) >> 3))
            v97 = 0;
          else
            v97 = *(ausdk::AUElement **)(v140 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v97, 0x1Fu, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v202 = (float *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v202, 99, (CmhBEAM2NOpt *)&v247, v26, v27);
          return 0;
        }
        v28 = (CmhMicCheck *)(v202 + 124);
        *(float *)&v26 = v247;
        v202[150] = v247;
        goto LABEL_45;
      case 0x21u:
        v50 = *((_QWORD *)this + 77);
        if (v50)
        {
          v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, a4);
        }
        else
        {
          v117 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v117) >> 3))
            v51 = 0;
          else
            v51 = *(ausdk::AUElement **)(v117 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v51, 0x21u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v26 = v247;
        v160 = llroundf(v247);
        v246 = v160;
        v161 = (_DWORD *)*((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v161, 81, (CmhBEAM2NOpt *)&v246, v26, v27);
          return 0;
        }
        v161[34] = v160;
        v28 = (CmhMicCheck *)(v161 + 124);
        v161[151] = v160;
        goto LABEL_45;
      case 0x22u:
        v52 = *((_QWORD *)this + 77);
        if (v52)
        {
          v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 32))(v52, a4);
        }
        else
        {
          v118 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v118) >> 3))
            v53 = 0;
          else
            v53 = *(ausdk::AUElement **)(v118 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v53, 0x22u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 103, (CmhBEAM2NOpt *)&v247, v162, v163);
          return 0;
        }
        result = 0;
        *(float *)(*((_QWORD *)this + 70) + 380) = v247;
        return result;
      case 0x23u:
        v98 = *((_QWORD *)this + 77);
        if (v98)
        {
          v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 32))(v98, a4);
        }
        else
        {
          v141 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v141) >> 3))
            v99 = 0;
          else
            v99 = *(ausdk::AUElement **)(v141 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v99, 0x23u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v205 = *((_QWORD *)this + 70);
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 104, (CmhBEAM2NOpt *)&v247, v203, v204);
          return 0;
        }
        result = 0;
        v240 = (int)(float)((float)(v247 / (float)*(int *)(v205 + 12)) * (float)*(int *)(v205 + 16));
        if (*(_DWORD *)(v205 + 24) - 1 < v240)
          v240 = *(_DWORD *)(v205 + 24) - 1;
        *(float *)(v205 + 140) = v247;
        *(float *)(v205 + 384) = (float)v240;
        return result;
      case 0x24u:
        v100 = *((_QWORD *)this + 77);
        if (v100)
        {
          v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 32))(v100, a4);
        }
        else
        {
          v142 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v142) >> 3))
            v101 = 0;
          else
            v101 = *(ausdk::AUElement **)(v142 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v101, 0x24u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 105, (CmhBEAM2NOpt *)&v247, v206, v207);
          return 0;
        }
        result = 0;
        *(float *)(*((_QWORD *)this + 70) + 388) = v247;
        return result;
      case 0x25u:
        v54 = *((_QWORD *)this + 77);
        if (v54)
        {
          v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 32))(v54, a4);
        }
        else
        {
          v119 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v119) >> 3))
            v55 = 0;
          else
            v55 = *(ausdk::AUElement **)(v119 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v55, 0x25u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 106, (CmhBEAM2NOpt *)&v247, v164, v165);
          return 0;
        }
        result = 0;
        *(float *)(*((_QWORD *)this + 70) + 392) = v247;
        return result;
      case 0x28u:
        v102 = *((_QWORD *)this + 77);
        if (v102)
        {
          v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 32))(v102, a4);
        }
        else
        {
          v143 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v143) >> 3))
            v103 = 0;
          else
            v103 = *(ausdk::AUElement **)(v143 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v103, 0x28u, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v208 = v247;
        v210 = llroundf(v247);
        v246 = v210;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 107, (CmhBEAM2NOpt *)&v246, v208, v209);
          return 0;
        }
        result = 0;
        *(_DWORD *)(*((_QWORD *)this + 70) + 144) = v210;
        return result;
      case 0x29u:
        v56 = *((_QWORD *)this + 77);
        if (v56)
        {
          v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 32))(v56, a4);
        }
        else
        {
          v120 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v120) >> 3))
            v57 = 0;
          else
            v57 = *(ausdk::AUElement **)(v120 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v57, 0x29u, v247, 0);
        if (!*((_QWORD *)this + 70) || !*((_BYTE *)this + 552))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        v168 = *((_DWORD *)this + 133);
        if (v168 == 1 || v168 == 2)
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 101, (CmhBEAM2NOpt *)&v247, v166, v167);
        return 0;
      case 0x2Au:
        v58 = *((_QWORD *)this + 77);
        if (v58)
        {
          v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 32))(v58, a4);
        }
        else
        {
          v121 = *((_QWORD *)this + 74);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 75) - v121) >> 3))
            v59 = 0;
          else
            v59 = *(ausdk::AUElement **)(v121 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v59, 0x2Au, v247, 0);
        if (!*((_QWORD *)this + 70))
          return 0;
        result = AUBeamNF::IsActivePart(this, a4);
        if (!(_DWORD)result)
          return result;
        *(float *)&v169 = v247;
        v246 = v247 != 0.0;
        if (*((_BYTE *)this + 552))
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 43, (CmhBEAM2NOpt *)&v246, v169, v170);
          return 0;
        }
        result = 0;
        *(_DWORD *)(*((_QWORD *)this + 70) + 284) = v247 != 0.0;
        break;
      default:
        return result;
    }
  }
  else
  {
    if (a3)
      return 4294956430;
    if (a2 == 32)
    {
      v16 = *((_QWORD *)this + 9);
      if (v16)
      {
        v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
      }
      else
      {
        v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v21)
          v17 = 0;
        else
          v17 = *v21;
      }
      v24 = 1.0;
      if (v247 == 0.0)
        v24 = 0.0;
      ausdk::AUElement::SetParameter(v17, 0x20u, v24, 0);
      v25 = *((_QWORD *)this + 70);
      if (v25 && !*((_BYTE *)this + 552))
      {
        result = 0;
        *(_DWORD *)(v25 + 120) = v247 != 0.0;
        return result;
      }
      return 0;
    }
    if (a2 != 12)
    {
      if (a2)
        return 4294956418;
      v11 = *((_QWORD *)this + 9);
      if (v11)
      {
        v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
      }
      else
      {
        v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v20)
          v12 = 0;
        else
          v12 = *v20;
      }
      v23 = 1.0;
      if (v247 == 0.0)
        v23 = 0.0;
      ausdk::AUElement::SetParameter(v12, 0, v23, 0);
      result = 0;
      ++*((_DWORD *)this + 136);
      return result;
    }
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    }
    else
    {
      v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v22)
        v19 = 0;
      else
        v19 = *v22;
    }
    ausdk::AUElement::SetParameter(v19, 0xCu, v247, 0);
    result = *((_QWORD *)this + 70);
    if (result)
    {
      if (*((_BYTE *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)result, 67, (CmhBEAM2NOpt *)&v247, v26, v27);
      }
      else
      {
        v28 = (CmhMicCheck *)(result + 496);
        *(float *)&v26 = v247;
        *(float *)(result + 532) = v247;
LABEL_45:
        CmhMicCheck::init_check_mics(v28, v26, v27);
      }
      return 0;
    }
  }
  return result;
}

void sub_1B631AED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUBeamNF::CanScheduleParameters(AUBeamNF *this)
{
  return 0;
}

uint64_t AUBeamNF::ProcessBufferLists(AUBeamNF *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  NSObject *v19;
  uint64_t Parameter;
  int v21;
  DSPSplitComplex v22;
  _BYTE buf[24];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 70))
    return 4294956429;
  v9 = *((_DWORD *)this + 136);
  if (v9 != *((_DWORD *)this + 137))
  {
    AUBeamNF::ApplyParameterValues(this);
    *((_DWORD *)this + 137) = v9;
  }
  if (!*((_BYTE *)this + 552))
  {
    if (*((_DWORD *)this + 84) == a5)
    {
      *(_QWORD *)buf = *(_QWORD *)&a3[1].mBuffers[0].mNumberChannels;
      *(_QWORD *)&buf[8] = *(_QWORD *)buf + 4 * a5;
      *(_QWORD *)&buf[16] = a3->mBuffers[0].mData;
      v24 = *(_QWORD *)&buf[16] + 4 * a5;
      v22.realp = (float *)a4->mBuffers[0].mData;
      v22.imagp = &v22.realp[a5];
      Beamformer_BeamNF::CmhBEAM2NOpt::process(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), (const DSPSplitComplex *)buf, &v22);
      goto LABEL_9;
    }
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v19 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return 4294956418;
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v21 = *((_DWORD *)this + 84);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2288;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a5;
      LOWORD(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 2) = v21;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: inFramesToProcess != GetMaxFramesPerSlice(), inFramesToProcess = %d, GetMaxFramesPerSlice() = %d", buf, 0x1Eu);
    }
    return 4294956418;
  }
  *(_QWORD *)buf = a3;
  v22.realp = (float *)&a4->mNumberBuffers;
  BlockProcessor::Process(*((BlockProcessor **)this + 71), a5, (const AudioBufferList **)buf, (AudioBufferList **)&v22);
LABEL_9:
  v11 = *((_QWORD *)this + 70);
  v12 = 404;
  if (!*((_BYTE *)this + 552))
    v12 = 132;
  v13 = 1128;
  if (!*((_BYTE *)this + 552))
    v13 = 856;
  v14 = *(_DWORD *)(v11 + v12);
  v15 = *(float *)(*(_QWORD *)(v11 + v13) + 16);
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  Parameter = ausdk::AUElement::GetParameter(v17, 0);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 14, 4, Parameter, 0, (float)v14);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 13, 4, Parameter, 0, v15 * 4.0);
  return 0;
}

uint64_t AUBeamNF::ProcessMultipleBufferLists(AUBeamNF *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  float **p_imagp;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  int v16;
  float v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  NSObject *v21;
  ausdk::AUElement **v22;
  int v23;
  uint64_t Parameter;
  DSPSplitComplex v25[2];
  _BYTE buf[24];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a4 != 1 || *((_DWORD *)this + 133) != a6)
    return 4294956428;
  if (*((_BYTE *)this + 552))
    return 0;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v21 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        return 4294956418;
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v23 = *((_DWORD *)this + 84);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2351;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = v23;
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: inFramesToProcess != GetMaxFramesPerSlice(), inFramesToProcess = %d, GetMaxFramesPerSlice() = %d", buf, 0x1Eu);
    }
    return 4294956418;
  }
  v9 = (uint64_t)*a5;
  v10 = (char *)(*a5)->mBuffers[0].mData + 4 * a3;
  *(_QWORD *)buf = (*a5)->mBuffers[0].mData;
  *(_QWORD *)&buf[8] = v10;
  *(_QWORD *)&buf[16] = *(_QWORD *)(v9 + 32);
  v27 = *(_QWORD *)&buf[16] + 4 * a3;
  if (a6)
  {
    v11 = a6;
    p_imagp = &v25[0].imagp;
    do
    {
      v13 = (uint64_t)*a7++;
      v14 = *(float **)(v13 + 16);
      *(p_imagp - 1) = v14;
      *p_imagp = &v14[a3];
      p_imagp += 2;
      --v11;
    }
    while (v11);
  }
  Beamformer_BeamNF::CmhBEAM2NOpt::process(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), (const DSPSplitComplex *)buf, v25);
  v15 = *((_QWORD *)this + 70);
  v16 = *(_DWORD *)(v15 + 132);
  v17 = *(float *)(*(_QWORD *)(v15 + 856) + 16);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v19 = 0;
    else
      v19 = *v22;
  }
  Parameter = ausdk::AUElement::GetParameter(v19, 0);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 14, 4, Parameter, 0, (float)v16);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 13, 4, Parameter, 0, v17 * 4.0);
  return 0;
}

uint64_t AUBeamNF::Render(AUBeamNF *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v10;
  ausdk::AUIOElement *v11;
  ausdk::AUIOElement *v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v10 = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
    v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    v11 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0);
    v13[0] = ausdk::AUIOElement::PrepareBuffer(v11, a4);
    v12 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 1u);
    v13[1] = ausdk::AUIOElement::PrepareBuffer(v12, a4);
    return (*(uint64_t (**)(AUBeamNF *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v14, 2, v13);
  }
  return result;
}

uint64_t AUBeamNF::GetParameterInfo(AUBeamNF *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterUnit v6;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  const __CFString *v10;
  AudioUnitParameterValue v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  AudioUnitParameterOptions v16;
  AudioUnitParameterValue v17;
  uint64_t v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;

  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    result = 4294956418;
    switch(a3)
    {
      case 1:
        v8 = CFSTR("Front-end Calibration Enable");
        goto LABEL_66;
      case 2:
        v8 = CFSTR("Fixed Beamformer Enable");
        goto LABEL_66;
      case 3:
        v12 = CFSTR("Adaptive Beamformer Enable");
        goto LABEL_22;
      case 4:
        v12 = CFSTR("Electronic Wind Screen Enable");
        goto LABEL_22;
      case 5:
        if (!*((_BYTE *)this + 552))
          return result;
        v12 = CFSTR("Long-Term Noise Suppression Enable");
LABEL_22:
        buffer->cfNameString = v12;
        buffer->flags = -939524096;
        CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
        result = 0;
        v6 = kAudioUnitParameterUnit_Boolean;
        goto LABEL_23;
      case 6:
        if (!*((_BYTE *)this + 552))
          return result;
        buffer->cfNameString = CFSTR("Long-Term Noise Suppression Min Gain");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Long-Term Noise Suppression Min Gain"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v13 = 0x3F8000003EB5C28FLL;
        goto LABEL_58;
      case 7:
        v12 = CFSTR("Spatial Noise Suppression Active");
        goto LABEL_22;
      case 8:
        buffer->cfNameString = CFSTR("Spatial Noise Suppression Max Attenuation");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Spatial Noise Suppression Max Attenuation"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v13 = 0x3F8000003E000000;
        goto LABEL_58;
      case 9:
        buffer->cfNameString = CFSTR("White Noise Gain");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("White Noise Gain"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x40400000C2C80000;
        v11 = -100.0;
        goto LABEL_68;
      case 10:
        v15 = CFSTR("Beta");
        goto LABEL_54;
      case 11:
        buffer->cfNameString = CFSTR("Adaptation End Frequency");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Adaptation End Frequency"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x46BB800000000000;
        v11 = 24000.0;
        goto LABEL_68;
      case 13:
        buffer->cfNameString = CFSTR("Front End Calibration Gain");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Front End Calibration Gain"), buffer->name, 52, 0x8000100u);
        result = 0;
        v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x400000003F000000;
        v17 = 1.0;
        goto LABEL_31;
      case 14:
        buffer->cfNameString = CFSTR("Mic Status Name");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Mic Status Name"), buffer->name, 52, 0x8000100u);
        result = 0;
        v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
        v17 = 5.0;
LABEL_31:
        buffer->defaultValue = v17;
        buffer->flags = v16;
        return result;
      case 15:
        v10 = CFSTR("Nominal Mic Programmable Gain");
        goto LABEL_12;
      case 16:
        buffer->cfNameString = CFSTR("Bad Mic Hysteresis");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Bad Mic Hysteresis"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x447A000000000000;
        v11 = 145.0;
        goto LABEL_68;
      case 17:
        buffer->cfNameString = CFSTR("Index for desired EWIND deflection coefficient");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Index for desired EWIND deflection coefficient"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x459C400000000000;
        v11 = 12.0;
        goto LABEL_68;
      case 18:
        buffer->cfNameString = CFSTR("Time-constant in s for log-spectrum estimation");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Time-constant in s for log-spectrum estimation"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v18 = 0x42C8000000000000;
        goto LABEL_67;
      case 19:
        buffer->cfNameString = CFSTR("Threshold for discriminating wind noise and occlusion");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Threshold for discriminating wind noise and occlusion"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x4348000000000000;
        v11 = 45.0;
        goto LABEL_68;
      case 20:
        buffer->cfNameString = CFSTR("High-frequency threshold for discriminating wind noise and occlusion");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("High-frequency threshold for discriminating wind noise and occlusion"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x4348000000000000;
        v11 = 90.0;
        goto LABEL_68;
      case 21:
        v19 = CFSTR("Threshold for difference noise envelopes during occlusion detection");
        goto LABEL_40;
      case 22:
        v19 = CFSTR("Threshold for difference noise envelopes during wind detection");
LABEL_40:
        buffer->cfNameString = v19;
        buffer->flags = -939524096;
        CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x461C400000000000;
        v11 = 3072.0;
        goto LABEL_68;
      case 23:
        buffer->cfNameString = CFSTR("Lower bound for spectral estimators");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Lower bound for spectral estimators"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
        v11 = 9.3132e-13;
        goto LABEL_68;
      case 24:
        v20 = CFSTR("Difference threshold between microphones");
        goto LABEL_46;
      case 25:
        buffer->cfNameString = CFSTR("Maximum absolute level allowed for inactive (failed) microphone");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Maximum absolute level allowed for inactive (failed) microphone"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x46C80000C6C80000;
        v11 = -2304.0;
        goto LABEL_68;
      case 26:
        buffer->cfNameString = CFSTR("R-statistic threshold relative full scale in Q8");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("R-statistic threshold relative full scale in Q8"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 3323740160;
        v11 = -512.0;
        goto LABEL_68;
      case 27:
        v20 = CFSTR("Difference threshold beam microphone and beam power");
LABEL_46:
        buffer->cfNameString = v20;
        buffer->flags = -939524096;
        CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x461C400000000000;
        v11 = 768.0;
        goto LABEL_68;
      case 28:
        buffer->cfNameString = CFSTR("Frequency for detection statistic of probability of occlusion");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Frequency for detection statistic of probability of occlusion"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x459C400000000000;
        v11 = 250.0;
        goto LABEL_68;
      case 29:
        buffer->cfNameString = CFSTR("Frequency for detection statistic of probability of occlusion");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Frequency for detection statistic of probability of occlusion"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x459C400000000000;
        v11 = 1625.0;
        goto LABEL_68;
      case 30:
        v21 = CFSTR("Frequency for detection statistic of probability of failed microphone");
        goto LABEL_51;
      case 31:
        v21 = CFSTR("Frequency for detection statistic of probability of occluded noisy microphone");
LABEL_51:
        buffer->cfNameString = v21;
        buffer->flags = -939524096;
        CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x459C400000000000;
        v11 = 800.0;
        goto LABEL_68;
      case 33:
        v22 = CFSTR("Default mic for ewind/occlusion");
        goto LABEL_62;
      case 34:
        v15 = CFSTR("Ewind cross-fade coefficient");
LABEL_54:
        buffer->cfNameString = v15;
        buffer->flags = -939524096;
        CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v14 = 0x3F800000BF800000;
        goto LABEL_24;
      case 35:
        buffer->cfNameString = CFSTR("Ewind cross-fade start frequency");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Ewind cross-fade start frequency"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Hertz;
        *(_QWORD *)&buffer->minValue = 0x46BB800000000000;
        v11 = 2500.0;
        goto LABEL_68;
      case 36:
        buffer->cfNameString = CFSTR("Ewind cross-fade high thd");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Ewind cross-fade high thd"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
        v11 = 0.7;
        goto LABEL_68;
      case 37:
        buffer->cfNameString = CFSTR("Ewind cross-fade low thd");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Ewind cross-fade low thd"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v13 = 0x3F80000000000000;
LABEL_58:
        *(_QWORD *)&buffer->minValue = v13;
        v11 = 0.5;
        goto LABEL_68;
      case 38:
        buffer->cfNameString = CFSTR("Beta switch frequency");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("Beta switch frequency"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Hertz;
        *(_QWORD *)&buffer->minValue = 0x46BB800000000000;
        v11 = 750.0;
        goto LABEL_68;
      case 39:
        buffer->cfNameString = CFSTR("High-frequency beta");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("High-frequency beta"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        v18 = 0x3F800000BF800000;
        goto LABEL_67;
      case 40:
        v22 = CFSTR("Mic choice above adaptation end frequency");
LABEL_62:
        buffer->cfNameString = v22;
        buffer->flags = -939524096;
        CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        v14 = 0x4000000000000000;
        goto LABEL_24;
      case 41:
        if (!*((_BYTE *)this + 552))
          return result;
        v8 = CFSTR("Frequency EQ Enable");
LABEL_66:
        buffer->cfNameString = v8;
        buffer->flags = -939524096;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        v18 = 0x3F80000000000000;
LABEL_67:
        *(_QWORD *)&buffer->minValue = v18;
        v11 = 1.0;
        break;
      case 42:
        v8 = CFSTR("Use Standard Adaptive Beamformer");
        goto LABEL_66;
      default:
        return result;
    }
    goto LABEL_68;
  }
  if (a2)
    return 4294956430;
  if (a3 == 32)
  {
    buffer->cfNameString = CFSTR("Flag to say there is high far-end (echo) activity");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("Flag to say there is high far-end (echo) activity"), buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
    v9 = buffer->flags & 0x3FFF7FFF | 0x40008000;
    buffer->defaultValue = 0.0;
    buffer->flags = v9;
    return result;
  }
  if (a3 == 12)
  {
    v10 = CFSTR("Mic Programmable Gain");
LABEL_12:
    buffer->cfNameString = v10;
    buffer->flags = -939524096;
    CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(_QWORD *)&buffer->minValue = 0x42200000C2200000;
    v11 = 26.0;
LABEL_68:
    buffer->defaultValue = v11;
    return result;
  }
  if (a3)
    return 4294956418;
  buffer->cfNameString = CFSTR("Beam Index");
  buffer->flags = -939524096;
  CFStringGetCString(CFSTR("Beam Index"), buffer->name, 52, 0x8000100u);
  result = 0;
  v6 = kAudioUnitParameterUnit_Indexed;
LABEL_23:
  buffer->unit = v6;
  v14 = 0x3F80000000000000;
LABEL_24:
  *(_QWORD *)&buffer->minValue = v14;
  buffer->defaultValue = 0.0;
  return result;
}

UInt8 *AUBeamNF::SaveExtendedScopes(AUBeamNF *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUBeamNF::RestoreState(OpaqueAudioComponentInstance **this, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t result;
  OpaqueAudioComponentInstance *v6;
  OpaqueAudioComponentInstance *Value;

  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  if (CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("data")))
  {
    result = ausdk::AUBase::RestoreState(this, cf);
    if (!(_DWORD)result)
      ++*((_DWORD *)this + 136);
  }
  else
  {
    result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("tuningdata"));
    if (result)
    {
      if (*((_BYTE *)this + 17))
      {
        return 4294956447;
      }
      else
      {
        v6 = this[78];
        if (v6)
          CFRelease(v6);
        Value = (OpaqueAudioComponentInstance *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("tuningdata"));
        this[78] = Value;
        CFRetain(Value);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AUBeamNF::GetParameterValueStrings(AUBeamNF *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956430;
  result = 0;
  if (!a3)
  {
    if (a4)
    {
      values[0] = CFSTR("Front Beam");
      values[1] = CFSTR("Back Beam");
      v6 = CFArrayCreate(0, (const void **)values, 2, 0);
      result = 0;
      *a4 = v6;
    }
  }
  return result;
}

double AUBeamNF::GetLatency(AUBeamNF *this)
{
  return 0.0;
}

double AUBeamNF::GetTailTime(AUBeamNF *this)
{
  return 0.0;
}

uint64_t AUBeamNF::SupportsTail(AUBeamNF *this)
{
  return 1;
}

BOOL AUBeamNF::StreamFormatWritable(AUBeamNF *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUBeamNF::SupportedNumChannels(AUBeamNF *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUBeamNF::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUBeamNF::ValidFormat(AUBeamNF *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result;
  int v7;
  AudioFormatID mFormatID;
  BOOL v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];
  uint64_t v14;
  BOOL v15;
  int v16;

  result = 0;
  v15 = 0;
  if (a4->mSampleRate >= 8000.0 && a4->mSampleRate <= 96000.0)
  {
    v7 = *((unsigned __int8 *)this + 552);
    mFormatID = a4->mFormatID;
    if (v7)
      v9 = mFormatID == 1819304813;
    else
      v9 = 1;
    if (v9 && (v7 || mFormatID == 1718773105))
    {
      if (v7)
      {
        result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
        if ((_DWORD)result)
          return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
      }
      else
      {
        v10 = *(_OWORD *)&a4->mBytesPerPacket;
        v13[0] = *(_OWORD *)&a4->mSampleRate;
        v13[1] = v10;
        v14 = *(_QWORD *)&a4->mBitsPerChannel;
        DWORD2(v13[0]) = 1819304813;
        v16 = 0;
        v11 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v13, &v16, &v15);
        if (v16 == 4)
          v12 = v11;
        else
          v12 = 0;
        if (v15)
          return 0;
        else
          return v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUBeamNF::GetScopeExtended(AUBeamNF *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 576;
  else
    return 0;
}

BOOL AUBeamNF::ShouldBypassEffect(AUBeamNF *this)
{
  return *((_DWORD *)this + 132) != 0;
}

os_log_t ___ZL16AUBeamNFLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "beamnf");
  *v0 = result;
  AUBeamNFLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUBeamNF::ApplyParameterValues(AUBeamNF *this)
{
  NSObject *v2;
  uint64_t v3;
  ausdk::AUElement *v4;
  ausdk::AUElement **v5;
  float Parameter;
  unint64_t v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  double v11;
  double v12;
  unsigned int v13;
  Beamformer_BeamNF::CmhBEAM *v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double v61;
  double v62;
  Beamformer_BeamNF::CmhBEAM *v63;
  unsigned int v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  AUBeamNF *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          v64 = 136315650;
          v65 = "AUBeamNF.cpp";
          v66 = 1024;
          v67 = 1853;
          v68 = 2048;
          v69 = this;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::ApplyParameterValues (%p)", (uint8_t *)&v64, 0x1Cu);
        }
      }
    }
  }
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
  }
  else
  {
    v5 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v5)
      v4 = 0;
    else
      v4 = *v5;
  }
  Parameter = ausdk::AUElement::GetParameter(v4, 0);
  v7 = Parameter;
  v64 = Parameter;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *(float *)&v11 = ausdk::AUElement::GetParameter(v9, 0x20u);
  v13 = *(float *)&v11;
  v14 = (Beamformer_BeamNF::CmhBEAM *)*((_QWORD *)this + 70);
  if (v14)
  {
    if (*((_BYTE *)this + 552))
    {
      Beamformer_BeamNF::CmhBEAM::setParameter(v14, 45, (CmhBEAM2NOpt *)&v64, v11, v12);
    }
    else if (v7 <= 1)
    {
      *((_DWORD *)v14 + 1) = v7;
    }
  }
  (*(void (**)(AUBeamNF *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 32, 0, 0, 0, (float)v13);
  v15 = *((_QWORD *)this + 77);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v7);
  }
  else
  {
    v17 = *((_QWORD *)this + 74);
    if (v7 >= (*((_QWORD *)this + 75) - v17) >> 3)
      v16 = 0;
    else
      v16 = *(ausdk::AUElement **)(v17 + 8 * v7);
  }
  v18 = ausdk::AUElement::GetParameter(v16, 1u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 1, 4, v7, 0, v18);
  v19 = ausdk::AUElement::GetParameter(v16, 2u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 2, 4, v7, 0, v19);
  v20 = ausdk::AUElement::GetParameter(v16, 3u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 3, 4, v7, 0, v20);
  v21 = ausdk::AUElement::GetParameter(v16, 0x2Au);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 42, 4, v7, 0, v21);
  v22 = ausdk::AUElement::GetParameter(v16, 4u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 4, 4, v7, 0, v22);
  if (*((_BYTE *)this + 552))
  {
    v23 = ausdk::AUElement::GetParameter(v16, 5u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 5, 4, v7, 0, v23);
    v24 = ausdk::AUElement::GetParameter(v16, 6u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 6, 4, v7, 0, v24);
    v25 = ausdk::AUElement::GetParameter(v16, 0x29u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 41, 4, v7, 0, v25);
  }
  v26 = ausdk::AUElement::GetParameter(v16, 7u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 7, 4, v7, 0, v26);
  v27 = ausdk::AUElement::GetParameter(v16, 8u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 8, 4, v7, 0, v27);
  v28 = ausdk::AUElement::GetParameter(v16, 9u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 9, 4, v7, 0, v28);
  v29 = ausdk::AUElement::GetParameter(v16, 0xAu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 10, 4, v7, 0, v29);
  v30 = ausdk::AUElement::GetParameter(v16, 0xBu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 11, 4, v7, 0, v30);
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  v34 = ausdk::AUElement::GetParameter(v32, 0xCu);
  (*(void (**)(AUBeamNF *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 12, 0, 0, 0, v34);
  v35 = ausdk::AUElement::GetParameter(v16, 0xFu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 15, 4, v7, 0, v35);
  v36 = ausdk::AUElement::GetParameter(v16, 0x10u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 16, 4, v7, 0, v36);
  v37 = ausdk::AUElement::GetParameter(v16, 0x11u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 17, 4, v7, 0, v37);
  v38 = ausdk::AUElement::GetParameter(v16, 0x12u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 18, 4, v7, 0, v38);
  v39 = ausdk::AUElement::GetParameter(v16, 0x13u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 19, 4, v7, 0, v39);
  v40 = ausdk::AUElement::GetParameter(v16, 0x14u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 20, 4, v7, 0, v40);
  v41 = ausdk::AUElement::GetParameter(v16, 0x15u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 21, 4, v7, 0, v41);
  v42 = ausdk::AUElement::GetParameter(v16, 0x16u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 22, 4, v7, 0, v42);
  v43 = ausdk::AUElement::GetParameter(v16, 0x17u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 23, 4, v7, 0, v43);
  v44 = ausdk::AUElement::GetParameter(v16, 0x18u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 24, 4, v7, 0, v44);
  v45 = ausdk::AUElement::GetParameter(v16, 0x19u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 25, 4, v7, 0, v45);
  v46 = ausdk::AUElement::GetParameter(v16, 0x1Au);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 26, 4, v7, 0, v46);
  v47 = ausdk::AUElement::GetParameter(v16, 0x1Bu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 27, 4, v7, 0, v47);
  v48 = ausdk::AUElement::GetParameter(v16, 0x1Cu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 28, 4, v7, 0, v48);
  v49 = ausdk::AUElement::GetParameter(v16, 0x1Du);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 29, 4, v7, 0, v49);
  v50 = ausdk::AUElement::GetParameter(v16, 0x1Eu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 30, 4, v7, 0, v50);
  v51 = ausdk::AUElement::GetParameter(v16, 0x1Fu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 31, 4, v7, 0, v51);
  v52 = ausdk::AUElement::GetParameter(v16, 0x21u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 33, 4, v7, 0, v52);
  v53 = ausdk::AUElement::GetParameter(v16, 0x22u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 34, 4, v7, 0, v53);
  v54 = ausdk::AUElement::GetParameter(v16, 0x23u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 35, 4, v7, 0, v54);
  v55 = v64;
  v56 = ausdk::AUElement::GetParameter(v16, 0x24u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 36, 4, v55, 0, v56);
  v57 = ausdk::AUElement::GetParameter(v16, 0x25u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 37, 4, v55, 0, v57);
  v58 = ausdk::AUElement::GetParameter(v16, 0x26u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 38, 4, v55, 0, v58);
  v59 = ausdk::AUElement::GetParameter(v16, 0x27u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 39, 4, v55, 0, v59);
  v60 = ausdk::AUElement::GetParameter(v16, 0x28u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 40, 4, v55, 0, v60);
  v63 = (Beamformer_BeamNF::CmhBEAM *)*((_QWORD *)this + 70);
  if (*((_BYTE *)this + 552))
  {
    if (v63)
      Beamformer_BeamNF::CmhBEAM::setParameter(v63, 51, (AUBeamNF *)((char *)this + 528), v61, v62);
  }
  else if (v63)
  {
    *((_DWORD *)v63 + 38) = *((_DWORD *)this + 132);
    *(_DWORD *)(*((_QWORD *)this + 70) + 896) = 0;
    *(_DWORD *)(*((_QWORD *)this + 70) + 40) = 1;
    *(_DWORD *)(*((_QWORD *)this + 70) + 808) = *((_DWORD *)this + 158);
  }
}

BOOL AUBeamNF::IsActivePart(AUBeamNF *this, unsigned int a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  ausdk::AUElement ***v7;

  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v7 = (ausdk::AUElement ***)((char *)this + 48);
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (v7[1] == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  return ausdk::AUElement::GetParameter(v5, 0) == (float)a2;
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, double a3, int16x8_t a4)
{
  void **v5;
  void *__p[2];
  char v8;

  CA::StreamDescription::AsString(this, (uint64_t)__p, a4);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  strlcpy(a2, (const char *)v5, 0x100uLL);
  if (v8 < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1B631CC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUBeamNF::BlockProcessClassFunc(float ****this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  AUBeamNF::BlockProcessFunc(this, a2, *(const AudioBufferList ***)(*(_QWORD *)a3 + 16), *(AudioBufferList ***)(*(_QWORD *)a3 + 32), (float *)(*a4)->mBuffers[0].mData);
  return 0;
}

uint64_t AUBeamNF::SetDiffractionFilterAndPostEQ(AUBeamNF *this, double a2, double a3)
{
  NSObject *v4;
  FILE *v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  CmhBEAM2NOpt **v13;
  CmhBEAM2NOpt **v14;
  unint64_t v15;
  unsigned int v16;
  NSObject *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFNumber *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const __CFAllocator *v23;
  CFStringRef v24;
  const __CFData *v25;
  int v26;
  const UInt8 *v27;
  uint64_t v28;
  CmhBEAM2NOpt *v29;
  unsigned int v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  CmhBEAM2NOpt *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  Beamformer_BeamNF::CmhBEAM *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CmhBEAM2NOpt *v48;
  double v49;
  double v50;
  double v51;
  Beamformer_BeamNF::CmhBEAM *v52;
  CmhBEAM2NOpt *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  CmhBEAM2NOpt **v60;
  int v61;
  NSObject *v62;
  CmhBEAM2NOpt **v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  char *v67;
  CmhBEAM2NOpt *v68;
  double v69;
  double v70;
  CmhBEAM2NOpt **v71;
  int v72;
  FILE *v73;
  uint64_t v74;
  char *v75;
  char v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  NSObject *v80;
  const char *v81;
  uint8_t *p_valuePtr;
  NSObject *v83;
  const __CFDictionary *v84;
  const __CFDictionary *Value;
  const __CFNumber *v86;
  uint64_t v87;
  const __CFAllocator *v88;
  const __CFAllocator *v89;
  char v90;
  char v91;
  CFStringRef v92;
  const __CFData *v93;
  int Length;
  const UInt8 *BytePtr;
  uint64_t v96;
  _DWORD *v97;
  unsigned int v98;
  NSObject *v99;
  NSObject *v100;
  const char *v101;
  NSObject *v102;
  uint32_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  CmhBEAM2NOpt *v115;
  int v116;
  int v117;
  CmhBEAM2NOpt **v119;
  CmhBEAM2NOpt **v120;
  uint64_t v121;
  char *v122;
  uint8_t v123[32];
  unsigned int valuePtr;
  const char *v125;
  __int16 v126;
  int v127;
  __int16 v128;
  char *v129;
  _BYTE buf[12];
  __int16 v131;
  int v132;
  __int16 v133;
  _QWORD v134[126];
  char *v135[3];

  v135[1] = *(char **)MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v4 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
          v131 = 1024;
          v132 = 1626;
          v133 = 2048;
          v134[0] = this;
          _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetDiffractionFilterAndPostEQ (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  if (!*((_BYTE *)this + 639))
    goto LABEL_60;
  v5 = fopen((const char *)this + 640, "r");
  if (v5)
  {
    if (fgets(buf, 1024, v5))
    {
      v135[0] = 0;
      if (buf[0])
      {
        v6 = 0;
        v7 = buf;
        while (1)
        {
          *(float *)&a2 = strtof(v7, v135);
          *(&valuePtr + v6) = LODWORD(a2);
          if (v7 == v135[0])
            break;
          v8 = v6 + 1;
          if (*v135[0])
            v9 = v6 >= 7;
          else
            v9 = 1;
          ++v6;
          v7 = v135[0];
          if (v9)
            goto LABEL_34;
        }
        v8 = v6;
LABEL_34:
        if (v8)
        {
          std::vector<std::valarray<float>>::resize((uint64_t)&v119, v8);
          v13 = v119;
          v14 = v120;
          if (v120 == v119)
          {
            v13 = v120;
          }
          else
          {
            v15 = 0;
            v16 = 1;
            do
            {
              std::valarray<float>::resize((uint64_t)&v13[2 * v15], 0x101uLL, 0.0);
              v13 = v119;
              *(_DWORD *)v119[2 * v15] = *(&valuePtr + v15);
              v15 = v16;
              v14 = v120;
              ++v16;
            }
            while (v15 < ((char *)v120 - (char *)v13) >> 4);
          }
          v36 = *v13;
          if ((unint64_t)(v13[1] - *v13) >= 5)
          {
            v37 = 1;
            do
            {
              if (v14 == v13)
              {
                v14 = v13;
              }
              else
              {
                v38 = 0;
                v39 = 1;
                do
                {
                  fscanf(v5, "%f", (char *)v13[2 * v38] + 4 * v37);
                  v38 = v39;
                  v13 = v119;
                  v14 = v120;
                  ++v39;
                }
                while (v38 < ((char *)v120 - (char *)v119) >> 4);
                v36 = *v119;
              }
              v37 = (v37 + 1);
            }
            while (v37 < (v13[1] - v36) >> 2);
          }
          fclose(v5);
LABEL_94:
          if (v120 == v119)
          {
            if (AUBeamNFLogScope(void)::once != -1)
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
            if (AUBeamNFLogScope(void)::scope)
            {
              v62 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                goto LABEL_116;
            }
            else
            {
              v62 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
              v131 = 1024;
              v132 = 1753;
              _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF: Error no diffraction filter data", buf, 0x12u);
            }
          }
          else
          {
            v40 = (Beamformer_BeamNF::CmhBEAM *)*((_QWORD *)this + 70);
            if (*((_BYTE *)this + 552))
            {
              *(float *)&v41 = Beamformer_BeamNF::CmhBEAM::setParameter(v40, 15, *v119, a2, a3);
              *(float *)&v43 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 16, v119[2], v41, v42);
              *(float *)&v45 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 17, v119[4], v43, v44);
              *(float *)&v47 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 18, v119[6], v45, v46);
              v48 = v119[6];
              *(_DWORD *)v48 = 1058642330;
              *(float *)&v50 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 34, v48, v47, v49);
              v52 = (Beamformer_BeamNF::CmhBEAM *)*((_QWORD *)this + 70);
              v53 = v119[8];
              if ((char *)v120 - (char *)v119 == 128)
              {
                *(float *)&v54 = Beamformer_BeamNF::CmhBEAM::setParameter(v52, 21, v53, v50, v51);
                *(float *)&v56 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 22, v119[10], v54, v55);
                *(float *)&v58 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 23, v119[12], v56, v57);
                v60 = v119 + 14;
                v61 = 24;
              }
              else
              {
                *(float *)&v58 = Beamformer_BeamNF::CmhBEAM::setParameter(v52, 19, v53, v50, v51);
                v60 = v119 + 10;
                v61 = 20;
              }
              *(float *)&a2 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), v61, *v60, v58, v59);
            }
            else
            {
              CmhBEAM2NOpt::setModelSpatialFilterReal(v40, *v119, 0);
              Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v119[2], 0);
              CmhBEAM2NOpt::setModelSpatialFilterReal(*((CmhBEAM2NOpt **)this + 70), v119[4], 1u);
              Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v119[6], 1u);
              v63 = v119;
              *(_DWORD *)v119[6] = 1058642330;
              v64 = *((_QWORD *)this + 70);
              v65 = *(unsigned int *)(v64 + 8);
              if ((int)v65 >= 1)
              {
                v66 = (_DWORD *)(*(_QWORD *)(v64 + 440) + 64);
                do
                {
                  *v66 = 1058642330;
                  v66 += 34;
                  --v65;
                }
                while (v65);
                v64 = *((_QWORD *)this + 70);
              }
              v67 = (char *)((char *)v120 - (char *)v63);
              v68 = v63[8];
              CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAM2NOpt *)v64, v68, 0);
              if (v67 == (char *)128)
              {
                CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)v119[10], (float *)0x101, **(_QWORD **)(*((_QWORD *)this + 70) + 104), 93.75, (float *)*(unsigned int *)(*((_QWORD *)this + 70) + 28), (float)*(int *)(*((_QWORD *)this + 70) + 12) / (float)*(int *)(*((_QWORD *)this + 70) + 16));
                *(float *)&v69 = CmhBEAM2NOpt::setModelFreqCompVector(*((CmhBEAM2NOpt **)this + 70), v119[12], 1u);
                v71 = v119 + 14;
                v72 = 22;
              }
              else
              {
                *(float *)&v69 = CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAM2NOpt *)v64, v68, 1u);
                v71 = v119 + 10;
                v72 = 18;
              }
              *(float *)&a2 = Beamformer_BeamNF::CmhBEAM2NOpt::setParameter(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v72, *v71, v69, v70);
            }
          }
LABEL_116:
          memset(v123, 0, 24);
          if (!*((_BYTE *)this + 1664))
            goto LABEL_159;
          v73 = fopen((const char *)this + 1665, "r");
          if (v73)
          {
            if (fgets(buf, 1024, v73))
            {
              v122 = 0;
              if (buf[0])
              {
                v74 = 0;
                v75 = buf;
                v76 = 1;
                while (1)
                {
                  v77 = v74;
                  *(float *)&a2 = strtof(v75, &v122);
                  *((_DWORD *)v135 + v77) = LODWORD(a2);
                  if (v75 == v122)
                    break;
                  v78 = v76 & (*v122 != 0);
                  v74 = 1;
                  v75 = v122;
                  v76 = 0;
                  if ((v78 & 1) == 0)
                  {
                    v79 = v77 + 1;
                    goto LABEL_189;
                  }
                }
                if ((v76 & 1) != 0)
                  goto LABEL_138;
                v79 = 1;
LABEL_189:
                std::vector<std::valarray<float>>::resize((uint64_t)v123, v79);
                v105 = *(_QWORD **)v123;
                v106 = *(_QWORD **)&v123[8];
                if (*(_QWORD *)&v123[8] == *(_QWORD *)v123)
                {
                  v105 = *(_QWORD **)&v123[8];
                }
                else
                {
                  v107 = 0;
                  v108 = 1;
                  do
                  {
                    std::valarray<float>::resize((uint64_t)&v105[2 * v107], 0x101uLL, 0.0);
                    v105 = *(_QWORD **)v123;
                    **(_DWORD **)(*(_QWORD *)v123 + 16 * v107) = *((_DWORD *)v135 + v107);
                    v107 = v108;
                    v106 = *(_QWORD **)&v123[8];
                    ++v108;
                  }
                  while (v107 < (uint64_t)(*(_QWORD *)&v123[8] - (_QWORD)v105) >> 4);
                }
                v109 = *v105;
                if (v105[1] - *v105 >= 5uLL)
                {
                  v110 = 1;
                  do
                  {
                    if (v106 == v105)
                    {
                      v106 = v105;
                    }
                    else
                    {
                      v111 = 0;
                      v112 = 1;
                      do
                      {
                        fscanf(v73, "%f", v105[2 * v111] + 4 * v110);
                        v111 = v112;
                        v105 = *(_QWORD **)v123;
                        v106 = *(_QWORD **)&v123[8];
                        ++v112;
                      }
                      while (v111 < (uint64_t)(*(_QWORD *)&v123[8] - *(_QWORD *)v123) >> 4);
                      v109 = **(_QWORD **)v123;
                    }
                    v110 = (v110 + 1);
                  }
                  while (v110 < (v105[1] - v109) >> 2);
                }
                fclose(v73);
LABEL_203:
                v113 = *(_QWORD *)&v123[8] - *(_QWORD *)v123;
                if (*(_QWORD *)&v123[8] == *(_QWORD *)v123)
                {
                  if (AUBeamNFLogScope(void)::once != -1)
                    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
                  if (AUBeamNFLogScope(void)::scope)
                  {
                    v104 = *(_QWORD *)AUBeamNFLogScope(void)::scope;
                    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                    {
LABEL_227:
                      *(_QWORD *)buf = v123;
                      std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    v104 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled((os_log_t)v104, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
                    v131 = 1024;
                    v132 = 1846;
                    _os_log_impl(&dword_1B5ED0000, (os_log_t)v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF: Error no post EQ data", buf, 0x12u);
                  }
                }
                else
                {
                  v114 = *((_QWORD *)this + 70);
                  v115 = **(CmhBEAM2NOpt ***)v123;
                  if (*((_BYTE *)this + 552))
                  {
                    if (v113 == 32)
                    {
                      *(float *)&a2 = Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v114, 37, v115, a2, a3);
                      v114 = *((_QWORD *)this + 70);
                      v115 = *(CmhBEAM2NOpt **)(*(_QWORD *)v123 + 16);
                      v116 = 38;
                    }
                    else
                    {
                      v116 = 36;
                    }
                    Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v114, v116, v115, a2, a3);
                  }
                  else
                  {
                    if (v113 == 32)
                    {
                      CmhBEAM2NOpt::interpolateFrequencyVector(**(_QWORD **)v123, (float *)0x101, **(_QWORD **)(v114 + 112), 93.75, (float *)*(unsigned int *)(v114 + 28), (float)*(int *)(v114 + 12) / (float)*(int *)(v114 + 16));
                      v114 = *((_QWORD *)this + 70);
                      v115 = *(CmhBEAM2NOpt **)(*(_QWORD *)v123 + 16);
                      v117 = 80;
                    }
                    else
                    {
                      v117 = 78;
                    }
                    Beamformer_BeamNF::CmhBEAM2NOpt::setParameter((Beamformer_BeamNF::CmhBEAM2NOpt *)v114, v117, v115, a2, a3);
                  }
                }
                v104 = 0;
                goto LABEL_227;
              }
LABEL_138:
              if (AUBeamNFLogScope(void)::once != -1)
                dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
              if (AUBeamNFLogScope(void)::scope)
              {
                v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                  goto LABEL_151;
              }
              else
              {
                v80 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
              {
                valuePtr = 136315650;
                v125 = "AUBeamNF.cpp";
                v126 = 1024;
                v127 = 2539;
                v128 = 2080;
                v129 = (char *)this + 1665;
                v81 = "%25s:%-5d AUBeamNF: Error: Could not read post EQ file %s";
                goto LABEL_149;
              }
            }
            else
            {
              if (AUBeamNFLogScope(void)::once != -1)
                dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
              if (AUBeamNFLogScope(void)::scope)
              {
                v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                  goto LABEL_151;
              }
              else
              {
                v80 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
              {
                valuePtr = 136315650;
                v125 = "AUBeamNF.cpp";
                v126 = 1024;
                v127 = 2524;
                v128 = 2080;
                v129 = (char *)this + 1665;
                v81 = "%25s:%-5d AUBeamNF: Error: Could not read post EQ file %s";
LABEL_149:
                p_valuePtr = (uint8_t *)&valuePtr;
                goto LABEL_150;
              }
            }
          }
          else
          {
            if (AUBeamNFLogScope(void)::once != -1)
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
            if (AUBeamNFLogScope(void)::scope)
            {
              v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                goto LABEL_151;
            }
            else
            {
              v80 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
              v131 = 1024;
              v132 = 2513;
              v133 = 2080;
              v134[0] = (char *)this + 1665;
              v81 = "%25s:%-5d AUBeamNF: Error: Could not open post EQ file %s";
              p_valuePtr = buf;
LABEL_150:
              _os_log_impl(&dword_1B5ED0000, v80, OS_LOG_TYPE_ERROR, v81, p_valuePtr, 0x1Cu);
            }
          }
LABEL_151:
          if (AUBeamNFLogScope(void)::once != -1)
            dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
          if (AUBeamNFLogScope(void)::scope)
          {
            v83 = *(NSObject **)AUBeamNFLogScope(void)::scope;
            if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
              goto LABEL_159;
          }
          else
          {
            v83 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
            v131 = 1024;
            v132 = 1766;
            v133 = 2080;
            v134[0] = (char *)this + 1665;
            _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error loading post EQ file at %s", buf, 0x1Cu);
          }
LABEL_159:
          v84 = (const __CFDictionary *)*((_QWORD *)this + 78);
          if (v84 && CFDictionaryGetValue(v84, CFSTR("posteq")))
          {
            std::vector<std::valarray<float>>::resize((uint64_t)v123, 2uLL);
            Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), CFSTR("posteq"));
            valuePtr = 0;
            v86 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("length"));
            if (CFNumberGetValue(v86, kCFNumberIntType, &valuePtr))
            {
              v87 = 0;
              v88 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v89 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
              v90 = 1;
              while (1)
              {
                v91 = v90;
                std::valarray<float>::resize(*(_QWORD *)v123 + 16 * v87, valuePtr, 0.0);
                v92 = CFStringCreateWithCStringNoCopy(v88, off_1E69EB010[v87], 0, v89);
                v93 = (const __CFData *)CFDictionaryGetValue(Value, v92);
                CFRelease(v92);
                if (v93)
                {
                  Length = CFDataGetLength(v93);
                  if (Length != 4 * valuePtr)
                  {
                    if (AUBeamNFLogScope(void)::once != -1)
                      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
                    if (AUBeamNFLogScope(void)::scope)
                    {
                      v100 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                      {
LABEL_226:
                        v104 = 4294956445;
                        goto LABEL_227;
                      }
                    }
                    else
                    {
                      v100 = MEMORY[0x1E0C81028];
                    }
                    if (!os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
                      goto LABEL_226;
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
                    v131 = 1024;
                    v132 = 1805;
                    v133 = 1024;
                    LODWORD(v134[0]) = 4 * valuePtr;
                    WORD2(v134[0]) = 1024;
                    *(_DWORD *)((char *)v134 + 6) = Length;
                    v101 = "%25s:%-5d AUBeamNF Error: Invalid post eq data vector length from tuning file (expected %d by"
                           "tes, actual %d bytes)";
                    v102 = v100;
                    v103 = 30;
LABEL_225:
                    _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_DEBUG, v101, buf, v103);
                    goto LABEL_226;
                  }
                  BytePtr = CFDataGetBytePtr(v93);
                  v96 = valuePtr;
                  if (valuePtr)
                  {
                    v97 = *(_DWORD **)(*(_QWORD *)v123 + 16 * v87);
                    do
                    {
                      v98 = *(_DWORD *)BytePtr;
                      BytePtr += 4;
                      *v97++ = bswap32(v98);
                      --v96;
                    }
                    while (v96);
                  }
                }
                v90 = 0;
                v87 = 1;
                if ((v91 & 1) == 0)
                  goto LABEL_203;
              }
            }
            if (AUBeamNFLogScope(void)::once != -1)
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
            if (AUBeamNFLogScope(void)::scope)
            {
              v99 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
                goto LABEL_226;
            }
            else
            {
              v99 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
              goto LABEL_226;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
            v131 = 1024;
            v132 = 1784;
            v101 = "%25s:%-5d AUBeamNF Error: Converting eq vectors length from tuning file";
            v102 = v99;
            v103 = 18;
            goto LABEL_225;
          }
          goto LABEL_203;
        }
      }
      if (AUBeamNFLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
      if (AUBeamNFLogScope(void)::scope)
      {
        v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
          goto LABEL_52;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v123 = 136315650;
        *(_QWORD *)&v123[4] = "AUBeamNF.cpp";
        *(_WORD *)&v123[12] = 1024;
        *(_DWORD *)&v123[14] = 2488;
        *(_WORD *)&v123[18] = 2080;
        *(_QWORD *)&v123[20] = (char *)this + 640;
        v11 = "%25s:%-5d AUBeamNF: Error: Could not read diffraction filter file %s";
LABEL_50:
        v12 = v123;
        goto LABEL_51;
      }
    }
    else
    {
      if (AUBeamNFLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
      if (AUBeamNFLogScope(void)::scope)
      {
        v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
          goto LABEL_52;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v123 = 136315650;
        *(_QWORD *)&v123[4] = "AUBeamNF.cpp";
        *(_WORD *)&v123[12] = 1024;
        *(_DWORD *)&v123[14] = 2473;
        *(_WORD *)&v123[18] = 2080;
        *(_QWORD *)&v123[20] = (char *)this + 640;
        v11 = "%25s:%-5d AUBeamNF: Error: Could not read diffraction filter file %s";
        goto LABEL_50;
      }
    }
  }
  else
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        goto LABEL_52;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
      v131 = 1024;
      v132 = 2462;
      v133 = 2080;
      v134[0] = (char *)this + 640;
      v11 = "%25s:%-5d AUBeamNF: Error: Could not open diffraction filter file %s";
      v12 = buf;
LABEL_51:
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, v11, v12, 0x1Cu);
    }
  }
LABEL_52:
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      goto LABEL_60;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
    v131 = 1024;
    v132 = 1641;
    v133 = 2080;
    v134[0] = (char *)this + 640;
    _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error loading diffraction filter file at %s", buf, 0x1Cu);
  }
LABEL_60:
  v18 = (const __CFDictionary *)*((_QWORD *)this + 78);
  if (!v18 || !CFDictionaryGetValue(v18, CFSTR("diffr")))
    goto LABEL_94;
  std::vector<std::valarray<float>>::resize((uint64_t)&v119, 8uLL);
  v19 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), CFSTR("diffr"));
  valuePtr = 0;
  v20 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("length"));
  if (!CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
  {
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v31 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
        goto LABEL_187;
    }
    else
    {
      v31 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      goto LABEL_187;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
    v131 = 1024;
    v132 = 1659;
    v33 = "%25s:%-5d AUBeamNF Error: Converting diffraction filter vectors length from tuning file";
    v34 = v31;
    v35 = 18;
LABEL_186:
    _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_DEBUG, v33, buf, v35);
    goto LABEL_187;
  }
  v21 = 0;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  while (1)
  {
    std::valarray<float>::resize((uint64_t)&v119[2 * v21], valuePtr, 0.0);
    v24 = CFStringCreateWithCStringNoCopy(v22, off_1E69EAFD0[v21], 0, v23);
    v25 = (const __CFData *)CFDictionaryGetValue(v19, v24);
    CFRelease(v24);
    if (v25)
      break;
LABEL_69:
    if (++v21 == 8)
      goto LABEL_94;
  }
  v26 = CFDataGetLength(v25);
  if (v26 == 4 * valuePtr)
  {
    v27 = CFDataGetBytePtr(v25);
    v28 = valuePtr;
    if (valuePtr)
    {
      v29 = v119[2 * v21];
      do
      {
        v30 = *(_DWORD *)v27;
        v27 += 4;
        *(_DWORD *)v29 = bswap32(v30);
        v29 = (CmhBEAM2NOpt *)((char *)v29 + 4);
        --v28;
      }
      while (v28);
    }
    goto LABEL_69;
  }
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (!AUBeamNFLogScope(void)::scope)
  {
    v32 = MEMORY[0x1E0C81028];
    goto LABEL_184;
  }
  v32 = *(NSObject **)AUBeamNFLogScope(void)::scope;
  if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
  {
LABEL_184:
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      goto LABEL_187;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUBeamNF.cpp";
    v131 = 1024;
    v132 = 1686;
    v133 = 1024;
    LODWORD(v134[0]) = 4 * valuePtr;
    WORD2(v134[0]) = 1024;
    *(_DWORD *)((char *)v134 + 6) = v26;
    v33 = "%25s:%-5d AUBeamNF Error: Invalid diffraction filter data vector length from tuning file (expected %d bytes, actual %d bytes)";
    v34 = v32;
    v35 = 30;
    goto LABEL_186;
  }
LABEL_187:
  v104 = 4294956445;
LABEL_228:
  *(_QWORD *)buf = &v119;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v104;
}

void sub_1B631DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, void ***a19)
{
  a19 = &a15;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a15 = (void **)&a11;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void AUBeamNF::DumpDiffractionFilter(_BOOL8 this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t CurrentGregorianDate;
  double v7;
  double v8;
  uint64_t Element;
  FILE *v10;
  void **v11;
  unint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  char v24[5];
  void ***v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v1 = this;
  v32 = *MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        this = os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          *(_DWORD *)buf = 136315650;
          v27 = "AUBeamNF.cpp";
          v28 = 1024;
          v29 = 2561;
          v30 = 2048;
          v31 = v1;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::DumpDiffractionFilter (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  v3 = *(_QWORD *)(v1 + 560);
  if (v3)
  {
    v4 = 140;
    if (!*(_BYTE *)(v1 + 552))
      v4 = 28;
    v5 = *(int *)(v3 + v4);
    if ((_DWORD)v5)
      goto LABEL_12;
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
LABEL_12:
        CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate((CATimeUtilities *)this);
        v8 = v7;
        ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)buf, *(OpaqueAudioComponentInstance **)(v1 + 8));
        v24[0] = BYTE3(v27);
        v24[1] = BYTE2(v27);
        v24[2] = BYTE1(v27);
        v24[3] = (char)v27;
        v24[4] = 0;
        Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v1 + 80), 0);
        snprintf((char *)buf, 0x200uLL, "/tmp/aubeam2-%s-diffr-%dHz-%02d%02d%02d.txt", v24, (int)*(double *)(Element + 80), (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, (int)v8);
        v10 = fopen((const char *)buf, "w");
        if (v10)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<std::valarray<float>>::resize((uint64_t)&v21, 8uLL);
          v11 = v22;
          if (v22 != v21)
          {
            v12 = 0;
            v13 = 1;
            v11 = v21;
            do
            {
              std::valarray<float>::resize((uint64_t)&v11[2 * v12], v5, 0.0);
              v12 = v13;
              v11 = v21;
              ++v13;
            }
            while (v12 < ((char *)v22 - (char *)v21) >> 4);
          }
          v14 = *v11;
          v15 = *(_QWORD *)(v1 + 560);
          if (*(_BYTE *)(v1 + 552))
          {
            memcpy(v14, *(const void **)(v15 + 472), 4 * v5);
            memcpy(v21[2], *(const void **)(*(_QWORD *)(v1 + 560) + 488), 4 * v5);
            memcpy(v21[4], *(const void **)(*(_QWORD *)(v1 + 560) + 480), 4 * v5);
            memcpy(v21[6], *(const void **)(*(_QWORD *)(v1 + 560) + 496), 4 * v5);
            memcpy(v21[8], **(const void ***)(*(_QWORD *)(v1 + 560) + 368), 4 * v5);
            memcpy(v21[10], **(const void ***)(*(_QWORD *)(v1 + 560) + 376), 4 * v5);
            memcpy(v21[12], *(const void **)(*(_QWORD *)(*(_QWORD *)(v1 + 560) + 368) + 8), 4 * v5);
            v16 = *(_QWORD *)(v1 + 560) + 376;
          }
          else
          {
            memcpy(v14, *(const void **)(v15 + 200), 4 * v5);
            memcpy(v21[2], *(const void **)(*(_QWORD *)(v1 + 560) + 216), 4 * v5);
            memcpy(v21[4], *(const void **)(*(_QWORD *)(v1 + 560) + 208), 4 * v5);
            memcpy(v21[6], *(const void **)(*(_QWORD *)(v1 + 560) + 224), 4 * v5);
            memcpy(v21[8], **(const void ***)(*(_QWORD *)(v1 + 560) + 96), 4 * v5);
            memcpy(v21[10], **(const void ***)(*(_QWORD *)(v1 + 560) + 104), 4 * v5);
            memcpy(v21[12], *(const void **)(*(_QWORD *)(*(_QWORD *)(v1 + 560) + 96) + 8), 4 * v5);
            v16 = *(_QWORD *)(v1 + 560) + 104;
          }
          memcpy(v21[14], *(const void **)(*(_QWORD *)v16 + 8), 4 * v5);
          if ((int)v5 >= 1)
          {
            v19 = 0;
            v20 = 4 * v5;
            do
            {
              fprintf(v10, "%.8f %.8f %.8f %.8f %.8f %.8f %.8f %.8f\n", *(float *)((char *)*v21 + v19), *(float *)((char *)v21[2] + v19), *(float *)((char *)v21[4] + v19), *(float *)((char *)v21[6] + v19), *(float *)((char *)v21[8] + v19), *(float *)((char *)v21[10] + v19), *(float *)((char *)v21[12] + v19), *(float *)((char *)v21[14] + v19));
              v19 += 4;
            }
            while (v20 != v19);
          }
          fclose(v10);
          v25 = &v21;
          std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
        }
        return;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    this = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (this)
    {
      *(_DWORD *)buf = 136315394;
      v27 = "AUBeamNF.cpp";
      v28 = 1024;
      v29 = 2576;
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Number of unique bands is zero, won't dump diffraction filter", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      return;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v27 = "AUBeamNF.cpp";
    v28 = 1024;
    v29 = 2564;
    _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Beam object not initialized, won't dump diffraction filter", buf, 0x12u);
  }
}

void sub_1B631E5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a18;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void AUBeamNF::DumpPostEQ(_BOOL8 this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t CurrentGregorianDate;
  double v7;
  double v8;
  uint64_t Element;
  FILE *v10;
  void **v11;
  unint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  char v24[5];
  void ***v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v1 = this;
  v32 = *MEMORY[0x1E0C80C00];
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamNFLogScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
        this = os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          *(_DWORD *)buf = 136315650;
          v27 = "AUBeamNF.cpp";
          v28 = 1024;
          v29 = 2628;
          v30 = 2048;
          v31 = v1;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::DumpPostEQ (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  v3 = *(_QWORD *)(v1 + 560);
  if (v3)
  {
    v4 = 140;
    if (!*(_BYTE *)(v1 + 552))
      v4 = 28;
    v5 = *(int *)(v3 + v4);
    if ((_DWORD)v5)
      goto LABEL_12;
    if (AUBeamNFLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
    if (AUBeamNFLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      {
LABEL_12:
        CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate((CATimeUtilities *)this);
        v8 = v7;
        ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)buf, *(OpaqueAudioComponentInstance **)(v1 + 8));
        v24[0] = BYTE3(v27);
        v24[1] = BYTE2(v27);
        v24[2] = BYTE1(v27);
        v24[3] = (char)v27;
        v24[4] = 0;
        Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v1 + 80), 0);
        snprintf((char *)buf, 0x200uLL, "/tmp/aubeam2-%s-eq-%dHz-%02d%02d%02d.txt", v24, (int)*(double *)(Element + 80), (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, (int)v8);
        v10 = fopen((const char *)buf, "w");
        if (v10)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<std::valarray<float>>::resize((uint64_t)&v21, 2uLL);
          v11 = v22;
          if (v22 != v21)
          {
            v12 = 0;
            v13 = 1;
            v11 = v21;
            do
            {
              std::valarray<float>::resize((uint64_t)&v11[2 * v12], v5, 0.0);
              v12 = v13;
              v11 = v21;
              ++v13;
            }
            while (v12 < ((char *)v22 - (char *)v21) >> 4);
          }
          v14 = *v11;
          v15 = *(_QWORD *)(v1 + 560);
          if (*(_BYTE *)(v1 + 552))
          {
            memcpy(v14, **(const void ***)(v15 + 384), 4 * v5);
            v16 = *(_QWORD *)(v1 + 560) + 384;
          }
          else
          {
            memcpy(v14, **(const void ***)(v15 + 112), 4 * v5);
            v16 = *(_QWORD *)(v1 + 560) + 112;
          }
          memcpy(v21[2], *(const void **)(*(_QWORD *)v16 + 8), 4 * v5);
          if ((int)v5 >= 1)
          {
            v19 = 0;
            v20 = 4 * v5;
            do
            {
              fprintf(v10, "%.8f %.8f\n", *(float *)((char *)*v21 + v19), *(float *)((char *)v21[2] + v19));
              v19 += 4;
            }
            while (v20 != v19);
          }
          fclose(v10);
          v25 = &v21;
          std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
        }
        return;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    this = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (this)
    {
      *(_DWORD *)buf = 136315394;
      v27 = "AUBeamNF.cpp";
      v28 = 1024;
      v29 = 2643;
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Number of unique bands is zero, won't dump post EQ", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (AUBeamNFLogScope(void)::once != -1)
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_7939);
  if (AUBeamNFLogScope(void)::scope)
  {
    v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamNFLogScope(void)::scope)
      return;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v27 = "AUBeamNF.cpp";
    v28 = 1024;
    v29 = 2631;
    _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Beam object not initialized, won't dump post EQ", buf, 0x12u);
  }
}

void sub_1B631EA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a14;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void std::vector<std::valarray<float>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int64x2_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v17 = &v4[2 * a2];
      while (v3 != v17)
      {
        v3 -= 2;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>((uint64_t)v3);
      }
      *(_QWORD *)(a1 + 8) = v17;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = *(_QWORD *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 4)
    {
      bzero(*(void **)(a1 + 8), 16 * v6);
      *(_QWORD *)(a1 + 8) = &v3[2 * v6];
    }
    else
    {
      if (a2 >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v8 = v7 - (_QWORD)v4;
      v9 = v8 >> 3;
      if (v8 >> 3 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
      v12 = &v11[16 * v5];
      v13 = &v11[16 * v10];
      bzero(v12, 16 * v6);
      v14 = &v12[16 * v6];
      if (v3 == v4)
      {
        v16 = vdupq_n_s64((unint64_t)v3);
      }
      else
      {
        do
        {
          v15 = *((_OWORD *)v3 - 1);
          v3 -= 2;
          *((_OWORD *)v12 - 1) = v15;
          v12 -= 16;
          *v3 = 0;
          v3[1] = 0;
        }
        while (v3 != v4);
        v16 = *(int64x2_t *)a1;
      }
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
      v19 = v16.i64[1];
      v18 = (void *)v16.i64[0];
      while ((void *)v19 != v18)
      {
        v19 -= 16;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(v19);
      }
      if (v18)
        operator delete(v18);
    }
  }
}

void std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void AUBeamNF::BlockProcessFunc(float ****this, unsigned int a2, const AudioBufferList **a3, AudioBufferList **a4, float *a5)
{
  unsigned int v7;
  float **v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float ***v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  float **v32;
  float **v33;
  unsigned int v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  float **v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float *v49;
  const AudioBufferList **v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v49 = (float *)a4;
  v50 = a3;
  v48 = a5;
  MEMORY[0x1E0C80A78](this);
  v10 = (float *)((char *)&v48 - v9);
  if (*(_BYTE *)(v11 + 636))
  {
    v12 = v7;
    if (v7)
    {
      v13 = 0;
      v14 = 4 * v7;
      do
      {
        v10[v13 / 4] = (float)((float)rand() * 4.6566e-10) + -0.5;
        v10[v12 + v13 / 4] = (float)((float)rand() * 4.6566e-10) + -0.5;
        v13 += 4;
      }
      while (v14 != v13);
    }
    v49 = v10;
    v50 = (const AudioBufferList **)&v10[v12];
  }
  v15 = this[70];
  v16 = *((int *)v15 + 29);
  if (*((_DWORD *)v15 + 6))
  {
    CmhBEAM::deinterleave((uint64_t)v15, &v49, v15[4], *(_DWORD *)v15);
    CmhBEAM::deinterleave((uint64_t)v15, &v48, v15[5], *((_DWORD *)v15 + 2));
    CmhBEAM::deinterleave((uint64_t)v15, 0, v15[6], *((_DWORD *)v15 + 1));
  }
  else
  {
    v17 = *(unsigned int *)v15;
    if ((int)v17 >= 1)
    {
      v18 = 0;
      v19 = 8 * v17;
      do
      {
        v15[4][v18 / 8] = (&v49)[v18 / 8];
        v18 += 8;
      }
      while (v19 != v18);
    }
    v20 = *((unsigned int *)v15 + 2);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 8 * v20;
      do
      {
        v15[5][v21 / 8] = a5;
        v21 += 8;
      }
      while (v22 != v21);
    }
  }
  v23 = *((unsigned int *)v15 + 30);
  if (!(_DWORD)v23)
  {
    v29 = *((_DWORD *)v15 + 31);
    if (!v29)
      return;
    v30 = *((unsigned int *)v15 + 4);
    if ((int)v30 <= 0)
    {
      v34 = *((_DWORD *)v15 + 7);
    }
    else
    {
      v31 = 0;
      v32 = v15[4];
      v33 = v15[7];
      v34 = *((_DWORD *)v15 + 7);
      v35 = *v32;
      v36 = v32[1];
      v37 = *v33;
      v38 = v33[1];
      v40 = *((_DWORD *)v15 + 1);
      v39 = *((unsigned int *)v15 + 2);
      v41 = (int)(v34 * v30);
      do
      {
        v42 = v31 + v41;
        v37[v31 + v41] = v35[v31];
        v38[v31 + v41] = v36[v31];
        if ((int)v39 >= 1)
        {
          v43 = v15[8];
          v8 = v15[5];
          v44 = v39;
          do
          {
            v45 = (uint64_t)*v43++;
            v46 = *(float *)(v45 + 4 * v42);
            v47 = *v8++;
            v47[v31] = v46;
            --v44;
          }
          while (v44);
        }
        if (v40 > 0)
          (*v15[9])[v42] = (*v15[6])[v31];
        ++v31;
      }
      while (v31 != v30);
    }
    *((_DWORD *)v15 + 7) = v34 + 1;
    if (v34 + 1 == v29)
    {
      if (Beamformer_BeamNF::CmhBEAMprocOpt::process((Beamformer_BeamNF::CmhBEAMprocOpt *)(v15 + 11), v15[7], v15[8], v8))return;
      *((_DWORD *)v15 + 7) = 0;
    }
    goto LABEL_39;
  }
  if ((int)v23 < 1)
  {
LABEL_39:
    if (*((_DWORD *)v15 + 6))
    {
      CmhBEAM::interleave((CmhBEAM *)v15, v15[4], &v49, *(_DWORD *)v15);
      CmhBEAM::interleave((CmhBEAM *)v15, v15[5], &v48, *((_DWORD *)v15 + 2));
      CmhBEAM::interleave((CmhBEAM *)v15, v15[6], 0, *((_DWORD *)v15 + 1));
    }
    return;
  }
  v24 = 0;
  while (1)
  {
    v25 = v24 * v16;
    *v15[7] = &(*v15[4])[v24 * v16];
    v15[7][1] = &v15[4][1][v24 * v16];
    v26 = *((unsigned int *)v15 + 2);
    if ((int)v26 >= 1)
    {
      v27 = 0;
      v28 = 8 * v26;
      do
      {
        v15[8][v27 / 8] = &v15[5][v27 / 8][v25];
        v27 += 8;
      }
      while (v28 != v27);
    }
    if (*((int *)v15 + 1) > 0)
      *v15[9] = &(*v15[6])[v25];
    if (Beamformer_BeamNF::CmhBEAMprocOpt::process((Beamformer_BeamNF::CmhBEAMprocOpt *)(v15 + 11), v15[7], v15[8], v8))break;
    if (++v24 == v23)
      goto LABEL_39;
  }
}

void sub_1B631F10C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorV4::ProcessDownlinkAudio(VoiceProcessorV4 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  CADeprecated::CAMutex *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  int *v24;
  double v25;
  double v26;
  _QWORD *v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  UInt32 v32;
  int v33;
  AudioBufferList *v34;
  UInt32 mNumberBuffers;
  unint64_t v36;
  void **p_mData;
  AudioBufferList *v38;
  unint64_t v39;
  void **v40;
  AudioBufferList *v41;
  AudioBufferList *v42;
  unint64_t v43;
  void **v44;
  AudioBufferList *v45;
  int v46;
  double v47;
  NSObject *v48;
  NSObject *v49;
  int *v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  int *v54;
  uint64_t v55;
  int v56;
  double v57;
  double v58;
  _QWORD *v59;
  NSObject *v60;
  int *v61;
  _QWORD *v62;
  NSObject *v63;
  UInt32 mDataByteSize;
  int v65;
  int v66;
  int *v67;
  uint64_t v68;
  UInt32 v69;
  int v70;
  _QWORD *v71;
  NSObject *v72;
  UInt32 v73;
  int v74;
  int *v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  NSObject *v79;
  int *v80;
  _QWORD *v81;
  NSObject *v82;
  UInt32 v83;
  int v84;
  int v85;
  int *v86;
  uint64_t v87;
  UInt32 v88;
  int v89;
  NSObject *v90;
  NSObject *v91;
  int *v92;
  NSObject *v93;
  NSObject *v94;
  int v95;
  VoiceProcessor::SampleRateConverter **v96;
  unsigned int v97;
  unsigned int *v98;
  uint64_t v99;
  int v100;
  int *v101;
  uint64_t v102;
  unint64_t v103;
  const AudioBufferList *v104;
  uint64_t v105;
  UInt64 v106;
  UInt64 v107;
  Float64 mSampleTime;
  unsigned int frame_count;
  int v110;
  uint64_t v111;
  int *v112;
  int v113;
  uint64_t v114;
  size_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t i;
  int v119;
  AudioBufferList *v120;
  int v121;
  uint64_t v122;
  size_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t j;
  char *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  AudioUnit v133;
  CA::AudioSampleRateConverter **v134;
  uint64_t Parameter;
  float v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  AudioBufferList *v142;
  size_t v143;
  uint64_t v144;
  void **v145;
  void **v146;
  char *v147;
  uint64_t v148;
  int v149;
  int *v150;
  int v151;
  UInt64 v152;
  UInt64 v153;
  UInt64 v154;
  UInt64 v155;
  const float *data;
  const float *v157;
  float *v158;
  uint64_t v159;
  size_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  AudioBufferList *v166;
  AudioBufferList *v167;
  AudioBufferList *v168;
  unint64_t k;
  unint64_t v170;
  AudioBuffer *mBuffers;
  _OWORD *v172;
  unint64_t n;
  __int128 v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t m;
  unsigned int v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  AudioBufferList *v183;
  AudioUnitParameterValue *v184;
  int v185;
  uint64_t v186;
  size_t v187;
  int v188;
  uint64_t v189;
  int *v190;
  size_t v191;
  uint64_t v192;
  UInt32 v193;
  uint64_t v194;
  UInt32 *v195;
  size_t v196;
  uint64_t v197;
  UInt32 v198;
  uint64_t v199;
  UInt32 *v200;
  size_t v201;
  uint64_t v202;
  _DWORD *v203;
  unint64_t v204;
  void **v205;
  uint64_t v206;
  UInt32 *v207;
  size_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  size_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  AudioUnitParameterValue *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  AudioBufferList *v221;
  AudioBufferList *v222;
  AudioBufferList *v223;
  int v224;
  uint64_t v225;
  uint64_t *v226;
  void **v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t *v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t *v238;
  void **v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t *v243;
  void **v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  UInt32 *v249;
  _QWORD *v250;
  uint64_t v251;
  AudioBufferList *v252;
  AudioBufferList *v253;
  AudioBufferList *v254;
  AudioBufferList *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  uint64_t v259;
  unsigned int *v260;
  _BOOL4 v261;
  _BOOL4 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  AudioBufferList *v266;
  uint64_t *v267;
  uint64_t v268;
  float v269;
  UInt64 v270;
  UInt64 v271;
  const float *v272;
  float *v273;
  uint64_t v274;
  OpaqueAudioComponentInstance *v275;
  int v276;
  BOOL v277;
  UInt64 v278;
  Float64 v279;
  UInt32 *p_mNumberBuffers;
  OpaqueAudioComponentInstance *v281;
  OSStatus v282;
  _BOOL4 v284;
  UInt64 v285;
  UInt64 v286;
  const float *v287;
  float *v288;
  UInt64 v289;
  UInt64 v290;
  const float *v291;
  float *v292;
  UInt64 v293;
  UInt64 v294;
  const float *v295;
  float *v296;
  uint64_t v297;
  OpaqueAudioComponentInstance *v298;
  OpaqueAudioComponentInstance *v299;
  int v300;
  OpaqueAudioComponentInstance *v301;
  OpaqueAudioComponentInstance *v302;
  AudioBufferList *v303;
  unint64_t v304;
  uint64_t v305;
  unsigned int v306;
  float v307;
  float v308;
  int v309;
  double v310;
  float v311;
  float v312;
  unsigned int v313;
  float v314;
  _OWORD *v315;
  float v316;
  UInt64 v317;
  UInt64 v318;
  const float *v319;
  float *v320;
  int v321;
  uint64_t *v322;
  unsigned int *audio_buffer_list;
  unsigned int *v324;
  unint64_t v325;
  AudioBufferList *v326;
  UInt32 v327;
  int *v328;
  int v329;
  uint64_t v330;
  unint64_t v331;
  unsigned int v332;
  unsigned int v333;
  size_t v334;
  unint64_t v335;
  int v336;
  int v337;
  uint64_t *v338;
  unint64_t v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  UInt32 v344;
  uint64_t v345;
  AudioBufferList *v346;
  size_t v347;
  unsigned int v348;
  unsigned int v349;
  int v350;
  const float *v351;
  const float *v352;
  float *v353;
  uint64_t DynamicsDSPChannelCount;
  UInt32 v355;
  uint64_t v356;
  OpaqueAudioComponentInstance *v357;
  uint64_t v358;
  AudioBufferList *v359;
  size_t v360;
  OpaqueAudioComponentInstance *v361;
  uint64_t v362;
  AudioBufferList *v363;
  size_t v364;
  uint64_t v365;
  uint64_t v366;
  UInt32 *v367;
  size_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  AudioBufferList *v375;
  size_t v376;
  uint64_t v377;
  AudioBufferList *v378;
  AudioBuffer v379;
  int v380;
  void **v381;
  unsigned int v382;
  unint64_t v383;
  char *v384;
  const void **v385;
  unsigned int *v386;
  uint64_t v387;
  UInt32 v388;
  void **v389;
  unint64_t v390;
  AudioBuffer *v391;
  _OWORD *v392;
  unint64_t ii;
  __int128 v394;
  void **v395;
  unint64_t v396;
  AudioBufferList *v397;
  unint64_t v398;
  uint64_t v399;
  int v400;
  unint64_t v401;
  void **v402;
  unsigned int *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  OpaqueAudioComponentInstance *v407;
  uint64_t v408;
  uint64_t v409;
  AudioBufferList *v410;
  size_t v411;
  uint64_t v412;
  AudioBuffer *v413;
  AudioBuffer v414;
  OpaqueAudioComponentInstance *v415;
  uint64_t v416;
  uint64_t v417;
  AudioBufferList *v418;
  size_t v419;
  uint64_t v420;
  AudioBufferList *v421;
  AudioBuffer v422;
  char v423;
  _DWORD *v424;
  UInt32 v425;
  UInt64 v426;
  OpaqueAudioComponentInstance *v427;
  uint64_t v428;
  uint64_t v429;
  AudioBufferList *v430;
  size_t v431;
  uint64_t v432;
  AudioBuffer *v433;
  AudioBuffer v434;
  UInt64 v435;
  _DWORD *v436;
  UInt32 v437;
  uint64_t v438;
  uint64_t v439;
  AudioBufferList *v440;
  size_t v441;
  uint64_t v442;
  AudioBufferList *v443;
  AudioBuffer v444;
  UInt64 v445;
  float v446;
  float v447;
  float v448;
  float v449;
  BOOL v450;
  float v451;
  float v452;
  float v453;
  unint64_t v454;
  uint64_t v455;
  float *v456;
  vDSP_Length v457;
  uint64_t v458;
  AudioUnitParameterValue v459;
  OpaqueAudioComponentInstance *v460;
  OpaqueAudioComponentInstance *v461;
  unsigned int v462;
  const AudioBufferList *v463;
  uint64_t v464;
  OpaqueAudioComponentInstance *v465;
  __int128 v466;
  __int128 v467;
  OpaqueAudioComponentInstance *v468;
  __int128 v469;
  __int128 v470;
  OpaqueAudioComponentInstance *v471;
  OpaqueAudioComponentInstance *v472;
  char v473;
  char *v474;
  OpaqueAudioComponentInstance *v475;
  OpaqueAudioComponentInstance *v476;
  OpaqueAudioComponentInstance *v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  int *v481;
  unsigned int v482;
  double v483;
  int *v484;
  uint64_t v485;
  unint64_t v486;
  void **v487;
  int v488;
  unsigned int v490;
  _DWORD *v492;
  _DWORD *v493;
  _DWORD *v494;
  _DWORD *v496;
  _DWORD *v498;
  _DWORD *v500;
  _DWORD *v502;
  _DWORD *v503;
  _DWORD *exception;
  _DWORD *v505;
  _DWORD *v506;
  NSObject *v507;
  _DWORD *v508;
  _DWORD *v509;
  _DWORD *v510;
  NSObject *v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  uint64_t v515;
  __int128 v516;
  _OWORD *v517;
  _BYTE *v518;
  UInt64 *p_mHostTime;
  float v520;
  char *v521;
  vp::Audio_Buffer *v522;
  const CAStreamBasicDescription *v523;
  const AudioTimeStamp *v524;
  void **v525;
  void **v526;
  void **v527;
  void **v528;
  uint64_t *v529;
  int v530;
  AudioBufferList *v531;
  AudioBufferList *v532;
  unsigned int v533;
  Float64 v534;
  uint64_t v535;
  AudioBufferList *v536;
  AudioBufferList *MonoABL;
  UInt32 *v538;
  UInt32 *v539;
  int *v540;
  AudioUnitParameterValue *v541;
  AudioBufferList *v542;
  AudioBufferList *v543;
  void **v544;
  AudioBufferList *v545;
  char *v546;
  AudioUnitRenderActionFlags v547;
  uint64_t v548;
  int v549;
  AudioBufferList v550;
  UInt32 v551;
  UInt32 NumberOfSourceFrames;
  UInt32 v553;
  AudioTimeStamp v554;
  AudioBufferList *v555;
  uint64_t v556;
  _QWORD v557[2];
  Float64 v558;
  AudioBufferList *v559;
  AudioTimeStamp v560;
  AudioTimeStamp v561;
  AudioBufferList v562;
  AudioBufferList v563;
  AudioTimeStamp v564;
  AudioTimeStamp buf;
  uint64_t v566;

  v542 = a3;
  v543 = a4;
  v545 = a2;
  v566 = *MEMORY[0x1E0C80C00];
  v11 = (char *)this + 17032;
  v12 = (char *)this + 12488;
  v13 = (unsigned int *)((char *)this + 2484);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (*((_DWORD *)this + 620))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: tryer failed to acquire lock");
    v15 = (VoiceProcessorV4 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
LABEL_5:
    ++*((_DWORD *)this + 3114);
    CADeprecated::CAMutex::Unlock(v15);
    LOBYTE(v16) = 0;
    v17 = 1937006964;
    v18 = 0.0;
    goto LABEL_900;
  }
  if (!*((_BYTE *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: not ok to process?!");
    v15 = (VoiceProcessorV4 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
    goto LABEL_5;
  }
  v18 = 0.0;
  if (*((_BYTE *)this + 15897))
  {
    if (*((_QWORD *)this + 1571))
    {
      v18 = (double)mach_absolute_time() * 0.0000000416666667;
      if (*((double *)this + 1986) == 0.0)
        *((double *)this + 1986) = v18;
    }
  }
  (*(void (**)(AudioTimeStamp *__return_ptr, VoiceProcessorV4 *, const AudioTimeStamp *))(*(_QWORD *)this + 680))(&buf, this, a7);
  v554 = buf;
  if (v12[3409])
  {
    if (*v12)
    {
      v19 = *((double *)this + 1560);
      HIDWORD(v20) = HIDWORD(v554.mSampleTime);
      if (v19 != v554.mSampleTime)
      {
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v19, v554.mSampleTime, 2);
        v20 = *((double *)this + 1560);
        if (v554.mSampleTime < v20)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v21 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              v23 = *((_QWORD *)this + 1560);
              LODWORD(buf.mSampleTime) = 136316674;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 80;
              WORD1(buf.mRateScalar) = 2048;
              *(_QWORD *)((char *)&buf.mRateScalar + 4) = v23;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(_QWORD *)&v554.mSampleTime;
              HIWORD(buf.mSMPTETime.mCounter) = 2048;
              *(_QWORD *)&buf.mSMPTETime.mType = v554.mHostTime;
              buf.mSMPTETime.mHours = 2048;
              *(Float64 *)&buf.mSMPTETime.mMinutes = v554.mRateScalar;
              HIWORD(buf.mFlags) = 1024;
              buf.mReserved = v554.mFlags;
              _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
            }
          }
          v24 = (int *)*((_QWORD *)this + 1570);
          if (v24 && (v12[3409] || v12[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v24, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 80, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1560), v554.mSampleTime, v554.mHostTime, v554.mRateScalar, v554.mFlags);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "sprk sample time jumped backwards");
        }
      }
    }
    else
    {
      *v12 = 1;
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v554.mSampleTime, 2);
      v20 = *((double *)this + 215);
      v25 = v554.mSampleTime - v20;
      v26 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)*((unsigned int *)this + 124))
                                  + (float)*((unsigned int *)this + 124))
                          + (float)*((unsigned int *)this + 293))
                  + (float)*((unsigned int *)this + 294));
      if (v554.mSampleTime - v20 != v26)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v27 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 70;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v26;
            WORD2(buf.mWordClockTime) = 2048;
            *(double *)((char *)&buf.mWordClockTime + 6) = v25;
            _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
          }
        }
        v29 = (int *)*((_QWORD *)this + 1570);
        if (v29 && (v12[3409] || v12[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v29, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 70, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v26, v25);
        }
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "bad relative mic-ref TS");
      }
    }
    LODWORD(v20) = *((_DWORD *)this + 121);
    *((double *)this + 1560) = v554.mSampleTime + (double)*(unint64_t *)&v20;
  }
  v524 = a7;
  v535 = a6;
  v546 = v12;
  v30 = (char *)this + 2488;
  v31 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 311) + 16))((char *)this + 2488);
  CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3114);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV4 *)((char *)this + 2576));
  v530 = v31;
  v32 = *((_DWORD *)this + 121);
  v553 = v32;
  NumberOfSourceFrames = v32;
  v33 = v546[3409];
  if (!v546[3409])
  {
    if (a5->mNumberBuffers == *((_DWORD *)this + 89))
    {
      v523 = (VoiceProcessorV4 *)((char *)this + 328);
      if (!v546[3410])
        goto LABEL_81;
      goto LABEL_55;
    }
LABEL_897:
    if (v530)
      (*(void (**)(char *))(*(_QWORD *)v30 + 24))(v30);
    v17 = 0;
    LOBYTE(v16) = 1;
    v12 = v546;
LABEL_900:
    if (v12[3409] && *((_QWORD *)this + 1571))
    {
      v480 = mach_absolute_time();
      v481 = (int *)*((_QWORD *)this + 1571);
      v267 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
      if (VPTimestampLogScope(void)::once != -1)
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      v181 = (uint64_t)&AudioDataAnalysisManagerLibraryLoader(void)::libSym;
      v180 = (double)v480 * 0.0000000416666667 - v18;
      CALegacyLog::log(v481, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1387, "ProcessDownlinkAudio", "DL %f %f %f", v554.mSampleTime, v18, v180);
      v482 = *((_DWORD *)this + 121);
      v483 = *((double *)this + 41);
      if (v180 >= (double)v482 / v483)
      {
        v212 = (int *)*((_QWORD *)this + 1571);
        if (VPTimestampLogScope(void)::once != -1)
          goto LABEL_932;
        goto LABEL_906;
      }
      goto LABEL_907;
    }
    goto LABEL_912;
  }
  v546[385] = 1;
  if (a5->mNumberBuffers != *((_DWORD *)this + 89))
    goto LABEL_897;
  v523 = (VoiceProcessorV4 *)((char *)this + 328);
LABEL_55:
  if (!v545)
  {
    v34 = (AudioBufferList *)*((_QWORD *)this + 199);
    mNumberBuffers = v34->mNumberBuffers;
    v545 = v34;
    if (mNumberBuffers)
    {
      v36 = 0;
      p_mData = &v34->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v36;
        p_mData += 2;
      }
      while (v36 < v545->mNumberBuffers);
      v33 = v546[3409];
    }
  }
  if (v33 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 1, v535, v545), v546[3409]) || v546[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v535, v545, &v554);
  v38 = v542;
  if (!v542)
  {
    v38 = (AudioBufferList *)*((_QWORD *)this + 200);
    if (v38->mNumberBuffers)
    {
      v39 = 0;
      v40 = &v38->mBuffers[0].mData;
      do
      {
        v41 = v38;
        bzero(*v40, *((unsigned int *)v40 - 1));
        v38 = v41;
        ++v39;
        v40 += 2;
      }
      while (v39 < v41->mNumberBuffers);
    }
  }
  v542 = v38;
  if (v546[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 10, v535, v542), v546[3409]) || v546[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v535, v542, &v554);
  v42 = v543;
  if (!v543)
  {
    v42 = (AudioBufferList *)*((_QWORD *)this + 201);
    if (v42->mNumberBuffers)
    {
      v43 = 0;
      v44 = &v42->mBuffers[0].mData;
      do
      {
        v45 = v42;
        bzero(*v44, *((unsigned int *)v44 - 1));
        v42 = v45;
        ++v43;
        v44 += 2;
      }
      while (v43 < v45->mNumberBuffers);
    }
  }
  v543 = v42;
  if (v546[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 11, v535, v543), v546[3409]) || v546[3410])
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v535, v543, &v554);
  v32 = *((_DWORD *)this + 121);
LABEL_81:
  if (v32 != (_DWORD)v535)
  {
    if (v546[3331])
    {
      v57 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
      v58 = *((double *)this + 1983);
      if (v57 > v58)
      {
        *((double *)this + 1983) = v58 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v535, "processdownlinkaudio: <block size mismatch>");
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v59 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v60 = (*v59 ? *v59 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315650;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 171;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v57;
            _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
          }
        }
        v61 = (int *)*((_QWORD *)this + 1570);
        if (v61 && (v546[3409] || v546[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v61, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 171, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v57);
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v62 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v63 = (*v62 ? *v62 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            mDataByteSize = a5->mBuffers[0].mDataByteSize;
            v65 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&v564, v523);
            v66 = *((_DWORD *)this + 3114);
            LODWORD(buf.mSampleTime) = 136316674;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 175;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v535;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = mDataByteSize;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v65;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v564.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v66;
            _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(_QWORD *)&v564.mSampleTime)
              free(*(void **)&v564.mSampleTime);
          }
        }
        v67 = (int *)*((_QWORD *)this + 1570);
        if (v67)
        {
          if (v546[3409] || v546[3410])
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v68 = VPLogScope(void)::scope;
            v69 = a5->mBuffers[0].mDataByteSize;
            v70 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&buf, v523);
            CALegacyLog::log(v67, 1, v68, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 175, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v535, v69, v70, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
LABEL_194:
            if (*(_QWORD *)&buf.mSampleTime)
              free(*(void **)&buf.mSampleTime);
          }
        }
      }
    }
    else
    {
      v546[3331] = 1;
      *((_QWORD *)this + 1980) = mach_absolute_time();
      *((_QWORD *)this + 1983) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v535, "processdl: <block size mismatch>");
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v78 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v79 = (*v78 ? *v78 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 151;
          _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
        }
      }
      v80 = (int *)*((_QWORD *)this + 1570);
      if (v80 && (v546[3409] || v546[3410]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v80, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 151, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v81 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v82 = (*v81 ? *v81 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          v83 = a5->mBuffers[0].mDataByteSize;
          v84 = *((_DWORD *)this + 121);
          CAFormatter::CAFormatter((CAFormatter *)&v564, v523);
          v85 = *((_DWORD *)this + 3114);
          LODWORD(buf.mSampleTime) = 136316674;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 155;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v535;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v83;
          HIWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mSubframes = v84;
          LOWORD(buf.mSMPTETime.mCounter) = 2080;
          *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v564.mSampleTime;
          HIWORD(buf.mSMPTETime.mFlags) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mHours = v85;
          _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
          if (*(_QWORD *)&v564.mSampleTime)
            free(*(void **)&v564.mSampleTime);
        }
      }
      v86 = (int *)*((_QWORD *)this + 1570);
      if (v86 && (v546[3409] || v546[3410]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v87 = VPLogScope(void)::scope;
        v88 = a5->mBuffers[0].mDataByteSize;
        v89 = *((_DWORD *)this + 121);
        CAFormatter::CAFormatter((CAFormatter *)&buf, v523);
        CALegacyLog::log(v86, 2, v87, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 155, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v535, v88, v89, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
        goto LABEL_194;
      }
    }
    if (v546[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v535, a5), v546[3409]) || v546[3410])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v535, a5, &v554);
    v77 = *((_QWORD *)this + 1995);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_8124);
    if (!AudioIssueDetectorLibraryLoader(void)::libSym)
      goto LABEL_897;
LABEL_203:
    AudioIssueDetectorLibraryLoader(void)::libSym(v77, 68, 0, a5, v535, &v554);
    goto LABEL_897;
  }
  if (a5->mBuffers[0].mDataByteSize != *((_DWORD *)this + 88) * (_DWORD)v535)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v71 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v72 = (*v71 ? *v71 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        v73 = a5->mBuffers[0].mDataByteSize;
        v74 = *((_DWORD *)this + 88) * v535;
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 189;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v73;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v74;
        _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v75 = (int *)*((_QWORD *)this + 1570);
    v76 = v546[3409];
    if (v75)
    {
      if (!v546[3409] && !v546[3410])
        goto LABEL_157;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v75, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 189, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", a5->mBuffers[0].mDataByteSize, *((_DWORD *)this + 88) * v535);
      v76 = v546[3409];
    }
    if (v76)
    {
      VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v535, a5);
      if (v546[3409])
      {
LABEL_158:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v535, a5, &v554);
LABEL_159:
        v77 = *((_QWORD *)this + 1995);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1)
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_8124);
        if (!AudioIssueDetectorLibraryLoader(void)::libSym)
          goto LABEL_897;
        goto LABEL_203;
      }
    }
LABEL_157:
    if (!v546[3410])
      goto LABEL_159;
    goto LABEL_158;
  }
  v518 = v11;
  v46 = v546[3331];
  v521 = (char *)this + 2488;
  if (!v46)
    goto LABEL_227;
  v546[3331] = 0;
  v47 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
  VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v535, "processdownlinkaudio: <block size no longer mismatched>");
  if (v47 <= 1.0)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v90 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v90)
    {
      v91 = v90;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 212;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v47;
        _os_log_impl(&dword_1B5ED0000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    v92 = (int *)*((_QWORD *)this + 1570);
    if (v92 && (v546[3409] || v546[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v92, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 212, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v93 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v93)
    {
      v94 = v93;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        v95 = *((_DWORD *)this + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 213;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v535;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v95;
        _os_log_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v54 = (int *)*((_QWORD *)this + 1570);
    if (v54 && (v546[3409] || v546[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v55 = 213;
      v56 = 2;
      goto LABEL_226;
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v48 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v48)
    {
      v49 = v48;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 207;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v47;
        _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    v50 = (int *)*((_QWORD *)this + 1570);
    if (v50 && (v546[3409] || v546[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 207, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v51 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v51)
    {
      v52 = v51;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v53 = *((_DWORD *)this + 121);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 208;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v535;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v53;
        _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v54 = (int *)*((_QWORD *)this + 1570);
    if (v54 && (v546[3409] || v546[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v55 = 208;
      v56 = 1;
LABEL_226:
      CALegacyLog::log(v54, v56, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", v55, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", v535, *((_DWORD *)this + 121));
    }
  }
LABEL_227:
  v96 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 48);
  v97 = *((_DWORD *)this + 121);
  if (*((_QWORD *)this + 47))
  {
    if (v96)
    {
      NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v96);
      v96 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
LABEL_234:
      v97 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v96);
      goto LABEL_235;
    }
    v96 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
LABEL_233:
    NumberOfSourceFrames = *((_DWORD *)this + 121);
    goto LABEL_234;
  }
  if (v96)
    goto LABEL_233;
LABEL_235:
  v98 = (unsigned int *)*((_QWORD *)this + 13);
  v99 = *v98;
  if ((int)v99 >= 1)
  {
    v100 = v97 * *((_DWORD *)this + 58);
    v101 = (int *)(v98 + 3);
    do
    {
      *v101 = v100;
      v101 += 4;
      --v99;
    }
    while (v99);
  }
  v551 = v97;
  v102 = (*(uint64_t (**)(void))(*((_QWORD *)this + 12) + 16))();
  v103 = v551;
  v553 = v551;
  v104 = (const AudioBufferList *)*((_QWORD *)this + 13);
  if (v546[3409]
    && (VoiceProcessorV2::InjectionFilesReadSignal(this, 0, v551, *((AudioBufferList **)this + 13)),
        v104 = (const AudioBufferList *)*((_QWORD *)this + 13),
        v546[3409])
    || v546[3410])
  {
    v102 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v551, v104, &v554);
    v104 = (const AudioBufferList *)*((_QWORD *)this + 13);
  }
  v105 = *((_QWORD *)this + 1995);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_8124);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    v102 = AudioIssueDetectorLibraryLoader(void)::libSym(v105, 51, 0, v104, v551, &v554);
  if (*((_BYTE *)this + 2082) || *((_DWORD *)this + 19) == 7 && *((float *)this + 3116) == 0.0)
  {
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
    v561.mSampleTime = buf.mSampleTime;
    *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v561);
    buf.mHostTime = v106;
    *(_QWORD *)&v564.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v561);
    v564.mHostTime = v107;
    while (1)
    {
      v102 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v564);
      if ((v102 & 1) == 0)
        break;
      mSampleTime = buf.mSampleTime;
      frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
      vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
    }
  }
  v110 = *((_DWORD *)this + 55);
  if ((v110 & 0x20) != 0)
  {
    v113 = *((_DWORD *)this + 59);
    if ((v113 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 287;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69EE218;
      exception[2] = -50;
    }
    MEMORY[0x1E0C80A78](v102);
    v112 = (int *)((char *)&v517 - v114);
    bzero((char *)&v517 - v114, v115);
  }
  else
  {
    MEMORY[0x1E0C80A78](v102);
    v112 = (int *)&v515;
    v515 = 0;
    v516 = 0uLL;
    v113 = 1;
  }
  v116 = 0;
  *v112 = v113;
  v117 = 2;
  if ((v110 & 0x20) != 0)
    goto LABEL_258;
LABEL_257:
  for (i = 1; v116 < i; i = *((unsigned int *)this + 59))
  {
    *(_OWORD *)&v112[v117] = *(_OWORD *)(*((_QWORD *)this + 13) + v117 * 4);
    ++v116;
    v117 += 4;
    if ((v110 & 0x20) == 0)
      goto LABEL_257;
LABEL_258:
    ;
  }
  v119 = *((_DWORD *)this + 65);
  if ((v119 & 0x20) != 0)
  {
    v121 = *((_DWORD *)this + 69);
    if ((v121 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 293;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
      }
      v505 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v505 = &off_1E69EE218;
      v505[2] = -50;
    }
    MEMORY[0x1E0C80A78](v111);
    v120 = (AudioBufferList *)((char *)&v517 - v122);
    bzero((char *)&v517 - v122, v123);
  }
  else
  {
    MEMORY[0x1E0C80A78](v111);
    v120 = (AudioBufferList *)&v515;
    v515 = 0;
    v516 = 0uLL;
    v121 = 1;
  }
  v124 = 0;
  v125 = 0;
  v120->mNumberBuffers = v121;
  if ((v119 & 0x20) != 0)
    goto LABEL_268;
LABEL_267:
  for (j = 1; v125 < j; j = *((unsigned int *)this + 69))
  {
    v127 = (char *)v120 + v124;
    *((_QWORD *)v127 + 2) = *(_QWORD *)(*((_QWORD *)this + 22) + v124 + 16);
    *((_DWORD *)v127 + 2) = 1;
    *((_DWORD *)v127 + 3) = 4 * v103;
    ++v125;
    v124 += 16;
    if ((v119 & 0x20) == 0)
      goto LABEL_267;
LABEL_268:
    ;
  }
  if ((*((_BYTE *)this + 8832) & 1) != 0 && (*((_BYTE *)this + 8840) & 1) != 0 && *((_QWORD *)this + 437))
  {
    v128 = (unint64_t *)((char *)this + 0x4000);
    v129 = atomic_load((unint64_t *)this + 2048);
    if (v129)
    {
      *(_QWORD *)&v561.mSampleTime = this;
      *(_QWORD *)&buf.mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV4::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
      buf.mHostTime = (UInt64)&v561;
      *(_QWORD *)&v564.mSampleTime = &buf;
      caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV4 *)((char *)this + 16304), &v564);
      do
        v130 = __ldaxr(v128);
      while (__stlxr(v130 - v129, v128));
    }
    v131 = *((_DWORD *)this + 576);
    if (v131 != *((_DWORD *)this + 578))
      AudioUnitSetParameter(*((AudioUnit *)this + 437), 0x75696F72u, 0, 0, (float)v131, 0);
    buf = v554;
    LODWORD(v560.mSampleTime) = 512;
    *(_QWORD *)&v564.mSampleTime = v112;
    *(_QWORD *)&v561.mSampleTime = v120;
    LODWORD(v103) = v553;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 437), (AudioUnitRenderActionFlags *)&v560, &buf, v553, 1u, (const AudioBufferList **)&v564, 1u, (AudioBufferList **)&v561);
  }
  else
  {
    *(_QWORD *)&v563.mNumberBuffers = v120;
    *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v563);
    buf.mHostTime = v152;
    *(_QWORD *)&v564.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v563);
    v564.mHostTime = v153;
    while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v564))
    {
      vp::fill(*(float ***)&buf.mSampleTime, v103, 0.0);
      *(_QWORD *)&v562.mNumberBuffers = v112;
      *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v562);
      v561.mHostTime = v154;
      *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v562);
      v560.mHostTime = v155;
      while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
      {
        data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
        v157 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
        v158 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
        vDSP_vadd(data, 1, v157, 1, v158, 1, v103);
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
      }
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
    }
  }
  if ((*((_BYTE *)this + 8832) & 2) != 0 && (*((_BYTE *)this + 8840) & 2) != 0)
  {
    v132 = *((_QWORD *)this + 438);
    if (v132)
    {
      buf = v554;
      LODWORD(v561.mSampleTime) = 512;
      MEMORY[0x1E0C80A78](v132);
      v516 = 0uLL;
      v515 = 0;
      v516 = *(_OWORD *)(*((_QWORD *)this + 22) + 8);
      LODWORD(v515) = 1;
      *(_QWORD *)&v564.mSampleTime = &v515;
      AudioUnitProcessMultiple(v133, (AudioUnitRenderActionFlags *)&v561, &buf, v103, 1u, (const AudioBufferList **)&v564, 0, (AudioBufferList **)&v560);
    }
  }
  v134 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 47);
  v531 = a5;
  if (v134)
  {
    VoiceProcessor::SampleRateConverter::Convert(v134, &v553, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 23));
    LODWORD(v103) = NumberOfSourceFrames;
    v553 = NumberOfSourceFrames;
    v120 = (AudioBufferList *)*((_QWORD *)this + 23);
  }
  v136 = VoiceProcessorV2::DetermineNoiseBasedVolume(this);
  v137 = *((_DWORD *)this + 130);
  buf = v554;
  if (v137)
  {
    v138 = 0;
    v139 = 0;
    v140 = v103 / v137;
    v541 = (AudioUnitParameterValue *)((char *)this + 16688);
    v544 = &v120->mBuffers[0].mData;
    do
    {
      if (v120->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v564.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v564.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v564.mHostTime) = 1024;
          *(_DWORD *)((char *)&v564.mHostTime + 6) = 395;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v564, 0x12u);
        }
        v492 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v492 = &off_1E69EE218;
        v492[2] = -50;
      }
      MEMORY[0x1E0C80A78](Parameter);
      v142 = (AudioBufferList *)((char *)&v517 - v141);
      bzero((char *)&v517 - v141, v143);
      v144 = v120->mNumberBuffers;
      v142->mNumberBuffers = v144;
      if ((_DWORD)v144)
      {
        v145 = &v142->mBuffers[0].mData;
        v146 = v544;
        do
        {
          *((_DWORD *)v145 - 2) = 1;
          *((_DWORD *)v145 - 1) = 4 * v140;
          v147 = (char *)*v146;
          v146 += 2;
          *v145 = &v147[4 * v139];
          v145 += 2;
          --v144;
        }
        while (v144);
      }
      v148 = *((_QWORD *)this + 1104);
      if ((v148 & 4) != 0 && (*((_BYTE *)this + 8840) & 4) != 0)
      {
        Parameter = *((_QWORD *)this + 439);
        if (Parameter)
        {
          v564 = buf;
          LODWORD(v561.mSampleTime) = 512;
          Parameter = AudioUnitProcess((AudioUnit)Parameter, (AudioUnitRenderActionFlags *)&v561, &v564, v140, v142);
          if (v546[3409] || v546[3410])
            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v140, v142, &v564);
          v148 = *((_QWORD *)this + 1104);
        }
      }
      if ((v148 & 0x40) != 0 && (*((_BYTE *)this + 8840) & 0x40) != 0)
      {
        Parameter = *((_QWORD *)this + 443);
        if (Parameter)
        {
          v564 = buf;
          *(_QWORD *)&v561.mSampleTime = v142;
          v561.mHostTime = 0;
          *(_QWORD *)&v560.mSampleTime = v142;
          v560.mHostTime = 0;
          v563.mNumberBuffers = 512;
          AudioUnitProcessMultiple((AudioUnit)Parameter, &v563.mNumberBuffers, &v564, v140, 2u, (const AudioBufferList **)&v561, 2u, (AudioBufferList **)&v560);
          Parameter = AudioUnitGetParameter(*((AudioUnit *)this + 443), 1u, 0, 0, v541);
          v148 = *((_QWORD *)this + 1104);
        }
      }
      if ((v148 & 0x100) != 0 && (*((_BYTE *)this + 8841) & 1) != 0)
      {
        Parameter = *((_QWORD *)this + 445);
        if (Parameter)
        {
          v564 = buf;
          AudioUnitSetParameter((AudioUnit)Parameter, 5u, 0, 0, v136, 0);
          LODWORD(v561.mSampleTime) = 512;
          Parameter = AudioUnitProcess(*((AudioUnit *)this + 445), (AudioUnitRenderActionFlags *)&v561, &v564, v140, v142);
          if (v546[3409] || v546[3410])
            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v140, v142, &v564);
          v148 = *((_QWORD *)this + 1104);
        }
      }
      if ((v148 & 0x4000) != 0 && (*((_BYTE *)this + 8841) & 0x40) != 0)
      {
        if (*((_QWORD *)this + 451))
        {
          Parameter = (*(uint64_t (**)(VoiceProcessorV4 *, AudioBufferList *, uint64_t, AudioTimeStamp *))(*(_QWORD *)this + 664))(this, v142, v140, &buf);
          if (v546[3409] || v546[3410])
            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v140, v142, &buf);
        }
      }
      v139 += v140;
      buf.mSampleTime = buf.mSampleTime + (double)v140;
      ++v138;
    }
    while (v138 < *((_DWORD *)this + 130));
  }
  v149 = *((_DWORD *)this + 75);
  if ((v149 & 0x20) != 0)
  {
    v151 = *((_DWORD *)this + 79);
    a5 = v531;
    if ((v151 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v564.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v564.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v564.mHostTime) = 1024;
        *(_DWORD *)((char *)&v564.mHostTime + 6) = 443;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v564, 0x12u);
      }
      v506 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v506 = &off_1E69EE218;
      v506[2] = -50;
    }
    MEMORY[0x1E0C80A78](Parameter);
    v150 = (int *)((char *)&v517 - v159);
    bzero((char *)&v517 - v159, v160);
  }
  else
  {
    MEMORY[0x1E0C80A78](Parameter);
    v150 = (int *)&v515;
    v515 = 0;
    v516 = 0uLL;
    v151 = 1;
    a5 = v531;
  }
  *v150 = v151;
  v162 = *((_QWORD *)this + 47);
  v161 = *((_QWORD *)this + 48);
  if (v161)
  {
    if (v162)
    {
      NumberOfSourceFrames = *((_DWORD *)this + 121);
      v161 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v161, &v553, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 24));
      v163 = 0;
      v164 = *((_DWORD *)this + 75);
      v165 = 2;
      v167 = v542;
      v166 = v543;
      v168 = v545;
      if ((v164 & 0x20) != 0)
        goto LABEL_332;
LABEL_331:
      for (k = 1; v163 < k; k = *((unsigned int *)this + 79))
      {
        *(_OWORD *)&v150[v165] = *(_OWORD *)(*((_QWORD *)this + 24) + v165 * 4);
        ++v163;
        v165 += 4;
        if ((v164 & 0x20) == 0)
          goto LABEL_331;
LABEL_332:
        ;
      }
    }
    else
    {
      v161 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v161, &v553, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 24));
      v175 = 0;
      v176 = *((_DWORD *)this + 75);
      v177 = 2;
      v167 = v542;
      v166 = v543;
      v168 = v545;
      if ((v176 & 0x20) != 0)
        goto LABEL_345;
LABEL_344:
      for (m = 1; v175 < m; m = *((unsigned int *)this + 79))
      {
        *(_OWORD *)&v150[v177] = *(_OWORD *)(*((_QWORD *)this + 24) + v177 * 4);
        ++v175;
        v177 += 4;
        if ((v176 & 0x20) == 0)
          goto LABEL_344;
LABEL_345:
        ;
      }
    }
    v553 = NumberOfSourceFrames;
  }
  else if (v162)
  {
    v170 = 0;
    mBuffers = v120->mBuffers;
    v172 = v150 + 2;
    v167 = v542;
    v166 = v543;
    v168 = v545;
    if ((v149 & 0x20) != 0)
      goto LABEL_339;
LABEL_338:
    for (n = 1; v170 < n; n = *((unsigned int *)this + 79))
    {
      v174 = (__int128)*mBuffers++;
      *v172++ = v174;
      ++v170;
      if ((v149 & 0x20) == 0)
        goto LABEL_338;
LABEL_339:
      ;
    }
  }
  else
  {
    v391 = v120->mBuffers;
    v392 = v150 + 2;
    v167 = v542;
    v166 = v543;
    v168 = v545;
    if ((v149 & 0x20) != 0)
      goto LABEL_675;
LABEL_674:
    for (ii = 1; v162 < ii; ii = *((unsigned int *)this + 79))
    {
      v394 = (__int128)*v391++;
      *v392++ = v394;
      ++v162;
      if ((v149 & 0x20) == 0)
        goto LABEL_674;
LABEL_675:
      ;
    }
  }
  v564 = v554;
  if (!*((_DWORD *)this + 130))
  {
LABEL_614:
    DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
    v355 = DynamicsDSPChannelCount;
    v356 = *((_QWORD *)this + 1104);
    if ((v356 & 0x200000000) != 0)
    {
      v30 = v521;
      if ((*((_BYTE *)this + 8844) & 2) != 0)
      {
        v357 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 470);
        if (v357)
        {
          if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_971;
            LODWORD(v561.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(v561.mHostTime) = 1024;
            *(_DWORD *)((char *)&v561.mHostTime + 6) = 920;
            v507 = MEMORY[0x1E0C81028];
            goto LABEL_970;
          }
          MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
          v359 = (AudioBufferList *)((char *)&v517 - v358);
          bzero((char *)&v517 - v358, v360);
          v359->mNumberBuffers = v355;
          memcpy(v359->mBuffers, a5->mBuffers, 16 * v355);
          LODWORD(v561.mSampleTime) = 512;
          DynamicsDSPChannelCount = AudioUnitProcess(v357, (AudioUnitRenderActionFlags *)&v561, &v554, *((_DWORD *)this + 121), v359);
          if (v546[3409] || v546[3410])
            DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v535, v359, &v554);
          v356 = *((_QWORD *)this + 1104);
        }
      }
    }
    else
    {
      v30 = v521;
    }
    if ((v356 & 0x1000000000) == 0)
      goto LABEL_631;
    if ((*((_BYTE *)this + 8844) & 0x10) == 0)
      goto LABEL_631;
    v361 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 473);
    if (!v361)
      goto LABEL_631;
    if (v355 - 65 > 0xFFFFFFBF)
    {
      MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
      v363 = (AudioBufferList *)((char *)&v517 - v362);
      bzero((char *)&v517 - v362, v364);
      v363->mNumberBuffers = v355;
      memcpy(v363->mBuffers, a5->mBuffers, 16 * v355);
      LODWORD(v561.mSampleTime) = 512;
      DynamicsDSPChannelCount = AudioUnitProcess(v361, (AudioUnitRenderActionFlags *)&v561, &v554, *((_DWORD *)this + 121), v363);
      if (v546[3409] || v546[3410])
        DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x38u, v535, v363, &v554);
      v356 = *((_QWORD *)this + 1104);
LABEL_631:
      if ((v356 & 0x2000000000) != 0
        && (*((_BYTE *)this + 8844) & 0x20) != 0
        && (DynamicsDSPChannelCount = *((_QWORD *)this + 474)) != 0)
      {
        if (v355 == a5->mNumberBuffers)
        {
          v561 = v554;
          LODWORD(v560.mSampleTime) = 512;
          DynamicsDSPChannelCount = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
        }
        else
        {
          v397 = (AudioBufferList *)*((_QWORD *)this + 25);
          if (v397->mNumberBuffers)
          {
            v398 = 0;
            v399 = 16;
            do
            {
              memcpy(*(void **)((char *)&v397->mNumberBuffers + v399), a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
              ++v398;
              v397 = (AudioBufferList *)*((_QWORD *)this + 25);
              v399 += 16;
            }
            while (v398 < v397->mNumberBuffers);
            DynamicsDSPChannelCount = *((_QWORD *)this + 474);
          }
          v561 = v554;
          v550.mNumberBuffers = 512;
          DynamicsDSPChannelCount = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, &v550.mNumberBuffers, &v561, *((_DWORD *)this + 121), v397);
          if ((*((_BYTE *)this + 8836) & 0x40) != 0
            && (*((_BYTE *)this + 8844) & 0x40) != 0
            && (DynamicsDSPChannelCount = *((_QWORD *)this + 475)) != 0)
          {
            v400 = *((_DWORD *)this + 576);
            if (v400 != *((_DWORD *)this + 578))
            {
              AudioUnitSetParameter((AudioUnit)DynamicsDSPChannelCount, 0, 0, 0, (float)v400, 0);
              DynamicsDSPChannelCount = *((_QWORD *)this + 475);
            }
            *(_QWORD *)&v563.mNumberBuffers = *((_QWORD *)this + 25);
            *(_QWORD *)&v562.mNumberBuffers = a5;
            v560 = v554;
            LODWORD(v556) = 512;
            DynamicsDSPChannelCount = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v556, &v560, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v563, 1u, (AudioBufferList **)&v562);
            if (v546[3409] || v546[3410])
              DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v535, a5, &v560);
          }
          else if (a5->mNumberBuffers)
          {
            v401 = 0;
            v402 = &a5->mBuffers[0].mData;
            do
            {
              v403 = (unsigned int *)*((_QWORD *)this + 25);
              if (v401 >= *v403)
                v404 = 0;
              else
                v404 = v401;
              DynamicsDSPChannelCount = (uint64_t)memcpy(*v402, *(const void **)&v403[4 * v404 + 4], *((unsigned int *)v402 - 1));
              ++v401;
              v402 += 2;
            }
            while (v401 < a5->mNumberBuffers);
          }
        }
      }
      else if ((v356 & 0x20000000000) != 0
             && (v365 = *((_QWORD *)this + 1105), (v365 & 0x20000000000) != 0)
             && *((_QWORD *)this + 478))
      {
        if ((v356 & v365 & 0x40000000000) != 0 && *((_QWORD *)this + 479))
        {
          if (v355 - 65 <= 0xFFFFFFBF)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v561.mSampleTime) = 136315394;
              *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(v561.mHostTime) = 1024;
              *(_DWORD *)((char *)&v561.mHostTime + 6) = 988;
              _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
            }
            v513 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v513 = &off_1E69EE218;
            v513[2] = -50;
          }
          MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
          v367 = (UInt32 *)((char *)&v517 - v366);
          bzero((char *)&v517 - v366, v368);
          v369 = 0;
          *v367 = v355;
          v370 = *((_QWORD *)this + 25);
          v371 = 16 * v355;
          do
          {
            v372 = memcpy(*(void **)(v370 + v369 + 16), a5->mBuffers[v369 / 0x10].mData, *(unsigned int *)(v370 + v369 + 12));
            v370 = *((_QWORD *)this + 25);
            *(_OWORD *)&v367[v369 / 4 + 2] = *(_OWORD *)(v370 + v369 + 8);
            v369 += 16;
          }
          while (v371 != v369);
          *(_QWORD *)&v560.mSampleTime = v367;
          v373 = *((unsigned int *)this + 1073);
          if ((v373 - 65) < 0xFFFFFFC0)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v561.mSampleTime) = 136315394;
              *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(v561.mHostTime) = 1024;
              *(_DWORD *)((char *)&v561.mHostTime + 6) = 1003;
              _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
            }
            v514 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v514 = &off_1E69EE218;
            v514[2] = -50;
          }
          MEMORY[0x1E0C80A78](v372);
          v375 = (AudioBufferList *)((char *)&v517 - v374);
          bzero((char *)&v517 - v374, v376);
          v377 = 0;
          v375->mNumberBuffers = v373;
          v378 = a5 + 1;
          do
          {
            v379 = *(AudioBuffer *)&v378->mNumberBuffers;
            v378 = (AudioBufferList *)((char *)v378 + 32);
            v375->mBuffers[v377++] = v379;
          }
          while (v373 != v377);
          *(_QWORD *)&v563.mNumberBuffers = v375;
          if (*((_BYTE *)this + 2245))
          {
            v380 = *((_DWORD *)this + 576);
            if (v380 != *((_DWORD *)this + 578))
              AudioUnitSetParameter(*((AudioUnit *)this + 479), 0, 0, 0, (float)v380, 0);
          }
          v561 = v554;
          v562.mNumberBuffers = 512;
          AudioUnitProcessMultiple(*((AudioUnit *)this + 479), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
          if (v546[3409] || v546[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v535, v375, &v561);
          v381 = &a5->mBuffers[0].mData;
          do
          {
            memcpy(*v381, v381[2], *((unsigned int *)v381 - 1));
            v381 += 4;
            --v373;
          }
          while (v373);
        }
        else if (!*((_BYTE *)this + 2244) && a5->mNumberBuffers >= 2)
        {
          v395 = (void **)a5[1].mBuffers;
          v396 = 1;
          do
          {
            memcpy(*v395, a5->mBuffers[0].mData, *((unsigned int *)v395 - 1));
            ++v396;
            v395 += 2;
          }
          while (v396 < a5->mNumberBuffers);
        }
        v561 = v554;
        LODWORD(v560.mSampleTime) = 512;
        DynamicsDSPChannelCount = AudioUnitProcess(*((AudioUnit *)this + 478), (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
      }
      else if ((v356 & 0x2000000000000000) != 0 && (*((_BYTE *)this + 8847) & 0x20) != 0)
      {
        v388 = a5->mNumberBuffers;
        if (a5->mNumberBuffers >= 2)
        {
          if (*((_DWORD *)this + 79) == 1)
          {
            DynamicsDSPChannelCount = (uint64_t)memcpy(*(void **)&a5[1].mBuffers[0].mNumberChannels, a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
            v388 = a5->mNumberBuffers;
          }
          if (v388 >= 3)
          {
            v389 = (void **)&a5[2];
            v390 = 2;
            do
            {
              bzero(*v389, *((unsigned int *)v389 - 1));
              ++v390;
              v389 += 2;
            }
            while (v390 < a5->mNumberBuffers);
          }
        }
      }
      else if (!*((_BYTE *)this + 2244))
      {
        v382 = *((_DWORD *)this + 79);
        v383 = v382 <= 1 ? 1 : v382;
        if (v383 < a5->mNumberBuffers)
        {
          v384 = (char *)a5 + 16 * (v383 - 1);
          v385 = (const void **)(v384 + 16);
          v386 = (unsigned int *)(v384 + 12);
          v387 = 16 * v383 + 16;
          do
          {
            DynamicsDSPChannelCount = (uint64_t)memcpy(*(void **)((char *)&a5->mNumberBuffers + v387), *v385, *v386);
            ++v383;
            v387 += 16;
          }
          while (v383 < a5->mNumberBuffers);
        }
      }
      v405 = *((_QWORD *)this + 1104);
      if ((v405 & 0x100000000000000) == 0
        || (v406 = *((_QWORD *)this + 1105), (v406 & 0x100000000000000) == 0)
        || !*((_QWORD *)this + 493))
      {
        if ((v405 & 0x200000000000000) == 0
          || (v406 = *((_QWORD *)this + 1105), (v406 & 0x200000000000000) == 0)
          || !*((_QWORD *)this + 494))
        {
          if ((v405 & 0x400000000000000) == 0
            || (v406 = *((_QWORD *)this + 1105), (v406 & 0x400000000000000) == 0)
            || !*((_QWORD *)this + 495))
          {
            v423 = 0;
LABEL_739:
            if ((v405 & 0x10000000000000) != 0 && (*((_BYTE *)this + 8846) & 0x10) != 0)
            {
              DynamicsDSPChannelCount = *((_QWORD *)this + 489);
              if (DynamicsDSPChannelCount)
              {
                *(_QWORD *)&v563.mNumberBuffers = a5;
                *(_QWORD *)&v562.mNumberBuffers = a5;
                v561 = v554;
                v550.mNumberBuffers = 512;
                DynamicsDSPChannelCount = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, &v550.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v563, 1u, (AudioBufferList **)&v562);
                if ((*((_BYTE *)this + 8838) & 0x20) != 0 && (*((_BYTE *)this + 8846) & 0x20) != 0)
                {
                  DynamicsDSPChannelCount = *((_QWORD *)this + 490);
                  if (DynamicsDSPChannelCount)
                  {
                    v560 = v554;
                    LODWORD(v556) = 512;
                    DynamicsDSPChannelCount = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v556, &v560, *((_DWORD *)this + 121), a5);
                  }
                }
                if (v546[3409] || v546[3410])
                  DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Cu, *((unsigned int *)this + 121), a5, &v561);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x40000000000000) != 0 && (*((_BYTE *)this + 8846) & 0x40) != 0)
            {
              DynamicsDSPChannelCount = *((_QWORD *)this + 491);
              if (DynamicsDSPChannelCount)
              {
                v561 = v554;
                LODWORD(v560.mSampleTime) = 512;
                DynamicsDSPChannelCount = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x100000000000000) != 0 && (*((_BYTE *)this + 8847) & 1) != 0)
            {
              DynamicsDSPChannelCount = *((_QWORD *)this + 493);
              if (DynamicsDSPChannelCount)
              {
                if (*((_DWORD *)this + 1128) == 1 && (v424 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
                {
                  ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v424);
                  DynamicsDSPChannelCount = *((_QWORD *)this + 493);
                  v425 = 2;
                }
                else
                {
                  v425 = 1;
                }
                *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v554.mSampleTime;
                *(_OWORD *)&v561.mRateScalar = *(_OWORD *)&v554.mRateScalar;
                *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v554.mSMPTETime.mSubframes;
                v426 = *((_QWORD *)this + 197);
                *(_QWORD *)&v560.mSampleTime = a5;
                v560.mHostTime = v426;
                *(_QWORD *)&v563.mNumberBuffers = a5;
                *(_OWORD *)&v561.mSMPTETime.mHours = *(_OWORD *)&v554.mSMPTETime.mHours;
                v562.mNumberBuffers = 512;
                DynamicsDSPChannelCount = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), v425, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                if (v546[3409] || v546[3410])
                  DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v535, a5, &v561);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x200000000000000) != 0 && (*((_BYTE *)this + 8847) & 2) != 0)
            {
              v427 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 494);
              if (v427)
              {
                v428 = *((unsigned int *)this + 1073);
                if ((v428 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v561.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
                    WORD2(v561.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v561.mHostTime + 6) = 1174;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                  }
                  v509 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v509 = &off_1E69EE218;
                  v509[2] = -50;
                }
                MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
                v430 = (AudioBufferList *)((char *)&v517 - v429);
                bzero((char *)&v517 - v429, v431);
                v432 = 0;
                v430->mNumberBuffers = v428;
                v433 = a5->mBuffers;
                do
                {
                  v434 = *v433;
                  v433 += 2;
                  v430->mBuffers[v432++] = v434;
                }
                while (v428 != v432);
                *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v554.mSampleTime;
                *(_OWORD *)&v561.mRateScalar = *(_OWORD *)&v554.mRateScalar;
                *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v554.mSMPTETime.mSubframes;
                v435 = *((_QWORD *)this + 197);
                *(_QWORD *)&v560.mSampleTime = v430;
                v560.mHostTime = v435;
                *(_QWORD *)&v563.mNumberBuffers = v430;
                *(_OWORD *)&v561.mSMPTETime.mHours = *(_OWORD *)&v554.mSMPTETime.mHours;
                v562.mNumberBuffers = 512;
                DynamicsDSPChannelCount = AudioUnitProcessMultiple(v427, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                if (v546[3409] || v546[3410])
                  DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v535, v430, &v561);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x400000000000000) != 0 && (*((_BYTE *)this + 8847) & 4) != 0 && *((_QWORD *)this + 495))
            {
              if (*((_DWORD *)this + 1128) == 1 && (v436 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
              {
                DynamicsDSPChannelCount = (uint64_t)ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v436);
                v437 = 2;
              }
              else
              {
                v437 = 1;
              }
              v438 = *((unsigned int *)this + 1073);
              if ((v438 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v561.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
                  WORD2(v561.mHostTime) = 1024;
                  *(_DWORD *)((char *)&v561.mHostTime + 6) = 1199;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                }
                v510 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v510 = &off_1E69EE218;
                v510[2] = -50;
              }
              MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
              v440 = (AudioBufferList *)((char *)&v517 - v439);
              bzero((char *)&v517 - v439, v441);
              v442 = 0;
              v440->mNumberBuffers = v438;
              v443 = a5 + 1;
              do
              {
                v444 = *(AudioBuffer *)&v443->mNumberBuffers;
                v443 = (AudioBufferList *)((char *)v443 + 32);
                v440->mBuffers[v442++] = v444;
              }
              while (v438 != v442);
              *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v554.mSampleTime;
              *(_OWORD *)&v561.mRateScalar = *(_OWORD *)&v554.mRateScalar;
              *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v554.mSMPTETime.mSubframes;
              v445 = *((_QWORD *)this + 197);
              *(_QWORD *)&v560.mSampleTime = v440;
              v560.mHostTime = v445;
              *(_QWORD *)&v563.mNumberBuffers = v440;
              *(_OWORD *)&v561.mSMPTETime.mHours = *(_OWORD *)&v554.mSMPTETime.mHours;
              v562.mNumberBuffers = 512;
              AudioUnitProcessMultiple(*((AudioUnit *)this + 495), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), v437, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
              if (v546[3409] || v546[3410])
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v535, v440, &v561);
              v405 = *((_QWORD *)this + 1104);
            }
            if ((v405 & 0x800000000000000) != 0 && ((*((_BYTE *)this + 8847) & 8) != 0 || *((_BYTE *)this + 472)))
            {
              LODWORD(v561.mSampleTime) = 1065353216;
              LODWORD(v560.mSampleTime) = 1065353216;
              if ((*((_BYTE *)this + 2083) || *((_BYTE *)this + 472)) && (v446 = *((float *)this + 1131), v446 != 0.0))
              {
                v447 = __exp10f(v446 / 20.0);
                *(float *)&v560.mSampleTime = v447;
                *(float *)&v561.mSampleTime = v447;
              }
              else
              {
                v448 = *((float *)this + 1129);
                if (v448 >= -300.0)
                {
                  if (v448 == 0.0)
                  {
                    v447 = 1.0;
                  }
                  else
                  {
                    v449 = v448 / 20.0;
                    v450 = v448 <= 60.0;
                    v451 = 3.0;
                    if (v450)
                      v451 = v449;
                    v447 = __exp10f(v451);
                    *(float *)&v561.mSampleTime = v447;
                  }
                }
                else
                {
                  LODWORD(v561.mSampleTime) = 0;
                  v447 = 0.0;
                }
                v452 = *((float *)this + 1130);
                if (v452 >= -300.0)
                {
                  if (v452 != 0.0)
                  {
                    v453 = v452 / 20.0;
                    if (v452 > 60.0)
                      v453 = 3.0;
                    LODWORD(v560.mSampleTime) = __exp10f(v453);
                    v447 = *(float *)&v561.mSampleTime;
                  }
                }
                else
                {
                  LODWORD(v560.mSampleTime) = 0;
                }
              }
              if (v447 == 0.0)
              {
                bzero(a5->mBuffers[0].mData, 4 * *((unsigned int *)this + 121));
                v30 = v521;
              }
              else
              {
                v30 = v521;
                if (v447 != 1.0)
                  vDSP_vsmul((const float *)a5->mBuffers[0].mData, 1, (const float *)&v561, (float *)a5->mBuffers[0].mData, 1, *((unsigned int *)this + 121));
              }
              if (a5->mNumberBuffers >= 2)
              {
                v454 = 1;
                v455 = 32;
                do
                {
                  if (*(float *)&v560.mSampleTime == 0.0)
                  {
                    bzero(*(void **)((char *)&a5->mNumberBuffers + v455), 4 * *((unsigned int *)this + 121));
                  }
                  else if (*(float *)&v560.mSampleTime != 1.0)
                  {
                    vDSP_vsmul(*(const float **)((char *)&a5->mNumberBuffers + v455), 1, (const float *)&v560, *(float **)((char *)&a5->mNumberBuffers + v455), 1, *((unsigned int *)this + 121));
                  }
                  ++v454;
                  v455 += 16;
                }
                while (v454 < a5->mNumberBuffers);
              }
              v405 = *((_QWORD *)this + 1104);
            }
            if ((v405 & 0x80000000000) != 0 && (*((_BYTE *)this + 8845) & 8) != 0 && *((_QWORD *)this + 480))
            {
              v456 = *(float **)(*((_QWORD *)this + 2128) + 16);
              v457 = *((unsigned int *)this + 121);
              if (*v518)
              {
                v458 = *((unsigned int *)this + 127);
                v459 = 0.0;
                if (v457 > v458)
                  vDSP_vclr(&v456[v458], 1, (v457 - v458));
              }
              else
              {
                v459 = 1.0;
                vDSP_vclr(v456, 1, v457);
              }
              AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, v459, 0);
              if ((*((_BYTE *)this + 4662) & 0x80) != 0 && (*((_BYTE *)this + 4678) & 0x80) != 0)
              {
                v460 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402);
                if (v460)
                {
                  LODWORD(v561.mSampleTime) = 0;
                  AudioUnitGetParameter(v460, 9u, 0, 0, (AudioUnitParameterValue *)&v561);
                  AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v561.mSampleTime, 0);
                }
              }
              v461 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 480);
              v462 = atomic_load(VoiceProcessorV4::mIsOnEar);
              AudioUnitSetParameter(v461, 0x16u, 0, 0, (float)v462, 0);
              *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v554.mSampleTime;
              *(_OWORD *)&v561.mRateScalar = *(_OWORD *)&v554.mRateScalar;
              *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v554.mSMPTETime.mSubframes;
              v463 = (const AudioBufferList *)*((_QWORD *)this + 2128);
              *(_QWORD *)&v560.mSampleTime = a5;
              v560.mHostTime = (UInt64)v463;
              *(_OWORD *)&v561.mSMPTETime.mHours = *(_OWORD *)&v554.mSMPTETime.mHours;
              v562.mNumberBuffers = 512;
              *(_QWORD *)&v563.mNumberBuffers = a5;
              v464 = *((unsigned int *)this + 129);
              if ((v546[3409] || v546[3410])
                && (VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v464, a5, &v561),
                    v464 = *((unsigned int *)this + 129),
                    v463 = (const AudioBufferList *)*((_QWORD *)this + 2128),
                    v546[3409])
                || v546[3410])
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v464, v463, &v561);
              }
              AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 2u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
              if (v546[3409] || v546[3410])
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, *((unsigned int *)this + 129), a5, &v561);
              AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, 0.0, 0);
              v405 = *((_QWORD *)this + 1104);
            }
            if ((v405 & 0x100000000000) != 0 && (*((_BYTE *)this + 8845) & 0x10) != 0)
            {
              v465 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 481);
              if (v465)
              {
                v466 = *(_OWORD *)&v524->mRateScalar;
                *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v524->mSampleTime;
                *(_OWORD *)&v561.mRateScalar = v466;
                v467 = *(_OWORD *)&v524->mSMPTETime.mHours;
                *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v524->mSMPTETime.mSubframes;
                *(_OWORD *)&v561.mSMPTETime.mHours = v467;
                LODWORD(v560.mSampleTime) = 512;
                AudioUnitProcess(v465, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x200000000000) != 0 && (*((_BYTE *)this + 8845) & 0x20) != 0)
            {
              v468 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 482);
              if (v468)
              {
                *(_QWORD *)&v560.mSampleTime = a5;
                *(_QWORD *)&v563.mNumberBuffers = a5;
                v469 = *(_OWORD *)&v524->mRateScalar;
                *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v524->mSampleTime;
                *(_OWORD *)&v561.mRateScalar = v469;
                v470 = *(_OWORD *)&v524->mSMPTETime.mHours;
                *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v524->mSMPTETime.mSubframes;
                *(_OWORD *)&v561.mSMPTETime.mHours = v470;
                v562.mNumberBuffers = 512;
                AudioUnitProcessMultiple(v468, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x1000000000000000) != 0 && (*((_BYTE *)this + 8847) & 0x10) != 0)
            {
              v471 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 497);
              if (v471)
              {
                v561 = v554;
                LODWORD(v560.mSampleTime) = 512;
                AudioUnitProcess(v471, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x400000000000) != 0 && (*((_BYTE *)this + 8845) & 0x40) != 0)
            {
              v472 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 483);
              if (v472)
              {
                v561 = v554;
                LODWORD(v560.mSampleTime) = 512;
                AudioUnitProcess(v472, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x800000000000) != 0)
              v473 = v423;
            else
              v473 = 1;
            if ((v473 & 1) != 0)
            {
              v474 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
            }
            else
            {
              v474 = (char *)&xmmword_1EF135FF8 + 8;
              if ((*((_BYTE *)this + 8845) & 0x80) != 0)
              {
                v475 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 484);
                if (v475)
                {
                  v561 = v554;
                  LODWORD(v560.mSampleTime) = 512;
                  AudioUnitProcess(v475, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                  if (v546[3409] || v546[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v561);
                  v405 = *((_QWORD *)this + 1104);
                }
              }
            }
            if ((v405 & 0x4000000000000) != 0 && (*((_BYTE *)this + 8846) & 4) != 0)
            {
              v476 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 487);
              if (v476)
              {
                v561 = v554;
                LODWORD(v560.mSampleTime) = 512;
                AudioUnitProcess(v476, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                if (v546[3409] || v546[3410])
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, *((unsigned int *)this + 121), a5, &v561);
                v405 = *((_QWORD *)this + 1104);
              }
            }
            if ((v405 & 0x8000000000000) != 0 && (*((_BYTE *)this + 8846) & 8) != 0)
            {
              v477 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 488);
              if (v477)
              {
                v478 = *((_DWORD *)this + 18);
                if (v478 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v478) & 1) != 0)
                {
                  v561 = v554;
                  LODWORD(v560.mSampleTime) = 512;
                  AudioUnitProcess(v477, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                  if (v546[3409] || v546[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, *((unsigned int *)this + 121), a5, &v561);
                }
              }
            }
            if (v546[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v535, a5), v546[3409])
              || v546[3410])
            {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v535, a5, &v554);
            }
            v479 = *((_QWORD *)this + 1995);
            if (AudioIssueDetectorLibraryLoader(void)::once != -1)
              dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_8124);
            if (*((_QWORD *)v474 + 499))
              (*((void (**)(uint64_t, uint64_t, _QWORD, AudioBufferList *, uint64_t, AudioTimeStamp *))v474 + 499))(v479, 68, 0, a5, v535, &v554);
            if (*((_DWORD *)this + 1127) == 1 && !v546[3688])
              VoiceProcessorV2::AppendReferenceSignal(this, a5, (AudioBufferList *)&v554, 0);
            if (v546[3409])
              VoiceProcessorV2::LoopBackRead(this, v535, a5);
            goto LABEL_897;
          }
        }
      }
      if ((v405 & v406 & 0x800000000000) != 0)
      {
        DynamicsDSPChannelCount = *((_QWORD *)this + 484);
        if (DynamicsDSPChannelCount)
        {
          v561 = v554;
          LODWORD(v560.mSampleTime) = 512;
          DynamicsDSPChannelCount = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
          if (v546[3409] || v546[3410])
            DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v561);
          v405 = *((_QWORD *)this + 1104);
        }
      }
      if ((v405 & 0x1000000000000) != 0 && (*((_BYTE *)this + 8846) & 1) != 0)
      {
        v407 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 485);
        if (v407)
        {
          v408 = *((unsigned int *)this + 1073);
          if ((v408 - 65) <= 0xFFFFFFBF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_983;
            LODWORD(v561.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(v561.mHostTime) = 1024;
            *(_DWORD *)((char *)&v561.mHostTime + 6) = 1094;
            v511 = MEMORY[0x1E0C81028];
            goto LABEL_982;
          }
          MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
          v410 = (AudioBufferList *)((char *)&v517 - v409);
          bzero((char *)&v517 - v409, v411);
          v412 = 0;
          v410->mNumberBuffers = v408;
          v413 = a5->mBuffers;
          do
          {
            v414 = *v413;
            v413 += 2;
            v410->mBuffers[v412++] = v414;
          }
          while (v408 != v412);
          v561 = v554;
          LODWORD(v560.mSampleTime) = 512;
          DynamicsDSPChannelCount = AudioUnitProcess(v407, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), v410);
          if (v546[3409] || v546[3410])
            DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, *((unsigned int *)this + 121), v410, &v561);
          v405 = *((_QWORD *)this + 1104);
        }
      }
      if ((v405 & 0x2000000000000) == 0
        || (*((_BYTE *)this + 8846) & 2) == 0
        || (v415 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 486)) == 0)
      {
LABEL_737:
        v423 = 1;
        goto LABEL_739;
      }
      v416 = *((unsigned int *)this + 1073);
      if ((v416 - 65) > 0xFFFFFFBF)
      {
        MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
        v418 = (AudioBufferList *)((char *)&v517 - v417);
        bzero((char *)&v517 - v417, v419);
        v420 = 0;
        v418->mNumberBuffers = v416;
        v421 = a5 + 1;
        do
        {
          v422 = *(AudioBuffer *)&v421->mNumberBuffers;
          v421 = (AudioBufferList *)((char *)v421 + 32);
          v418->mBuffers[v420++] = v422;
        }
        while (v416 != v420);
        v561 = v554;
        LODWORD(v560.mSampleTime) = 512;
        DynamicsDSPChannelCount = AudioUnitProcess(v415, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), v418);
        if (v546[3409] || v546[3410])
          DynamicsDSPChannelCount = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, *((unsigned int *)this + 121), v418, &v561);
        v405 = *((_QWORD *)this + 1104);
        goto LABEL_737;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_983:
        v512 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v512 = &off_1E69EE218;
        v512[2] = -50;
      }
      LODWORD(v561.mSampleTime) = 136315394;
      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
      WORD2(v561.mHostTime) = 1024;
      *(_DWORD *)((char *)&v561.mHostTime + 6) = 1108;
      v511 = MEMORY[0x1E0C81028];
LABEL_982:
      _os_log_impl(&dword_1B5ED0000, v511, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
      goto LABEL_983;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_971:
      v508 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v508 = &off_1E69EE218;
      v508[2] = -50;
    }
    LODWORD(v561.mSampleTime) = 136315394;
    *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
    WORD2(v561.mHostTime) = 1024;
    *(_DWORD *)((char *)&v561.mHostTime + 6) = 931;
    v507 = MEMORY[0x1E0C81028];
LABEL_970:
    _os_log_impl(&dword_1B5ED0000, v507, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
    goto LABEL_971;
  }
  v179 = 0;
  LODWORD(v544) = 0;
  v522 = (VoiceProcessorV4 *)((char *)this + 2744);
  p_mHostTime = &v560.mHostTime;
  v180 = (float)v535;
  v517 = v557;
  v528 = &v167->mBuffers[0].mData;
  v529 = (uint64_t *)(v150 + 4);
  v526 = &v168->mBuffers[0].mData;
  v527 = &v166->mBuffers[0].mData;
  v525 = &a5->mBuffers[0].mData;
  v181 = 1;
  v520 = -5000.0;
  while (1)
  {
    if ((*((_BYTE *)this + 300) & 0x20) != 0)
    {
      v185 = *((_DWORD *)this + 79);
      if ((v185 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v561.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v561.mHostTime) = 1024;
          *(_DWORD *)((char *)&v561.mHostTime + 6) = 491;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
        }
        v503 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v503 = &off_1E69EE218;
        v503[2] = -50;
      }
      MEMORY[0x1E0C80A78](v161);
      v184 = (AudioUnitParameterValue *)((char *)&v517 - v186);
      bzero((char *)&v517 - v186, v187);
      v183 = v542;
    }
    else
    {
      MEMORY[0x1E0C80A78](v161);
      v184 = (AudioUnitParameterValue *)&v515;
      v515 = 0;
      v516 = 0uLL;
      v185 = 1;
    }
    *(_DWORD *)v184 = v185;
    if (v183)
    {
      v188 = v183->mNumberBuffers;
      if (v183->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v561.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v561.mHostTime) = 1024;
          *(_DWORD *)((char *)&v561.mHostTime + 6) = 493;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
        }
        v496 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v496 = &off_1E69EE218;
        v496[2] = -50;
      }
    }
    else
    {
      v188 = 1;
    }
    MEMORY[0x1E0C80A78](v182);
    v190 = (int *)((char *)&v517 - v189);
    bzero((char *)&v517 - v189, v191);
    v540 = v190;
    *v190 = v188;
    if (v543)
    {
      v193 = v543->mNumberBuffers;
      if (v543->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v561.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v561.mHostTime) = 1024;
          *(_DWORD *)((char *)&v561.mHostTime + 6) = 495;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
        }
        v498 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v498 = &off_1E69EE218;
        v498[2] = -50;
      }
    }
    else
    {
      v193 = 1;
    }
    v541 = v184;
    MEMORY[0x1E0C80A78](v192);
    v195 = (UInt32 *)((char *)&v517 - v194);
    bzero((char *)&v517 - v194, v196);
    v539 = v195;
    *v195 = v193;
    v533 = v179;
    if (v545)
    {
      v198 = v545->mNumberBuffers;
      if (v545->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v561.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v561.mHostTime) = 1024;
          *(_DWORD *)((char *)&v561.mHostTime + 6) = 497;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
        }
        v500 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v500 = &off_1E69EE218;
        v500[2] = -50;
      }
    }
    else
    {
      v198 = 1;
    }
    MEMORY[0x1E0C80A78](v197);
    v200 = (UInt32 *)((char *)&v517 - v199);
    bzero((char *)&v517 - v199, v201);
    *v200 = v198;
    v203 = (_DWORD *)*((_QWORD *)this + 203);
    if (!*((_BYTE *)this + 2244))
      goto LABEL_374;
    if (!v203)
      goto LABEL_377;
    if (*v203)
    {
      v204 = 0;
      v205 = (void **)(v203 + 4);
      do
      {
        bzero(*v205, *((unsigned int *)v205 - 1));
        ++v204;
        v205 += 2;
      }
      while (v204 < *v203);
      v203 = (_DWORD *)*((_QWORD *)this + 203);
LABEL_374:
      if (!v203)
      {
LABEL_377:
        LODWORD(v16) = 1;
        goto LABEL_378;
      }
    }
    LODWORD(v16) = *v203;
    if ((*v203 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v561.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v561.mHostTime) = 1024;
        *(_DWORD *)((char *)&v561.mHostTime + 6) = 503;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
      }
      v502 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v502 = &off_1E69EE218;
      v502[2] = -50;
    }
LABEL_378:
    MEMORY[0x1E0C80A78](v202);
    v207 = (UInt32 *)((char *)&v517 - v206);
    bzero((char *)&v517 - v206, v208);
    v538 = v207;
    *v207 = v16;
    v210 = a5->mNumberBuffers;
    if ((v210 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v561.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v561.mHostTime) = 1024;
        *(_DWORD *)((char *)&v561.mHostTime + 6) = 505;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
      }
      v493 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v493 = &off_1E69EE218;
      v493[2] = -50;
    }
    MEMORY[0x1E0C80A78](v209);
    v212 = (int *)((char *)&v517 - v211);
    bzero((char *)&v517 - v211, v213);
    *v212 = v210;
    v214 = *(unsigned int *)v541;
    if ((_DWORD)v214)
    {
      v215 = 4 * *((_DWORD *)this + 129);
      v216 = v544;
      v217 = v541 + 4;
      v218 = v529;
      do
      {
        *((_DWORD *)v217 - 2) = 1;
        *((_DWORD *)v217 - 1) = v215;
        v219 = *v218;
        v218 += 2;
        *(_QWORD *)v217 = v219 + 4 * v216;
        v217 += 4;
        --v214;
      }
      while (v214);
    }
    v220 = *v540;
    v222 = v542;
    v221 = v543;
    v223 = v545;
    if ((_DWORD)v220)
    {
      v224 = 4 * *((_DWORD *)this + 129);
      v225 = v544;
      v226 = (uint64_t *)(v540 + 4);
      v227 = v528;
      do
      {
        *((_DWORD *)v226 - 2) = 1;
        *((_DWORD *)v226 - 1) = v224;
        if (v222)
          v228 = (uint64_t)*v227 + 4 * v225;
        else
          v228 = 0;
        *v226 = v228;
        v226 += 2;
        v227 += 2;
        --v220;
      }
      while (v220);
    }
    v229 = *v539;
    if ((_DWORD)v229)
    {
      v230 = 4 * *((_DWORD *)this + 129);
      v231 = v544;
      v232 = (uint64_t *)(v539 + 4);
      v233 = v527;
      do
      {
        *((_DWORD *)v232 - 2) = 1;
        *((_DWORD *)v232 - 1) = v230;
        if (v221)
          v234 = (uint64_t)*v233 + 4 * v231;
        else
          v234 = 0;
        *v232 = v234;
        v232 += 2;
        v233 += 2;
        --v229;
      }
      while (v229);
    }
    v235 = *v200;
    if ((_DWORD)v235)
    {
      v236 = 4 * *((_DWORD *)this + 129);
      v237 = v544;
      v238 = (uint64_t *)(v200 + 4);
      v239 = v526;
      do
      {
        *((_DWORD *)v238 - 2) = 1;
        *((_DWORD *)v238 - 1) = v236;
        if (v223)
          v240 = (uint64_t)*v239 + 4 * v237;
        else
          v240 = 0;
        *v238 = v240;
        v238 += 2;
        v239 += 2;
        --v235;
      }
      while (v235);
    }
    if ((_DWORD)v210)
    {
      v241 = 4 * *((_DWORD *)this + 129);
      v242 = v544;
      v243 = (uint64_t *)(v212 + 4);
      v244 = v525;
      do
      {
        *((_DWORD *)v243 - 2) = 1;
        *((_DWORD *)v243 - 1) = v241;
        if (a5)
          v245 = (uint64_t)*v244 + 4 * v242;
        else
          v245 = 0;
        *v243 = v245;
        v243 += 2;
        v244 += 2;
        --v210;
      }
      while (v210);
    }
    if ((_DWORD)v16)
    {
      v246 = 4 * *((_DWORD *)this + 129);
      v247 = v544;
      v248 = v16;
      v249 = v538 + 4;
      v250 = v203 + 4;
      do
      {
        *(v249 - 2) = 1;
        *(v249 - 1) = v246;
        if (v203)
          v251 = *v250 + 4 * v247;
        else
          v251 = 0;
        *(_QWORD *)v249 = v251;
        v249 += 4;
        v250 += 2;
        --v248;
      }
      while (v248);
    }
    if (v223 && *((_BYTE *)this + 2244))
    {
      CopyAllBuffersABL(v538, v545);
      v222 = v542;
    }
    if (v222)
      v252 = (AudioBufferList *)v540;
    else
      v252 = 0;
    MonoABL = GetMonoABL(v252, &v563, *((unsigned int *)this + 129));
    if (v543)
      v253 = (AudioBufferList *)v539;
    else
      v253 = 0;
    v536 = GetMonoABL(v253, &v562, *((unsigned int *)this + 129));
    if (v545)
      v254 = (AudioBufferList *)v200;
    else
      v254 = 0;
    v255 = GetMonoABL(v254, &v550, *((unsigned int *)this + 129));
    v256 = (*(uint64_t (**)(VoiceProcessorV4 *))(*(_QWORD *)this + 112))(this);
    v532 = v255;
    if (v256 >= 7)
    {
      v257 = 0;
      *(_QWORD *)&v561.mSampleTime = 10;
      v561.mHostTime = (UInt64)v541;
      *(_QWORD *)&v561.mRateScalar = 11;
      v561.mWordClockTime = (UInt64)v255;
      *(_QWORD *)&v561.mSMPTETime.mSubframes = 12;
      *(_QWORD *)&v561.mSMPTETime.mType = MonoABL;
      *(_QWORD *)&v561.mSMPTETime.mHours = 13;
      *(_QWORD *)&v561.mFlags = v536;
      do
      {
        v258 = (unsigned int *)&v561 + 4 * v257;
        v259 = *v258;
        v260 = (unsigned int *)*((_QWORD *)v258 + 1);
        if (!v260)
        {
          v260 = (unsigned int *)*((_QWORD *)this + 202);
          if (*v260)
          {
            v16 = 0;
            a5 = (AudioBufferList *)(v260 + 4);
            do
            {
              bzero(*(void **)&a5->mNumberBuffers, HIDWORD(a5[-1].mBuffers[0].mData));
              ++v16;
              a5 = (AudioBufferList *)((char *)a5 + 16);
            }
            while (v16 < *v260);
            v260 = (unsigned int *)*((_QWORD *)this + 202);
          }
        }
        v261 = VoiceProcessorV2::VPUseAUInProcess(this, v259, 0);
        if (v260)
          v262 = v261;
        else
          v262 = 0;
        if (v262)
        {
          v560 = v564;
          LODWORD(v556) = 512;
          AudioUnitProcess(*((AudioUnit *)this + v259 + 437), (AudioUnitRenderActionFlags *)&v556, &v560, *((_DWORD *)this + 129), (AudioBufferList *)v260);
        }
        ++v257;
      }
      while (v257 != 4);
      v255 = v532;
    }
    v263 = *((_QWORD *)this + 1104);
    if ((v263 & 0x40000000) == 0 || (v264 = *((_QWORD *)this + 1105), (v264 & 0x40000000) == 0))
    {
LABEL_440:
      v265 = 0;
      goto LABEL_441;
    }
    if (*((_QWORD *)this + 467))
    {
      v321 = v263 & v264;
      v265 = 0;
      if (v321 < 0)
      {
        if (!*((_QWORD *)this + 468))
          goto LABEL_440;
        v322 = (uint64_t *)v522;
        if (!vp::Audio_Buffer::get_audio_buffer_list(v522))
          goto LABEL_440;
        vp::Audio_Buffer::prepare(v322, *((_DWORD *)this + 129));
        audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v322);
        if (*audio_buffer_list)
        {
          v324 = audio_buffer_list;
          v325 = 0;
          v16 = (unint64_t)(audio_buffer_list + 4);
          do
          {
            bzero(*(void **)v16, *(unsigned int *)(v16 - 4));
            ++v325;
            v16 += 16;
          }
          while (v325 < *v324);
        }
        v326 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v522);
        LODWORD(v560.mSampleTime) = 512;
        v561 = v564;
        AudioUnitSetParameter(*((AudioUnit *)this + 467), 1u, 0, 0, (float)(*((float *)this + 3116) + -1.0) * 24.0, 0);
        AudioUnitProcess(*((AudioUnit *)this + 467), (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v326);
        v327 = *((_DWORD *)this + 129);
        if (v546[3409] || v546[3410])
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, *((unsigned int *)this + 129), v326, &v564);
          v327 = *((_DWORD *)this + 129);
        }
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v560, &v561, v327, v326);
        if (v546[3409] || v546[3410])
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, *((unsigned int *)this + 129), v326, &v561);
          if (v546[3409] || v546[3410])
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, *((unsigned int *)this + 129), v326, &v561);
        }
        v265 = (uint64_t *)v326;
      }
    }
    else
    {
      v265 = 0;
    }
LABEL_441:
    if (*((_BYTE *)this + 2244))
      v17 = (uint64_t)v212;
    else
      v17 = (uint64_t)v541;
    if (*((_BYTE *)this + 2244))
      v266 = (AudioBufferList *)v538;
    else
      v266 = v255;
    v534 = *(double *)&v265;
    if (v266)
      v267 = (uint64_t *)v266;
    else
      v267 = v265;
    v268 = *((_QWORD *)this + 1104);
    if ((v268 & 0x8000000) != 0 && ((*((_BYTE *)this + 8843) & 8) != 0 || *((_BYTE *)this + 472)) && v266)
    {
      v269 = VoiceProcessorV2::CalculateDownlinkMixGainDB(this);
      *((float *)this + 1113) = v269;
      LODWORD(v558) = 0;
      a5 = (AudioBufferList *)v267;
      LODWORD(v558) = __exp10f(v269 / 20.0);
      v16 = (unint64_t)&v556;
      v556 = (uint64_t)v266;
      *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v556);
      v561.mHostTime = v270;
      *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v556);
      v560.mHostTime = v271;
      while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
      {
        v272 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
        v273 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
        vDSP_vsmul(v272, 1, (const float *)&v558, v273, 1, *((unsigned int *)this + 129));
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
      }
      v268 = *((_QWORD *)this + 1104);
      v267 = (uint64_t *)a5;
    }
    if ((v268 & 0x10000000) != 0 && (*((_BYTE *)this + 8843) & 0x10) != 0)
    {
      (*(void (**)(VoiceProcessorV4 *, AudioUnitParameterValue *, UInt32 *))(*(_QWORD *)this + 672))(this, v541, v538);
      v268 = *((_QWORD *)this + 1104);
    }
    if ((v268 & 0x8000) != 0
      && (v274 = *((_QWORD *)this + 1105), (v274 & 0x8000) != 0)
      && (v275 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452)) != 0)
    {
      *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v564.mSampleTime;
      *(_OWORD *)&v561.mRateScalar = *(_OWORD *)&v564.mRateScalar;
      *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v564.mSMPTETime.mSubframes;
      v276 = *((unsigned __int8 *)this + 2244);
      v277 = *((_BYTE *)this + 2244) != 0;
      *(_OWORD *)&v561.mSMPTETime.mHours = *(_OWORD *)&v564.mSMPTETime.mHours;
      LODWORD(v558) = 512;
      v278 = (UInt64)v540;
      if (v542 == 0 || !v277)
        v278 = (UInt64)MonoABL;
      *(_QWORD *)&v560.mSampleTime = v541;
      v560.mHostTime = v278;
      v279 = *(double *)&v539;
      if (v543 == 0 || !v277)
        v279 = *(double *)&v536;
      p_mNumberBuffers = v538;
      if (v545 == 0 || !v277)
        p_mNumberBuffers = &v532->mNumberBuffers;
      v560.mRateScalar = v279;
      v560.mWordClockTime = (UInt64)p_mNumberBuffers;
      *(Float64 *)&v560.mSMPTETime.mSubframes = v534;
      if ((v268 & v274 & 2) != 0)
      {
        v281 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 438);
        if (v281)
        {
          if (v276 || v546[4072])
          {
            LODWORD(v556) = 0;
            v282 = AudioUnitGetParameter(v281, 0x73707062u, 0, 0, (AudioUnitParameterValue *)&v556);
            v284 = *(float *)&v556 == 1.0 && v282 == 0;
            LODWORD(v548) = v284;
            AudioUnitSetProperty(*((AudioUnit *)this + 452), 0x6164756Bu, 0, 0, &v548, 4u);
            v275 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
          }
        }
      }
      v556 = v17;
      v557[0] = v267;
      AudioUnitProcessMultiple(v275, (AudioUnitRenderActionFlags *)&v558, &v561, *((_DWORD *)this + 129), 5u, (const AudioBufferList **)&v560, 2u, (AudioBufferList **)&v556);
      if (v546[3409] || v546[3410])
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v561);
        if (v546[3409] || v546[3410])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, *((unsigned int *)this + 129), (const AudioBufferList *)v267, &v561);
      }
    }
    else
    {
      if (MonoABL)
      {
        LODWORD(v548) = 1055175620;
        *(_QWORD *)&v561.mSampleTime = MonoABL;
        v556 = vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
        v558 = *(double *)&v17;
        *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v558);
        v561.mHostTime = v285;
        *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v558);
        v560.mHostTime = v286;
        while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
        {
          v287 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v556);
          v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          v288 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          vDSP_vsma(v287, 1, (const float *)&v548, (const float *)v16, 1, v288, 1, *((unsigned int *)this + 129));
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
        }
      }
      if (v536)
      {
        *(_QWORD *)&v561.mSampleTime = v536;
        v556 = vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
        v558 = *(double *)&v17;
        *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v558);
        v561.mHostTime = v289;
        *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v558);
        v560.mHostTime = v290;
        while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
        {
          v291 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v556);
          v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          v292 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          vDSP_vadd(v291, 1, (const float *)v16, 1, v292, 1, *((unsigned int *)this + 129));
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
        }
      }
      if (v534 != 0.0 && *(uint64_t **)&v534 != v267)
      {
        v561.mSampleTime = v534;
        v556 = vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
        vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v561, (const AudioBufferList *)v267);
        v558 = v561.mSampleTime;
        *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v558);
        v561.mHostTime = v293;
        *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v558);
        v560.mHostTime = v294;
        while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
        {
          v295 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v556);
          v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          v296 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
          vDSP_vadd(v295, 1, (const float *)v16, 1, v296, 1, *((unsigned int *)this + 129));
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
        }
      }
    }
    v297 = *((_QWORD *)this + 1104);
    if ((v297 & 0x8000) != 0
      && (*((_BYTE *)this + 8841) & 0x80) != 0
      && *((_QWORD *)this + 452)
      && *((_BYTE *)this + 2244))
    {
      (*(void (**)(VoiceProcessorV4 *, uint64_t, AudioTimeStamp *))(*(_QWORD *)this + 648))(this, v17, &v564);
      v297 = *((_QWORD *)this + 1104);
    }
    if ((v297 & 0x800000) != 0 && (*((_BYTE *)this + 8842) & 0x80) != 0)
    {
      v298 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 460);
      if (v298)
      {
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        AudioUnitProcess(v298, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), (AudioBufferList *)v17);
        if (v546[3409] || v546[3410])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v561);
        v297 = *((_QWORD *)this + 1104);
      }
    }
    if ((v297 & 0x1000000) != 0 && (*((_BYTE *)this + 8843) & 1) != 0)
    {
      v299 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
      if (v299)
      {
        v300 = *((_DWORD *)this + 576);
        if (v300 != *((_DWORD *)this + 578))
        {
          AudioUnitSetParameter(v299, 1u, 0, 0, (float)v300, 0);
          v299 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
        }
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        AudioUnitProcess(v299, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), (AudioBufferList *)v17);
        v297 = *((_QWORD *)this + 1104);
      }
    }
    if ((v297 & 0x2000000) != 0 && (*((_BYTE *)this + 8843) & 2) != 0)
    {
      v301 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 462);
      if (v301)
      {
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        AudioUnitProcess(v301, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), (AudioBufferList *)v17);
        goto LABEL_570;
      }
    }
    if ((v297 & 0x4000000) != 0 && (*((_BYTE *)this + 8843) & 4) != 0)
    {
      v302 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463);
      if (v302)
      {
        v303 = (AudioBufferList *)*((_QWORD *)this + 198);
        if (v303->mNumberBuffers)
        {
          a5 = (AudioBufferList *)v267;
          v304 = 0;
          LODWORD(v16) = *((_DWORD *)this + 79) - 1;
          v305 = 16;
          do
          {
            if (v16 >= v304)
              v306 = v304;
            else
              v306 = v16;
            memcpy(*(void **)((char *)&v303->mNumberBuffers + v305), *(const void **)(v17 + 16 * v306 + 16), 4 * *((unsigned int *)this + 129));
            ++v304;
            v303 = (AudioBufferList *)*((_QWORD *)this + 198);
            v305 += 16;
          }
          while (v304 < v303->mNumberBuffers);
          v302 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463);
          v267 = (uint64_t *)a5;
        }
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        AudioUnitProcess(v302, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v303);
        v17 = *((_QWORD *)this + 198);
        goto LABEL_569;
      }
    }
    if ((v297 & 0x200000) != 0 && (*((_BYTE *)this + 8842) & 0x20) != 0 && *((_QWORD *)this + 458))
      break;
    LODWORD(v558) = 0;
    v316 = 1.0;
    if (!*((_BYTE *)this + 2244))
      v316 = *((float *)this + 3119);
    LODWORD(v558) = __exp10f((float)((float)(v316 * 32.0) + -32.0) / 20.0);
    v556 = v17;
    *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v556);
    v561.mHostTime = v317;
    *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v556);
    v560.mHostTime = v318;
    while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
    {
      v319 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
      v320 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
      vDSP_vsmul(v319, 1, (const float *)&v558, v320, 1, *((unsigned int *)this + 129));
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
    }
    if (v546[3409] || v546[3410])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v564);
LABEL_570:
    if (!v267
      || (*((_BYTE *)this + 8835) & 0x20) == 0
      || (*((_BYTE *)this + 8843) & 0x20) == 0 && !*((_BYTE *)this + 472))
    {
      if (v546[3409])
      {
        v328 = (int *)*((_QWORD *)this + 1571);
        if (v328)
        {
          if (*(_DWORD *)v17 != *v212)
          {
            if (VPTimestampLogScope(void)::once != -1)
              dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
            CALegacyLog::log(v328, 3, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 871, "ProcessDownlinkAudio", "**** compressedVoiceABL->mNumberBuffers != theOutputData.mNumberBuffers in process %d != %d ****", *(_DWORD *)v17, *v212);
          }
        }
      }
      v329 = *v212;
      if (*v212 >= *(_DWORD *)v17)
        v329 = *(_DWORD *)v17;
      if (v329)
      {
        v330 = 0;
        v331 = 0;
        do
        {
          v332 = *(_DWORD *)(v17 + v330 * 4 + 12);
          v333 = v212[v330 + 3];
          if (v332 >= v333)
            v334 = v333;
          else
            v334 = v332;
          memcpy(*(void **)&v212[v330 + 4], *(const void **)(v17 + v330 * 4 + 16), v334);
          ++v331;
          LODWORD(v335) = *v212;
          if (*v212 >= *(_DWORD *)v17)
            v335 = *(unsigned int *)v17;
          else
            v335 = v335;
          v330 += 4;
        }
        while (v331 < v335);
      }
      goto LABEL_600;
    }
    if (*((_BYTE *)this + 2244))
    {
      v336 = *((_DWORD *)this + 89);
      v337 = *(_DWORD *)v17;
LABEL_594:
      if (v337)
      {
        v338 = v267;
        v339 = 0;
        v340 = v336 - 1;
        v341 = 4;
        do
        {
          if (v340 >= v339)
            v342 = v339;
          else
            v342 = v340;
          vDSP_vadd(*(const float **)(v17 + v341 * 4), 1, (const float *)v338[2 * v342 + 2], 1, *(float **)&v212[v341], 1, *((unsigned int *)this + 129));
          ++v339;
          v341 += 4;
        }
        while (v339 < *(unsigned int *)v17);
      }
      goto LABEL_600;
    }
    v337 = *(_DWORD *)v17;
    v336 = 1;
    v350 = *(_DWORD *)v17 - 1;
    if (*(_DWORD *)v17 == 1)
      goto LABEL_594;
    while ((v350 & 0x80000000) == 0)
    {
      v351 = *(const float **)(v17 + 16 * v350 + 16);
      v352 = (const float *)v267[2 * (v350 & (v350 >> 31)) + 2];
      v353 = *(float **)&v212[4 * v350-- + 4];
      vDSP_vadd(v351, 1, v352, 1, v353, 1, *((unsigned int *)this + 129));
    }
LABEL_600:
    v343 = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
    if ((v343 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v561.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v561.mHostTime) = 1024;
        *(_DWORD *)((char *)&v561.mHostTime + 6) = 892;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
      }
      v494 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v494 = &off_1E69EE218;
      v494[2] = -50;
    }
    v344 = v343;
    MEMORY[0x1E0C80A78](v343);
    v346 = (AudioBufferList *)((char *)&v517 - v345);
    bzero((char *)&v517 - v345, v347);
    v346->mNumberBuffers = v344;
    v161 = (uint64_t)memcpy(v346->mBuffers, v212 + 2, 16 * v344);
    a5 = v531;
    if (v546[3409] || v546[3410])
      v161 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, *((unsigned int *)this + 129), v346, &v564);
    v348 = v533;
    if ((*((_BYTE *)this + 8836) & 1) != 0 && (*((_BYTE *)this + 8844) & 1) != 0)
    {
      v161 = *((_QWORD *)this + 469);
      if (v161)
      {
        v561 = v564;
        LODWORD(v560.mSampleTime) = 512;
        v161 = AudioUnitProcess((AudioUnit)v161, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v346);
      }
    }
    v349 = *((_DWORD *)this + 129);
    v564.mSampleTime = v564.mSampleTime + (double)v349;
    LODWORD(v544) = v349 + (_DWORD)v544;
    v179 = v348 + 1;
    if (v179 >= *((_DWORD *)this + 130))
      goto LABEL_614;
  }
  v549 = 0;
  v548 = 0;
  v307 = *((float *)this + 3117);
  v308 = *((float *)this + 3118);
  if (v546[3409])
  {
    v309 = *((_DWORD *)this + 3119);
    LODWORD(v548) = *((_DWORD *)this + 3117);
    *((float *)&v548 + 1) = v308;
    v549 = v309;
    VoiceProcessorV2::WriteControlDataToFile((uint64_t)this, (char *)&v548, 0xCu, 0x34u);
  }
  v310 = *(double *)v523;
  v311 = (float)(v308 - v307) / (v180 / *(double *)v523);
  v312 = 2000.0;
  if (v311 <= 2000.0)
  {
    v312 = v311;
    if (v311 < v520)
      v312 = v520;
  }
  v313 = *((_DWORD *)this + 129);
  AudioUnitSetParameter(*((AudioUnit *)this + 458), 5u, 0, 0, 0.0, 0);
  v314 = (float)v313 / v310 * v312;
  *((float *)this + 3117) = v307 + (float)((float)v313 * (float)(v314 / (float)v313));
  if ((*((_BYTE *)this + 8834) & 0x40) != 0 && (*((_BYTE *)this + 8842) & 0x40) != 0 && *((_QWORD *)this + 459))
  {
    v561 = v564;
    v547 = 512;
    *(_OWORD *)p_mHostTime = *(_OWORD *)(v17 + 8);
    v559 = (AudioBufferList *)v267;
    *(_QWORD *)&v560.mSampleTime = 1;
    v556 = 1;
    v557[0] = 0;
    v557[1] = 0;
    v558 = COERCE_DOUBLE(&v560);
    a5 = (AudioBufferList *)v267;
    v315 = v517;
    *v517 = *(_OWORD *)(*((_QWORD *)this + 198) + 8);
    v555 = (AudioBufferList *)&v556;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 458), &v547, &v561, *((_DWORD *)this + 129), 2u, (const AudioBufferList **)&v558, 1u, &v555);
    v561 = v564;
    v547 = 512;
    v559 = a5;
    *(_QWORD *)&v560.mSampleTime = 1;
    *(_OWORD *)p_mHostTime = *(_OWORD *)(v17 + 16 * (*((_DWORD *)this + 79) - 1) + 8);
    v558 = COERCE_DOUBLE(&v560);
    LOBYTE(v16) = (_BYTE)a5;
    v556 = 1;
    *v315 = *(_OWORD *)(*((_QWORD *)this + 198) + 24);
    v555 = (AudioBufferList *)&v556;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 459), &v547, &v561, *((_DWORD *)this + 129), 2u, (const AudioBufferList **)&v558, 1u, &v555);
    v17 = *((_QWORD *)this + 198);
    v267 = (uint64_t *)a5;
  }
  else
  {
    v561 = v564;
    LODWORD(v558) = 512;
    *(_QWORD *)&v560.mSampleTime = v17;
    v560.mHostTime = (UInt64)v267;
    v556 = v17;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 458), (AudioUnitRenderActionFlags *)&v558, &v561, *((_DWORD *)this + 129), 2u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v556);
  }
LABEL_569:
  if (v17)
    goto LABEL_570;
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_932:
  dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
LABEL_906:
  CALegacyLog::log(v212, 5, *(_QWORD *)(v181 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1389, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v180);
  v482 = *((_DWORD *)this + 121);
  v483 = *((double *)this + 41);
LABEL_907:
  if (v18 - *((double *)this + 1986) > (double)(*((_DWORD *)this + 294) + v482) / v483)
  {
    v484 = (int *)*((_QWORD *)this + 1571);
    if (v267[44] != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    CALegacyLog::log(v484, 5, *(_QWORD *)(v181 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1391, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v18 - *((double *)this + 1986));
  }
  *((double *)this + 1986) = v18;
LABEL_912:
  if ((v16 & 1) != 0)
  {
    if (*((_DWORD *)this + 19) != 1)
    {
      if (*((_BYTE *)this + 1648)
        || (v485 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), a5, *((unsigned int *)this + 410), *((_DWORD *)this + 411)), *((_BYTE *)this + 1648) = v485, *((_DWORD *)this + 410) = HIDWORD(v485), (_BYTE)v485))
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), a5);
      }
    }
  }
  else
  {
    if (*((_DWORD *)this + 20) == 1)
    {
      if (!a5->mNumberBuffers)
        goto LABEL_929;
      v486 = 0;
      v487 = &a5->mBuffers[0].mData;
      do
      {
        bzero(*v487, *((unsigned int *)v487 - 1));
        ++v486;
        v487 += 2;
      }
      while (v486 < a5->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)this + 410) = 0;
      *((_BYTE *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), a5);
    }
    v488 = *((_DWORD *)this + 20);
    if (v488 == 2 || v488 == 4)
      v17 = 0;
  }
  do
LABEL_929:
    v490 = __ldaxr(v13);
  while (__stlxr(v490 - 1, v13));
  return v17;
}

void sub_1B6324B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v4;

  if (*(_DWORD *)(v1 + 108))
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 24))(*(_QWORD *)(v1 + 32));
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV4::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(_QWORD **)a1 + 3496), 0x73706D64u, 0, 0, inData, inDataSize);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>(caulk::concurrent::details::lf_read_sync_write_impl *a1, void (***a2)(uint64_t, _QWORD, _QWORD))
{
  uint64_t result;
  char *v5;

  result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((_BYTE *)a1 + result + 8))
  {
    v5 = (char *)a1 + 32 * result;
    if (v5[40])
      (**a2)((uint64_t)(*a2 + 1), *((_QWORD *)v5 + 2), *((_QWORD *)v5 + 3) - *((_QWORD *)v5 + 2));
    return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AUMixSwitchNF::~AUMixSwitchNF(AUMixSwitchNF *this)
{
  AUMixSwitchNF::~AUMixSwitchNF(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  AUMixSwitchNF *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D2148;
  if (getAUMixSwitchNFLog(void)::onceToken != -1)
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
  v2 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    v7 = 134217984;
    v8 = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", (uint8_t *)&v7, 0xCu);
  }
  v3 = (void *)*((_QWORD *)this + 76);
  if (v3)
  {
    *((_QWORD *)this + 77) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 73);
  if (v4)
  {
    *((_QWORD *)this + 74) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 70);
  if (v5)
  {
    *((_QWORD *)this + 71) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 67);
  if (v6)
  {
    *((_QWORD *)this + 68) = v6;
    operator delete(v6);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMixSwitchNF::Initialize(AUMixSwitchNF *this)
{
  NSObject *v2;
  double v3;
  double v4;
  NSObject *v5;
  const char *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  void **v15;
  __int128 buf;
  char *v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (getAUMixSwitchNFLog(void)::onceToken != -1)
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
  v2 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", (uint8_t *)&buf, 0xCu);
  }
  if (!*((_BYTE *)this + 376))
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1)
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
    v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    v6 = "[%p] failed to initialize - cannot operate in variable block size mode";
    goto LABEL_37;
  }
  (*(void (**)(__int128 *__return_ptr, AUMixSwitchNF *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&buf, this, 1, 0);
  v3 = *(double *)&buf;
  (*(void (**)(__int128 *__return_ptr, AUMixSwitchNF *, uint64_t, uint64_t))(*(_QWORD *)this + 392))(&buf, this, 1, 1);
  v4 = *(double *)&buf;
  (*(void (**)(__int128 *__return_ptr, AUMixSwitchNF *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&buf, this, 2, 0);
  if (v3 != *(double *)&buf)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1)
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
    v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    v6 = "[%p] failed to initialize - sample rates of M1 input bus and main output bus must be equal";
LABEL_37:
    _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&buf, 0xCu);
    return 4294956421;
  }
  if (v4 != *(double *)&buf)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1)
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
    v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    v6 = "[%p] failed to initialize - sample rates of M4 input bus and main output bus must be equal";
    goto LABEL_37;
  }
  v7 = *((float *)this + 158);
  if (v7 < 0.0)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1)
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
    v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    v6 = "[%p] failed to initialize - parameter mix frequency must be positive";
    goto LABEL_37;
  }
  if (*(double *)&buf <= v7)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1)
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
    v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = this;
    v6 = "[%p] failed to initialize - parameter mix frequency must not exceed Nyquist frequency";
    goto LABEL_37;
  }
  v8 = 0;
  v9 = *((unsigned int *)this + 84);
  *((_DWORD *)this + 159) = vcvtmd_u64_f64((float)(v7 * (float)v9) / *(double *)&buf);
  *(_QWORD *)&buf = (char *)this + 536;
  *((_QWORD *)&buf + 1) = (char *)this + 560;
  v17 = (char *)this + 584;
  v18 = (char *)this + 608;
  do
  {
    v10 = (void **)*((_QWORD *)&buf + v8);
    std::vector<float>::reserve(v10, 2 * v9);
    v14 = 1056964608;
    v15 = v10;
    v11 = v9;
    if ((_DWORD)v9)
    {
      do
      {
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v15, &v14);
        --v11;
      }
      while (v11);
      v14 = 0;
      v15 = v10;
      v12 = v9;
      do
      {
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v15, &v14);
        --v12;
      }
      while (v12);
    }
    ++v8;
  }
  while (v8 != 4);
  (*(void (**)(AUMixSwitchNF *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return 0;
}

uint64_t AUMixSwitchNF::GetPropertyInfo(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  char v9;
  int v10;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 1831956599)
  {
    if (a2 == 21)
    {
      v9 = 1;
      goto LABEL_17;
    }
    if (a2 != 3700)
    {
      v8 = 1831955832;
LABEL_10:
      if (a2 != v8)
        return result;
      goto LABEL_15;
    }
LABEL_14:
    v9 = *((_BYTE *)this + 17) ^ 1;
LABEL_17:
    *a6 = v9;
    v10 = 4;
    goto LABEL_18;
  }
  if (a2 <= 1832153207)
  {
    if (a2 != 1831956600)
    {
      v8 = 1832152440;
      goto LABEL_10;
    }
LABEL_15:
    *a6 = 1;
    v10 = 8 * *((_DWORD *)this + 84);
LABEL_18:
    result = 0;
    *a5 = v10;
    return result;
  }
  if (a2 == 1832153208)
    goto LABEL_15;
  if (a2 == 1886222438)
    goto LABEL_14;
  return result;
}

uint64_t AUMixSwitchNF::GetProperty(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  const void *v7;
  uint64_t v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 1831956599)
  {
    switch(a2)
    {
      case 21:
        result = 0;
        v9 = *((unsigned __int8 *)this + 528);
        break;
      case 3700:
        result = 0;
        v9 = *((unsigned __int8 *)this + 376);
        break;
      case 1831955832:
        v7 = (const void *)*((_QWORD *)this + 73);
        v8 = *((_QWORD *)this + 74);
        goto LABEL_18;
      default:
        return result;
    }
    *__dst = v9;
  }
  else
  {
    if (a2 <= 1832153207)
    {
      if (a2 == 1831956600)
      {
        v7 = (const void *)*((_QWORD *)this + 67);
        v8 = *((_QWORD *)this + 68);
      }
      else
      {
        if (a2 != 1832152440)
          return result;
        v7 = (const void *)*((_QWORD *)this + 76);
        v8 = *((_QWORD *)this + 77);
      }
      goto LABEL_18;
    }
    if (a2 == 1832153208)
    {
      v7 = (const void *)*((_QWORD *)this + 70);
      v8 = *((_QWORD *)this + 71);
LABEL_18:
      memcpy(__dst, v7, v8 - (_QWORD)v7);
      return 0;
    }
    if (a2 == 1886222438)
    {
      result = 0;
      *__dst = *((_DWORD *)this + 158);
    }
  }
  return result;
}

uint64_t AUMixSwitchNF::SetProperty(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  uint64_t result;
  char *v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1831956599)
  {
    if (a2 <= 1832153207)
    {
      if (a2 == 1831956600)
      {
        v8 = (char *)this + 536;
      }
      else
      {
        if (a2 != 1832152440)
          return result;
        v8 = (char *)this + 608;
      }
      goto LABEL_18;
    }
    if (a2 != 1832153208)
    {
      if (a2 == 1886222438)
      {
        result = 0;
        *((_DWORD *)this + 158) = *(_DWORD *)__src;
      }
      return result;
    }
    v8 = (char *)this + 560;
LABEL_18:
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v8, __src, (uint64_t)&__src[4 * (a6 >> 2)], a6 >> 2);
    return 0;
  }
  switch(a2)
  {
    case 21:
      result = 0;
      *((_BYTE *)this + 528) = *(_DWORD *)__src != 0;
      return result;
    case 3700:
      result = 0;
      *((_BYTE *)this + 376) = __src != 0;
      return result;
    case 1831955832:
      v8 = (char *)this + 584;
      goto LABEL_18;
  }
  return result;
}

uint64_t AUMixSwitchNF::CanScheduleParameters(AUMixSwitchNF *this)
{
  return 0;
}

uint64_t AUMixSwitchNF::ProcessMultipleBufferLists(AUMixSwitchNF *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  const float *mData;
  size_t mDataByteSize;
  float *v13;
  ausdk::AUElement *Element;
  float Parameter;
  ausdk::AUElement *v16;
  ausdk::AUElement *v17;
  float v18;
  ausdk::AUElement *v19;
  ausdk::AUElement *v20;
  float v21;
  ausdk::AUElement *v22;
  ausdk::AUElement *v23;
  float v24;
  ausdk::AUElement *v25;
  ausdk::AUElement *v26;
  float v27;
  ausdk::AUElement *v28;
  float *v29;
  const void *v30;
  size_t v31;
  const AudioBufferList *v33;
  float *v34;
  size_t v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  ausdk::AUElement *v48;
  float v49;
  ausdk::AUElement *v50;
  float v51;
  ausdk::AUElement *v52;
  ausdk::AUElement *v53;
  float v54;
  ausdk::AUElement *v55;
  float v56;
  ausdk::AUElement *v57;
  ausdk::AUElement *v58;
  float v59;
  ausdk::AUElement *v60;
  float v61;
  _BOOL4 v62;
  float v63;
  ausdk::AUElement *v64;
  ausdk::AUElement *v65;
  float v66;
  ausdk::AUElement *v67;
  float v68;
  ausdk::AUElement *v69;
  ausdk::AUElement *v70;
  float v71;
  ausdk::AUElement *v72;
  float v73;
  ausdk::AUElement *v74;
  float *v75;
  ausdk::AUElement *v76;
  float v77;
  ausdk::AUElement *v78;
  ausdk::AUElement *v79;
  float v80;
  ausdk::AUElement *v81;
  ausdk::AUElement *v82;
  float v83;
  ausdk::AUElement *v84;
  ausdk::AUElement *v85;
  float v86;
  ausdk::AUElement *v87;
  ausdk::AUElement *v88;
  float v89;
  ausdk::AUElement *v90;
  ausdk::AUScope *v91;
  ausdk::AUElement *v92;
  float v93;
  ausdk::AUElement *v94;
  float v95;
  ausdk::AUScope *v96;
  ausdk::AUElement *v97;
  ausdk::AUElement *v98;
  float v99;
  ausdk::AUElement *v100;
  float v101;
  ausdk::AUElement *v102;
  ausdk::AUElement *v103;
  float v104;
  ausdk::AUElement *v105;
  float v106;
  _BOOL4 v107;
  float v108;
  ausdk::AUElement *v109;
  ausdk::AUElement *v110;
  float v111;
  ausdk::AUElement *v112;
  float v113;
  ausdk::AUElement *v114;
  ausdk::AUElement *v115;
  float v116;
  ausdk::AUElement *v117;
  float v118;
  ausdk::AUElement *v119;
  NSObject *v120;
  uint64_t v121;
  const char *v122;
  NSObject *v123;
  uint64_t v124;
  int v125;
  DSPSplitComplex __E;
  DSPSplitComplex __D;
  DSPSplitComplex __C;
  DSPSplitComplex __B;
  float __A;
  _BYTE v131[18];
  __int16 v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) >= a3)
  {
    if (a4 == 2)
    {
      if (a6 == 1)
      {
        mData = (const float *)(*a5)->mBuffers[0].mData;
        mDataByteSize = (*a5)->mBuffers[0].mDataByteSize;
        v13 = (float *)(*a7)->mBuffers[0].mData;
        if (*((_BYTE *)this + 528))
        {
LABEL_5:
          Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          Parameter = ausdk::AUElement::GetParameter(Element, 0);
          v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v16, 0, Parameter, 0);
          v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          v18 = ausdk::AUElement::GetParameter(v17, 1u);
          v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v19, 1u, v18, 0);
          v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          v21 = ausdk::AUElement::GetParameter(v20, 2u);
          v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v22, 2u, v21, 0);
          v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          v24 = ausdk::AUElement::GetParameter(v23, 3u);
          v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v25, 3u, v24, 0);
          v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          v27 = ausdk::AUElement::GetParameter(v26, 4u);
          v28 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v28, 4u, v27, 0);
          v29 = v13;
          v30 = mData;
          v31 = mDataByteSize;
LABEL_6:
          memcpy(v29, v30, v31);
        }
        else
        {
          v33 = a5[1];
          v34 = (float *)v33->mBuffers[0].mData;
          v35 = v33->mBuffers[0].mDataByteSize;
          v36 = *((_QWORD *)this + 9);
          if (v36)
          {
            v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
          }
          else
          {
            v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v38)
              v37 = 0;
            else
              v37 = *v38;
          }
          v39 = (int)ausdk::AUElement::GetParameter(v37, 0);
          switch(v39)
          {
            case 0:
              goto LABEL_5;
            case 1:
              v76 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v77 = ausdk::AUElement::GetParameter(v76, 0);
              v78 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v78, 0, v77, 0);
              v79 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v80 = ausdk::AUElement::GetParameter(v79, 1u);
              v81 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v81, 1u, v80, 0);
              v82 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v83 = ausdk::AUElement::GetParameter(v82, 2u);
              v84 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v84, 2u, v83, 0);
              v85 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v86 = ausdk::AUElement::GetParameter(v85, 3u);
              v87 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v87, 3u, v86, 0);
              v88 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v89 = ausdk::AUElement::GetParameter(v88, 4u);
              v90 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v90, 4u, v89, 0);
              v29 = v13;
              v30 = v34;
              v31 = v35;
              goto LABEL_6;
            case 2:
              *(_DWORD *)v131 = 1056964608;
              v91 = (AUMixSwitchNF *)((char *)this + 80);
              v92 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v93 = ausdk::AUElement::GetParameter(v92, 0);
              v94 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v95 = (float)(v93 + ausdk::AUElement::GetParameter(v94, 0)) * 0.5;
              v96 = (AUMixSwitchNF *)((char *)this + 128);
              v97 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v96, 0);
              ausdk::AUElement::SetParameter(v97, 0, v95, 0);
              v98 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 0);
              v99 = ausdk::AUElement::GetParameter(v98, 1u);
              v100 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 1u);
              v101 = (float)(v99 + ausdk::AUElement::GetParameter(v100, 1u)) * 0.5;
              v102 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v96, 0);
              ausdk::AUElement::SetParameter(v102, 1u, v101, 0);
              v103 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 0);
              v104 = ausdk::AUElement::GetParameter(v103, 2u);
              v105 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 1u);
              v106 = ausdk::AUElement::GetParameter(v105, 2u);
              v107 = v104 == 1.0;
              if (v106 != 1.0)
                v107 = 0;
              v108 = (float)v107;
              v109 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v96, 0);
              ausdk::AUElement::SetParameter(v109, 2u, v108, 0);
              v110 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 0);
              v111 = ausdk::AUElement::GetParameter(v110, 3u);
              v112 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 1u);
              v113 = (float)(v111 + ausdk::AUElement::GetParameter(v112, 3u)) * 0.5;
              v114 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v96, 0);
              ausdk::AUElement::SetParameter(v114, 3u, v113, 0);
              v115 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 0);
              v116 = ausdk::AUElement::GetParameter(v115, 4u);
              v117 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v91, 1u);
              v118 = (float)(v116 + ausdk::AUElement::GetParameter(v117, 4u)) * 0.5;
              v119 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v96, 0);
              ausdk::AUElement::SetParameter(v119, 4u, v118, 0);
              vDSP_vasm(mData, 1, v34, 1, (const float *)v131, v13, 1, 2 * a3);
              break;
            case 3:
            case 4:
              if (v39 == 3)
                v40 = 536;
              else
                v40 = 584;
              v41 = *((unsigned int *)this + 159);
              if (v39 == 3)
                v42 = 560;
              else
                v42 = 608;
              v43 = hypotf(*(float *)(*(_QWORD *)((char *)this + v40) + 4 * v41), *(float *)(*(_QWORD *)((char *)this + v40) + 4 * (v41 + a3)));
              v44 = hypotf(*(float *)(*(_QWORD *)((char *)this + v42) + 4 * v41), *(float *)(*(_QWORD *)((char *)this + v42) + 4 * (v41 + a3)));
              v45 = v43 + v44;
              v46 = 0.0;
              v47 = 1.0;
              if ((float)(v43 + v44) > 0.0)
              {
                v47 = v43 / v45;
                v46 = v44 / v45;
              }
              v48 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v49 = ausdk::AUElement::GetParameter(v48, 0);
              v50 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v51 = (float)(v46 * ausdk::AUElement::GetParameter(v50, 0)) + (float)(v49 * v47);
              v52 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v52, 0, v51, 0);
              v53 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v54 = ausdk::AUElement::GetParameter(v53, 1u);
              v55 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v56 = (float)(v46 * ausdk::AUElement::GetParameter(v55, 1u)) + (float)(v54 * v47);
              v57 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v57, 1u, v56, 0);
              v58 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v59 = ausdk::AUElement::GetParameter(v58, 2u);
              v60 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v61 = ausdk::AUElement::GetParameter(v60, 2u);
              v62 = v59 == 1.0;
              if (v61 != 1.0)
                v62 = 0;
              v63 = (float)v62;
              v64 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v64, 2u, v63, 0);
              v65 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v66 = ausdk::AUElement::GetParameter(v65, 3u);
              v67 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v68 = (float)(v46 * ausdk::AUElement::GetParameter(v67, 3u)) + (float)(v66 * v47);
              v69 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v69, 3u, v68, 0);
              v70 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              v71 = ausdk::AUElement::GetParameter(v70, 4u);
              v72 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              v73 = (float)(v46 * ausdk::AUElement::GetParameter(v72, 4u)) + (float)(v71 * v47);
              v74 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v74, 4u, v73, 0);
              __A = 0.0;
              *(_QWORD *)v131 = mData;
              *(_QWORD *)&v131[8] = &mData[a3];
              __B.realp = *(float **)((char *)this + v40);
              __B.imagp = &__B.realp[a3];
              __C.realp = v34;
              __C.imagp = &v34[a3];
              v75 = (float *)(*(_QWORD *)((char *)this + v42) + 4 * a3);
              __D.realp = *(float **)((char *)this + v42);
              __D.imagp = v75;
              __E.realp = v13;
              __E.imagp = &v13[a3];
              vDSP_vfill(&__A, v13, 1, 2 * a3);
              vDSP_zvmmaa((const DSPSplitComplex *)v131, 1, &__B, 1, &__C, 1, &__D, 1, &__E, 1, &__E, 1, a3);
              break;
            default:
              return 0;
          }
        }
        return 0;
      }
      if (getAUMixSwitchNFLog(void)::onceToken != -1)
        dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
      v124 = getAUMixSwitchNFLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)v131 = 134218496;
      *(_QWORD *)&v131[4] = this;
      *(_WORD *)&v131[12] = 1024;
      *(_DWORD *)&v131[14] = a6;
      v132 = 1024;
      v133 = 1;
      v122 = "[%p] cannot process %u output busses (expected output bus count is %u)";
      v123 = v124;
    }
    else
    {
      if (getAUMixSwitchNFLog(void)::onceToken != -1)
        dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
      v121 = getAUMixSwitchNFLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)v131 = 134218496;
      *(_QWORD *)&v131[4] = this;
      *(_WORD *)&v131[12] = 1024;
      *(_DWORD *)&v131[14] = a4;
      v132 = 1024;
      v133 = 2;
      v122 = "[%p] cannot process %u input busses (expected input bus count is %u)";
      v123 = v121;
    }
    _os_log_error_impl(&dword_1B5ED0000, v123, OS_LOG_TYPE_ERROR, v122, v131, 0x18u);
    return 4294967246;
  }
  if (getAUMixSwitchNFLog(void)::onceToken != -1)
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_8222);
  v120 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v125 = *((_DWORD *)this + 84);
    *(_DWORD *)v131 = 134218496;
    *(_QWORD *)&v131[4] = this;
    *(_WORD *)&v131[12] = 1024;
    *(_DWORD *)&v131[14] = a3;
    v132 = 1024;
    v133 = v125;
    _os_log_error_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_ERROR, "[%p] cannot process %u frames (maximum frame size is %u)", v131, 0x18u);
  }
  return 4294956422;
}

uint64_t AUMixSwitchNF::GetParameterList(AUMixSwitchNF *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2 == 2 || a2 == 1)
  {
    *a4 = 5;
    if (a3)
    {
      result = 0;
      *(_OWORD *)a3 = xmmword_1B6626920;
      a3[4] = 4;
      return result;
    }
    return 0;
  }
  if (!a2)
  {
    *a4 = 1;
    if (a3)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  *a4 = 0;
  return 4294956430;
}

uint64_t AUMixSwitchNF::GetParameterInfo(AUMixSwitchNF *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  int v5;
  AudioUnitParameterValue v6;
  AudioUnitParameterUnit v7;
  const __CFString *v8;
  int v9;
  uint64_t result;
  AudioUnitParameterOptions v11;

  if (a2 == 2)
  {
    buffer->unitName = 0;
    buffer->flags = 0x2000;
    v5 = 1073774592;
    v7 = kAudioUnitParameterUnit_Ratio;
    v8 = CFSTR("EC delta EIR");
    v6 = 1000.0;
    switch(a3)
    {
      case 0:
        goto LABEL_15;
      case 1:
LABEL_8:
        v7 = kAudioUnitParameterUnit_Milliseconds;
        v8 = CFSTR("EC main lobe delay");
        v9 = 1137180672;
        break;
      case 2:
LABEL_11:
        v6 = 1.0;
        v7 = kAudioUnitParameterUnit_Boolean;
        v8 = CFSTR("EC adaptation state");
        goto LABEL_15;
      case 3:
LABEL_12:
        v7 = kAudioUnitParameterUnit_Generic;
        v8 = CFSTR("EC time aligned ref signal energy");
        v9 = 1148846080;
        break;
      case 4:
LABEL_14:
        v7 = kAudioUnitParameterUnit_Generic;
        v6 = 1.0;
        v8 = CFSTR("EC mic LEE signal cross-correlation");
        goto LABEL_15;
      default:
        return 4294956418;
    }
    v6 = *(float *)&v9;
  }
  else
  {
    if (a2 == 1)
    {
      buffer->unitName = 0;
      buffer->flags = 0x2000;
      v5 = 1073774592;
      v7 = kAudioUnitParameterUnit_Ratio;
      v8 = CFSTR("EC delta EIR");
      v6 = 1000.0;
      switch(a3)
      {
        case 0:
          goto LABEL_15;
        case 1:
          goto LABEL_8;
        case 2:
          goto LABEL_11;
        case 3:
          goto LABEL_12;
        case 4:
          goto LABEL_14;
        default:
          return 4294956418;
      }
    }
    if (a2)
      return 4294956430;
    buffer->unitName = 0;
    buffer->flags = 0x2000;
    if (a3)
      return 4294956418;
    v5 = -1073741824;
    v6 = 4.0;
    v7 = kAudioUnitParameterUnit_Indexed;
    v8 = CFSTR("Beam");
  }
LABEL_15:
  buffer->cfNameString = v8;
  buffer->flags = 134225920;
  CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = 0.0;
  buffer->maxValue = v6;
  v11 = buffer->flags | v5;
  buffer->defaultValue = 0.0;
  buffer->flags = v11;
  return result;
}

uint64_t AUMixSwitchNF::GetParameterValueStrings(AUMixSwitchNF *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  uint64_t i;
  const void *v8;
  _QWORD v9[2];
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3)
    return 4294956418;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v10, "Mic 1");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v11, "Mic 4");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v12, "Omni");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v13, "+X beam");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v14, "-X beam");
  v9[0] = v10;
  v9[1] = 5;
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef>((uint64_t)v9);
  for (i = 32; i != -8; i -= 8)
  {
    v8 = *(const void **)&v10[i];
    if (v8)
      CFRelease(v8);
  }
  result = 0;
  *a4 = v6;
  return result;
}

void sub_1B6326388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t i;

  for (i = 32; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(&a11 + i));
  _Unwind_Resume(a1);
}

double AUMixSwitchNF::GetTailTime(AUMixSwitchNF *this)
{
  return 0.0;
}

uint64_t AUMixSwitchNF::SupportsTail(AUMixSwitchNF *this)
{
  return 1;
}

BOOL AUMixSwitchNF::StreamFormatWritable(AUMixSwitchNF *this, int a2, unsigned int a3)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = a3 == 0;
  v4 = a3 < 2;
  if (a2 != 1)
    v4 = 0;
  if (a2 != 2)
    v3 = v4;
  return !*((_BYTE *)this + 17) && v3;
}

uint64_t AUMixSwitchNF::SupportedNumChannels(AUMixSwitchNF *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMixSwitchNF::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUMixSwitchNF::ValidFormat(AUMixSwitchNF *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  return a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105 && a4->mChannelsPerFrame == 1;
}

os_log_t ___Z19getAUMixSwitchNFLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUMixSwitchNF");
  getAUMixSwitchNFLog(void)::gLog = (uint64_t)result;
  return result;
}

void AUEarPlug::~AUEarPlug(AUEarPlug *this)
{
  AUEarPlug::~AUEarPlug(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69D23D8;
  v2 = (void *)*((_QWORD *)this + 75);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 75) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 74);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 74) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEarPlug::Initialize(void **this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  _BOOL4 IsEquivalent;
  uint64_t result;
  double v9;
  void *v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  float Parameter;
  double v14;
  double v15;
  AudioStreamBasicDescription v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
  v3 = *(_OWORD *)(Element + 96);
  v17 = *(_OWORD *)(Element + 80);
  v18 = v3;
  v19 = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v16.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v16.mBytesPerPacket = v5;
  *(_QWORD *)&v16.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v17, &v16, v6);
  result = 4294956428;
  if (IsEquivalent && HIDWORD(v18) <= 4)
  {
    (*((void (**)(void **, _QWORD, _QWORD))*this + 9))(this, 0, 0);
    CADeprecated::CAAutoFree<float>::allocBytes(this + 75, 4 * *((unsigned int *)this + 84));
    *((_BYTE *)this + 536) = 0;
    v9 = (double)mach_absolute_time() * 0.0000000416666667;
    *((double *)this + 72) = v9;
    v10 = this[9];
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
    }
    else
    {
      v12 = (ausdk::AUElement **)this[6];
      if (this[7] == v12)
        v11 = 0;
      else
        v11 = *v12;
    }
    Parameter = ausdk::AUElement::GetParameter(v11, 0);
    result = 0;
    v14 = v9 + Parameter;
    *((double *)this + 73) = v14;
    v15 = *((double *)this + 72);
    if (v14 < v15)
    {
      result = 0;
      *((double *)this + 73) = v15;
    }
  }
  return result;
}

uint64_t AUEarPlug::GetPropertyInfo(AUEarPlug *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 64002)
  {
    *a6 = 1;
    v7 = 4 * *((_DWORD *)this + 133);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    *a6 = 1;
    v7 = 4;
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUEarPlug::GetProperty(const void **this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  uint64_t v7;

  if (!a3)
  {
    if (a2 == 64002)
    {
      v7 = *((unsigned int *)this + 133);
      if ((_DWORD)v7)
      {
        memcpy(__dst, this[74], 4 * v7);
        return 0;
      }
    }
    else if (a2 == 21)
    {
      result = 0;
      *__dst = *((_DWORD *)this + 132);
      return result;
    }
  }
  return 4294956417;
}

uint64_t AUEarPlug::SetProperty(void **this, int a2, int a3, unsigned int a4, _DWORD *a5, size_t size)
{
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float v16;
  double v17;
  void *v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  float Parameter;

  if (a3)
    return 4294956417;
  if (a2 == 64002)
  {
    v9 = size;
    if ((_DWORD)size)
    {
      v10 = this + 74;
      CADeprecated::CAAutoFree<float>::allocBytes(this + 74, size);
      result = (uint64_t)this[74];
      if (result)
      {
        memcpy((void *)result, a5, v9);
        if (v9 >> 2 >= 4)
          v11 = 4;
        else
          v11 = v9 >> 2;
        if ((_DWORD)v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v13 = this[9];
            if (v13)
            {
              v14 = (ausdk::AUElement *)(*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
            }
            else
            {
              v15 = (ausdk::AUElement **)this[6];
              if (this[7] == v15)
                v14 = 0;
              else
                v14 = *v15;
            }
            ausdk::AUElement::SetParameter(v14, i + 1, *(float *)(*v10 + 4 * i), 0);
            v16 = __exp10f(*(float *)(*v10 + 4 * i) / 20.0);
            *(float *)(*v10 + 4 * i) = v16;
            sPreviousGainToRestore[i] = v16;
          }
        }
        *((_DWORD *)this + 133) = v11;
        v17 = (double)mach_absolute_time() * 0.0000000416666667;
        *(double *)&sHostInitTime = v17;
        v18 = this[9];
        if (v18)
        {
          v19 = (ausdk::AUElement *)(*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
        }
        else
        {
          v20 = (ausdk::AUElement **)this[6];
          if (this[7] == v20)
            v19 = 0;
          else
            v19 = *v20;
        }
        Parameter = ausdk::AUElement::GetParameter(v19, 0);
        result = 0;
        *(double *)&sHostTimeToBeRamped = v17 + Parameter;
        if (*(double *)&sHostTimeToBeRamped < *(double *)&sHostInitTime)
        {
          result = 0;
          sHostTimeToBeRamped = sHostInitTime;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else if (a2 == 21)
  {
    result = 0;
    *((_DWORD *)this + 132) = *a5;
  }
  else
  {
    return 4294956417;
  }
  return result;
}

uint64_t AUEarPlug::SetParameter(AUEarPlug *this, unsigned int a2, int a3, float a4)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  ausdk::AUElement ***v11;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v11 = (ausdk::AUElement ***)((char *)this + 48);
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (v11[1] == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  return 0;
}

uint64_t AUEarPlug::CanScheduleParameters(AUEarPlug *this)
{
  return 0;
}

uint64_t AUEarPlug::ProcessBufferLists(AUEarPlug *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unsigned int v5;
  unint64_t mNumberBuffers;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  float v17;
  size_t mDataByteSize;
  const void *v19;
  void *v20;
  float v21;
  double v22;
  uint64_t v23;
  size_t v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t i;
  size_t v29;
  void *mData;
  void *v31;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  float *v36;
  float *v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float Parameter;
  float v42;
  float v43;
  double v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  float v48;
  double v49;
  uint64_t Element;
  float v51;
  float v52;
  float __B;
  float __A;
  float __C;
  float __dst[4];
  uint64_t v57;

  v5 = __N;
  v57 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 536))
  {
    LODWORD(mNumberBuffers) = *((_DWORD *)this + 133);
    goto LABEL_3;
  }
  *((_BYTE *)this + 536) = 1;
  v22 = (double)mach_absolute_time() * 0.0000000416666667;
  mNumberBuffers = *((unsigned int *)this + 133);
  if ((_DWORD)mNumberBuffers || (v23 = sHostTimeToBeRamped, v22 >= *(double *)&sHostTimeToBeRamped))
  {
    if ((_DWORD)mNumberBuffers)
    {
      v33 = (void *)*((_QWORD *)this + 74);
      v34 = 4 * mNumberBuffers;
      memcpy(__dst, v33, 4 * mNumberBuffers);
      v26 = sPreviousGainToRestore;
      v25 = (float *)v33;
      v24 = v34;
      goto LABEL_29;
    }
  }
  else
  {
    mNumberBuffers = a3->mNumberBuffers;
    *((_DWORD *)this + 133) = mNumberBuffers;
    *((_QWORD *)this + 73) = v23;
    *((_QWORD *)this + 72) = sHostInitTime;
    if ((_DWORD)mNumberBuffers)
    {
      v24 = 4 * mNumberBuffers;
      v25 = sPreviousGainToRestore;
      v26 = __dst;
LABEL_29:
      memcpy(v26, v25, v24);
      v35 = 0;
      v36 = (float *)((char *)this + 540);
      do
      {
        if (v22 < *((double *)this + 73) && v22 >= *((double *)this + 72))
        {
          v36[4] = __dst[v35];
          v38 = *((_QWORD *)this + 9);
          if (v38)
          {
            v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
          }
          else
          {
            v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v40)
              v39 = 0;
            else
              v39 = *v40;
          }
          Parameter = ausdk::AUElement::GetParameter(v39, 0);
          v42 = 0.0;
          if (Parameter > 0.0)
          {
            v43 = v36[4];
            v44 = *(double *)(ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0) + 80);
            v45 = *((_QWORD *)this + 9);
            if (v45)
            {
              v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
            }
            else
            {
              v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v47)
                v46 = 0;
              else
                v46 = *v47;
            }
            v48 = (float)(1.0 - v43) / (v44 * ausdk::AUElement::GetParameter(v46, 0));
            v42 = fabsf(v48);
          }
          *v36 = v42;
          v49 = v22 - *((double *)this + 72);
          Element = ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0);
          v51 = *v36;
          v52 = v36[4] + v49 * *(double *)(Element + 80) * *v36;
          v36[4] = v52;
          if (v51 > 0.0)
            goto LABEL_34;
          v37 = (float *)((char *)this + 4 * v35 + 540);
          v36[4] = 1.0;
        }
        else
        {
          v36[4] = 1.0;
          v37 = v36;
        }
        *v37 = 0.0;
LABEL_34:
        ++v35;
        mNumberBuffers = *((unsigned int *)this + 133);
        ++v36;
      }
      while (v35 < mNumberBuffers);
    }
  }
LABEL_3:
  if ((_DWORD)mNumberBuffers)
  {
    v10 = a3->mNumberBuffers;
    if (!*((_DWORD *)this + 132))
    {
      if (a3->mNumberBuffers)
      {
        v11 = 0;
        v12 = 0;
        v13 = v5;
        v14 = v5 - 1;
        v15 = (char *)this + 556;
        v16 = 16;
        do
        {
          v17 = *(float *)&v15[v11 * 4];
          if (v17 == 1.0)
          {
            mDataByteSize = a3->mBuffers[v11].mDataByteSize;
            if ((_DWORD)mDataByteSize == a4->mBuffers[v11].mDataByteSize)
            {
              v19 = *(const void **)((char *)&a3->mNumberBuffers + v16);
              v20 = *(void **)((char *)&a4->mNumberBuffers + v16);
              if (v19 != v20)
              {
                memcpy(v20, v19, mDataByteSize);
                sPreviousGainToRestore[v11] = 1.0;
              }
            }
          }
          else
          {
            __C = 1.0;
            __dst[0] = 0.0;
            __A = v17;
            __B = *(float *)&v15[v11 * 4 - 16];
            vDSP_vramp(&__A, &__B, *((float **)this + 75), 1, v13);
            vDSP_vclip(*((const float **)this + 75), 1, __dst, &__C, *((float **)this + 75), 1, v13);
            vDSP_vmul(*(const float **)((char *)&a3->mNumberBuffers + v16), 1, *((const float **)this + 75), 1, *(float **)((char *)&a4->mNumberBuffers + v16), 1, v13);
            v21 = *(float *)(*((_QWORD *)this + 75) + 4 * v14);
            *(float *)&v15[v11 * 4] = v21;
            sPreviousGainToRestore[v11] = v21;
          }
          ++v12;
          ++v11;
          v16 += 16;
        }
        while (v12 < a3->mNumberBuffers);
      }
      return 0;
    }
  }
  else
  {
    v10 = a3->mNumberBuffers;
  }
  if (v10 == a4->mNumberBuffers && v10)
  {
    v27 = 0;
    for (i = 0; i < v10; ++i)
    {
      v29 = a3->mBuffers[v27].mDataByteSize;
      if ((_DWORD)v29 == a4->mBuffers[v27].mDataByteSize)
      {
        mData = a3->mBuffers[v27].mData;
        v31 = a4->mBuffers[v27].mData;
        if (mData != v31)
        {
          memcpy(v31, mData, v29);
          v10 = a3->mNumberBuffers;
        }
      }
      ++v27;
    }
  }
  return 0;
}

uint64_t AUEarPlug::Render(AUEarPlug *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v10;
  uint64_t BufferList;
  uint64_t v12;
  uint64_t v13;

  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v10 = ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUEarPlug *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v13, a4);
  }
  return result;
}

uint64_t AUEarPlug::GetParameterList(AUEarPlug *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t i;
  uint64_t result;

  if (a2)
  {
    LODWORD(i) = 0;
    result = 4294956418;
  }
  else
  {
    for (i = 0; i != 5; ++i)
    {
      if (a3)
        a3[i] = i;
    }
    result = 0;
  }
  *a4 = i;
  return result;
}

uint64_t AUEarPlug::GetParameterInfo(AUEarPlug *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  AudioUnitParameterValue v8;
  const __CFString *v9;

  if (a2)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (!a3)
  {
    v6 = 0x412000003C23D70ALL;
    v7 = -1073741824;
    v8 = 5.0;
    v9 = CFSTR("Ramp Time");
    goto LABEL_7;
  }
  if (a3 <= 4)
  {
    v6 = 3270508544;
    v7 = 1073774592;
    v8 = 0.0;
    v9 = CFSTR("Initial Level (dB)");
LABEL_7:
    buffer->cfNameString = v9;
    buffer->flags = 0x8000000;
    CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(_QWORD *)&buffer->minValue = v6;
    buffer->defaultValue = v8;
    buffer->flags |= v7;
    return result;
  }
  return 4294956418;
}

double AUEarPlug::GetLatency(AUEarPlug *this)
{
  return 0.0;
}

double AUEarPlug::GetTailTime(AUEarPlug *this)
{
  return 0.0;
}

uint64_t AUEarPlug::SupportsTail(AUEarPlug *this)
{
  return 1;
}

BOOL AUEarPlug::StreamFormatWritable(AUEarPlug *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEarPlug::SupportedNumChannels(AUEarPlug *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEarPlug::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 4;
}

void *CADeprecated::CAAutoFree<float>::allocBytes(void **a1, size_t size)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (size && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

os_log_t ___Z19getMatrixUtilityLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AudioDSPMatrixUtility");
  getMatrixUtilityLog(void)::gLog = (uint64_t)result;
  return result;
}

void InverseWithHRLS::update(uint64_t a1, const void *a2, float a3, float a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  float *v9;
  float *v10;
  int v11;
  vDSP_Length __N;
  unsigned int v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  vDSP_Length v19;
  uint64_t v20;
  float *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  float *v26;
  float *v27;
  vDSP_Length v28;
  int v29;
  unsigned int v30;
  float *v31;
  uint64_t v32;
  unsigned int v33;
  vDSP_Length v34;
  uint64_t v35;
  float *v36;
  unsigned int v37;
  vDSP_Length v38;
  int v39;
  unsigned int v40;
  float *v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  int v45;
  DSPSplitComplex __B;
  DSPSplitComplex __A;
  DSPSplitComplex __D;
  float v49;
  float v50;
  float v51;

  v50 = 1.0 / a4;
  v51 = 1.0 / sqrtf(a3);
  v49 = 1.0 / sqrtf(a4);
  memcpy(*(void **)(a1 + 120), a2, 4 * (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vclr(*(float **)(a1 + 48), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vneg((const float *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 204)), 1, *(float **)(a1 + 168), 1, *(unsigned int *)(a1 + 204));
  if (*(_DWORD *)(a1 + 192))
  {
    v5 = 0;
    do
    {
      v6 = 0;
      v7 = *(_DWORD *)(a1 + 196) * v5;
      v8 = *(_QWORD *)(a1 + 48);
      v9 = (float *)(v8 + 4 * v7);
      v10 = (float *)(v8 + 4 * (*(_DWORD *)(a1 + 208) + v7));
      __D.realp = v9;
      __D.imagp = v10;
      do
      {
        v11 = *(_DWORD *)(a1 + 208);
        __N = *(unsigned int *)(a1 + 196);
        v13 = v11 * v6 + __N * v5;
        v14 = (float *)(*(_QWORD *)a1 + 4 * v13);
        v15 = (float *)(*(_QWORD *)(a1 + 168) + 4 * v13);
        __A.realp = v14;
        __A.imagp = v15;
        v16 = *(_QWORD *)(a1 + 120);
        __B.realp = (float *)(v16 + 4 * __N * v6);
        __B.imagp = (float *)(v16 + 4 * (__N * v6 + v11));
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
        ++v6;
        v17 = *(_DWORD *)(a1 + 192);
      }
      while (v6 < v17);
      ++v5;
    }
    while (v5 < v17);
  }
  vDSP_vsmul(*(const float **)(a1 + 48), 1, &v51, *(float **)(a1 + 48), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vclr(*(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 196));
  if (*(_DWORD *)(a1 + 192))
  {
    v18 = 0;
    do
    {
      v19 = *(unsigned int *)(a1 + 196);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = (float *)(v20 + 4 * (*(_DWORD *)(a1 + 208) + v19 * v18));
      __D.realp = (float *)(v20 + 4 * v19 * v18);
      __D.imagp = v21;
      vDSP_zvmgsa(&__D, 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 72), 1, v19);
      ++v18;
    }
    while (v18 < *(_DWORD *)(a1 + 192));
  }
  vDSP_vsadd(*(const float **)(a1 + 72), 1, &v50, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 196));
  v45 = *(_DWORD *)(a1 + 196);
  vvsqrtf(*(float **)(a1 + 72), *(const float **)(a1 + 72), &v45);
  vDSP_vclr(*(float **)(a1 + 96), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vmul(*(const float **)(a1 + 72), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  v44 = 1.0;
  vDSP_svdiv(&v44, *(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  if (*(_DWORD *)(a1 + 192))
  {
    v22 = 0;
    do
    {
      v23 = 0;
      v24 = *(_DWORD *)(a1 + 196) * v22;
      v25 = *(_QWORD *)(a1 + 96);
      v26 = (float *)(v25 + 4 * v24);
      v27 = (float *)(v25 + 4 * (*(_DWORD *)(a1 + 208) + v24));
      __D.realp = v26;
      __D.imagp = v27;
      do
      {
        v28 = *(unsigned int *)(a1 + 196);
        v29 = *(_DWORD *)(a1 + 208);
        v30 = v28 * v23 + v29 * v22;
        v31 = (float *)(*(_QWORD *)a1 + 4 * (v30 + *(_DWORD *)(a1 + 204)));
        __A.realp = (float *)(*(_QWORD *)a1 + 4 * v30);
        __A.imagp = v31;
        v32 = *(_QWORD *)(a1 + 48);
        __B.realp = (float *)(v32 + 4 * v28 * v23);
        __B.imagp = (float *)(v32 + 4 * (v28 * v23 + v29));
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, v28);
        ++v23;
      }
      while (v23 < *(_DWORD *)(a1 + 192));
      vDSP_zrvmul(&__D, 1, *(const float **)(a1 + 144), 1, &__D, 1, *(unsigned int *)(a1 + 196));
      ++v22;
    }
    while (v22 < *(_DWORD *)(a1 + 192));
  }
  vDSP_vsmul(*(const float **)(a1 + 96), 1, &v51, *(float **)(a1 + 96), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vsmul(*(const float **)a1, 1, &v51, *(float **)a1, 1, (2 * *(_DWORD *)(a1 + 204)));
  vDSP_vsadd(*(const float **)(a1 + 72), 1, &v49, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vdiv(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vneg(*(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vneg((const float *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 208)), 1, (float *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 208)), 1, *(unsigned int *)(a1 + 208));
  if (*(_DWORD *)(a1 + 192))
  {
    v33 = 0;
    do
    {
      v34 = *(unsigned int *)(a1 + 196);
      v35 = *(_QWORD *)(a1 + 96);
      v36 = (float *)(v35 + 4 * (*(_DWORD *)(a1 + 208) + v34 * v33));
      __D.realp = (float *)(v35 + 4 * v34 * v33);
      __D.imagp = v36;
      vDSP_zrvmul(&__D, 1, *(const float **)(a1 + 144), 1, &__D, 1, v34);
      if (!*(_DWORD *)(a1 + 192))
        break;
      v37 = 0;
      do
      {
        v38 = *(unsigned int *)(a1 + 196);
        v39 = *(_DWORD *)(a1 + 208);
        v40 = v38 * v37 + v39 * v33;
        v41 = (float *)(*(_QWORD *)a1 + 4 * (v40 + *(_DWORD *)(a1 + 204)));
        __A.realp = (float *)(*(_QWORD *)a1 + 4 * v40);
        __A.imagp = v41;
        v42 = *(_QWORD *)(a1 + 48);
        __B.realp = (float *)(v42 + 4 * v38 * v37);
        __B.imagp = (float *)(v42 + 4 * (v38 * v37 + v39));
        vDSP_zvma(&__D, 1, &__B, 1, &__A, 1, &__A, 1, v38);
        ++v37;
        v43 = *(_DWORD *)(a1 + 192);
      }
      while (v37 < v43);
      ++v33;
    }
    while (v33 < v43);
  }
}

void std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100](vDSP_DFT_SetupStruct **a1, vDSP_DFT_SetupStruct *a2)
{
  vDSP_DFT_SetupStruct *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    vDSP_DFT_DestroySetup(v3);
}

char *ecRMDF::ec_state_reset(ecRMDF *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  std::vector<unsigned int>::value_type __u;

  *((_BYTE *)this + 128) = *((_BYTE *)this + 129);
  v2 = *(_DWORD *)this;
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 31) = v2;
  *((_DWORD *)this + 36) = 1065353216;
  v3 = *((unsigned int *)this + 9);
  LOBYTE(__u) = 1;
  std::vector<BOOL>::assign((uint64_t)this + 368, v3, &__u);
  v4 = *((unsigned int *)this + 8);
  LOBYTE(__u) = 1;
  std::vector<BOOL>::assign((uint64_t)this + 392, v4, &__u);
  v5 = (2 * *((_DWORD *)this + 13));
  __u = 0;
  std::vector<float>::assign((char **)this + 52, v5, &__u);
  v6 = (2 * *((_DWORD *)this + 13));
  __u = 0;
  std::vector<float>::assign((char **)this + 55, v6, &__u);
  v7 = (2 * *((_DWORD *)this + 13));
  __u = 0;
  std::vector<float>::assign((char **)this + 58, v7, &__u);
  v8 = *((unsigned int *)this + 13);
  __u = 0;
  std::vector<float>::assign((char **)this + 61, v8, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 67, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 70, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 73, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 76, *((_DWORD *)this + 8), 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 79, *((_DWORD *)this + 9), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 656, *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 680, *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 704, *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 728, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), *((float *)this + 5));
  ecutils::fcn_vector_init<float>((uint64_t)this + 800, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 824, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 752, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 776, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 10), 0.0);
  v9 = *(unsigned int *)this;
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 848), v9, &__u);
  v10 = *((unsigned int *)this + 13);
  __u = 0;
  std::vector<float>::assign((char **)this + 31, v10, &__u);
  v11 = *((unsigned int *)this + 13);
  __u = 0;
  std::vector<float>::assign((char **)this + 34, v11, &__u);
  v12 = *((unsigned int *)this + 9);
  __u = 0;
  std::vector<float>::assign((char **)this + 37, v12, &__u);
  v13 = *((unsigned int *)this + 12);
  __u = 0;
  std::vector<float>::assign((char **)this + 40, v13, &__u);
  v14 = (2 * *((_DWORD *)this + 13));
  __u = 0;
  std::vector<float>::assign((char **)this + 43, v14, &__u);
  v15 = *((unsigned int *)this + 8);
  __u = 0;
  std::vector<float>::assign((char **)this + 25, v15, &__u);
  v16 = *((unsigned int *)this + 8);
  __u = 0;
  std::vector<float>::assign((char **)this + 28, v16, &__u);
  v17 = *((unsigned int *)this + 8);
  if (*((float *)this + 40) >= 1.0)
    __u = *((_DWORD *)this + 29);
  else
    __u = 1065353216;
  result = std::vector<float>::assign((char **)this + 22, v17, &__u);
  LODWORD(v19) = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    v20 = 0;
    v21 = *((_QWORD *)this + 106);
    v22 = -1;
    do
    {
      *(_DWORD *)(v21 + 4 * v20++) = v19 + v22;
      v19 = *(unsigned int *)this;
      --v22;
    }
    while (v20 < v19);
  }
  return result;
}

void ecRMDF::fcnGetError(uint64_t a1, unsigned int a2, DSPComplex **a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  vDSP_Length __N;
  uint64_t v15;
  const vDSP_DFT_SetupStruct *v16;
  float *v17;
  uint64_t v18;
  DSPSplitComplex __B;
  DSPSplitComplex __D;
  DSPSplitComplex __A;

  v5 = a2;
  v6 = 3 * a2;
  vDSP_vclr(*(float **)(*(_QWORD *)(a1 + 608) + 24 * a2), 1, *(unsigned int *)(a1 + 64));
  v7 = *(float **)(*(_QWORD *)(a1 + 608) + 8 * v6);
  v8 = &v7[*(unsigned int *)(a1 + 52)];
  __D.realp = v7;
  __D.imagp = v8;
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9)
  {
    v10 = 0;
    LODWORD(v11) = *(_DWORD *)(a1 + 124);
    do
    {
      v12 = *(unsigned int *)(a1 + 120);
      if (v12 < v11)
      {
        v13 = 24 * v12;
        do
        {
          __A.realp = 0;
          __A.imagp = 0;
          __N = *(unsigned int *)(a1 + 52);
          __A.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 656) + 24 * v10)
                                + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 848) + 4 * v12));
          __A.imagp = &__A.realp[__N];
          __B.realp = 0;
          __B.imagp = 0;
          __B.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 800) + 24 * v5) + 24 * v10) + v13);
          __B.imagp = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 824) + 24 * v5) + 24 * v10) + v13);
          vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
          ++v12;
          v11 = *(unsigned int *)(a1 + 124);
          v13 += 24;
        }
        while (v12 < v11);
        v9 = *(unsigned int *)(a1 + 36);
      }
      ++v10;
    }
    while (v10 < v9);
    v7 = *(float **)(*(_QWORD *)(a1 + 608) + 24 * v5);
  }
  v15 = *(unsigned int *)(a1 + 72);
  v16 = *(const vDSP_DFT_SetupStruct **)(a1 + 880);
  v17 = &v7[(v15 + 1)];
  *v17 = v7[v15];
  __A.realp = v7;
  __A.imagp = v17;
  vDSP_DFT_Execute(v16, v7, v17, v7, v17);
  vDSP_ztoc(&__A, 1, *a3, 2, *(unsigned int *)(a1 + 72));
  vDSP_vsmul((const float *)*a3, 1, (const float *)(a1 + 56), (float *)*a3, 1, *(unsigned int *)(a1 + 48));
  vDSP_vclr((float *)*a3, 1, *(unsigned int *)(a1 + 40));
  v18 = 3 * v5;
  vDSP_vadd((const float *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v18) + 4 * *(unsigned int *)(a1 + 40)), 1, (const float *)*a3 + *(unsigned int *)(a1 + 40), 1, (float *)*a3 + *(unsigned int *)(a1 + 40), 1, *(unsigned int *)(a1 + 40));
  ecRMDF::fcnOlsAnaly(a1, *(const vDSP_DFT_SetupStruct **)(a1 + 872), *a3, (float **)(*(_QWORD *)(a1 + 608) + 8 * v18));
}

float ecRMDF::fcnUpdateFilter(ecRMDF *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  vDSP_Length __N;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float result;
  DSPSplitComplex __D;
  DSPSplitComplex __A;
  DSPSplitComplex __B;

  v5 = 24 * a2;
  __N = *((unsigned int *)this + 13);
  v7 = (float *)(*(_QWORD *)(*((_QWORD *)this + 76) + v5) + 4 * __N);
  __B.realp = *(float **)(*((_QWORD *)this + 76) + v5);
  __B.imagp = v7;
  v8 = 24 * a3;
  v9 = 24 * a4;
  v10 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 88) + v8) + v9) + 4 * __N);
  __A.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 88) + v8) + v9);
  __A.imagp = v10;
  __D.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 100) + v5) + v8) + v9);
  __D.imagp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 103) + v5) + v8) + v9);
  vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
  **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 103) + v5) + v8) + v9) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 100) + v5) + v8) + v9)
                                                                                              + 4
                                                                                              * *((unsigned int *)this
                                                                                                + 18));
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 110), __D.realp, __D.imagp, __D.realp, __D.imagp);
  vDSP_vclr(&__D.realp[*((unsigned int *)this + 19)], 1, *((unsigned int *)this + 19));
  vDSP_vclr(&__D.imagp[*((unsigned int *)this + 19)], 1, *((unsigned int *)this + 19));
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 94) + v5) + v8) + v9), __D.realp, 4 * *((unsigned int *)this + 19));
  memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 94) + v5) + v8) + v9)+ 4 * *((unsigned int *)this + 19)), __D.imagp, 4 * *((unsigned int *)this + 19));
  vDSP_vsmul(__D.realp, 1, (const float *)this + 20, __D.realp, 1, *((unsigned int *)this + 19));
  vDSP_vsmul(__D.imagp, 1, (const float *)this + 20, __D.imagp, 1, *((unsigned int *)this + 19));
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 109), __D.realp, __D.imagp, __D.realp, __D.imagp);
  v11 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 103) + v5) + v8) + v9);
  result = *v11;
  *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 100) + v5) + v8) + v9)
           + 4 * *((unsigned int *)this + 18)) = *v11;
  *v11 = 0.0;
  return result;
}

void ecRMDF::fcnOlsAnaly(uint64_t a1, const vDSP_DFT_SetupStruct *a2, DSPComplex *__C, float **a4)
{
  vDSP_Length v7;
  float *v8;
  uint64_t v9;
  float *v10;
  DSPSplitComplex v11;

  v7 = *(unsigned int *)(a1 + 72);
  v8 = &(*a4)[(v7 + 1)];
  v11.realp = *a4;
  v11.imagp = v8;
  vDSP_ctoz(__C, 2, &v11, 1, v7);
  vDSP_DFT_Execute(a2, v11.realp, v11.imagp, v11.realp, v11.imagp);
  v9 = *(unsigned int *)(a1 + 72);
  v10 = *a4;
  (*a4)[v9] = (*a4)[(v9 + 1)];
  v10[(v9 + 1)] = 0.0;
  LODWORD(v9) = *(_DWORD *)(a1 + 48);
  v10[(v9 + 1)] = 0.0;
  vDSP_vsmul(v10, 1, (const float *)(a1 + 60), v10, 1, (v9 + 2));
}

double CResidualSuppressorV4::speex_preprocess_state_res_initV4(CResidualSuppressorV4 *this)
{
  char *v1;
  double result;
  std::bad_alloc *exception;
  std::bad_alloc *v4;

  v1 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
  if (!v1)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
  }
  *((_DWORD *)v1 + 7) = 0;
  result = 4.42172753e-75;
  *(_OWORD *)(v1 + 12) = xmmword_1B66A1F10;
  *((_DWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = 0;
  return result;
}

void CResidualSuppressorV4::speex_preprocess_run_res_estimator(uint64_t a1, const float **a2, uint64_t a3)
{
  vDSP_Length v6;
  vDSP_Length v7;
  const void *v8;
  const float *v9;
  float *v10;
  const float *v11;
  float *v12;
  int v13;
  int v14;
  float *v15;
  float *v17;
  const float *v18;
  float *v19;
  float *v20;
  int v21;
  float v22;
  float __B;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = (v6 + *(_DWORD *)(a1 + 16));
  v8 = *(const void **)(a1 + 104);
  v9 = *a2;
  v10 = *(float **)(a1 + 624);
  v22 = 1.0e-20;
  __B = 32768.0;
  vDSP_vsmul(v9, 1, &__B, v10, 1, v6);
  v11 = a2[1];
  v12 = *(float **)(a1 + 632);
  __B = 32768.0;
  vDSP_vsmul(v11, 1, &__B, v12, 1, v6);
  v13 = *(_DWORD *)(a1 + 328);
  if (v13 + 1 < (int)(float)((float)((float)*(int *)(a1 + 12) * 30.0) / (float)v6))
    v14 = v13 + 1;
  else
    v14 = (int)(float)((float)((float)*(int *)(a1 + 12) * 30.0) / (float)v6);
  *(_DWORD *)(a1 + 328) = v14;
  ++*(_DWORD *)(a1 + 332);
  CResidualSuppressorV3::preprocess_analysis_freq(a1, *(_QWORD *)(a1 + 624), *(const void **)(a1 + 632));
  vDSP_vclr(*(float **)(a1 + 136), 1, v7);
  if (*(int *)a1 > 2)
  {
    v19 = *(float **)(a1 + 104);
    v20 = *(float **)(a1 + 648);
  }
  else
  {
    v15 = *(float **)(a1 + 256);
    if (*v15 < 0.0 || *v15 >= (float)((float)v6 * 1000000000.0))
      vDSP_vclr(v15, 1, v6);
    if (*(_BYTE *)(a1 + 736))
    {
      vDSP_vsmul(*(const float **)(a1 + 104), 1, (const float *)(a1 + 740), *(float **)(a1 + 744), 1, v6);
      v17 = *(float **)(a1 + 256);
      v18 = *(const float **)(a1 + 744);
    }
    else
    {
      v17 = *(float **)(a1 + 256);
      v18 = *(const float **)(a1 + 104);
    }
    vDSP_vmin(v17, 1, v18, 1, v17, 1, v6);
    memcpy(*(void **)(a1 + 640), *(const void **)(a1 + 256), 4 * v6);
    vDSP_vsadd(*(const float **)(a1 + 640), 1, &v22, *(float **)(a1 + 640), 1, v6);
    vDSP_vsub(*(const float **)(a1 + 256), 1, *(const float **)(a1 + 104), 1, *(float **)(a1 + 648), 1, v6);
    v19 = *(float **)(a1 + 648);
    v20 = v19;
    if (*(_BYTE *)(a1 + 736))
    {
      vDSP_vthr(v19, 1, &v22, v19, 1, v6);
      goto LABEL_17;
    }
  }
  vDSP_vsadd(v19, 1, &v22, v20, 1, v6);
LABEL_17:
  if (*(_DWORD *)(a1 + 540) != 1 && !*(_DWORD *)a1)
    goto LABEL_24;
  CResidualSuppressorV3::EstimateNoise(a1, *(const float **)(a1 + 648));
  if (*(_DWORD *)(a3 + 8) == 1 && *(_QWORD *)a3)
    vDSP_vmin(*(const float **)(a1 + 136), 1, *(const float **)a3, 1, *(float **)(a1 + 136), 1, v6);
  if (!*(_DWORD *)a1
    || (CFilterBank::filterbank_compute_bank32(*(_QWORD *)(a1 + 24), *(const float **)(a1 + 136), (float *)(*(_QWORD *)(a1 + 136) + 4 * v6)), v21 = *(_DWORD *)a1, *(int *)a1 < 2))
  {
LABEL_24:
    if (*(_DWORD *)(a1 + 496) == 1)
      CResidualSuppressorV3::AdjustResidual(a1);
    if (!*(_BYTE *)(a1 + 736))
    {
      vDSP_vsub(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 104), 1, *(float **)(a1 + 744), 1, v6);
      vDSP_vmin(*(const float **)(a1 + 744), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v6);
      vDSP_vmax(*(const float **)(a1 + 256), 1, *(const float **)(a1 + 640), 1, *(float **)(a1 + 256), 1, v6);
    }
    v21 = *(_DWORD *)a1;
  }
  if (v21 <= 2)
  {
    __B = 0.6;
    vDSP_vsmul(*(const float **)(a1 + 248), 1, &__B, *(float **)(a1 + 248), 1, v6);
    vDSP_vmax(*(const float **)(a1 + 248), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 248), 1, v6);
    CFilterBank::filterbank_compute_bank32(*(_QWORD *)(a1 + 24), *(const float **)(a1 + 248), (float *)(*(_QWORD *)(a1 + 248) + 4 * v6));
  }
  if (*(_DWORD *)(a1 + 328) == 1)
    memcpy(*(void **)(a1 + 152), v8, 4 * v7);
}

void *CResidualSuppressorV4::speex_preprocess_run_freq(uint64_t a1, float **a2, float **a3, float **a4, uint64_t a5, float *a6, uint64_t a7)
{
  unsigned int v13;

  v13 = *(_DWORD *)a1;
  if (*(int *)a1 < 1
    || (*(_DWORD *)(a1 + 572) = 0, v13 == 1)
    || (*(_DWORD *)(a1 + 496) = 0, *(_DWORD *)(a1 + 540) = 0, v13 <= 2))
  {
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, *a2, a2[1], *a3, a3[1], a6);
    CResidualSuppressorV3::GetResidualForSuppressor(a1, a4);
  }
  *(_QWORD *)(a1 + 304) = a5;
  *(_QWORD *)a6 = a7;
  CResidualSuppressorV4::speex_preprocess_run_res_estimator(a1, (const float **)a2, (uint64_t)a6);
  return CResidualSuppressorV3::speex_preprocess_run_res_suppressor(a1);
}

void CResidualSuppressorV4::GetLeakageForSuppressor(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  VPEchoGateV3 *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  vDSP_Length v16;
  float *v17;
  float v18;
  float v19;
  const float *v20;
  vDSP_Length v21;
  const float *v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float *v30;
  vDSP_Length v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  _DWORD *v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  vDSP_Length v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  int v47;
  vDSP_Length v48;
  int v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned int v65;
  float v66;
  unsigned int v67;
  vDSP_Length v68;
  float *v69;
  float *v70;
  vDSP_Length v71;
  uint64_t v72;
  _DWORD *v73;
  float *v74;
  vDSP_Length *v75;
  float *v76;
  float *v77;
  VPEchoGateV3 *v78;
  VPEchoGateV3 *v79;
  float *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t __B;
  uint64_t __C;
  float v85;
  DSPSplitComplex __A;
  uint64_t v87;

  v74 = a6;
  v87 = *MEMORY[0x1E0C80C00];
  v85 = 0.001;
  v12 = *(_QWORD *)(a1 + 408);
  v11 = *(VPEchoGateV3 **)(a1 + 416);
  v13 = *(_QWORD *)(a1 + 432);
  v77 = *(float **)(a1 + 424);
  v78 = v11;
  v14 = *(float **)(a1 + 448);
  v15 = *(float *)(a1 + 400);
  v16 = *(int *)(a1 + 4);
  v17 = (float *)*(unsigned int *)(a1 + 460);
  v79 = *(VPEchoGateV3 **)(a1 + 440);
  v80 = v17;
  v18 = *(float *)(a1 + 368);
  v19 = *(float *)(a1 + 372);
  __C = 0;
  __B = 0;
  v20 = *(const float **)(a1 + 480);
  __A.realp = a2;
  __A.imagp = a3;
  vDSP_zvmags(&__A, 1, (float *)v12, 1, v16);
  *(float *)v12 = *a2 * *a2;
  *(float *)(v12 + 4 * v16) = *a3 * *a3;
  __A.realp = a4;
  __A.imagp = a5;
  vDSP_zvmags(&__A, 1, (float *)v13, 1, v16);
  *(float *)v13 = *a4 * *a4;
  *(float *)(v13 + 4 * v16) = *a5 * *a5;
  vDSP_sve((const float *)(v12 + 4), 1, (float *)&__C + 1, v16 - 1);
  vDSP_sve((const float *)(v13 + 4), 1, (float *)&__C, v16 - 1);
  *((float *)&__C + 1) = (float)(*(float *)v12 + (float)(*((float *)&__C + 1) * 2.0)) + *(float *)(v12 + 4 * v16);
  *(float *)&__C = (float)(*(float *)v13 + (float)(*(float *)&__C * 2.0)) + *(float *)(v13 + 4 * v16);
  *(_DWORD *)(a1 + 560) = __C;
  v21 = (int)v80;
  v22 = (const float *)v12;
  v23 = v77;
  vDSP_vmul(v22, 1, v20, 1, v77, 1, (int)v80);
  vDSP_vmul((const float *)v13, 1, v20, 1, v14, 1, (int)v80);
  v75 = &v68;
  MEMORY[0x1E0C80A78](v24);
  v26 = (float *)((char *)&v68 - ((v25 + 15) & 0x7FFFFFFF0));
  MEMORY[0x1E0C80A78](v27);
  v29 = (float *)((char *)&v68 - v28);
  v76 = v14;
  vDSP_vsub((const float *)v79, 1, v14, 1, v26, 1, v21);
  vDSP_vsub((const float *)v78, 1, v23, 1, v29, 1, v21);
  v30 = v26;
  vDSP_vmul(v26, 1, v29, 1, v29, 1, v21);
  LODWORD(__A.realp) = 813694978;
  v31 = *(unsigned int *)(a1 + 584);
  v82 = 0;
  v80 = *(float **)(a1 + 608);
  v32 = *(float **)(a1 + 600);
  v34 = *(float **)(a1 + 376);
  v33 = *(float **)(a1 + 384);
  v35 = *(float **)(a1 + 392);
  v72 = a1;
  v36 = *(_DWORD **)(a1 + 592);
  v81 = 0;
  v73 = v36;
  if ((_DWORD)v31 == 1)
  {
    vDSP_svesq(v30, 1, (float *)&v82 + 1, v21);
    vDSP_sve(v29, 1, (float *)&v82, v21);
    *(float *)&v82 = *(float *)&v82 + 8.6736e-19;
    v37 = *(float *)&v82;
    *((float *)&v82 + 1) = *((float *)&v82 + 1) + 8.6736e-19;
    v38 = sqrtf(*((float *)&v82 + 1));
    v39 = v80;
    *v80 = v38;
    v40 = v37 / v38;
    *v32 = v37 / v38;
    v41 = v31;
  }
  else
  {
    v69 = v34;
    v70 = v33;
    v71 = v21;
    v42 = v36[1];
    HIDWORD(v81) = 0;
    vDSP_svesq(v30, 1, (float *)&v81 + 1, (v42 + 1));
    vDSP_sve(v29, 1, (float *)&v81, (v42 + 1));
    v43 = 0;
    v68 = v31;
    v44 = (v31 - 1);
    v46 = *((float *)&v81 + 1);
    v45 = *(float *)&v81;
    do
    {
      v47 = v36[(v43 + 2)];
      v48 = (v47 - v42);
      v49 = v42 + 1;
      vDSP_svesq(&v30[v49], 1, (float *)&v81 + 1, v48);
      vDSP_sve(&v29[v49], 1, (float *)&v81, v48);
      v50 = v81;
      v51 = (float)(v45 + *(float *)&v81) + 8.6736e-19;
      *(float *)&v82 = v51;
      *((float *)&v82 + 1) = (float)(v46 + *((float *)&v81 + 1)) + 8.6736e-19;
      v52 = sqrtf(*((float *)&v82 + 1));
      v80[v43] = v52;
      v32[v43++] = v51 / v52;
      LODWORD(v46) = HIDWORD(v50);
      LODWORD(v45) = v50;
      v42 = v47;
    }
    while (v44 != v43);
    v41 = v68;
    v39 = v80;
    v80[v44] = v80[(v68 - 2)];
    v32[v44] = v32[(v41 - 2)];
    v40 = *v32;
    v21 = v71;
    v33 = v70;
    v34 = v69;
  }
  v53 = v18 * *(float *)&__C;
  v54 = *((float *)&__C + 1);
  if ((float)(v18 * *(float *)&__C) > (float)(v19 * *((float *)&__C + 1)))
    v53 = v19 * *((float *)&__C + 1);
  v55 = v53 / *((float *)&__C + 1);
  if (*((float *)&__C + 1) >= 9.3132e-19)
    v56 = v55;
  else
    v56 = v19;
  *(float *)&__B = 1.0 - v56;
  *((float *)&__B + 1) = v56;
  v57 = v74;
  v58 = v74[4];
  v59 = (float)(v40 * v56) + (float)((float)(1.0 - v56) * v74[3]);
  v74[3] = v59;
  v60 = fmaxf((float)(v56 * *v39) + (float)((float)(1.0 - v56) * v58), 9.3132e-10);
  if (v59 <= (float)(v85 * v60))
    v59 = v85 * v60;
  if (v59 >= v60)
    v59 = v60;
  v57[3] = v59;
  v57[4] = v60;
  if ((float)(v59 / v60) < v57[5] && *(float *)(v72 + 556) < v57[6])
  {
    v61 = v55 / 30.0;
    if (v54 >= 9.3132e-19)
      v62 = v61;
    else
      v62 = v19;
    *((float *)&__B + 1) = v62;
    *(float *)&__B = 1.0 - v62;
  }
  vDSP_vsmul(v32, 1, (const float *)&__B + 1, v32, 1, v41);
  vDSP_vsma(v34, 1, (const float *)&__B, v32, 1, v34, 1, v41);
  vDSP_vsmul(v39, 1, (const float *)&__B + 1, v39, 1, v41);
  vDSP_vsma(v33, 1, (const float *)&__B, v39, 1, v33, 1, v41);
  vDSP_vthr(v33, 1, (const float *)&__A, v33, 1, v41);
  vDSP_vsmul(v33, 1, &v85, v30, 1, v41);
  vDSP_vmax(v30, 1, v34, 1, v34, 1, v41);
  vDSP_vmin(v34, 1, v33, 1, v34, 1, v41);
  v63 = v73;
  if ((_DWORD)v41)
  {
    v64 = 0;
    v65 = *v73;
    do
    {
      if (v64)
      {
        v66 = v34[v64] / v33[v64];
        if (v66 <= *v35)
          v66 = *v35;
      }
      else
      {
        v66 = *v34 / *v33;
      }
      v67 = v63[++v64];
      while (v65 <= v67)
        v35[v65++] = v66;
      v65 = v67;
    }
    while (v64 != v41);
  }
  VPEchoGateV3::GatesmoothPowerSpectrum(v78, v77, (const float *)v21, v15);
  VPEchoGateV3::GatesmoothPowerSpectrum(v79, v76, (const float *)v21, v15);
}

void CResidualSuppressorV4::speex_preprocess_run(uint64_t a1, char *a2, float **a3, float **a4, uint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  DSPSplitComplex v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v18.realp = (float *)((char *)&v17 - v15);
  v18.imagp = (float *)((char *)&v17 + 4 * v14 - v15);
  if (v16)
  {
    CResidualSuppressorV3::speex_analysis(a1, a2, &v18);
    CResidualSuppressorV4::speex_preprocess_run_freq(a1, &v18.realp, a3, a4, a5, a6, a7);
    CResidualSuppressorV3::speex_synthesis(a1, (float *)a2);
  }
  else
  {
    CResidualSuppressorV4::speex_preprocess_run_freq(a1, &v18.realp, a3, a4, a5, a6, a7);
  }
}

void AUECSUMO::~AUECSUMO(AUECSUMO *this)
{
  AUECSUMO::~AUECSUMO(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69D2668;
  AUECSUMO::Cleanup(this);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 105, 0);
  v2 = (void *)*((_QWORD *)this + 102);
  if (v2)
  {
    *((_QWORD *)this + 103) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 99);
  if (v3)
  {
    *((_QWORD *)this + 100) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 96);
  if (v4)
  {
    *((_QWORD *)this + 97) = v4;
    operator delete(v4);
  }
  std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 624));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECSUMO::Initialize(AUECSUMO *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  uint64_t result;
  uint64_t v14;
  double v15;
  int v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  float Parameter;
  uint64_t v76;
  ausdk::AUElement *v77;
  unsigned int v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  unsigned int v98;
  unsigned int v99;
  float v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  unsigned int v105;
  float v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  _BOOL8 v110;
  double AppFloatValue;
  float v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  unsigned int v120;
  BOOL v121;
  _BYTE buf[12];
  __int16 v123;
  int v124;
  __int16 v125;
  double v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUECSUMO.cpp";
    v123 = 1024;
    v124 = 219;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Initialize.\n", buf, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 1u);
  v5 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 2u);
  v6 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 0);
  v7 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 1u);
  v8 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 2u);
  v9 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 3u);
  v10 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v10;
  v11 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v11;
  *((_DWORD *)this + 140) = *(_DWORD *)(v5 + 108);
  v12 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v12;
  if (v12 != *(double *)(v4 + 80))
    return 4294956428;
  v14 = v9;
  v15 = *(double *)(v6 + 80);
  result = 4294956428;
  if (v15 == v12 && v15 == *(double *)(v8 + 80) && v15 == *(double *)(v7 + 80))
  {
    v16 = *(_DWORD *)(v6 + 108);
    if (v16 == v10 && v16 == *(_DWORD *)(v7 + 108) && v11 == *(_DWORD *)(v8 + 108) && *(_DWORD *)(v14 + 108) == v10)
    {
      v17 = *((_QWORD *)this + 9);
      if (v17)
      {
        v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
      }
      else
      {
        v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v19)
          v18 = 0;
        else
          v18 = *v19;
      }
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v18, 0);
      v20 = *((_QWORD *)this + 9);
      if (v20)
      {
        v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
      }
      else
      {
        v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v22)
          v21 = 0;
        else
          v21 = *v22;
      }
      *((float *)this + 179) = ausdk::AUElement::GetParameter(v21, 1u);
      v23 = *((_QWORD *)this + 9);
      if (v23)
      {
        v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
      }
      else
      {
        v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v25)
          v24 = 0;
        else
          v24 = *v25;
      }
      *((float *)this + 180) = ausdk::AUElement::GetParameter(v24, 2u);
      v26 = *((_QWORD *)this + 9);
      if (v26)
      {
        v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
      }
      else
      {
        v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v28)
          v27 = 0;
        else
          v27 = *v28;
      }
      *((float *)this + 181) = ausdk::AUElement::GetParameter(v27, 3u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      v29 = *((_QWORD *)this + 9);
      if (v29)
      {
        v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
      }
      else
      {
        v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v31)
          v30 = 0;
        else
          v30 = *v31;
      }
      *((float *)this + 182) = ausdk::AUElement::GetParameter(v30, 4u);
      v32 = *((_QWORD *)this + 9);
      if (v32)
      {
        v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
      }
      else
      {
        v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v34)
          v33 = 0;
        else
          v33 = *v34;
      }
      *((float *)this + 183) = ausdk::AUElement::GetParameter(v33, 5u);
      v35 = *((_QWORD *)this + 9);
      if (v35)
      {
        v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
      }
      else
      {
        v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v37)
          v36 = 0;
        else
          v36 = *v37;
      }
      *((float *)this + 184) = ausdk::AUElement::GetParameter(v36, 6u);
      v38 = *((_QWORD *)this + 9);
      if (v38)
      {
        v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
      }
      else
      {
        v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v40)
          v39 = 0;
        else
          v39 = *v40;
      }
      *((float *)this + 185) = ausdk::AUElement::GetParameter(v39, 7u);
      v41 = *((_QWORD *)this + 9);
      if (v41)
      {
        v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
      }
      else
      {
        v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v43)
          v42 = 0;
        else
          v42 = *v43;
      }
      *((_DWORD *)this + 186) = ausdk::AUElement::GetParameter(v42, 0xAu);
      v44 = *((_QWORD *)this + 9);
      if (v44)
      {
        v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
      }
      else
      {
        v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v46)
          v45 = 0;
        else
          v45 = *v46;
      }
      *((_BYTE *)this + 692) = ausdk::AUElement::GetParameter(v45, 0x15u) != 0.0;
      v47 = *((_QWORD *)this + 9);
      if (v47)
      {
        v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
      }
      else
      {
        v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v49)
          v48 = 0;
        else
          v48 = *v49;
      }
      *((_BYTE *)this + 693) = ausdk::AUElement::GetParameter(v48, 0x17u) != 0.0;
      v50 = *((_QWORD *)this + 9);
      if (v50)
      {
        v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
      }
      else
      {
        v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v52)
          v51 = 0;
        else
          v51 = *v52;
      }
      *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v51, 0x18u);
      v53 = *((_QWORD *)this + 9);
      if (v53)
      {
        v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
      }
      else
      {
        v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v55)
          v54 = 0;
        else
          v54 = *v55;
      }
      *((_DWORD *)this + 175) = ausdk::AUElement::GetParameter(v54, 0x19u);
      v56 = *((_QWORD *)this + 9);
      if (v56)
      {
        v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
      }
      else
      {
        v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v58)
          v57 = 0;
        else
          v57 = *v58;
      }
      *((_BYTE *)this + 712) = ausdk::AUElement::GetParameter(v57, 0x1Du) != 0.0;
      v59 = *((_QWORD *)this + 9);
      if (v59)
      {
        v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
      }
      else
      {
        v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v61)
          v60 = 0;
        else
          v60 = *v61;
      }
      *((_BYTE *)this + 713) = ausdk::AUElement::GetParameter(v60, 0x1Eu) != 0.0;
      LODWORD(v62) = *((_DWORD *)this + 139);
      v63 = (exp2((double)v62) + -1.0);
      v64 = *((_DWORD *)this + 186);
      if (v64 > v63)
      {
        v65 = v64 & v63;
        *((_DWORD *)this + 186) = v65;
        v66 = *((_QWORD *)this + 9);
        if (v66)
        {
          v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
          v65 = *((_DWORD *)this + 186);
        }
        else
        {
          v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v68)
            v67 = 0;
          else
            v67 = *v68;
        }
        ausdk::AUElement::SetParameter(v67, 0xAu, (float)v65, 0);
      }
      v69 = *((_QWORD *)this + 9);
      if (v69)
      {
        v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
      }
      else
      {
        v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v71)
          v70 = 0;
        else
          v70 = *v71;
      }
      *((_DWORD *)this + 187) = ausdk::AUElement::GetParameter(v70, 0xBu);
      v72 = *((_QWORD *)this + 9);
      if (v72)
      {
        v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
      }
      else
      {
        v74 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v74)
          v73 = 0;
        else
          v73 = *v74;
      }
      Parameter = ausdk::AUElement::GetParameter(v73, 0xCu);
      *((_DWORD *)this + 147) = Parameter;
      if (Parameter <= 1)
      {
        *((_DWORD *)this + 147) = 2;
        v76 = *((_QWORD *)this + 9);
        if (v76)
        {
          v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
          v78 = *((_DWORD *)this + 147);
        }
        else
        {
          v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v79)
            v77 = 0;
          else
            v77 = *v79;
          v78 = 2;
        }
        ausdk::AUElement::SetParameter(v77, 0xCu, (float)v78, 0);
      }
      v80 = *((_QWORD *)this + 9);
      if (v80)
      {
        v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
      }
      else
      {
        v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v82)
          v81 = 0;
        else
          v81 = *v82;
      }
      *((_DWORD *)this + 188) = ausdk::AUElement::GetParameter(v81, 0xDu);
      v83 = *((_QWORD *)this + 9);
      if (v83)
      {
        v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
      }
      else
      {
        v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v85)
          v84 = 0;
        else
          v84 = *v85;
      }
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v84, 0xEu);
      v86 = *((_QWORD *)this + 9);
      if (v86)
      {
        v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
      }
      else
      {
        v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v88)
          v87 = 0;
        else
          v87 = *v88;
      }
      *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(v87, 0x12u);
      v89 = *((_QWORD *)this + 9);
      if (v89)
      {
        v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
      }
      else
      {
        v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v91)
          v90 = 0;
        else
          v90 = *v91;
      }
      *((float *)this + 150) = ausdk::AUElement::GetParameter(v90, 0x13u);
      v92 = *((_QWORD *)this + 9);
      if (v92)
      {
        v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
      }
      else
      {
        v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v94)
          v93 = 0;
        else
          v93 = *v94;
      }
      *((float *)this + 151) = ausdk::AUElement::GetParameter(v93, 0x14u);
      v95 = *((_QWORD *)this + 9);
      if (v95)
      {
        v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
      }
      else
      {
        v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v97)
          v96 = 0;
        else
          v96 = *v97;
      }
      v98 = ausdk::AUElement::GetParameter(v96, 8u);
      *((_DWORD *)this + 143) = v98;
      v99 = *((_DWORD *)this + 137);
      v100 = (float)*((unsigned int *)this + 136);
      v101 = (float)v99;
      v102 = v99
           * vcvtps_u32_f32((float)(float)((float)(v100 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v99);
      *((_DWORD *)this + 141) = v102;
      if (v102 <= v99)
      {
        v102 = 2 * v99;
        *((_DWORD *)this + 141) = 2 * v99;
        *((_DWORD *)this + 135) = (float)((float)((float)(2 * v99) / v100) * 1000.0);
      }
      v103 = v99 * vcvtps_u32_f32((float)(float)((float)(v100 * (float)v98) / 1000.0) / v101);
      *((_DWORD *)this + 142) = v103;
      if (v103 <= v99)
      {
        v103 = 2 * v99;
        *((_DWORD *)this + 142) = 2 * v99;
        *((_DWORD *)this + 143) = (float)((float)((float)(2 * v99) / v100) * 1000.0);
      }
      if (v103 <= v102)
      {
        v104 = (float)v102;
      }
      else
      {
        *((_DWORD *)this + 142) = v102;
        v104 = (float)v102;
        *((_DWORD *)this + 143) = (float)((float)((float)v102 / v100) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v104 / v101);
      v105 = v99
           * vcvtps_u32_f32((float)(float)((float)(v100 * (float)*((unsigned int *)this + 175)) / 1000.0) / v101);
      *((_DWORD *)this + 176) = v105;
      if (v105 <= v99)
      {
        *((_DWORD *)this + 176) = v99;
        *((_DWORD *)this + 175) = (float)((float)(v101 / v100) * 1000.0);
        v106 = (float)v99;
      }
      else
      {
        v106 = (float)v105;
      }
      *((_DWORD *)this + 177) = vcvtps_u32_f32(v106 / v101);
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      v107 = *((_QWORD *)this + 9);
      if (v107)
      {
        v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
      }
      else
      {
        v109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v109)
          v108 = 0;
        else
          v108 = *v109;
      }
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v108, 9u);
      *((_OWORD *)this + 38) = 0u;
      v121 = 0;
      AppFloatValue = CACFPreferencesGetAppFloatValue(CFSTR("ecsumo_log_period_in_seconds"), CFSTR("com.apple.coreaudio"), &v121);
      if (v121)
      {
        v112 = AppFloatValue;
        if (v112 > 0.0)
        {
          *((double *)this + 72) = v112;
          v113 = *((_QWORD *)this + 9);
          if (v113)
          {
            v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
          }
          else
          {
            v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v115)
              v114 = 0;
            else
              v114 = *v115;
          }
          ausdk::AUElement::SetParameter(v114, 9u, v112, 0);
          if (AUECSUMOLogScope(void)::once != -1)
            dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
          if (AUECSUMOLogScope(void)::scope)
          {
            v116 = *(NSObject **)AUECSUMOLogScope(void)::scope;
            if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
              goto LABEL_179;
          }
          else
          {
            v116 = MEMORY[0x1E0C81028];
          }
          v110 = os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT);
          if (v110)
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUECSUMO.cpp";
            v123 = 1024;
            v124 = 334;
            v125 = 2048;
            v126 = v112;
            _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Using logPeriod of (%g)s as specified in defaults write ecsumo_log_period_in_seconds.\n", buf, 0x1Cu);
          }
        }
      }
LABEL_179:
      if (!*((_QWORD *)this + 105) && *((double *)this + 72) > 0.0)
      {
        v120 = 0;
        v117 = caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v110);
        std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>((uint64_t *)buf, &v120, v117);
        v118 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 105, v118);
        std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)buf, 0);
      }
      AUECSUMO::DoCoreECInit(this);
      (*(void (**)(AUECSUMO *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
      if (AUECSUMOLogScope(void)::once != -1)
        dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
      if (AUECSUMOLogScope(void)::scope)
      {
        v119 = *(NSObject **)AUECSUMOLogScope(void)::scope;
        if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
          return 0;
      }
      else
      {
        v119 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUECSUMO.cpp";
        v123 = 1024;
        v124 = 350;
        _os_log_impl(&dword_1B5ED0000, v119, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Successfully initialized.\n", buf, 0x12u);
      }
      return 0;
    }
  }
  return result;
}

uint64_t *AUECSUMO::Cleanup(AUECSUMO *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUECSUMO.cpp";
    v6 = 1024;
    v7 = 411;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
  return std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
}

uint64_t AUECSUMO::Reset(AUECSUMO *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUECSUMO.cpp";
    v6 = 1024;
    v7 = 476;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 17))
    AUECSUMO::DoCoreECInit(this);
  return 0;
}

uint64_t AUECSUMO::GetPropertyInfo(AUECSUMO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 103799)
  {
    if (a2 <= 503799)
    {
      if (a2 <= 303799)
      {
        if (a2 != 103800)
        {
          v8 = 203800;
          goto LABEL_23;
        }
        *a6 = 0;
LABEL_31:
        v14 = 8;
        goto LABEL_36;
      }
      if (a2 != 303800)
      {
        v8 = 403800;
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (a2 <= 703799)
    {
      if (a2 == 503800)
      {
        *a6 = 0;
        v15 = *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146);
        v14 = 8 * (v15 + v15 * *((_DWORD *)this + 137));
        goto LABEL_36;
      }
      v9 = 603800;
      goto LABEL_28;
    }
    if (a2 != 703800)
    {
      v9 = 803800;
LABEL_28:
      if (a2 != v9)
        return result;
      *a6 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_31;
    }
    *a6 = 0;
    v13 = *((_DWORD *)this + 147);
    v12 = *((_DWORD *)this + 137);
LABEL_35:
    v14 = 4 * v13 * v12;
    goto LABEL_36;
  }
  if (a2 <= 4698)
  {
    if (a2 == 21)
    {
      *a6 = 1;
      goto LABEL_25;
    }
    if (a2 == 3700)
      goto LABEL_24;
    if (a2 != 3800)
      return result;
    *a6 = 0;
    v10 = *((_DWORD *)this + 138);
    v11 = *((_DWORD *)this + 139);
    v12 = *((_DWORD *)this + 142);
    v13 = v10 * v11;
    goto LABEL_35;
  }
  if (a2 > 6698)
  {
    if (a2 != 6699)
    {
      v8 = 7699;
LABEL_23:
      if (a2 != v8)
        return result;
    }
  }
  else if (a2 != 4699)
  {
    v8 = 5699;
    goto LABEL_23;
  }
LABEL_24:
  *a6 = 0;
LABEL_25:
  v14 = 4;
LABEL_36:
  result = 0;
  *a5 = v14;
  return result;
}

uint64_t AUECSUMO::GetProperty(AUECSUMO *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  std::mutex *v12;
  CFArrayRef CFArray;
  uint64_t v14;
  ausdk::AUElement *v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  const void *v18;
  unsigned int v19;
  uint64_t v20;
  ausdk::AUElement **v21;
  ausdk::AUElement **v22;
  ausdk::AUElement **v23;
  ausdk::AUElement **v24;
  unsigned int v25;
  float v26;
  BOOL v27;
  float v28;
  float Parameter;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 103799)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          result = 0;
          v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          result = 0;
          v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
LABEL_23:
          v12 = (std::mutex *)((char *)this + 624);
          std::mutex::lock((std::mutex *)((char *)this + 624));
          if (a2 == 103800)
          {
            CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)this + 96);
            goto LABEL_36;
          }
          v18 = (const void *)*((_QWORD *)this + 96);
          v19 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142);
          goto LABEL_47;
        default:
          return result;
      }
LABEL_69:
      *a5 = v9;
      return result;
    }
    if (a2 > 6698)
    {
      if (a2 == 6699)
      {
        v20 = *((_QWORD *)this + 9);
        if (v20)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
        }
        else
        {
          v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v24)
            v11 = 0;
          else
            v11 = *v24;
        }
        v25 = 16;
LABEL_68:
        Parameter = ausdk::AUElement::GetParameter(v11, v25);
        result = 0;
        v9 = Parameter;
        goto LABEL_69;
      }
      if (a2 != 7699)
        return result;
      v14 = *((_QWORD *)this + 9);
      if (v14)
      {
        v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
      }
      else
      {
        v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v22)
          v15 = 0;
        else
          v15 = *v22;
      }
      v26 = ausdk::AUElement::GetParameter(v15, 0x11u);
      result = 0;
      v27 = v26 == 0.0;
    }
    else
    {
      if (a2 != 4699)
      {
        if (a2 != 5699)
          return result;
        v10 = *((_QWORD *)this + 9);
        if (v10)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
        }
        else
        {
          v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v21)
            v11 = 0;
          else
            v11 = *v21;
        }
        v25 = 22;
        goto LABEL_68;
      }
      v16 = *((_QWORD *)this + 9);
      if (v16)
      {
        v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
      }
      else
      {
        v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v23)
          v17 = 0;
        else
          v17 = *v23;
      }
      v28 = ausdk::AUElement::GetParameter(v17, 0x11u);
      result = 0;
      v27 = v28 == 1.0;
    }
    v9 = v27;
    goto LABEL_69;
  }
  if (a2 <= 503799)
  {
    if (a2 > 303799)
    {
      if (a2 == 303800)
      {
        result = 0;
        v9 = *((_DWORD *)this + 139);
      }
      else
      {
        if (a2 != 403800)
          return result;
        result = 0;
        v9 = *((_DWORD *)this + 142);
      }
      goto LABEL_69;
    }
    if (a2 != 103800)
    {
      if (a2 != 203800)
        return result;
      result = 0;
      v9 = *((_DWORD *)this + 138);
      goto LABEL_69;
    }
    goto LABEL_23;
  }
  if (a2 > 703799)
  {
    if (a2 == 703800 || a2 == 803800)
    {
      v12 = (std::mutex *)((char *)this + 624);
      std::mutex::lock((std::mutex *)((char *)this + 624));
      memcpy(*((void **)this + 102), *(const void **)(*((_QWORD *)this + 95) + 200), 4* *(unsigned int *)(*((_QWORD *)this + 95) + 56)* (unint64_t)*(unsigned int *)(*((_QWORD *)this + 95) + 72));
      if (a2 == 803800)
      {
        CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)this + 102);
        goto LABEL_36;
      }
      v18 = (const void *)*((_QWORD *)this + 102);
      v19 = *((_DWORD *)this + 137) * *((_DWORD *)this + 147);
      goto LABEL_47;
    }
  }
  else if (a2 == 503800 || a2 == 603800)
  {
    v12 = (std::mutex *)((char *)this + 624);
    std::mutex::lock((std::mutex *)((char *)this + 624));
    if (a2 == 603800)
    {
      CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)this + 99);
LABEL_36:
      *(_QWORD *)a5 = CFArray;
LABEL_48:
      std::mutex::unlock(v12);
      return 0;
    }
    v18 = (const void *)*((_QWORD *)this + 99);
    v19 = 2
        * (*((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146)
         + *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137));
LABEL_47:
    memcpy(a5, v18, 4 * v19);
    goto LABEL_48;
  }
  return result;
}

void sub_1B6329E68(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECSUMO::SetProperty(AUECSUMO *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, int a6)
{
  uint64_t result;
  const __CFDictionary *v8;
  const __CFNumber *Value;
  const __CFArray *v10;
  char *v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 == 803800)
  {
    if (*((_BYTE *)this + 17))
      return 4294956447;
    if (a6 == 8)
    {
      v8 = *a5;
      Value = (const __CFNumber *)CFDictionaryGetValue(*a5, CFSTR("wolalatency"));
      CFNumberGetValue(Value, kCFNumberFloat32Type, (char *)this + 688);
      v10 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("window"));
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v13, v10);
      if (v15)
      {
        v11 = v13;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 816, v13, v14, (v14 - (uint64_t)v13) >> 2);
        *((_BYTE *)this + 756) = 1;
        if (AUECSUMOLogScope(void)::once != -1)
          dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
        if (AUECSUMOLogScope(void)::scope)
        {
          v12 = *(NSObject **)AUECSUMOLogScope(void)::scope;
          if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
            goto LABEL_24;
        }
        else
        {
          v12 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "AUECSUMO.cpp";
          v18 = 1024;
          v19 = 1124;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Window Initialized *********\n", buf, 0x12u);
        }
        goto LABEL_24;
      }
    }
    return 4294956445;
  }
  if (a2 == 603800)
  {
    if (*((_BYTE *)this + 17))
      return 4294956447;
    if (a6 == 8)
    {
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v13, *a5);
      if (v15)
      {
        v11 = v13;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 792, v13, v14, (v14 - (uint64_t)v13) >> 2);
        *((_BYTE *)this + 757) = 1;
LABEL_24:
        if (v11)
          operator delete(v11);
        return 0;
      }
    }
    return 4294956445;
  }
  if (a2 != 21)
    return 4294956417;
  result = 0;
  *((_BYTE *)this + 528) = *(_DWORD *)a5 != 0;
  return result;
}

void sub_1B632A0A0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AUECSUMO::SetParameter(AUECSUMO *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUECSUMO::CanScheduleParameters(AUECSUMO *this)
{
  return 0;
}

uint64_t AUECSUMO::ProcessMultipleBufferLists(AUECSUMO *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t result;
  const AudioBufferList *v11;
  AudioBufferList *v12;
  AudioBufferList *v13;
  AudioBufferList *v14;
  unint64_t v15;
  const void **p_mData;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  float *v22;
  float *v23;
  void *v24;
  void *v25;
  const void *v26;
  NSObject *v28;
  int v29;
  const AudioBufferList *v30;
  const AudioBufferList *v31;
  AudioBufferList *v32;
  int v33;
  uint64_t v34;
  AudioBufferList *v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  float Parameter;
  uint64_t v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  float v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  unsigned int v52;
  uint64_t v53;
  ausdk::AUElement **v54;
  float v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  float v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  _QWORD *v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  _QWORD *v67;
  unint64_t v68;
  unsigned int v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  unint64_t mNumberBuffers;
  caulk::concurrent::messenger *v75;
  uint64_t v76;
  int v77;
  _BOOL4 v78;
  _BOOL4 v79;
  int v80;
  float v81;
  float v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  float v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  _BOOL4 v93;
  uint64_t v94;
  unint64_t v95;
  _DWORD *v96;
  unint64_t v97;
  _DWORD *v98;
  int v99;
  int v100;
  int v101;
  NSObject *v102;
  unint64_t v103;
  const void **v104;
  float **v105;
  void **v106;
  float *v107;
  unint64_t v108;
  float **v109;
  NSObject *v110;
  uint64_t v111;
  ausdk::AUElement *v112;
  ausdk::AUElement **v113;
  float v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  caulk::concurrent::messenger *v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  _DWORD *v122;
  unint64_t v123;
  _DWORD *v124;
  int v125;
  BOOL v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  caulk::concurrent::messenger *v131;
  uint64_t v132;
  float v133;
  uint64_t v134;
  unint64_t v135;
  float v136;
  float v137;
  uint64_t v138;
  int v139;
  float v140;
  float v141;
  uint64_t v142;
  unint64_t v143;
  float v144;
  uint64_t v145;
  unint64_t v146;
  caulk::concurrent::messenger *v147;
  float v148;
  uint64_t v149;
  caulk::concurrent::messenger *v150;
  uint64_t v151;
  AudioBufferList *v152;
  float __C;
  uint8_t buf[4];
  const char *v155;
  __int16 v156;
  int v157;
  __int16 v158;
  _BOOL4 v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 77) = *((double *)this + 77) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECSUMOLogScope(void)::once != -1)
      dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
    if (AUECSUMOLogScope(void)::scope)
    {
      v28 = *(NSObject **)AUECSUMOLogScope(void)::scope;
      if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
        return 4294956422;
    }
    else
    {
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = *((_DWORD *)this + 84);
      *(float *)buf = 4.8153e-34;
      v155 = "AUECSUMO.cpp";
      v156 = 1024;
      v157 = 1157;
      v158 = 1024;
      v159 = a3;
      v160 = 1024;
      v161 = v29;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", buf, 0x1Eu);
    }
    return 4294956422;
  }
  result = 4294956428;
  if (a4 != 3 || a6 != 4)
    return result;
  v11 = *a5;
  v12 = *a7;
  v13 = a7[1];
  v14 = a7[3];
  if (*((_BYTE *)this + 528))
  {
    if (v12 != v11 && *((_DWORD *)this + 138))
    {
      v15 = 0;
      p_mData = (const void **)&v11->mBuffers[0].mData;
      v17 = &v14->mBuffers[0].mData;
      v18 = &v13->mBuffers[0].mData;
      v19 = &v12->mBuffers[0].mData;
      do
      {
        v21 = *v19;
        v19 += 2;
        v20 = v21;
        v23 = (float *)*v18;
        v18 += 2;
        v22 = v23;
        v25 = *v17;
        v17 += 2;
        v24 = v25;
        v26 = *p_mData;
        p_mData += 2;
        memcpy(v20, v26, 4 * *((unsigned int *)this + 137));
        memcpy(v24, v26, 4 * *((unsigned int *)this + 137));
        vDSP_vclr(v22, 1, *((unsigned int *)this + 137));
        ++v15;
      }
      while (v15 < *((unsigned int *)this + 138));
    }
LABEL_182:
    result = 0;
    *((_QWORD *)this + 76) = 0;
    return result;
  }
  v30 = a5[1];
  v31 = a5[2];
  v32 = a7[2];
  v33 = *((_DWORD *)this + 133);
  if (v33 != *((_DWORD *)this + 134))
  {
    v34 = *((_QWORD *)this + 9);
    if (v34)
    {
      v35 = v32;
      v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
    }
    else
    {
      v35 = v32;
      v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v37)
        v36 = 0;
      else
        v36 = *v37;
    }
    Parameter = ausdk::AUElement::GetParameter(v36, 1u);
    *((float *)this + 179) = Parameter;
    v39 = *((_QWORD *)this + 95);
    *(float *)(v39 + 36) = __exp10f(Parameter / 10.0);
    *((_DWORD *)this + 134) = v33;
    v40 = *((_QWORD *)this + 9);
    if (v40)
    {
      v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
    }
    else
    {
      v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v42)
        v41 = 0;
      else
        v41 = *v42;
    }
    v43 = ausdk::AUElement::GetParameter(v41, 0x1Au);
    v44 = *((_QWORD *)this + 9);
    if (v43 == 0.0)
    {
      if (v44)
      {
        v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
      }
      else
      {
        v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v48)
          v46 = 0;
        else
          v46 = *v48;
      }
      *((float *)this + 184) = ausdk::AUElement::GetParameter(v46, 6u);
      v53 = *((_QWORD *)this + 9);
      if (v53)
      {
        v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
      }
      else
      {
        v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v54)
          v50 = 0;
        else
          v50 = *v54;
      }
      v52 = 11;
    }
    else
    {
      if (v44)
      {
        v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
      }
      else
      {
        v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v47)
          v45 = 0;
        else
          v45 = *v47;
      }
      *((float *)this + 184) = ausdk::AUElement::GetParameter(v45, 0x1Bu);
      v49 = *((_QWORD *)this + 9);
      if (v49)
      {
        v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
      }
      else
      {
        v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v51)
          v50 = 0;
        else
          v50 = *v51;
      }
      v52 = 28;
    }
    v55 = ausdk::AUElement::GetParameter(v50, v52);
    *((_DWORD *)this + 187) = v55;
    ecSUMO::fcn_set_gamma(*((ecSUMO **)this + 95), *((float *)this + 184), v55);
    v32 = v35;
  }
  v152 = v32;
  ecSUMO::ec_proc(*((ecSUMO **)this + 95), v11, v30, v31, v12, v13, v32, v14);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  v59 = ausdk::AUElement::GetParameter(v57, 0xFu);
  v60 = *((_QWORD *)this + 95);
  v61 = *(unsigned __int8 *)(v60 + 128);
  if (*(_BYTE *)(v60 + 128))
    goto LABEL_84;
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (_QWORD *)*((_QWORD *)this + 6);
    v63 = *((_QWORD **)this + 7) == v64 ? 0 : (ausdk::AUElement *)*v64;
  }
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v63, 0x13u);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (_QWORD *)*((_QWORD *)this + 6);
    v66 = *((_QWORD **)this + 7) == v67 ? 0 : (ausdk::AUElement *)*v67;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v66, 0x14u);
  if (v11->mNumberBuffers)
  {
    v68 = 0;
    v69 = *((_DWORD *)this + 137);
    v70 = 0.0;
    v71 = 16;
    v72 = 0.0;
    do
    {
      *(float *)buf = 0.0;
      vDSP_svesq(*(const float **)((char *)&v11->mNumberBuffers + v71), 1, (float *)buf, v69);
      v69 = *((_DWORD *)this + 137);
      v73 = log10f((float)(*(float *)buf / (float)v69) + 1.0e-20) * 10.0;
      if (!v68)
      {
        v72 = v73;
        v73 = -0.0;
      }
      v70 = v70 + v73;
      ++v68;
      mNumberBuffers = v11->mNumberBuffers;
      v71 += 16;
    }
    while (v68 < mNumberBuffers);
    if (mNumberBuffers > 2)
      v70 = v70 / (float)(mNumberBuffers - 1);
  }
  else
  {
    v72 = 0.0;
    v70 = 0.0;
  }
  if (v70 >= *((float *)this + 150) || (float)(v72 - v70) <= *((float *)this + 151))
  {
LABEL_84:
    v77 = 0;
  }
  else
  {
    if (*((double *)this + 72) > 0.0)
    {
      v75 = (caulk::concurrent::messenger *)*((_QWORD *)this + 105);
      if (v75)
      {
        v76 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
        *(_DWORD *)(v76 + 16) = 0;
        *(_QWORD *)v76 = &off_1E69D2998;
        *(_QWORD *)(v76 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v75, (caulk::concurrent::message *)v76);
      }
    }
    v77 = 1;
  }
  v78 = v61 != 0;
  v79 = v59 != 0.0;
  if (v59 == 0.0)
    v78 = 1;
  v80 = v78 | v77;
  if (v61)
    v79 = 1;
  if (v80)
    v81 = 1.0;
  else
    v81 = 0.0;
  if (v79 | v77)
    v82 = 1.0;
  else
    v82 = 0.0;
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  v86 = 0.0;
  if (v61)
    v86 = 1.0;
  ausdk::AUElement::SetParameter(v84, 0x10u, v86, 0);
  v87 = *((_QWORD *)this + 9);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  ausdk::AUElement::SetParameter(v88, 0x11u, v81, 0);
  v90 = *((_QWORD *)this + 9);
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  ausdk::AUElement::SetParameter(v91, 0x16u, v82, 0);
  v93 = ecSUMO::fcn_isfinite_state(*((ecSUMO **)this + 95));
  v94 = *((_QWORD *)this + 95);
  v95 = *(unsigned int *)(v94 + 80);
  if ((_DWORD)v95)
  {
    v96 = *(_DWORD **)(v94 + 248);
    if ((*v96 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v100 = ecSUMO::fcn_isfinite_output((ecSUMO *)v94);
LABEL_123:
      v101 = 0;
      goto LABEL_124;
    }
    v97 = 0;
    v98 = v96 + 1;
    while (v95 - 1 != v97)
    {
      v99 = v98[v97++] & 0x7FFFFFFF;
      if (v99 >= 2139095040)
      {
        v100 = ecSUMO::fcn_isfinite_output((ecSUMO *)v94);
        if (v97 >= v95)
          goto LABEL_120;
        goto LABEL_123;
      }
    }
  }
  v100 = ecSUMO::fcn_isfinite_output((ecSUMO *)v94);
LABEL_120:
  if ((v93 & v100 & 1) != 0)
    goto LABEL_146;
  v101 = 1;
LABEL_124:
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (!AUECSUMOLogScope(void)::scope)
  {
    v102 = MEMORY[0x1E0C81028];
LABEL_130:
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      *(float *)buf = 4.8154e-34;
      v155 = "AUECSUMO.cpp";
      v156 = 1024;
      v157 = 1285;
      v158 = 1024;
      v159 = v93;
      v160 = 1024;
      v161 = v101;
      v162 = 1024;
      v163 = v100;
      _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO: ********* Reset begins *********\nAUECSUMO: state variables have finite values (1 if True): %u\nAUECSUMO: ref-signal buffers have finite values (1 if True): %u\nAUECSUMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x24u);
    }
    goto LABEL_132;
  }
  v102 = *(NSObject **)AUECSUMOLogScope(void)::scope;
  if (*(_QWORD *)AUECSUMOLogScope(void)::scope)
    goto LABEL_130;
LABEL_132:
  std::mutex::lock((std::mutex *)((char *)this + 624));
  AUECSUMO::DoCoreECInit(this);
  std::mutex::unlock((std::mutex *)((char *)this + 624));
  if (*((_DWORD *)this + 138))
  {
    v103 = 0;
    v104 = (const void **)&v11->mBuffers[0].mData;
    v105 = (float **)&v13->mBuffers[0].mData;
    v106 = &v12->mBuffers[0].mData;
    do
    {
      v107 = *v105;
      memcpy(*v106, *v104, 4 * *((unsigned int *)this + 137));
      vDSP_vclr(v107, 1, *((unsigned int *)this + 137));
      ++v103;
      v104 += 2;
      v105 += 2;
      v106 += 2;
    }
    while (v103 < *((unsigned int *)this + 138));
  }
  if (*((_DWORD *)this + 139))
  {
    v108 = 0;
    v109 = (float **)&v152->mBuffers[0].mData;
    do
    {
      vDSP_vclr(*v109, 1, *((unsigned int *)this + 137));
      ++v108;
      v109 += 2;
    }
    while (v108 < *((unsigned int *)this + 139));
  }
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v110 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      goto LABEL_146;
  }
  else
  {
    v110 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
  {
    *(float *)buf = 4.8151e-34;
    v155 = "AUECSUMO.cpp";
    v156 = 1024;
    v157 = 1309;
    _os_log_impl(&dword_1B5ED0000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO: ********* Reset ends *********\n", buf, 0x12u);
  }
LABEL_146:
  v111 = *((_QWORD *)this + 9);
  if (v111)
  {
    v112 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0);
  }
  else
  {
    v113 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v113)
      v112 = 0;
    else
      v112 = *v113;
  }
  v114 = ausdk::AUElement::GetParameter(v112, 9u);
  result = 0;
  *((double *)this + 72) = v114;
  LODWORD(v115) = *((_DWORD *)this + 137);
  LODWORD(v116) = *((_DWORD *)this + 136);
  v117 = *((double *)this + 76) + (double)v115 / (double)v116;
  if (v117 < 0.0)
    v117 = 0.0;
  *((double *)this + 76) = v117;
  if (v114 > 0.0 && v117 > v114)
  {
    v118 = (caulk::concurrent::messenger *)*((_QWORD *)this + 105);
    if (!v118)
      return 0;
    v119 = ecSUMO::fcn_isfinite_state(*((ecSUMO **)this + 95));
    v120 = *((_QWORD *)this + 95);
    v121 = *(unsigned int *)(v120 + 80);
    if ((_DWORD)v121)
    {
      v122 = *(_DWORD **)(v120 + 248);
      if ((*v122 & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v126 = 0;
      }
      else
      {
        v123 = 0;
        v124 = v122 + 1;
        while (v121 - 1 != v123)
        {
          v125 = v124[v123++] & 0x7FFFFFFF;
          if (v125 >= 2139095040)
            goto LABEL_166;
        }
        v123 = *(unsigned int *)(v120 + 80);
LABEL_166:
        v126 = v123 >= v121;
      }
    }
    else
    {
      v126 = 1;
    }
    v127 = ecSUMO::fcn_isfinite_output((ecSUMO *)v120);
    v128 = (_QWORD *)MEMORY[0x1E0DDB688];
    v129 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_QWORD *)(v129 + 8) = 0;
    *(_DWORD *)(v129 + 16) = 0;
    *(_OWORD *)(v129 + 24) = *((_OWORD *)this + 38);
    *(_BYTE *)(v129 + 40) = v119;
    *(_BYTE *)(v129 + 41) = v126;
    *(_BYTE *)(v129 + 42) = v127;
    *(_QWORD *)v129 = &off_1E69D28F8;
    caulk::concurrent::messenger::enqueue(v118, (caulk::concurrent::message *)v129);
    if (*((_DWORD *)this + 138))
    {
      v130 = 0;
      do
      {
        v131 = (caulk::concurrent::messenger *)*((_QWORD *)this + 105);
        v132 = *((_QWORD *)this + 95);
        __C = 0.0;
        *(float *)buf = 0.0;
        v133 = 0.0;
        if (*(_DWORD *)(v132 + 56))
        {
          v134 = 0;
          v135 = 0;
          v136 = 0.0;
          v137 = 0.0;
          do
          {
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(v132 + 752) + 24 * v130) + v134), 1, (float *)buf, *(unsigned int *)(v132 + 72));
            vDSP_distancesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(v132 + 776) + 24 * v130) + v134), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(v132 + 752) + 24 * v130) + v134), 1, &__C, *(unsigned int *)(v132 + 72));
            v137 = v137 + *(float *)buf;
            v136 = v136 + __C;
            ++v135;
            v134 += 24;
          }
          while (v135 < *(unsigned int *)(v132 + 56));
          v138 = *((_QWORD *)this + 95);
          v139 = *(_DWORD *)(v138 + 56);
        }
        else
        {
          v139 = 0;
          v138 = v132;
          v137 = 0.0;
          v136 = 0.0;
        }
        v140 = log10f((float)(v137 + *(float *)(v132 + 108)) / (float)(v136 + *(float *)(v132 + 108)));
        __C = 0.0;
        *(float *)buf = 0.0;
        v141 = 0.0;
        if (v139)
        {
          v142 = 0;
          v143 = 0;
          v133 = 0.0;
          do
          {
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(v138 + 752) + 24 * v130) + v142), 1, (float *)buf, *(unsigned int *)(v138 + 72));
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(v138 + 776) + 24 * v130) + v142), 1, &__C, *(unsigned int *)(v138 + 72));
            v133 = v133 + *(float *)buf;
            v141 = v141 + __C;
            ++v143;
            v142 += 24;
          }
          while (v143 < *(unsigned int *)(v138 + 56));
        }
        v144 = log10f((float)(v133 + *(float *)(v138 + 108)) / (float)(v141 + *(float *)(v138 + 108))) * 10.0;
        v145 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v128 + 16))(*v128, 40, 8);
        *(_DWORD *)(v145 + 16) = 0;
        *(_DWORD *)(v145 + 24) = v130;
        *(float *)(v145 + 28) = v140 * 10.0;
        *(float *)(v145 + 32) = v144;
        *(_QWORD *)v145 = &off_1E69D2920;
        *(_QWORD *)(v145 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v131, (caulk::concurrent::message *)v145);
        ++v130;
      }
      while (v130 < *((unsigned int *)this + 138));
    }
    if (*((_DWORD *)this + 139))
    {
      v146 = 0;
      do
      {
        v147 = (caulk::concurrent::messenger *)*((_QWORD *)this + 105);
        v148 = log10f(*(float *)(*(_QWORD *)(*((_QWORD *)this + 95) + 248) + 4 * v146)) * 10.0;
        v149 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v128 + 16))(*v128, 32, 8);
        *(_DWORD *)(v149 + 16) = 0;
        *(_DWORD *)(v149 + 24) = v146;
        *(float *)(v149 + 28) = v148;
        *(_QWORD *)v149 = &off_1E69D2948;
        *(_QWORD *)(v149 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v147, (caulk::concurrent::message *)v149);
        ++v146;
      }
      while (v146 < *((unsigned int *)this + 139));
    }
    v150 = (caulk::concurrent::messenger *)*((_QWORD *)this + 105);
    v151 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v128 + 16))(*v128, 24, 8);
    *(_DWORD *)(v151 + 16) = 0;
    *(_QWORD *)v151 = &off_1E69D2970;
    *(_QWORD *)(v151 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v150, (caulk::concurrent::message *)v151);
    goto LABEL_182;
  }
  return result;
}

void sub_1B632AEE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECSUMO::Render(AUECSUMO *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUECSUMO *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUECSUMO::BusCountWritable(AUECSUMO *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECSUMO::GetParameterList(AUECSUMO *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_QWORD *)a3 + 14) = 0x1D0000001CLL;
    a3[30] = 30;
  }
  result = 0;
  *a4 = 31;
  return result;
}

uint64_t AUECSUMO::GetParameterInfo(AUECSUMO *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x1E)
  {
    v6 = off_1E69D29B0[a3];
    v7 = dword_1B664E0AC[a3];
    v8 = flt_1B664E128[a3];
    v9 = flt_1B664E1A4[a3];
    v10 = flt_1B664E220[a3];
    v11 = dword_1B664E29C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECSUMO::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUECSUMO::GetLatency(AUECSUMO *this)
{
  return *((float *)this + 172);
}

double AUECSUMO::GetTailTime(AUECSUMO *this)
{
  return 0.0;
}

uint64_t AUECSUMO::SupportsTail(AUECSUMO *this)
{
  return 1;
}

BOOL AUECSUMO::StreamFormatWritable(AUECSUMO *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECSUMO::SupportedNumChannels(AUECSUMO *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECSUMO::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 8;
}

uint64_t AUECSUMO::ValidFormat(AUECSUMO *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9)
    return 0;
  else
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
}

BOOL ecSUMO::fcn_isfinite_state(ecSUMO *this)
{
  unint64_t v1;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  float __C;

  __C = 0.0;
  v1 = *((unsigned int *)this + 15);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      if (*((_DWORD *)this + 14))
      {
        v5 = 0;
        v6 = 0;
        do
        {
          vDSP_sve(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 94) + 24 * v3) + v5), 1, &__C, *((unsigned int *)this + 18));
          v4 = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
          if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
            break;
          ++v6;
          v5 += 24;
        }
        while (v6 < *((unsigned int *)this + 14));
        v1 = *((unsigned int *)this + 15);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t ecSUMO::fcn_isfinite_output(ecSUMO *this)
{
  unint64_t v1;
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  float __C;

  __C = 0.0;
  v1 = *((unsigned int *)this + 15);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      if (*((_DWORD *)this + 14))
      {
        v5 = 0;
        v6 = 0;
        while (1)
        {
          vDSP_sve(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 94) + 24 * v3) + v5), 1, &__C, *((unsigned int *)this + 18));
          if ((v4 & 1) == 0 || (LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
            break;
          ++v6;
          v5 += 24;
          v4 = 1;
          if (v6 >= *((unsigned int *)this + 14))
            goto LABEL_10;
        }
        v4 = 0;
LABEL_10:
        v1 = *((unsigned int *)this + 15);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  NSObject *v3;
  caulk::concurrent::message *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "AUECSUMO.cpp";
    v8 = 1024;
    v9 = 1352;
    v10 = 1024;
    v11 = v1;
    v12 = 2048;
    v13 = v2;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECSUMO.cpp";
    v6 = 1024;
    v7 = 1357;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  NSObject *v4;
  caulk::concurrent::message *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  v3 = *(float *)(a1 + 32);
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v8 = "AUECSUMO.cpp";
    v9 = 1024;
    v10 = 1344;
    v11 = 1024;
    v12 = v1;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  caulk::concurrent::message *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = (caulk::concurrent::message *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 41);
  v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v6 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316674;
    v10 = "AUECSUMO.cpp";
    v11 = 1024;
    v12 = 1336;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v1;
    v17 = 1024;
    v18 = v3;
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Logging begins *********\nAUECSUMO: logging (period, timestamp): (%f, %f) (s)\nAUECSUMO: state variables have finite values (1 if True): %u\nAUECSUMO: ref-signal buffers have finite values (1 if True): %u\nAUECSUMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void AUECSUMO::DoCoreECInit(AUECSUMO *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  float v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  vDSP_Length v22;
  unint64_t v23;
  unsigned int *v24;
  std::vector<unsigned int>::size_type v25;
  unint64_t v26;
  std::vector<unsigned int>::size_type v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  unint64_t v59;
  NSObject *v60;
  uint64_t v61;
  float v62;
  unsigned int *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t i;
  unint64_t v72;
  unint64_t v73;
  int32x2_t v74;
  uint64_t v75;
  unsigned int v76;
  std::vector<unsigned int>::value_type __u;
  const char *v78;
  __int16 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)((char *)this + 760);
  if (*((_QWORD *)this + 95))
    std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
  v3 = operator new();
  *(_QWORD *)v3 = 0x3F7BE76D00000004;
  *(_QWORD *)(v3 + 12) = 0x3F81096C3F7DF3B6;
  *(_OWORD *)(v3 + 24) = xmmword_1B66A1F20;
  *(_QWORD *)(v3 + 40) = 3273654272;
  *(_OWORD *)(v3 + 48) = xmmword_1B66A1F30;
  *(_DWORD *)(v3 + 64) = 4;
  *(_QWORD *)(v3 + 72) = 0x3E8000000200;
  *(_OWORD *)(v3 + 84) = xmmword_1B66A1F40;
  *(_OWORD *)(v3 + 100) = xmmword_1B66A1F50;
  *(_QWORD *)(v3 + 120) = 0x33F800000;
  *(_BYTE *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 140) = 2;
  *(_WORD *)(v3 + 148) = 0;
  bzero((void *)(v3 + 152), 0x4C0uLL);
  std::unique_ptr<ecSUMO>::reset[abi:ne180100](v2, v3);
  v4 = (unsigned int *)*((_QWORD *)this + 95);
  v5 = *((_DWORD *)this + 146);
  v6 = *((float *)this + 184);
  v7 = *((float *)this + 181);
  v8 = *((_DWORD *)this + 180);
  v9 = *((_DWORD *)this + 183);
  v10 = *((float *)this + 179);
  v11 = *((_DWORD *)this + 185);
  v12 = *((float *)this + 182);
  v13 = *((_DWORD *)this + 186);
  v14 = *((_DWORD *)this + 187);
  v15 = *((_DWORD *)this + 147);
  v16 = *((_DWORD *)this + 138);
  v75 = *(_QWORD *)((char *)this + 556);
  v74 = *(int32x2_t *)((char *)this + 544);
  v17 = *((_DWORD *)this + 148);
  v76 = *((_DWORD *)this + 149);
  v18 = *((_WORD *)this + 346);
  v19 = *((_DWORD *)this + 174);
  v20 = *((_DWORD *)this + 177);
  *((_WORD *)v4 + 74) = *((_WORD *)this + 356);
  *v4 = v5;
  *((float *)v4 + 6) = __exp10f(v7 / 10.0);
  v4[7] = v8;
  v4[8] = v9;
  *((float *)v4 + 9) = __exp10f(v10 / 20.0);
  *((float *)v4 + 11) = __exp10f(v12 / 10.0);
  v4[12] = v13;
  v4[13] = v14;
  *(_WORD *)((char *)v4 + 129) = v18;
  v4[14] = v15 & 0xFFFFFFFE;
  v4[15] = v16;
  v4[33] = v19;
  v4[34] = v20;
  *(_QWORD *)&v21 = v75;
  *((int32x2_t *)&v21 + 1) = vrev64_s32(v74);
  *((_OWORD *)v4 + 4) = v21;
  v4[21] = (v15 & 0xFFFFFFFE) * v74.i32[1];
  v22 = (2 * v74.i32[1]);
  v4[24] = (v74.i32[1] & 0x7FFFFFFF) + 1;
  v4[22] = v22;
  v4[23] = v74.i32[1] & 0x7FFFFFFF;
  *(_QWORD *)(v4 + 27) = 507307272;
  v4[10] = v11;
  *((_QWORD *)v4 + 169) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)v4 + 169), v22, vDSP_DFT_FORWARD);
  *((_QWORD *)v4 + 170) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)v4 + 170), v4[22], vDSP_DFT_INVERSE);
  *((float *)v4 + 25) = 1.0 / (float)v4[22];
  v4[26] = 1056964608;
  ecSUMO::fcn_set_gamma((ecSUMO *)v4, v6, v14);
  v4[29] = 0;
  v4[30] = v17;
  *(_QWORD *)(v4 + 35) = v76;
  v23 = v4[16];
  v4[20] = v23;
  v24 = v4 + 20;
  LOBYTE(__u) = 1;
  std::vector<BOOL>::assign((uint64_t)(v4 + 44), v23, &__u);
  v25 = v4[20];
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(v4 + 38), v25, &__u);
  v26 = v4[18] * v4[14];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 25, v26, &__u);
  v27 = v4[14];
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(v4 + 56), v27, &__u);
  v28 = v4[20];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 31, v28, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 34, v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 37, v4[14], v4[18], 0.0);
  v29 = 4 * v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 40, v29, &__u);
  v30 = 2 * v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 43, v30, &__u);
  v31 = v4[22];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 46, v31, &__u);
  v32 = v4[22];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 49, v32, &__u);
  v33 = 2 * v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 52, v33, &__u);
  v34 = v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 55, v34, &__u);
  v35 = 4 * v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 58, v35, &__u);
  v36 = 4 * v4[24];
  __u = 0;
  std::vector<float>::assign((char **)v4 + 61, v36, &__u);
  v37 = 2 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 64, v37, &__u);
  v38 = 2 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 67, v38, &__u);
  v39 = 2 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 70, v39, &__u);
  v40 = 2 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 73, v40, &__u);
  v41 = 2 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 76, v41, &__u);
  v42 = 4 * v4[24];
  __u = 1065353216;
  std::vector<float>::assign((char **)v4 + 79, v42, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 82, *v4, v4[24], 1.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 170), v4[20], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 176), v4[15], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 182), v4[17], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 188), v4[15], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 194), v4[15], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 200), v4[20], v4[14], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 103, v4[15], v4[18] * v4[14], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 106, v4[15], v4[18], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 109, v4[15], 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 112, v4[17], 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 230), v4[15], *v4 + 1, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 236), v4[15], *v4 + 1, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 242), v4[20], *v4 + 1, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 254), v4[20], *v4 + 1, 4 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 248), v4[20], *v4 + 1, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)v4 + 130, v4[20], 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 272), v4[20], *v4, 4 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 266), v4[20], *v4, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 278), v4[15], v4[20], *v4, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 284), *v24, *v24, *v4, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 290), *v24, *v24, *v4, 2 * v4[24], 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)(v4 + 296), *v24, *v24, *v4, 4 * v4[24], 0.0);
  if (*((_BYTE *)v4 + 129))
  {
    ecutils::fcn_vector_init<float>((uint64_t)(v4 + 302), v4[20], v4[34], v4[24], 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)(v4 + 308), v4[20], v4[34], 2 * v4[24], 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)(v4 + 314), v4[20], v4[34], 2 * v4[24], 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)(v4 + 320), v4[20], v4[34], 2 * v4[24], 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)v4 + 163, v4[20], 2 * v4[24], 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)(v4 + 332), v4[15], v4[14], v4[18], 0.0);
    v43 = v4[20];
    if ((_DWORD)v43)
    {
      v44 = 0;
      LODWORD(v45) = v4[34];
      do
      {
        if ((_DWORD)v45)
        {
          v46 = 0;
          v47 = 0;
          do
          {
            vDSP_vfill((const float *)v4 + 11, *(float **)(*(_QWORD *)(*((_QWORD *)v4 + 151) + 24 * v44) + v46), 1, v4[24]);
            ++v47;
            v45 = v4[34];
            v46 += 24;
          }
          while (v47 < v45);
          v43 = v4[20];
        }
        ++v44;
      }
      while (v44 < v43);
    }
  }
  v48 = *v4;
  if ((_DWORD)v48)
  {
    v49 = 0;
    LODWORD(v50) = v4[20];
    do
    {
      if ((_DWORD)v50)
      {
        v51 = 0;
        v52 = 0;
        v53 = -1;
        do
        {
          vDSP_vfill((const float *)v4 + 11, *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 148) + v51) + 24 * (v50 + v53))+ 24 * v49), 1, 2 * v4[24]);
          ++v52;
          v50 = v4[20];
          v51 += 24;
          --v53;
        }
        while (v52 < v50);
        v48 = *v4;
      }
      ++v49;
    }
    while (v49 < v48);
  }
  LODWORD(v54) = v4[14] - 1;
  if (v4[14] != 1)
  {
    v55 = 0;
    v56 = 0;
    v57 = *((_QWORD *)v4 + 28) + 4;
    do
    {
      *(_DWORD *)(v57 + 4 * v56) = v55 + v54;
      v54 = v4[14] - 1;
      --v55;
      ++v56;
    }
    while (v56 < v54);
  }
  v4[31] = 3;
  if (*((_BYTE *)this + 756))
  {
    if (AUECSUMOLogScope(void)::once != -1)
      dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
    if (AUECSUMOLogScope(void)::scope)
    {
      v58 = *(NSObject **)AUECSUMOLogScope(void)::scope;
      if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      {
LABEL_35:
        v61 = *((_QWORD *)this + 95);
        v62 = *((float *)this + 172);
        memcpy(*(void **)(v61 + 200), *((const void **)this + 102), 4 * *(unsigned int *)(v61 + 56) * (unint64_t)*(unsigned int *)(v61 + 72));
        ecSUMO::fcn_tragic_window(v61, *(_QWORD *)(v61 + 272), *(_DWORD *)(v61 + 72), *(_DWORD *)(v61 + 56), 1);
        ecSUMO::fcn_tragic_window(v61, *(_QWORD *)(v61 + 296), *(_DWORD *)(v61 + 72), *(_DWORD *)(v61 + 56), 0);
        *(_DWORD *)(v61 + 144) = (float)(v62 * (float)*(unsigned int *)(v61 + 76));
        if (*((_BYTE *)this + 757))
        {
          v63 = (unsigned int *)*((_QWORD *)this + 95);
          v64 = v63[15];
          if ((_DWORD)v64)
          {
            v65 = 0;
            v66 = v63[20];
            v67 = v66;
            do
            {
              if (v67)
              {
                v68 = 0;
                LODWORD(v69) = *v63;
                do
                {
                  if ((_DWORD)v69)
                  {
                    v70 = 0;
                    for (i = 0; i < v69; ++i)
                    {
                      memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v63 + 139) + 24 * v65) + 24 * v68) + v70), (const void *)(*((_QWORD *)this + 99)+ 8 * v63[24] * ((_DWORD)i + (_DWORD)v69 * ((_DWORD)v68 + (_DWORD)v65 * v63[20]))), 8 * v63[24]);
                      v69 = *v63;
                      v70 += 24;
                    }
                    v66 = v63[20];
                  }
                  ++v68;
                }
                while (v68 < v66);
                v64 = v63[15];
                v67 = v66;
              }
              ++v65;
            }
            while (v65 < v64);
          }
        }
        else
        {
          v72 = (2
                             * (*((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146)
                              + *((_DWORD *)this + 138)
                              * *((_DWORD *)this + 139)
                              * *((_DWORD *)this + 146)
                              * *((_DWORD *)this + 137)));
          __u = 0;
          std::vector<float>::assign((char **)this + 99, v72, &__u);
        }
        v73 = (*((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142));
        __u = 0;
        std::vector<float>::assign((char **)this + 96, v73, &__u);
        *((_OWORD *)this + 38) = 0u;
        return;
      }
    }
    else
    {
      v58 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      __u = 136315394;
      v78 = "AUECSUMO.cpp";
      v79 = 1024;
      v80 = 453;
      _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Using the initialized window *********\n", (uint8_t *)&__u, 0x12u);
    }
    goto LABEL_35;
  }
  v59 = (*((_DWORD *)this + 137) * *((_DWORD *)this + 147));
  __u = 0;
  std::vector<float>::assign((char **)this + 102, v59, &__u);
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v60 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return;
  }
  else
  {
    v60 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
  {
    __u = 136315394;
    v78 = "AUECSUMO.cpp";
    v79 = 1024;
    v80 = 459;
    _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO: ********* Window not initialized: returning error *********\n", (uint8_t *)&__u, 0x12u);
  }
}

uint64_t *std::unique_ptr<ecSUMO>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  vDSP_DFT_SetupStruct *v3;
  vDSP_DFT_SetupStruct *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void **v24;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(vDSP_DFT_SetupStruct **)(v2 + 1352);
    if (v3)
      vDSP_DFT_DestroySetup(v3);
    v4 = *(vDSP_DFT_SetupStruct **)(v2 + 1360);
    if (v4)
      vDSP_DFT_DestroySetup(v4);
    v24 = (void **)(v2 + 1328);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1304);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1280);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1256);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1232);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1208);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1184);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1160);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1136);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1112);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1088);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1064);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1040);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 1016);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 992);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 968);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 944);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 920);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 896);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 872);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 848);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 824);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 800);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 776);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 752);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 728);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 704);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 680);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 656);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v5 = *(void **)(v2 + 632);
    if (v5)
    {
      *(_QWORD *)(v2 + 640) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 608);
    if (v6)
    {
      *(_QWORD *)(v2 + 616) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 584);
    if (v7)
    {
      *(_QWORD *)(v2 + 592) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 560);
    if (v8)
    {
      *(_QWORD *)(v2 + 568) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 536);
    if (v9)
    {
      *(_QWORD *)(v2 + 544) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 512);
    if (v10)
    {
      *(_QWORD *)(v2 + 520) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 488);
    if (v11)
    {
      *(_QWORD *)(v2 + 496) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 464);
    if (v12)
    {
      *(_QWORD *)(v2 + 472) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 440);
    if (v13)
    {
      *(_QWORD *)(v2 + 448) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 416);
    if (v14)
    {
      *(_QWORD *)(v2 + 424) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 392);
    if (v15)
    {
      *(_QWORD *)(v2 + 400) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 368);
    if (v16)
    {
      *(_QWORD *)(v2 + 376) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 344);
    if (v17)
    {
      *(_QWORD *)(v2 + 352) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(v2 + 320);
    if (v18)
    {
      *(_QWORD *)(v2 + 328) = v18;
      operator delete(v18);
    }
    v24 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v24 = (void **)(v2 + 272);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    v19 = *(void **)(v2 + 248);
    if (v19)
    {
      *(_QWORD *)(v2 + 256) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v2 + 224);
    if (v20)
    {
      *(_QWORD *)(v2 + 232) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v2 + 200);
    if (v21)
    {
      *(_QWORD *)(v2 + 208) = v21;
      operator delete(v21);
    }
    v22 = *(void **)(v2 + 176);
    if (v22)
      operator delete(v22);
    v23 = *(void **)(v2 + 152);
    if (v23)
    {
      *(_QWORD *)(v2 + 160) = v23;
      operator delete(v23);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t ecSUMO::fcn_tragic_window(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t i;
  uint64_t v7;
  float *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  unsigned int v15;
  uint64_t v16;

  if (a5)
  {
    if (a4)
    {
      v5 = 0;
      for (i = 0; i != a4; ++i)
      {
        if (a3)
        {
          v7 = *(_QWORD *)(result + 200);
          v8 = *(float **)(a2 + 24 * (~(_DWORD)i + a4));
          v9 = v5;
          v10 = a3;
          do
          {
            *v8++ = *(float *)(v7 + 4 * v9++) * *(float *)(result + 104);
            --v10;
          }
          while (v10);
        }
        v5 += a3;
      }
    }
  }
  else if (a4)
  {
    v11 = 0;
    v12 = a4 * a3 - 1;
    do
    {
      if (a3)
      {
        v13 = *(_QWORD *)(result + 200);
        v14 = *(float **)(a2 + 24 * (~(_DWORD)v11 + a4));
        v15 = v12;
        v16 = a3;
        do
        {
          *v14++ = *(float *)(v13 + 4 * v15--) * *(float *)(result + 100);
          --v16;
        }
        while (v16);
      }
      ++v11;
      v12 -= a3;
    }
    while (v11 != a4);
  }
  return result;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECSUMOLogScope(void)::once != -1)
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_8326);
  if (AUECSUMOLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECSUMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECSUMO.cpp";
    v6 = 1024;
    v7 = 1427;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

os_log_t ___ZL16AUECSUMOLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auecso");
  *v0 = result;
  AUECSUMOLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void ScottySTFTUpmixer::~ScottySTFTUpmixer(void **this)
{
  ScottySTFTUpmixer::~ScottySTFTUpmixer(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t i;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t j;
  void *v20;
  uint64_t v21;

  if (*((char *)this + 2471) < 0)
    operator delete(this[306]);
  for (i = 304; i != 301; --i)
  {
    v3 = this[i];
    this[i] = 0;
    if (v3)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v3);
  }
  do
  {
    v4 = this[i];
    this[i] = 0;
    if (v4)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v4);
    --i;
  }
  while (i != 298);
  do
  {
    v5 = this[i];
    this[i] = 0;
    if (v5)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v5);
    --i;
  }
  while (i != 295);
  do
  {
    v6 = this[i];
    this[i] = 0;
    if (v6)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v6);
    --i;
  }
  while (i != 292);
  do
  {
    v7 = this[i];
    this[i] = 0;
    if (v7)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v7);
    --i;
  }
  while (i != 289);
  do
  {
    v8 = this[i];
    this[i] = 0;
    if (v8)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v8);
    --i;
  }
  while (i != 286);
  v9 = this[284];
  if (v9)
  {
    this[285] = v9;
    operator delete(v9);
  }
  v10 = this[281];
  if (v10)
  {
    this[282] = v10;
    operator delete(v10);
  }
  v11 = this[280];
  this[280] = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  v12 = this[279];
  this[279] = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = this[278];
  this[278] = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = this[277];
  this[277] = 0;
  if (v14)
    (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
  v15 = this[276];
  this[276] = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = this[275];
  this[275] = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = this[274];
  this[274] = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = this[273];
  this[273] = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  for (j = 0; j != -12; j -= 3)
  {
    v20 = this[j + 238];
    if (v20)
    {
      this[j + 239] = v20;
      operator delete(v20);
    }
  }
  ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t((ScottySTFTUpmixer::STFT_tables_t *)(this + 199));
  ScottySTFTUpmixer::STFT_state_t::~STFT_state_t((ScottySTFTUpmixer::STFT_state_t *)(this + 81));
  v21 = (uint64_t)this[80];
  this[80] = 0;
  if (v21)
    MultiRadixFFT_Dispose(v21);
  ScottyUpmixer::~ScottyUpmixer((ScottyUpmixer *)this);
}

uint64_t ScottySTFTUpmixer::Initialize(ScottySTFTUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64x2_t v10;
  uint64_t v11;
  uint64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float v21;
  float v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  float v38;
  unint64_t v39;
  uint64_t i;
  char **v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *j;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  float v63;
  unint64_t v64;
  NSObject *v65;
  _QWORD *v67;
  float v68;
  uint64_t k;
  uint64_t m;
  unsigned int v71;
  uint64_t n;
  uint64_t v73;
  uint64_t ii;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const float *v82;
  int *v83;
  uint64_t jj;
  float v85;
  unsigned int v86;
  AllPassComb *v87;
  float v88;
  _QWORD *v89;
  float v90;
  AllPassComb *v91;
  _QWORD *v92;
  float v93;
  AllPassComb *v94;
  _QWORD *v95;
  float v96;
  AllPassComb *v97;
  _QWORD *v98;
  float v99;
  unsigned int v100;
  AllPassComb *v101;
  float v102;
  _QWORD *v103;
  float v104;
  AllPassComb *v105;
  double v106;
  _QWORD *v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  const float *v111;
  uint32x4_t v112;
  int8x16_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  unsigned int v118;
  _QWORD *v119;
  int v120;
  int v121;
  _QWORD *v122;
  int v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  int64x2_t v127;
  uint64x2_t v128;
  float64x2_t __x;
  long double v130;
  int32x2_t v131;
  int64x2_t v132;
  _QWORD v133[24];
  MultiRadixRealFFT *v134;
  float *v135;
  const float *v136;
  _BYTE buf[24];
  __int128 v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 2448);
    if (*((char *)this + 2471) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Initialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing STFTUpmixer", buf, 0x16u);
  }
  if (*((_BYTE *)this + 8))
    return 0;
  v4 = ScottyUpmixer::Initialize(this);
  if ((_DWORD)v4)
    return v4;
  if (!*((_QWORD *)this + 5))
    return 4294944294;
  ScottySTFTUpmixer::UpdateParameters(this);
  *((_WORD *)this + 4) = 1;
  if (*((float *)this + 80) == 0.0)
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v5 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v67 = (_QWORD *)((char *)this + 2448);
      if (*((char *)this + 2471) < 0)
        v67 = (_QWORD *)*v67;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v67;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Initialize";
      _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "[%s|%s] Sample rate is zero", buf, 0x16u);
    }
LABEL_81:
    ScottySTFTUpmixer::UnInitialize(this);
    return 4294944291;
  }
  v6 = *((unsigned int *)this + 85);
  if ((int)v6 > 2047)
  {
    if ((_DWORD)v6 != 2048 && (_DWORD)v6 != 4096 && (_DWORD)v6 != 0x2000)
      goto LABEL_78;
  }
  else if ((_DWORD)v6 != 256 && (_DWORD)v6 != 512 && (_DWORD)v6 != 1024)
  {
LABEL_78:
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v65 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v122 = (_QWORD *)((char *)this + 2448);
      if (*((char *)this + 2471) < 0)
        v122 = (_QWORD *)*v122;
      v123 = *((_DWORD *)this + 85);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v122;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Initialize";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v138) = v123;
      _os_log_error_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid FFT size %u", buf, 0x1Cu);
    }
    goto LABEL_81;
  }
  if (*((_DWORD *)this + 86) != v6 >> 1)
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v23 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v119 = (_QWORD *)((char *)this + 2448);
      if (*((char *)this + 2471) < 0)
        v119 = (_QWORD *)*v119;
      v120 = *((_DWORD *)this + 86);
      v121 = *((_DWORD *)this + 85);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v119;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Initialize";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v138) = v120;
      WORD2(v138) = 1024;
      *(_DWORD *)((char *)&v138 + 6) = v121;
      _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] Frame size %u is not half of FFT size %u", buf, 0x22u);
    }
    goto LABEL_81;
  }
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1808, v6, buf);
  v7 = *((_QWORD *)this + 226);
  if (v7)
  {
    v8 = *((unsigned int *)this + 85);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v127 = vdupq_n_s64(2uLL);
      v128 = (uint64x2_t)vdupq_n_s64(v8 - 1);
      v10 = (uint64x2_t)xmmword_1B6626830;
      v126 = 6.28318531 / (double)v8;
      v11 = (v8 + 1) & 0x1FFFFFFFELL;
      __asm
      {
        FMOV            V1.2D, #-0.5
        FMOV            V0.2D, #0.5
      }
      v124 = _Q0;
      v125 = _Q1;
      do
      {
        v131 = vmovn_s64((int64x2_t)vcgeq_u64(v128, v10));
        v132 = (int64x2_t)v10;
        v18.i64[0] = v9;
        v18.i64[1] = (v9 + 1);
        __x = vmulq_n_f64(vcvtq_f64_u64(v18), v126);
        v130 = cos(__x.f64[1]);
        v19.f64[0] = cos(__x.f64[0]);
        v19.f64[1] = v130;
        v20 = vsqrtq_f64(vmlaq_f64(v124, v125, v19));
        if ((v131.i8[0] & 1) != 0)
        {
          v21 = v20.f64[0];
          *(float *)(v7 + 4 * v9) = v21;
        }
        if ((v131.i8[4] & 1) != 0)
        {
          v22 = v20.f64[1];
          *(float *)(v7 + 4 * v9 + 4) = v22;
        }
        v9 += 2;
        v10 = (uint64x2_t)vaddq_s64(v132, v127);
      }
      while (v11 != v9);
    }
  }
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  *((_DWORD *)this + 81) = *((_DWORD *)this + 88);
  v134 = 0;
  v4 = MultiRadixRealFFT_Create(*((_DWORD *)this + 85), &v134);
  if ((_DWORD)v4)
  {
    ScottySTFTUpmixer::UnInitialize(this);
    return v4;
  }
  v24 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = v134;
  if (v24)
    MultiRadixFFT_Dispose(v24);
  v25 = (*((_DWORD *)this + 85) * *((_DWORD *)this + 88));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 648, v25, buf);
  v26 = (*((_DWORD *)this + 85) * *((_DWORD *)this + 158));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 672, v26, buf);
  v27 = (*((_DWORD *)this + 89) * *((_DWORD *)this + 81));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 696, v27, buf);
  v28 = (*((_DWORD *)this + 89) * *((_DWORD *)this + 81));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 720, v28, buf);
  v29 = (*((_DWORD *)this + 86) * *((_DWORD *)this + 81));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 744, v29, buf);
  v30 = (*((_DWORD *)this + 86) * *((_DWORD *)this + 81));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 768, v30, buf);
  v31 = (*((_DWORD *)this + 86) * *((_DWORD *)this + 81));
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 792, v31, buf);
  v32 = (float)*((unsigned int *)this + 84);
  v33 = (unint64_t)v32;
  std::vector<float>::resize((uint64_t)this + 968, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 992, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1016, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1040, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1064, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1088, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1112, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1136, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1160, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1208, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1232, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1184, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1256, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1280, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1304, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1328, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1352, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1376, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1400, (unint64_t)v32);
  std::vector<float>::resize((uint64_t)this + 1424, (unint64_t)v32);
  v34 = vcvts_n_u32_f32(v32, 3uLL);
  std::vector<float>::resize((uint64_t)this + 816, v34);
  std::vector<float>::resize((uint64_t)this + 840, v34);
  std::vector<float>::resize((uint64_t)this + 944, *((unsigned int *)this + 85));
  std::vector<float>::resize((uint64_t)this + 864, v34);
  std::vector<float>::resize((uint64_t)this + 888, v34);
  v35 = 0;
  v36 = *((unsigned int *)this + 88);
  v37 = (_QWORD *)((char *)this + 1928);
  do
  {
    if (v35 >= v36)
    {
      *v37 = 0;
      v37[1] = 0;
    }
    else
    {
      v38 = v32 * (float)v35;
      v39 = *((_QWORD *)this + 105) + 4 * (unint64_t)v38;
      *v37 = *((_QWORD *)this + 102) + 4 * (unint64_t)v38;
      v37[1] = v39;
    }
    ++v35;
    v37 += 2;
  }
  while (v35 != 8);
  for (i = 1448; i != 1592; i += 24)
    std::vector<float>::resize((uint64_t)this + i, v33);
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1592, 0x1CCBuLL, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1616, 0x1CCBuLL, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1640, 0x1CCBuLL, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1784, v33, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::resize((uint64_t)this + 1664, v33, buf);
  *(_DWORD *)buf = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1712), v33, (std::vector<unsigned int>::const_reference)buf);
  *(_DWORD *)buf = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1736), v33, (std::vector<unsigned int>::const_reference)buf);
  *(_DWORD *)buf = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1760), v33, (std::vector<unsigned int>::const_reference)buf);
  v41 = (char **)((char *)this + 1832);
  v42 = 8 * v33;
  do
  {
    v44 = *v41;
    v43 = v41[1];
    v45 = (v43 - *v41) >> 3;
    if (v33 <= v45)
    {
      if (v33 < v45)
        v41[1] = &v44[8 * v33];
    }
    else
    {
      v46 = v41[2];
      if (v33 - v45 <= (v46 - v43) >> 3)
      {
        v58 = &v43[8 * (v33 - v45)];
        v59 = v42 - 8 * v45;
        do
        {
          *(_QWORD *)v43 = 0;
          v43 += 8;
          v59 -= 8;
        }
        while (v59);
        v41[1] = v58;
      }
      else
      {
        if (v33 >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v47 = v46 - v44;
        v48 = (v46 - v44) >> 2;
        if (v48 <= v33)
          v48 = (unint64_t)v32;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(v41 + 2), v49);
        v52 = &v50[8 * v45];
        v53 = v42 - 8 * v45;
        v54 = v52;
        do
        {
          *(_QWORD *)v54 = 0;
          v54 += 8;
          v53 -= 8;
        }
        while (v53);
        v55 = *v41;
        for (j = v41[1]; j != v55; j -= 8)
        {
          v57 = *((_QWORD *)j - 1);
          *((_QWORD *)v52 - 1) = v57;
          v52 -= 8;
        }
        *v41 = v52;
        v41[1] = &v50[8 * v33];
        v41[2] = &v50[8 * v51];
        if (v55)
          operator delete(v55);
      }
    }
    v41 += 3;
  }
  while (v41 != (char **)((char *)this + 1928));
  v60 = 0;
  v61 = (_QWORD *)((char *)this + 2056);
  v62 = *((_DWORD *)this + 149);
  do
  {
    if (((v62 >> v60) & 1) != 0)
    {
      v63 = v32 * (float)v60;
      v64 = *((_QWORD *)this + 111) + 4 * (unint64_t)v63;
      *v61 = *((_QWORD *)this + 108) + 4 * (unint64_t)v63;
      v61[1] = v64;
    }
    else
    {
      *v61 = 0;
      v61[1] = 0;
    }
    ++v60;
    v61 += 2;
  }
  while (v60 != 8);
  ScottySTFTUpmixer::calculate_smoothing_windows(this, 1.0, *((float *)this + 103), *((float *)this + 104), 1);
  if (*((float *)this + 105) > 1.0)
  {
    ScottySTFTUpmixer::UnInitialize(this);
    return 4294944291;
  }
  *(_QWORD *)buf = 0x3EF126E900000000;
  *(_QWORD *)&buf[8] = 0x3F3CAC080000002DLL;
  *(_QWORD *)&buf[16] = 0xBEBE76C90000005ALL;
  *(_QWORD *)&v138 = 0x3E15810600000085;
  *((_QWORD *)&v138 + 1) = 0x3DE56042000000AELL;
  v139 = 0xBE3C6A7F000000B5;
  v140 = 0x3D83126F000000EELL;
  v141 = 0xBD5D2F1B0000010ELL;
  v142 = 0xBD83126F0000015ELL;
  v143 = 0x3DDD2F1B00000166;
  v144 = 0xBD03126F00000196;
  v145 = 0x3CC49BA6000001E3;
  v146 = 0x3CAC083100000212;
  v147 = 0xBD48B43900000217;
  v148 = 0x3C65604200000244;
  v149 = 0x3C9374BC0000028ALL;
  v150 = 0xBC6560420000029CLL;
  v151 = 0xBC1374BC000002DALL;
  v152 = 0xBC03126F0000031CLL;
  v153 = 0xBC03126F0000033CLL;
  v154 = 0x3BE5604200000352;
  v155 = 0x3BA3D70A00000379;
  v156 = 0x3B83126F000003C0;
  v157 = 0xBB83126F000003D7;
  v133[0] = 0x3ED26E9800000000;
  v133[1] = 0xBEC8312700000004;
  v133[2] = 0x3F0ED9170000004DLL;
  v133[3] = 0x3EDC28F60000007CLL;
  v133[4] = 0xBE978D50000000ABLL;
  v133[5] = 0x3E4ED917000000DALL;
  v133[6] = 0xBD79DB23000000E9;
  v133[7] = 0xBE09374C0000010ELL;
  v133[8] = 0x3DEB851F0000013DLL;
  v133[9] = 0xBDBE76C90000017CLL;
  v133[10] = 0x3DA5E35400000192;
  v133[11] = 0xBD178D50000001CBLL;
  v133[12] = 0xBCD4FDF400000212;
  v133[13] = 0x3C83126F0000023ELL;
  v133[14] = 0x3C65604200000246;
  v133[15] = 0x3C23D70A00000296;
  v133[16] = 0xBC9BA5E3000002BELL;
  v133[17] = 0x3BE56042000002E0;
  v133[18] = 0x3BC49BA600000316;
  v133[19] = 0x3BA3D70A00000328;
  v133[20] = 0x3BA3D70A00000370;
  v133[21] = 0xBBC49BA600000385;
  v68 = *((float *)this + 87);
  v133[22] = 0xBB83126F000003B5;
  v133[23] = 0x3B449BA6000003E6;
  if (v68 == 1.0)
  {
    v71 = 1024;
  }
  else
  {
    for (k = 0; k != 192; k += 8)
      *(_DWORD *)&buf[k] = vcvtas_u32_f32(v68 * (float)*(unsigned int *)&buf[k]);
    for (m = 0; m != 24; ++m)
      LODWORD(v133[m]) = vcvtas_u32_f32(v68 * (float)LODWORD(v133[m]));
    v71 = vcvtas_u32_f32(v68 * 1024.0);
  }
  LODWORD(v135) = 0;
  std::vector<float>::assign((char **)this + 281, v71, &v135);
  LODWORD(v135) = 0;
  std::vector<float>::assign((char **)this + 284, v71, &v135);
  for (n = 0; n != 192; n += 8)
  {
    v73 = *(unsigned int *)&buf[n];
    if (v73 >= v71)
      __assert_rtn("Initialize", "ScottySTFTUpmixer.cpp", 331, "indexAndCoeff.first < decorrelationLength");
    *(_DWORD *)(*((_QWORD *)this + 281) + 4 * v73) = *(_DWORD *)&buf[n + 4];
  }
  for (ii = 0; ii != 24; ++ii)
  {
    v75 = LODWORD(v133[ii]);
    if (v75 >= v71)
      __assert_rtn("Initialize", "ScottySTFTUpmixer.cpp", 336, "indexAndCoeff.first < decorrelationLength");
    *(_DWORD *)(*((_QWORD *)this + 284) + 4 * v75) = HIDWORD(v133[ii]);
  }
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v76 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = v135;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v77 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = v135;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 275));
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 276));
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v78 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = v135;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v79 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = v135;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 279));
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 280));
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v80 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = v135;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  std::make_unique[abi:ne180100]<IR::FFTFilter>((IR::FFTFilter **)&v135);
  v81 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = v135;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 278));
  IR::FFTFilter::initialize(*((IR::FFTFilter **)this + 277));
  v82 = (const float *)*((_QWORD *)this + 284);
  v135 = (float *)*((_QWORD *)this + 281);
  v136 = v82;
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 275), (const float *const *)&v135);
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 276), (const float *const *)&v135);
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 278), (const float *const *)&v135);
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 277), (const float *const *)&v135);
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 279), &v136);
  IR::FFTFilter::setFilterCoeffs(*((IR::FFTFilter **)this + 280), &v136);
  v83 = &kAllpassCombDelays;
  for (jj = 2296; jj != 2320; jj += 8)
  {
    v85 = *((float *)this + 87);
    v86 = *v83;
    v87 = (AllPassComb *)operator new();
    v88 = (float)v86;
    AllPassComb::AllPassComb(v87, vcvtas_u32_f32(v85 * v88), 0.3);
    v89 = *(_QWORD **)((char *)this + jj);
    *(_QWORD *)((char *)this + jj) = v87;
    if (v89)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v89);
    v90 = *((float *)this + 87);
    v91 = (AllPassComb *)operator new();
    AllPassComb::AllPassComb(v91, vcvtas_u32_f32(v90 * v88), 0.3);
    v92 = *(_QWORD **)((char *)this + jj + 24);
    *(_QWORD *)((char *)this + jj + 24) = v91;
    if (v92)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v92);
    v93 = *((float *)this + 87);
    v94 = (AllPassComb *)operator new();
    AllPassComb::AllPassComb(v94, vcvtas_u32_f32(v93 * v88), 0.3);
    v95 = *(_QWORD **)((char *)this + jj + 48);
    *(_QWORD *)((char *)this + jj + 48) = v94;
    if (v95)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v95);
    v96 = *((float *)this + 87);
    v97 = (AllPassComb *)operator new();
    AllPassComb::AllPassComb(v97, vcvtas_u32_f32(v96 * v88), 0.3);
    v98 = *(_QWORD **)((char *)this + jj + 72);
    *(_QWORD *)((char *)this + jj + 72) = v97;
    if (v98)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v98);
    v99 = *((float *)this + 87);
    v100 = v83[3];
    v101 = (AllPassComb *)operator new();
    v102 = (float)v100;
    AllPassComb::AllPassComb(v101, vcvtas_u32_f32(v99 * v102), 0.3);
    v103 = *(_QWORD **)((char *)this + jj + 96);
    *(_QWORD *)((char *)this + jj + 96) = v101;
    if (v103)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v103);
    v104 = *((float *)this + 87);
    v105 = (AllPassComb *)operator new();
    AllPassComb::AllPassComb(v105, vcvtas_u32_f32(v104 * v102), 0.3);
    v107 = *(_QWORD **)((char *)this + jj + 120);
    *(_QWORD *)((char *)this + jj + 120) = v105;
    if (v107)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v107);
    ++v83;
  }
  ScottySTFTUpmixer::new_allpass_filter((IIRFilterFloat32 **)buf, 100.0, 17000.0, v106, (uint64_t)this);
  v109 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = *(_QWORD *)buf;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  ScottySTFTUpmixer::new_allpass_filter((IIRFilterFloat32 **)buf, 141.421356, 24041.6306, v108, (uint64_t)this);
  v110 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = *(_QWORD *)buf;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  v111 = (const float *)((char *)this + 596);
  v112 = (uint32x4_t)vld1q_dup_f32(v111);
  v113.i64[0] = 0x100000001;
  v113.i64[1] = 0x100000001;
  ScottyUpmixer::InitializeSurroundFilters(this, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v112, (uint32x4_t)xmmword_1B66A1F60), v113)));
  ScottySTFTUpmixer::Reset((float **)this);
  v114 = *(_OWORD *)((char *)this + 436);
  *(_OWORD *)((char *)this + 552) = *(_OWORD *)((char *)this + 420);
  *(_OWORD *)((char *)this + 568) = v114;
  *((_DWORD *)this + 146) = *((_DWORD *)this + 113);
  v115 = *(_OWORD *)((char *)this + 372);
  *(_OWORD *)((char *)this + 488) = *(_OWORD *)((char *)this + 356);
  *(_OWORD *)((char *)this + 504) = v115;
  v116 = *(_OWORD *)((char *)this + 404);
  *(_OWORD *)((char *)this + 520) = *(_OWORD *)((char *)this + 388);
  *(_OWORD *)((char *)this + 536) = v116;
  v117 = *(_OWORD *)((char *)this + 340);
  *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)this + 324);
  *(_OWORD *)((char *)this + 472) = v117;
  ScottySTFTUpmixer::calculate_pan_tables(this);
  ScottySTFTUpmixer::calculate_smoothing_windows(this, *((float *)this + 105), *((float *)this + 103), *((float *)this + 104), 0);
  ScottySTFTUpmixer::calculate_tc_vectors(this);
  v4 = 0;
  v118 = atomic_load((unsigned int *)this + 147);
  *((_DWORD *)this + 113) = v118;
  *((_BYTE *)this + 9) = 1;
  return v4;
}

void sub_1B632DFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C4044AB9347);
  _Unwind_Resume(a1);
}

_QWORD *ScottySTFTUpmixer::UnInitialize(ScottySTFTUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *result;
  int v28;
  _QWORD *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 2448);
    if (*((char *)this + 2471) < 0)
      v3 = (_QWORD *)*v3;
    v28 = 136315394;
    v29 = v3;
    v30 = 2080;
    v31 = "UnInitialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Uninitializing STFTUpmixer", (uint8_t *)&v28, 0x16u);
  }
  *((_WORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v4)
    MultiRadixFFT_Dispose(v4);
  std::vector<float>::resize((uint64_t)this + 648, 0);
  std::vector<float>::resize((uint64_t)this + 672, 0);
  std::vector<float>::resize((uint64_t)this + 696, 0);
  std::vector<float>::resize((uint64_t)this + 720, 0);
  std::vector<float>::resize((uint64_t)this + 968, 0);
  std::vector<float>::resize((uint64_t)this + 992, 0);
  std::vector<float>::resize((uint64_t)this + 1016, 0);
  std::vector<float>::resize((uint64_t)this + 1040, 0);
  std::vector<float>::resize((uint64_t)this + 1064, 0);
  std::vector<float>::resize((uint64_t)this + 1088, 0);
  std::vector<float>::resize((uint64_t)this + 1112, 0);
  std::vector<float>::resize((uint64_t)this + 1136, 0);
  std::vector<float>::resize((uint64_t)this + 1160, 0);
  std::vector<float>::resize((uint64_t)this + 1184, 0);
  std::vector<float>::resize((uint64_t)this + 1208, 0);
  std::vector<float>::resize((uint64_t)this + 1232, 0);
  std::vector<float>::resize((uint64_t)this + 1256, 0);
  std::vector<float>::resize((uint64_t)this + 1280, 0);
  std::vector<float>::resize((uint64_t)this + 1304, 0);
  std::vector<float>::resize((uint64_t)this + 1328, 0);
  std::vector<float>::resize((uint64_t)this + 1352, 0);
  std::vector<float>::resize((uint64_t)this + 1376, 0);
  std::vector<float>::resize((uint64_t)this + 1400, 0);
  std::vector<float>::resize((uint64_t)this + 1424, 0);
  std::vector<float>::resize((uint64_t)this + 744, 0);
  std::vector<float>::resize((uint64_t)this + 768, 0);
  std::vector<float>::resize((uint64_t)this + 792, 0);
  std::vector<float>::resize((uint64_t)this + 816, 0);
  std::vector<float>::resize((uint64_t)this + 840, 0);
  std::vector<float>::resize((uint64_t)this + 864, 0);
  std::vector<float>::resize((uint64_t)this + 888, 0);
  std::vector<float>::resize((uint64_t)this + 944, 0);
  for (i = 0; i != 144; i += 24)
    std::vector<float>::resize((uint64_t)this + i + 1448, 0);
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  std::vector<float>::resize((uint64_t)this + 1592, 0);
  std::vector<float>::resize((uint64_t)this + 1616, 0);
  std::vector<float>::resize((uint64_t)this + 1640, 0);
  std::vector<float>::resize((uint64_t)this + 1784, 0);
  std::vector<float>::resize((uint64_t)this + 1664, 0);
  v6 = *((_QWORD *)this + 211);
  if (*((_QWORD *)this + 212) != v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      std::vector<float>::resize(v6 + 24 * v7, 0);
      v7 = v8;
      v6 = *((_QWORD *)this + 211);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 212) - v6) >> 3) > v8++);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 211, 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1712), 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1736), 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1760), 0);
  std::vector<float>::resize((uint64_t)this + 1808, 0);
  v10 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *((_QWORD *)this + 279);
    *((_QWORD *)this + 279) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = 0;
  v19 = (char *)this + 2296;
  do
  {
    v20 = *(_QWORD **)&v19[v18];
    *(_QWORD *)&v19[v18] = 0;
    if (v20)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v20);
    v21 = &v19[v18];
    v22 = *(_QWORD **)&v19[v18 + 24];
    *(_QWORD *)&v19[v18 + 24] = 0;
    if (v22)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v22);
    v23 = (_QWORD *)*((_QWORD *)v21 + 6);
    *((_QWORD *)v21 + 6) = 0;
    if (v23)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v23);
    v24 = &v19[v18];
    v25 = *(_QWORD **)&v19[v18 + 72];
    *(_QWORD *)&v19[v18 + 72] = 0;
    if (v25)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v25);
    v26 = (_QWORD *)*((_QWORD *)v24 + 12);
    *((_QWORD *)v24 + 12) = 0;
    if (v26)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v26);
    result = *(_QWORD **)&v19[v18 + 120];
    *(_QWORD *)&v19[v18 + 120] = 0;
    if (result)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](result);
    v18 += 8;
  }
  while (v18 != 24);
  return result;
}

void ScottySTFTUpmixer::Reset(float **this)
{
  NSObject *v2;
  _QWORD *v3;
  vDSP_Length v4;
  uint64_t i;
  float *v6;
  float *v7;
  IR::FFTFilter *v8;
  IR::FFTFilter *v9;
  IR::FFTFilter *v10;
  IR::FFTFilter *v11;
  IR::FFTFilter *v12;
  IR::FFTFilter *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = this + 306;
    if (*((char *)this + 2471) < 0)
      v3 = (_QWORD *)*v3;
    v34 = 136315394;
    v35 = v3;
    v36 = 2080;
    v37 = "Reset";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting STFTUpmixer", (uint8_t *)&v34, 0x16u);
  }
  if (*((_BYTE *)this + 8))
  {
    ScottyUpmixer::Reset((ScottyUpmixer *)this);
    vDSP_vclr(this[81], 1, this[82] - this[81]);
    vDSP_vclr(this[84], 1, this[85] - this[84]);
    vDSP_vclr(this[87], 1, this[88] - this[87]);
    vDSP_vclr(this[90], 1, this[91] - this[90]);
    vDSP_vclr(this[93], 1, this[94] - this[93]);
    vDSP_vclr(this[96], 1, this[97] - this[96]);
    vDSP_vclr(this[99], 1, this[100] - this[99]);
    vDSP_vclr(this[102], 1, this[103] - this[102]);
    vDSP_vclr(this[105], 1, this[106] - this[105]);
    vDSP_vclr(this[108], 1, this[109] - this[108]);
    vDSP_vclr(this[111], 1, this[112] - this[111]);
    vDSP_vclr(this[118], 1, this[119] - this[118]);
    v4 = (unint64_t)(float)*((unsigned int *)this + 84);
    vDSP_vclr(this[121], 1, v4);
    vDSP_vclr(this[124], 1, v4);
    vDSP_vclr(this[127], 1, v4);
    vDSP_vclr(this[130], 1, v4);
    vDSP_vclr(this[160], 1, v4);
    v34 = 1065353216;
    vDSP_vfill((const float *)&v34, this[166], 1, v4);
    vDSP_vfill((const float *)&v34, this[163], 1, v4);
    vDSP_vclr(this[169], 1, v4);
    vDSP_vclr(this[172], 1, v4);
    vDSP_vclr(this[175], 1, v4);
    vDSP_vclr(this[178], 1, v4);
    vDSP_vclr(this[139], 1, v4);
    vDSP_vclr(this[142], 1, v4);
    vDSP_vclr(this[145], 1, v4);
    vDSP_vclr(this[151], 1, v4);
    vDSP_vclr(this[154], 1, v4);
    vDSP_vclr(this[133], 1, v4);
    vDSP_vclr(this[136], 1, v4);
    vDSP_vclr(this[157], 1, v4);
    for (i = 0; i != 18; i += 3)
      vDSP_vclr(this[i + 181], 1, v4);
    v6 = this[273];
    if (v6)
      (*(void (**)(float *))(*(_QWORD *)v6 + 24))(v6);
    v7 = this[274];
    if (v7)
      (*(void (**)(float *))(*(_QWORD *)v7 + 24))(v7);
    v8 = (IR::FFTFilter *)this[275];
    if (v8)
      IR::FFTFilter::reset(v8);
    v9 = (IR::FFTFilter *)this[276];
    if (v9)
      IR::FFTFilter::reset(v9);
    v10 = (IR::FFTFilter *)this[278];
    if (v10)
      IR::FFTFilter::reset(v10);
    v11 = (IR::FFTFilter *)this[277];
    if (v11)
      IR::FFTFilter::reset(v11);
    v12 = (IR::FFTFilter *)this[279];
    if (v12)
      IR::FFTFilter::reset(v12);
    v13 = (IR::FFTFilter *)this[280];
    if (v13)
      IR::FFTFilter::reset(v13);
    v14 = 0;
    v15 = (char *)(this + 287);
    do
    {
      v16 = *(_QWORD *)&v15[v14];
      v17 = *(void **)(v16 + 8);
      v18 = *(_QWORD *)(v16 + 16) - (_QWORD)v17;
      if (v18 >= 1)
        bzero(v17, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
      *(_DWORD *)(v16 + 56) = 0;
      v19 = *(_QWORD *)&v15[v14 + 24];
      v20 = *(void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 >= 1)
        bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
      *(_DWORD *)(v19 + 56) = 0;
      v22 = *(_QWORD *)&v15[v14 + 48];
      v23 = *(void **)(v22 + 8);
      v24 = *(_QWORD *)(v22 + 16) - (_QWORD)v23;
      if (v24 >= 1)
        bzero(v23, 4 * (((unint64_t)v24 >> 2) - ((unint64_t)v24 > 3)) + 4);
      *(_DWORD *)(v22 + 56) = 0;
      v25 = *(_QWORD *)&v15[v14 + 72];
      v26 = *(void **)(v25 + 8);
      v27 = *(_QWORD *)(v25 + 16) - (_QWORD)v26;
      if (v27 >= 1)
        bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
      *(_DWORD *)(v25 + 56) = 0;
      v28 = *(_QWORD *)&v15[v14 + 96];
      v29 = *(void **)(v28 + 8);
      v30 = *(_QWORD *)(v28 + 16) - (_QWORD)v29;
      if (v30 >= 1)
        bzero(v29, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
      *(_DWORD *)(v28 + 56) = 0;
      v31 = *(_QWORD *)&v15[v14 + 120];
      v32 = *(void **)(v31 + 8);
      v33 = *(_QWORD *)(v31 + 16) - (_QWORD)v32;
      if (v33 >= 1)
        bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
      *(_DWORD *)(v31 + 56) = 0;
      v14 += 8;
    }
    while (v14 != 24);
    *((_BYTE *)this + 2440) = 1;
  }
}

uint64_t ScottySTFTUpmixer::SetInputLayout(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 8))
    return 4294944292;
  result = 0;
  *(_DWORD *)(a1 + 352) = 2;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t ScottySTFTUpmixer::SetOutputLayout(uint64_t a1, unsigned int a2)
{
  if (*(_BYTE *)(a1 + 8))
    return 4294944292;
  if (a2 > 2)
    return 4294944291;
  *(_DWORD *)(a1 + 596) = dword_1B665C990[a2];
  *(_DWORD *)(a1 + 16) = a2;
  ScottySTFTUpmixer::UpdateBufferAssignments((_DWORD *)a1);
  return 0;
}

void ScottySTFTUpmixer::UpdateParameters(ScottySTFTUpmixer *this)
{
  uint64_t v1;
  float v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int *v36;
  unsigned int v37;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v3 = COERCE_FLOAT(atomic_load((unsigned int *)(v1 + 4)));
    *((float *)this + 90) = __exp10f(v3 / 20.0);
    v4 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 120));
    *((_DWORD *)this + 95) = v4;
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 44));
    *((_DWORD *)this + 98) = v5;
    v6 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 48));
    *((_DWORD *)this + 96) = v6;
    v7 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 52));
    *((_DWORD *)this + 97) = v7;
    v8 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 56)));
    *((_DWORD *)this + 111) = v8;
    v9 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 116));
    *((_BYTE *)this + 448) = (v9 & 0x7FFFFFFF) != 0;
    v10 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 128));
    *((_BYTE *)this + 328) = (v10 & 0x7FFFFFFF) != 0;
    v11 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 132)));
    *((float *)this + 83) = __exp10f(v11 / 20.0);
    v12 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 8)));
    v13 = v12;
    *((_DWORD *)this + 91) = v13;
    v14 = 0.0;
    v15 = 0.0;
    if (v13 && !*((_BYTE *)this + 448))
      v15 = 1.0;
    *((float *)this + 93) = v15;
    v16 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 12)));
    v17 = v16;
    *((_DWORD *)this + 92) = v17;
    if (v17)
      v14 = 1.0;
    *((float *)this + 94) = v14;
    v18 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 76));
    *((_DWORD *)this + 106) = v18;
    v19 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 80));
    *((_DWORD *)this + 107) = v19;
    v20 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 84));
    *((_DWORD *)this + 108) = v20;
    v21 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 88));
    *((_DWORD *)this + 109) = v21;
    v22 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 92));
    *((_DWORD *)this + 110) = v22;
    v23 = atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 32));
    *((_DWORD *)this + 105) = v23;
    v24 = *((float *)this + 103);
    v25 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 36)));
    if (v24 != v25)
      goto LABEL_13;
    v26 = *((float *)this + 104);
    v27 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 40)));
    if (v26 != v27)
      goto LABEL_13;
    v28 = *((float *)this + 99);
    v29 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 60)));
    if (v28 != v29
      || (v30 = *((float *)this + 100),
          v31 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 64))),
          v30 != v31)
      || (v32 = *((float *)this + 101),
          v33 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 68))),
          v32 != v33)
      || (v34 = *((float *)this + 102),
          v35 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 72))),
          v34 != v35))
    {
LABEL_13:
      v36 = (unsigned int *)((char *)this + 588);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
    }
  }
}

void ScottySTFTUpmixer::SetParameterChangeTimeConstant(ScottySTFTUpmixer *this, float a2)
{
  *((float *)this + 148) = expf(-1.0 / (float)((float)(*((float *)this + 80) * a2) / (float)*((unsigned int *)this + 86)));
}

uint64_t ScottySTFTUpmixer::GetNativeFrameSize(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t ScottySTFTUpmixer::GetLatencySamples(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 89);
}

uint64_t ScottySTFTUpmixer::GetNumActiveInputChannels(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t ScottySTFTUpmixer::GetNumActiveOutputChannels(ScottySTFTUpmixer *this)
{
  const float *v1;
  uint32x4_t v2;
  int8x16_t v3;

  v1 = (const float *)((char *)this + 596);
  v2 = (uint32x4_t)vld1q_dup_f32(v1);
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  return vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v2, (uint32x4_t)xmmword_1B66A1F80), v3), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v2, (uint32x4_t)xmmword_1B66A1F70), v3)));
}

uint64_t ScottySTFTUpmixer::SetOutputChannelMask(ScottySTFTUpmixer *this, int a2)
{
  uint64_t result;
  char v4;

  if (*((_BYTE *)this + 8))
    return 4294944292;
  *((_DWORD *)this + 149) = a2;
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  if (((*(uint64_t (**)(ScottySTFTUpmixer *, _QWORD))(*(_QWORD *)this + 136))(this, 0) & 1) != 0)
    v4 = 1;
  else
    v4 = (*(uint64_t (**)(ScottySTFTUpmixer *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  result = 0;
  *((_BYTE *)this + 32) = v4;
  return result;
}

uint64_t ScottySTFTUpmixer::EnableOutputChannel(ScottySTFTUpmixer *this, unsigned int a2)
{
  if (*((_BYTE *)this + 8))
    return 4294944292;
  if (a2 > 7)
    return 4294944293;
  *((_DWORD *)this + 149) |= 1 << a2;
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  return 0;
}

uint64_t ScottySTFTUpmixer::DisableOutputChannel(ScottySTFTUpmixer *this, char a2)
{
  if (*((_BYTE *)this + 8))
    return 4294944292;
  *((_DWORD *)this + 149) &= ~(1 << a2);
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  return 0;
}

BOOL ScottySTFTUpmixer::IsInputEnabled(ScottySTFTUpmixer *this, unsigned int a2)
{
  return a2 < 2;
}

uint64_t ScottySTFTUpmixer::IsOutputEnabled(ScottySTFTUpmixer *this, char a2)
{
  return (*((_DWORD *)this + 149) >> a2) & 1;
}

void ScottySTFTUpmixer::ProcessUpmixer(Crossover2f **this, float **a2, float **a3)
{
  float *const *v3;
  ScottySTFTUpmixer *v4;
  Crossover2f *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  float **v11;
  float **v12;
  float **v13;
  float *v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  ScottySTFTUpmixer *v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  size_t v22;
  DSPSplitComplex *v23;
  char *v24;
  uint64_t v25;
  float v26;
  MultiRadixRealFFT *v27;
  float *imagp;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  DSPSplitComplex *v85;
  vDSP_Length v86;
  float *v87;
  float *v88;
  const float *v89;
  const float *v90;
  float *v91;
  float *v92;
  unint64_t v93;
  unint64_t v94;
  float *realp;
  float *v96;
  vDSP_Length v97;
  float *v98;
  unint64_t v99;
  unint64_t v100;
  float *v101;
  float *v102;
  vDSP_Length v103;
  float *v104;
  unint64_t v105;
  unint64_t v106;
  float *v107;
  float *v108;
  vDSP_Length v109;
  unint64_t v110;
  unint64_t v111;
  float *v112;
  float *v113;
  vDSP_Length v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  float *v119;
  float *v120;
  float *v121;
  float *v122;
  float *v123;
  const float **v124;
  const float **v125;
  float *v126;
  float *v127;
  float *v128;
  float *v129;
  ScottySTFTUpmixer *v130;
  vDSP_Length v131;
  const float *v132;
  const float *v133;
  float *v134;
  float *v135;
  float *v136;
  float *v137;
  float *v138;
  float *v139;
  float *v140;
  float v141;
  unint64_t v142;
  unint64_t v143;
  float *v144;
  vDSP_Length v145;
  unint64_t v146;
  unint64_t v147;
  float *v148;
  vDSP_Length v149;
  unint64_t v150;
  unint64_t v151;
  float *v152;
  vDSP_Length v153;
  ScottySTFTUpmixer *v154;
  float *v155;
  float *v156;
  float *v157;
  float *v158;
  float *v159;
  float *v160;
  const float **v161;
  void *v162;
  unint64_t v163;
  unint64_t v164;
  float *v165;
  vDSP_Length v166;
  unint64_t v167;
  unint64_t v168;
  float *v169;
  vDSP_Length v170;
  float *v171;
  ScottySTFTUpmixer *v172;
  const float *v173;
  float *v174;
  float *v175;
  float *v176;
  float *v177;
  uint64_t v178;
  DSPSplitComplex *v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  MultiRadixRealFFT *v184;
  DSPSplitComplex *v185;
  const float **v186;
  vDSP_Length v187;
  _BOOL4 v188;
  uint64_t v189;
  const float **v190;
  vDSP_Length v191;
  char v192;
  char v193;
  const float *v194;
  float **v195;
  float *v196;
  const float *v197;
  float *v198;
  ScottySTFTUpmixer *v199;
  int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  IR::FFTFilter *v204;
  IR::FFTFilter *v205;
  IR::FFTFilter *v206;
  IR::FFTFilter *v207;
  IR::FFTFilter *v208;
  IR::FFTFilter *v209;
  IR::FFTFilter *v210;
  int v211;
  uint64_t i;
  _QWORD *v213;
  uint64_t j;
  _QWORD *v215;
  uint64_t k;
  _QWORD *v217;
  uint64_t m;
  _QWORD *v219;
  int v220;
  uint64_t n;
  _QWORD *v222;
  uint64_t ii;
  _QWORD *v224;
  uint64_t jj;
  _QWORD *v226;
  uint64_t kk;
  _QWORD *v228;
  DSPSplitComplex *v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  DSPSplitComplex *v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  vDSP_Length v237;
  char v238;
  char v239;
  float v240;
  float v241;
  uint64_t v242;
  uint64_t v243;
  float *__E;
  float *v245;
  float *v246;
  float *v247;
  float *v248;
  float *v249;
  float *v250;
  DSPSplitComplex *v251;
  DSPSplitComplex *v252;
  DSPSplitComplex *v253;
  float *v254;
  float *v255;
  _DWORD *v256;
  DSPSplitComplex *v257;
  char *v258;
  unsigned int *v259;
  DSPSplitComplex *v260;
  DSPSplitComplex *__A;
  float *__N;
  float *__Na;
  vDSP_Length __Nb;
  float *__D;
  float *__Da;
  int __Db;
  uint64_t __n;
  DSPSplitComplex *__na;
  size_t __nc;
  uint64_t __nb;
  unsigned int *v272;
  ScottySTFTUpmixer *v274;
  unsigned __int128 __B;
  __int128 v276;
  float v277;
  float v278;
  DSPSplitComplex v279;
  int v280;
  DSPSplitComplex v281;
  DSPSplitComplex v282;
  float v283;
  float v284;
  int v285;
  float v286;
  float v287;
  float __C;
  DSPSplitComplex v289;
  float *v290[2];
  __int128 v291;
  __int128 v292;
  __int128 v293;
  float *v294[2];
  __int128 v295;
  __int128 v296;
  __int128 v297;
  float *v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;

  v3 = a2;
  v4 = (ScottySTFTUpmixer *)this;
  v302 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8) || !*((_BYTE *)this + 9))
  {
    ScottyUpmixer::ProcessBypass((ScottyUpmixer *)a2, (const float **)a3, *((unsigned int *)this + 86));
    return;
  }
  v300 = 0u;
  v301 = 0u;
  *(_OWORD *)v298 = 0u;
  v299 = 0u;
  v296 = 0u;
  v297 = 0u;
  *(_OWORD *)v294 = 0u;
  v295 = 0u;
  v292 = 0u;
  v293 = 0u;
  *(_OWORD *)v290 = 0u;
  v291 = 0u;
  v5 = this[6];
  v274 = v4;
  if (v5 && (Crossover2f::IsLowCrossoverEnabled(v5) || Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v4 + 6))))
  {
    if (*((_DWORD *)v4 + 81))
    {
      v6 = 0;
      do
      {
        v298[v6] = (float *)(*((_QWORD *)v4 + 93) + 4 * (*((_DWORD *)v4 + 86) * v6));
        if (Crossover2f::IsLowCrossoverEnabled(*((Crossover2f **)v4 + 6)))
          v7 = (float *)(*((_QWORD *)v4 + 96) + 4 * (*((_DWORD *)v4 + 86) * v6));
        else
          v7 = 0;
        v294[v6] = v7;
        if (Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v4 + 6)))
          v8 = (float *)(*((_QWORD *)v4 + 99) + 4 * (*((_DWORD *)v4 + 86) * v6));
        else
          v8 = 0;
        v290[v6++] = v8;
        v9 = *((unsigned int *)v4 + 81);
      }
      while (v6 < v9);
    }
    else
    {
      LODWORD(v9) = 0;
    }
    Crossover2f::Process(*((_QWORD *)v4 + 6), v3, v294, v290, v298, v9, *((unsigned int *)v4 + 86), *((unsigned __int8 *)v4 + 32), (float *const *)__E);
    v256 = (_DWORD *)((char *)v4 + 352);
    v17 = (unsigned int *)((char *)v4 + 340);
    v272 = (unsigned int *)((char *)v4 + 344);
    if (!*((_DWORD *)v4 + 88))
      goto LABEL_30;
    v258 = (char *)v4 + 340;
    v15 = *((_DWORD *)v4 + 85);
    v16 = *((unsigned int *)v4 + 86);
  }
  else
  {
    v10 = *((unsigned int *)v4 + 88);
    if (!(_DWORD)v10)
    {
      v17 = (unsigned int *)((char *)v4 + 340);
      v272 = (unsigned int *)((char *)v4 + 344);
      v256 = (_DWORD *)((char *)v4 + 352);
      goto LABEL_30;
    }
    v11 = v290;
    v12 = v294;
    v13 = v298;
    do
    {
      v14 = *v3++;
      *v13++ = v14;
      *v12++ = 0;
      *v11++ = 0;
      --v10;
    }
    while (v10);
    v258 = (char *)v4 + 340;
    v15 = *((_DWORD *)v4 + 85);
    v272 = (unsigned int *)((char *)v4 + 344);
    v16 = *((unsigned int *)v4 + 86);
    v256 = (_DWORD *)((char *)v4 + 352);
  }
  v18 = v4;
  v19 = 0;
  v20 = 0;
  v21 = v15 - v16;
  __n = 4 * (v15 - v16);
  v22 = 4 * v16;
  v23 = (DSPSplitComplex *)((char *)v18 + 1928);
  v24 = (char *)v18 + 912;
  do
  {
    v25 = v16;
    memcpy((void *)(*((_QWORD *)v18 + 81) + 4 * v19), (const void *)(*((_QWORD *)v18 + 81) + 4 * (v16 + v19)), __n);
    memcpy((void *)(*((_QWORD *)v18 + 81) + 4 * (v21 + v19)), v298[v20], v22);
    vDSP_vmul((const float *)(*((_QWORD *)v18 + 81) + 4 * (*((_DWORD *)v18 + 85) * v20)), 1, *((const float **)v18 + 226), 1, *((float **)v18 + 118), 1, *((unsigned int *)v18 + 85));
    vDSP_ctoz(*((const DSPComplex **)v18 + 118), 2, v23, 1, *((unsigned int *)v18 + 84));
    v27 = (MultiRadixRealFFT *)*((_QWORD *)v18 + 80);
    if (v27)
      MultiRadixRealFFT::RealInPlaceTransform(v27, v23, 1, v26);
    *(float *)&__B = 1.0 / (float)(2 * v15);
    v18 = v274;
    vDSP_vsmul(v23->realp, 1, (const float *)&__B, v23->realp, 1, *((unsigned int *)v274 + 84));
    vDSP_vsmul(v23->imagp, 1, (const float *)&__B, v23->imagp, 1, *((unsigned int *)v274 + 84));
    imagp = v23->imagp;
    *(float *)&v24[4 * v20] = *imagp;
    *imagp = 0.0;
    ++v20;
    v19 += v15;
    ++v23;
    v16 = v25;
  }
  while (v20 < *((unsigned int *)v274 + 88));
  v17 = (unsigned int *)v258;
  v4 = v274;
LABEL_30:
  v259 = v17;
  if (*((_BYTE *)v4 + 2440))
  {
    *((_DWORD *)v4 + 146) = *((_DWORD *)v4 + 113);
    v29 = *(_OWORD *)((char *)v4 + 436);
    *(_OWORD *)((char *)v4 + 552) = *(_OWORD *)((char *)v4 + 420);
    *(_OWORD *)((char *)v4 + 568) = v29;
    v30 = *(_OWORD *)((char *)v4 + 372);
    *(_OWORD *)((char *)v4 + 488) = *(_OWORD *)((char *)v4 + 356);
    *(_OWORD *)((char *)v4 + 504) = v30;
    v31 = *(_OWORD *)((char *)v4 + 404);
    *(_OWORD *)((char *)v4 + 520) = *(_OWORD *)((char *)v4 + 388);
    *(_OWORD *)((char *)v4 + 536) = v31;
    v32 = *(_OWORD *)((char *)v4 + 340);
    *(_OWORD *)((char *)v4 + 456) = *(_OWORD *)((char *)v4 + 324);
    *(_OWORD *)((char *)v4 + 472) = v32;
    ScottySTFTUpmixer::calculate_pan_tables(v4);
    ScottySTFTUpmixer::calculate_smoothing_windows(v4, *((float *)v4 + 138), *((float *)v4 + 103), *((float *)v4 + 104), 0);
    *((_BYTE *)v4 + 2440) = 0;
    goto LABEL_98;
  }
  v33 = *((float *)v4 + 148);
  v34 = *((float *)v4 + 90);
  v35 = *((float *)v4 + 123);
  if (v35 != v34)
  {
    v36 = (float)((float)(1.0 - v33) * v34) + (float)(v33 * v35);
    if (vabds_f32(v36, v34) >= (float)((float)(fabsf(v34) * 0.01) + 0.001))
      v34 = v36;
    *((float *)v4 + 123) = v34;
  }
  v37 = *((float *)v4 + 98);
  v38 = *((float *)v4 + 131);
  if (v38 != v37)
  {
    v39 = (float)((float)(1.0 - v33) * v37) + (float)(v33 * v38);
    if (vabds_f32(v39, v37) >= (float)((float)(fabsf(v37) * 0.01) + 0.001))
      v37 = v39;
    *((float *)v4 + 131) = v37;
  }
  v40 = *((float *)v4 + 96);
  v41 = *((float *)v4 + 129);
  if (v41 != v40)
  {
    v42 = (float)((float)(1.0 - v33) * v40) + (float)(v33 * v41);
    if (vabds_f32(v42, v40) >= (float)((float)(fabsf(v40) * 0.01) + 0.001))
      v40 = v42;
    *((float *)v4 + 129) = v40;
  }
  v43 = *((float *)v4 + 97);
  v44 = *((float *)v4 + 130);
  if (v44 != v43)
  {
    v45 = (float)((float)(1.0 - v33) * v43) + (float)(v33 * v44);
    if (vabds_f32(v45, v43) >= (float)((float)(fabsf(v43) * 0.01) + 0.001))
      v43 = v45;
    *((float *)v4 + 130) = v43;
  }
  v46 = *((float *)v4 + 95);
  v47 = *((float *)v4 + 128);
  if (v47 != v46)
  {
    v48 = (float)((float)(1.0 - v33) * v46) + (float)(v33 * v47);
    if (vabds_f32(v48, v46) >= (float)((float)(fabsf(v46) * 0.01) + 0.001))
      v46 = v48;
    *((float *)v4 + 128) = v46;
  }
  v49 = *((float *)v4 + 83);
  v50 = *((float *)v4 + 116);
  if (v50 != v49)
  {
    v51 = (float)((float)(1.0 - v33) * v49) + (float)(v33 * v50);
    if (vabds_f32(v51, v49) >= (float)((float)(fabsf(v49) * 0.01) + 0.001))
      v49 = v51;
    *((float *)v4 + 116) = v49;
  }
  v52 = *((float *)v4 + 93);
  v53 = *((float *)v4 + 126);
  if (v53 != v52)
  {
    v54 = (float)((float)(1.0 - v33) * v52) + (float)(v33 * v53);
    if (vabds_f32(v54, v52) < (float)((float)(fabsf(v52) * 0.01) + 0.001))
      v54 = *((float *)v4 + 93);
    *((float *)v4 + 126) = v54;
  }
  v55 = *((float *)v4 + 94);
  v56 = *((float *)v4 + 127);
  if (v56 != v55)
  {
    v57 = (float)((float)(1.0 - v33) * v55) + (float)(v33 * v56);
    if (vabds_f32(v57, v55) < (float)((float)(fabsf(v55) * 0.01) + 0.001))
      v57 = *((float *)v4 + 94);
    *((float *)v4 + 127) = v57;
  }
  v58 = v53 != v52;
  if (v56 != v55)
    v58 = 1;
  v59 = *((float *)v4 + 106);
  v60 = *((float *)v4 + 139);
  if (v60 != v59)
  {
    v61 = (float)((float)(1.0 - v33) * v59) + (float)(v33 * v60);
    if (vabds_f32(v61, v59) < (float)((float)(fabsf(v59) * 0.01) + 0.001))
      v61 = *((float *)v4 + 106);
    *((float *)v4 + 139) = v61;
  }
  if (v60 != v59)
    v58 = 1;
  v62 = *((float *)v4 + 107);
  v63 = *((float *)v4 + 140);
  if (v63 != v62)
  {
    v64 = (float)((float)(1.0 - v33) * v62) + (float)(v33 * v63);
    if (vabds_f32(v64, v62) < (float)((float)(fabsf(v62) * 0.01) + 0.001))
      v64 = *((float *)v4 + 107);
    *((float *)v4 + 140) = v64;
  }
  if (v63 != v62)
    v58 = 1;
  v65 = *((float *)v4 + 108);
  v66 = *((float *)v4 + 141);
  if (v66 != v65)
  {
    v67 = (float)((float)(1.0 - v33) * v65) + (float)(v33 * v66);
    if (vabds_f32(v67, v65) < (float)((float)(fabsf(v65) * 0.01) + 0.001))
      v67 = *((float *)v4 + 108);
    *((float *)v4 + 141) = v67;
  }
  if (v66 != v65)
    v58 = 1;
  v68 = *((float *)v4 + 109);
  v69 = *((float *)v4 + 142);
  if (v69 != v68)
  {
    v70 = (float)((float)(1.0 - v33) * v68) + (float)(v33 * v69);
    if (vabds_f32(v70, v68) < (float)((float)(fabsf(v68) * 0.01) + 0.001))
      v70 = *((float *)v4 + 109);
    *((float *)v4 + 142) = v70;
  }
  v71 = *((float *)v4 + 110);
  v72 = *((float *)v4 + 143);
  if (v72 == v71)
  {
    if (((v69 == v68) & ~v58) != 0)
      goto LABEL_94;
  }
  else
  {
    v73 = (float)((float)(1.0 - v33) * v71) + (float)(v33 * v72);
    if (vabds_f32(v73, v71) < (float)((float)(fabsf(v71) * 0.01) + 0.001))
      v73 = *((float *)v4 + 110);
    *((float *)v4 + 143) = v73;
  }
  ScottySTFTUpmixer::calculate_pan_tables(v4);
LABEL_94:
  v74 = *((float *)v4 + 105);
  v75 = *((float *)v4 + 138);
  if (v75 != v74)
  {
    v76 = (float)((float)(1.0 - v33) * v74) + (float)(v33 * v75);
    if (vabds_f32(v76, v74) >= (float)((float)(fabsf(v74) * 0.01) + 0.001))
      v74 = v76;
    *((float *)v4 + 138) = v74;
    ScottySTFTUpmixer::calculate_smoothing_windows(v4, v74, *((float *)v4 + 103), *((float *)v4 + 104), 0);
  }
LABEL_98:
  v77 = atomic_load((unsigned int *)v4 + 147);
  if (v77 != *((_DWORD *)v4 + 113))
  {
    *((_DWORD *)v4 + 113) = v77;
    v78 = *((_QWORD *)v4 + 5);
    if (v78)
    {
      v79 = atomic_load((unsigned int *)(v78 + 36));
      *((_DWORD *)v4 + 103) = v79;
      v80 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)v4 + 5) + 40)));
      *((float *)v4 + 104) = v80;
      ScottySTFTUpmixer::calculate_smoothing_windows(v4, *((float *)v4 + 138), *((float *)v4 + 103), v80, 0);
      v81 = atomic_load((unsigned int *)(*((_QWORD *)v4 + 5) + 60));
      *((_DWORD *)v4 + 99) = v81;
      v82 = atomic_load((unsigned int *)(*((_QWORD *)v4 + 5) + 64));
      *((_DWORD *)v4 + 100) = v82;
      v83 = atomic_load((unsigned int *)(*((_QWORD *)v4 + 5) + 68));
      *((_DWORD *)v4 + 101) = v83;
      v84 = atomic_load((unsigned int *)(*((_QWORD *)v4 + 5) + 72));
      *((_DWORD *)v4 + 102) = v84;
      ScottySTFTUpmixer::calculate_tc_vectors(v4);
    }
  }
  v260 = (DSPSplitComplex *)((char *)v4 + 1944);
  __A = (DSPSplitComplex *)((char *)v4 + 1928);
  __na = (DSPSplitComplex *)((char *)v4 + 2056);
  v85 = (DSPSplitComplex *)((char *)v4 + 2088);
  v257 = (DSPSplitComplex *)((char *)v4 + 2104);
  if (*((_BYTE *)v4 + 448) && *((_DWORD *)v4 + 4) == 2)
  {
LABEL_250:
    ScottySTFTUpmixer::enhanced_center_extraction((float *)v4, __A, v260, v85, v257);
    goto LABEL_252;
  }
  v86 = *((unsigned int *)v4 + 84);
  __C = 1.0;
  v287 = -1.0;
  __N = (float *)*((_QWORD *)v4 + 124);
  __D = (float *)*((_QWORD *)v4 + 121);
  v87 = (float *)*((_QWORD *)v4 + 130);
  v254 = (float *)*((_QWORD *)v4 + 127);
  *(_QWORD *)&__B = v254;
  *((_QWORD *)&__B + 1) = v87;
  v251 = (DSPSplitComplex *)((char *)v4 + 2088);
  v252 = (DSPSplitComplex *)v87;
  v249 = (float *)*((_QWORD *)v4 + 160);
  v88 = (float *)*((_QWORD *)v4 + 187);
  v89 = (const float *)*((_QWORD *)v4 + 223);
  vDSP_vsmsa(v89, 1, &v287, &__C, v88, 1, v86);
  v90 = (const float *)*((_QWORD *)v4 + 190);
  v91 = (float *)*((_QWORD *)v4 + 196);
  v92 = (float *)*((_QWORD *)v4 + 184);
  v289.realp = (float *)*((_QWORD *)v4 + 193);
  v289.imagp = v92;
  vDSP_zvcmul(__A, 1, __A, 1, &v289, 1, v86);
  v93 = *((unsigned int *)v4 + 84);
  if ((_DWORD)v93)
  {
    v94 = 0;
    realp = v289.realp;
    v96 = (float *)v90;
    do
    {
      v97 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v94);
      if (v97 > 1)
      {
        vDSP_dotpr(&realp[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v94)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v94)), 1, v96, v97);
        v93 = *((unsigned int *)v274 + 84);
      }
      else
      {
        *v96 = realp[v94];
      }
      ++v94;
      ++v96;
    }
    while (v94 < v93);
  }
  vDSP_vmma(v88, 1, v90, 1, v89, 1, __D, 1, __D, 1, v86);
  v98 = (float *)*((_QWORD *)v274 + 184);
  v282.realp = v91;
  v282.imagp = v98;
  vDSP_zvcmul(v260, 1, v260, 1, &v282, 1, v86);
  v99 = *((unsigned int *)v274 + 84);
  if ((_DWORD)v99)
  {
    v100 = 0;
    v101 = v282.realp;
    v102 = (float *)v90;
    do
    {
      v103 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v100);
      if (v103 > 1)
      {
        vDSP_dotpr(&v101[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v100)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v100)), 1, v102, v103);
        v99 = *((unsigned int *)v274 + 84);
      }
      else
      {
        *v102 = v101[v100];
      }
      ++v100;
      ++v102;
    }
    while (v100 < v99);
  }
  vDSP_vmma(v88, 1, v90, 1, v89, 1, __N, 1, __N, 1, v86);
  v104 = (float *)*((_QWORD *)v274 + 184);
  v281.realp = (float *)*((_QWORD *)v274 + 181);
  v281.imagp = v104;
  vDSP_zvcmul(__A, 1, v260, 1, &v281, 1, v86);
  v105 = *((unsigned int *)v274 + 84);
  if ((_DWORD)v105)
  {
    v106 = 0;
    v107 = v281.realp;
    v108 = (float *)v90;
    do
    {
      v109 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v106);
      if (v109 > 1)
      {
        vDSP_dotpr(&v107[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v106)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v106)), 1, v108, v109);
        v105 = *((unsigned int *)v274 + 84);
      }
      else
      {
        *v108 = v107[v106];
      }
      ++v106;
      ++v108;
    }
    while (v106 < v105);
  }
  vDSP_vmma(v88, 1, v90, 1, v89, 1, v254, 1, v254, 1, v86);
  v110 = *((unsigned int *)v274 + 84);
  if ((_DWORD)v110)
  {
    v111 = 0;
    v112 = v281.imagp;
    v113 = (float *)v90;
    do
    {
      v114 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v111);
      if (v114 > 1)
      {
        vDSP_dotpr(&v112[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v111)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v111)), 1, v113, v114);
        v110 = *((unsigned int *)v274 + 84);
      }
      else
      {
        *v113 = v112[v111];
      }
      ++v111;
      ++v113;
    }
    while (v111 < v110);
  }
  vDSP_vmma(v88, 1, v90, 1, v89, 1, (const float *)v252, 1, (float *)v252, 1, v86);
  vDSP_zvphas((const DSPSplitComplex *)&__B, 1, *((float **)v274 + 157), 1, v86);
  v286 = 4.0;
  v285 = 1065353216;
  v284 = 0.5;
  v283 = 0.0;
  v280 = v86;
  v115 = (float *)*((_QWORD *)v274 + 181);
  vDSP_zvmags((const DSPSplitComplex *)&__B, 1, v115, 1, v86);
  v116 = (float *)*((_QWORD *)v274 + 184);
  vDSP_vsub(__N, 1, __D, 1, v116, 1, v86);
  vDSP_vsq(v116, 1, v116, 1, v86);
  v117 = (float *)*((_QWORD *)v274 + 187);
  vDSP_vsma(v115, 1, &v286, v116, 1, v117, 1, v86);
  vvsqrtf(v117, v117, &v280);
  v118 = (float *)*((_QWORD *)v274 + 181);
  vDSP_vadd(__D, 1, __N, 1, v118, 1, v86);
  vDSP_vsbsm(v118, 1, v117, 1, &v284, v118, 1, v86);
  vDSP_vthr(v118, 1, &v283, v118, 1, v86);
  if ((*((_BYTE *)v274 + 596) & 0xC0) != 0 && *((float *)v274 + 129) > 0.0)
  {
    v119 = (float *)*((_QWORD *)v274 + 184);
    vDSP_vmsa(__D, 1, __N, 1, &kEPS, v119, 1, v86);
    vvsqrtf(v119, v119, &v280);
    v120 = (float *)*((_QWORD *)v274 + 187);
    vDSP_vdiv(v119, 1, (const float *)__B, 1, v120, 1, v86);
    v121 = (float *)*((_QWORD *)v274 + 190);
    vDSP_vdiv(v119, 1, *((const float **)&__B + 1), 1, v121, 1, v86);
    v279.realp = v120;
    v279.imagp = v121;
    v122 = (float *)*((_QWORD *)v274 + 193);
    vDSP_zvmags(&v279, 1, v122, 1, v86);
    v278 = *((float *)v274 + 130);
    v277 = (float)(v278 * v278) + (float)(v278 * -2.0);
    v123 = (float *)*((_QWORD *)v274 + 193);
    vDSP_vsmsa(v122, 1, &v277, (const float *)&v285, v123, 1, v86);
    vDSP_vmsa(__D, 1, v123, 1, &kEPS, *((float **)v274 + 139), 1, v86);
    v124 = (const float **)((char *)v274 + 1112);
    vDSP_vdiv(*((const float **)v274 + 139), 1, v118, 1, *((float **)v274 + 139), 1, v86);
    vDSP_vthr(*v124, 1, &v283, (float *)*v124, 1, v86);
    vvsqrtf((float *)*v124, *v124, &v280);
    vDSP_vmsa(__N, 1, v123, 1, &kEPS, *((float **)v274 + 148), 1, v86);
    v125 = (const float **)((char *)v274 + 1184);
    vDSP_vdiv(*((const float **)v274 + 148), 1, v118, 1, *((float **)v274 + 148), 1, v86);
    vDSP_vthr(*v125, 1, &v283, (float *)*v125, 1, v86);
    vvsqrtf((float *)*v125, *v125, &v280);
    vDSP_vsmul(v121, 1, &v278, v121, 1, v86);
    v278 = -v278;
    vDSP_vsmul(v120, 1, &v278, v120, 1, v86);
    vDSP_vmul(*((const float **)v274 + 148), 1, v120, 1, *((float **)v274 + 142), 1, v86);
    vDSP_vmul(*((const float **)v274 + 148), 1, v121, 1, *((float **)v274 + 145), 1, v86);
    vDSP_vneg(v121, 1, v121, 1, v86);
    vDSP_vmul(*((const float **)v274 + 139), 1, v120, 1, *((float **)v274 + 151), 1, v86);
    vDSP_vmul(*((const float **)v274 + 139), 1, v121, 1, *((float **)v274 + 154), 1, v86);
  }
  else
  {
    vDSP_vclr(*((float **)v274 + 139), 1, (uint64_t)(*((_QWORD *)v274 + 140) - *((_QWORD *)v274 + 139)) >> 2);
    vDSP_vclr(*((float **)v274 + 142), 1, (uint64_t)(*((_QWORD *)v274 + 143) - *((_QWORD *)v274 + 142)) >> 2);
    vDSP_vclr(*((float **)v274 + 145), 1, (uint64_t)(*((_QWORD *)v274 + 146) - *((_QWORD *)v274 + 145)) >> 2);
    vDSP_vclr(*((float **)v274 + 151), 1, (uint64_t)(*((_QWORD *)v274 + 152) - *((_QWORD *)v274 + 151)) >> 2);
    vDSP_vclr(*((float **)v274 + 154), 1, (uint64_t)(*((_QWORD *)v274 + 155) - *((_QWORD *)v274 + 154)) >> 2);
  }
  if (*((float *)v274 + 126) <= 0.0 && *((float *)v274 + 127) <= 0.0 && *((float *)v274 + 129) <= 0.0)
  {
    vDSP_vfill((const float *)&v285, *((float **)v274 + 133), 1, v86);
    vDSP_vfill((const float *)&v285, *((float **)v274 + 136), 1, v86);
  }
  else
  {
    v126 = (float *)*((_QWORD *)v274 + 184);
    vDSP_vsub(v118, 1, __D, 1, v126, 1, v86);
    vDSP_vthr(v126, 1, &v283, v126, 1, v86);
    v127 = (float *)*((_QWORD *)v274 + 187);
    vDSP_vsub(v118, 1, __N, 1, v127, 1, v86);
    vDSP_vthr(v127, 1, &v283, v127, 1, v86);
    if (*((float *)v274 + 126) > 0.0 || *((float *)v274 + 127) > 0.0)
    {
      LODWORD(v279.realp) = *((_DWORD *)v274 + 131);
      v278 = 1.0 - *(float *)&v279.realp;
      v128 = (float *)*((_QWORD *)v274 + 190);
      vDSP_vsmsa(v126, 1, &v278, &kEPS, v128, 1, v86);
      vDSP_vsma(__D, 1, (const float *)&v279, v128, 1, v128, 1, v86);
      v129 = (float *)*((_QWORD *)v274 + 193);
      vDSP_vsmsa(v127, 1, &v278, &kEPS, v129, 1, v86);
      vDSP_vsma(__N, 1, (const float *)&v279, v129, 1, v129, 1, v86);
      vDSP_vdiv(v128, 1, v129, 1, v249, 1, v86);
    }
    vDSP_vsadd(__D, 1, &kEPS, __D, 1, v86);
    vDSP_vdiv(__D, 1, v126, 1, *((float **)v274 + 133), 1, v86);
    vvsqrtf(*((float **)v274 + 133), *((const float **)v274 + 133), &v280);
    vDSP_vsadd(__N, 1, &kEPS, __N, 1, v86);
    vDSP_vdiv(__N, 1, v127, 1, *((float **)v274 + 136), 1, v86);
    vvsqrtf(*((float **)v274 + 136), *((const float **)v274 + 136), &v280);
  }
  v130 = v274;
  v253 = (DSPSplitComplex *)((char *)v274 + 2072);
  v131 = *((unsigned int *)v274 + 84);
  v132 = (const float *)*((_QWORD *)v274 + 160);
  v133 = (const float *)*((_QWORD *)v274 + 157);
  v134 = (float *)*((_QWORD *)v274 + 163);
  v247 = (float *)*((_QWORD *)v274 + 169);
  v248 = (float *)*((_QWORD *)v274 + 172);
  v250 = (float *)*((_QWORD *)v274 + 166);
  v135 = (float *)*((_QWORD *)v274 + 175);
  v136 = (float *)*((_QWORD *)v274 + 178);
  LODWORD(v289.realp) = 1065353216;
  LODWORD(v282.realp) = 1056964608;
  LODWORD(v281.realp) = 0;
  LODWORD(v279.realp) = -1082130432;
  __C = *((float *)v274 + 129) * *((float *)v274 + 129);
  v287 = 1.0 - __C;
  v286 = __C + -1.0;
  v285 = v131;
  v137 = (float *)*((_QWORD *)v274 + 184);
  v138 = (float *)*((_QWORD *)v274 + 187);
  __Na = (float *)*((_QWORD *)v274 + 181);
  __Da = (float *)*((_QWORD *)v274 + 190);
  v139 = (float *)*((_QWORD *)v274 + 193);
  v140 = (float *)*((_QWORD *)v274 + 196);
  if (*((float *)v274 + 126) <= 0.0 && (v141 = *((float *)v274 + 127), v141 <= 0.0))
  {
    if (*((_QWORD *)v274 + 257) && *((_QWORD *)v274 + 258))
    {
      vDSP_vsq(*((const float **)v274 + 133), 1, *((float **)v274 + 193), 1, v131);
      vDSP_vsmsa(v139, 1, &__C, &v287, v139, 1, v131);
      vvsqrtf(v139, v139, &v285);
      vDSP_zrvmul(__A, 1, v139, 1, __na, 1, v131);
    }
    if (*((_QWORD *)v274 + 259) && *((_QWORD *)v274 + 260))
    {
      vDSP_vsq(*((const float **)v274 + 136), 1, v139, 1, v131);
      vDSP_vsmsa(v139, 1, &__C, &v287, v139, 1, v131);
      vvsqrtf(v139, v139, &v285);
      vDSP_zrvmul(v260, 1, v139, 1, v253, 1, v131);
    }
    v155 = (float *)*((_QWORD *)v274 + 261);
    if (v155 && *((_QWORD *)v274 + 262))
    {
      vDSP_vclr(v155, 1, v131);
      vDSP_vclr(*((float **)v274 + 262), 1, v131);
    }
    v156 = (float *)*((_QWORD *)v274 + 263);
    if (v156 && *((_QWORD *)v274 + 264) && *((_DWORD *)v274 + 4) == 1)
    {
      vDSP_vclr(v156, 1, v131);
      vDSP_vclr(*((float **)v274 + 264), 1, v131);
    }
    v157 = (float *)*((_QWORD *)v274 + 265);
    if (v157 && *((_QWORD *)v274 + 266))
    {
      vDSP_vclr(v157, 1, v131);
      vDSP_vclr(*((float **)v274 + 266), 1, v131);
    }
    v158 = (float *)*((_QWORD *)v274 + 267);
    if (v158 && *((_QWORD *)v274 + 268))
      goto LABEL_234;
  }
  else
  {
    v245 = v136;
    v246 = v135;
    vDSP_vdbcon(v132, 1, (const float *)&v289, v138, 1, v131, 0);
    LODWORD(__B) = 1011666125;
    vDSP_vsmsa(v138, 1, (const float *)&__B, (const float *)&v282, v138, 1, v131);
    vDSP_vclip(v138, 1, (const float *)&v281, (const float *)&v289, v138, 1, v131);
    vDSP_vsmsa(v138, 1, (const float *)&v279, (const float *)&v289, __Na, 1, v131);
    vDSP_vclip(__Na, 1, (const float *)&v281, (const float *)&v289, __Na, 1, v131);
    vDSP_vabs(v133, 1, v137, 1, v131);
    vDSP_vsmsa(v137, 1, &std::numbers::inv_pi_v<float>, (const float *)&v281, v137, 1, v131);
    vDSP_vclip(v137, 1, (const float *)&v281, (const float *)&v289, v137, 1, v131);
    v255 = (float *)*((_QWORD *)v274 + 208);
    vDSP_vsmsa(v255, 1, (const float *)&v279, (const float *)&v289, __Da, 1, v131);
    if ((*((_BYTE *)v274 + 596) & 1) != 0)
    {
      PV_Apply_LUT2D<81u,91u>(__Na, v137, v139, v131, *((const float **)v274 + 199), v140);
      vDSP_vsq(*((const float **)v274 + 133), 1, v140, 1, v131);
      vDSP_vmul(v139, 1, v140, 1, v139, 1, v131);
      vDSP_vsmsa(v140, 1, &v286, &v287, v140, 1, v131);
      vDSP_vadd(v139, 1, v140, 1, v139, 1, v131);
      vvsqrtf(v140, v139, &v285);
      v142 = *((unsigned int *)v274 + 84);
      if ((_DWORD)v142)
      {
        v143 = 0;
        v144 = v139;
        do
        {
          v145 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v143);
          if (v145 > 1)
          {
            vDSP_dotpr(&v140[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v143)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v143)), 1, v144, v145);
            v142 = *((unsigned int *)v274 + 84);
          }
          else
          {
            *v144 = v140[v143];
          }
          ++v143;
          ++v144;
        }
        while (v143 < v142);
      }
      vDSP_vmma(__Da, 1, v139, 1, v255, 1, v134, 1, v134, 1, v131);
      v130 = v274;
      if (*((_QWORD *)v274 + 257) && *((_QWORD *)v274 + 258))
        vDSP_zrvmul(__A, 1, v134, 1, __na, 1, v131);
    }
    if ((*((_BYTE *)v130 + 596) & 2) != 0)
    {
      PV_Apply_LUT2D<81u,91u>(v138, v137, v139, v131, *((const float **)v130 + 199), v140);
      vDSP_vsq(*((const float **)v130 + 136), 1, v140, 1, v131);
      vDSP_vmul(v139, 1, v140, 1, v139, 1, v131);
      vDSP_vsmsa(v140, 1, &v286, &v287, v140, 1, v131);
      vDSP_vadd(v139, 1, v140, 1, v139, 1, v131);
      vvsqrtf(v140, v139, &v285);
      v146 = *((unsigned int *)v130 + 84);
      if ((_DWORD)v146)
      {
        v147 = 0;
        v148 = v139;
        do
        {
          v149 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v147);
          if (v149 > 1)
          {
            vDSP_dotpr(&v140[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v147)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v147)), 1, v148, v149);
            v146 = *((unsigned int *)v274 + 84);
          }
          else
          {
            *v148 = v140[v147];
          }
          ++v147;
          ++v148;
        }
        while (v147 < v146);
      }
      vDSP_vmma(__Da, 1, v139, 1, v255, 1, v250, 1, v250, 1, v131);
      v130 = v274;
      if (*((_QWORD *)v274 + 259) && *((_QWORD *)v274 + 260))
        vDSP_zrvmul(v260, 1, v250, 1, v253, 1, v131);
    }
    if ((*((_BYTE *)v130 + 596) & 0xC) != 0)
    {
      v141 = *((float *)v130 + 126);
      if (v141 <= 0.0)
      {
        v159 = (float *)*((_QWORD *)v130 + 261);
        if (v159 && *((_QWORD *)v130 + 262))
        {
          vDSP_vclr(v159, 1, v131);
          vDSP_vclr(*((float **)v130 + 262), 1, v131);
        }
        v160 = (float *)*((_QWORD *)v130 + 263);
        if (v160 && *((_QWORD *)v130 + 264) && *((_DWORD *)v130 + 4) == 1)
        {
          vDSP_vclr(v160, 1, v131);
          vDSP_vclr(*((float **)v130 + 264), 1, v131);
        }
      }
      else
      {
        PV_Apply_LUT2D<81u,91u>(v138, v137, v140, v131, *((const float **)v130 + 202), v140);
        v150 = *((unsigned int *)v130 + 84);
        if ((_DWORD)v150)
        {
          v151 = 0;
          v152 = v139;
          do
          {
            v153 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v151);
            if (v153 > 1)
            {
              vDSP_dotpr(&v140[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v151)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v151)), 1, v152, v153);
              v150 = *((unsigned int *)v274 + 84);
            }
            else
            {
              *v152 = v140[v151];
            }
            ++v151;
            ++v152;
          }
          while (v151 < v150);
        }
        v154 = v274;
        vDSP_vsmul(v139, 1, (const float *)v274 + 123, v139, 1, v131);
        v284 = 1.0 - *((float *)v274 + 131);
        vDSP_vsmsa(*((const float **)v154 + 133), 1, &v284, (const float *)v154 + 131, v140, 1, v131);
        vDSP_vmul(v139, 1, v140, 1, v140, 1, v131);
        vDSP_vmma(__Da, 1, v140, 1, v255, 1, v247, 1, v247, 1, v131);
        vDSP_vsmsa(*((const float **)v154 + 136), 1, &v284, (const float *)v154 + 131, v140, 1, v131);
        vDSP_vmul(v139, 1, v140, 1, v140, 1, v131);
        vDSP_vmma(__Da, 1, v140, 1, v255, 1, v248, 1, v248, 1, v131);
        if (*((_DWORD *)v274 + 91) == 1 || !*((_DWORD *)v274 + 4))
        {
          if (*((_QWORD *)v274 + 261))
          {
            if (*((_QWORD *)v274 + 262))
            {
              vDSP_zrvmul(__A, 1, v247, 1, v251, 1, v131);
              v161 = (const float **)v274;
              vDSP_vma(*((const float **)v274 + 243), 1, v248, 1, *((const float **)v274 + 261), 1, *((float **)v274 + 261), 1, v131);
              vDSP_vma(v161[244], 1, v248, 1, v161[262], 1, (float *)v161[262], 1, v131);
              v283 = 0.70711;
              vDSP_vsmul(v161[261], 1, &v283, (float *)v161[261], 1, v131);
              vDSP_vsmul(v161[262], 1, &v283, (float *)v161[262], 1, v131);
              v162 = (void *)*((_QWORD *)v274 + 263);
              if (v162)
              {
                if (*((_QWORD *)v274 + 264) && *((_DWORD *)v274 + 4) == 1)
                {
                  memcpy(v162, *((const void **)v274 + 261), 4 * v131);
                  memcpy(*((void **)v274 + 264), *((const void **)v274 + 262), 4 * v131);
                }
              }
            }
          }
        }
        else
        {
          if (*((_QWORD *)v274 + 261) && *((_QWORD *)v274 + 262))
            vDSP_zrvmul(__A, 1, v247, 1, v251, 1, v131);
          if (*((_QWORD *)v274 + 263) && *((_QWORD *)v274 + 264))
            vDSP_zrvmul(v260, 1, v248, 1, v257, 1, v131);
        }
        v130 = v274;
      }
    }
    if ((*((_BYTE *)v130 + 596) & 0x30) != 0)
    {
      v141 = *((float *)v274 + 127);
      if (v141 > 0.0)
      {
        PV_Apply_LUT2D<81u,91u>(__Na, v137, v139, v131, *((const float **)v274 + 205), v140);
        v284 = 1.0 - *((float *)v274 + 131);
        vDSP_vsmsa(*((const float **)v274 + 133), 1, &v284, (const float *)v274 + 131, v140, 1, v131);
        vDSP_vmul(v139, 1, v140, 1, v140, 1, v131);
        v163 = *((unsigned int *)v274 + 84);
        if ((_DWORD)v163)
        {
          v164 = 0;
          v165 = v139;
          do
          {
            v166 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v164);
            if (v166 > 1)
            {
              vDSP_dotpr(&v140[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v164)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v164)), 1, v165, v166);
              v163 = *((unsigned int *)v274 + 84);
            }
            else
            {
              *v165 = v140[v164];
            }
            ++v164;
            ++v165;
          }
          while (v164 < v163);
        }
        vDSP_vmma(__Da, 1, v139, 1, v255, 1, v246, 1, v246, 1, v131);
        if (*((_QWORD *)v274 + 265) && *((_QWORD *)v274 + 266))
          vDSP_zrvmul(__A, 1, v246, 1, (const DSPSplitComplex *)((char *)v274 + 2120), 1, v131);
        PV_Apply_LUT2D<81u,91u>(v138, v137, v139, v131, *((const float **)v274 + 205), v140);
        vDSP_vsmsa(*((const float **)v274 + 136), 1, &v284, (const float *)v274 + 131, v140, 1, v131);
        vDSP_vmul(v139, 1, v140, 1, v140, 1, v131);
        v167 = *((unsigned int *)v274 + 84);
        if ((_DWORD)v167)
        {
          v168 = 0;
          v169 = v139;
          do
          {
            v170 = *(unsigned int *)(*((_QWORD *)v274 + 220) + 4 * v168);
            if (v170 > 1)
            {
              vDSP_dotpr(&v140[*(unsigned int *)(*((_QWORD *)v274 + 217) + 4 * v168)], 1, *(const float **)(*((_QWORD *)v274 + 211) + 24 * *(unsigned int *)(*((_QWORD *)v274 + 214) + 4 * v168)), 1, v169, v170);
              v167 = *((unsigned int *)v274 + 84);
            }
            else
            {
              *v169 = v140[v168];
            }
            ++v168;
            ++v169;
          }
          while (v168 < v167);
        }
        vDSP_vmma(__Da, 1, v139, 1, v255, 1, v245, 1, v245, 1, v131);
        if (*((_QWORD *)v274 + 267) && *((_QWORD *)v274 + 268))
          vDSP_zrvmul(v260, 1, v245, 1, (const DSPSplitComplex *)((char *)v274 + 2136), 1, v131);
        goto LABEL_235;
      }
      v171 = (float *)*((_QWORD *)v274 + 265);
      if (v171 && *((_QWORD *)v274 + 266))
      {
        vDSP_vclr(v171, 1, v131);
        vDSP_vclr(*((float **)v274 + 266), 1, v131);
      }
      v158 = (float *)*((_QWORD *)v274 + 267);
      if (v158)
      {
        if (*((_QWORD *)v274 + 268))
        {
LABEL_234:
          vDSP_vclr(v158, 1, v131);
          vDSP_vclr(*((float **)v274 + 268), 1, v131);
        }
      }
    }
  }
LABEL_235:
  v172 = v274;
  v173 = (const float *)((char *)v274 + 516);
  if ((*((_BYTE *)v274 + 596) & 0x40) != 0)
  {
    v174 = (float *)*((_QWORD *)v274 + 269);
    if (v174)
    {
      if (*((_QWORD *)v274 + 270))
      {
        if (*v173 <= 0.0)
        {
          vDSP_vclr(v174, 1, v131);
          v172 = v274;
          vDSP_vclr(*((float **)v274 + 270), 1, v131);
        }
        else
        {
          v172 = v274;
          v175 = (float *)*((_QWORD *)v274 + 145);
          *(_QWORD *)&__B = *((_QWORD *)v274 + 142);
          *((_QWORD *)&__B + 1) = v175;
          vDSP_zvmul((const DSPSplitComplex *)&__B, 1, v260, 1, (const DSPSplitComplex *)((char *)v274 + 2152), 1, v131, 1);
          vDSP_vma(*((const float **)v172 + 139), 1, *((const float **)v172 + 241), 1, *((const float **)v172 + 269), 1, *((float **)v172 + 269), 1, v131);
          vDSP_vma(*((const float **)v172 + 139), 1, *((const float **)v172 + 242), 1, *((const float **)v172 + 270), 1, *((float **)v172 + 270), 1, v131);
          vDSP_vsmul(*((const float **)v172 + 269), 1, v173, *((float **)v172 + 269), 1, v131);
          vDSP_vsmul(*((const float **)v172 + 270), 1, v173, *((float **)v172 + 270), 1, v131);
        }
      }
    }
  }
  if ((*((_BYTE *)v172 + 596) & 0x80) != 0)
  {
    v176 = (float *)*((_QWORD *)v172 + 271);
    if (v176)
    {
      if (*((_QWORD *)v172 + 272))
      {
        if (*v173 <= 0.0)
        {
          vDSP_vclr(v176, 1, v131);
          v172 = v274;
          vDSP_vclr(*((float **)v274 + 272), 1, v131);
        }
        else
        {
          v172 = v274;
          v177 = (float *)*((_QWORD *)v274 + 154);
          *(_QWORD *)&__B = *((_QWORD *)v274 + 151);
          *((_QWORD *)&__B + 1) = v177;
          vDSP_zvmul((const DSPSplitComplex *)&__B, 1, __A, 1, (const DSPSplitComplex *)((char *)v274 + 2168), 1, v131, 1);
          vDSP_vma(*((const float **)v172 + 148), 1, *((const float **)v172 + 243), 1, *((const float **)v172 + 271), 1, *((float **)v172 + 271), 1, v131);
          vDSP_vma(*((const float **)v172 + 148), 1, *((const float **)v172 + 244), 1, *((const float **)v172 + 272), 1, *((float **)v172 + 272), 1, v131);
          vDSP_vsmul(*((const float **)v172 + 271), 1, v173, *((float **)v172 + 271), 1, v131);
          vDSP_vsmul(*((const float **)v172 + 272), 1, v173, *((float **)v172 + 272), 1, v131);
        }
      }
    }
  }
  v4 = v172;
  if (!*((_BYTE *)v172 + 448))
    goto LABEL_252;
  v85 = v251;
  if (*((_DWORD *)v172 + 4) == 2)
    goto LABEL_250;
  ScottySTFTUpmixer::enhanced_center_extraction((float *)v172, __na, v253, v251, v257);
LABEL_252:
  v178 = 0;
  v179 = __na;
  do
  {
    if (((*((_DWORD *)v4 + 149) >> v178) & 1) != 0)
    {
      v180 = a3[v178];
      v181 = *v259;
      v182 = *v272;
      LODWORD(__B) = 0x40000000;
      if (v178 <= 8)
      {
        v183 = *((_DWORD *)v4 + v178 + 150);
        if (v183 != -1)
        {
          if (v178 <= 1)
          {
            v141 = *((float *)v4 + v178 + 228);
            *v179->imagp = v141;
          }
          v184 = (MultiRadixRealFFT *)*((_QWORD *)v4 + 80);
          if (v184)
          {
            v185 = v179;
            MultiRadixRealFFT::RealInPlaceTransform(v184, v179, -1, v141);
            v179 = v185;
          }
          __nc = (size_t)v179;
          vDSP_ztoc(v179, 1, *((DSPComplex **)v4 + 118), 2, *((unsigned int *)v4 + 84));
          v186 = (const float **)((char *)v4 + 944);
          vDSP_vsmul(*((const float **)v4 + 118), 1, (const float *)&__B, *((float **)v4 + 118), 1, *((unsigned int *)v4 + 85));
          vDSP_vmul(*v186, 1, *((const float **)v4 + 226), 1, (float *)*v186, 1, *((unsigned int *)v4 + 85));
          vDSP_vadd(*v186, 1, (const float *)(*((_QWORD *)v4 + 84) + 4 * (v182 + *((_DWORD *)v4 + 85) * v183)), 1, (float *)*v186, 1, (v181 - v182));
          memcpy((void *)(*((_QWORD *)v4 + 84) + 4 * (*((_DWORD *)v4 + 85) * v183)), *((const void **)v4 + 118), 4 * v181);
          memcpy(v180, (const void *)(*((_QWORD *)v4 + 84) + 4 * (*((_DWORD *)v4 + 85) * v183)), 4 * v182);
          v179 = (DSPSplitComplex *)__nc;
        }
      }
    }
    ++v178;
    ++v179;
  }
  while (v178 != 8);
  if (*((_DWORD *)v4 + 4))
    __Db = 0;
  else
    __Db = (*((unsigned __int8 *)v4 + 596) >> 3) & 1;
  __Nb = *((unsigned int *)v4 + 86);
  v187 = *((unsigned int *)v4 + 89);
  if (Crossover2f::IsLowCrossoverEnabled(*((Crossover2f **)v4 + 6))
    || Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v274 + 6)))
  {
    if (*v256 == 1)
      goto LABEL_293;
    v188 = __Db && *((_BYTE *)v274 + 328) && v294[0] != 0;
    v189 = 0;
    v190 = (const float **)(a3 + 3);
    v191 = (__Nb - v187);
    __nb = 4 * v187;
    v192 = 1;
    while (1)
    {
      v193 = v192;
      v194 = v294[v189];
      if (v194)
      {
        v195 = a3 + 3;
        if (v188)
          goto LABEL_277;
        if (((*((_DWORD *)v274 + 149) >> v189) & 1) != 0)
          break;
      }
LABEL_281:
      if (((*((_DWORD *)v274 + 149) >> v189) & 1) != 0)
      {
        v197 = v290[v189];
        if (v197)
        {
          if ((_DWORD)v187)
          {
            vDSP_vadd(a3[v189], 1, (const float *)(*((_QWORD *)v274 + 90) + 4 * v189 * *((unsigned int *)v274 + 89)), 1, a3[v189], 1, v187);
            memcpy((void *)(*((_QWORD *)v274 + 90) + 4 * v189 * *((unsigned int *)v274 + 89)), &v290[v189][v191], __nb);
            v197 = v290[v189];
          }
          v198 = &a3[v189][v187];
          vDSP_vadd(v198, 1, v197, 1, v198, 1, v191);
        }
      }
      v192 = 0;
      v189 = 1;
      if ((v193 & 1) == 0)
      {
        if ((__Db & 1) != 0)
        {
          if (v188)
          {
            *(float *)&__B = *((float *)v274 + 116) * 0.31623;
            vDSP_vsmul(*v190, 1, (const float *)&__B, (float *)*v190, 1, __Nb);
          }
          else
          {
            vDSP_vclr((float *)*v190, 1, __Nb);
          }
        }
        goto LABEL_293;
      }
    }
    v195 = &a3[v189];
LABEL_277:
    v196 = *v195;
    if (*v195)
    {
      if ((_DWORD)v187)
      {
        vDSP_vadd(v196, 1, (const float *)(*((_QWORD *)v274 + 87) + 4 * v189 * *((unsigned int *)v274 + 89)), 1, v196, 1, v187);
        memcpy((void *)(*((_QWORD *)v274 + 87) + 4 * v189 * *((unsigned int *)v274 + 89)), &v294[v189][v191], __nb);
        v194 = v294[v189];
      }
      vDSP_vadd(&v196[v187], 1, v194, 1, &v196[v187], 1, v191);
    }
    goto LABEL_281;
  }
  if (__Db)
    vDSP_vclr(a3[3], 1, __Nb);
LABEL_293:
  v199 = v274;
  switch(*((_DWORD *)v274 + 111))
  {
    case 1:
      v200 = *((_DWORD *)v274 + 86);
      DWORD2(__B) = 1;
      HIDWORD(__B) = 4 * v200;
      DWORD2(v276) = 1;
      HIDWORD(v276) = 4 * v200;
      v201 = *((_QWORD *)v274 + 273);
      if (!v201)
        goto LABEL_373;
      v202 = *((_DWORD *)v274 + 149);
      if ((v202 & 0x10) != 0)
      {
        *(_QWORD *)&v276 = a3[4];
        v203 = 1;
        if ((v202 & 0x40) == 0)
        {
LABEL_372:
          LODWORD(__B) = v203;
          (*(void (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
          v199 = v274;
LABEL_373:
          v230 = *((_QWORD *)v199 + 274);
          if (!v230)
            goto LABEL_380;
          v231 = *((_DWORD *)v199 + 149);
          if ((v231 & 0x20) != 0)
          {
            *(_QWORD *)&v276 = a3[5];
            v232 = 1;
            if ((v231 & 0x80) == 0)
            {
LABEL_379:
              LODWORD(__B) = v232;
              (*(void (**)(uint64_t, _QWORD, unsigned __int128 *, unsigned __int128 *))(*(_QWORD *)v230 + 32))(v230, *v272, &__B, &__B);
              v199 = v274;
              goto LABEL_380;
            }
          }
          else
          {
            if ((v231 & 0x80) == 0)
              goto LABEL_380;
            v232 = 0;
          }
          v233 = (DSPSplitComplex *)(&__B + v232++);
          v233[1].realp = a3[7];
          goto LABEL_379;
        }
      }
      else
      {
        if ((v202 & 0x40) == 0)
          goto LABEL_373;
        v203 = 0;
      }
      v229 = (DSPSplitComplex *)(&__B + v203++);
      v229[1].realp = a3[6];
      goto LABEL_372;
    case 2:
      v204 = (IR::FFTFilter *)*((_QWORD *)v274 + 275);
      if (v204 && (*((_BYTE *)v274 + 596) & 0x10) != 0)
        IR::FFTFilter::process(v204, a3[4], a3 + 4);
      v205 = (IR::FFTFilter *)*((_QWORD *)v274 + 276);
      if (v205 && (*((_BYTE *)v274 + 596) & 0x20) != 0)
        IR::FFTFilter::process(v205, a3[5], a3 + 5);
      v206 = (IR::FFTFilter *)*((_QWORD *)v274 + 278);
      if (v206 && (*((_BYTE *)v274 + 596) & 0x40) != 0)
        IR::FFTFilter::process(v206, a3[6], a3 + 6);
      v207 = (IR::FFTFilter *)*((_QWORD *)v274 + 277);
      if (v207 && (*((_BYTE *)v274 + 596) & 0x80) != 0)
        goto LABEL_309;
      goto LABEL_380;
    case 3:
      v208 = (IR::FFTFilter *)*((_QWORD *)v274 + 275);
      if (v208 && (*((_BYTE *)v274 + 596) & 0x10) != 0)
        IR::FFTFilter::process(v208, a3[4], a3 + 4);
      v209 = (IR::FFTFilter *)*((_QWORD *)v274 + 279);
      if (v209 && (*((_BYTE *)v274 + 596) & 0x20) != 0)
        IR::FFTFilter::process(v209, a3[5], a3 + 5);
      v210 = (IR::FFTFilter *)*((_QWORD *)v274 + 278);
      if (v210 && (*((_BYTE *)v274 + 596) & 0x40) != 0)
        IR::FFTFilter::process(v210, a3[6], a3 + 6);
      v207 = (IR::FFTFilter *)*((_QWORD *)v274 + 280);
      if (v207 && (*((_BYTE *)v274 + 596) & 0x80) != 0)
LABEL_309:
        IR::FFTFilter::process(v207, a3[7], a3 + 7);
      goto LABEL_380;
    case 4:
      v211 = *((_DWORD *)v274 + 149);
      if ((v211 & 0x10) != 0)
      {
        for (i = 0; i != 24; i += 8)
        {
          v213 = *(_QWORD **)((char *)v274 + i + 2296);
          if (v213)
            AllPassComb::process(v213, a3[4], a3[4], *v272);
        }
        v211 = *((_DWORD *)v274 + 149);
      }
      if ((v211 & 0x20) != 0)
      {
        for (j = 0; j != 24; j += 8)
        {
          v215 = *(_QWORD **)((char *)v274 + j + 2320);
          if (v215)
            AllPassComb::process(v215, a3[5], a3[5], *v272);
        }
        v211 = *((_DWORD *)v274 + 149);
      }
      if ((v211 & 0x40) != 0)
      {
        for (k = 0; k != 24; k += 8)
        {
          v217 = *(_QWORD **)((char *)v274 + k + 2344);
          if (v217)
            AllPassComb::process(v217, a3[6], a3[6], *v272);
        }
        v211 = *((_DWORD *)v274 + 149);
      }
      if ((v211 & 0x80) != 0)
      {
        for (m = 0; m != 24; m += 8)
        {
          v219 = *(_QWORD **)((char *)v274 + m + 2368);
          if (v219)
            AllPassComb::process(v219, a3[7], a3[7], *v272);
        }
      }
      goto LABEL_380;
    case 5:
      v220 = *((_DWORD *)v274 + 149);
      if ((v220 & 0x10) != 0)
      {
        for (n = 0; n != 24; n += 8)
        {
          v222 = *(_QWORD **)((char *)v274 + n + 2296);
          if (v222)
            AllPassComb::process(v222, a3[4], a3[4], *v272);
        }
        v220 = *((_DWORD *)v274 + 149);
      }
      if ((v220 & 0x20) != 0)
      {
        for (ii = 0; ii != 24; ii += 8)
        {
          v224 = *(_QWORD **)((char *)v274 + ii + 2392);
          if (v224)
            AllPassComb::process(v224, a3[5], a3[5], *v272);
        }
        v220 = *((_DWORD *)v274 + 149);
      }
      if ((v220 & 0x40) != 0)
      {
        for (jj = 0; jj != 24; jj += 8)
        {
          v226 = *(_QWORD **)((char *)v274 + jj + 2344);
          if (v226)
            AllPassComb::process(v226, a3[6], a3[6], *v272);
        }
        v220 = *((_DWORD *)v274 + 149);
      }
      if ((v220 & 0x80) != 0)
      {
        for (kk = 0; kk != 24; kk += 8)
        {
          v228 = *(_QWORD **)((char *)v274 + kk + 2416);
          if (v228)
            AllPassComb::process(v228, a3[7], a3[7], *v272);
        }
      }
      goto LABEL_380;
    default:
LABEL_380:
      __B = 0u;
      v276 = 0u;
      v234 = *((_DWORD *)v199 + 149);
      if ((v234 & 0x10) != 0)
      {
        *(_QWORD *)&__B = a3[4];
        v235 = 1;
        if ((v234 & 0x20) == 0)
          goto LABEL_385;
        goto LABEL_384;
      }
      v235 = 0;
      if ((v234 & 0x20) != 0)
      {
LABEL_384:
        v236 = v235++;
        *(_QWORD *)((unint64_t)&__B | (8 * v236)) = a3[5];
      }
LABEL_385:
      if ((v234 & 0x40) != 0)
      {
        *((_QWORD *)&__B + v235++) = a3[6];
        if ((v234 & 0x80) == 0)
          goto LABEL_388;
        goto LABEL_387;
      }
      if ((v234 & 0x80) != 0)
LABEL_387:
        *((_QWORD *)&__B + v235) = a3[7];
LABEL_388:
      v237 = *((unsigned int *)v199 + 86);
      v289.realp = (float *)((char *)v199 + 56);
      v238 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)v199 + 56);
      LOBYTE(v289.imagp) = v238;
      if ((_DWORD)v237)
        v239 = v238 ^ 1;
      else
        v239 = 1;
      if ((v239 & 1) == 0 && *((_QWORD *)v199 + 11) && *((_QWORD *)v199 + 10))
      {
        v240 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)v199 + 5) + 96)));
        v241 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)v199 + 5) + 100)));
        if (v240 > 0.01)
        {
          v242 = *((_QWORD *)v199 + 11);
          if (v242)
            ParametricFilters::process(v242, (float *const *)&__B, 0, v237, 0);
        }
        if (fabsf(v241) > 0.01)
        {
          v243 = *((_QWORD *)v199 + 10);
          if (v243)
            ParametricFilters::process(v243, (float *const *)&__B, 0, v237, 0);
        }
      }
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v289);
      return;
  }
}

void sub_1B6331B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

float *ScottySTFTUpmixer::enhanced_center_extraction(float *this, DSPSplitComplex *__A, DSPSplitComplex *a3, DSPSplitComplex *__C, DSPSplitComplex *a5)
{
  float *v5;
  vDSP_Length v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float __B;
  DSPSplitComplex __Ca;
  DSPSplitComplex __Aa;

  if (*((_DWORD *)this + 91))
  {
    v5 = this;
    if (((_BYTE)this[149] & 4) != 0)
    {
      v10 = *((unsigned int *)this + 84);
      v11 = (float *)*((_QWORD *)this + 184);
      __Aa.realp = (float *)*((_QWORD *)this + 181);
      __Aa.imagp = v11;
      v12 = (float *)*((_QWORD *)this + 190);
      __Ca.realp = (float *)*((_QWORD *)this + 187);
      __Ca.imagp = v12;
      v13 = (float *)*((_QWORD *)this + 193);
      v14 = (float *)*((_QWORD *)this + 196);
      vDSP_zvadd(__A, 1, a3, 1, __C, 1, v10);
      vDSP_zvmul(__C, 1, __C, 1, &__Ca, 1, v10, 1);
      __B = -2.2204e-16;
      vDSP_viclip(__Ca.realp, 1, &__B, &kEPS, __Ca.realp, 1, v10);
      vDSP_zvmul(__A, 1, a3, 1, &__Aa, 1, v10, 1);
      vDSP_zvdiv(&__Ca, 1, &__Aa, 1, &__Aa, 1, v10);
      vDSP_zvneg(&__Aa, 1, &__Aa, 1, v10);
      v17 = 0.25;
      vDSP_vsadd(__Aa.realp, 1, &v17, __Aa.realp, 1, v10);
      ScottySTFTUpmixer::complexSquareRootDouble((const float **)&__Aa.realp, &__Ca.realp, v10, (double **)v5 + 229);
      v16 = 0.5;
      vDSP_vsadd(__Ca.realp, 1, &v16, __Aa.realp, 1, v10);
      vDSP_zvabs(&__Aa, 1, v13, 1, v10);
      vDSP_zvneg(&__Ca, 1, &__Aa, 1, v10);
      vDSP_vsadd(__Aa.realp, 1, &v16, __Aa.realp, 1, v10);
      vDSP_zvabs(&__Aa, 1, v14, 1, v10);
      vDSP_vmin(v13, 1, v14, 1, v13, 1, v10);
      v15 = v5[128] / 100.0;
      ScottySTFTUpmixer::inphaseICC(__A, a3, (DSPSplitComplex *)__Aa.imagp, __Aa.realp, (float *)v10);
      vDSP_vmul(v13, 1, __Aa.realp, 1, v13, 1, v10);
      vDSP_vsmul(v13, 1, &v15, v13, 1, v10);
      vDSP_zrvmul(__C, 1, v13, 1, __C, 1, v10);
      vDSP_zvsub(__A, 1, __C, 1, __A, 1, v10);
      vDSP_zvsub(a3, 1, __C, 1, a3, 1, v10);
      v15 = v5[123] * 1.4142;
      vDSP_vsmul(__C->realp, 1, &v15, __C->realp, 1, v10);
      vDSP_vsmul(__C->imagp, 1, &v15, __C->imagp, 1, v10);
      this = a5->realp;
      if (a5->realp)
      {
        if (a5->imagp)
        {
          if (*((_DWORD *)v5 + 4) == 1)
          {
            memcpy(this, __C->realp, 4 * v10);
            return (float *)memcpy(a5->imagp, __C->imagp, 4 * v10);
          }
        }
      }
    }
  }
  return this;
}

void ScottySTFTUpmixer::complexSquareRootDouble(const float **a1, float **a2, int a3, double **a4)
{
  double *v6;
  double *v7;
  double *v8;
  vDSP_Length v9;
  float v10;
  double __B;
  DSPDoubleSplitComplex __A;
  vDSP_Length __N;

  LODWORD(__N) = a3;
  v6 = a4[3];
  __A.realp = *a4;
  __A.imagp = v6;
  v7 = a4[6];
  v8 = a4[9];
  __B = 0.0;
  v9 = a3;
  vDSP_vspdp(*a1, 1, __A.realp, 1, a3);
  vDSP_vspdp(a1[1], 1, v6, 1, v9);
  vDSP_zvabsD(&__A, 1, v7, 1, v9);
  vDSP_vsubD(__A.realp, 1, v7, 1, v8, 1, v9);
  vDSP_vthrD(v8, 1, &__B, v8, 1, v9);
  vvsqrt(v8, v8, (const int *)&__N);
  vvcopysign(__A.imagp, v8, __A.imagp, (const int *)&__N);
  vDSP_vaddD(v7, 1, __A.realp, 1, __A.realp, 1, (int)__N);
  vDSP_vthrD(__A.realp, 1, &__B, __A.realp, 1, (int)__N);
  vvsqrt(__A.realp, __A.realp, (const int *)&__N);
  vDSP_vdpsp(__A.realp, 1, *a2, 1, (int)__N);
  vDSP_vdpsp(__A.imagp, 1, a2[1], 1, (int)__N);
  v10 = 0.70711;
  vDSP_vsmul(*a2, 1, &v10, *a2, 1, (int)__N);
  vDSP_vsmul(a2[1], 1, &v10, a2[1], 1, (int)__N);
}

void ScottySTFTUpmixer::inphaseICC(const DSPSplitComplex *this, const DSPSplitComplex *a2, DSPSplitComplex *a3, float *a4, float *a5)
{
  vDSP_Length v9;
  float __C;
  vDSP_Length __N;

  LODWORD(__N) = (_DWORD)a5;
  v9 = (int)a5;
  vDSP_zvmags(this, 1, (float *)a3, 1, (int)a5);
  vDSP_zvmags(a2, 1, a4, 1, v9);
  vDSP_vmul((const float *)a3, 1, a4, 1, (float *)a3, 1, v9);
  vvsqrtf((float *)a3, (const float *)a3, (const int *)&__N);
  vDSP_vthr((const float *)a3, 1, &kEPS, (float *)a3, 1, (int)__N);
  vDSP_vmul(this->realp, 1, a2->realp, 1, a4, 1, (int)__N);
  vDSP_vma(this->imagp, 1, a2->imagp, 1, a4, 1, a4, 1, (int)__N);
  vDSP_vdiv((const float *)a3, 1, a4, 1, (float *)a3, 1, (int)__N);
  __C = 0.5;
  vDSP_vsmsa((const float *)a3, 1, &__C, &__C, a4, 1, (int)__N);
}

void PV_Apply_LUT2D<81u,91u>(const float *a1, const float *__A, float *a3, vDSP_Length __N, const float *a5, float *__C)
{
  vDSP_Length v10;
  int v11;
  float v12;
  float __Ca;
  float v14;
  float v15;
  float __B;
  float v17;

  __B = 90.0;
  v17 = 80.0;
  v14 = 7370.0;
  v15 = 81.0;
  v12 = 0.0;
  __Ca = 0.5;
  v10 = __N;
  v11 = __N;
  vDSP_vsmul(__A, 1, &__B, __C, 1, __N);
  vvnintf(__C, __C, &v11);
  vDSP_vsmsa(__C, 1, &v15, &__Ca, __C, 1, v10);
  vDSP_vsma(a1, 1, &v17, __C, 1, __C, 1, v10);
  vDSP_vclip(__C, 1, &v12, &v14, __C, 1, v10);
  vDSP_vindex(a5, __C, 1, a3, 1, v10);
}

void ScottySTFTUpmixer::calculate_smoothing_windows(ScottySTFTUpmixer *this, float a2, float a3, float a4, int a5)
{
  float v8;
  float v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  float *v13;
  _DWORD *v14;
  unint64_t v15;
  int32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  char *v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  float v28;
  unint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  float v48;
  float v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64x2_t v81;
  float v82;
  float v83;
  unint64_t v84;
  float v85;
  float v86;
  float v87;
  float32x2_t v88;
  float v89;
  int32x2_t v90;
  unsigned int v91;
  float __B;
  float __C;
  void *__p;
  char *v95;
  char *v96;
  char *v97;
  char *v98;

  v8 = 1.0;
  if (a2 <= 1.0)
    v8 = a2;
  if (a2 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  v10 = *((unsigned int *)this + 84);
  if ((float)((float)((float)(16000.0 / *((float *)this + 80)) * (float)v10) + 0.5) <= 2)
    v11 = 2;
  else
    v11 = (float)((float)((float)(16000.0 / *((float *)this + 80)) * (float)v10) + 0.5);
  v12 = *((_QWORD *)this + 181);
  v13 = (float *)*((_QWORD *)this + 184);
  v14 = (_DWORD *)*((_QWORD *)this + 187);
  *v14 = 1065353216;
  if (v10 >= 2)
  {
    v15 = 0;
    v81 = (uint64x2_t)vdupq_n_s64(v10 - 2);
    v16 = (int32x2_t)0x200000001;
    do
    {
      v90 = vmovn_s64((int64x2_t)vcgeq_u64(v81, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v15), (int8x16_t)xmmword_1B6626830)));
      v17 = vcvt_f32_u32((uint32x2_t)v16);
      v18 = vadd_f32(v17, (float32x2_t)0x3F0000003F000000);
      v85 = v18.f32[0];
      v87 = logf(v18.f32[1]);
      v19.f32[0] = logf(v85);
      v19.f32[1] = v87;
      v88 = v19;
      v20 = vadd_f32(v17, (float32x2_t)0xBF000000BF000000);
      v83 = v20.f32[0];
      v86 = logf(v20.f32[1]);
      v21.f32[0] = logf(v83);
      v21.f32[1] = v86;
      v22 = vsub_f32(v88, v21);
      if ((v90.i8[0] & 1) != 0)
        v14[v15 + 1] = v22.i32[0];
      if ((v90.i8[4] & 1) != 0)
        v14[v15 + 2] = v22.i32[1];
      v15 += 2;
      v16 = vadd_s32(v16, (int32x2_t)0x200000002);
    }
    while ((v10 & 0xFFFFFFFE) != v15);
  }
  v79 = (uint64_t *)((char *)this + 1688);
  if (*((_QWORD *)this + 212) == *((_QWORD *)this + 211))
  {
    v23 = (char *)operator new(4uLL);
    __p = v23;
    *(_DWORD *)v23 = 1065353216;
    v95 = v23 + 4;
    v96 = v23 + 4;
    std::vector<std::vector<float>>::push_back[abi:ne180100](v79, (uint64_t)&__p);
    if (__p)
      operator delete(__p);
    **((_DWORD **)this + 217) = 0;
    **((_DWORD **)this + 214) = 0;
    **((_DWORD **)this + 220) = 1;
    LODWORD(v10) = *((_DWORD *)this + 84);
  }
  v77 = a4;
  *v13 = 1.0;
  v24 = exp2f(v9 * -0.5);
  v25 = exp2f(v9 * 0.5);
  if (v10 >= 2)
  {
    if (v25 >= (float)((float)(v11 + 1) / (float)v11))
      v26 = v11;
    else
      v26 = 0;
    v27 = (float)v26;
    v89 = -(float)(v27 - (float)(v24 * v27));
    v28 = -(float)(v27 - (float)(v25 * v27));
    v78 = (_QWORD *)((char *)this + 1704);
    v29 = 1;
    v91 = 1;
    v84 = v26;
    v82 = v25;
    while (1)
    {
      v30 = (float)v29;
      v31 = v29 >= v26 ? v28 + (float)v29 : v25 * (float)v29;
      if (v29 <= v26 || v31 >= (float)v10)
        break;
      v32 = 4 * v29 - 4;
      *(_DWORD *)(*((_QWORD *)this + 217) + 4 * v29) = *(_DWORD *)(*((_QWORD *)this + 217) + v32) + 1;
      *(_DWORD *)(*((_QWORD *)this + 214) + 4 * v29) = *(_DWORD *)(*((_QWORD *)this + 214) + v32);
      *(_DWORD *)(*((_QWORD *)this + 220) + 4 * v29) = *(_DWORD *)(*((_QWORD *)this + 220) + v32);
      v13[v29] = *(float *)((char *)v13 + v32);
LABEL_68:
      ++v29;
      v10 = *((unsigned int *)this + 84);
      if (v29 >= v10)
        goto LABEL_71;
    }
    v33 = v24;
    if (v29 >= v26)
      v34 = v89 + v30;
    else
      v34 = v24 * v30;
    v35 = logf(v34);
    v36 = vcvtps_u32_f32(v34);
    v37 = vcvtms_u32_f32(v31);
    if ((int)v10 - 1 >= v37)
      v38 = v37;
    else
      v38 = v10 - 1;
    if (v38 >= v36)
    {
      v39 = v35;
      v40 = (float)(logf(v31) - v35) + 2.2204e-16;
      v41 = v36;
      do
      {
        v42 = logf((float)v41);
        v43 = *(float *)&v14[v41];
        *(float *)(v12 + 4 * v41++) = (float)((float)(cosf((float)((float)(v42 - v39) / v40) * 6.2832) * -0.5) + 0.5)
                                      * v43;
      }
      while (v41 <= v38);
    }
    __C = 0.0;
    vDSP_maxv((const float *)(v12 + 4 * v36), 1, &__C, v38 - v36 + 1);
    v44 = __C * 0.15;
    do
    {
      v45 = v36;
      v46 = *(float *)(v12 + 4 * v36++);
    }
    while (v46 < v44);
    do
    {
      v47 = v38;
      v48 = *(float *)(v12 + 4 * v38--);
    }
    while (v48 < v44);
    v49 = (float)(v47 - v45 + 1);
    __B = 0.0;
    v50 = (unint64_t)v49;
    vDSP_sve((const float *)(v12 + 4 * v45), 1, &__B, (unint64_t)v49);
    __B = 1.0 / __B;
    vDSP_vsmul((const float *)(v12 + 4 * v45), 1, &__B, (float *)(v12 + 4 * v45), 1, (unint64_t)v49);
    v13[v29] = __B * __C;
    v51 = (_QWORD *)*((_QWORD *)this + 212);
    v52 = *((_QWORD *)this + 211);
    v53 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - v52) >> 3);
    if (v53 <= v91)
    {
      if (!a5)
      {
        v60 = v29 - 1;
        v61 = (unint64_t)*((unsigned int *)this + 84)
            - ((uint64_t)(*(_QWORD *)(v52 + 24 * (v29 - 1) + 8) - *(_QWORD *)(v52 + 24 * (v29 - 1))) >> 2) > v29;
        v62 = *((_QWORD *)this + 217);
        v63 = *(_DWORD *)(v62 + 4 * (v29 - 1));
        if (v61)
          ++v63;
        *(_DWORD *)(v62 + 4 * v29) = v63;
        *(_DWORD *)(*((_QWORD *)this + 214) + 4 * v29) = *(_DWORD *)(*((_QWORD *)this + 214) + 4 * v60);
        *(_DWORD *)(*((_QWORD *)this + 220) + 4 * v29) = *(_DWORD *)(*((_QWORD *)this + 220) + 4 * v60);
        v13[v29] = v13[v60];
        goto LABEL_67;
      }
      if ((unint64_t)v51 >= *v78)
      {
        if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v64 = 0xAAAAAAAAAAAAAAABLL * ((*v78 - v52) >> 3);
        v65 = 2 * v64;
        if (2 * v64 <= v53 + 1)
          v65 = v53 + 1;
        if (v64 >= 0x555555555555555)
          v66 = 0xAAAAAAAAAAAAAAALL;
        else
          v66 = v65;
        v98 = (char *)this + 1704;
        if (v66)
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)v78, v66);
        else
          v67 = 0;
        __p = v67;
        v95 = &v67[24 * v53];
        v96 = v95;
        v97 = &v67[24 * v66];
        std::vector<float>::vector(v95, v50);
        v96 += 24;
        std::vector<std::vector<float>>::__swap_out_circular_buffer(v79, &__p);
        v57 = (_QWORD *)*((_QWORD *)this + 212);
        std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        std::vector<float>::vector(v51, v50);
        v57 = v51 + 3;
        *((_QWORD *)this + 212) = v51 + 3;
      }
      *((_QWORD *)this + 212) = v57;
      v55 = *((_QWORD *)this + 211);
      v56 = 24 * v91;
    }
    else
    {
      v54 = (void **)(v52 + 24 * v91);
      if (!a5)
      {
        v58 = *v54;
        v59 = (uint64_t)(*(_QWORD *)(v52 + 24 * v91 + 8) - (_QWORD)v58) >> 2;
        if (v49 > (float)(unint64_t)v59)
          v49 = (float)(unint64_t)v59;
        goto LABEL_66;
      }
      LODWORD(__p) = 0;
      std::vector<float>::resize((uint64_t)v54, v50, &__p);
      v55 = *v79;
      v56 = 24 * v91;
    }
    v58 = *(void **)(v55 + v56);
LABEL_66:
    memcpy(v58, (const void *)(v12 + 4 * v45), vcvts_n_u32_f32(v49, 2uLL));
    *(_DWORD *)(*((_QWORD *)this + 217) + 4 * v29) = v45;
    *(_DWORD *)(*((_QWORD *)this + 214) + 4 * v29) = v91;
    *(_DWORD *)(*((_QWORD *)this + 220) + 4 * v29) = v49;
    ++v91;
LABEL_67:
    v24 = v33;
    v26 = v84;
    v25 = v82;
    goto LABEL_68;
  }
  v91 = 1;
LABEL_71:
  if ((a5 & 1) != 0)
  {
    std::vector<std::vector<float>>::resize(v79, v91);
    LODWORD(v10) = *((_DWORD *)this + 84);
  }
  v68 = *((float *)this + 80);
  v69 = (float)*((unsigned int *)this + 86);
  v70 = expf(-1.0 / (float)((float)(v68 * a3) / v69));
  v71 = expf(-1.0 / (float)((float)(v68 * v77) / v69));
  if ((_DWORD)v10)
  {
    v72 = v71;
    v73 = (float *)*((_QWORD *)this + 223);
    v74 = v10;
    do
    {
      v75 = *v13++;
      v76 = powf(v70, 1.0 / v75);
      if (v76 < v72)
        v76 = v72;
      *v73++ = v76;
      --v74;
    }
    while (v74);
  }
}

void sub_1B63329CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ScottySTFTUpmixer::calculate_tc_vectors(ScottySTFTUpmixer *this)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  float v15;
  unsigned int v16;
  float v17;
  float *v18;
  float v19;
  uint64_t v20;
  float *v21;

  v2 = *((float *)this + 80);
  v3 = (float)*((unsigned int *)this + 85);
  v4 = (float)(*((float *)this + 101) / v2) * v3;
  v5 = *((unsigned int *)this + 84);
  v6 = (float)(v5 - 1);
  if (v4 <= v6)
    v6 = (float)(*((float *)this + 101) / v2) * v3;
  if (v4 >= 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  v8 = *((float *)this + 102) / v2;
  v9 = (float)*((unsigned int *)this + 86);
  v10 = expf(-1.0 / (float)((float)(v2 * *((float *)this + 99)) / v9));
  v11 = *((_QWORD *)this + 208);
  v12 = v7 + 1;
  if (v12 > 1)
    v13 = v7 + 1;
  else
    v13 = 1;
  v14 = (float *)*((_QWORD *)this + 208);
  do
  {
    *v14++ = v10;
    --v13;
  }
  while (v13);
  v15 = v8 * v3;
  if ((float)(v8 * v3) > (float)v5)
    v15 = (float)v5;
  v16 = vcvtps_u32_f32(v15);
  if (v12 < v16)
  {
    v17 = v15 - v7;
    v18 = (float *)(v11 + 4 * v12);
    do
    {
      *v18++ = expf(-1.0/ (float)((float)(*((float *)this + 80)* (float)((float)((float)((float)((float)v12 - v7) / v17) * *((float *)this + 100))+ (float)((float)(1.0 - (float)((float)((float)v12 - v7) / v17))* *((float *)this + 99))))/ v9));
      ++v12;
    }
    while (v16 != v12);
  }
  v19 = expf(-1.0 / (float)((float)(*((float *)this + 100) * *((float *)this + 80)) / v9));
  if (v5 > v16)
  {
    v20 = v5 - v16;
    v21 = (float *)(v11 + 4 * v16);
    do
    {
      *v21++ = v19;
      --v20;
    }
    while (v20);
  }
}

void ScottySTFTUpmixer::calculate_pan_tables(ScottySTFTUpmixer *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  const float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float __C;
  float v23;
  float __B;
  float v25;
  float __A;
  int v27;
  float v28;
  float v29;

  v2 = __exp10f(-2.0);
  v3 = *((float *)this + 141);
  v4 = *((float *)this + 140);
  v5 = *((float *)this + 142);
  v28 = *((float *)this + 139);
  v29 = v2;
  v27 = 7371;
  v6 = sqrtf(1.0 - v2);
  v7 = __exp10f(*((float *)this + 143) * 0.05);
  if (v6 >= v7)
    v8 = v7;
  else
    v8 = v6;
  if (*((float *)this + 126) <= 0.0)
  {
    v18 = *((float *)this + 127);
    if (v18 <= 0.0)
      return;
    v17 = (const float *)((char *)this + 508);
    __A = 1.0 - v18;
    vDSP_vsmsa(ScottySTFT_init::pan_table_ll2D, 1, (const float *)this + 127, &__A, *((float **)this + 199), 1, 0x1CCBuLL);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v25 = 1.0;
    __A = 0.0;
    __B = 2.0;
    v23 = -1.0 / (float)(v5 + v5);
    v11 = -1.0 / (float)(v4 + v4);
    do
    {
      v12 = __exp10f((float)((float)((float)((float)((float)v10 + (float)v10) / 80.0) + -1.0) * 40.0)/ 20.0);
      v13 = asinf((float)(v12 + -1.0) / (float)(v12 + 1.0));
      v14 = powf(fabsf(v13), v3);
      vDSP_vramp(&__A, &__B, (float *)(*((_QWORD *)this + 202) + v9), 81, 0x5BuLL);
      __C = v11 * v14;
      vDSP_vsmsa((const float *)(*((_QWORD *)this + 202) + v9), 81, &v23, &__C, (float *)(*((_QWORD *)this + 202) + v9), 81, 0x5BuLL);
      ++v10;
      v9 += 4;
    }
    while (v10 != 81);
    vvexpf(*((float **)this + 202), *((const float **)this + 202), &v27);
    v15 = *((float *)this + 126);
    v21 = (float)(v6 - v8) * v15;
    __C = v8 * v15;
    vDSP_vsmsa(*((const float **)this + 202), 1, &v21, &__C, *((float **)this + 202), 1, 0x1CCBuLL);
    vDSP_vfill(&v28, *((float **)this + 205), 1, (uint64_t)(*((_QWORD *)this + 206) - *((_QWORD *)this + 205)) >> 2);
    vvpowf(*((float **)this + 199), *((const float **)this + 205), *((const float **)this + 202), &v27);
    vDSP_vneg(*((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
    vDSP_vsadd(*((const float **)this + 199), 1, &v25, *((float **)this + 199), 1, 0x1CCBuLL);
    v20 = 1.0 / v28;
    vDSP_vfill(&v20, *((float **)this + 205), 1, (uint64_t)(*((_QWORD *)this + 206) - *((_QWORD *)this + 205)) >> 2);
    vvpowf(*((float **)this + 199), *((const float **)this + 205), *((const float **)this + 199), &v27);
    v16 = *((float *)this + 127);
    if (v16 <= 0.0)
      goto LABEL_12;
    v17 = (const float *)((char *)this + 508);
    v19 = 1.0 - v16;
    vDSP_vsmsa(ScottySTFT_init::pan_table_ll2D, 1, (const float *)this + 127, &v19, *((float **)this + 205), 1, 0x1CCBuLL);
    vDSP_vmul(*((const float **)this + 205), 1, *((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
  }
  vDSP_vsmul(ScottySTFT_init::pan_table_ls2D, 1, v17, *((float **)this + 205), 1, 0x1CCBuLL);
LABEL_12:
  vDSP_vthr(*((const float **)this + 199), 1, &v29, *((float **)this + 199), 1, 0x1CCBuLL);
  vDSP_vsq(*((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
}

_DWORD *ScottySTFTUpmixer::UpdateBufferAssignments(_DWORD *this)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = this[149];
  if (this[4] == 2)
  {
    v1 = this[149] & 4;
    this[149] = v1;
  }
  v2 = 0;
  v3 = 0;
  this[158] = 0;
  do
  {
    if (((v1 >> v2) & 1) != 0)
    {
      ++this[158];
      v4 = v3++;
    }
    else
    {
      v4 = -1;
    }
    this[v2++ + 150] = v4;
  }
  while (v2 != 8);
  return this;
}

uint64_t std::make_unique[abi:ne180100]<IR::FFTFilter>(IR::FFTFilter **a1)
{
  IR::FFTFilter *v2;
  uint64_t result;

  v2 = (IR::FFTFilter *)operator new();
  result = IR::FFTFilter::FFTFilter(v2);
  *a1 = v2;
  return result;
}

void sub_1B6332F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

IIRFilterFloat32 **ScottySTFTUpmixer::new_allpass_filter(IIRFilterFloat32 **this, double a2, double a3, double a4, uint64_t a5)
{
  IIRFilterFloat32 **v6;
  double v7;
  unsigned int v9;
  const CAStreamBasicDescription *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const CAStreamBasicDescription *v15;
  uint64_t v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  IIRFilterFloat32 *v24;
  AudioStreamBasicDescription v25;

  v6 = this;
  v7 = *(float *)(a5 + 320) * 0.5;
  if (v7 >= a2)
  {
    if (v7 >= a3)
      v7 = a3;
    v9 = (log(v7 / a2) / 0.693147181);
    v10 = (const CAStreamBasicDescription *)(v9 + 1);
    v11 = v9 == -1;
    v12 = operator new[]();
    v13 = v12;
    if (!v11)
    {
      v14 = (_QWORD *)v12;
      do
      {
        *v14 = 0;
        v14[1] = 0;
        v14[3] = 0;
        v14[4] = 0;
        v14[2] = 0x3FF0000000000000;
        v14 += 5;
      }
      while (v14 != (_QWORD *)(v12 + 40 * v10));
      v15 = v10;
      v16 = v12;
      do
      {
        v17 = a2 * 6.28318531 / *(float *)(a5 + 320);
        if (v17 <= 0.0)
        {
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
          v23 = 1.0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
        }
        else
        {
          v18 = __sincos_stret(fmin(v17, 3.11017673));
          v19 = __exp10(0.0);
          v20 = v18.__sinval * 0.1 + 1.0;
          v21 = 1.0 - v18.__sinval * 0.1;
          v22 = 1.0 / v20 * v19;
          *(double *)v16 = v18.__cosval * -2.0 * (1.0 / v20);
          *(double *)(v16 + 8) = v21 * (1.0 / v20);
          v23 = v21 * v22;
          *(double *)(v16 + 24) = v18.__cosval * -2.0 * v22;
          *(double *)(v16 + 32) = v20 * v22;
        }
        *(double *)(v16 + 16) = v23;
        a2 = a2 + a2;
        v16 += 40;
        v15 = (const CAStreamBasicDescription *)((char *)v15 - 1);
      }
      while (v15);
    }
    v25.mSampleRate = *(float *)(a5 + 320);
    *(_OWORD *)&v25.mFormatID = xmmword_1B6626900;
    *(_OWORD *)&v25.mBytesPerFrame = xmmword_1B66A0830;
    v24 = NewIIRFilter(&v25, &v25, v10);
    *v6 = v24;
    (*(void (**)(IIRFilterFloat32 *, const CAStreamBasicDescription *, uint64_t))(*(_QWORD *)v24 + 16))(v24, v10, v13);
    JUMPOUT(0x1BCC95CC8);
  }
  *this = 0;
  return this;
}

void sub_1B63331BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x1BCC95CC8](v2, 0x1000C800A747E1ELL);
  _Unwind_Resume(a1);
}

void ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t(ScottySTFTUpmixer::STFT_tables_t *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v11 = (void **)((char *)this + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  v10 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v10;
    operator delete(v10);
  }
}

void ScottySTFTUpmixer::STFT_state_t::~STFT_state_t(ScottySTFTUpmixer::STFT_state_t *this)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  for (i = 0; i != -144; i -= 24)
  {
    v3 = *(void **)((char *)this + i + 920);
    if (v3)
    {
      *(_QWORD *)((char *)this + i + 928) = v3;
      operator delete(v3);
    }
  }
  v4 = (void *)*((_QWORD *)this + 97);
  if (v4)
  {
    *((_QWORD *)this + 98) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 94);
  if (v5)
  {
    *((_QWORD *)this + 95) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 91);
  if (v6)
  {
    *((_QWORD *)this + 92) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 88);
  if (v7)
  {
    *((_QWORD *)this + 89) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 85);
  if (v8)
  {
    *((_QWORD *)this + 86) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 82);
  if (v9)
  {
    *((_QWORD *)this + 83) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 79);
  if (v10)
  {
    *((_QWORD *)this + 80) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 76);
  if (v11)
  {
    *((_QWORD *)this + 77) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 73);
  if (v12)
  {
    *((_QWORD *)this + 74) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 70);
  if (v13)
  {
    *((_QWORD *)this + 71) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 67);
  if (v14)
  {
    *((_QWORD *)this + 68) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 64);
  if (v15)
  {
    *((_QWORD *)this + 65) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 61);
  if (v16)
  {
    *((_QWORD *)this + 62) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 58);
  if (v17)
  {
    *((_QWORD *)this + 59) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 55);
  if (v18)
  {
    *((_QWORD *)this + 56) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 52);
  if (v19)
  {
    *((_QWORD *)this + 53) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 49);
  if (v20)
  {
    *((_QWORD *)this + 50) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 46);
  if (v21)
  {
    *((_QWORD *)this + 47) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 43);
  if (v22)
  {
    *((_QWORD *)this + 44) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 40);
  if (v23)
  {
    *((_QWORD *)this + 41) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 37);
  if (v24)
  {
    *((_QWORD *)this + 38) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 30);
  if (v25)
  {
    *((_QWORD *)this + 31) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 27);
  if (v26)
  {
    *((_QWORD *)this + 28) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 24);
  if (v27)
  {
    *((_QWORD *)this + 25) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 21);
  if (v28)
  {
    *((_QWORD *)this + 22) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 18);
  if (v29)
  {
    *((_QWORD *)this + 19) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 15);
  if (v30)
  {
    *((_QWORD *)this + 16) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 12);
  if (v31)
  {
    *((_QWORD *)this + 13) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 9);
  if (v32)
  {
    *((_QWORD *)this + 10) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 6);
  if (v33)
  {
    *((_QWORD *)this + 7) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 3);
  if (v34)
  {
    *((_QWORD *)this + 4) = v34;
    operator delete(v34);
  }
  v35 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v35;
    operator delete(v35);
  }
}

void AUBeamIt::~AUBeamIt(AUBeamIt *this)
{
  AUBeamIt::~AUBeamIt(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E69D2B60;
  AUBeamIt::Cleanup(this);
  v2 = *((_QWORD *)this + 80);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 80) = 0;
  }
  v3 = (void **)((char *)this + 600);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);
}

void AUBeamIt::CreateExtendedElements(AUBeamIt *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 584), this, 4, 16);
  for (i = 0; i != 16; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = *((_QWORD *)this + 78);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 75);
      if (i >= (*((_QWORD *)this + 76) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B6333860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUBeamIt::Initialize(AUBeamIt *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t Element;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  int64x2_t *Scope;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t result;
  int v25;
  const char *v26;
  NSObject *v27;
  NSObject *v28;
  uint32_t v29;
  int v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (AUBeamItFDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
  if (AUBeamItFDLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v31 = 136315394;
    v32 = "AUBeamIt.cpp";
    v33 = 1024;
    v34 = 178;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Initialize.\n", (uint8_t *)&v31, 0x12u);
    v3 = AUBeamItFDLogScope(void)::once;
    goto LABEL_10;
  }
LABEL_9:
  v3 = -1;
LABEL_10:
  if (!*((_BYTE *)this + 632))
  {
    if (v3 != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      v5 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
      {
LABEL_50:
        *((_BYTE *)this + 576) = 1;
        *(_DWORD *)(*((_QWORD *)this + 80) + 8) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 0)+ 108);
        v20 = *((_QWORD *)this + 21);
        if (v20)
          LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        else
          v21 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
        if (v21 < 3)
          *(_DWORD *)(*((_QWORD *)this + 80) + 12) = 288;
        else
          *(_DWORD *)(*((_QWORD *)this + 80) + 12) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), 2u)+ 108);
LABEL_56:
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v22 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
            return 0;
        }
        else
        {
          v22 = MEMORY[0x1E0C81028];
        }
        v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v23)
          return result;
        v31 = 136315394;
        v32 = "AUBeamIt.cpp";
        v33 = 1024;
        v34 = 245;
        _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Successfully initialized.\n", (uint8_t *)&v31, 0x12u);
        return 0;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 136315394;
      v32 = "AUBeamIt.cpp";
      v33 = 1024;
      v34 = 185;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting BeamFormerCoeffs plist! Setting AU in Bypass mode.\n", (uint8_t *)&v31, 0x12u);
    }
    goto LABEL_50;
  }
  if (v3 != -1)
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
  if (AUBeamItFDLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
      goto LABEL_24;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v31 = 136315394;
    v32 = "AUBeamIt.cpp";
    v33 = 1024;
    v34 = 203;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called with properly set BeamFormerCoeffs plist.\n", (uint8_t *)&v31, 0x12u);
  }
LABEL_24:
  v6 = 0;
  v7 = 0.0;
  while (1)
  {
    v8 = *((_QWORD *)this + 15);
    if (v8)
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    else
      v9 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v6 >= v9)
    {
      for (i = 0; ; ++i)
      {
        v13 = *((_QWORD *)this + 21);
        if (v13)
          LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        else
          v14 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
        if (i >= v14)
        {
          v18 = *(_DWORD *)(*((_QWORD *)this + 80) + 8);
          Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, v18);
          AUBeamIt::UpdateState(this);
          *((_QWORD *)this + 67) = *((_QWORD *)this + 66);
          memcpy((void *)(*((_QWORD *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
          (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 80) + 16))(*((_QWORD *)this + 80), *((unsigned int *)this + 84), v7);
          (*(void (**)(AUBeamIt *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          goto LABEL_56;
        }
        Element = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), i);
        v7 = *(double *)(Element + 80);
        v16 = *(_DWORD *)(Element + 108);
        if (i > 1)
        {
          if (v16 > *(_DWORD *)(*((_QWORD *)this + 80) + 12))
          {
            if (AUBeamItFDLogScope(void)::once != -1)
              dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
            if (AUBeamItFDLogScope(void)::scope)
            {
              v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
                return 4294956421;
            }
            else
            {
              v17 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v30 = *(_DWORD *)(*((_QWORD *)this + 80) + 12);
              v31 = 136315906;
              v32 = "AUBeamIt.cpp";
              v33 = 1024;
              v34 = 222;
              v35 = 1024;
              v36 = v16;
              v37 = 1024;
              v38 = v30;
              v26 = "%25s:%-5d The number of channels in the output format (%u) is larger than the number of uplink/selec"
                    "tion beams (%u).\n";
              goto LABEL_84;
            }
            return 4294956421;
          }
        }
        else if (v16 != 1)
        {
          if (AUBeamItFDLogScope(void)::once != -1)
            dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
          if (AUBeamItFDLogScope(void)::scope)
          {
            v27 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
            if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
              return 4294956421;
          }
          else
          {
            v27 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v31 = 136315650;
            v32 = "AUBeamIt.cpp";
            v33 = 1024;
            v34 = 216;
            v35 = 1024;
            v36 = v16;
            v26 = "%25s:%-5d The number of channels in the output format (%u) not equal to 1.\n";
            v28 = v27;
            v29 = 24;
            goto LABEL_85;
          }
          return 4294956421;
        }
      }
    }
    v10 = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), v6);
    v11 = *(_DWORD *)(v10 + 108);
    if (v11 != *(_DWORD *)(*((_QWORD *)this + 80) + 8))
      break;
    v7 = *(double *)(v10 + 80);
    ++v6;
  }
  if (AUBeamItFDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
  if (AUBeamItFDLogScope(void)::scope)
  {
    v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
      return 4294956421;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v25 = *(_DWORD *)(*((_QWORD *)this + 80) + 8);
    v31 = 136315906;
    v32 = "AUBeamIt.cpp";
    v33 = 1024;
    v34 = 208;
    v35 = 1024;
    v36 = v11;
    v37 = 1024;
    v38 = v25;
    v26 = "%25s:%-5d The number of channels in the input format (%u) is not equal to the number of mics the beamformer expects (%u).\n";
LABEL_84:
    v28 = v17;
    v29 = 30;
LABEL_85:
    _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&v31, v29);
  }
  return 4294956421;
}

uint64_t AUBeamIt::Cleanup(AUBeamIt *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUBeamItFDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
  if (AUBeamItFDLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 32))(*((_QWORD *)this + 80));
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUBeamIt.cpp";
    v6 = 1024;
    v7 = 255;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 32))(*((_QWORD *)this + 80));
}

uint64_t AUBeamIt::Reset(AUBeamIt *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 80) + 24))(*((_QWORD *)this + 80));
  memcpy((char *)this + 648, (const void *)(*((_QWORD *)this + 80) + 64), 0x1E8uLL);
  return 0;
}

uint64_t AUBeamIt::GetPropertyInfo(AUBeamIt *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 4630)
  {
    switch(a2)
    {
      case 4631:
        result = 0;
        *a5 = 4;
        *a6 = 1;
        return result;
      case 4632:
        v11 = *((_QWORD *)this + 80);
        if (v11 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11))
        {
          v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 72))(*((_QWORD *)this + 80));
          result = 0;
          v13 = *(_DWORD *)(v12 + 16) - *(_DWORD *)(v12 + 8);
          goto LABEL_17;
        }
        *a5 = 8 * *((_DWORD *)this + 84) + 8;
        *a6 = 0;
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v15 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
            return 0;
        }
        else
        {
          v15 = MEMORY[0x1E0C81028];
        }
        v17 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v17)
          return result;
        v18 = 136315650;
        v19 = "AUBeamIt.cpp";
        v20 = 1024;
        v21 = 430;
        v22 = 1024;
        v23 = 4632;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Possibly no initialization for Subband DOA (prop id: %d).", (uint8_t *)&v18, 0x18u);
        return 0;
      case 4633:
        result = 0;
        *a6 = *((_BYTE *)this + 17) ^ 1;
        goto LABEL_21;
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
        return result;
      case 4640:
        result = 0;
        v13 = 4 * *(_DWORD *)(*((_QWORD *)this + 80) + 12);
LABEL_17:
        *a5 = v13;
        *a6 = 0;
        return result;
      default:
        if (a2 != 104632)
        {
          if (a2 != 104640)
            return result;
          goto LABEL_20;
        }
        v14 = *((_QWORD *)this + 80);
        if (v14 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14))
        {
LABEL_20:
          result = 0;
          *a6 = 0;
LABEL_21:
          v10 = 8;
          goto LABEL_22;
        }
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v16 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
            return 4294956429;
        }
        else
        {
          v16 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v18 = 136315650;
          v19 = "AUBeamIt.cpp";
          v20 = 1024;
          v21 = 442;
          v22 = 1024;
          v23 = 104632;
          _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Getting property info for SubbandDOA_CF failed (prop id: %d).", (uint8_t *)&v18, 0x18u);
        }
        return 4294956429;
    }
  }
  if (a2 == 21 || a2 == 3700)
  {
    result = 0;
    *a6 = 1;
    v10 = 4;
LABEL_22:
    *a5 = v10;
  }
  return result;
}

uint64_t AUBeamIt::GetProperty(AUBeamIt *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  CFNumberRef CFArray;
  uint64_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  std::runtime_error *exception;
  _BYTE v22[12];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 4630)
  {
    if (a2 == 21)
    {
      result = 0;
      v9 = *((unsigned __int8 *)this + 576);
    }
    else
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v9 = *((unsigned __int8 *)this + 376);
    }
LABEL_22:
    *__dst = v9;
    return result;
  }
  switch(a2)
  {
    case 4631:
      v8 = *((_QWORD *)this + 80);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
        result = 0;
        goto LABEL_22;
      }
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        v19 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          return 4294956429;
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        return 4294956429;
      *(_DWORD *)v22 = 136315650;
      *(_QWORD *)&v22[4] = "AUBeamIt.cpp";
      v23 = 1024;
      v24 = 489;
      v25 = 1024;
      v26 = 4631;
      v20 = "%25s:%-5d Getting property EnableSubbandDOACalculation failed (prop id: %d).";
      goto LABEL_52;
    case 4632:
      v14 = *((_QWORD *)this + 80);
      if (!v14 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14))
      {
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v18 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          {
LABEL_44:
            bzero(__dst, 4 * (2 * *((_DWORD *)this + 84) + 2));
            return 0;
          }
        }
        else
        {
          v18 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v22 = 136315650;
          *(_QWORD *)&v22[4] = "AUBeamIt.cpp";
          v23 = 1024;
          v24 = 501;
          v25 = 1024;
          v26 = 4632;
          _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Possibly no initialization for SubbandDOA(prop id: %d).", v22, 0x18u);
        }
        goto LABEL_44;
      }
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 72))(*((_QWORD *)this + 80));
      v12 = *(const void **)(v15 + 8);
      v13 = *(_QWORD *)(v15 + 16) - (_QWORD)v12;
LABEL_18:
      memcpy(__dst, v12, v13);
      return 0;
    case 4633:
      *(_QWORD *)v22 = *((_QWORD *)this + 142);
      CFArray = CFNumberCreate(0, kCFNumberDoubleType, v22);
      if (!CFArray)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      goto LABEL_20;
    case 4634:
    case 4635:
    case 4636:
    case 4637:
    case 4638:
    case 4639:
      return result;
    case 4640:
      v11 = *((_QWORD *)this + 80);
      v12 = *(const void **)(v11 + 19152);
      v13 = 4 * *(unsigned int *)(v11 + 12);
      goto LABEL_18;
    default:
      if (a2 != 104632)
      {
        if (a2 == 104640)
        {
          CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)(*((_QWORD *)this + 80) + 19152));
LABEL_20:
          result = 0;
          *(_QWORD *)__dst = CFArray;
        }
        return result;
      }
      v16 = *((_QWORD *)this + 80);
      if (v16 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16))
      {
        v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 72))(*((_QWORD *)this + 80));
        *(_QWORD *)v22 = 0;
        *(_QWORD *)__dst = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)(v17 + 8));
        applesauce::CF::ArrayRef::~ArrayRef((const void **)v22);
        return 0;
      }
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        v19 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          return 4294956429;
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v22 = 136315650;
        *(_QWORD *)&v22[4] = "AUBeamIt.cpp";
        v23 = 1024;
        v24 = 514;
        v25 = 1024;
        v26 = 104632;
        v20 = "%25s:%-5d Getting property SubbandDOA_CF failed (prop id: %d).";
LABEL_52:
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, v20, v22, 0x18u);
      }
      return 4294956429;
  }
}

void sub_1B6334828(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUBeamIt::SetProperty(AUBeamIt *this, int a2, int a3, unsigned int a4, const __CFNumber **a5, unsigned int a6)
{
  uint64_t result;
  const __CFBoolean *v10;
  char v11;
  const __CFBoolean *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  NSObject *v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 4629)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_BYTE *)this + 576) = *(_DWORD *)a5 != 0;
    }
    else if (a2 == 3700)
    {
      result = 4294956445;
      if (a6 >= 4)
      {
        if (*(_BYTE *)a5)
          return 0;
        else
          return 4294956445;
      }
    }
    return result;
  }
  switch(a2)
  {
    case 4630:
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        v13 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          goto LABEL_25;
      }
      else
      {
        v13 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v23 = 136315650;
        v24 = "AUBeamIt.cpp";
        v25 = 1024;
        v26 = 564;
        v27 = 1024;
        v28 = 4630;
        _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property BeamformerCoeffs (prop id: %d).", (uint8_t *)&v23, 0x18u);
      }
LABEL_25:
      if (!a5)
      {
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v17 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v23 = 136315394;
          v24 = "AUBeamIt.cpp";
          v25 = 1024;
          v26 = 567;
          v19 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.";
          v20 = v17;
          v21 = 18;
          goto LABEL_64;
        }
        return 4294956445;
      }
      if ((*(unsigned int (**)(_QWORD, const __CFNumber *))(**((_QWORD **)this + 80) + 40))(*((_QWORD *)this + 80), *a5))
      {
LABEL_27:
        if (a6 == 4)
        {
          if (*((_QWORD *)this + 80))
          {
            v14 = *(_DWORD *)a5;
            if (AUBeamItFDLogScope(void)::once != -1)
              dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
            if (AUBeamItFDLogScope(void)::scope)
            {
              v15 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
              if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
                return (*(uint64_t (**)(_QWORD, BOOL))(**((_QWORD **)this + 80) + 56))(*((_QWORD *)this + 80), v14 != 0);
            }
            else
            {
              v15 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              v23 = 136315906;
              v24 = "AUBeamIt.cpp";
              v25 = 1024;
              v26 = 593;
              v27 = 1024;
              v28 = v14 != 0;
              v29 = 1024;
              v30 = 4631;
              _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property EnableSubbandDOACalculation to %d (prop id: %d).", (uint8_t *)&v23, 0x1Eu);
            }
            return (*(uint64_t (**)(_QWORD, BOOL))(**((_QWORD **)this + 80) + 56))(*((_QWORD *)this + 80), v14 != 0);
          }
          if (AUBeamItFDLogScope(void)::once != -1)
            dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
          if (AUBeamItFDLogScope(void)::scope)
          {
            v18 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
            if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
              return 4294956429;
          }
          else
          {
            v18 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            v23 = 136315650;
            v24 = "AUBeamIt.cpp";
            v25 = 1024;
            v26 = 596;
            v27 = 1024;
            v28 = 4631;
            _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Setting property EnableSubbandDOACalculation failed (prop id: %d).", (uint8_t *)&v23, 0x18u);
          }
          return 4294956429;
        }
        if (AUBeamItFDLogScope(void)::once != -1)
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
        if (AUBeamItFDLogScope(void)::scope)
        {
          v16 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v16 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v23 = 136315906;
          v24 = "AUBeamIt.cpp";
          v25 = 1024;
          v26 = 586;
          v27 = 1024;
          v28 = 4631;
          v29 = 1024;
          v30 = a6;
          v19 = "%25s:%-5d Setting property EnableSubbandDOACalculation failed (prop id: %d). *inData should be UInt32. P"
                "rovided inDataSize = %u.\n";
          v20 = v16;
          v21 = 30;
LABEL_64:
          _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
          return 4294956445;
        }
        return 4294956445;
      }
      *((_BYTE *)this + 632) = 1;
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        v22 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          return 0;
      }
      else
      {
        v22 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      v23 = 136315394;
      v24 = "AUBeamIt.cpp";
      v25 = 1024;
      v26 = 576;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_INFO, "%25s:%-5d BeamformerCoeffs successfully set.", (uint8_t *)&v23, 0x12u);
      return 0;
    case 4631:
      goto LABEL_27;
    case 4633:
      v10 = applesauce::CF::convert_as<double,0>(*a5);
      if (v11)
      {
        v12 = v10;
        result = 0;
        *((_QWORD *)this + 142) = v12;
        return result;
      }
      return 4294956445;
  }
  return result;
}

uint64_t AUBeamIt::SetParameter(AUBeamIt *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  ausdk::AUElement *Element;
  char *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  uint64_t v13;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 78);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v13 = *((_QWORD *)this + 75);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 76) - v13) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v13 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    v9 = (char *)this + 544;
  }
  else
  {
    if (a3)
      return 4294956418;
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    v9 = (char *)this + 528;
    if (a2 == 43)
      v9 = (char *)this + 560;
  }
  result = 0;
  ++*(_QWORD *)v9;
  return result;
}

uint64_t AUBeamIt::CanScheduleParameters(AUBeamIt *this)
{
  return 0;
}

uint64_t AUBeamIt::ProcessMultipleBufferLists(AUBeamIt *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  uint64_t v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  uint64_t v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  uint64_t v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  unsigned int *v36;
  BOOL *v37;
  unint64_t v38;
  char v39;
  char v40;
  const AudioBufferList *v41;
  unint64_t v42;
  AudioBufferList *v43;
  const AudioBufferList *v44;
  UInt32 mNumberBuffers;
  uint64_t v46;
  AudioBufferList *v47;
  uint64_t v48;
  uint64_t v49;
  AudioBufferList *v50;
  AudioBufferList *v51;
  BOOL v53;
  AudioDSP::Utility *v54;
  BOOL *v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  ausdk::AUElement **v63;
  void *v64;
  unint64_t v65;
  void **v66;
  unint64_t v67;
  void **v68;
  char *v69;
  NSObject *v70;
  const char *v71;
  float v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  BOOL *v88;
  UInt32 v89;
  UInt32 v90;
  NSObject *v91;
  const char *v92;
  NSObject *v93;
  unsigned int v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  void *v98;
  unint64_t v99;
  void **p_mData;
  unint64_t v101;
  void **v102;
  char *v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  AudioBufferList v119;
  __int128 v120;
  AudioBufferList v121;
  int v122;
  UInt32 v123;
  uint64_t v124;
  _BYTE v125[48];
  __int128 v126;
  __int128 v127;
  AudioBufferList *v128;
  AudioBufferList *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v13)
  {
    AUBeamIt::UpdateState(this);
    *((_QWORD *)this + 67) = v13;
  }
  v14 = *((_QWORD *)this + 68);
  if (*((_QWORD *)this + 69) != v14)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 80) + 8))
    {
      v15 = 0;
      v16 = (float *)((char *)this + 828);
      do
      {
        v17 = *((_QWORD *)this + 78);
        if (v17)
        {
          v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 32))(v17, v15);
        }
        else
        {
          v19 = *((_QWORD *)this + 75);
          if (v15 >= (*((_QWORD *)this + 76) - v19) >> 3)
            v18 = 0;
          else
            v18 = *(ausdk::AUElement **)(v19 + 8 * v15);
        }
        *(v16 - 4) = ausdk::AUElement::GetParameter(v18, 0x64u);
        v20 = *((_QWORD *)this + 78);
        if (v20)
        {
          v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 32))(v20, v15);
        }
        else
        {
          v22 = *((_QWORD *)this + 75);
          if (v15 >= (*((_QWORD *)this + 76) - v22) >> 3)
            v21 = 0;
          else
            v21 = *(ausdk::AUElement **)(v22 + 8 * v15);
        }
        *(v16 - 3) = ausdk::AUElement::GetParameter(v21, 0x65u);
        v23 = *((_QWORD *)this + 78);
        if (v23)
        {
          v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 32))(v23, v15);
        }
        else
        {
          v25 = *((_QWORD *)this + 75);
          if (v15 >= (*((_QWORD *)this + 76) - v25) >> 3)
            v24 = 0;
          else
            v24 = *(ausdk::AUElement **)(v25 + 8 * v15);
        }
        *(v16 - 2) = ausdk::AUElement::GetParameter(v24, 0x66u);
        v26 = *((_QWORD *)this + 78);
        if (v26)
        {
          v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 32))(v26, v15);
        }
        else
        {
          v28 = *((_QWORD *)this + 75);
          if (v15 >= (*((_QWORD *)this + 76) - v28) >> 3)
            v27 = 0;
          else
            v27 = *(ausdk::AUElement **)(v28 + 8 * v15);
        }
        *(v16 - 1) = ausdk::AUElement::GetParameter(v27, 0x67u);
        v29 = *((_QWORD *)this + 78);
        if (v29)
        {
          v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, v15);
        }
        else
        {
          v31 = *((_QWORD *)this + 75);
          if (v15 >= (*((_QWORD *)this + 76) - v31) >> 3)
            v30 = 0;
          else
            v30 = *(ausdk::AUElement **)(v31 + 8 * v15);
        }
        *v16 = ausdk::AUElement::GetParameter(v30, 0x68u);
        v16 += 5;
        ++v15;
      }
      while (v15 < *(unsigned int *)(*((_QWORD *)this + 80) + 8));
    }
    *((_QWORD *)this + 69) = v14;
  }
  v32 = *((_QWORD *)this + 70);
  if (*((_QWORD *)this + 71) != v32)
  {
    v33 = *((_QWORD *)this + 9);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v35)
        v34 = 0;
      else
        v34 = *v35;
    }
    *((_BYTE *)this + 753) = ausdk::AUElement::GetParameter(v34, 0x2Bu) != 0.0;
    *((_QWORD *)this + 71) = v32;
  }
  v36 = (unsigned int *)((char *)this + 648);
  memcpy((void *)(*((_QWORD *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v38 = 0;
  v128 = 0;
  v129 = 0;
  v39 = 1;
  do
  {
    v40 = v39;
    if (v38 >= a4)
      v41 = 0;
    else
      v41 = a5[v38];
    v39 = 0;
    *(&v128 + v38) = (AudioBufferList *)v41;
    v38 = 1;
  }
  while ((v40 & 1) != 0);
  v42 = 0;
  v126 = 0u;
  v127 = 0u;
  do
  {
    if (v42 >= a6)
      v43 = 0;
    else
      v43 = a7[v42];
    *((_QWORD *)&v126 + v42++) = v43;
  }
  while (v42 != 4);
  v44 = v128;
  if (!v128)
    return 4294956420;
  mNumberBuffers = v128->mNumberBuffers;
  v46 = *((_QWORD *)this + 80);
  if (v128->mNumberBuffers != *(_DWORD *)(v46 + 8))
    return 4294956428;
  v47 = v129;
  if (v129)
  {
    if (v129->mNumberBuffers != mNumberBuffers)
      return 4294956428;
  }
  v48 = v126;
  if ((_QWORD)v126)
  {
    if (*(_DWORD *)v126 != 1)
      return 4294956428;
  }
  v49 = *((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    if (**((_DWORD **)&v126 + 1) != 1)
      return 4294956428;
  }
  v50 = (AudioBufferList *)v127;
  if ((_QWORD)v127)
  {
    if (*(_DWORD *)v127 > *(_DWORD *)(v46 + 12))
      return 4294956428;
  }
  v51 = (AudioBufferList *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    if (**((_DWORD **)&v127 + 1) > *(_DWORD *)(v46 + 12))
      return 4294956428;
  }
  v53 = v129 == 0;
  *(_DWORD *)&v125[2] = 0;
  *(_WORD *)v125 = 0;
  v54 = (AudioDSP::Utility *)(a3 << (*((_BYTE *)this + 633) == 0));
  *(double *)&v121.mNumberBuffers = (double)*(double *)(v46 + 24);
  v121.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v122 = 4;
  v123 = mNumberBuffers;
  v124 = 32;
  AudioDSP::Utility::DetectNonFinites(v54, v128, &v121, (const AudioStreamBasicDescription *)&v125[5], v37);
  if (!v53)
    AudioDSP::Utility::DetectNonFinites(v54, v47, &v121, (const AudioStreamBasicDescription *)&v125[4], v55);
  if (!*((_BYTE *)this + 576) && (!(v125[5] | v125[4]) || !*((_BYTE *)this + 634)))
  {
    BeamformerBase::ProcessBufferLists(*((BeamformerBase **)this + 80), v44, v47, (AudioBufferList *)v48, (AudioBufferList *)v49, v50, v51);
    memcpy((char *)this + 648, (const void *)(*((_QWORD *)this + 80) + 64), 0x1E8uLL);
    v60 = *((_QWORD *)this + 9);
    if (v60)
    {
      v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
    }
    else
    {
      v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v63)
        v61 = 0;
      else
        v61 = *v63;
    }
    v72 = 0.0;
    if (*((_BYTE *)this + 732))
      v72 = 1.0;
    ausdk::AUElement::SetParameter(v61, 0x14u, v72, 0);
    v73 = *((_QWORD *)this + 9);
    if (v73)
    {
      v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
    }
    else
    {
      v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v75)
        v74 = 0;
      else
        v74 = *v75;
    }
    ausdk::AUElement::SetParameter(v74, 0xAu, (float)*((unsigned int *)this + 173), 0);
    v76 = *((_QWORD *)this + 9);
    if (v76)
    {
      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
    }
    else
    {
      v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v78)
        v77 = 0;
      else
        v77 = *v78;
    }
    ausdk::AUElement::SetParameter(v77, 0xBu, *((float *)this + 175), 0);
    v79 = *((_QWORD *)this + 9);
    if (v79)
    {
      v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
    }
    else
    {
      v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v81)
        v80 = 0;
      else
        v80 = *v81;
    }
    ausdk::AUElement::SetParameter(v80, 0xCu, *((float *)this + 176), 0);
    v82 = *((_QWORD *)this + 9);
    if (v82)
    {
      v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
    }
    else
    {
      v84 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v84)
        v83 = 0;
      else
        v83 = *v84;
    }
    ausdk::AUElement::SetParameter(v83, 0xDu, *((float *)this + 177), 0);
    v85 = *((_QWORD *)this + 9);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    }
    else
    {
      v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v87)
        v86 = 0;
      else
        v86 = *v87;
    }
    ausdk::AUElement::SetParameter(v86, 0x1Cu, *((float *)this + 189), 0);
    *(double *)&v119.mNumberBuffers = (double)*(double *)(*((_QWORD *)this + 80) + 24);
    v119.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
    v120 = xmmword_1B6626910;
    if (v48)
      AudioDSP::Utility::DetectNonFinites(v54, (_DWORD *)v48, &v119, (const AudioStreamBasicDescription *)&v125[3], v88);
    if (v49)
      AudioDSP::Utility::DetectNonFinites(v54, (_DWORD *)v49, &v119, (const AudioStreamBasicDescription *)&v125[2], v88);
    if (v50)
    {
      v89 = v50->mNumberBuffers;
      *(double *)&v125[6] = (double)*(double *)(*((_QWORD *)this + 80) + 24);
      *(_OWORD *)&v125[14] = xmmword_1B6626900;
      *(_DWORD *)&v125[30] = 4;
      *(_DWORD *)&v125[34] = v89;
      *(_QWORD *)&v125[38] = 32;
      AudioDSP::Utility::DetectNonFinites(v54, v50, (const AudioBufferList *)&v125[6], (const AudioStreamBasicDescription *)&v125[1], v88);
    }
    if (v51)
    {
      v90 = v51->mNumberBuffers;
      *(double *)&v125[6] = (double)*(double *)(*((_QWORD *)this + 80) + 24);
      *(_OWORD *)&v125[14] = xmmword_1B6626900;
      *(_DWORD *)&v125[30] = 4;
      *(_DWORD *)&v125[34] = v90;
      *(_QWORD *)&v125[38] = 32;
      AudioDSP::Utility::DetectNonFinites(v54, v51, (const AudioBufferList *)&v125[6], (const AudioStreamBasicDescription *)v125, v88);
    }
    if (!*((_BYTE *)this + 634) || !*(_DWORD *)v125)
      goto LABEL_207;
    if (*((_BYTE *)this + 633))
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_131);
      if (AUBeamItTDLogScope(void)::scope)
      {
        v91 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          goto LABEL_178;
      }
      else
      {
        v91 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v125[6] = 136316418;
        *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
        *(_WORD *)&v125[18] = 1024;
        *(_DWORD *)&v125[20] = 1785;
        *(_WORD *)&v125[24] = 1024;
        *(_DWORD *)&v125[26] = v125[3];
        *(_WORD *)&v125[30] = 1024;
        *(_DWORD *)&v125[32] = v125[2];
        *(_WORD *)&v125[36] = 1024;
        *(_DWORD *)&v125[38] = v125[1];
        *(_WORD *)&v125[42] = 1024;
        *(_DWORD *)&v125[44] = v125[0];
        v92 = "%25s:%-5d AUBeamItTD: (BFMicOut, BFLeeOut, AllUplinkBeams, AllSelectionBeams) is NOT finite: (%u, %u, %u, %u)";
LABEL_177:
        _os_log_impl(&dword_1B5ED0000, v91, OS_LOG_TYPE_ERROR, v92, &v125[6], 0x2Au);
      }
    }
    else
    {
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        v91 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          goto LABEL_178;
      }
      else
      {
        v91 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v125[6] = 136316418;
        *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
        *(_WORD *)&v125[18] = 1024;
        *(_DWORD *)&v125[20] = 1789;
        *(_WORD *)&v125[24] = 1024;
        *(_DWORD *)&v125[26] = v125[3];
        *(_WORD *)&v125[30] = 1024;
        *(_DWORD *)&v125[32] = v125[2];
        *(_WORD *)&v125[36] = 1024;
        *(_DWORD *)&v125[38] = v125[1];
        *(_WORD *)&v125[42] = 1024;
        *(_DWORD *)&v125[44] = v125[0];
        v92 = "%25s:%-5d AUBeamItFD: (BFMicOut, BFLeeOut, AllUplinkBeams, AllSelectionBeams) is NOT finite: (%u, %u, %u, %u)";
        goto LABEL_177;
      }
    }
LABEL_178:
    (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 80) + 16))(*((_QWORD *)this + 80), *((unsigned int *)this + 84), (double)*(double *)(*((_QWORD *)this + 80) + 24));
    if (*((_DWORD *)this + 162) >= *(_DWORD *)(*((_QWORD *)this + 80) + 8))
    {
      if (AUBeamItFDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
      if (AUBeamItFDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
        {
          v93 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)&v125[6] = 136315394;
              *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
              *(_WORD *)&v125[18] = 1024;
              *(_DWORD *)&v125[20] = 1797;
              _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", &v125[6], 0x12u);
            }
          }
        }
      }
      v94 = *(_DWORD *)(*((_QWORD *)this + 80) + 8) - 1;
      *((_DWORD *)this + 162) = v94;
      v95 = *((_QWORD *)this + 9);
      if (v95)
      {
        v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
        v94 = *v36;
      }
      else
      {
        v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v97)
          v96 = 0;
        else
          v96 = *v97;
      }
      ausdk::AUElement::SetParameter(v96, 0, (float)v94, 0);
    }
    if (v48)
      memcpy(*(void **)(v48 + 16), v44->mBuffers[*v36].mData, v44->mBuffers[*v36].mDataByteSize);
    if (v49)
    {
      v98 = *(void **)(v49 + 16);
      if (v47)
        memcpy(v98, v47->mBuffers[*v36].mData, v47->mBuffers[*v36].mDataByteSize);
      else
        bzero(v98, *(unsigned int *)(v49 + 12));
    }
    if (v50 && v50->mNumberBuffers)
    {
      v99 = 0;
      p_mData = &v50->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v99;
        p_mData += 2;
      }
      while (v99 < v50->mNumberBuffers);
    }
    if (v51 && v51->mNumberBuffers)
    {
      v101 = 0;
      v102 = &v51->mBuffers[0].mData;
      do
      {
        bzero(*v102, *((unsigned int *)v102 - 1));
        ++v101;
        v102 += 2;
      }
      while (v101 < v51->mNumberBuffers);
    }
    v103 = (char *)this + 20 * *((unsigned int *)this + 162) + 812;
    *((_DWORD *)this + 207) = *((_DWORD *)v103 + 4);
    *(_OWORD *)((char *)this + 812) = *(_OWORD *)v103;
    memcpy((void *)(*((_QWORD *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
    goto LABEL_207;
  }
  if (*((_DWORD *)this + 162) >= *(_DWORD *)(*((_QWORD *)this + 80) + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v56 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)&v125[6] = 136315394;
            *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
            *(_WORD *)&v125[18] = 1024;
            *(_DWORD *)&v125[20] = 1684;
            _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", &v125[6], 0x12u);
          }
        }
      }
    }
    v57 = *(_DWORD *)(*((_QWORD *)this + 80) + 8) - 1;
    *((_DWORD *)this + 162) = v57;
    v58 = *((_QWORD *)this + 9);
    if (v58)
    {
      v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
      v57 = *v36;
    }
    else
    {
      v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v62)
        v59 = 0;
      else
        v59 = *v62;
    }
    ausdk::AUElement::SetParameter(v59, 0, (float)v57, 0);
  }
  if (v48)
    memcpy(*(void **)(v48 + 16), v44->mBuffers[*v36].mData, v44->mBuffers[*v36].mDataByteSize);
  if (v49)
  {
    v64 = *(void **)(v49 + 16);
    if (v47)
      memcpy(v64, v47->mBuffers[*v36].mData, v47->mBuffers[*v36].mDataByteSize);
    else
      bzero(v64, *(unsigned int *)(v49 + 12));
  }
  if (v50 && v50->mNumberBuffers)
  {
    v65 = 0;
    v66 = &v50->mBuffers[0].mData;
    do
    {
      bzero(*v66, *((unsigned int *)v66 - 1));
      ++v65;
      v66 += 2;
    }
    while (v65 < v50->mNumberBuffers);
  }
  if (v51 && v51->mNumberBuffers)
  {
    v67 = 0;
    v68 = &v51->mBuffers[0].mData;
    do
    {
      bzero(*v68, *((unsigned int *)v68 - 1));
      ++v67;
      v68 += 2;
    }
    while (v67 < v51->mNumberBuffers);
  }
  v69 = (char *)this + 20 * *((unsigned int *)this + 162) + 812;
  *((_DWORD *)this + 207) = *((_DWORD *)v69 + 4);
  *(_OWORD *)((char *)this + 812) = *(_OWORD *)v69;
  memcpy((void *)(*((_QWORD *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
  if (!(v125[5] | v125[4]))
    goto LABEL_207;
  if (*((_BYTE *)this + 633))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_131);
    if (AUBeamItTDLogScope(void)::scope)
    {
      v70 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        goto LABEL_207;
    }
    else
    {
      v70 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v125[6] = 136315906;
      *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
      *(_WORD *)&v125[18] = 1024;
      *(_DWORD *)&v125[20] = 1724;
      *(_WORD *)&v125[24] = 1024;
      *(_DWORD *)&v125[26] = v125[5];
      *(_WORD *)&v125[30] = 1024;
      *(_DWORD *)&v125[32] = v125[4];
      v71 = "%25s:%-5d AUBeamItTD: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)";
LABEL_121:
      _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_ERROR, v71, &v125[6], 0x1Eu);
    }
  }
  else
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      v70 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        goto LABEL_207;
    }
    else
    {
      v70 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v125[6] = 136315906;
      *(_QWORD *)&v125[10] = "AUBeamIt.cpp";
      *(_WORD *)&v125[18] = 1024;
      *(_DWORD *)&v125[20] = 1728;
      *(_WORD *)&v125[24] = 1024;
      *(_DWORD *)&v125[26] = v125[5];
      *(_WORD *)&v125[30] = 1024;
      *(_DWORD *)&v125[32] = v125[4];
      v71 = "%25s:%-5d AUBeamItFD: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)";
      goto LABEL_121;
    }
  }
LABEL_207:
  v104 = *((_QWORD *)this + 78);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 75);
    if (*((ausdk::AUElement ***)this + 76) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x64u, *((float *)this + 203), 0);
  v107 = *((_QWORD *)this + 78);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)this + 75);
    if (*((ausdk::AUElement ***)this + 76) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x65u, *((float *)this + 204), 0);
  v110 = *((_QWORD *)this + 78);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 75);
    if (*((ausdk::AUElement ***)this + 76) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x66u, *((float *)this + 205), 0);
  v113 = *((_QWORD *)this + 78);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 75);
    if (*((ausdk::AUElement ***)this + 76) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x67u, *((float *)this + 206), 0);
  v116 = *((_QWORD *)this + 78);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = (ausdk::AUElement **)*((_QWORD *)this + 75);
    if (*((ausdk::AUElement ***)this + 76) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x68u, *((float *)this + 207), 0);
  return 0;
}

uint64_t AUBeamIt::Render(AUBeamIt *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  ausdk::AUScope *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUIOElement *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t BufferList;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;

  v8 = 0;
  v9 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  v10 = (AUBeamIt *)((char *)this + 80);
  while (1)
  {
    v11 = *((_QWORD *)this + 15);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v9 >= v12)
      break;
    if (ausdk::AUBase::HasInput(this, v9))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v9, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v8 = 1;
    }
    v9 = (v9 + 1);
  }
  v15 = 0;
  memset(v32, 0, sizeof(v32));
  do
  {
    v16 = *((_QWORD *)this + 21);
    if (v16)
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    else
      v17 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v15 >= v17)
    {
      v19 = 0;
    }
    else
    {
      v18 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), v15);
      v19 = ausdk::AUIOElement::PrepareBuffer(v18, a4);
    }
    *((_QWORD *)v32 + v15++) = v19;
  }
  while (v15 != 4);
  if ((v8 & 1) != 0)
    return 0;
  v20 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v21 = 1;
  do
  {
    v22 = v21;
    v23 = *((_QWORD *)this + 15);
    if (v23)
      LODWORD(v24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    else
      v24 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v20 >= v24)
    {
      BufferList = 0;
    }
    else
    {
      v25 = ausdk::AUScope::SafeGetElement(v10, v20);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v25 + 144));
    }
    v21 = 0;
    v31[v20] = BufferList;
    v20 = 1;
  }
  while ((v22 & 1) != 0);
  v27 = *((_QWORD *)this + 15);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  else
    v28 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v29 = *((_QWORD *)this + 21);
  if (v29)
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  else
    v30 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  return (*(uint64_t (**)(AUBeamIt *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _OWORD *))(*(_QWORD *)this + 184))(this, a2, a4, v28, v31, v30, v32);
}

BOOL AUBeamIt::BusCountWritable(AUBeamIt *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUBeamIt::SetBusCount(AUBeamIt *this, int a2, unsigned int a3)
{
  int64x2_t *v3;
  uint64_t v4;

  if (a2 == 1 && a3 - 1 <= 1)
  {
    v3 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, a3);
    return 0;
  }
  v4 = 4294956445;
  if (a2 == 2 && a3 <= 4)
  {
    v3 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v4;
}

uint64_t AUBeamIt::GetParameterList(AUBeamIt *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a2)
  {
    if (a2 != 4)
      return 4294956430;
    if (!a3)
    {
      v4 = 5;
      goto LABEL_11;
    }
    v4 = 5;
    *a3 = 100;
    v5 = 104;
    v6 = 103;
    v7 = 102;
    v8 = 101;
    v9 = 4;
    v10 = 3;
    v11 = 2;
    v12 = 1;
  }
  else
  {
    if (!a3)
    {
      v4 = 44;
      goto LABEL_11;
    }
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A1F90;
    *((_OWORD *)a3 + 3) = xmmword_1B66A1FA0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A1FB0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A1FC0;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_OWORD *)a3 + 7) = xmmword_1B66A13B0;
    v4 = 44;
    v9 = 43;
    v10 = 42;
    v11 = 41;
    v12 = 40;
    v8 = 40;
    v7 = 41;
    v6 = 42;
    v5 = 43;
    *((_OWORD *)a3 + 8) = xmmword_1B66A1FD0;
    *((_OWORD *)a3 + 9) = xmmword_1B66A1FE0;
  }
  a3[v12] = v8;
  a3[v11] = v7;
  a3[v10] = v6;
  a3[v9] = v5;
LABEL_11:
  result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUBeamIt::GetParameterInfo(AUBeamIt *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v5;
  uint64_t result;
  const __CFString *v7;
  AudioUnitParameterOptions flags;
  int v9;
  AudioUnitParameterOptions v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  UInt32 v14;
  uint64_t v15;
  AudioUnitParameterValue v16;
  UInt32 v17;
  AudioUnitParameterOptions v18;
  uint64_t v19;
  const __CFString *v20;
  const __CFString *v21;
  AudioUnitParameterOptions v22;
  uint64_t v23;
  const __CFString *v24;
  const __CFString *v25;
  UInt32 v26;
  uint64_t v27;
  AudioUnitParameterValue v28;
  AudioUnitParameterValue v29;
  AudioUnitParameterValue v30;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 'd':
        buffer->cfNameString = CFSTR("EC Delta EIR.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Delta EIR."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x501502F900000000;
        goto LABEL_14;
      case 'e':
        buffer->cfNameString = CFSTR("EC IR Delay.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC IR Delay."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x43C8000000000000;
        goto LABEL_14;
      case 'f':
        v7 = CFSTR("EC Adapted flag.");
        goto LABEL_13;
      case 'g':
        buffer->cfNameString = CFSTR("EC Time aligned ref signal energy.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Time aligned ref signal energy."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x447A000000000000;
        goto LABEL_14;
      case 'h':
        v7 = CFSTR("EC Mic-Eclee cross correlation.");
LABEL_13:
        buffer->cfNameString = v7;
        buffer->flags = 0x8000000;
        CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v5 = 0x3F80000000000000;
LABEL_14:
        *(_QWORD *)&buffer->minValue = v5;
        flags = buffer->flags;
        v9 = 1073774592;
        goto LABEL_80;
      default:
        return 4294956418;
    }
  }
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Bypass mode mic index.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Bypass mode mic index."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 0;
      goto LABEL_50;
    case 1:
      buffer->cfNameString = CFSTR("Beam selection mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Beam selection mode."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v10 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x40A0000000000000;
      goto LABEL_18;
    case 2:
      buffer->cfNameString = CFSTR("EQ for beam selection.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("EQ for beam selection."), buffer->name, 52, 0x8000100u);
      v12 = 1;
      goto LABEL_35;
    case 3:
      buffer->cfNameString = CFSTR("Beam selection algorithm.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Beam selection algorithm."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v10 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x4000000000000000;
LABEL_18:
      *(_QWORD *)&buffer->minValue = v11;
      buffer->defaultValue = 0.0;
      goto LABEL_36;
    case 4:
      v13 = CFSTR("Select beams from (Auto)/Beam choice (Fixed).");
      goto LABEL_21;
    case 5:
      v13 = CFSTR("Select beams to.");
LABEL_21:
      buffer->cfNameString = v13;
      buffer->flags = 0x8000000;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      v14 = 1;
      goto LABEL_38;
    case 6:
      buffer->cfNameString = CFSTR("Start frequency (Fmin).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Start frequency (Fmin)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 1000.0;
      v15 = 0x453B800043160000;
      goto LABEL_70;
    case 7:
      buffer->cfNameString = CFSTR("End frequency (Fmax).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("End frequency (Fmax)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 5000.0;
      v15 = 0x463B8000447A0000;
      goto LABEL_70;
    case 8:
      buffer->cfNameString = CFSTR("Energy smoothing time constant.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Energy smoothing time constant."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v16 = 0.3;
      goto LABEL_69;
    case 9:
      buffer->cfNameString = CFSTR("Energy threshold (dBFS)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Energy threshold (dBFS)"), buffer->name, 52, 0x8000100u);
      v17 = 1;
      goto LABEL_43;
    case 10:
      buffer->cfNameString = CFSTR("Selected beam.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Selected beam."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v19 = 0x438F800000000000;
      goto LABEL_31;
    case 11:
      buffer->cfNameString = CFSTR("Selected beam distance (m).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Selected beam distance (m)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 1.0;
      goto LABEL_45;
    case 12:
      v20 = CFSTR("Selected beam azimuth (deg) (X->Y).");
      goto LABEL_30;
    case 13:
      v20 = CFSTR("Selected beam elevation (deg) (Z->XY).");
LABEL_30:
      buffer->cfNameString = v20;
      buffer->flags = 0x8000000;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      v19 = 0x43B4000000000000;
LABEL_31:
      *(_QWORD *)&buffer->minValue = v19;
      buffer->defaultValue = 0.0;
      goto LABEL_45;
    case 14:
      v21 = CFSTR("Mix EC Parameters?");
      goto LABEL_34;
    case 15:
      v21 = CFSTR("Switch beams in echo?");
LABEL_34:
      buffer->cfNameString = v21;
      buffer->flags = 0x8000000;
      CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
      v12 = 2;
LABEL_35:
      buffer->clumpID = v12;
      v10 = buffer->flags;
      buffer->unit = v12;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 1.0;
LABEL_36:
      v22 = v10 | 0xC0100000;
      goto LABEL_81;
    case 16:
      buffer->cfNameString = CFSTR("Best beam in echo.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Best beam in echo."), buffer->name, 52, 0x8000100u);
      v14 = 2;
LABEL_38:
      buffer->clumpID = v14;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v23 = 0x438F800000000000;
      goto LABEL_78;
    case 17:
      buffer->cfNameString = CFSTR("Echo-to-local voice threshold.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Echo-to-local voice threshold."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = -3.0;
      v15 = 0x41400000C1400000;
      goto LABEL_70;
    case 18:
      v24 = CFSTR("Echo level threshold.");
      goto LABEL_42;
    case 19:
      v24 = CFSTR("Local voice level threshold.");
LABEL_42:
      buffer->cfNameString = v24;
      buffer->flags = 0x8000000;
      CFStringGetCString(v24, buffer->name, 52, 0x8000100u);
      v17 = 2;
LABEL_43:
      buffer->clumpID = v17;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = -60.0;
      v15 = 3267887104;
      goto LABEL_70;
    case 20:
      buffer->cfNameString = CFSTR("Echo active flag.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Echo active flag."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultValue = 0.0;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
LABEL_45:
      v22 = v18 | 0x40108000;
      goto LABEL_81;
    case 21:
      v25 = CFSTR("Mean Normalize Selection Beams.");
      goto LABEL_76;
    case 22:
      v25 = CFSTR("Use mic power averaging.");
      goto LABEL_76;
    case 23:
      buffer->cfNameString = CFSTR("Limit wind boost?");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limit wind boost?"), buffer->name, 52, 0x8000100u);
      v26 = 3;
      goto LABEL_77;
    case 24:
      buffer->cfNameString = CFSTR("Reference mic index.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Reference mic index."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
LABEL_50:
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v23 = 0x4170000000000000;
      goto LABEL_78;
    case 25:
      buffer->cfNameString = CFSTR("Cutoff frequency for wind boost limiting.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Cutoff frequency for wind boost limiting."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 500.0;
      v15 = 0x457A000000000000;
      goto LABEL_70;
    case 26:
      buffer->cfNameString = CFSTR("Wind boost detection threshold (dB).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wind boost detection threshold (dB)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = 6.0;
      goto LABEL_54;
    case 27:
      buffer->cfNameString = CFSTR("Max wind boost allowed (dB).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Max wind boost allowed (dB)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = 0.0;
LABEL_54:
      v15 = 0x4140000000000000;
      goto LABEL_70;
    case 28:
      buffer->cfNameString = CFSTR("Current Crossover Frequency (MAX).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Current Crossover Frequency (MAX)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 20.0;
      *(_QWORD *)&buffer->minValue = 0x469C400041A00000;
      v9 = 1079017472;
      break;
    case 29:
      buffer->cfNameString = CFSTR("Scale Cutoff.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Scale Cutoff."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = -100.0;
      v27 = 0x42C80000C2C80000;
      goto LABEL_74;
    case 30:
      buffer->cfNameString = CFSTR("Raw Scale Smoothing.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Raw Scale Smoothing."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v28 = 0.03;
      goto LABEL_73;
    case 31:
      buffer->cfNameString = CFSTR("Omni Blend Scale Thres.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Omni Blend Scale Thres."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = -12.0;
      v15 = 0x42C80000C2C80000;
      goto LABEL_70;
    case 32:
      buffer->cfNameString = CFSTR("Crossover Max Frequency.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Crossover Max Frequency."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      v29 = 1250.0;
      goto LABEL_66;
    case 33:
      buffer->cfNameString = CFSTR("Crossover Index Attack.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Crossover Index Attack."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v30 = 0.1;
      goto LABEL_63;
    case 34:
      buffer->cfNameString = CFSTR("Crossover Index Release.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Crossover Index Release."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v30 = 1.0;
      goto LABEL_63;
    case 35:
      buffer->cfNameString = CFSTR("Crossover Index Hold.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Crossover Index Hold."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v30 = 1.5;
LABEL_63:
      buffer->defaultValue = v30;
      v15 = 0x4120000000000000;
      goto LABEL_70;
    case 36:
      buffer->cfNameString = CFSTR("Crossover Index Smoothing.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Crossover Index Smoothing."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v28 = 0.4;
      goto LABEL_73;
    case 37:
      buffer->cfNameString = CFSTR("Min Omni Blend Crossover Frequency.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Min Omni Blend Crossover Frequency."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      v29 = 250.0;
LABEL_66:
      buffer->defaultValue = v29;
      v15 = 0x469C400000000000;
      goto LABEL_70;
    case 38:
      buffer->cfNameString = CFSTR("Min Omni Blend Abs. Energy Trigger.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Min Omni Blend Abs. Energy Trigger."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = -90.0;
      v15 = 0x43480000C3480000;
      goto LABEL_70;
    case 39:
      buffer->cfNameString = CFSTR("Wind / Scratch Detect Trigger Attack.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wind / Scratch Detect Trigger Attack."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v16 = 0.25;
LABEL_69:
      buffer->defaultValue = v16;
      v15 = 0x3F80000000000000;
LABEL_70:
      *(_QWORD *)&buffer->minValue = v15;
      goto LABEL_79;
    case 40:
      buffer->cfNameString = CFSTR("Wind / Scratch Detect Trigger Release.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wind / Scratch Detect Trigger Release."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      buffer->defaultValue = 0.25;
      v27 = 0x3F80000000000000;
      goto LABEL_74;
    case 41:
      buffer->cfNameString = CFSTR("Cross Fade Length Ramp Slope.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Cross Fade Length Ramp Slope."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v28 = 0.75;
LABEL_73:
      buffer->defaultValue = v28;
      v27 = 0x4120000000000000;
LABEL_74:
      *(_QWORD *)&buffer->minValue = v27;
      v9 = -1005584384;
      break;
    case 42:
      v25 = CFSTR("Use beam crossfade for the uplink beam.");
LABEL_76:
      buffer->cfNameString = v25;
      buffer->flags = 0x8000000;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      v26 = 1;
LABEL_77:
      buffer->clumpID = v26;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      v23 = 0x3F80000000000000;
LABEL_78:
      *(_QWORD *)&buffer->minValue = v23;
      buffer->defaultValue = 0.0;
      goto LABEL_79;
    case 43:
      buffer->cfNameString = CFSTR("Enable beam switching for Auto mode (e.g., external VAD).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Enable beam switching for Auto mode (e.g., external VAD)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 1.0;
LABEL_79:
      v9 = -1072693248;
      break;
    default:
      return 4294956418;
  }
LABEL_80:
  v22 = flags | v9;
LABEL_81:
  result = 0;
  buffer->flags = v22;
  return result;
}

UInt8 *AUBeamIt::SaveExtendedScopes(AUBeamIt *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUBeamIt::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

uint64_t AUBeamIt::GetParameterValueStrings(AUBeamIt *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 == 3)
  {
    v8 = xmmword_1E69D2DE0;
    *(_QWORD *)&v9 = CFSTR("LSDD.");
    v6 = 3;
    goto LABEL_11;
  }
  if (a3 == 2)
  {
    v8 = xmmword_1E69D2DD0;
    v6 = 2;
    goto LABEL_11;
  }
  if (a3 != 1)
    return 0;
  v8 = xmmword_1E69D2DA0;
  v9 = *(_OWORD *)&off_1E69D2DB0;
  v10 = xmmword_1E69D2DC0;
  v6 = 6;
LABEL_11:
  v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
  result = 0;
  *a4 = v7;
  return result;
}

double AUBeamIt::GetLatency(AUBeamIt *this)
{
  return *((double *)this + 142);
}

double AUBeamIt::GetTailTime(AUBeamIt *this)
{
  return 0.05;
}

uint64_t AUBeamIt::SupportsTail(AUBeamIt *this)
{
  return 1;
}

BOOL AUBeamIt::StreamFormatWritable(AUBeamIt *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUBeamIt::SupportedNumChannels(AUBeamIt *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUBeamIt::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUBeamIt::ValidFormat(AUBeamIt *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  int v4;
  int v5;
  uint64_t result;
  UInt32 mChannelsPerFrame;
  unsigned int v9;
  unsigned int v10;

  if (*((_BYTE *)this + 633))
    v4 = 32;
  else
    v4 = 64;
  if (*((_BYTE *)this + 633))
    v5 = 1819304813;
  else
    v5 = 1718773105;
  if (a4->mBitsPerChannel == v4 && a4->mFormatID == v5)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    if (mChannelsPerFrame == 1)
      v9 = result;
    else
      v9 = 0;
    if (mChannelsPerFrame < 0x121)
      v10 = result;
    else
      v10 = 0;
    if ((a3 & 0xFFFFFFFE) == 2)
      return v10;
    else
      return v9;
  }
  else if (a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUBeamIt::ChangeStreamFormat(AUBeamIt *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Element;
  NSObject *v15;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v6 = a3;
  v7 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v9 = 0;
  if (v7 == 1 && !v6)
  {
    v10 = *((_QWORD *)this + 15);
    if (v10)
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      v11 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v11 < 2)
      return 0;
    v12 = *((_QWORD *)this + 15);
    if (v12)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 1))
        return 0;
    }
    else
    {
      v13 = *((_QWORD *)this + 12);
      if ((unint64_t)(*((_QWORD *)this + 13) - v13) < 9 || !*(_QWORD *)(v13 + 8))
        return 0;
    }
    Element = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 1u);
    v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)Element + 56))(Element, a5);
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      v15 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        return v9;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v17 = 136315394;
      v18 = "AUBeamIt.cpp";
      v19 = 1024;
      v20 = 1507;
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v17, 0x12u);
    }
  }
  return v9;
}

uint64_t AUBeamIt::GetScopeExtended(AUBeamIt *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 584;
  else
    return 0;
}

os_log_t ___ZL18AUBeamItFDLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aubmfd");
  *v0 = result;
  AUBeamItFDLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUBeamIt::UpdateState(AUBeamIt *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  float v134;
  float v135;
  NSObject *v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  float v139;
  ausdk::AUElement **v140;
  float v141;
  NSObject *v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  float v145;
  ausdk::AUElement **v146;
  NSObject *v147;
  float v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  uint64_t v152;
  NSObject *v153;
  unsigned int v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  unsigned int v158;
  NSObject *v159;
  unsigned int v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  NSObject *v164;
  unsigned int v165;
  uint64_t v166;
  ausdk::AUElement *v167;
  ausdk::AUElement **v168;
  NSObject *v169;
  unsigned int v170;
  uint64_t v171;
  ausdk::AUElement *v172;
  NSObject *v173;
  unsigned int v174;
  uint64_t v175;
  ausdk::AUElement **v176;
  ausdk::AUElement **v177;
  float v178;
  unsigned int v179;
  NSObject *v180;
  unsigned int v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  NSObject *v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  ausdk::AUElement **v188;
  NSObject *v189;
  unsigned int v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  ausdk::AUElement **v193;
  int v194;
  const char *v195;
  __int16 v196;
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 162) = ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((_DWORD *)this + 164) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((_DWORD *)this + 165) = (int)ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((_DWORD *)this + 166) = ausdk::AUElement::GetParameter(v15, 4u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((_DWORD *)this + 167) = ausdk::AUElement::GetParameter(v18, 5u);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((float *)this + 168) = ausdk::AUElement::GetParameter(v21, 6u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v24, 7u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 170) = ausdk::AUElement::GetParameter(v27, 8u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v30, 9u);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((_BYTE *)this + 688) = ausdk::AUElement::GetParameter(v33, 0x15u) != 0.0;
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((_BYTE *)this + 689) = ausdk::AUElement::GetParameter(v36, 0x16u) != 0.0;
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((_DWORD *)this + 173) = ausdk::AUElement::GetParameter(v39, 0xAu);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((float *)this + 175) = (float)ausdk::AUElement::GetParameter(v42, 0xBu);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((float *)this + 176) = (float)ausdk::AUElement::GetParameter(v45, 0xCu);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *((float *)this + 177) = (float)ausdk::AUElement::GetParameter(v48, 0xDu);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *((_BYTE *)this + 712) = ausdk::AUElement::GetParameter(v51, 0xEu) != 0.0;
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  *((_BYTE *)this + 713) = ausdk::AUElement::GetParameter(v54, 0xFu) != 0.0;
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  *((_DWORD *)this + 179) = ausdk::AUElement::GetParameter(v57, 0x10u);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v60, 0x11u);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v63, 0x12u);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  *((float *)this + 182) = ausdk::AUElement::GetParameter(v66, 0x13u);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  *((_BYTE *)this + 732) = ausdk::AUElement::GetParameter(v69, 0x14u) != 0.0;
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  *((_BYTE *)this + 733) = ausdk::AUElement::GetParameter(v72, 0x17u) != 0.0;
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  *((_DWORD *)this + 184) = ausdk::AUElement::GetParameter(v75, 0x18u);
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  *((float *)this + 185) = ausdk::AUElement::GetParameter(v78, 0x19u);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  *((float *)this + 186) = ausdk::AUElement::GetParameter(v81, 0x1Au);
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  *((float *)this + 187) = ausdk::AUElement::GetParameter(v84, 0x1Bu);
  v86 = *((_QWORD *)this + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  *((float *)this + 189) = ausdk::AUElement::GetParameter(v87, 0x1Cu);
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  *((float *)this + 190) = ausdk::AUElement::GetParameter(v90, 0x1Du);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  *((float *)this + 191) = ausdk::AUElement::GetParameter(v93, 0x1Eu);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  *((float *)this + 192) = ausdk::AUElement::GetParameter(v96, 0x1Fu);
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  *((float *)this + 193) = ausdk::AUElement::GetParameter(v99, 0x20u);
  v101 = *((_QWORD *)this + 9);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  *((float *)this + 194) = ausdk::AUElement::GetParameter(v102, 0x21u);
  v104 = *((_QWORD *)this + 9);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  *((float *)this + 195) = ausdk::AUElement::GetParameter(v105, 0x22u);
  v107 = *((_QWORD *)this + 9);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  *((float *)this + 196) = ausdk::AUElement::GetParameter(v108, 0x23u);
  v110 = *((_QWORD *)this + 9);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  *((float *)this + 197) = ausdk::AUElement::GetParameter(v111, 0x24u);
  v113 = *((_QWORD *)this + 9);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  *((float *)this + 198) = ausdk::AUElement::GetParameter(v114, 0x25u);
  v116 = *((_QWORD *)this + 9);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  *((float *)this + 199) = ausdk::AUElement::GetParameter(v117, 0x26u);
  v119 = *((_QWORD *)this + 9);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  *((float *)this + 200) = ausdk::AUElement::GetParameter(v120, 0x27u);
  v122 = *((_QWORD *)this + 9);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  *((float *)this + 201) = ausdk::AUElement::GetParameter(v123, 0x28u);
  v125 = *((_QWORD *)this + 9);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  *((float *)this + 202) = ausdk::AUElement::GetParameter(v126, 0x29u);
  v128 = *((_QWORD *)this + 9);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  *((_BYTE *)this + 752) = ausdk::AUElement::GetParameter(v129, 0x2Au) != 0.0;
  v131 = *((_QWORD *)this + 9);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  *((_BYTE *)this + 753) = ausdk::AUElement::GetParameter(v132, 0x2Bu) != 0.0;
  v134 = *(double *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 0) + 80);
  v135 = v134 * 0.5;
  if (*((float *)this + 168) > (float)(v134 * 0.5))
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v136 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1908;
            _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmin must be < (samplingRate/2). Setting Fmin = samplingRate/2.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    *((float *)this + 168) = v135;
    v137 = *((_QWORD *)this + 9);
    if (v137)
    {
      v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
      v139 = *((float *)this + 168);
    }
    else
    {
      v140 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v140)
        v138 = 0;
      else
        v138 = *v140;
      v139 = v135;
    }
    ausdk::AUElement::SetParameter(v138, 6u, v139, 0);
  }
  v141 = *((float *)this + 169);
  if (v141 > v135)
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v142 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1913;
            _os_log_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmax must be < (samplingRate/2). Setting Fmax = samplingRate/2.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    *((float *)this + 169) = v135;
    v143 = *((_QWORD *)this + 9);
    if (v143)
    {
      v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
      v145 = *((float *)this + 169);
    }
    else
    {
      v146 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v146)
        v144 = 0;
      else
        v144 = *v146;
      v145 = v135;
    }
    ausdk::AUElement::SetParameter(v144, 7u, v145, 0);
    v141 = *((float *)this + 169);
  }
  if (*((float *)this + 168) > v141)
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v147 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1918;
            _os_log_impl(&dword_1B5ED0000, v147, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmin must be <= Fmax. Setting Fmin = Fmax.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v148 = *((float *)this + 169);
    *((float *)this + 168) = v148;
    v149 = *((_QWORD *)this + 9);
    if (v149)
    {
      v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
      v148 = *((float *)this + 168);
    }
    else
    {
      v151 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v151)
        v150 = 0;
      else
        v150 = *v151;
    }
    ausdk::AUElement::SetParameter(v150, 6u, v148, 0);
  }
  v152 = *((_QWORD *)this + 80);
  if (*((_DWORD *)this + 162) >= *(_DWORD *)(v152 + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v153 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1923;
            _os_log_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v154 = *(_DWORD *)(*((_QWORD *)this + 80) + 8) - 1;
    *((_DWORD *)this + 162) = v154;
    v155 = *((_QWORD *)this + 9);
    if (v155)
    {
      v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
      v154 = *((_DWORD *)this + 162);
    }
    else
    {
      v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v157)
        v156 = 0;
      else
        v156 = *v157;
    }
    ausdk::AUElement::SetParameter(v156, 0, (float)v154, 0);
    v152 = *((_QWORD *)this + 80);
  }
  v158 = *(_DWORD *)(v152 + 12);
  if (*((_DWORD *)this + 166) >= v158)
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v159 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1928;
            _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsFrom set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v160 = *(_DWORD *)(*((_QWORD *)this + 80) + 12) - 1;
    *((_DWORD *)this + 166) = v160;
    v161 = *((_QWORD *)this + 9);
    if (v161)
    {
      v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
      v160 = *((_DWORD *)this + 166);
    }
    else
    {
      v163 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v163)
        v162 = 0;
      else
        v162 = *v163;
    }
    ausdk::AUElement::SetParameter(v162, 4u, (float)v160, 0);
    v158 = *(_DWORD *)(*((_QWORD *)this + 80) + 12);
  }
  if (*((_DWORD *)this + 167) >= v158)
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v164 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1933;
            _os_log_impl(&dword_1B5ED0000, v164, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsTo set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v165 = *(_DWORD *)(*((_QWORD *)this + 80) + 12) - 1;
    *((_DWORD *)this + 167) = v165;
    v166 = *((_QWORD *)this + 9);
    if (v166)
    {
      v167 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v166 + 32))(v166, 0);
      v165 = *((_DWORD *)this + 167);
    }
    else
    {
      v168 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v168)
        v167 = 0;
      else
        v167 = *v168;
    }
    ausdk::AUElement::SetParameter(v167, 5u, (float)v165, 0);
  }
  if (*((_DWORD *)this + 163) == 2)
  {
    if (*((_DWORD *)this + 167) == *((_DWORD *)this + 166))
      goto LABEL_337;
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v169 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1939;
            _os_log_impl(&dword_1B5ED0000, v169, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fixed beam selection mode is chosen. Setting SelectBeamsTo = SelectBeamsFrom.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v170 = *((_DWORD *)this + 166);
    *((_DWORD *)this + 167) = v170;
    v171 = *((_QWORD *)this + 9);
    if (v171)
    {
      v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0);
      v170 = *((_DWORD *)this + 167);
    }
    else
    {
      v176 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v176)
        v172 = 0;
      else
        v172 = *v176;
    }
    v178 = (float)v170;
    v179 = 5;
  }
  else
  {
    if (*((_DWORD *)this + 166) <= *((_DWORD *)this + 167))
      goto LABEL_337;
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v173 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1946;
            _os_log_impl(&dword_1B5ED0000, v173, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsFrom set to a value greater than SelectBeamsTo. Setting it to SelectBeamsTo.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v174 = *((_DWORD *)this + 167);
    *((_DWORD *)this + 166) = v174;
    v175 = *((_QWORD *)this + 9);
    if (v175)
    {
      v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v175 + 32))(v175, 0);
      v174 = *((_DWORD *)this + 166);
    }
    else
    {
      v177 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v177)
        v172 = 0;
      else
        v172 = *v177;
    }
    v178 = (float)v174;
    v179 = 4;
  }
  ausdk::AUElement::SetParameter(v172, v179, v178, 0);
LABEL_337:
  if (*((_DWORD *)this + 179) >= *(_DWORD *)(*((_QWORD *)this + 80) + 12))
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v180 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1952;
            _os_log_impl(&dword_1B5ED0000, v180, OS_LOG_TYPE_DEBUG, "%25s:%-5d BestBeamInEcho set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v181 = *(_DWORD *)(*((_QWORD *)this + 80) + 12) - 1;
    *((_DWORD *)this + 179) = v181;
    v182 = *((_QWORD *)this + 9);
    if (v182)
    {
      v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
      v181 = *((_DWORD *)this + 179);
    }
    else
    {
      v184 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v184)
        v183 = 0;
      else
        v183 = *v184;
    }
    ausdk::AUElement::SetParameter(v183, 0x10u, (float)v181, 0);
  }
  if (*((float *)this + 185) > v135)
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v185 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1958;
            _os_log_impl(&dword_1B5ED0000, v185, OS_LOG_TYPE_DEBUG, "%25s:%-5d FcLimitWindBoost must be < (samplingRate/2). Setting FcLimitWindBoost = samplingRate/2.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    *((float *)this + 185) = v135;
    v186 = *((_QWORD *)this + 9);
    if (v186)
    {
      v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 0);
      v135 = *((float *)this + 185);
    }
    else
    {
      v188 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v188)
        v187 = 0;
      else
        v187 = *v188;
    }
    ausdk::AUElement::SetParameter(v187, 0x19u, v135, 0);
  }
  if (*((_DWORD *)this + 184) >= *(_DWORD *)(*((_QWORD *)this + 80) + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_8376);
    if (AUBeamItFDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItFDLogScope(void)::scope + 8) & 1) != 0)
      {
        v189 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v194 = 136315394;
            v195 = "AUBeamIt.cpp";
            v196 = 1024;
            v197 = 1963;
            _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEBUG, "%25s:%-5d RefMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", (uint8_t *)&v194, 0x12u);
          }
        }
      }
    }
    v190 = *(_DWORD *)(*((_QWORD *)this + 80) + 8) - 1;
    *((_DWORD *)this + 184) = v190;
    v191 = *((_QWORD *)this + 9);
    if (v191)
    {
      v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v191 + 32))(v191, 0);
      v190 = *((_DWORD *)this + 184);
    }
    else
    {
      v193 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v193)
        v192 = 0;
      else
        v192 = *v193;
    }
    ausdk::AUElement::SetParameter(v192, 0x18u, (float)v190, 0);
  }
}

os_log_t ___ZL18AUBeamItTDLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aubmtd");
  *v0 = result;
  AUBeamItTDLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUECMicRef::~AUECMicRef(AUECMicRef *this)
{
  AUECMicRef::~AUECMicRef(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E69D2E88;
  AUECMicRef::Cleanup(this);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 99, 0);
  v2 = (void *)*((_QWORD *)this + 95);
  if (v2)
  {
    *((_QWORD *)this + 96) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 92);
  if (v3)
  {
    *((_QWORD *)this + 93) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 616));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECMicRef::Initialize(AUECMicRef *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  unsigned int Parameter;
  unsigned int v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  _BOOL8 v77;
  double AppFloatValue;
  float v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  NSObject *v87;
  unsigned int v88;
  BOOL v89;
  _BYTE buf[12];
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUECMicRef.cpp";
    v91 = 1024;
    v92 = 181;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Initialize.\n", buf, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 1u);
  v5 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 2u);
  v6 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 0);
  v7 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 1u);
  v8 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 2u);
  v9 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v9;
  v10 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v10;
  *((_DWORD *)this + 140) = *(_DWORD *)(v5 + 108);
  v11 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v11;
  if (v11 != *(double *)(v4 + 80))
    return 4294956428;
  v13 = v8;
  v14 = *(double *)(v6 + 80);
  result = 4294956428;
  if (v14 == v11 && v14 == *(double *)(v13 + 80) && v14 == *(double *)(v7 + 80))
  {
    v15 = *(_DWORD *)(v6 + 108);
    if (v15 == v9 && v15 == *(_DWORD *)(v7 + 108) && v10 == *(_DWORD *)(v13 + 108))
    {
      v16 = *((_QWORD *)this + 9);
      if (v16)
      {
        v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
      }
      else
      {
        v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v18)
          v17 = 0;
        else
          v17 = *v18;
      }
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v17, 0);
      v19 = *((_QWORD *)this + 9);
      if (v19)
      {
        v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
      }
      else
      {
        v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v21)
          v20 = 0;
        else
          v20 = *v21;
      }
      *((float *)this + 170) = ausdk::AUElement::GetParameter(v20, 1u);
      v22 = *((_QWORD *)this + 9);
      if (v22)
      {
        v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
      }
      else
      {
        v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v24)
          v23 = 0;
        else
          v23 = *v24;
      }
      *((float *)this + 171) = ausdk::AUElement::GetParameter(v23, 2u);
      v25 = *((_QWORD *)this + 9);
      if (v25)
      {
        v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
      }
      else
      {
        v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v27)
          v26 = 0;
        else
          v26 = *v27;
      }
      *((float *)this + 172) = ausdk::AUElement::GetParameter(v26, 3u);
      v28 = *((_QWORD *)this + 9);
      if (v28)
      {
        v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
      }
      else
      {
        v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v30)
          v29 = 0;
        else
          v29 = *v30;
      }
      *((float *)this + 173) = ausdk::AUElement::GetParameter(v29, 4u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      v31 = *((_QWORD *)this + 9);
      if (v31)
      {
        v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
      }
      else
      {
        v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v33)
          v32 = 0;
        else
          v32 = *v33;
      }
      *((float *)this + 174) = ausdk::AUElement::GetParameter(v32, 5u);
      v34 = *((_QWORD *)this + 9);
      if (v34)
      {
        v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
      }
      else
      {
        v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v36)
          v35 = 0;
        else
          v35 = *v36;
      }
      *((float *)this + 175) = ausdk::AUElement::GetParameter(v35, 6u);
      v37 = *((_QWORD *)this + 9);
      if (v37)
      {
        v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
      }
      else
      {
        v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v39)
          v38 = 0;
        else
          v38 = *v39;
      }
      *((float *)this + 176) = ausdk::AUElement::GetParameter(v38, 7u);
      v40 = *((_QWORD *)this + 9);
      if (v40)
      {
        v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
      }
      else
      {
        v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v42)
          v41 = 0;
        else
          v41 = *v42;
      }
      *((float *)this + 177) = ausdk::AUElement::GetParameter(v41, 8u);
      v43 = *((_QWORD *)this + 9);
      if (v43)
      {
        v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
      }
      else
      {
        v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v45)
          v44 = 0;
        else
          v44 = *v45;
      }
      *((float *)this + 178) = ausdk::AUElement::GetParameter(v44, 9u);
      v46 = *((_QWORD *)this + 9);
      if (v46)
      {
        v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
      }
      else
      {
        v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v48)
          v47 = 0;
        else
          v47 = *v48;
      }
      *((float *)this + 179) = ausdk::AUElement::GetParameter(v47, 0xAu);
      v49 = *((_QWORD *)this + 9);
      if (v49)
      {
        v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
      }
      else
      {
        v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v51)
          v50 = 0;
        else
          v50 = *v51;
      }
      *((float *)this + 180) = ausdk::AUElement::GetParameter(v50, 0xBu);
      v52 = *((_QWORD *)this + 9);
      if (v52)
      {
        v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
      }
      else
      {
        v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v54)
          v53 = 0;
        else
          v53 = *v54;
      }
      *((float *)this + 181) = ausdk::AUElement::GetParameter(v53, 0xCu);
      v55 = *((_QWORD *)this + 9);
      if (v55)
      {
        v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
      }
      else
      {
        v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v57)
          v56 = 0;
        else
          v56 = *v57;
      }
      Parameter = ausdk::AUElement::GetParameter(v56, 0xDu);
      *((_DWORD *)this + 143) = Parameter;
      v59 = *((_DWORD *)this + 137);
      v60 = (float)*((unsigned int *)this + 136);
      v61 = (float)v59;
      v62 = v59
          * vcvtps_u32_f32((float)(float)((float)(v60 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v59);
      *((_DWORD *)this + 141) = v62;
      if (v62 <= v59)
      {
        *((_DWORD *)this + 141) = v59;
        *((_DWORD *)this + 135) = (float)((float)(v61 / v60) * 1000.0);
        v62 = v59;
      }
      v63 = v59 * vcvtps_u32_f32((float)(float)((float)(v60 * (float)Parameter) / 1000.0) / v61);
      *((_DWORD *)this + 142) = v63;
      if (v63 <= v59)
      {
        *((_DWORD *)this + 142) = v59;
        *((_DWORD *)this + 143) = (float)((float)(v61 / v60) * 1000.0);
        v63 = v59;
      }
      if (v63 <= v62)
      {
        v64 = (float)v62;
      }
      else
      {
        *((_DWORD *)this + 142) = v62;
        v64 = (float)v62;
        *((_DWORD *)this + 143) = (float)((float)((float)v62 / v60) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v64 / v61);
      v65 = *((_QWORD *)this + 9);
      if (v65)
      {
        v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
      }
      else
      {
        v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v67)
          v66 = 0;
        else
          v66 = *v67;
      }
      *((_DWORD *)this + 147) = ausdk::AUElement::GetParameter(v66, 0x13u);
      v68 = *((_QWORD *)this + 9);
      if (v68)
      {
        v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
      }
      else
      {
        v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v70)
          v69 = 0;
        else
          v69 = *v70;
      }
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v69, 0x14u);
      v71 = *((_QWORD *)this + 9);
      if (v71)
      {
        v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
      }
      else
      {
        v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v73)
          v72 = 0;
        else
          v72 = *v73;
      }
      *((float *)this + 149) = ausdk::AUElement::GetParameter(v72, 0x15u);
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      v74 = *((_QWORD *)this + 9);
      if (v74)
      {
        v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
      }
      else
      {
        v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v76)
          v75 = 0;
        else
          v75 = *v76;
      }
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v75, 0xEu);
      *(_OWORD *)((char *)this + 600) = 0u;
      v89 = 0;
      AppFloatValue = CACFPreferencesGetAppFloatValue(CFSTR("ecmicref_log_period_in_seconds"), CFSTR("com.apple.coreaudio"), &v89);
      if (v89)
      {
        v79 = AppFloatValue;
        if (v79 > 0.0)
        {
          *((double *)this + 72) = v79;
          v80 = *((_QWORD *)this + 9);
          if (v80)
          {
            v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
          }
          else
          {
            v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v82)
              v81 = 0;
            else
              v81 = *v82;
          }
          ausdk::AUElement::SetParameter(v81, 0xEu, v79, 0);
          if (AUECMicRefLogScope(void)::once != -1)
            dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
          if (AUECMicRefLogScope(void)::scope)
          {
            v83 = *(NSObject **)AUECMicRefLogScope(void)::scope;
            if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
              goto LABEL_130;
          }
          else
          {
            v83 = MEMORY[0x1E0C81028];
          }
          v77 = os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
          if (v77)
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUECMicRef.cpp";
            v91 = 1024;
            v92 = 267;
            v93 = 2048;
            v94 = v79;
            _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Using logPeriod of (%g)s as specified in defaults write ecmicref_log_period_in_seconds.\n", buf, 0x1Cu);
          }
        }
      }
LABEL_130:
      if (!*((_QWORD *)this + 99) && *((double *)this + 72) > 0.0)
      {
        v88 = 0;
        v84 = caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v77);
        std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>((uint64_t *)buf, &v88, v84);
        v85 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 99, v85);
        std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)buf, 0);
      }
      v86 = AUECMicRef::DoCoreECInit(this);
      (*(void (**)(AUECMicRef *, _QWORD, _QWORD, double))(*(_QWORD *)this + 72))(this, 0, 0, v86);
      if (AUECMicRefLogScope(void)::once != -1)
        dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
      if (AUECMicRefLogScope(void)::scope)
      {
        v87 = *(NSObject **)AUECMicRefLogScope(void)::scope;
        if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
          return 0;
      }
      else
      {
        v87 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUECMicRef.cpp";
        v91 = 1024;
        v92 = 282;
        _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Successfully initialize.\n", buf, 0x12u);
      }
      return 0;
    }
  }
  return result;
}

